
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800c8a0  0800c8a0  0001c8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cab0  0800cab0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800cab0  0800cab0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cab0  0800cab0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cab0  0800cab0  0001cab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cab4  0800cab4  0001cab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f8  200001e0  0800cc98  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d8  0800cc98  000215d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a09d  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e39  00000000  00000000  0004a2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  0004f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  00050800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffd1  00000000  00000000  00051d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fb53  00000000  00000000  00071d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4292  00000000  00000000  0009186c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135afe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005604  00000000  00000000  00135b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c888 	.word	0x0800c888

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800c888 	.word	0x0800c888

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d033      	beq.n	8000494 <setColour+0x7c>
 800042c:	dc49      	bgt.n	80004c2 <setColour+0xaa>
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <setColour+0x20>
 8000432:	2b01      	cmp	r3, #1
 8000434:	d017      	beq.n	8000466 <setColour+0x4e>
 8000436:	e044      	b.n	80004c2 <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	482e      	ldr	r0, [pc, #184]	; (80004f8 <setColour+0xe0>)
 800043e:	2201      	movs	r2, #1
 8000440:	0019      	movs	r1, r3
 8000442:	f002 fc7a 	bl	8002d3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	0219      	lsls	r1, r3, #8
 800044a:	2390      	movs	r3, #144	; 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f002 fc72 	bl	8002d3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4827      	ldr	r0, [pc, #156]	; (80004f8 <setColour+0xe0>)
 800045c:	2200      	movs	r2, #0
 800045e:	0019      	movs	r1, r3
 8000460:	f002 fc6b 	bl	8002d3a <HAL_GPIO_WritePin>
		break;
 8000464:	e044      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4823      	ldr	r0, [pc, #140]	; (80004f8 <setColour+0xe0>)
 800046c:	2200      	movs	r2, #0
 800046e:	0019      	movs	r1, r3
 8000470:	f002 fc63 	bl	8002d3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	0219      	lsls	r1, r3, #8
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2200      	movs	r2, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f002 fc5b 	bl	8002d3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	481b      	ldr	r0, [pc, #108]	; (80004f8 <setColour+0xe0>)
 800048a:	2201      	movs	r2, #1
 800048c:	0019      	movs	r1, r3
 800048e:	f002 fc54 	bl	8002d3a <HAL_GPIO_WritePin>
		break;
 8000492:	e02d      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4817      	ldr	r0, [pc, #92]	; (80004f8 <setColour+0xe0>)
 800049a:	2200      	movs	r2, #0
 800049c:	0019      	movs	r1, r3
 800049e:	f002 fc4c 	bl	8002d3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	0219      	lsls	r1, r3, #8
 80004a6:	2390      	movs	r3, #144	; 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	2201      	movs	r2, #1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 fc44 	bl	8002d3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004b2:	2380      	movs	r3, #128	; 0x80
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	4810      	ldr	r0, [pc, #64]	; (80004f8 <setColour+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	0019      	movs	r1, r3
 80004bc:	f002 fc3d 	bl	8002d3a <HAL_GPIO_WritePin>
		break;
 80004c0:	e016      	b.n	80004f0 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <setColour+0xe0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	0019      	movs	r1, r3
 80004cc:	f002 fc35 	bl	8002d3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	0219      	lsls	r1, r3, #8
 80004d4:	2390      	movs	r3, #144	; 0x90
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2200      	movs	r2, #0
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fc2d 	bl	8002d3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <setColour+0xe0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0019      	movs	r1, r3
 80004ea:	f002 fc26 	bl	8002d3a <HAL_GPIO_WritePin>
		break;
 80004ee:	46c0      	nop			; (mov r8, r8)
	}
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	48000400 	.word	0x48000400

080004fc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	0002      	movs	r2, r0
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	881a      	ldrh	r2, [r3, #0]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	429a      	cmp	r2, r3
 8000512:	d104      	bne.n	800051e <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_GPIO_EXTI_Callback+0x40>)
 8000516:	791a      	ldrb	r2, [r3, #4]
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	429a      	cmp	r2, r3
 8000528:	d104      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_GPIO_EXTI_Callback+0x40>)
 800052c:	791a      	ldrb	r2, [r3, #4]
 800052e:	2104      	movs	r1, #4
 8000530:	430a      	orrs	r2, r1
 8000532:	711a      	strb	r2, [r3, #4]
	}
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000584 	.word	0x20000584

08000540 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800054c:	429a      	cmp	r2, r3
 800054e:	d104      	bne.n	800055a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	2101      	movs	r1, #1
 8000556:	430a      	orrs	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
	}
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	2000053c 	.word	0x2000053c
 8000568:	20000584 	.word	0x20000584

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f001 fd16 	bl	8001fa0 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 8000574:	2064      	movs	r0, #100	; 0x64
 8000576:	f000 ff18 	bl	80013aa <createBuffer>
 800057a:	0002      	movs	r2, r0
 800057c:	4b36      	ldr	r3, [pc, #216]	; (8000658 <main+0xec>)
 800057e:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 ff12 	bl	80013aa <createBuffer>
 8000586:	0002      	movs	r2, r0
 8000588:	4b34      	ldr	r3, [pc, #208]	; (800065c <main+0xf0>)
 800058a:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 800058c:	23fa      	movs	r3, #250	; 0xfa
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	0018      	movs	r0, r3
 8000592:	f000 ff0a 	bl	80013aa <createBuffer>
 8000596:	0002      	movs	r2, r0
 8000598:	4b31      	ldr	r3, [pc, #196]	; (8000660 <main+0xf4>)
 800059a:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 800059c:	23fa      	movs	r3, #250	; 0xfa
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 ff02 	bl	80013aa <createBuffer>
 80005a6:	0002      	movs	r2, r0
 80005a8:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <main+0xf8>)
 80005aa:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f862 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 faca 	bl	8000b48 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005b4:	f00a ff96 	bl	800b4e4 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80005b8:	f000 faa8 	bl	8000b0c <MX_DMA_Init>
  MX_ADC_Init();
 80005bc:	f000 f8c6 	bl	800074c <MX_ADC_Init>
  MX_SPI1_Init();
 80005c0:	f000 f9e2 	bl	8000988 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 fa72 	bl	8000aac <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80005c8:	f000 fa24 	bl	8000a14 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);

  LOAD_MIN_OFF;
 80005cc:	4b26      	ldr	r3, [pc, #152]	; (8000668 <main+0xfc>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fbb1 	bl	8002d3a <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <main+0xfc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 fbab 	bl	8002d3a <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 80005e4:	f000 ffec 	bl	80015c0 <regInit>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d004      	beq.n	80005f6 <main+0x8a>
  {
	  flags.conErr = 1;
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <main+0x100>)
 80005ee:	7e1a      	ldrb	r2, [r3, #24]
 80005f0:	2104      	movs	r1, #4
 80005f2:	430a      	orrs	r2, r1
 80005f4:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <main+0x104>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f005 fe0d 	bl	8006218 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 80005fe:	4b1b      	ldr	r3, [pc, #108]	; (800066c <main+0x100>)
 8000600:	7c1a      	ldrb	r2, [r3, #16]
 8000602:	2102      	movs	r1, #2
 8000604:	430a      	orrs	r2, r1
 8000606:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <main+0x100>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2201      	movs	r2, #1
 800060e:	4013      	ands	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f8      	beq.n	8000608 <main+0x9c>
	  {
		  clkHandler();
 8000616:	f000 fb83 	bl	8000d20 <clkHandler>
		  buttonDebounce();
 800061a:	f000 fbff 	bl	8000e1c <buttonDebounce>
		  comHandler();
 800061e:	f000 fc6d 	bl	8000efc <comHandler>
		  UI_Handler();
 8000622:	f000 fd7d 	bl	8001120 <UI_Handler>
		  testHandler();
 8000626:	f001 fa9d 	bl	8001b64 <testHandler>

		  flags.meas.measComplete = 0;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <main+0x100>)
 800062c:	7d1a      	ldrb	r2, [r3, #20]
 800062e:	2102      	movs	r1, #2
 8000630:	438a      	bics	r2, r1
 8000632:	751a      	strb	r2, [r3, #20]
		  if(flags.meas.measRequest)
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <main+0x100>)
 8000636:	7d1b      	ldrb	r3, [r3, #20]
 8000638:	2201      	movs	r2, #1
 800063a:	4013      	ands	r3, r2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0e2      	beq.n	8000608 <main+0x9c>
		  {
			  flags.meas.measRequest = 0;
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <main+0x100>)
 8000644:	7d1a      	ldrb	r2, [r3, #20]
 8000646:	2101      	movs	r1, #1
 8000648:	438a      	bics	r2, r1
 800064a:	751a      	strb	r2, [r3, #20]
			  flags.meas.measComplete = 1;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <main+0x100>)
 800064e:	7d1a      	ldrb	r2, [r3, #20]
 8000650:	2102      	movs	r1, #2
 8000652:	430a      	orrs	r2, r1
 8000654:	751a      	strb	r2, [r3, #20]
	  if(flags.time.ten_ms)	// 10 ms
 8000656:	e7d7      	b.n	8000608 <main+0x9c>
 8000658:	20000444 	.word	0x20000444
 800065c:	2000062c 	.word	0x2000062c
 8000660:	200010d0 	.word	0x200010d0
 8000664:	200004d4 	.word	0x200004d4
 8000668:	48000800 	.word	0x48000800
 800066c:	20000584 	.word	0x20000584
 8000670:	2000053c 	.word	0x2000053c

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b099      	sub	sp, #100	; 0x64
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	242c      	movs	r4, #44	; 0x2c
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2334      	movs	r3, #52	; 0x34
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f00b fcd1 	bl	800c02c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	231c      	movs	r3, #28
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	0018      	movs	r0, r3
 8000690:	2310      	movs	r3, #16
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f00b fcc9 	bl	800c02c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069a:	003b      	movs	r3, r7
 800069c:	0018      	movs	r0, r3
 800069e:	231c      	movs	r3, #28
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f00b fcc2 	bl	800c02c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80006a8:	0021      	movs	r1, r4
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2232      	movs	r2, #50	; 0x32
 80006ae:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2201      	movs	r2, #1
 80006b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2201      	movs	r2, #1
 80006ba:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2201      	movs	r2, #1
 80006c0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2210      	movs	r2, #16
 80006c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2210      	movs	r2, #16
 80006cc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2202      	movs	r2, #2
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	0212      	lsls	r2, r2, #8
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	0352      	lsls	r2, r2, #13
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f004 f9eb 	bl	8004ac8 <HAL_RCC_OscConfig>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006f6:	f000 fe53 	bl	80013a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	211c      	movs	r1, #28
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2207      	movs	r2, #7
 8000700:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2202      	movs	r2, #2
 8000706:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2101      	movs	r1, #1
 8000718:	0018      	movs	r0, r3
 800071a:	f004 fd5b 	bl	80051d4 <HAL_RCC_ClockConfig>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000722:	f000 fe3d 	bl	80013a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000726:	003b      	movs	r3, r7
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	0292      	lsls	r2, r2, #10
 800072c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800072e:	003b      	movs	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000734:	003b      	movs	r3, r7
 8000736:	0018      	movs	r0, r3
 8000738:	f004 fec8 	bl	80054cc <HAL_RCCEx_PeriphCLKConfig>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000740:	f000 fe2e 	bl	80013a0 <Error_Handler>
  }
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b019      	add	sp, #100	; 0x64
 800074a:	bd90      	pop	{r4, r7, pc}

0800074c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	0018      	movs	r0, r3
 8000756:	230c      	movs	r3, #12
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f00b fc66 	bl	800c02c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000760:	4b87      	ldr	r3, [pc, #540]	; (8000980 <MX_ADC_Init+0x234>)
 8000762:	4a88      	ldr	r2, [pc, #544]	; (8000984 <MX_ADC_Init+0x238>)
 8000764:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000766:	4b86      	ldr	r3, [pc, #536]	; (8000980 <MX_ADC_Init+0x234>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800076c:	4b84      	ldr	r3, [pc, #528]	; (8000980 <MX_ADC_Init+0x234>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000772:	4b83      	ldr	r3, [pc, #524]	; (8000980 <MX_ADC_Init+0x234>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000778:	4b81      	ldr	r3, [pc, #516]	; (8000980 <MX_ADC_Init+0x234>)
 800077a:	2201      	movs	r2, #1
 800077c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b80      	ldr	r3, [pc, #512]	; (8000980 <MX_ADC_Init+0x234>)
 8000780:	2204      	movs	r2, #4
 8000782:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b7e      	ldr	r3, [pc, #504]	; (8000980 <MX_ADC_Init+0x234>)
 8000786:	2200      	movs	r2, #0
 8000788:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800078a:	4b7d      	ldr	r3, [pc, #500]	; (8000980 <MX_ADC_Init+0x234>)
 800078c:	2200      	movs	r2, #0
 800078e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000790:	4b7b      	ldr	r3, [pc, #492]	; (8000980 <MX_ADC_Init+0x234>)
 8000792:	2200      	movs	r2, #0
 8000794:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b7a      	ldr	r3, [pc, #488]	; (8000980 <MX_ADC_Init+0x234>)
 8000798:	2200      	movs	r2, #0
 800079a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b78      	ldr	r3, [pc, #480]	; (8000980 <MX_ADC_Init+0x234>)
 800079e:	22c2      	movs	r2, #194	; 0xc2
 80007a0:	32ff      	adds	r2, #255	; 0xff
 80007a2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a4:	4b76      	ldr	r3, [pc, #472]	; (8000980 <MX_ADC_Init+0x234>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80007aa:	4b75      	ldr	r3, [pc, #468]	; (8000980 <MX_ADC_Init+0x234>)
 80007ac:	2224      	movs	r2, #36	; 0x24
 80007ae:	2100      	movs	r1, #0
 80007b0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b2:	4b73      	ldr	r3, [pc, #460]	; (8000980 <MX_ADC_Init+0x234>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007b8:	4b71      	ldr	r3, [pc, #452]	; (8000980 <MX_ADC_Init+0x234>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 fc78 	bl	80020b0 <HAL_ADC_Init>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80007c4:	f000 fdec 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	0152      	lsls	r2, r2, #5
 80007d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	0552      	lsls	r2, r2, #21
 80007dc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007de:	1d3a      	adds	r2, r7, #4
 80007e0:	4b67      	ldr	r3, [pc, #412]	; (8000980 <MX_ADC_Init+0x234>)
 80007e2:	0011      	movs	r1, r2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fda3 	bl	8002330 <HAL_ADC_ConfigChannel>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80007ee:	f000 fdd7 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2201      	movs	r2, #1
 80007f6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007f8:	1d3a      	adds	r2, r7, #4
 80007fa:	4b61      	ldr	r3, [pc, #388]	; (8000980 <MX_ADC_Init+0x234>)
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 fd96 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000808:	f000 fdca 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2202      	movs	r2, #2
 8000810:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000812:	1d3a      	adds	r2, r7, #4
 8000814:	4b5a      	ldr	r3, [pc, #360]	; (8000980 <MX_ADC_Init+0x234>)
 8000816:	0011      	movs	r1, r2
 8000818:	0018      	movs	r0, r3
 800081a:	f001 fd89 	bl	8002330 <HAL_ADC_ConfigChannel>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000822:	f000 fdbd 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2203      	movs	r2, #3
 800082a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800082c:	1d3a      	adds	r2, r7, #4
 800082e:	4b54      	ldr	r3, [pc, #336]	; (8000980 <MX_ADC_Init+0x234>)
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fd7c 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 800083c:	f000 fdb0 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2204      	movs	r2, #4
 8000844:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000846:	1d3a      	adds	r2, r7, #4
 8000848:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <MX_ADC_Init+0x234>)
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f001 fd6f 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000856:	f000 fda3 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2205      	movs	r2, #5
 800085e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000860:	1d3a      	adds	r2, r7, #4
 8000862:	4b47      	ldr	r3, [pc, #284]	; (8000980 <MX_ADC_Init+0x234>)
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f001 fd62 	bl	8002330 <HAL_ADC_ConfigChannel>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000870:	f000 fd96 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2206      	movs	r2, #6
 8000878:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800087a:	1d3a      	adds	r2, r7, #4
 800087c:	4b40      	ldr	r3, [pc, #256]	; (8000980 <MX_ADC_Init+0x234>)
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f001 fd55 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800088a:	f000 fd89 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000894:	1d3a      	adds	r2, r7, #4
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <MX_ADC_Init+0x234>)
 8000898:	0011      	movs	r1, r2
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fd48 	bl	8002330 <HAL_ADC_ConfigChannel>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80008a4:	f000 fd7c 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2208      	movs	r2, #8
 80008ac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ae:	1d3a      	adds	r2, r7, #4
 80008b0:	4b33      	ldr	r3, [pc, #204]	; (8000980 <MX_ADC_Init+0x234>)
 80008b2:	0011      	movs	r1, r2
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 fd3b 	bl	8002330 <HAL_ADC_ConfigChannel>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 80008be:	f000 fd6f 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2209      	movs	r2, #9
 80008c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008c8:	1d3a      	adds	r2, r7, #4
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <MX_ADC_Init+0x234>)
 80008cc:	0011      	movs	r1, r2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fd2e 	bl	8002330 <HAL_ADC_ConfigChannel>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC_Init+0x190>
  {
    Error_Handler();
 80008d8:	f000 fd62 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	220a      	movs	r2, #10
 80008e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008e2:	1d3a      	adds	r2, r7, #4
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_ADC_Init+0x234>)
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 fd21 	bl	8002330 <HAL_ADC_ConfigChannel>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 80008f2:	f000 fd55 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	220b      	movs	r2, #11
 80008fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008fc:	1d3a      	adds	r2, r7, #4
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_ADC_Init+0x234>)
 8000900:	0011      	movs	r1, r2
 8000902:	0018      	movs	r0, r3
 8000904:	f001 fd14 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 800090c:	f000 fd48 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000916:	1d3a      	adds	r2, r7, #4
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_ADC_Init+0x234>)
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f001 fd07 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d001      	beq.n	800092a <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000926:	f000 fd3b 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	220d      	movs	r2, #13
 800092e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000930:	1d3a      	adds	r2, r7, #4
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_ADC_Init+0x234>)
 8000934:	0011      	movs	r1, r2
 8000936:	0018      	movs	r0, r3
 8000938:	f001 fcfa 	bl	8002330 <HAL_ADC_ConfigChannel>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000940:	f000 fd2e 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	220e      	movs	r2, #14
 8000948:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800094a:	1d3a      	adds	r2, r7, #4
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_ADC_Init+0x234>)
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fced 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <MX_ADC_Init+0x212>
  {
    Error_Handler();
 800095a:	f000 fd21 	bl	80013a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	220f      	movs	r2, #15
 8000962:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000964:	1d3a      	adds	r2, r7, #4
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_ADC_Init+0x234>)
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f001 fce0 	bl	8002330 <HAL_ADC_ConfigChannel>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000974:	f000 fd14 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b004      	add	sp, #16
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200005e4 	.word	0x200005e4
 8000984:	40012400 	.word	0x40012400

08000988 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_SPI1_Init+0x80>)
 800098e:	4a1f      	ldr	r2, [pc, #124]	; (8000a0c <MX_SPI1_Init+0x84>)
 8000990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_SPI1_Init+0x80>)
 8000994:	2282      	movs	r2, #130	; 0x82
 8000996:	0052      	lsls	r2, r2, #1
 8000998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_SPI1_Init+0x80>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009a2:	22e0      	movs	r2, #224	; 0xe0
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	0092      	lsls	r2, r2, #2
 80009ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009be:	2238      	movs	r2, #56	; 0x38
 80009c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009d6:	2207      	movs	r2, #7
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009e2:	2208      	movs	r2, #8
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_SPI1_Init+0x80>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f004 fe6d 	bl	80056c8 <HAL_SPI_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009f2:	f000 fcd5 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_SPI1_Init+0x88>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	0018      	movs	r0, r3
 80009fe:	f002 f99c 	bl	8002d3a <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200004d8 	.word	0x200004d8
 8000a0c:	40013000 	.word	0x40013000
 8000a10:	48000400 	.word	0x48000400

08000a14 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	231c      	movs	r3, #28
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f00b fb02 	bl	800c02c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <MX_TIM14_Init+0x90>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a30:	222f      	movs	r2, #47	; 0x2f
 8000a32:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a3c:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <MX_TIM14_Init+0x94>)
 8000a3e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f005 fb92 	bl	8006178 <HAL_TIM_Base_Init>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000a58:	f000 fca2 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f005 fc2c 	bl	80062bc <HAL_TIM_OC_Init>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 fc9a 	bl	80013a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a84:	1d39      	adds	r1, r7, #4
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_TIM14_Init+0x8c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f005 fd84 	bl	8006598 <HAL_TIM_OC_ConfigChannel>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000a94:	f000 fc84 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b008      	add	sp, #32
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000053c 	.word	0x2000053c
 8000aa4:	40002000 	.word	0x40002000
 8000aa8:	0000270f 	.word	0x0000270f

08000aac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <MX_USART3_UART_Init+0x5c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ab8:	2296      	movs	r2, #150	; 0x96
 8000aba:	0212      	lsls	r2, r2, #8
 8000abc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000af0:	0018      	movs	r0, r3
 8000af2:	f006 f855 	bl	8006ba0 <HAL_UART_Init>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 fc51 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000450 	.word	0x20000450
 8000b08:	40004800 	.word	0x40004800

08000b0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_DMA_Init+0x38>)
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_DMA_Init+0x38>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_DMA_Init+0x38>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	2201      	movs	r2, #1
 8000b24:	4013      	ands	r3, r2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2009      	movs	r0, #9
 8000b30:	f001 fdb8 	bl	80026a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b34:	2009      	movs	r0, #9
 8000b36:	f001 fdca 	bl	80026ce <HAL_NVIC_EnableIRQ>

}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	40021000 	.word	0x40021000

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b08b      	sub	sp, #44	; 0x2c
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	2414      	movs	r4, #20
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	0018      	movs	r0, r3
 8000b54:	2314      	movs	r3, #20
 8000b56:	001a      	movs	r2, r3
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f00b fa67 	bl	800c02c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	4b6b      	ldr	r3, [pc, #428]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000b60:	695a      	ldr	r2, [r3, #20]
 8000b62:	4b6a      	ldr	r3, [pc, #424]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	03c9      	lsls	r1, r1, #15
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	4b67      	ldr	r3, [pc, #412]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000b6e:	695a      	ldr	r2, [r3, #20]
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	03db      	lsls	r3, r3, #15
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b64      	ldr	r3, [pc, #400]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000b7c:	695a      	ldr	r2, [r3, #20]
 8000b7e:	4b63      	ldr	r3, [pc, #396]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	0309      	lsls	r1, r1, #12
 8000b84:	430a      	orrs	r2, r1
 8000b86:	615a      	str	r2, [r3, #20]
 8000b88:	4b60      	ldr	r3, [pc, #384]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000b8a:	695a      	ldr	r2, [r3, #20]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	031b      	lsls	r3, r3, #12
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b5d      	ldr	r3, [pc, #372]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	4b5c      	ldr	r3, [pc, #368]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	0289      	lsls	r1, r1, #10
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	4b59      	ldr	r3, [pc, #356]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000ba6:	695a      	ldr	r2, [r3, #20]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	029b      	lsls	r3, r3, #10
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b56      	ldr	r3, [pc, #344]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	4b55      	ldr	r3, [pc, #340]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	02c9      	lsls	r1, r1, #11
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	4b52      	ldr	r3, [pc, #328]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000bc2:	695a      	ldr	r2, [r3, #20]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	02db      	lsls	r3, r3, #11
 8000bc8:	4013      	ands	r3, r2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	4b4f      	ldr	r3, [pc, #316]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000bd0:	695a      	ldr	r2, [r3, #20]
 8000bd2:	4b4e      	ldr	r3, [pc, #312]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0349      	lsls	r1, r1, #13
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	615a      	str	r2, [r3, #20]
 8000bdc:	4b4b      	ldr	r3, [pc, #300]	; (8000d0c <MX_GPIO_Init+0x1c4>)
 8000bde:	695a      	ldr	r2, [r3, #20]
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	035b      	lsls	r3, r3, #13
 8000be4:	4013      	ands	r3, r2
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000bea:	4949      	ldr	r1, [pc, #292]	; (8000d10 <MX_GPIO_Init+0x1c8>)
 8000bec:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <MX_GPIO_Init+0x1cc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 f8a2 	bl	8002d3a <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000bf6:	239e      	movs	r3, #158	; 0x9e
 8000bf8:	015b      	lsls	r3, r3, #5
 8000bfa:	4847      	ldr	r0, [pc, #284]	; (8000d18 <MX_GPIO_Init+0x1d0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	0019      	movs	r1, r3
 8000c00:	f002 f89b 	bl	8002d3a <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	0219      	lsls	r1, r3, #8
 8000c08:	2390      	movs	r3, #144	; 0x90
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f002 f893 	bl	8002d3a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	4a3e      	ldr	r2, [pc, #248]	; (8000d10 <MX_GPIO_Init+0x1c8>)
 8000c18:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	4a39      	ldr	r2, [pc, #228]	; (8000d14 <MX_GPIO_Init+0x1cc>)
 8000c30:	0019      	movs	r1, r3
 8000c32:	0010      	movs	r0, r2
 8000c34:	f001 feec 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000c38:	0021      	movs	r1, r4
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	229e      	movs	r2, #158	; 0x9e
 8000c3e:	0152      	lsls	r2, r2, #5
 8000c40:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	000c      	movs	r4, r1
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2201      	movs	r2, #1
 8000c48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	4a2f      	ldr	r2, [pc, #188]	; (8000d18 <MX_GPIO_Init+0x1d0>)
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	0010      	movs	r0, r2
 8000c5e:	f001 fed7 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	22c0      	movs	r2, #192	; 0xc0
 8000c66:	0092      	lsls	r2, r2, #2
 8000c68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2288      	movs	r2, #136	; 0x88
 8000c6e:	0352      	lsls	r2, r2, #13
 8000c70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2202      	movs	r2, #2
 8000c76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	193a      	adds	r2, r7, r4
 8000c7a:	2390      	movs	r3, #144	; 0x90
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 fec5 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	00d2      	lsls	r2, r2, #3
 8000c8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	193a      	adds	r2, r7, r4
 8000c9c:	2390      	movs	r3, #144	; 0x90
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 feb4 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000ca8:	0021      	movs	r1, r4
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	0212      	lsls	r2, r2, #8
 8000cb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	000c      	movs	r4, r1
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	193a      	adds	r2, r7, r4
 8000cc8:	2390      	movs	r3, #144	; 0x90
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f001 fe9e 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <MX_GPIO_Init+0x1d4>)
 8000cea:	0019      	movs	r1, r3
 8000cec:	0010      	movs	r0, r2
 8000cee:	f001 fe8f 	bl	8002a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2007      	movs	r0, #7
 8000cf8:	f001 fcd4 	bl	80026a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cfc:	2007      	movs	r0, #7
 8000cfe:	f001 fce6 	bl	80026ce <HAL_NVIC_EnableIRQ>

}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b00b      	add	sp, #44	; 0x2c
 8000d08:	bd90      	pop	{r4, r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	0000f3c4 	.word	0x0000f3c4
 8000d14:	48000400 	.word	0x48000400
 8000d18:	48000800 	.word	0x48000800
 8000d1c:	48000c00 	.word	0x48000c00

08000d20 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	flags.time.ten_ms = 0;
 8000d24:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <clkHandler+0xf4>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	2101      	movs	r1, #1
 8000d2a:	438a      	bics	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 8000d2e:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <clkHandler+0xf4>)
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	2102      	movs	r1, #2
 8000d34:	438a      	bics	r2, r1
 8000d36:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8000d38:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <clkHandler+0xf4>)
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	438a      	bics	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8000d42:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <clkHandler+0xf4>)
 8000d44:	781a      	ldrb	r2, [r3, #0]
 8000d46:	2108      	movs	r1, #8
 8000d48:	438a      	bics	r2, r1
 8000d4a:	701a      	strb	r2, [r3, #0]
	sysTime[SYSTIME_TEN_MS]++;
 8000d4c:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <clkHandler+0xf8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	4b31      	ldr	r3, [pc, #196]	; (8000e18 <clkHandler+0xf8>)
 8000d54:	601a      	str	r2, [r3, #0]
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//1 s
 8000d56:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <clkHandler+0xf8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	210a      	movs	r1, #10
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff fa6b 	bl	8000238 <__aeabi_uidivmod>
 8000d62:	1e0b      	subs	r3, r1, #0
 8000d64:	d109      	bne.n	8000d7a <clkHandler+0x5a>
	{
		sysTime[SYSTIME_SEC]++;
 8000d66:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <clkHandler+0xf8>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <clkHandler+0xf8>)
 8000d6e:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <clkHandler+0xf4>)
 8000d72:	781a      	ldrb	r2, [r3, #0]
 8000d74:	2102      	movs	r1, #2
 8000d76:	430a      	orrs	r2, r1
 8000d78:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)
 8000d7a:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <clkHandler+0xf4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4013      	ands	r3, r2
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d042      	beq.n	8000e0e <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8000d88:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <clkHandler+0xf8>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	213c      	movs	r1, #60	; 0x3c
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff fa52 	bl	8000238 <__aeabi_uidivmod>
 8000d94:	1e0b      	subs	r3, r1, #0
 8000d96:	d110      	bne.n	8000dba <clkHandler+0x9a>
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <clkHandler+0xf8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00c      	beq.n	8000dba <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <clkHandler+0xf8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <clkHandler+0xf8>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <clkHandler+0xf8>)
 8000dae:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <clkHandler+0xf4>)
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	2104      	movs	r1, #4
 8000db6:	430a      	orrs	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <clkHandler+0xf4>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d022      	beq.n	8000e0e <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <clkHandler+0xf8>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	213c      	movs	r1, #60	; 0x3c
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff fa32 	bl	8000238 <__aeabi_uidivmod>
 8000dd4:	1e0b      	subs	r3, r1, #0
 8000dd6:	d11a      	bne.n	8000e0e <clkHandler+0xee>
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <clkHandler+0xf8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d016      	beq.n	8000e0e <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <clkHandler+0xf8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <clkHandler+0xf8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <clkHandler+0xf8>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <clkHandler+0xf8>)
 8000df4:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <clkHandler+0xf4>)
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	2108      	movs	r1, #8
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <clkHandler+0xf8>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b16      	cmp	r3, #22
 8000e06:	d902      	bls.n	8000e0e <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <clkHandler+0xf8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000584 	.word	0x20000584
 8000e18:	200001fc 	.word	0x200001fc

08000e1c <buttonDebounce>:

void buttonDebounce(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	if(flags.buttons.butt0_int)
 8000e20:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <buttonDebounce+0xd4>)
 8000e22:	791b      	ldrb	r3, [r3, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	4013      	ands	r3, r2
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d02a      	beq.n	8000e84 <buttonDebounce+0x68>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	009a      	lsls	r2, r3, #2
 8000e32:	2390      	movs	r3, #144	; 0x90
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f001 ff61 	bl	8002d00 <HAL_GPIO_ReadPin>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d106      	bne.n	8000e52 <buttonDebounce+0x36>
		{
			button0_Debounce++;
 8000e44:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <buttonDebounce+0xd8>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <buttonDebounce+0xd8>)
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e007      	b.n	8000e62 <buttonDebounce+0x46>
		}
		else
		{
			button0_Debounce = 0;
 8000e52:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <buttonDebounce+0xd8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8000e58:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <buttonDebounce+0xd4>)
 8000e5a:	791a      	ldrb	r2, [r3, #4]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	438a      	bics	r2, r1
 8000e60:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <buttonDebounce+0xd8>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d90c      	bls.n	8000e84 <buttonDebounce+0x68>
		{
			flags.buttons.butt0_ver = 1;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <buttonDebounce+0xd4>)
 8000e6c:	791a      	ldrb	r2, [r3, #4]
 8000e6e:	2102      	movs	r1, #2
 8000e70:	430a      	orrs	r2, r1
 8000e72:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8000e74:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <buttonDebounce+0xd4>)
 8000e76:	791a      	ldrb	r2, [r3, #4]
 8000e78:	2101      	movs	r1, #1
 8000e7a:	438a      	bics	r2, r1
 8000e7c:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <buttonDebounce+0xd8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <buttonDebounce+0xd4>)
 8000e86:	791b      	ldrb	r3, [r3, #4]
 8000e88:	2204      	movs	r2, #4
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d02a      	beq.n	8000ee8 <buttonDebounce+0xcc>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	005a      	lsls	r2, r3, #1
 8000e96:	2390      	movs	r3, #144	; 0x90
 8000e98:	05db      	lsls	r3, r3, #23
 8000e9a:	0011      	movs	r1, r2
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 ff2f 	bl	8002d00 <HAL_GPIO_ReadPin>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d106      	bne.n	8000eb6 <buttonDebounce+0x9a>
		{
			button1_Debounce++;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <buttonDebounce+0xdc>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <buttonDebounce+0xdc>)
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	e007      	b.n	8000ec6 <buttonDebounce+0xaa>
		}
		else
		{
			button1_Debounce = 0;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <buttonDebounce+0xdc>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <buttonDebounce+0xd4>)
 8000ebe:	791a      	ldrb	r2, [r3, #4]
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	438a      	bics	r2, r1
 8000ec4:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <buttonDebounce+0xdc>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d90c      	bls.n	8000ee8 <buttonDebounce+0xcc>
		{
			flags.buttons.butt1_ver = 1;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <buttonDebounce+0xd4>)
 8000ed0:	791a      	ldrb	r2, [r3, #4]
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <buttonDebounce+0xd4>)
 8000eda:	791a      	ldrb	r2, [r3, #4]
 8000edc:	2104      	movs	r1, #4
 8000ede:	438a      	bics	r2, r1
 8000ee0:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <buttonDebounce+0xdc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	20000584 	.word	0x20000584
 8000ef4:	2000020c 	.word	0x2000020c
 8000ef8:	2000020d 	.word	0x2000020d

08000efc <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efe:	b099      	sub	sp, #100	; 0x64
 8000f00:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 8000f02:	4b81      	ldr	r3, [pc, #516]	; (8001108 <comHandler+0x20c>)
 8000f04:	7a1b      	ldrb	r3, [r3, #8]
 8000f06:	2201      	movs	r2, #1
 8000f08:	4013      	ands	r3, r2
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d042      	beq.n	8000f96 <comHandler+0x9a>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000f10:	e02e      	b.n	8000f70 <comHandler+0x74>
		{
#ifdef __DEBUG_INST__
			uint8_t txt[30];
#endif

			switch(instruction)
 8000f12:	232f      	movs	r3, #47	; 0x2f
 8000f14:	2220      	movs	r2, #32
 8000f16:	4694      	mov	ip, r2
 8000f18:	44bc      	add	ip, r7
 8000f1a:	4463      	add	r3, ip
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b73      	cmp	r3, #115	; 0x73
 8000f20:	d008      	beq.n	8000f34 <comHandler+0x38>
 8000f22:	dc1f      	bgt.n	8000f64 <comHandler+0x68>
 8000f24:	2b70      	cmp	r3, #112	; 0x70
 8000f26:	d011      	beq.n	8000f4c <comHandler+0x50>
 8000f28:	dc1c      	bgt.n	8000f64 <comHandler+0x68>
 8000f2a:	2b63      	cmp	r3, #99	; 0x63
 8000f2c:	d008      	beq.n	8000f40 <comHandler+0x44>
 8000f2e:	2b6b      	cmp	r3, #107	; 0x6b
 8000f30:	d012      	beq.n	8000f58 <comHandler+0x5c>
 8000f32:	e017      	b.n	8000f64 <comHandler+0x68>
			{
			case 's': ;
				//___Start testu___//
				flags.instructions.startRequest = 1;
 8000f34:	4b74      	ldr	r3, [pc, #464]	; (8001108 <comHandler+0x20c>)
 8000f36:	7b1a      	ldrb	r2, [r3, #12]
 8000f38:	2101      	movs	r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f3e:	e017      	b.n	8000f70 <comHandler+0x74>

			case'c': ;
				//___Ukončení___//
				flags.instructions.stopRequest = 1;
 8000f40:	4b71      	ldr	r3, [pc, #452]	; (8001108 <comHandler+0x20c>)
 8000f42:	7b1a      	ldrb	r2, [r3, #12]
 8000f44:	2102      	movs	r1, #2
 8000f46:	430a      	orrs	r2, r1
 8000f48:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f4a:	e011      	b.n	8000f70 <comHandler+0x74>

			case'p': ;
				//___Pauza___//
				flags.instructions.pauseRequest = 1;
 8000f4c:	4b6e      	ldr	r3, [pc, #440]	; (8001108 <comHandler+0x20c>)
 8000f4e:	7b1a      	ldrb	r2, [r3, #12]
 8000f50:	2104      	movs	r1, #4
 8000f52:	430a      	orrs	r2, r1
 8000f54:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f56:	e00b      	b.n	8000f70 <comHandler+0x74>

			case'k': ;
				//___Kalibrace___//
				flags.instructions.calibRequest = 1;
 8000f58:	4b6b      	ldr	r3, [pc, #428]	; (8001108 <comHandler+0x20c>)
 8000f5a:	7b1a      	ldrb	r2, [r3, #12]
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f62:	e005      	b.n	8000f70 <comHandler+0x74>

			default: ;
				//___Neplatný příkaz___//
				flags.instructions.unknownInst = 1;
 8000f64:	4b68      	ldr	r3, [pc, #416]	; (8001108 <comHandler+0x20c>)
 8000f66:	7b1a      	ldrb	r2, [r3, #12]
 8000f68:	2110      	movs	r1, #16
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f6e:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000f70:	4b66      	ldr	r3, [pc, #408]	; (800110c <comHandler+0x210>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	222f      	movs	r2, #47	; 0x2f
 8000f76:	2120      	movs	r1, #32
 8000f78:	468c      	mov	ip, r1
 8000f7a:	44bc      	add	ip, r7
 8000f7c:	4462      	add	r2, ip
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f000 faa6 	bl	80014d2 <pop>
 8000f86:	0003      	movs	r3, r0
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d1c2      	bne.n	8000f12 <comHandler+0x16>
			}
		}
		flags.data_received = 0;
 8000f8c:	4b5e      	ldr	r3, [pc, #376]	; (8001108 <comHandler+0x20c>)
 8000f8e:	7a1a      	ldrb	r2, [r3, #8]
 8000f90:	2101      	movs	r1, #1
 8000f92:	438a      	bics	r2, r1
 8000f94:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)
 8000f96:	4b5c      	ldr	r3, [pc, #368]	; (8001108 <comHandler+0x20c>)
 8000f98:	7e1b      	ldrb	r3, [r3, #24]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d01d      	beq.n	8000fe0 <comHandler+0xe4>
	{
		char txt[] = {"Test progress\n"};
 8000fa4:	2020      	movs	r0, #32
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	181b      	adds	r3, r3, r0
 8000fac:	4a58      	ldr	r2, [pc, #352]	; (8001110 <comHandler+0x214>)
 8000fae:	ca32      	ldmia	r2!, {r1, r4, r5}
 8000fb0:	c332      	stmia	r3!, {r1, r4, r5}
 8000fb2:	8811      	ldrh	r1, [r2, #0]
 8000fb4:	8019      	strh	r1, [r3, #0]
 8000fb6:	7892      	ldrb	r2, [r2, #2]
 8000fb8:	709a      	strb	r2, [r3, #2]
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000fba:	4b56      	ldr	r3, [pc, #344]	; (8001114 <comHandler+0x218>)
 8000fbc:	681e      	ldr	r6, [r3, #0]
 8000fbe:	0004      	movs	r4, r0
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	181b      	adds	r3, r3, r0
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f7ff f89e 	bl	8000108 <strlen>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	001a      	movs	r2, r3
 8000fd0:	0020      	movs	r0, r4
 8000fd2:	2320      	movs	r3, #32
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	181b      	adds	r3, r3, r0
 8000fd8:	0019      	movs	r1, r3
 8000fda:	0030      	movs	r0, r6
 8000fdc:	f000 fa51 	bl	8001482 <pushStr>
	}

	if(flags.meas.measComplete)
 8000fe0:	4b49      	ldr	r3, [pc, #292]	; (8001108 <comHandler+0x20c>)
 8000fe2:	7d1b      	ldrb	r3, [r3, #20]
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d01b      	beq.n	8001026 <comHandler+0x12a>
	{
		char txt[] = {"Measure\n"};
 8000fee:	2114      	movs	r1, #20
 8000ff0:	2320      	movs	r3, #32
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	185b      	adds	r3, r3, r1
 8000ff6:	4a48      	ldr	r2, [pc, #288]	; (8001118 <comHandler+0x21c>)
 8000ff8:	ca11      	ldmia	r2!, {r0, r4}
 8000ffa:	c311      	stmia	r3!, {r0, r4}
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	701a      	strb	r2, [r3, #0]
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8001000:	4b44      	ldr	r3, [pc, #272]	; (8001114 <comHandler+0x218>)
 8001002:	681e      	ldr	r6, [r3, #0]
 8001004:	000c      	movs	r4, r1
 8001006:	2320      	movs	r3, #32
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	185b      	adds	r3, r3, r1
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff f87b 	bl	8000108 <strlen>
 8001012:	0003      	movs	r3, r0
 8001014:	001a      	movs	r2, r3
 8001016:	0021      	movs	r1, r4
 8001018:	2320      	movs	r3, #32
 800101a:	18fb      	adds	r3, r7, r3
 800101c:	185b      	adds	r3, r3, r1
 800101e:	0019      	movs	r1, r3
 8001020:	0030      	movs	r0, r6
 8001022:	f000 fa2e 	bl	8001482 <pushStr>
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <comHandler+0x218>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	7d1b      	ldrb	r3, [r3, #20]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d113      	bne.n	8001058 <comHandler+0x15c>
	{
		char msg[] = {"Buffer full\n"};
 8001030:	2324      	movs	r3, #36	; 0x24
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	4a39      	ldr	r2, [pc, #228]	; (800111c <comHandler+0x220>)
 8001036:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001038:	c313      	stmia	r3!, {r0, r1, r4}
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 800103e:	2324      	movs	r3, #36	; 0x24
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff f860 	bl	8000108 <strlen>
 8001048:	0003      	movs	r3, r0
 800104a:	b29a      	uxth	r2, r3
 800104c:	2324      	movs	r3, #36	; 0x24
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	0011      	movs	r1, r2
 8001052:	0018      	movs	r0, r3
 8001054:	f00a faf0 	bl	800b638 <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <comHandler+0x218>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d04e      	beq.n	8001100 <comHandler+0x204>
	{
 8001062:	466b      	mov	r3, sp
 8001064:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <comHandler+0x218>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	65bb      	str	r3, [r7, #88]	; 0x58
		char tmpStr[size+1];
 800106e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001070:	3301      	adds	r3, #1
 8001072:	1e5a      	subs	r2, r3, #1
 8001074:	657a      	str	r2, [r7, #84]	; 0x54
 8001076:	001a      	movs	r2, r3
 8001078:	60ba      	str	r2, [r7, #8]
 800107a:	2200      	movs	r2, #0
 800107c:	60fa      	str	r2, [r7, #12]
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	68f9      	ldr	r1, [r7, #12]
 8001082:	0002      	movs	r2, r0
 8001084:	0f52      	lsrs	r2, r2, #29
 8001086:	000c      	movs	r4, r1
 8001088:	00e4      	lsls	r4, r4, #3
 800108a:	61fc      	str	r4, [r7, #28]
 800108c:	69fc      	ldr	r4, [r7, #28]
 800108e:	4314      	orrs	r4, r2
 8001090:	61fc      	str	r4, [r7, #28]
 8001092:	0002      	movs	r2, r0
 8001094:	00d2      	lsls	r2, r2, #3
 8001096:	61ba      	str	r2, [r7, #24]
 8001098:	001a      	movs	r2, r3
 800109a:	603a      	str	r2, [r7, #0]
 800109c:	2200      	movs	r2, #0
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	0002      	movs	r2, r0
 80010a6:	0f52      	lsrs	r2, r2, #29
 80010a8:	000c      	movs	r4, r1
 80010aa:	00e4      	lsls	r4, r4, #3
 80010ac:	617c      	str	r4, [r7, #20]
 80010ae:	697c      	ldr	r4, [r7, #20]
 80010b0:	4314      	orrs	r4, r2
 80010b2:	617c      	str	r4, [r7, #20]
 80010b4:	0002      	movs	r2, r0
 80010b6:	00d2      	lsls	r2, r2, #3
 80010b8:	613a      	str	r2, [r7, #16]
 80010ba:	3307      	adds	r3, #7
 80010bc:	08db      	lsrs	r3, r3, #3
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	466a      	mov	r2, sp
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	469d      	mov	sp, r3
 80010c6:	466b      	mov	r3, sp
 80010c8:	3300      	adds	r3, #0
 80010ca:	653b      	str	r3, [r7, #80]	; 0x50
		for(int i = 0; i < size; i++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010d0:	e00a      	b.n	80010e8 <comHandler+0x1ec>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <comHandler+0x218>)
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80010d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010da:	18d3      	adds	r3, r2, r3
 80010dc:	0019      	movs	r1, r3
 80010de:	f000 f9f8 	bl	80014d2 <pop>
		for(int i = 0; i < size; i++)
 80010e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010e4:	3301      	adds	r3, #1
 80010e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbf0      	blt.n	80010d2 <comHandler+0x1d6>
		}
		CDC_Transmit_FS(tmpStr, size);
 80010f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010f4:	b292      	uxth	r2, r2
 80010f6:	0011      	movs	r1, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	f00a fa9d 	bl	800b638 <CDC_Transmit_FS>
 80010fe:	46b5      	mov	sp, r6
	}

}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b019      	add	sp, #100	; 0x64
 8001106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001108:	20000584 	.word	0x20000584
 800110c:	200010d0 	.word	0x200010d0
 8001110:	0800c8a0 	.word	0x0800c8a0
 8001114:	200004d4 	.word	0x200004d4
 8001118:	0800c8b0 	.word	0x0800c8b0
 800111c:	0800c8bc 	.word	0x0800c8bc

08001120 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.ui.error && (UI_State != ERROR))
 8001124:	4b97      	ldr	r3, [pc, #604]	; (8001384 <UI_Handler+0x264>)
 8001126:	7c1b      	ldrb	r3, [r3, #16]
 8001128:	2204      	movs	r2, #4
 800112a:	4013      	ands	r3, r2
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <UI_Handler+0x2a>
 8001132:	4b95      	ldr	r3, [pc, #596]	; (8001388 <UI_Handler+0x268>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d007      	beq.n	800114a <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 800113a:	4b93      	ldr	r3, [pc, #588]	; (8001388 <UI_Handler+0x268>)
 800113c:	2203      	movs	r2, #3
 800113e:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001140:	4b92      	ldr	r3, [pc, #584]	; (800138c <UI_Handler+0x26c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b92      	ldr	r3, [pc, #584]	; (8001390 <UI_Handler+0x270>)
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e05e      	b.n	8001208 <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 800114a:	4b8e      	ldr	r3, [pc, #568]	; (8001384 <UI_Handler+0x264>)
 800114c:	7c1b      	ldrb	r3, [r3, #16]
 800114e:	2208      	movs	r2, #8
 8001150:	4013      	ands	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d010      	beq.n	800117a <UI_Handler+0x5a>
 8001158:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <UI_Handler+0x268>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10c      	bne.n	800117a <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 8001160:	4b89      	ldr	r3, [pc, #548]	; (8001388 <UI_Handler+0x268>)
 8001162:	2204      	movs	r2, #4
 8001164:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001166:	4b89      	ldr	r3, [pc, #548]	; (800138c <UI_Handler+0x26c>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b89      	ldr	r3, [pc, #548]	; (8001390 <UI_Handler+0x270>)
 800116c:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 800116e:	4b85      	ldr	r3, [pc, #532]	; (8001384 <UI_Handler+0x264>)
 8001170:	7c1a      	ldrb	r2, [r3, #16]
 8001172:	2108      	movs	r1, #8
 8001174:	438a      	bics	r2, r1
 8001176:	741a      	strb	r2, [r3, #16]
 8001178:	e046      	b.n	8001208 <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 800117a:	4b82      	ldr	r3, [pc, #520]	; (8001384 <UI_Handler+0x264>)
 800117c:	7c1b      	ldrb	r3, [r3, #16]
 800117e:	2210      	movs	r2, #16
 8001180:	4013      	ands	r3, r2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d010      	beq.n	80011aa <UI_Handler+0x8a>
 8001188:	4b7f      	ldr	r3, [pc, #508]	; (8001388 <UI_Handler+0x268>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10c      	bne.n	80011aa <UI_Handler+0x8a>
	{
		UI_State = DONE;
 8001190:	4b7d      	ldr	r3, [pc, #500]	; (8001388 <UI_Handler+0x268>)
 8001192:	2205      	movs	r2, #5
 8001194:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001196:	4b7d      	ldr	r3, [pc, #500]	; (800138c <UI_Handler+0x26c>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b7d      	ldr	r3, [pc, #500]	; (8001390 <UI_Handler+0x270>)
 800119c:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 800119e:	4b79      	ldr	r3, [pc, #484]	; (8001384 <UI_Handler+0x264>)
 80011a0:	7c1a      	ldrb	r2, [r3, #16]
 80011a2:	2110      	movs	r1, #16
 80011a4:	438a      	bics	r2, r1
 80011a6:	741a      	strb	r2, [r3, #16]
 80011a8:	e02e      	b.n	8001208 <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <UI_Handler+0x264>)
 80011ac:	7c1b      	ldrb	r3, [r3, #16]
 80011ae:	2202      	movs	r2, #2
 80011b0:	4013      	ands	r3, r2
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d010      	beq.n	80011da <UI_Handler+0xba>
 80011b8:	4b73      	ldr	r3, [pc, #460]	; (8001388 <UI_Handler+0x268>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10c      	bne.n	80011da <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 80011c0:	4b71      	ldr	r3, [pc, #452]	; (8001388 <UI_Handler+0x268>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80011c6:	4b71      	ldr	r3, [pc, #452]	; (800138c <UI_Handler+0x26c>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b71      	ldr	r3, [pc, #452]	; (8001390 <UI_Handler+0x270>)
 80011cc:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 80011ce:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <UI_Handler+0x264>)
 80011d0:	7c1a      	ldrb	r2, [r3, #16]
 80011d2:	2102      	movs	r1, #2
 80011d4:	438a      	bics	r2, r1
 80011d6:	741a      	strb	r2, [r3, #16]
 80011d8:	e016      	b.n	8001208 <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 80011da:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <UI_Handler+0x264>)
 80011dc:	7c1b      	ldrb	r3, [r3, #16]
 80011de:	2201      	movs	r2, #1
 80011e0:	4013      	ands	r3, r2
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00f      	beq.n	8001208 <UI_Handler+0xe8>
 80011e8:	4b67      	ldr	r3, [pc, #412]	; (8001388 <UI_Handler+0x268>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10b      	bne.n	8001208 <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 80011f0:	4b65      	ldr	r3, [pc, #404]	; (8001388 <UI_Handler+0x268>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80011f6:	4b65      	ldr	r3, [pc, #404]	; (800138c <UI_Handler+0x26c>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b65      	ldr	r3, [pc, #404]	; (8001390 <UI_Handler+0x270>)
 80011fc:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 80011fe:	4b61      	ldr	r3, [pc, #388]	; (8001384 <UI_Handler+0x264>)
 8001200:	7c1a      	ldrb	r2, [r3, #16]
 8001202:	2101      	movs	r1, #1
 8001204:	438a      	bics	r2, r1
 8001206:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 8001208:	4b5f      	ldr	r3, [pc, #380]	; (8001388 <UI_Handler+0x268>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b05      	cmp	r3, #5
 800120e:	d900      	bls.n	8001212 <UI_Handler+0xf2>
 8001210:	e0a0      	b.n	8001354 <UI_Handler+0x234>
 8001212:	009a      	lsls	r2, r3, #2
 8001214:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <UI_Handler+0x274>)
 8001216:	18d3      	adds	r3, r2, r3
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	015b      	lsls	r3, r3, #5
 8001220:	485d      	ldr	r0, [pc, #372]	; (8001398 <UI_Handler+0x278>)
 8001222:	2201      	movs	r2, #1
 8001224:	0019      	movs	r1, r3
 8001226:	f001 fd88 	bl	8002d3a <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)
 800122a:	4b58      	ldr	r3, [pc, #352]	; (800138c <UI_Handler+0x26c>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b58      	ldr	r3, [pc, #352]	; (8001390 <UI_Handler+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b31      	cmp	r3, #49	; 0x31
 8001236:	d800      	bhi.n	800123a <UI_Handler+0x11a>
 8001238:	e097      	b.n	800136a <UI_Handler+0x24a>
		{
			UI_State = OFF;
 800123a:	4b53      	ldr	r3, [pc, #332]	; (8001388 <UI_Handler+0x268>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	015b      	lsls	r3, r3, #5
 8001244:	4854      	ldr	r0, [pc, #336]	; (8001398 <UI_Handler+0x278>)
 8001246:	2200      	movs	r2, #0
 8001248:	0019      	movs	r1, r3
 800124a:	f001 fd76 	bl	8002d3a <HAL_GPIO_WritePin>
		}
		break;
 800124e:	e08c      	b.n	800136a <UI_Handler+0x24a>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	015b      	lsls	r3, r3, #5
 8001254:	4850      	ldr	r0, [pc, #320]	; (8001398 <UI_Handler+0x278>)
 8001256:	2201      	movs	r2, #1
 8001258:	0019      	movs	r1, r3
 800125a:	f001 fd6e 	bl	8002d3a <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)
 800125e:	4b4b      	ldr	r3, [pc, #300]	; (800138c <UI_Handler+0x26c>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <UI_Handler+0x270>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b63      	cmp	r3, #99	; 0x63
 800126a:	d800      	bhi.n	800126e <UI_Handler+0x14e>
 800126c:	e07f      	b.n	800136e <UI_Handler+0x24e>
		{
			UI_State = OFF;
 800126e:	4b46      	ldr	r3, [pc, #280]	; (8001388 <UI_Handler+0x268>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	015b      	lsls	r3, r3, #5
 8001278:	4847      	ldr	r0, [pc, #284]	; (8001398 <UI_Handler+0x278>)
 800127a:	2200      	movs	r2, #0
 800127c:	0019      	movs	r1, r3
 800127e:	f001 fd5c 	bl	8002d3a <HAL_GPIO_WritePin>
		}
		break;
 8001282:	e074      	b.n	800136e <UI_Handler+0x24e>

	case ERROR:
		if(!flags.ui.error)
 8001284:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <UI_Handler+0x264>)
 8001286:	7c1b      	ldrb	r3, [r3, #16]
 8001288:	2204      	movs	r2, #4
 800128a:	4013      	ands	r3, r2
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <UI_Handler+0x178>
			UI_State = OFF;
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <UI_Handler+0x268>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 8001298:	4b3c      	ldr	r3, [pc, #240]	; (800138c <UI_Handler+0x26c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <UI_Handler+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2132      	movs	r1, #50	; 0x32
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7fe ffc7 	bl	8000238 <__aeabi_uidivmod>
 80012aa:	1e0b      	subs	r3, r1, #0
 80012ac:	d161      	bne.n	8001372 <UI_Handler+0x252>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	015b      	lsls	r3, r3, #5
 80012b2:	4a39      	ldr	r2, [pc, #228]	; (8001398 <UI_Handler+0x278>)
 80012b4:	0019      	movs	r1, r3
 80012b6:	0010      	movs	r0, r2
 80012b8:	f001 fd5c 	bl	8002d74 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	021a      	lsls	r2, r3, #8
 80012c0:	2390      	movs	r3, #144	; 0x90
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	0011      	movs	r1, r2
 80012c6:	0018      	movs	r0, r3
 80012c8:	f001 fd54 	bl	8002d74 <HAL_GPIO_TogglePin>
		}
		break;
 80012cc:	e051      	b.n	8001372 <UI_Handler+0x252>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <UI_Handler+0x26c>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <UI_Handler+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2123      	movs	r1, #35	; 0x23
 80012da:	0018      	movs	r0, r3
 80012dc:	f7fe ffac 	bl	8000238 <__aeabi_uidivmod>
 80012e0:	1e0b      	subs	r3, r1, #0
 80012e2:	d106      	bne.n	80012f2 <UI_Handler+0x1d2>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	015b      	lsls	r3, r3, #5
 80012e8:	4a2b      	ldr	r2, [pc, #172]	; (8001398 <UI_Handler+0x278>)
 80012ea:	0019      	movs	r1, r3
 80012ec:	0010      	movs	r0, r2
 80012ee:	f001 fd41 	bl	8002d74 <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <UI_Handler+0x26c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <UI_Handler+0x270>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2bd0      	cmp	r3, #208	; 0xd0
 80012fe:	d93a      	bls.n	8001376 <UI_Handler+0x256>
			UI_State = OFF;
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <UI_Handler+0x268>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
		break;
 8001306:	e036      	b.n	8001376 <UI_Handler+0x256>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 8001308:	4b20      	ldr	r3, [pc, #128]	; (800138c <UI_Handler+0x26c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b20      	ldr	r3, [pc, #128]	; (8001390 <UI_Handler+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2132      	movs	r1, #50	; 0x32
 8001314:	0018      	movs	r0, r3
 8001316:	f7fe ff8f 	bl	8000238 <__aeabi_uidivmod>
 800131a:	1e0b      	subs	r3, r1, #0
 800131c:	d10d      	bne.n	800133a <UI_Handler+0x21a>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <UI_Handler+0x278>)
 8001324:	0019      	movs	r1, r3
 8001326:	0010      	movs	r0, r2
 8001328:	f001 fd24 	bl	8002d74 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4a1a      	ldr	r2, [pc, #104]	; (800139c <UI_Handler+0x27c>)
 8001332:	0019      	movs	r1, r3
 8001334:	0010      	movs	r0, r2
 8001336:	f001 fd1d 	bl	8002d74 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <UI_Handler+0x26c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <UI_Handler+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	1ad2      	subs	r2, r2, r3
 8001344:	2395      	movs	r3, #149	; 0x95
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	429a      	cmp	r2, r3
 800134a:	d916      	bls.n	800137a <UI_Handler+0x25a>
			UI_State = OFF;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <UI_Handler+0x268>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
		break;
 8001352:	e012      	b.n	800137a <UI_Handler+0x25a>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	015b      	lsls	r3, r3, #5
 8001358:	480f      	ldr	r0, [pc, #60]	; (8001398 <UI_Handler+0x278>)
 800135a:	2200      	movs	r2, #0
 800135c:	0019      	movs	r1, r3
 800135e:	f001 fcec 	bl	8002d3a <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
 8001362:	2003      	movs	r0, #3
 8001364:	f7ff f858 	bl	8000418 <setColour>
#endif
		break;
 8001368:	e008      	b.n	800137c <UI_Handler+0x25c>
		break;
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	e006      	b.n	800137c <UI_Handler+0x25c>
		break;
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	e004      	b.n	800137c <UI_Handler+0x25c>
		break;
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	e002      	b.n	800137c <UI_Handler+0x25c>
		break;
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	e000      	b.n	800137c <UI_Handler+0x25c>
		break;
 800137a:	46c0      	nop			; (mov r8, r8)

	}
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	20000584 	.word	0x20000584
 8001388:	2000020e 	.word	0x2000020e
 800138c:	200001fc 	.word	0x200001fc
 8001390:	20000210 	.word	0x20000210
 8001394:	0800c940 	.word	0x0800c940
 8001398:	48000800 	.word	0x48000800
 800139c:	48000400 	.word	0x48000400

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>

080013aa <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 80013b2:	2018      	movs	r0, #24
 80013b4:	f00a fe26 	bl	800c004 <malloc>
 80013b8:	0003      	movs	r3, r0
 80013ba:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <createBuffer+0x1c>
	{
		return NULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e022      	b.n	800140c <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	0018      	movs	r0, r3
 80013ca:	f00a fe1b 	bl	800c004 <malloc>
 80013ce:	0003      	movs	r3, r0
 80013d0:	001a      	movs	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d105      	bne.n	80013ea <createBuffer+0x40>
	{
		free(buffer);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f00a fe19 	bl	800c018 <free>
		return NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e010      	b.n	800140c <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1e5a      	subs	r2, r3, #1
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2201      	movs	r2, #1
 8001408:	751a      	strb	r2, [r3, #20]

	return buffer;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b004      	add	sp, #16
 8001412:	bd80      	pop	{r7, pc}

08001414 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	000a      	movs	r2, r1
 800141e:	1cfb      	adds	r3, r7, #3
 8001420:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7d1b      	ldrb	r3, [r3, #20]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d101      	bne.n	800142e <push+0x1a>
		return BUFFER_FULL;
 800142a:	2302      	movs	r3, #2
 800142c:	e025      	b.n	800147a <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	0019      	movs	r1, r3
 800143a:	0010      	movs	r0, r2
 800143c:	f7fe ffe6 	bl	800040c <__aeabi_idivmod>
 8001440:	000b      	movs	r3, r1
 8001442:	001a      	movs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	18d3      	adds	r3, r2, r3
 800145c:	1cfa      	adds	r2, r7, #3
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	429a      	cmp	r2, r3
 800146c:	db01      	blt.n	8001472 <push+0x5e>
 800146e:	2202      	movs	r2, #2
 8001470:	e000      	b.n	8001474 <push+0x60>
 8001472:	2200      	movs	r2, #0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	0018      	movs	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	b002      	add	sp, #8
 8001480:	bd80      	pop	{r7, pc}

08001482 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6899      	ldr	r1, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	18cb      	adds	r3, r1, r3
 800149a:	429a      	cmp	r2, r3
 800149c:	da01      	bge.n	80014a2 <pushStr+0x20>
		return BUFFER_FULL;
 800149e:	2302      	movs	r3, #2
 80014a0:	e013      	b.n	80014ca <pushStr+0x48>

	for(int i = 0; i < len; i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e00b      	b.n	80014c0 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	18d3      	adds	r3, r2, r3
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	0011      	movs	r1, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff ffad 	bl	8001414 <push>
	for(int i = 0; i < len; i++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbef      	blt.n	80014a8 <pushStr+0x26>
	}

	return BUFFER_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b006      	add	sp, #24
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7d1b      	ldrb	r3, [r3, #20]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <pop+0x16>
		return BUFFER_EMPTY;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e023      	b.n	8001530 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	0019      	movs	r1, r3
 8001504:	0010      	movs	r0, r2
 8001506:	f7fe ff81 	bl	800040c <__aeabi_idivmod>
 800150a:	000b      	movs	r3, r1
 800150c:	001a      	movs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	1e5a      	subs	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	1e5a      	subs	r2, r3, #1
 8001522:	4313      	orrs	r3, r2
 8001524:	0fdb      	lsrs	r3, r3, #31
 8001526:	b2db      	uxtb	r3, r3
 8001528:	001a      	movs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}

08001538 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <getCount+0x7c>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	222a      	movs	r2, #42	; 0x2a
 8001548:	701a      	strb	r2, [r3, #0]
		answer = 0;
 800154a:	1dbb      	adds	r3, r7, #6
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 8001550:	1dba      	adds	r2, r7, #6
 8001552:	1df9      	adds	r1, r7, #7
 8001554:	4818      	ldr	r0, [pc, #96]	; (80015b8 <getCount+0x80>)
 8001556:	2364      	movs	r3, #100	; 0x64
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2301      	movs	r3, #1
 800155c:	f004 fac4 	bl	8005ae8 <HAL_SPI_TransmitReceive>
 8001560:	1e03      	subs	r3, r0, #0
 8001562:	d001      	beq.n	8001568 <getCount+0x30>
			return 0;
 8001564:	2300      	movs	r3, #0
 8001566:	e021      	b.n	80015ac <getCount+0x74>
		regCount++;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <getCount+0x7c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <getCount+0x7c>)
 8001572:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8001574:	2001      	movs	r0, #1
 8001576:	f000 fd77 	bl	8002068 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <getCount+0x7c>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b63      	cmp	r3, #99	; 0x63
 8001580:	d906      	bls.n	8001590 <getCount+0x58>
		{
			flags.conErr = 1;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <getCount+0x84>)
 8001584:	7e1a      	ldrb	r2, [r3, #24]
 8001586:	2104      	movs	r1, #4
 8001588:	430a      	orrs	r2, r1
 800158a:	761a      	strb	r2, [r3, #24]
			return 0;
 800158c:	2300      	movs	r3, #0
 800158e:	e00d      	b.n	80015ac <getCount+0x74>
		}
	}
	while(answer != question);
 8001590:	1dbb      	adds	r3, r7, #6
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	1dfb      	adds	r3, r7, #7
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d1d3      	bne.n	8001544 <getCount+0xc>

	regCount--;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <getCount+0x7c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <getCount+0x7c>)
 80015a6:	701a      	strb	r2, [r3, #0]

	return regCount;
 80015a8:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <getCount+0x7c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000629 	.word	0x20000629
 80015b8:	200004d8 	.word	0x200004d8
 80015bc:	20000584 	.word	0x20000584

080015c0 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	REG_CLR_ACTIVE;
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	482e      	ldr	r0, [pc, #184]	; (8001684 <regInit+0xc4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	0019      	movs	r1, r3
 80015d0:	f001 fbb3 	bl	8002d3a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80015d4:	2005      	movs	r0, #5
 80015d6:	f000 fd47 	bl	8002068 <HAL_Delay>
	REG_CLR_INACTIVE;
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	019b      	lsls	r3, r3, #6
 80015de:	4829      	ldr	r0, [pc, #164]	; (8001684 <regInit+0xc4>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	0019      	movs	r1, r3
 80015e4:	f001 fba9 	bl	8002d3a <HAL_GPIO_WritePin>

	REG_DISABLE;
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	4825      	ldr	r0, [pc, #148]	; (8001684 <regInit+0xc4>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	0019      	movs	r1, r3
 80015f2:	f001 fba2 	bl	8002d3a <HAL_GPIO_WritePin>

	if(getCount() == 0)
 80015f6:	f7ff ff9f 	bl	8001538 <getCount>
 80015fa:	1e03      	subs	r3, r0, #0
 80015fc:	d101      	bne.n	8001602 <regInit+0x42>
	{
		return REG_CON_ERR;	//Connection error
 80015fe:	2301      	movs	r3, #1
 8001600:	e03c      	b.n	800167c <regInit+0xbc>
	}

	regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <regInit+0xc8>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	0018      	movs	r0, r3
 8001608:	f00a fcfc 	bl	800c004 <malloc>
 800160c:	0003      	movs	r3, r0
 800160e:	001a      	movs	r2, r3
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <regInit+0xcc>)
 8001612:	601a      	str	r2, [r3, #0]
	if(regValues == NULL)
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <regInit+0xcc>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d104      	bne.n	8001626 <regInit+0x66>
	{
		regState = REG_ERR;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <regInit+0xd0>)
 800161e:	2202      	movs	r2, #2
 8001620:	701a      	strb	r2, [r3, #0]
		return REG_ERR;
 8001622:	2302      	movs	r3, #2
 8001624:	e02a      	b.n	800167c <regInit+0xbc>
	}

	for(int i = 0; i < regCount; i++)
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	e008      	b.n	800163e <regInit+0x7e>
	{
		regValues[i] = 0;
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <regInit+0xcc>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	18d3      	adds	r3, r2, r3
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3301      	adds	r3, #1
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <regInit+0xc8>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	001a      	movs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4293      	cmp	r3, r2
 8001648:	dbf0      	blt.n	800162c <regInit+0x6c>
	}

	REG_ENABLE;
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <regInit+0xc4>)
 8001650:	2200      	movs	r2, #0
 8001652:	0019      	movs	r1, r3
 8001654:	f001 fb71 	bl	8002d3a <HAL_GPIO_WritePin>

	regState = (HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)? REG_OK : REG_ERR;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <regInit+0xcc>)
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <regInit+0xc8>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b29a      	uxth	r2, r3
 8001662:	480c      	ldr	r0, [pc, #48]	; (8001694 <regInit+0xd4>)
 8001664:	2364      	movs	r3, #100	; 0x64
 8001666:	f004 f8e7 	bl	8005838 <HAL_SPI_Transmit>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d101      	bne.n	8001672 <regInit+0xb2>
 800166e:	2200      	movs	r2, #0
 8001670:	e000      	b.n	8001674 <regInit+0xb4>
 8001672:	2202      	movs	r2, #2
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <regInit+0xd0>)
 8001676:	701a      	strb	r2, [r3, #0]
	return regState;
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <regInit+0xd0>)
 800167a:	781b      	ldrb	r3, [r3, #0]
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b002      	add	sp, #8
 8001682:	bd80      	pop	{r7, pc}
 8001684:	48000400 	.word	0x48000400
 8001688:	20000629 	.word	0x20000629
 800168c:	20000624 	.word	0x20000624
 8001690:	20000628 	.word	0x20000628
 8001694:	200004d8 	.word	0x200004d8

08001698 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <sendData+0x54>)
 800169e:	6819      	ldr	r1, [r3, #0]
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <sendData+0x58>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4813      	ldr	r0, [pc, #76]	; (80016f4 <sendData+0x5c>)
 80016a8:	2364      	movs	r3, #100	; 0x64
 80016aa:	f004 f8c5 	bl	8005838 <HAL_SPI_Transmit>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d114      	bne.n	80016dc <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	01db      	lsls	r3, r3, #7
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <sendData+0x60>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	0019      	movs	r1, r3
 80016bc:	f001 fb3d 	bl	8002d3a <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80016c0:	2005      	movs	r0, #5
 80016c2:	f000 fcd1 	bl	8002068 <HAL_Delay>
		REG_RCLK_LOW;
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	01db      	lsls	r3, r3, #7
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <sendData+0x60>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	0019      	movs	r1, r3
 80016d0:	f001 fb33 	bl	8002d3a <HAL_GPIO_WritePin>

		regState = REG_OK;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <sendData+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e002      	b.n	80016e2 <sendData+0x4a>
	}
	else
	{
		regState = REG_ERR;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <sendData+0x64>)
 80016de:	2202      	movs	r2, #2
 80016e0:	701a      	strb	r2, [r3, #0]
	}

	return regState;
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <sendData+0x64>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000624 	.word	0x20000624
 80016f0:	20000629 	.word	0x20000629
 80016f4:	200004d8 	.word	0x200004d8
 80016f8:	48000400 	.word	0x48000400
 80016fc:	20000628 	.word	0x20000628

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_MspInit+0x44>)
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_MspInit+0x44>)
 800170c:	2101      	movs	r1, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	619a      	str	r2, [r3, #24]
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_MspInit+0x44>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2201      	movs	r2, #1
 8001718:	4013      	ands	r3, r2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_MspInit+0x44>)
 8001720:	69da      	ldr	r2, [r3, #28]
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_MspInit+0x44>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	0549      	lsls	r1, r1, #21
 8001728:	430a      	orrs	r2, r1
 800172a:	61da      	str	r2, [r3, #28]
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_MspInit+0x44>)
 800172e:	69da      	ldr	r2, [r3, #28]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	055b      	lsls	r3, r3, #21
 8001734:	4013      	ands	r3, r2
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b002      	add	sp, #8
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b08d      	sub	sp, #52	; 0x34
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	241c      	movs	r4, #28
 8001752:	193b      	adds	r3, r7, r4
 8001754:	0018      	movs	r0, r3
 8001756:	2314      	movs	r3, #20
 8001758:	001a      	movs	r2, r3
 800175a:	2100      	movs	r1, #0
 800175c:	f00a fc66 	bl	800c02c <memset>
  if(hadc->Instance==ADC1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a4a      	ldr	r2, [pc, #296]	; (8001890 <HAL_ADC_MspInit+0x148>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d000      	beq.n	800176c <HAL_ADC_MspInit+0x24>
 800176a:	e08d      	b.n	8001888 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800176c:	4b49      	ldr	r3, [pc, #292]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 800176e:	699a      	ldr	r2, [r3, #24]
 8001770:	4b48      	ldr	r3, [pc, #288]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	0089      	lsls	r1, r1, #2
 8001776:	430a      	orrs	r2, r1
 8001778:	619a      	str	r2, [r3, #24]
 800177a:	4b46      	ldr	r3, [pc, #280]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 800177c:	699a      	ldr	r2, [r3, #24]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001788:	4b42      	ldr	r3, [pc, #264]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	0309      	lsls	r1, r1, #12
 8001792:	430a      	orrs	r2, r1
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	031b      	lsls	r3, r3, #12
 800179e:	4013      	ands	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	4b3a      	ldr	r3, [pc, #232]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	0289      	lsls	r1, r1, #10
 80017ae:	430a      	orrs	r2, r1
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	4b38      	ldr	r3, [pc, #224]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	029b      	lsls	r3, r3, #10
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c0:	4b34      	ldr	r3, [pc, #208]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	02c9      	lsls	r1, r1, #11
 80017ca:	430a      	orrs	r2, r1
 80017cc:	615a      	str	r2, [r3, #20]
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <HAL_ADC_MspInit+0x14c>)
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	02db      	lsls	r3, r3, #11
 80017d6:	4013      	ands	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017dc:	193b      	adds	r3, r7, r4
 80017de:	223f      	movs	r2, #63	; 0x3f
 80017e0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e2:	193b      	adds	r3, r7, r4
 80017e4:	2203      	movs	r2, #3
 80017e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	193b      	adds	r3, r7, r4
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	4a29      	ldr	r2, [pc, #164]	; (8001898 <HAL_ADC_MspInit+0x150>)
 80017f2:	0019      	movs	r1, r3
 80017f4:	0010      	movs	r0, r2
 80017f6:	f001 f90b 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017fa:	193b      	adds	r3, r7, r4
 80017fc:	22ff      	movs	r2, #255	; 0xff
 80017fe:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001800:	193b      	adds	r3, r7, r4
 8001802:	2203      	movs	r2, #3
 8001804:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	193b      	adds	r3, r7, r4
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	193a      	adds	r2, r7, r4
 800180e:	2390      	movs	r3, #144	; 0x90
 8001810:	05db      	lsls	r3, r3, #23
 8001812:	0011      	movs	r1, r2
 8001814:	0018      	movs	r0, r3
 8001816:	f001 f8fb 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800181a:	193b      	adds	r3, r7, r4
 800181c:	2203      	movs	r2, #3
 800181e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001820:	193b      	adds	r3, r7, r4
 8001822:	2203      	movs	r2, #3
 8001824:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	193b      	adds	r3, r7, r4
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	193b      	adds	r3, r7, r4
 800182e:	4a1b      	ldr	r2, [pc, #108]	; (800189c <HAL_ADC_MspInit+0x154>)
 8001830:	0019      	movs	r1, r3
 8001832:	0010      	movs	r0, r2
 8001834:	f001 f8ec 	bl	8002a10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_ADC_MspInit+0x158>)
 800183a:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <HAL_ADC_MspInit+0x15c>)
 800183c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_ADC_MspInit+0x158>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_ADC_MspInit+0x158>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_ADC_MspInit+0x158>)
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_ADC_MspInit+0x158>)
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	0052      	lsls	r2, r2, #1
 8001856:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_ADC_MspInit+0x158>)
 800185a:	2280      	movs	r2, #128	; 0x80
 800185c:	00d2      	lsls	r2, r2, #3
 800185e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_ADC_MspInit+0x158>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_ADC_MspInit+0x158>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_ADC_MspInit+0x158>)
 800186e:	0018      	movs	r0, r3
 8001870:	f000 ff4a 	bl	8002708 <HAL_DMA_Init>
 8001874:	1e03      	subs	r3, r0, #0
 8001876:	d001      	beq.n	800187c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001878:	f7ff fd92 	bl	80013a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_ADC_MspInit+0x158>)
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_ADC_MspInit+0x158>)
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b00d      	add	sp, #52	; 0x34
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	40012400 	.word	0x40012400
 8001894:	40021000 	.word	0x40021000
 8001898:	48000800 	.word	0x48000800
 800189c:	48000400 	.word	0x48000400
 80018a0:	200005a0 	.word	0x200005a0
 80018a4:	40020008 	.word	0x40020008

080018a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b08b      	sub	sp, #44	; 0x2c
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	2414      	movs	r4, #20
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	0018      	movs	r0, r3
 80018b6:	2314      	movs	r3, #20
 80018b8:	001a      	movs	r2, r3
 80018ba:	2100      	movs	r1, #0
 80018bc:	f00a fbb6 	bl	800c02c <memset>
  if(hspi->Instance==SPI1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <HAL_SPI_MspInit+0x90>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d131      	bne.n	800192e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_SPI_MspInit+0x94>)
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_SPI_MspInit+0x94>)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	0149      	lsls	r1, r1, #5
 80018d4:	430a      	orrs	r2, r1
 80018d6:	619a      	str	r2, [r3, #24]
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_SPI_MspInit+0x94>)
 80018da:	699a      	ldr	r2, [r3, #24]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	015b      	lsls	r3, r3, #5
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_SPI_MspInit+0x94>)
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_SPI_MspInit+0x94>)
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	02c9      	lsls	r1, r1, #11
 80018f0:	430a      	orrs	r2, r1
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_SPI_MspInit+0x94>)
 80018f6:	695a      	ldr	r2, [r3, #20]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	02db      	lsls	r3, r3, #11
 80018fc:	4013      	ands	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001902:	0021      	movs	r1, r4
 8001904:	187b      	adds	r3, r7, r1
 8001906:	2238      	movs	r2, #56	; 0x38
 8001908:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2202      	movs	r2, #2
 800190e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	187b      	adds	r3, r7, r1
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2203      	movs	r2, #3
 800191a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800191c:	187b      	adds	r3, r7, r1
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	187b      	adds	r3, r7, r1
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <HAL_SPI_MspInit+0x98>)
 8001926:	0019      	movs	r1, r3
 8001928:	0010      	movs	r0, r2
 800192a:	f001 f871 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b00b      	add	sp, #44	; 0x2c
 8001934:	bd90      	pop	{r4, r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	40013000 	.word	0x40013000
 800193c:	40021000 	.word	0x40021000
 8001940:	48000400 	.word	0x48000400

08001944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0e      	ldr	r2, [pc, #56]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d115      	bne.n	8001982 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_TIM_Base_MspInit+0x4c>)
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <HAL_TIM_Base_MspInit+0x4c>)
 800195c:	2180      	movs	r1, #128	; 0x80
 800195e:	0049      	lsls	r1, r1, #1
 8001960:	430a      	orrs	r2, r1
 8001962:	61da      	str	r2, [r3, #28]
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_TIM_Base_MspInit+0x4c>)
 8001966:	69da      	ldr	r2, [r3, #28]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2013      	movs	r0, #19
 8001978:	f000 fe94 	bl	80026a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800197c:	2013      	movs	r0, #19
 800197e:	f000 fea6 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	b004      	add	sp, #16
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	40002000 	.word	0x40002000
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b08b      	sub	sp, #44	; 0x2c
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	2414      	movs	r4, #20
 800199e:	193b      	adds	r3, r7, r4
 80019a0:	0018      	movs	r0, r3
 80019a2:	2314      	movs	r3, #20
 80019a4:	001a      	movs	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	f00a fb40 	bl	800c02c <memset>
  if(huart->Instance==USART3)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <HAL_UART_MspInit+0xa0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d13a      	bne.n	8001a2c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_UART_MspInit+0xa4>)
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_UART_MspInit+0xa4>)
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	02c9      	lsls	r1, r1, #11
 80019c0:	430a      	orrs	r2, r1
 80019c2:	61da      	str	r2, [r3, #28]
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_UART_MspInit+0xa4>)
 80019c6:	69da      	ldr	r2, [r3, #28]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	02db      	lsls	r3, r3, #11
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_UART_MspInit+0xa4>)
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_UART_MspInit+0xa4>)
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	0309      	lsls	r1, r1, #12
 80019dc:	430a      	orrs	r2, r1
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_UART_MspInit+0xa4>)
 80019e2:	695a      	ldr	r2, [r3, #20]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	031b      	lsls	r3, r3, #12
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019ee:	193b      	adds	r3, r7, r4
 80019f0:	22c0      	movs	r2, #192	; 0xc0
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	0021      	movs	r1, r4
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	2202      	movs	r2, #2
 80019fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	2203      	movs	r2, #3
 8001a08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_UART_MspInit+0xa8>)
 8001a14:	0019      	movs	r1, r3
 8001a16:	0010      	movs	r0, r2
 8001a18:	f000 fffa 	bl	8002a10 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	201d      	movs	r0, #29
 8001a22:	f000 fe3f 	bl	80026a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001a26:	201d      	movs	r0, #29
 8001a28:	f000 fe51 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b00b      	add	sp, #44	; 0x2c
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	40004800 	.word	0x40004800
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000800 	.word	0x48000800

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a64:	f000 fae4 	bl	8002030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	0018      	movs	r0, r3
 8001a78:	f001 f998 	bl	8002dac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f001 f993 	bl	8002dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <DMA1_Channel1_IRQHandler+0x14>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f000 fefd 	bl	8002892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	200005a0 	.word	0x200005a0

08001aa4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <TIM14_IRQHandler+0x14>)
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f004 fc5e 	bl	800636c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	2000053c 	.word	0x2000053c

08001abc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <USART3_4_IRQHandler+0x14>)
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f005 f8c0 	bl	8006c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	20000450 	.word	0x20000450

08001ad4 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <USB_IRQHandler+0x14>)
 8001ada:	0018      	movs	r0, r3
 8001adc:	f001 fab8 	bl	8003050 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	200012d4 	.word	0x200012d4

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	18d3      	adds	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f00a fa48 	bl	800bfb0 <__errno>
 8001b20:	0003      	movs	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	425b      	negs	r3, r3
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	18d2      	adds	r2, r2, r3
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <_sbrk+0x64>)
 8001b3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b006      	add	sp, #24
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20004000 	.word	0x20004000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	20000214 	.word	0x20000214
 8001b54:	200015d8 	.word	0x200015d8

08001b58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <testHandler>:
	return testPhase;
}

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8001b64:	b5b0      	push	{r4, r5, r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 8001b6a:	4bcb      	ldr	r3, [pc, #812]	; (8001e98 <testHandler+0x334>)
 8001b6c:	7e1a      	ldrb	r2, [r3, #24]
 8001b6e:	2102      	movs	r1, #2
 8001b70:	438a      	bics	r2, r1
 8001b72:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8001b74:	4bc8      	ldr	r3, [pc, #800]	; (8001e98 <testHandler+0x334>)
 8001b76:	7b1b      	ldrb	r3, [r3, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d012      	beq.n	8001ba8 <testHandler+0x44>
	{
		if(testPhase == WAITING)
 8001b82:	4bc6      	ldr	r3, [pc, #792]	; (8001e9c <testHandler+0x338>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <testHandler+0x3a>
		{
			if(flags.conErr)
 8001b8a:	4bc3      	ldr	r3, [pc, #780]	; (8001e98 <testHandler+0x334>)
 8001b8c:	7e1b      	ldrb	r3, [r3, #24]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	4013      	ands	r3, r2
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <testHandler+0x44>
			{
				//Pošli zprávu do PC
			}
			else
			{
				startTest();
 8001b98:	f000 f98c 	bl	8001eb4 <startTest>
 8001b9c:	e004      	b.n	8001ba8 <testHandler+0x44>
			}
		}
		else
		{
			flags.startConflict = 1;
 8001b9e:	4bbe      	ldr	r3, [pc, #760]	; (8001e98 <testHandler+0x334>)
 8001ba0:	7e1a      	ldrb	r2, [r3, #24]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
		}
	}
	if(flags.instructions.stopRequest)
 8001ba8:	4bbb      	ldr	r3, [pc, #748]	; (8001e98 <testHandler+0x334>)
 8001baa:	7b1b      	ldrb	r3, [r3, #12]
 8001bac:	2202      	movs	r2, #2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <testHandler+0x56>
	{
		stopTest();
 8001bb6:	f000 f9a5 	bl	8001f04 <stopTest>
	}

	switch(testPhase)
 8001bba:	4bb8      	ldr	r3, [pc, #736]	; (8001e9c <testHandler+0x338>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d900      	bls.n	8001bc4 <testHandler+0x60>
 8001bc2:	e164      	b.n	8001e8e <testHandler+0x32a>
 8001bc4:	009a      	lsls	r2, r3, #2
 8001bc6:	4bb6      	ldr	r3, [pc, #728]	; (8001ea0 <testHandler+0x33c>)
 8001bc8:	18d3      	adds	r3, r2, r3
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8001bce:	4bb2      	ldr	r3, [pc, #712]	; (8001e98 <testHandler+0x334>)
 8001bd0:	7e1a      	ldrb	r2, [r3, #24]
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	438a      	bics	r2, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
		flags.meas.measRequest = 0;
 8001bd8:	4baf      	ldr	r3, [pc, #700]	; (8001e98 <testHandler+0x334>)
 8001bda:	7d1a      	ldrb	r2, [r3, #20]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	438a      	bics	r2, r1
 8001be0:	751a      	strb	r2, [r3, #20]
		break;
 8001be2:	e154      	b.n	8001e8e <testHandler+0x32a>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8001be4:	4bac      	ldr	r3, [pc, #688]	; (8001e98 <testHandler+0x334>)
 8001be6:	7d1b      	ldrb	r3, [r3, #20]
 8001be8:	2202      	movs	r2, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d100      	bne.n	8001bf4 <testHandler+0x90>
 8001bf2:	e143      	b.n	8001e7c <testHandler+0x318>
		{
			testPhase++;
 8001bf4:	4ba9      	ldr	r3, [pc, #676]	; (8001e9c <testHandler+0x338>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4ba7      	ldr	r3, [pc, #668]	; (8001e9c <testHandler+0x338>)
 8001bfe:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001c00:	e13c      	b.n	8001e7c <testHandler+0x318>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8001c02:	4ba8      	ldr	r3, [pc, #672]	; (8001ea4 <testHandler+0x340>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f001 f896 	bl	8002d3a <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8001c0e:	4ba5      	ldr	r3, [pc, #660]	; (8001ea4 <testHandler+0x340>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	2140      	movs	r1, #64	; 0x40
 8001c14:	0018      	movs	r0, r3
 8001c16:	f001 f890 	bl	8002d3a <HAL_GPIO_WritePin>

		testPhase++;
 8001c1a:	4ba0      	ldr	r3, [pc, #640]	; (8001e9c <testHandler+0x338>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b9e      	ldr	r3, [pc, #632]	; (8001e9c <testHandler+0x338>)
 8001c24:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8001c26:	4b9c      	ldr	r3, [pc, #624]	; (8001e98 <testHandler+0x334>)
 8001c28:	7e1a      	ldrb	r2, [r3, #24]
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
		flags.ui.shortBeep = 1;
 8001c30:	4b99      	ldr	r3, [pc, #612]	; (8001e98 <testHandler+0x334>)
 8001c32:	7c1a      	ldrb	r2, [r3, #16]
 8001c34:	2101      	movs	r1, #1
 8001c36:	430a      	orrs	r2, r1
 8001c38:	741a      	strb	r2, [r3, #16]

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e007      	b.n	8001c50 <testHandler+0xec>
		{
			sysTime[i] = 0;
 8001c40:	4b99      	ldr	r3, [pc, #612]	; (8001ea8 <testHandler+0x344>)
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	2100      	movs	r1, #0
 8001c48:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	ddf4      	ble.n	8001c40 <testHandler+0xdc>
		}
		break;
 8001c56:	e11a      	b.n	8001e8e <testHandler+0x32a>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001c58:	4b8f      	ldr	r3, [pc, #572]	; (8001e98 <testHandler+0x334>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d026      	beq.n	8001cb4 <testHandler+0x150>
		{
			char time[9] = {0};
 8001c66:	250c      	movs	r5, #12
 8001c68:	197b      	adds	r3, r7, r5
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	2205      	movs	r2, #5
 8001c72:	2100      	movs	r1, #0
 8001c74:	0018      	movs	r0, r3
 8001c76:	f00a f9d9 	bl	800c02c <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001c7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ea8 <testHandler+0x344>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	223c      	movs	r2, #60	; 0x3c
 8001c80:	1ad2      	subs	r2, r2, r3
 8001c82:	4b89      	ldr	r3, [pc, #548]	; (8001ea8 <testHandler+0x344>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	213c      	movs	r1, #60	; 0x3c
 8001c88:	1acc      	subs	r4, r1, r3
 8001c8a:	4b87      	ldr	r3, [pc, #540]	; (8001ea8 <testHandler+0x344>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2103      	movs	r1, #3
 8001c90:	1acb      	subs	r3, r1, r3
 8001c92:	4986      	ldr	r1, [pc, #536]	; (8001eac <testHandler+0x348>)
 8001c94:	1978      	adds	r0, r7, r5
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	0023      	movs	r3, r4
 8001c9a:	f00a fa89 	bl	800c1b0 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8001c9e:	4b84      	ldr	r3, [pc, #528]	; (8001eb0 <testHandler+0x34c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	4b82      	ldr	r3, [pc, #520]	; (8001eb0 <testHandler+0x34c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2110      	movs	r1, #16
 8001caa:	404a      	eors	r2, r1
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	701a      	strb	r2, [r3, #0]
			sendData();
 8001cb0:	f7ff fcf2 	bl	8001698 <sendData>
		}
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
 8001cb4:	4b7c      	ldr	r3, [pc, #496]	; (8001ea8 <testHandler+0x344>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	210a      	movs	r1, #10
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7fe fba6 	bl	800040c <__aeabi_idivmod>
 8001cc0:	1e0b      	subs	r3, r1, #0
 8001cc2:	d10f      	bne.n	8001ce4 <testHandler+0x180>
 8001cc4:	4b78      	ldr	r3, [pc, #480]	; (8001ea8 <testHandler+0x344>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <testHandler+0x180>
 8001ccc:	4b72      	ldr	r3, [pc, #456]	; (8001e98 <testHandler+0x334>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <testHandler+0x180>
		{
			flags.meas.measRequest = 1;
 8001cda:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <testHandler+0x334>)
 8001cdc:	7d1a      	ldrb	r2, [r3, #20]
 8001cde:	2101      	movs	r1, #1
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	751a      	strb	r2, [r3, #20]
		}
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
 8001ce4:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <testHandler+0x344>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	dc00      	bgt.n	8001cee <testHandler+0x18a>
 8001cec:	e0c8      	b.n	8001e80 <testHandler+0x31c>
		{
			testPhase++;
 8001cee:	4b6b      	ldr	r3, [pc, #428]	; (8001e9c <testHandler+0x338>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4b69      	ldr	r3, [pc, #420]	; (8001e9c <testHandler+0x338>)
 8001cf8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001cfa:	e0c1      	b.n	8001e80 <testHandler+0x31c>
	case MAIN_TEST_DONE:
		if(flags.meas.measComplete)
 8001cfc:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <testHandler+0x334>)
 8001cfe:	7d1b      	ldrb	r3, [r3, #20]
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d100      	bne.n	8001d0c <testHandler+0x1a8>
 8001d0a:	e0bb      	b.n	8001e84 <testHandler+0x320>
		{
			flags.ui.notice = 1;
 8001d0c:	4b62      	ldr	r3, [pc, #392]	; (8001e98 <testHandler+0x334>)
 8001d0e:	7c1a      	ldrb	r2, [r3, #16]
 8001d10:	2108      	movs	r1, #8
 8001d12:	430a      	orrs	r2, r1
 8001d14:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8001d16:	4b60      	ldr	r3, [pc, #384]	; (8001e98 <testHandler+0x334>)
 8001d18:	7e1a      	ldrb	r2, [r3, #24]
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8001d20:	4b5e      	ldr	r3, [pc, #376]	; (8001e9c <testHandler+0x338>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <testHandler+0x338>)
 8001d2a:	701a      	strb	r2, [r3, #0]

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8001d2c:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <testHandler+0x34c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	781a      	ldrb	r2, [r3, #0]
 8001d32:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <testHandler+0x34c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2110      	movs	r1, #16
 8001d38:	438a      	bics	r2, r1
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 8001d3e:	4b5c      	ldr	r3, [pc, #368]	; (8001eb0 <testHandler+0x34c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <testHandler+0x34c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]
			sendData();
 8001d50:	f7ff fca2 	bl	8001698 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8001d54:	2301      	movs	r3, #1
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	e007      	b.n	8001d6a <testHandler+0x206>
			{
				sysTime[i] = 0;
 8001d5a:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <testHandler+0x344>)
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	2100      	movs	r1, #0
 8001d62:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	3301      	adds	r3, #1
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	ddf4      	ble.n	8001d5a <testHandler+0x1f6>
			}
		}
		break;
 8001d70:	e088      	b.n	8001e84 <testHandler+0x320>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001d72:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <testHandler+0x334>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2202      	movs	r2, #2
 8001d78:	4013      	ands	r3, r2
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d025      	beq.n	8001dcc <testHandler+0x268>
		{
			char time[9] = {0};
 8001d80:	003b      	movs	r3, r7
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	3304      	adds	r3, #4
 8001d88:	2205      	movs	r2, #5
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f00a f94d 	bl	800c02c <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001d92:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <testHandler+0x344>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	223c      	movs	r2, #60	; 0x3c
 8001d98:	1ad2      	subs	r2, r2, r3
 8001d9a:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <testHandler+0x344>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	213c      	movs	r1, #60	; 0x3c
 8001da0:	1acc      	subs	r4, r1, r3
 8001da2:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <testHandler+0x344>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2103      	movs	r1, #3
 8001da8:	1acb      	subs	r3, r1, r3
 8001daa:	4940      	ldr	r1, [pc, #256]	; (8001eac <testHandler+0x348>)
 8001dac:	0038      	movs	r0, r7
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	0023      	movs	r3, r4
 8001db2:	f00a f9fd 	bl	800c1b0 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8001db6:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <testHandler+0x34c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <testHandler+0x34c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	404a      	eors	r2, r1
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	701a      	strb	r2, [r3, #0]
			sendData();
 8001dc8:	f7ff fc66 	bl	8001698 <sendData>
		}
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
 8001dcc:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <testHandler+0x344>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2105      	movs	r1, #5
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7fe fb1a 	bl	800040c <__aeabi_idivmod>
 8001dd8:	1e0b      	subs	r3, r1, #0
 8001dda:	d10f      	bne.n	8001dfc <testHandler+0x298>
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <testHandler+0x344>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00b      	beq.n	8001dfc <testHandler+0x298>
 8001de4:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <testHandler+0x334>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2204      	movs	r2, #4
 8001dea:	4013      	ands	r3, r2
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <testHandler+0x298>
		{
			flags.meas.measRequest = 1;
 8001df2:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <testHandler+0x334>)
 8001df4:	7d1a      	ldrb	r2, [r3, #20]
 8001df6:	2101      	movs	r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	751a      	strb	r2, [r3, #20]
		}
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po třech hodinách je měření u konce___//
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <testHandler+0x344>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b0e      	cmp	r3, #14
 8001e02:	dd41      	ble.n	8001e88 <testHandler+0x324>
		{
			testPhase++;
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <testHandler+0x338>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <testHandler+0x338>)
 8001e0e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001e10:	e03a      	b.n	8001e88 <testHandler+0x324>
	case BATTERY_TEST_DONE:
		if(flags.meas.measComplete)
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <testHandler+0x334>)
 8001e14:	7d1b      	ldrb	r3, [r3, #20]
 8001e16:	2202      	movs	r2, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d035      	beq.n	8001e8c <testHandler+0x328>
		{
			flags.ui.done = 1;
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <testHandler+0x334>)
 8001e22:	7c1a      	ldrb	r2, [r3, #16]
 8001e24:	2110      	movs	r1, #16
 8001e26:	430a      	orrs	r2, r1
 8001e28:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <testHandler+0x334>)
 8001e2c:	7e1a      	ldrb	r2, [r3, #24]
 8001e2e:	2102      	movs	r1, #2
 8001e30:	430a      	orrs	r2, r1
 8001e32:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			LOAD_MIN_OFF;
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <testHandler+0x340>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 ff7d 	bl	8002d3a <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <testHandler+0x340>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	2140      	movs	r1, #64	; 0x40
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 ff77 	bl	8002d3a <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <testHandler+0x34c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <testHandler+0x34c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2108      	movs	r1, #8
 8001e58:	438a      	bics	r2, r1
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <testHandler+0x34c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <testHandler+0x34c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	438a      	bics	r2, r1
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
			sendData();
 8001e70:	f7ff fc12 	bl	8001698 <sendData>

			testPhase = WAITING;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <testHandler+0x338>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001e7a:	e007      	b.n	8001e8c <testHandler+0x328>
		break;
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	e006      	b.n	8001e8e <testHandler+0x32a>
		break;
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	e004      	b.n	8001e8e <testHandler+0x32a>
		break;
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	e002      	b.n	8001e8e <testHandler+0x32a>
		break;
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	e000      	b.n	8001e8e <testHandler+0x32a>
		break;
 8001e8c:	46c0      	nop			; (mov r8, r8)

	}
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b008      	add	sp, #32
 8001e94:	bdb0      	pop	{r4, r5, r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	20000584 	.word	0x20000584
 8001e9c:	20000218 	.word	0x20000218
 8001ea0:	0800c970 	.word	0x0800c970
 8001ea4:	48000800 	.word	0x48000800
 8001ea8:	200001fc 	.word	0x200001fc
 8001eac:	0800c8cc 	.word	0x0800c8cc
 8001eb0:	20000634 	.word	0x20000634

08001eb4 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <startTest+0x40>)
 8001eba:	7c1a      	ldrb	r2, [r3, #16]
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <startTest+0x44>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
	flags.testProgress = 1;
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <startTest+0x40>)
 8001eca:	7e1a      	ldrb	r2, [r3, #24]
 8001ecc:	2102      	movs	r1, #2
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <startTest+0x48>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <startTest+0x4c>)
 8001ed8:	601a      	str	r2, [r3, #0]
	 * RELAY_ON(*sourceInTesting);	//připojit relé
	 *
	 * sendData();	//poslat konfiguraci shift registrům
	 */
	//Zobrazit text na displej
	flags.meas.measRequest = 1;	//spustit měření
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <startTest+0x40>)
 8001edc:	7d1a      	ldrb	r2, [r3, #20]
 8001ede:	2101      	movs	r1, #1
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	751a      	strb	r2, [r3, #20]

	flags.instructions.startRequest = 0;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <startTest+0x40>)
 8001ee6:	7b1a      	ldrb	r2, [r3, #12]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	438a      	bics	r2, r1
 8001eec:	731a      	strb	r2, [r3, #12]
}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000584 	.word	0x20000584
 8001ef8:	20000218 	.word	0x20000218
 8001efc:	20000624 	.word	0x20000624
 8001f00:	20000634 	.word	0x20000634

08001f04 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <stopTest+0x3c>)
 8001f0a:	7c1a      	ldrb	r2, [r3, #16]
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <stopTest+0x40>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]

	//Poslat data shift registrům
	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <stopTest+0x44>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 ff0b 	bl	8002d3a <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <stopTest+0x44>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	2140      	movs	r1, #64	; 0x40
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 ff05 	bl	8002d3a <HAL_GPIO_WritePin>

	flags.instructions.stopRequest = 0;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <stopTest+0x3c>)
 8001f32:	7b1a      	ldrb	r2, [r3, #12]
 8001f34:	2102      	movs	r1, #2
 8001f36:	438a      	bics	r2, r1
 8001f38:	731a      	strb	r2, [r3, #12]
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000584 	.word	0x20000584
 8001f44:	20000218 	.word	0x20000218
 8001f48:	48000800 	.word	0x48000800

08001f4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f4c:	480d      	ldr	r0, [pc, #52]	; (8001f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f52:	490e      	ldr	r1, [pc, #56]	; (8001f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f54:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <LoopForever+0xe>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f58:	e002      	b.n	8001f60 <LoopCopyDataInit>

08001f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5e:	3304      	adds	r3, #4

08001f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f64:	d3f9      	bcc.n	8001f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f68:	4c0b      	ldr	r4, [pc, #44]	; (8001f98 <LoopForever+0x16>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f6c:	e001      	b.n	8001f72 <LoopFillZerobss>

08001f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f70:	3204      	adds	r2, #4

08001f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f74:	d3fb      	bcc.n	8001f6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f76:	f7ff fdef 	bl	8001b58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f7a:	f00a f81f 	bl	800bfbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f7e:	f7fe faf5 	bl	800056c <main>

08001f82 <LoopForever>:

LoopForever:
    b LoopForever
 8001f82:	e7fe      	b.n	8001f82 <LoopForever>
  ldr   r0, =_estack
 8001f84:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f90:	0800cab8 	.word	0x0800cab8
  ldr r2, =_sbss
 8001f94:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f98:	200015d8 	.word	0x200015d8

08001f9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC1_COMP_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_Init+0x24>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_Init+0x24>)
 8001faa:	2110      	movs	r1, #16
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f000 f809 	bl	8001fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb6:	f7ff fba3 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	40022000 	.word	0x40022000

08001fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd0:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_InitTick+0x5c>)
 8001fd2:	681c      	ldr	r4, [r3, #0]
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_InitTick+0x60>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	0019      	movs	r1, r3
 8001fda:	23fa      	movs	r3, #250	; 0xfa
 8001fdc:	0098      	lsls	r0, r3, #2
 8001fde:	f7fe f8a5 	bl	800012c <__udivsi3>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	0020      	movs	r0, r4
 8001fe8:	f7fe f8a0 	bl	800012c <__udivsi3>
 8001fec:	0003      	movs	r3, r0
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 fb7d 	bl	80026ee <HAL_SYSTICK_Config>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e00f      	b.n	800201c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d80b      	bhi.n	800201a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	2301      	movs	r3, #1
 8002006:	425b      	negs	r3, r3
 8002008:	2200      	movs	r2, #0
 800200a:	0018      	movs	r0, r3
 800200c:	f000 fb4a 	bl	80026a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_InitTick+0x64>)
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e000      	b.n	800201c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	b003      	add	sp, #12
 8002022:	bd90      	pop	{r4, r7, pc}
 8002024:	20000000 	.word	0x20000000
 8002028:	20000008 	.word	0x20000008
 800202c:	20000004 	.word	0x20000004

08002030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_IncTick+0x1c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	001a      	movs	r2, r3
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_IncTick+0x20>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	18d2      	adds	r2, r2, r3
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_IncTick+0x20>)
 8002042:	601a      	str	r2, [r3, #0]
}
 8002044:	46c0      	nop			; (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	20000008 	.word	0x20000008
 8002050:	20000638 	.word	0x20000638

08002054 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  return uwTick;
 8002058:	4b02      	ldr	r3, [pc, #8]	; (8002064 <HAL_GetTick+0x10>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	20000638 	.word	0x20000638

08002068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002070:	f7ff fff0 	bl	8002054 <HAL_GetTick>
 8002074:	0003      	movs	r3, r0
 8002076:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3301      	adds	r3, #1
 8002080:	d005      	beq.n	800208e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_Delay+0x44>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	001a      	movs	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	189b      	adds	r3, r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	f7ff ffe0 	bl	8002054 <HAL_GetTick>
 8002094:	0002      	movs	r2, r0
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d8f7      	bhi.n	8002090 <HAL_Delay+0x28>
  {
  }
}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	20000008 	.word	0x20000008

080020b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b8:	230f      	movs	r3, #15
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e125      	b.n	800231a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2234      	movs	r2, #52	; 0x34
 80020e0:	2100      	movs	r1, #0
 80020e2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f7ff fb2e 	bl	8001748 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	2210      	movs	r2, #16
 80020f2:	4013      	ands	r3, r2
 80020f4:	d000      	beq.n	80020f8 <HAL_ADC_Init+0x48>
 80020f6:	e103      	b.n	8002300 <HAL_ADC_Init+0x250>
 80020f8:	230f      	movs	r3, #15
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d000      	beq.n	8002104 <HAL_ADC_Init+0x54>
 8002102:	e0fd      	b.n	8002300 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2204      	movs	r2, #4
 800210c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800210e:	d000      	beq.n	8002112 <HAL_ADC_Init+0x62>
 8002110:	e0f6      	b.n	8002300 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	4a83      	ldr	r2, [pc, #524]	; (8002324 <HAL_ADC_Init+0x274>)
 8002118:	4013      	ands	r3, r2
 800211a:	2202      	movs	r2, #2
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2203      	movs	r2, #3
 800212a:	4013      	ands	r3, r2
 800212c:	2b01      	cmp	r3, #1
 800212e:	d112      	bne.n	8002156 <HAL_ADC_Init+0xa6>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2201      	movs	r2, #1
 8002138:	4013      	ands	r3, r2
 800213a:	2b01      	cmp	r3, #1
 800213c:	d009      	beq.n	8002152 <HAL_ADC_Init+0xa2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	401a      	ands	r2, r3
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	429a      	cmp	r2, r3
 8002150:	d101      	bne.n	8002156 <HAL_ADC_Init+0xa6>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_ADC_Init+0xa8>
 8002156:	2300      	movs	r3, #0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d116      	bne.n	800218a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2218      	movs	r2, #24
 8002164:	4393      	bics	r3, r2
 8002166:	0019      	movs	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	0899      	lsrs	r1, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4964      	ldr	r1, [pc, #400]	; (8002328 <HAL_ADC_Init+0x278>)
 8002196:	400a      	ands	r2, r1
 8002198:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	7e1b      	ldrb	r3, [r3, #24]
 800219e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7e5b      	ldrb	r3, [r3, #25]
 80021a4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7e9b      	ldrb	r3, [r3, #26]
 80021ac:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80021ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d002      	beq.n	80021be <HAL_ADC_Init+0x10e>
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	015b      	lsls	r3, r3, #5
 80021bc:	e000      	b.n	80021c0 <HAL_ADC_Init+0x110>
 80021be:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021c0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80021c6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_Init+0x124>
 80021d0:	2304      	movs	r3, #4
 80021d2:	e000      	b.n	80021d6 <HAL_ADC_Init+0x126>
 80021d4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80021d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2124      	movs	r1, #36	; 0x24
 80021dc:	5c5b      	ldrb	r3, [r3, r1]
 80021de:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80021e0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7edb      	ldrb	r3, [r3, #27]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d115      	bne.n	800221c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7e9b      	ldrb	r3, [r3, #26]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	0252      	lsls	r2, r2, #9
 80021fe:	4313      	orrs	r3, r2
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	e00b      	b.n	800221c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	2220      	movs	r2, #32
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002214:	2201      	movs	r2, #1
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	23c2      	movs	r3, #194	; 0xc2
 8002222:	33ff      	adds	r3, #255	; 0xff
 8002224:	429a      	cmp	r2, r3
 8002226:	d007      	beq.n	8002238 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002230:	4313      	orrs	r3, r2
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	4313      	orrs	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68d9      	ldr	r1, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	430a      	orrs	r2, r1
 8002246:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	055b      	lsls	r3, r3, #21
 8002250:	429a      	cmp	r2, r3
 8002252:	d01b      	beq.n	800228c <HAL_ADC_Init+0x1dc>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d017      	beq.n	800228c <HAL_ADC_Init+0x1dc>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	2b02      	cmp	r3, #2
 8002262:	d013      	beq.n	800228c <HAL_ADC_Init+0x1dc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	2b03      	cmp	r3, #3
 800226a:	d00f      	beq.n	800228c <HAL_ADC_Init+0x1dc>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	2b04      	cmp	r3, #4
 8002272:	d00b      	beq.n	800228c <HAL_ADC_Init+0x1dc>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	2b05      	cmp	r3, #5
 800227a:	d007      	beq.n	800228c <HAL_ADC_Init+0x1dc>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	2b06      	cmp	r3, #6
 8002282:	d003      	beq.n	800228c <HAL_ADC_Init+0x1dc>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	2b07      	cmp	r3, #7
 800228a:	d112      	bne.n	80022b2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2107      	movs	r1, #7
 8002298:	438a      	bics	r2, r1
 800229a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6959      	ldr	r1, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	2207      	movs	r2, #7
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_ADC_Init+0x27c>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d10b      	bne.n	80022da <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	2203      	movs	r2, #3
 80022ce:	4393      	bics	r3, r2
 80022d0:	2201      	movs	r2, #1
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022d8:	e01c      	b.n	8002314 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	2212      	movs	r2, #18
 80022e0:	4393      	bics	r3, r2
 80022e2:	2210      	movs	r2, #16
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	2201      	movs	r2, #1
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80022f6:	230f      	movs	r3, #15
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80022fe:	e009      	b.n	8002314 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	2210      	movs	r2, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800230c:	230f      	movs	r3, #15
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002314:	230f      	movs	r3, #15
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b004      	add	sp, #16
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	fffffefd 	.word	0xfffffefd
 8002328:	fffe0219 	.word	0xfffe0219
 800232c:	833fffe7 	.word	0x833fffe7

08002330 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233a:	230f      	movs	r3, #15
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	055b      	lsls	r3, r3, #21
 800234e:	429a      	cmp	r2, r3
 8002350:	d011      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x46>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d00d      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x46>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	2b02      	cmp	r3, #2
 8002360:	d009      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x46>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	2b03      	cmp	r3, #3
 8002368:	d005      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x46>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	2b04      	cmp	r3, #4
 8002370:	d001      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x46>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2234      	movs	r2, #52	; 0x34
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x54>
 8002380:	2302      	movs	r3, #2
 8002382:	e0d0      	b.n	8002526 <HAL_ADC_ConfigChannel+0x1f6>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2234      	movs	r2, #52	; 0x34
 8002388:	2101      	movs	r1, #1
 800238a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2204      	movs	r2, #4
 8002394:	4013      	ands	r3, r2
 8002396:	d000      	beq.n	800239a <HAL_ADC_ConfigChannel+0x6a>
 8002398:	e0b4      	b.n	8002504 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4a64      	ldr	r2, [pc, #400]	; (8002530 <HAL_ADC_ConfigChannel+0x200>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d100      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x76>
 80023a4:	e082      	b.n	80024ac <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	055b      	lsls	r3, r3, #21
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d037      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x108>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d033      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x108>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d02f      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x108>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d02b      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x108>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d027      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x108>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d023      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x108>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	2b06      	cmp	r3, #6
 80023f6:	d01f      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x108>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	2b07      	cmp	r3, #7
 80023fe:	d01b      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2107      	movs	r1, #7
 800240c:	400b      	ands	r3, r1
 800240e:	429a      	cmp	r2, r3
 8002410:	d012      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2107      	movs	r1, #7
 800241e:	438a      	bics	r2, r1
 8002420:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6959      	ldr	r1, [r3, #20]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2207      	movs	r2, #7
 800242e:	401a      	ands	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b10      	cmp	r3, #16
 800243e:	d007      	beq.n	8002450 <HAL_ADC_ConfigChannel+0x120>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b11      	cmp	r3, #17
 8002446:	d003      	beq.n	8002450 <HAL_ADC_ConfigChannel+0x120>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b12      	cmp	r3, #18
 800244e:	d163      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002450:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_ADC_ConfigChannel+0x204>)
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b10      	cmp	r3, #16
 800245a:	d009      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x140>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b11      	cmp	r3, #17
 8002462:	d102      	bne.n	800246a <HAL_ADC_ConfigChannel+0x13a>
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	03db      	lsls	r3, r3, #15
 8002468:	e004      	b.n	8002474 <HAL_ADC_ConfigChannel+0x144>
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	045b      	lsls	r3, r3, #17
 800246e:	e001      	b.n	8002474 <HAL_ADC_ConfigChannel+0x144>
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	4a2f      	ldr	r2, [pc, #188]	; (8002534 <HAL_ADC_ConfigChannel+0x204>)
 8002476:	430b      	orrs	r3, r1
 8002478:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d14a      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_ADC_ConfigChannel+0x208>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	492d      	ldr	r1, [pc, #180]	; (800253c <HAL_ADC_ConfigChannel+0x20c>)
 8002488:	0018      	movs	r0, r3
 800248a:	f7fd fe4f 	bl	800012c <__udivsi3>
 800248e:	0003      	movs	r3, r0
 8002490:	001a      	movs	r2, r3
 8002492:	0013      	movs	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	189b      	adds	r3, r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800249c:	e002      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f9      	bne.n	800249e <HAL_ADC_ConfigChannel+0x16e>
 80024aa:	e035      	b.n	8002518 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2101      	movs	r1, #1
 80024b8:	4099      	lsls	r1, r3
 80024ba:	000b      	movs	r3, r1
 80024bc:	43d9      	mvns	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	400a      	ands	r2, r1
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d007      	beq.n	80024de <HAL_ADC_ConfigChannel+0x1ae>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b11      	cmp	r3, #17
 80024d4:	d003      	beq.n	80024de <HAL_ADC_ConfigChannel+0x1ae>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b12      	cmp	r3, #18
 80024dc:	d11c      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_ADC_ConfigChannel+0x204>)
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d007      	beq.n	80024fa <HAL_ADC_ConfigChannel+0x1ca>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b11      	cmp	r3, #17
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x1c6>
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_ADC_ConfigChannel+0x210>)
 80024f4:	e002      	b.n	80024fc <HAL_ADC_ConfigChannel+0x1cc>
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_ADC_ConfigChannel+0x214>)
 80024f8:	e000      	b.n	80024fc <HAL_ADC_ConfigChannel+0x1cc>
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_ADC_ConfigChannel+0x218>)
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <HAL_ADC_ConfigChannel+0x204>)
 80024fe:	400b      	ands	r3, r1
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e009      	b.n	8002518 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	2220      	movs	r2, #32
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002510:	230f      	movs	r3, #15
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2234      	movs	r2, #52	; 0x34
 800251c:	2100      	movs	r1, #0
 800251e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002520:	230f      	movs	r3, #15
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	781b      	ldrb	r3, [r3, #0]
}
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	b004      	add	sp, #16
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	00001001 	.word	0x00001001
 8002534:	40012708 	.word	0x40012708
 8002538:	20000000 	.word	0x20000000
 800253c:	000f4240 	.word	0x000f4240
 8002540:	ffbfffff 	.word	0xffbfffff
 8002544:	feffffff 	.word	0xfeffffff
 8002548:	ff7fffff 	.word	0xff7fffff

0800254c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	0002      	movs	r2, r0
 8002554:	1dfb      	adds	r3, r7, #7
 8002556:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002558:	1dfb      	adds	r3, r7, #7
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b7f      	cmp	r3, #127	; 0x7f
 800255e:	d809      	bhi.n	8002574 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	001a      	movs	r2, r3
 8002566:	231f      	movs	r3, #31
 8002568:	401a      	ands	r2, r3
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <__NVIC_EnableIRQ+0x30>)
 800256c:	2101      	movs	r1, #1
 800256e:	4091      	lsls	r1, r2
 8002570:	000a      	movs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
  }
}
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}
 800257c:	e000e100 	.word	0xe000e100

08002580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	0002      	movs	r2, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	1dfb      	adds	r3, r7, #7
 800258c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800258e:	1dfb      	adds	r3, r7, #7
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b7f      	cmp	r3, #127	; 0x7f
 8002594:	d828      	bhi.n	80025e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002596:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <__NVIC_SetPriority+0xd4>)
 8002598:	1dfb      	adds	r3, r7, #7
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b25b      	sxtb	r3, r3
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	33c0      	adds	r3, #192	; 0xc0
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	589b      	ldr	r3, [r3, r2]
 80025a6:	1dfa      	adds	r2, r7, #7
 80025a8:	7812      	ldrb	r2, [r2, #0]
 80025aa:	0011      	movs	r1, r2
 80025ac:	2203      	movs	r2, #3
 80025ae:	400a      	ands	r2, r1
 80025b0:	00d2      	lsls	r2, r2, #3
 80025b2:	21ff      	movs	r1, #255	; 0xff
 80025b4:	4091      	lsls	r1, r2
 80025b6:	000a      	movs	r2, r1
 80025b8:	43d2      	mvns	r2, r2
 80025ba:	401a      	ands	r2, r3
 80025bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	22ff      	movs	r2, #255	; 0xff
 80025c4:	401a      	ands	r2, r3
 80025c6:	1dfb      	adds	r3, r7, #7
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	0018      	movs	r0, r3
 80025cc:	2303      	movs	r3, #3
 80025ce:	4003      	ands	r3, r0
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025d4:	481f      	ldr	r0, [pc, #124]	; (8002654 <__NVIC_SetPriority+0xd4>)
 80025d6:	1dfb      	adds	r3, r7, #7
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	430a      	orrs	r2, r1
 80025e0:	33c0      	adds	r3, #192	; 0xc0
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025e6:	e031      	b.n	800264c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025e8:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <__NVIC_SetPriority+0xd8>)
 80025ea:	1dfb      	adds	r3, r7, #7
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	0019      	movs	r1, r3
 80025f0:	230f      	movs	r3, #15
 80025f2:	400b      	ands	r3, r1
 80025f4:	3b08      	subs	r3, #8
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3306      	adds	r3, #6
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	18d3      	adds	r3, r2, r3
 80025fe:	3304      	adds	r3, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1dfa      	adds	r2, r7, #7
 8002604:	7812      	ldrb	r2, [r2, #0]
 8002606:	0011      	movs	r1, r2
 8002608:	2203      	movs	r2, #3
 800260a:	400a      	ands	r2, r1
 800260c:	00d2      	lsls	r2, r2, #3
 800260e:	21ff      	movs	r1, #255	; 0xff
 8002610:	4091      	lsls	r1, r2
 8002612:	000a      	movs	r2, r1
 8002614:	43d2      	mvns	r2, r2
 8002616:	401a      	ands	r2, r3
 8002618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	019b      	lsls	r3, r3, #6
 800261e:	22ff      	movs	r2, #255	; 0xff
 8002620:	401a      	ands	r2, r3
 8002622:	1dfb      	adds	r3, r7, #7
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	0018      	movs	r0, r3
 8002628:	2303      	movs	r3, #3
 800262a:	4003      	ands	r3, r0
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002630:	4809      	ldr	r0, [pc, #36]	; (8002658 <__NVIC_SetPriority+0xd8>)
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	001c      	movs	r4, r3
 8002638:	230f      	movs	r3, #15
 800263a:	4023      	ands	r3, r4
 800263c:	3b08      	subs	r3, #8
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	430a      	orrs	r2, r1
 8002642:	3306      	adds	r3, #6
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	18c3      	adds	r3, r0, r3
 8002648:	3304      	adds	r3, #4
 800264a:	601a      	str	r2, [r3, #0]
}
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b003      	add	sp, #12
 8002652:	bd90      	pop	{r4, r7, pc}
 8002654:	e000e100 	.word	0xe000e100
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	045b      	lsls	r3, r3, #17
 800266c:	429a      	cmp	r2, r3
 800266e:	d301      	bcc.n	8002674 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002670:	2301      	movs	r3, #1
 8002672:	e010      	b.n	8002696 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <SysTick_Config+0x44>)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	3a01      	subs	r2, #1
 800267a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267c:	2301      	movs	r3, #1
 800267e:	425b      	negs	r3, r3
 8002680:	2103      	movs	r1, #3
 8002682:	0018      	movs	r0, r3
 8002684:	f7ff ff7c 	bl	8002580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SysTick_Config+0x44>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <SysTick_Config+0x44>)
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002694:	2300      	movs	r3, #0
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b002      	add	sp, #8
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	210f      	movs	r1, #15
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	1c02      	adds	r2, r0, #0
 80026b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	0011      	movs	r1, r2
 80026c0:	0018      	movs	r0, r3
 80026c2:	f7ff ff5d 	bl	8002580 <__NVIC_SetPriority>
}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b004      	add	sp, #16
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	0002      	movs	r2, r0
 80026d6:	1dfb      	adds	r3, r7, #7
 80026d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b25b      	sxtb	r3, r3
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff ff33 	bl	800254c <__NVIC_EnableIRQ>
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7ff ffaf 	bl	800265c <SysTick_Config>
 80026fe:	0003      	movs	r3, r0
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e036      	b.n	800278c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2221      	movs	r2, #33	; 0x21
 8002722:	2102      	movs	r1, #2
 8002724:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a18      	ldr	r2, [pc, #96]	; (8002794 <HAL_DMA_Init+0x8c>)
 8002732:	4013      	ands	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800273e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 f932 	bl	80029d8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2221      	movs	r2, #33	; 0x21
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2220      	movs	r2, #32
 8002786:	2100      	movs	r1, #0
 8002788:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}  
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b004      	add	sp, #16
 8002792:	bd80      	pop	{r7, pc}
 8002794:	ffffc00f 	.word	0xffffc00f

08002798 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2221      	movs	r2, #33	; 0x21
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d008      	beq.n	80027be <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2204      	movs	r2, #4
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e020      	b.n	8002800 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	210e      	movs	r1, #14
 80027ca:	438a      	bics	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	438a      	bics	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	2101      	movs	r1, #1
 80027e8:	4091      	lsls	r1, r2
 80027ea:	000a      	movs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2221      	movs	r2, #33	; 0x21
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	2100      	movs	r1, #0
 80027fc:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002810:	210f      	movs	r1, #15
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2221      	movs	r2, #33	; 0x21
 800281c:	5c9b      	ldrb	r3, [r3, r2]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d006      	beq.n	8002832 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2204      	movs	r2, #4
 8002828:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800282a:	187b      	adds	r3, r7, r1
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e028      	b.n	8002884 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	210e      	movs	r1, #14
 800283e:	438a      	bics	r2, r1
 8002840:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	438a      	bics	r2, r1
 8002850:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	2101      	movs	r1, #1
 800285c:	4091      	lsls	r1, r2
 800285e:	000a      	movs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2221      	movs	r2, #33	; 0x21
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2220      	movs	r2, #32
 800286e:	2100      	movs	r1, #0
 8002870:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	0010      	movs	r0, r2
 8002882:	4798      	blx	r3
    } 
  }
  return status;
 8002884:	230f      	movs	r3, #15
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	781b      	ldrb	r3, [r3, #0]
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b004      	add	sp, #16
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2204      	movs	r2, #4
 80028b0:	409a      	lsls	r2, r3
 80028b2:	0013      	movs	r3, r2
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	d024      	beq.n	8002904 <HAL_DMA_IRQHandler+0x72>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2204      	movs	r2, #4
 80028be:	4013      	ands	r3, r2
 80028c0:	d020      	beq.n	8002904 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2220      	movs	r2, #32
 80028ca:	4013      	ands	r3, r2
 80028cc:	d107      	bne.n	80028de <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2104      	movs	r1, #4
 80028da:	438a      	bics	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	2104      	movs	r1, #4
 80028e8:	4091      	lsls	r1, r2
 80028ea:	000a      	movs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d100      	bne.n	80028f8 <HAL_DMA_IRQHandler+0x66>
 80028f6:	e06a      	b.n	80029ce <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	0010      	movs	r0, r2
 8002900:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002902:	e064      	b.n	80029ce <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	2202      	movs	r2, #2
 800290a:	409a      	lsls	r2, r3
 800290c:	0013      	movs	r3, r2
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	d02b      	beq.n	800296c <HAL_DMA_IRQHandler+0xda>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2202      	movs	r2, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d027      	beq.n	800296c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2220      	movs	r2, #32
 8002924:	4013      	ands	r3, r2
 8002926:	d10b      	bne.n	8002940 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	210a      	movs	r1, #10
 8002934:	438a      	bics	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2221      	movs	r2, #33	; 0x21
 800293c:	2101      	movs	r1, #1
 800293e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	2102      	movs	r1, #2
 800294a:	4091      	lsls	r1, r2
 800294c:	000a      	movs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	2100      	movs	r1, #0
 8002956:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	d036      	beq.n	80029ce <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	0010      	movs	r0, r2
 8002968:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800296a:	e030      	b.n	80029ce <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	2208      	movs	r2, #8
 8002972:	409a      	lsls	r2, r3
 8002974:	0013      	movs	r3, r2
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4013      	ands	r3, r2
 800297a:	d028      	beq.n	80029ce <HAL_DMA_IRQHandler+0x13c>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2208      	movs	r2, #8
 8002980:	4013      	ands	r3, r2
 8002982:	d024      	beq.n	80029ce <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	210e      	movs	r1, #14
 8002990:	438a      	bics	r2, r1
 8002992:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	2101      	movs	r1, #1
 800299e:	4091      	lsls	r1, r2
 80029a0:	000a      	movs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2221      	movs	r2, #33	; 0x21
 80029ae:	2101      	movs	r1, #1
 80029b0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	2100      	movs	r1, #0
 80029b8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	0010      	movs	r0, r2
 80029ca:	4798      	blx	r3
    }
   }
}  
 80029cc:	e7ff      	b.n	80029ce <HAL_DMA_IRQHandler+0x13c>
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b004      	add	sp, #16
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <DMA_CalcBaseAndBitshift+0x30>)
 80029e6:	4694      	mov	ip, r2
 80029e8:	4463      	add	r3, ip
 80029ea:	2114      	movs	r1, #20
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7fd fb9d 	bl	800012c <__udivsi3>
 80029f2:	0003      	movs	r3, r0
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a03      	ldr	r2, [pc, #12]	; (8002a0c <DMA_CalcBaseAndBitshift+0x34>)
 80029fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b002      	add	sp, #8
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	bffdfff8 	.word	0xbffdfff8
 8002a0c:	40020000 	.word	0x40020000

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1e:	e155      	b.n	8002ccc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4091      	lsls	r1, r2
 8002a2a:	000a      	movs	r2, r1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d100      	bne.n	8002a38 <HAL_GPIO_Init+0x28>
 8002a36:	e146      	b.n	8002cc6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d005      	beq.n	8002a50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d130      	bne.n	8002ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	0013      	movs	r3, r2
 8002a60:	43da      	mvns	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	409a      	lsls	r2, r3
 8002a72:	0013      	movs	r3, r2
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a86:	2201      	movs	r2, #1
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	0013      	movs	r3, r2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d017      	beq.n	8002aee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	409a      	lsls	r2, r3
 8002acc:	0013      	movs	r3, r2
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	0013      	movs	r3, r2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2203      	movs	r2, #3
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d123      	bne.n	8002b42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	08da      	lsrs	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3208      	adds	r2, #8
 8002b02:	0092      	lsls	r2, r2, #2
 8002b04:	58d3      	ldr	r3, [r2, r3]
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2207      	movs	r2, #7
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	409a      	lsls	r2, r3
 8002b14:	0013      	movs	r3, r2
 8002b16:	43da      	mvns	r2, r3
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2107      	movs	r1, #7
 8002b26:	400b      	ands	r3, r1
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	08da      	lsrs	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3208      	adds	r2, #8
 8002b3c:	0092      	lsls	r2, r2, #2
 8002b3e:	6939      	ldr	r1, [r7, #16]
 8002b40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	0013      	movs	r3, r2
 8002b52:	43da      	mvns	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2203      	movs	r2, #3
 8002b60:	401a      	ands	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	409a      	lsls	r2, r3
 8002b68:	0013      	movs	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	23c0      	movs	r3, #192	; 0xc0
 8002b7c:	029b      	lsls	r3, r3, #10
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d100      	bne.n	8002b84 <HAL_GPIO_Init+0x174>
 8002b82:	e0a0      	b.n	8002cc6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b84:	4b57      	ldr	r3, [pc, #348]	; (8002ce4 <HAL_GPIO_Init+0x2d4>)
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_GPIO_Init+0x2d4>)
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	619a      	str	r2, [r3, #24]
 8002b90:	4b54      	ldr	r3, [pc, #336]	; (8002ce4 <HAL_GPIO_Init+0x2d4>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2201      	movs	r2, #1
 8002b96:	4013      	ands	r3, r2
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b9c:	4a52      	ldr	r2, [pc, #328]	; (8002ce8 <HAL_GPIO_Init+0x2d8>)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	589b      	ldr	r3, [r3, r2]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2203      	movs	r2, #3
 8002bae:	4013      	ands	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	0013      	movs	r3, r2
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	2390      	movs	r3, #144	; 0x90
 8002bc4:	05db      	lsls	r3, r3, #23
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d019      	beq.n	8002bfe <HAL_GPIO_Init+0x1ee>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a47      	ldr	r2, [pc, #284]	; (8002cec <HAL_GPIO_Init+0x2dc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_GPIO_Init+0x1ea>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a46      	ldr	r2, [pc, #280]	; (8002cf0 <HAL_GPIO_Init+0x2e0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_GPIO_Init+0x1e6>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a45      	ldr	r2, [pc, #276]	; (8002cf4 <HAL_GPIO_Init+0x2e4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <HAL_GPIO_Init+0x1e2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a44      	ldr	r2, [pc, #272]	; (8002cf8 <HAL_GPIO_Init+0x2e8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_GPIO_Init+0x1de>
 8002bea:	2304      	movs	r3, #4
 8002bec:	e008      	b.n	8002c00 <HAL_GPIO_Init+0x1f0>
 8002bee:	2305      	movs	r3, #5
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x1f0>
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e004      	b.n	8002c00 <HAL_GPIO_Init+0x1f0>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_Init+0x1f0>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x1f0>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	2103      	movs	r1, #3
 8002c04:	400a      	ands	r2, r1
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4093      	lsls	r3, r2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c10:	4935      	ldr	r1, [pc, #212]	; (8002ce8 <HAL_GPIO_Init+0x2d8>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43da      	mvns	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	025b      	lsls	r3, r3, #9
 8002c36:	4013      	ands	r3, r2
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c48:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	43da      	mvns	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	029b      	lsls	r3, r3, #10
 8002c60:	4013      	ands	r3, r2
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c6c:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	035b      	lsls	r3, r3, #13
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c9c:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43da      	mvns	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	039b      	lsls	r3, r3, #14
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_GPIO_Init+0x2ec>)
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	40da      	lsrs	r2, r3
 8002cd4:	1e13      	subs	r3, r2, #0
 8002cd6:	d000      	beq.n	8002cda <HAL_GPIO_Init+0x2ca>
 8002cd8:	e6a2      	b.n	8002a20 <HAL_GPIO_Init+0x10>
  } 
}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b006      	add	sp, #24
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	48000400 	.word	0x48000400
 8002cf0:	48000800 	.word	0x48000800
 8002cf4:	48000c00 	.word	0x48000c00
 8002cf8:	48001000 	.word	0x48001000
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	000a      	movs	r2, r1
 8002d0a:	1cbb      	adds	r3, r7, #2
 8002d0c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	1cba      	adds	r2, r7, #2
 8002d14:	8812      	ldrh	r2, [r2, #0]
 8002d16:	4013      	ands	r3, r2
 8002d18:	d004      	beq.n	8002d24 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d1a:	230f      	movs	r3, #15
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e003      	b.n	8002d2c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d24:	230f      	movs	r3, #15
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d2c:	230f      	movs	r3, #15
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	781b      	ldrb	r3, [r3, #0]
  }
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b004      	add	sp, #16
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	0008      	movs	r0, r1
 8002d44:	0011      	movs	r1, r2
 8002d46:	1cbb      	adds	r3, r7, #2
 8002d48:	1c02      	adds	r2, r0, #0
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	1c7b      	adds	r3, r7, #1
 8002d4e:	1c0a      	adds	r2, r1, #0
 8002d50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d52:	1c7b      	adds	r3, r7, #1
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d5a:	1cbb      	adds	r3, r7, #2
 8002d5c:	881a      	ldrh	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d62:	e003      	b.n	8002d6c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d64:	1cbb      	adds	r3, r7, #2
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	000a      	movs	r2, r1
 8002d7e:	1cbb      	adds	r3, r7, #2
 8002d80:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d88:	1cbb      	adds	r3, r7, #2
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	041a      	lsls	r2, r3, #16
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	1cb9      	adds	r1, r7, #2
 8002d98:	8809      	ldrh	r1, [r1, #0]
 8002d9a:	400b      	ands	r3, r1
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	619a      	str	r2, [r3, #24]
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	0002      	movs	r2, r0
 8002db4:	1dbb      	adds	r3, r7, #6
 8002db6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	1dba      	adds	r2, r7, #6
 8002dbe:	8812      	ldrh	r2, [r2, #0]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d008      	beq.n	8002dd6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002dc6:	1dba      	adds	r2, r7, #6
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dcc:	1dbb      	adds	r3, r7, #6
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7fd fb93 	bl	80004fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b002      	add	sp, #8
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40010400 	.word	0x40010400

08002de4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de6:	b08b      	sub	sp, #44	; 0x2c
 8002de8:	af06      	add	r7, sp, #24
 8002dea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0ff      	b.n	8002ff6 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a81      	ldr	r2, [pc, #516]	; (8003000 <HAL_PCD_Init+0x21c>)
 8002dfa:	5c9b      	ldrb	r3, [r3, r2]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d108      	bne.n	8002e14 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	23aa      	movs	r3, #170	; 0xaa
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	2100      	movs	r1, #0
 8002e0a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f008 fd70 	bl	800b8f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a7a      	ldr	r2, [pc, #488]	; (8003000 <HAL_PCD_Init+0x21c>)
 8002e18:	2103      	movs	r1, #3
 8002e1a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f004 fe0f 	bl	8007a44 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e26:	230f      	movs	r3, #15
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e058      	b.n	8002ee2 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e30:	200f      	movs	r0, #15
 8002e32:	183b      	adds	r3, r7, r0
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	0013      	movs	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	189b      	adds	r3, r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	18cb      	adds	r3, r1, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e4a:	183b      	adds	r3, r7, r0
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	0013      	movs	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	189b      	adds	r3, r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	183a      	adds	r2, r7, r0
 8002e5c:	7812      	ldrb	r2, [r2, #0]
 8002e5e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e60:	0004      	movs	r4, r0
 8002e62:	183b      	adds	r3, r7, r0
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	193b      	adds	r3, r7, r4
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b298      	uxth	r0, r3
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	0013      	movs	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	18cb      	adds	r3, r1, r3
 8002e78:	3336      	adds	r3, #54	; 0x36
 8002e7a:	1c02      	adds	r2, r0, #0
 8002e7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e7e:	193b      	adds	r3, r7, r4
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	0013      	movs	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	18cb      	adds	r3, r1, r3
 8002e90:	3303      	adds	r3, #3
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e96:	193b      	adds	r3, r7, r4
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	0013      	movs	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	189b      	adds	r3, r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	18cb      	adds	r3, r1, r3
 8002ea6:	3338      	adds	r3, #56	; 0x38
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eac:	193b      	adds	r3, r7, r4
 8002eae:	781a      	ldrb	r2, [r3, #0]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	0013      	movs	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	189b      	adds	r3, r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	18cb      	adds	r3, r1, r3
 8002ebc:	333c      	adds	r3, #60	; 0x3c
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ec2:	193b      	adds	r3, r7, r4
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	0013      	movs	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	189b      	adds	r3, r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	18cb      	adds	r3, r1, r3
 8002ed2:	3340      	adds	r3, #64	; 0x40
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed8:	193b      	adds	r3, r7, r4
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	3201      	adds	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	210f      	movs	r1, #15
 8002ee4:	187b      	adds	r3, r7, r1
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d39f      	bcc.n	8002e30 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef0:	187b      	adds	r3, r7, r1
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e056      	b.n	8002fa6 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ef8:	240f      	movs	r4, #15
 8002efa:	193b      	adds	r3, r7, r4
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	236a      	movs	r3, #106	; 0x6a
 8002f02:	33ff      	adds	r3, #255	; 0xff
 8002f04:	0019      	movs	r1, r3
 8002f06:	0013      	movs	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	18c3      	adds	r3, r0, r3
 8002f10:	185b      	adds	r3, r3, r1
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	781a      	ldrb	r2, [r3, #0]
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	23b4      	movs	r3, #180	; 0xb4
 8002f1e:	0059      	lsls	r1, r3, #1
 8002f20:	0013      	movs	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	189b      	adds	r3, r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	18c3      	adds	r3, r0, r3
 8002f2a:	185b      	adds	r3, r3, r1
 8002f2c:	193a      	adds	r2, r7, r4
 8002f2e:	7812      	ldrb	r2, [r2, #0]
 8002f30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	236c      	movs	r3, #108	; 0x6c
 8002f3a:	33ff      	adds	r3, #255	; 0xff
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	0013      	movs	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	18c3      	adds	r3, r0, r3
 8002f48:	185b      	adds	r3, r3, r1
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f4e:	193b      	adds	r3, r7, r4
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	23bc      	movs	r3, #188	; 0xbc
 8002f56:	0059      	lsls	r1, r3, #1
 8002f58:	0013      	movs	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	189b      	adds	r3, r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	18c3      	adds	r3, r0, r3
 8002f62:	185b      	adds	r3, r3, r1
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f68:	193b      	adds	r3, r7, r4
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	23be      	movs	r3, #190	; 0xbe
 8002f70:	0059      	lsls	r1, r3, #1
 8002f72:	0013      	movs	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	189b      	adds	r3, r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	18c3      	adds	r3, r0, r3
 8002f7c:	185b      	adds	r3, r3, r1
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	23c0      	movs	r3, #192	; 0xc0
 8002f8a:	0059      	lsls	r1, r3, #1
 8002f8c:	0013      	movs	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	189b      	adds	r3, r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	18c3      	adds	r3, r0, r3
 8002f96:	185b      	adds	r3, r3, r1
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f9c:	193b      	adds	r3, r7, r4
 8002f9e:	781a      	ldrb	r2, [r3, #0]
 8002fa0:	193b      	adds	r3, r7, r4
 8002fa2:	3201      	adds	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	230f      	movs	r3, #15
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	781a      	ldrb	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d3a1      	bcc.n	8002ef8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	466a      	mov	r2, sp
 8002fbc:	0011      	movs	r1, r2
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	3210      	adds	r2, #16
 8002fc2:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002fc4:	c170      	stmia	r1!, {r4, r5, r6}
 8002fc6:	ca30      	ldmia	r2!, {r4, r5}
 8002fc8:	c130      	stmia	r1!, {r4, r5}
 8002fca:	6859      	ldr	r1, [r3, #4]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f004 fd52 	bl	8007a78 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	2100      	movs	r1, #0
 8002fda:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a08      	ldr	r2, [pc, #32]	; (8003000 <HAL_PCD_Init+0x21c>)
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d103      	bne.n	8002ff4 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f001 fd34 	bl	8004a5c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b005      	add	sp, #20
 8002ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	000002a9 	.word	0x000002a9

08003004 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	23aa      	movs	r3, #170	; 0xaa
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	5cd3      	ldrb	r3, [r2, r3]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_PCD_Start+0x18>
 8003018:	2302      	movs	r3, #2
 800301a:	e014      	b.n	8003046 <HAL_PCD_Start+0x42>
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	23aa      	movs	r3, #170	; 0xaa
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	2101      	movs	r1, #1
 8003024:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0018      	movs	r0, r3
 800302c:	f004 fcf4 	bl	8007a18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0018      	movs	r0, r3
 8003036:	f006 fc4f 	bl	80098d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	23aa      	movs	r3, #170	; 0xaa
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	2100      	movs	r1, #0
 8003042:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b002      	add	sp, #8
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0018      	movs	r0, r3
 800305e:	f006 fc51 	bl	8009904 <USB_ReadInterrupts>
 8003062:	0002      	movs	r2, r0
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	401a      	ands	r2, r3
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	429a      	cmp	r2, r3
 8003070:	d103      	bne.n	800307a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 fbbb 	bl	80037f0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0018      	movs	r0, r3
 8003080:	f006 fc40 	bl	8009904 <USB_ReadInterrupts>
 8003084:	0002      	movs	r2, r0
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	401a      	ands	r2, r3
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	429a      	cmp	r2, r3
 8003092:	d114      	bne.n	80030be <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2244      	movs	r2, #68	; 0x44
 800309a:	5a9b      	ldrh	r3, [r3, r2]
 800309c:	b29a      	uxth	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	49a2      	ldr	r1, [pc, #648]	; (800332c <HAL_PCD_IRQHandler+0x2dc>)
 80030a4:	400a      	ands	r2, r1
 80030a6:	b291      	uxth	r1, r2
 80030a8:	2244      	movs	r2, #68	; 0x44
 80030aa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f008 fcab 	bl	800ba0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2100      	movs	r1, #0
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 f945 	bl	8003348 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f006 fc1e 	bl	8009904 <USB_ReadInterrupts>
 80030c8:	0002      	movs	r2, r0
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	01db      	lsls	r3, r3, #7
 80030ce:	401a      	ands	r2, r3
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	01db      	lsls	r3, r3, #7
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d10b      	bne.n	80030f0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2244      	movs	r2, #68	; 0x44
 80030de:	5a9b      	ldrh	r3, [r3, r2]
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4992      	ldr	r1, [pc, #584]	; (8003330 <HAL_PCD_IRQHandler+0x2e0>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	b291      	uxth	r1, r2
 80030ec:	2244      	movs	r2, #68	; 0x44
 80030ee:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0018      	movs	r0, r3
 80030f6:	f006 fc05 	bl	8009904 <USB_ReadInterrupts>
 80030fa:	0002      	movs	r2, r0
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	019b      	lsls	r3, r3, #6
 8003100:	401a      	ands	r2, r3
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	019b      	lsls	r3, r3, #6
 8003106:	429a      	cmp	r2, r3
 8003108:	d10b      	bne.n	8003122 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2244      	movs	r2, #68	; 0x44
 8003110:	5a9b      	ldrh	r3, [r3, r2]
 8003112:	b29a      	uxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4986      	ldr	r1, [pc, #536]	; (8003334 <HAL_PCD_IRQHandler+0x2e4>)
 800311a:	400a      	ands	r2, r1
 800311c:	b291      	uxth	r1, r2
 800311e:	2244      	movs	r2, #68	; 0x44
 8003120:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0018      	movs	r0, r3
 8003128:	f006 fbec 	bl	8009904 <USB_ReadInterrupts>
 800312c:	0002      	movs	r2, r0
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	015b      	lsls	r3, r3, #5
 8003132:	401a      	ands	r2, r3
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	015b      	lsls	r3, r3, #5
 8003138:	429a      	cmp	r2, r3
 800313a:	d137      	bne.n	80031ac <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2240      	movs	r2, #64	; 0x40
 8003142:	5a9b      	ldrh	r3, [r3, r2]
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2104      	movs	r1, #4
 800314c:	438a      	bics	r2, r1
 800314e:	b291      	uxth	r1, r2
 8003150:	2240      	movs	r2, #64	; 0x40
 8003152:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2240      	movs	r2, #64	; 0x40
 800315a:	5a9b      	ldrh	r3, [r3, r2]
 800315c:	b29a      	uxth	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2108      	movs	r1, #8
 8003164:	438a      	bics	r2, r1
 8003166:	b291      	uxth	r1, r2
 8003168:	2240      	movs	r2, #64	; 0x40
 800316a:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	23b8      	movs	r3, #184	; 0xb8
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	5cd3      	ldrb	r3, [r2, r3]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d109      	bne.n	800318c <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	23b8      	movs	r3, #184	; 0xb8
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	2100      	movs	r1, #0
 8003180:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2100      	movs	r1, #0
 8003186:	0018      	movs	r0, r3
 8003188:	f001 fc92 	bl	8004ab0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	0018      	movs	r0, r3
 8003190:	f008 fc7c 	bl	800ba8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2244      	movs	r2, #68	; 0x44
 800319a:	5a9b      	ldrh	r3, [r3, r2]
 800319c:	b29a      	uxth	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4965      	ldr	r1, [pc, #404]	; (8003338 <HAL_PCD_IRQHandler+0x2e8>)
 80031a4:	400a      	ands	r2, r1
 80031a6:	b291      	uxth	r1, r2
 80031a8:	2244      	movs	r2, #68	; 0x44
 80031aa:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f006 fba7 	bl	8009904 <USB_ReadInterrupts>
 80031b6:	0002      	movs	r2, r0
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	401a      	ands	r2, r3
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d127      	bne.n	8003216 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2240      	movs	r2, #64	; 0x40
 80031cc:	5a9b      	ldrh	r3, [r3, r2]
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2108      	movs	r1, #8
 80031d6:	430a      	orrs	r2, r1
 80031d8:	b291      	uxth	r1, r2
 80031da:	2240      	movs	r2, #64	; 0x40
 80031dc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2244      	movs	r2, #68	; 0x44
 80031e4:	5a9b      	ldrh	r3, [r3, r2]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4953      	ldr	r1, [pc, #332]	; (800333c <HAL_PCD_IRQHandler+0x2ec>)
 80031ee:	400a      	ands	r2, r1
 80031f0:	b291      	uxth	r1, r2
 80031f2:	2244      	movs	r2, #68	; 0x44
 80031f4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2240      	movs	r2, #64	; 0x40
 80031fc:	5a9b      	ldrh	r3, [r3, r2]
 80031fe:	b29a      	uxth	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2104      	movs	r1, #4
 8003206:	430a      	orrs	r2, r1
 8003208:	b291      	uxth	r1, r2
 800320a:	2240      	movs	r2, #64	; 0x40
 800320c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f008 fc1f 	bl	800ba54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0018      	movs	r0, r3
 800321c:	f006 fb72 	bl	8009904 <USB_ReadInterrupts>
 8003220:	0003      	movs	r3, r0
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	4013      	ands	r3, r2
 8003226:	2b80      	cmp	r3, #128	; 0x80
 8003228:	d145      	bne.n	80032b6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2244      	movs	r2, #68	; 0x44
 8003230:	5a9b      	ldrh	r3, [r3, r2]
 8003232:	b29a      	uxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	438a      	bics	r2, r1
 800323c:	b291      	uxth	r1, r2
 800323e:	2244      	movs	r2, #68	; 0x44
 8003240:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	23b8      	movs	r3, #184	; 0xb8
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	5cd3      	ldrb	r3, [r2, r3]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d12f      	bne.n	80032ae <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2240      	movs	r2, #64	; 0x40
 8003254:	5a9b      	ldrh	r3, [r3, r2]
 8003256:	b29a      	uxth	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2104      	movs	r1, #4
 800325e:	430a      	orrs	r2, r1
 8003260:	b291      	uxth	r1, r2
 8003262:	2240      	movs	r2, #64	; 0x40
 8003264:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2240      	movs	r2, #64	; 0x40
 800326c:	5a9b      	ldrh	r3, [r3, r2]
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2108      	movs	r1, #8
 8003276:	430a      	orrs	r2, r1
 8003278:	b291      	uxth	r1, r2
 800327a:	2240      	movs	r2, #64	; 0x40
 800327c:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	23b8      	movs	r3, #184	; 0xb8
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	2101      	movs	r1, #1
 8003286:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2254      	movs	r2, #84	; 0x54
 800328e:	5a9b      	ldrh	r3, [r3, r2]
 8003290:	b29b      	uxth	r3, r3
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	223c      	movs	r2, #60	; 0x3c
 8003296:	4013      	ands	r3, r2
 8003298:	0019      	movs	r1, r3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	23b9      	movs	r3, #185	; 0xb9
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2101      	movs	r1, #1
 80032a6:	0018      	movs	r0, r3
 80032a8:	f001 fc02 	bl	8004ab0 <HAL_PCDEx_LPM_Callback>
 80032ac:	e003      	b.n	80032b6 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f008 fbcf 	bl	800ba54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	0018      	movs	r0, r3
 80032bc:	f006 fb22 	bl	8009904 <USB_ReadInterrupts>
 80032c0:	0002      	movs	r2, r0
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	401a      	ands	r2, r3
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d10f      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2244      	movs	r2, #68	; 0x44
 80032d6:	5a9b      	ldrh	r3, [r3, r2]
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4918      	ldr	r1, [pc, #96]	; (8003340 <HAL_PCD_IRQHandler+0x2f0>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	b291      	uxth	r1, r2
 80032e4:	2244      	movs	r2, #68	; 0x44
 80032e6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f008 fb7e 	bl	800b9ec <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f006 fb05 	bl	8009904 <USB_ReadInterrupts>
 80032fa:	0002      	movs	r2, r0
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	401a      	ands	r2, r3
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	429a      	cmp	r2, r3
 8003308:	d10b      	bne.n	8003322 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2244      	movs	r2, #68	; 0x44
 8003310:	5a9b      	ldrh	r3, [r3, r2]
 8003312:	b29a      	uxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	490a      	ldr	r1, [pc, #40]	; (8003344 <HAL_PCD_IRQHandler+0x2f4>)
 800331a:	400a      	ands	r2, r1
 800331c:	b291      	uxth	r1, r2
 800331e:	2244      	movs	r2, #68	; 0x44
 8003320:	5299      	strh	r1, [r3, r2]
  }
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b002      	add	sp, #8
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	fffffbff 	.word	0xfffffbff
 8003330:	ffffbfff 	.word	0xffffbfff
 8003334:	ffffdfff 	.word	0xffffdfff
 8003338:	ffffefff 	.word	0xffffefff
 800333c:	fffff7ff 	.word	0xfffff7ff
 8003340:	fffffdff 	.word	0xfffffdff
 8003344:	fffffeff 	.word	0xfffffeff

08003348 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	000a      	movs	r2, r1
 8003352:	1cfb      	adds	r3, r7, #3
 8003354:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	23aa      	movs	r3, #170	; 0xaa
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	5cd3      	ldrb	r3, [r2, r3]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_PCD_SetAddress+0x1e>
 8003362:	2302      	movs	r3, #2
 8003364:	e017      	b.n	8003396 <HAL_PCD_SetAddress+0x4e>
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	23aa      	movs	r3, #170	; 0xaa
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	2101      	movs	r1, #1
 800336e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	1cfa      	adds	r2, r7, #3
 8003374:	2124      	movs	r1, #36	; 0x24
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	1cfb      	adds	r3, r7, #3
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	0019      	movs	r1, r3
 8003384:	0010      	movs	r0, r2
 8003386:	f006 fa93 	bl	80098b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	23aa      	movs	r3, #170	; 0xaa
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	2100      	movs	r1, #0
 8003392:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	0018      	movs	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	b002      	add	sp, #8
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800339e:	b590      	push	{r4, r7, lr}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	000c      	movs	r4, r1
 80033a8:	0010      	movs	r0, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	1cfb      	adds	r3, r7, #3
 80033ae:	1c22      	adds	r2, r4, #0
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	003b      	movs	r3, r7
 80033b4:	1c02      	adds	r2, r0, #0
 80033b6:	801a      	strh	r2, [r3, #0]
 80033b8:	1cbb      	adds	r3, r7, #2
 80033ba:	1c0a      	adds	r2, r1, #0
 80033bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033be:	230b      	movs	r3, #11
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033c6:	1cfb      	adds	r3, r7, #3
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	da0f      	bge.n	80033f0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d0:	1cfb      	adds	r3, r7, #3
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2207      	movs	r2, #7
 80033d6:	4013      	ands	r3, r2
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	0013      	movs	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	18d3      	adds	r3, r2, r3
 80033e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	705a      	strb	r2, [r3, #1]
 80033ee:	e00f      	b.n	8003410 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f0:	1cfb      	adds	r3, r7, #3
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2207      	movs	r2, #7
 80033f6:	401a      	ands	r2, r3
 80033f8:	0013      	movs	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	3369      	adds	r3, #105	; 0x69
 8003402:	33ff      	adds	r3, #255	; 0xff
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	18d3      	adds	r3, r2, r3
 8003408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003410:	1cfb      	adds	r3, r7, #3
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2207      	movs	r2, #7
 8003416:	4013      	ands	r3, r2
 8003418:	b2da      	uxtb	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800341e:	003b      	movs	r3, r7
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1cba      	adds	r2, r7, #2
 800342a:	7812      	ldrb	r2, [r2, #0]
 800342c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	785b      	ldrb	r3, [r3, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003440:	1cbb      	adds	r3, r7, #2
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d102      	bne.n	800344e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	23aa      	movs	r3, #170	; 0xaa
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	5cd3      	ldrb	r3, [r2, r3]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_PCD_EP_Open+0xc0>
 800345a:	2302      	movs	r3, #2
 800345c:	e013      	b.n	8003486 <HAL_PCD_EP_Open+0xe8>
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	23aa      	movs	r3, #170	; 0xaa
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	2101      	movs	r1, #1
 8003466:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	0011      	movs	r1, r2
 8003470:	0018      	movs	r0, r3
 8003472:	f004 fb2d 	bl	8007ad0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	23aa      	movs	r3, #170	; 0xaa
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	2100      	movs	r1, #0
 800347e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003480:	230b      	movs	r3, #11
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	781b      	ldrb	r3, [r3, #0]
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b005      	add	sp, #20
 800348c:	bd90      	pop	{r4, r7, pc}

0800348e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	000a      	movs	r2, r1
 8003498:	1cfb      	adds	r3, r7, #3
 800349a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800349c:	1cfb      	adds	r3, r7, #3
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	da0f      	bge.n	80034c6 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a6:	1cfb      	adds	r3, r7, #3
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2207      	movs	r2, #7
 80034ac:	4013      	ands	r3, r2
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	0013      	movs	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	189b      	adds	r3, r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	18d3      	adds	r3, r2, r3
 80034bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	705a      	strb	r2, [r3, #1]
 80034c4:	e00f      	b.n	80034e6 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c6:	1cfb      	adds	r3, r7, #3
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2207      	movs	r2, #7
 80034cc:	401a      	ands	r2, r3
 80034ce:	0013      	movs	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	3369      	adds	r3, #105	; 0x69
 80034d8:	33ff      	adds	r3, #255	; 0xff
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	18d3      	adds	r3, r2, r3
 80034de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034e6:	1cfb      	adds	r3, r7, #3
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2207      	movs	r2, #7
 80034ec:	4013      	ands	r3, r2
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	23aa      	movs	r3, #170	; 0xaa
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_PCD_EP_Close+0x76>
 8003500:	2302      	movs	r3, #2
 8003502:	e011      	b.n	8003528 <HAL_PCD_EP_Close+0x9a>
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	23aa      	movs	r3, #170	; 0xaa
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	2101      	movs	r1, #1
 800350c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	0011      	movs	r1, r2
 8003516:	0018      	movs	r0, r3
 8003518:	f004 fe4e 	bl	80081b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	23aa      	movs	r3, #170	; 0xaa
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	2100      	movs	r1, #0
 8003524:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b004      	add	sp, #16
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	200b      	movs	r0, #11
 800353e:	183b      	adds	r3, r7, r0
 8003540:	1c0a      	adds	r2, r1, #0
 8003542:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003544:	0001      	movs	r1, r0
 8003546:	187b      	adds	r3, r7, r1
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2207      	movs	r2, #7
 800354c:	401a      	ands	r2, r3
 800354e:	0013      	movs	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	189b      	adds	r3, r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	3369      	adds	r3, #105	; 0x69
 8003558:	33ff      	adds	r3, #255	; 0xff
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	18d3      	adds	r3, r2, r3
 800355e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003578:	187b      	adds	r3, r7, r1
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2207      	movs	r2, #7
 800357e:	4013      	ands	r3, r2
 8003580:	b2da      	uxtb	r2, r3
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003586:	187b      	adds	r3, r7, r1
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2207      	movs	r2, #7
 800358c:	4013      	ands	r3, r2
 800358e:	d107      	bne.n	80035a0 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	0011      	movs	r1, r2
 8003598:	0018      	movs	r0, r3
 800359a:	f004 ffcd 	bl	8008538 <USB_EPStartXfer>
 800359e:	e006      	b.n	80035ae <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	0011      	movs	r1, r2
 80035a8:	0018      	movs	r0, r3
 80035aa:	f004 ffc5 	bl	8008538 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b006      	add	sp, #24
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	000a      	movs	r2, r1
 80035c2:	1cfb      	adds	r3, r7, #3
 80035c4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035c6:	1cfb      	adds	r3, r7, #3
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2207      	movs	r2, #7
 80035cc:	401a      	ands	r2, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	23c2      	movs	r3, #194	; 0xc2
 80035d2:	0059      	lsls	r1, r3, #1
 80035d4:	0013      	movs	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	189b      	adds	r3, r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	18c3      	adds	r3, r0, r3
 80035de:	185b      	adds	r3, r3, r1
 80035e0:	681b      	ldr	r3, [r3, #0]
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b002      	add	sp, #8
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	200b      	movs	r0, #11
 80035f8:	183b      	adds	r3, r7, r0
 80035fa:	1c0a      	adds	r2, r1, #0
 80035fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035fe:	183b      	adds	r3, r7, r0
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2207      	movs	r2, #7
 8003604:	4013      	ands	r3, r2
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	0013      	movs	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	189b      	adds	r3, r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	18d3      	adds	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2224      	movs	r2, #36	; 0x24
 8003626:	2101      	movs	r1, #1
 8003628:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2200      	movs	r2, #0
 8003634:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2201      	movs	r2, #1
 800363a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800363c:	183b      	adds	r3, r7, r0
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2207      	movs	r2, #7
 8003642:	4013      	ands	r3, r2
 8003644:	b2da      	uxtb	r2, r3
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800364a:	183b      	adds	r3, r7, r0
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2207      	movs	r2, #7
 8003650:	4013      	ands	r3, r2
 8003652:	d107      	bne.n	8003664 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	0011      	movs	r1, r2
 800365c:	0018      	movs	r0, r3
 800365e:	f004 ff6b 	bl	8008538 <USB_EPStartXfer>
 8003662:	e006      	b.n	8003672 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f004 ff63 	bl	8008538 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	b006      	add	sp, #24
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	000a      	movs	r2, r1
 8003686:	1cfb      	adds	r3, r7, #3
 8003688:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800368a:	1cfb      	adds	r3, r7, #3
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2207      	movs	r2, #7
 8003690:	401a      	ands	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	429a      	cmp	r2, r3
 8003698:	d901      	bls.n	800369e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e046      	b.n	800372c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800369e:	1cfb      	adds	r3, r7, #3
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b25b      	sxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	da0f      	bge.n	80036c8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a8:	1cfb      	adds	r3, r7, #3
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2207      	movs	r2, #7
 80036ae:	4013      	ands	r3, r2
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	0013      	movs	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	705a      	strb	r2, [r3, #1]
 80036c6:	e00d      	b.n	80036e4 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036c8:	1cfb      	adds	r3, r7, #3
 80036ca:	781a      	ldrb	r2, [r3, #0]
 80036cc:	0013      	movs	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	189b      	adds	r3, r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	3369      	adds	r3, #105	; 0x69
 80036d6:	33ff      	adds	r3, #255	; 0xff
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	18d3      	adds	r3, r2, r3
 80036dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ea:	1cfb      	adds	r3, r7, #3
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2207      	movs	r2, #7
 80036f0:	4013      	ands	r3, r2
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	23aa      	movs	r3, #170	; 0xaa
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	5cd3      	ldrb	r3, [r2, r3]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_PCD_EP_SetStall+0x8c>
 8003704:	2302      	movs	r3, #2
 8003706:	e011      	b.n	800372c <HAL_PCD_EP_SetStall+0xb0>
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	23aa      	movs	r3, #170	; 0xaa
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	2101      	movs	r1, #1
 8003710:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	0011      	movs	r1, r2
 800371a:	0018      	movs	r0, r3
 800371c:	f005 ffc6 	bl	80096ac <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	23aa      	movs	r3, #170	; 0xaa
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	2100      	movs	r1, #0
 8003728:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b004      	add	sp, #16
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	000a      	movs	r2, r1
 800373e:	1cfb      	adds	r3, r7, #3
 8003740:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003742:	1cfb      	adds	r3, r7, #3
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	220f      	movs	r2, #15
 8003748:	401a      	ands	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	429a      	cmp	r2, r3
 8003750:	d901      	bls.n	8003756 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e048      	b.n	80037e8 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003756:	1cfb      	adds	r3, r7, #3
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b25b      	sxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	da0f      	bge.n	8003780 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003760:	1cfb      	adds	r3, r7, #3
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2207      	movs	r2, #7
 8003766:	4013      	ands	r3, r2
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	0013      	movs	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	189b      	adds	r3, r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	18d3      	adds	r3, r2, r3
 8003776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	705a      	strb	r2, [r3, #1]
 800377e:	e00f      	b.n	80037a0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003780:	1cfb      	adds	r3, r7, #3
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2207      	movs	r2, #7
 8003786:	401a      	ands	r2, r3
 8003788:	0013      	movs	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	189b      	adds	r3, r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	3369      	adds	r3, #105	; 0x69
 8003792:	33ff      	adds	r3, #255	; 0xff
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	18d3      	adds	r3, r2, r3
 8003798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a6:	1cfb      	adds	r3, r7, #3
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2207      	movs	r2, #7
 80037ac:	4013      	ands	r3, r2
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	23aa      	movs	r3, #170	; 0xaa
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_PCD_EP_ClrStall+0x90>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e011      	b.n	80037e8 <HAL_PCD_EP_ClrStall+0xb4>
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	23aa      	movs	r3, #170	; 0xaa
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	2101      	movs	r1, #1
 80037cc:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	0011      	movs	r1, r2
 80037d6:	0018      	movs	r0, r3
 80037d8:	f005 ffb8 	bl	800974c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	23aa      	movs	r3, #170	; 0xaa
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	2100      	movs	r1, #0
 80037e4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b004      	add	sp, #16
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	b096      	sub	sp, #88	; 0x58
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037f8:	f000 fbd8 	bl	8003fac <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2056      	movs	r0, #86	; 0x56
 8003802:	183b      	adds	r3, r7, r0
 8003804:	2144      	movs	r1, #68	; 0x44
 8003806:	5a52      	ldrh	r2, [r2, r1]
 8003808:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800380a:	183b      	adds	r3, r7, r0
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	2455      	movs	r4, #85	; 0x55
 8003812:	193b      	adds	r3, r7, r4
 8003814:	210f      	movs	r1, #15
 8003816:	400a      	ands	r2, r1
 8003818:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800381a:	193b      	adds	r3, r7, r4
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d000      	beq.n	8003824 <PCD_EP_ISR_Handler+0x34>
 8003822:	e179      	b.n	8003b18 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003824:	183b      	adds	r3, r7, r0
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	2210      	movs	r2, #16
 800382a:	4013      	ands	r3, r2
 800382c:	d154      	bne.n	80038d8 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	b29a      	uxth	r2, r3
 8003836:	200e      	movs	r0, #14
 8003838:	183b      	adds	r3, r7, r0
 800383a:	49af      	ldr	r1, [pc, #700]	; (8003af8 <PCD_EP_ISR_Handler+0x308>)
 800383c:	400a      	ands	r2, r1
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	183a      	adds	r2, r7, r0
 8003846:	8812      	ldrh	r2, [r2, #0]
 8003848:	49ac      	ldr	r1, [pc, #688]	; (8003afc <PCD_EP_ISR_Handler+0x30c>)
 800384a:	430a      	orrs	r2, r1
 800384c:	b292      	uxth	r2, r2
 800384e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3328      	adds	r3, #40	; 0x28
 8003854:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2250      	movs	r2, #80	; 0x50
 800385c:	5a9b      	ldrh	r3, [r3, r2]
 800385e:	b29b      	uxth	r3, r3
 8003860:	001a      	movs	r2, r3
 8003862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	18d2      	adds	r2, r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	18d3      	adds	r3, r2, r3
 8003870:	4aa3      	ldr	r2, [pc, #652]	; (8003b00 <PCD_EP_ISR_Handler+0x310>)
 8003872:	4694      	mov	ip, r2
 8003874:	4463      	add	r3, ip
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	059b      	lsls	r3, r3, #22
 800387a:	0d9a      	lsrs	r2, r3, #22
 800387c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	18d2      	adds	r2, r2, r3
 800388a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2100      	movs	r1, #0
 8003892:	0018      	movs	r0, r3
 8003894:	f008 f88c 	bl	800b9b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	; 0x24
 800389c:	5c9b      	ldrb	r3, [r3, r2]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <PCD_EP_ISR_Handler+0xb8>
 80038a4:	f000 fb82 	bl	8003fac <PCD_EP_ISR_Handler+0x7bc>
 80038a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <PCD_EP_ISR_Handler+0xc4>
 80038b0:	f000 fb7c 	bl	8003fac <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	5c9b      	ldrb	r3, [r3, r2]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2280      	movs	r2, #128	; 0x80
 80038be:	4252      	negs	r2, r2
 80038c0:	4313      	orrs	r3, r2
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b291      	uxth	r1, r2
 80038ca:	224c      	movs	r2, #76	; 0x4c
 80038cc:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2224      	movs	r2, #36	; 0x24
 80038d2:	2100      	movs	r1, #0
 80038d4:	5499      	strb	r1, [r3, r2]
 80038d6:	e369      	b.n	8003fac <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3369      	adds	r3, #105	; 0x69
 80038dc:	33ff      	adds	r3, #255	; 0xff
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	2152      	movs	r1, #82	; 0x52
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	881a      	ldrh	r2, [r3, #0]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	4013      	ands	r3, r2
 80038f6:	d037      	beq.n	8003968 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2250      	movs	r2, #80	; 0x50
 80038fe:	5a9b      	ldrh	r3, [r3, r2]
 8003900:	b29b      	uxth	r3, r3
 8003902:	001a      	movs	r2, r3
 8003904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	18d2      	adds	r2, r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	18d3      	adds	r3, r2, r3
 8003912:	4a7c      	ldr	r2, [pc, #496]	; (8003b04 <PCD_EP_ISR_Handler+0x314>)
 8003914:	4694      	mov	ip, r2
 8003916:	4463      	add	r3, ip
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	059b      	lsls	r3, r3, #22
 800391c:	0d9a      	lsrs	r2, r3, #22
 800391e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003920:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	22ac      	movs	r2, #172	; 0xac
 800392a:	0092      	lsls	r2, r2, #2
 800392c:	1899      	adds	r1, r3, r2
 800392e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003930:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003934:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003936:	b29b      	uxth	r3, r3
 8003938:	f006 f836 	bl	80099a8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29a      	uxth	r2, r3
 8003944:	2010      	movs	r0, #16
 8003946:	183b      	adds	r3, r7, r0
 8003948:	496f      	ldr	r1, [pc, #444]	; (8003b08 <PCD_EP_ISR_Handler+0x318>)
 800394a:	400a      	ands	r2, r1
 800394c:	801a      	strh	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	183a      	adds	r2, r7, r0
 8003954:	8812      	ldrh	r2, [r2, #0]
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	430a      	orrs	r2, r1
 800395a:	b292      	uxth	r2, r2
 800395c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0018      	movs	r0, r3
 8003962:	f007 ffef 	bl	800b944 <HAL_PCD_SetupStageCallback>
 8003966:	e321      	b.n	8003fac <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003968:	2352      	movs	r3, #82	; 0x52
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2200      	movs	r2, #0
 800396e:	5e9b      	ldrsh	r3, [r3, r2]
 8003970:	2b00      	cmp	r3, #0
 8003972:	db00      	blt.n	8003976 <PCD_EP_ISR_Handler+0x186>
 8003974:	e31a      	b.n	8003fac <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29a      	uxth	r2, r3
 800397e:	201e      	movs	r0, #30
 8003980:	183b      	adds	r3, r7, r0
 8003982:	4961      	ldr	r1, [pc, #388]	; (8003b08 <PCD_EP_ISR_Handler+0x318>)
 8003984:	400a      	ands	r2, r1
 8003986:	801a      	strh	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	183a      	adds	r2, r7, r0
 800398e:	8812      	ldrh	r2, [r2, #0]
 8003990:	2180      	movs	r1, #128	; 0x80
 8003992:	430a      	orrs	r2, r1
 8003994:	b292      	uxth	r2, r2
 8003996:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2250      	movs	r2, #80	; 0x50
 800399e:	5a9b      	ldrh	r3, [r3, r2]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	001a      	movs	r2, r3
 80039a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	18d2      	adds	r2, r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	18d3      	adds	r3, r2, r3
 80039b2:	4a54      	ldr	r2, [pc, #336]	; (8003b04 <PCD_EP_ISR_Handler+0x314>)
 80039b4:	4694      	mov	ip, r2
 80039b6:	4463      	add	r3, ip
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	059b      	lsls	r3, r3, #22
 80039bc:	0d9a      	lsrs	r2, r3, #22
 80039be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80039c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01a      	beq.n	8003a00 <PCD_EP_ISR_Handler+0x210>
 80039ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	6959      	ldr	r1, [r3, #20]
 80039da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80039de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f005 ffe0 	bl	80099a8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80039e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	18d2      	adds	r2, r2, r3
 80039f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2100      	movs	r1, #0
 80039fa:	0018      	movs	r0, r3
 80039fc:	f007 ffb7 	bl	800b96e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	001a      	movs	r2, r3
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d000      	beq.n	8003a14 <PCD_EP_ISR_Handler+0x224>
 8003a12:	e2cb      	b.n	8003fac <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2250      	movs	r2, #80	; 0x50
 8003a20:	5a9b      	ldrh	r3, [r3, r2]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	001a      	movs	r2, r3
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	189b      	adds	r3, r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	4a35      	ldr	r2, [pc, #212]	; (8003b04 <PCD_EP_ISR_Handler+0x314>)
 8003a30:	4694      	mov	ip, r2
 8003a32:	4463      	add	r3, ip
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d110      	bne.n	8003a60 <PCD_EP_ISR_Handler+0x270>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	4a31      	ldr	r2, [pc, #196]	; (8003b0c <PCD_EP_ISR_Handler+0x31c>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	4a29      	ldr	r2, [pc, #164]	; (8003afc <PCD_EP_ISR_Handler+0x30c>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	e02b      	b.n	8003ab8 <PCD_EP_ISR_Handler+0x2c8>
 8003a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b3e      	cmp	r3, #62	; 0x3e
 8003a66:	d812      	bhi.n	8003a8e <PCD_EP_ISR_Handler+0x29e>
 8003a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2201      	movs	r2, #1
 8003a76:	4013      	ands	r3, r2
 8003a78:	d002      	beq.n	8003a80 <PCD_EP_ISR_Handler+0x290>
 8003a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	029b      	lsls	r3, r3, #10
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	e014      	b.n	8003ab8 <PCD_EP_ISR_Handler+0x2c8>
 8003a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
 8003a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	221f      	movs	r2, #31
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d102      	bne.n	8003aa6 <PCD_EP_ISR_Handler+0x2b6>
 8003aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	029b      	lsls	r3, r3, #10
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <PCD_EP_ISR_Handler+0x30c>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	2012      	movs	r0, #18
 8003ac2:	183b      	adds	r3, r7, r0
 8003ac4:	4912      	ldr	r1, [pc, #72]	; (8003b10 <PCD_EP_ISR_Handler+0x320>)
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	183b      	adds	r3, r7, r0
 8003acc:	183a      	adds	r2, r7, r0
 8003ace:	8812      	ldrh	r2, [r2, #0]
 8003ad0:	2180      	movs	r1, #128	; 0x80
 8003ad2:	0149      	lsls	r1, r1, #5
 8003ad4:	404a      	eors	r2, r1
 8003ad6:	801a      	strh	r2, [r3, #0]
 8003ad8:	183b      	adds	r3, r7, r0
 8003ada:	183a      	adds	r2, r7, r0
 8003adc:	8812      	ldrh	r2, [r2, #0]
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	0189      	lsls	r1, r1, #6
 8003ae2:	404a      	eors	r2, r1
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	183a      	adds	r2, r7, r0
 8003aec:	8812      	ldrh	r2, [r2, #0]
 8003aee:	4909      	ldr	r1, [pc, #36]	; (8003b14 <PCD_EP_ISR_Handler+0x324>)
 8003af0:	430a      	orrs	r2, r1
 8003af2:	b292      	uxth	r2, r2
 8003af4:	801a      	strh	r2, [r3, #0]
 8003af6:	e259      	b.n	8003fac <PCD_EP_ISR_Handler+0x7bc>
 8003af8:	ffff8f0f 	.word	0xffff8f0f
 8003afc:	ffff8000 	.word	0xffff8000
 8003b00:	00000402 	.word	0x00000402
 8003b04:	00000406 	.word	0x00000406
 8003b08:	00000f8f 	.word	0x00000f8f
 8003b0c:	ffff83ff 	.word	0xffff83ff
 8003b10:	ffffbf8f 	.word	0xffffbf8f
 8003b14:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	2055      	movs	r0, #85	; 0x55
 8003b20:	183b      	adds	r3, r7, r0
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	18d2      	adds	r2, r2, r3
 8003b28:	2152      	movs	r1, #82	; 0x52
 8003b2a:	187b      	adds	r3, r7, r1
 8003b2c:	8812      	ldrh	r2, [r2, #0]
 8003b2e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	2200      	movs	r2, #0
 8003b34:	5e9b      	ldrsh	r3, [r3, r2]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	db00      	blt.n	8003b3c <PCD_EP_ISR_Handler+0x34c>
 8003b3a:	e0fa      	b.n	8003d32 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	001a      	movs	r2, r3
 8003b42:	183b      	adds	r3, r7, r0
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	18d3      	adds	r3, r2, r3
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	2450      	movs	r4, #80	; 0x50
 8003b50:	193b      	adds	r3, r7, r4
 8003b52:	49cf      	ldr	r1, [pc, #828]	; (8003e90 <PCD_EP_ISR_Handler+0x6a0>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	801a      	strh	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	001a      	movs	r2, r3
 8003b5e:	183b      	adds	r3, r7, r0
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	18d3      	adds	r3, r2, r3
 8003b66:	193a      	adds	r2, r7, r4
 8003b68:	8812      	ldrh	r2, [r2, #0]
 8003b6a:	2180      	movs	r1, #128	; 0x80
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	b292      	uxth	r2, r2
 8003b70:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b72:	183b      	adds	r3, r7, r0
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	0013      	movs	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	3369      	adds	r3, #105	; 0x69
 8003b80:	33ff      	adds	r3, #255	; 0xff
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	18d3      	adds	r3, r2, r3
 8003b86:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8a:	7b1b      	ldrb	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d125      	bne.n	8003bdc <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2250      	movs	r2, #80	; 0x50
 8003b96:	5a9b      	ldrh	r3, [r3, r2]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	001a      	movs	r2, r3
 8003b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	18d2      	adds	r2, r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	18d3      	adds	r3, r2, r3
 8003baa:	4aba      	ldr	r2, [pc, #744]	; (8003e94 <PCD_EP_ISR_Handler+0x6a4>)
 8003bac:	4694      	mov	ip, r2
 8003bae:	4463      	add	r3, ip
 8003bb0:	881a      	ldrh	r2, [r3, #0]
 8003bb2:	2448      	movs	r4, #72	; 0x48
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	0592      	lsls	r2, r2, #22
 8003bb8:	0d92      	lsrs	r2, r2, #22
 8003bba:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003bbc:	193b      	adds	r3, r7, r4
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d100      	bne.n	8003bc6 <PCD_EP_ISR_Handler+0x3d6>
 8003bc4:	e08d      	b.n	8003ce2 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bcc:	6959      	ldr	r1, [r3, #20]
 8003bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd0:	88da      	ldrh	r2, [r3, #6]
 8003bd2:	193b      	adds	r3, r7, r4
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	f005 fee7 	bl	80099a8 <USB_ReadPMA>
 8003bda:	e082      	b.n	8003ce2 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bde:	78db      	ldrb	r3, [r3, #3]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d10c      	bne.n	8003bfe <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003be4:	2348      	movs	r3, #72	; 0x48
 8003be6:	18fc      	adds	r4, r7, r3
 8003be8:	2352      	movs	r3, #82	; 0x52
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	881a      	ldrh	r2, [r3, #0]
 8003bee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 f9ee 	bl	8003fd4 <HAL_PCD_EP_DB_Receive>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	8023      	strh	r3, [r4, #0]
 8003bfc:	e071      	b.n	8003ce2 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	001a      	movs	r2, r3
 8003c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	18d3      	adds	r3, r2, r3
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	204a      	movs	r0, #74	; 0x4a
 8003c12:	183b      	adds	r3, r7, r0
 8003c14:	49a0      	ldr	r1, [pc, #640]	; (8003e98 <PCD_EP_ISR_Handler+0x6a8>)
 8003c16:	400a      	ands	r2, r1
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	001a      	movs	r2, r3
 8003c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	18d3      	adds	r3, r2, r3
 8003c28:	183a      	adds	r2, r7, r0
 8003c2a:	8812      	ldrh	r2, [r2, #0]
 8003c2c:	499b      	ldr	r1, [pc, #620]	; (8003e9c <PCD_EP_ISR_Handler+0x6ac>)
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	b292      	uxth	r2, r2
 8003c32:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	001a      	movs	r2, r3
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	18d3      	adds	r3, r2, r3
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	001a      	movs	r2, r3
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	01db      	lsls	r3, r3, #7
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d024      	beq.n	8003c9a <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2250      	movs	r2, #80	; 0x50
 8003c56:	5a9b      	ldrh	r3, [r3, r2]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	001a      	movs	r2, r3
 8003c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	18d2      	adds	r2, r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	18d3      	adds	r3, r2, r3
 8003c6a:	4a8d      	ldr	r2, [pc, #564]	; (8003ea0 <PCD_EP_ISR_Handler+0x6b0>)
 8003c6c:	4694      	mov	ip, r2
 8003c6e:	4463      	add	r3, ip
 8003c70:	881a      	ldrh	r2, [r3, #0]
 8003c72:	2448      	movs	r4, #72	; 0x48
 8003c74:	193b      	adds	r3, r7, r4
 8003c76:	0592      	lsls	r2, r2, #22
 8003c78:	0d92      	lsrs	r2, r2, #22
 8003c7a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003c7c:	193b      	adds	r3, r7, r4
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02e      	beq.n	8003ce2 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8a:	6959      	ldr	r1, [r3, #20]
 8003c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8e:	891a      	ldrh	r2, [r3, #8]
 8003c90:	193b      	adds	r3, r7, r4
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	f005 fe88 	bl	80099a8 <USB_ReadPMA>
 8003c98:	e023      	b.n	8003ce2 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2250      	movs	r2, #80	; 0x50
 8003ca0:	5a9b      	ldrh	r3, [r3, r2]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	001a      	movs	r2, r3
 8003ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	18d2      	adds	r2, r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	18d3      	adds	r3, r2, r3
 8003cb4:	4a77      	ldr	r2, [pc, #476]	; (8003e94 <PCD_EP_ISR_Handler+0x6a4>)
 8003cb6:	4694      	mov	ip, r2
 8003cb8:	4463      	add	r3, ip
 8003cba:	881a      	ldrh	r2, [r3, #0]
 8003cbc:	2448      	movs	r4, #72	; 0x48
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	0592      	lsls	r2, r2, #22
 8003cc2:	0d92      	lsrs	r2, r2, #22
 8003cc4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003cc6:	193b      	adds	r3, r7, r4
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd4:	6959      	ldr	r1, [r3, #20]
 8003cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd8:	895a      	ldrh	r2, [r3, #10]
 8003cda:	193b      	adds	r3, r7, r4
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	f005 fe63 	bl	80099a8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	2148      	movs	r1, #72	; 0x48
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	18d2      	adds	r2, r2, r3
 8003cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	18d2      	adds	r2, r2, r3
 8003cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cfe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <PCD_EP_ISR_Handler+0x524>
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	881a      	ldrh	r2, [r3, #0]
 8003d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d207      	bcs.n	8003d24 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	0011      	movs	r1, r2
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f007 fe26 	bl	800b96e <HAL_PCD_DataOutStageCallback>
 8003d22:	e006      	b.n	8003d32 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d2a:	0011      	movs	r1, r2
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f004 fc03 	bl	8008538 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d32:	2452      	movs	r4, #82	; 0x52
 8003d34:	193b      	adds	r3, r7, r4
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	2280      	movs	r2, #128	; 0x80
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d100      	bne.n	8003d40 <PCD_EP_ISR_Handler+0x550>
 8003d3e:	e135      	b.n	8003fac <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d40:	2055      	movs	r0, #85	; 0x55
 8003d42:	183b      	adds	r3, r7, r0
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	0013      	movs	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	189b      	adds	r3, r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	18d3      	adds	r3, r2, r3
 8003d54:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	183b      	adds	r3, r7, r0
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	18d3      	adds	r3, r2, r3
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	2542      	movs	r5, #66	; 0x42
 8003d6a:	197b      	adds	r3, r7, r5
 8003d6c:	494d      	ldr	r1, [pc, #308]	; (8003ea4 <PCD_EP_ISR_Handler+0x6b4>)
 8003d6e:	400a      	ands	r2, r1
 8003d70:	801a      	strh	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	001a      	movs	r2, r3
 8003d78:	183b      	adds	r3, r7, r0
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	18d3      	adds	r3, r2, r3
 8003d80:	197a      	adds	r2, r7, r5
 8003d82:	8812      	ldrh	r2, [r2, #0]
 8003d84:	4948      	ldr	r1, [pc, #288]	; (8003ea8 <PCD_EP_ISR_Handler+0x6b8>)
 8003d86:	430a      	orrs	r2, r1
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8003d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8e:	78db      	ldrb	r3, [r3, #3]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d100      	bne.n	8003d96 <PCD_EP_ISR_Handler+0x5a6>
 8003d94:	e0ad      	b.n	8003ef2 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8003d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d98:	2200      	movs	r2, #0
 8003d9a:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d9c:	193b      	adds	r3, r7, r4
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	2240      	movs	r2, #64	; 0x40
 8003da2:	4013      	ands	r3, r2
 8003da4:	d046      	beq.n	8003e34 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d125      	bne.n	8003dfa <PCD_EP_ISR_Handler+0x60a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2250      	movs	r2, #80	; 0x50
 8003dba:	5a9b      	ldrh	r3, [r3, r2]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	189b      	adds	r3, r3, r2
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	00da      	lsls	r2, r3, #3
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	18d3      	adds	r3, r2, r3
 8003dd0:	4a33      	ldr	r2, [pc, #204]	; (8003ea0 <PCD_EP_ISR_Handler+0x6b0>)
 8003dd2:	4694      	mov	ip, r2
 8003dd4:	4463      	add	r3, ip
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	4a33      	ldr	r2, [pc, #204]	; (8003eac <PCD_EP_ISR_Handler+0x6bc>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	801a      	strh	r2, [r3, #0]
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	4a2e      	ldr	r2, [pc, #184]	; (8003ea8 <PCD_EP_ISR_Handler+0x6b8>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	801a      	strh	r2, [r3, #0]
 8003df8:	e073      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x6f2>
 8003dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d16f      	bne.n	8003ee2 <PCD_EP_ISR_Handler+0x6f2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2250      	movs	r2, #80	; 0x50
 8003e0e:	5a9b      	ldrh	r3, [r3, r2]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	001a      	movs	r2, r3
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	189b      	adds	r3, r3, r2
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	00da      	lsls	r2, r3, #3
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	18d3      	adds	r3, r2, r3
 8003e24:	4a1e      	ldr	r2, [pc, #120]	; (8003ea0 <PCD_EP_ISR_Handler+0x6b0>)
 8003e26:	4694      	mov	ip, r2
 8003e28:	4463      	add	r3, ip
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2e:	2200      	movs	r2, #0
 8003e30:	801a      	strh	r2, [r3, #0]
 8003e32:	e056      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d136      	bne.n	8003eb0 <PCD_EP_ISR_Handler+0x6c0>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2250      	movs	r2, #80	; 0x50
 8003e4e:	5a9b      	ldrh	r3, [r3, r2]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	001a      	movs	r2, r3
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e56:	189b      	adds	r3, r3, r2
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	00da      	lsls	r2, r3, #3
 8003e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e62:	18d3      	adds	r3, r2, r3
 8003e64:	4a0b      	ldr	r2, [pc, #44]	; (8003e94 <PCD_EP_ISR_Handler+0x6a4>)
 8003e66:	4694      	mov	ip, r2
 8003e68:	4463      	add	r3, ip
 8003e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	4a0e      	ldr	r2, [pc, #56]	; (8003eac <PCD_EP_ISR_Handler+0x6bc>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	801a      	strh	r2, [r3, #0]
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	4a09      	ldr	r2, [pc, #36]	; (8003ea8 <PCD_EP_ISR_Handler+0x6b8>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	e029      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x6f2>
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	00000f8f 	.word	0x00000f8f
 8003e94:	00000406 	.word	0x00000406
 8003e98:	ffff8f8f 	.word	0xffff8f8f
 8003e9c:	ffff80c0 	.word	0xffff80c0
 8003ea0:	00000402 	.word	0x00000402
 8003ea4:	ffff8f0f 	.word	0xffff8f0f
 8003ea8:	ffff8000 	.word	0xffff8000
 8003eac:	ffff83ff 	.word	0xffff83ff
 8003eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d114      	bne.n	8003ee2 <PCD_EP_ISR_Handler+0x6f2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2250      	movs	r2, #80	; 0x50
 8003ebe:	5a9b      	ldrh	r3, [r3, r2]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	001a      	movs	r2, r3
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	00da      	lsls	r2, r3, #3
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed2:	18d3      	adds	r3, r2, r3
 8003ed4:	4a3d      	ldr	r2, [pc, #244]	; (8003fcc <PCD_EP_ISR_Handler+0x7dc>)
 8003ed6:	4694      	mov	ip, r2
 8003ed8:	4463      	add	r3, ip
 8003eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	2200      	movs	r2, #0
 8003ee0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee4:	781a      	ldrb	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0011      	movs	r1, r2
 8003eea:	0018      	movs	r0, r3
 8003eec:	f007 fd60 	bl	800b9b0 <HAL_PCD_DataInStageCallback>
 8003ef0:	e05c      	b.n	8003fac <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef4:	78db      	ldrb	r3, [r3, #3]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d150      	bne.n	8003f9c <PCD_EP_ISR_Handler+0x7ac>
 8003efa:	2352      	movs	r3, #82	; 0x52
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	881a      	ldrh	r2, [r3, #0]
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4013      	ands	r3, r2
 8003f06:	d149      	bne.n	8003f9c <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2250      	movs	r2, #80	; 0x50
 8003f0e:	5a9b      	ldrh	r3, [r3, r2]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	001a      	movs	r2, r3
 8003f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	18d2      	adds	r2, r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	18d3      	adds	r3, r2, r3
 8003f22:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <PCD_EP_ISR_Handler+0x7e0>)
 8003f24:	4694      	mov	ip, r2
 8003f26:	4463      	add	r3, ip
 8003f28:	881a      	ldrh	r2, [r3, #0]
 8003f2a:	2140      	movs	r1, #64	; 0x40
 8003f2c:	187b      	adds	r3, r7, r1
 8003f2e:	0592      	lsls	r2, r2, #22
 8003f30:	0d92      	lsrs	r2, r2, #22
 8003f32:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	187b      	adds	r3, r7, r1
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d907      	bls.n	8003f50 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8003f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	187b      	adds	r3, r7, r1
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	1ad2      	subs	r2, r2, r3
 8003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4c:	619a      	str	r2, [r3, #24]
 8003f4e:	e002      	b.n	8003f56 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8003f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f52:	2200      	movs	r2, #0
 8003f54:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d107      	bne.n	8003f6e <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0011      	movs	r1, r2
 8003f66:	0018      	movs	r0, r3
 8003f68:	f007 fd22 	bl	800b9b0 <HAL_PCD_DataInStageCallback>
 8003f6c:	e01e      	b.n	8003fac <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	2140      	movs	r1, #64	; 0x40
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	18d2      	adds	r2, r2, r3
 8003f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f7c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f80:	69da      	ldr	r2, [r3, #28]
 8003f82:	187b      	adds	r3, r7, r1
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	18d2      	adds	r2, r2, r3
 8003f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f92:	0011      	movs	r1, r2
 8003f94:	0018      	movs	r0, r3
 8003f96:	f004 facf 	bl	8008538 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003f9a:	e007      	b.n	8003fac <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003f9c:	2352      	movs	r3, #82	; 0x52
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f000 f930 	bl	800420c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2244      	movs	r2, #68	; 0x44
 8003fb2:	5a9b      	ldrh	r3, [r3, r2]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	b21b      	sxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	da01      	bge.n	8003fc0 <PCD_EP_ISR_Handler+0x7d0>
 8003fbc:	f7ff fc1e 	bl	80037fc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b016      	add	sp, #88	; 0x58
 8003fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	00000406 	.word	0x00000406
 8003fd0:	00000402 	.word	0x00000402

08003fd4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	1dbb      	adds	r3, r7, #6
 8003fe0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fe2:	1dbb      	adds	r3, r7, #6
 8003fe4:	881a      	ldrh	r2, [r3, #0]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	01db      	lsls	r3, r3, #7
 8003fea:	4013      	ands	r3, r2
 8003fec:	d100      	bne.n	8003ff0 <HAL_PCD_EP_DB_Receive+0x1c>
 8003fee:	e07d      	b.n	80040ec <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2250      	movs	r2, #80	; 0x50
 8003ff6:	5a9b      	ldrh	r3, [r3, r2]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	18d2      	adds	r2, r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	18d3      	adds	r3, r2, r3
 800400a:	4a7a      	ldr	r2, [pc, #488]	; (80041f4 <HAL_PCD_EP_DB_Receive+0x220>)
 800400c:	4694      	mov	ip, r2
 800400e:	4463      	add	r3, ip
 8004010:	881a      	ldrh	r2, [r3, #0]
 8004012:	211a      	movs	r1, #26
 8004014:	187b      	adds	r3, r7, r1
 8004016:	0592      	lsls	r2, r2, #22
 8004018:	0d92      	lsrs	r2, r2, #22
 800401a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	187b      	adds	r3, r7, r1
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d307      	bcc.n	8004038 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	187b      	adds	r3, r7, r1
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	1ad2      	subs	r2, r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	619a      	str	r2, [r3, #24]
 8004036:	e002      	b.n	800403e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2200      	movs	r2, #0
 800403c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d121      	bne.n	800408a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	001a      	movs	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	18d3      	adds	r3, r2, r3
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b29a      	uxth	r2, r3
 8004058:	2018      	movs	r0, #24
 800405a:	183b      	adds	r3, r7, r0
 800405c:	4966      	ldr	r1, [pc, #408]	; (80041f8 <HAL_PCD_EP_DB_Receive+0x224>)
 800405e:	400a      	ands	r2, r1
 8004060:	801a      	strh	r2, [r3, #0]
 8004062:	183b      	adds	r3, r7, r0
 8004064:	183a      	adds	r2, r7, r0
 8004066:	8812      	ldrh	r2, [r2, #0]
 8004068:	2180      	movs	r1, #128	; 0x80
 800406a:	0189      	lsls	r1, r1, #6
 800406c:	404a      	eors	r2, r1
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	001a      	movs	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	18d3      	adds	r3, r2, r3
 800407e:	183a      	adds	r2, r7, r0
 8004080:	8812      	ldrh	r2, [r2, #0]
 8004082:	495e      	ldr	r1, [pc, #376]	; (80041fc <HAL_PCD_EP_DB_Receive+0x228>)
 8004084:	430a      	orrs	r2, r1
 8004086:	b292      	uxth	r2, r2
 8004088:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800408a:	1dbb      	adds	r3, r7, #6
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	2240      	movs	r2, #64	; 0x40
 8004090:	4013      	ands	r3, r2
 8004092:	d01a      	beq.n	80040ca <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	001a      	movs	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	18d3      	adds	r3, r2, r3
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	2016      	movs	r0, #22
 80040a8:	183b      	adds	r3, r7, r0
 80040aa:	4955      	ldr	r1, [pc, #340]	; (8004200 <HAL_PCD_EP_DB_Receive+0x22c>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	001a      	movs	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	18d3      	adds	r3, r2, r3
 80040be:	183a      	adds	r2, r7, r0
 80040c0:	8812      	ldrh	r2, [r2, #0]
 80040c2:	4950      	ldr	r1, [pc, #320]	; (8004204 <HAL_PCD_EP_DB_Receive+0x230>)
 80040c4:	430a      	orrs	r2, r1
 80040c6:	b292      	uxth	r2, r2
 80040c8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80040ca:	241a      	movs	r4, #26
 80040cc:	193b      	adds	r3, r7, r4
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d100      	bne.n	80040d6 <HAL_PCD_EP_DB_Receive+0x102>
 80040d4:	e086      	b.n	80041e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6959      	ldr	r1, [r3, #20]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	891a      	ldrh	r2, [r3, #8]
 80040e2:	193b      	adds	r3, r7, r4
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	f005 fc5f 	bl	80099a8 <USB_ReadPMA>
 80040ea:	e07b      	b.n	80041e4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2250      	movs	r2, #80	; 0x50
 80040f2:	5a9b      	ldrh	r3, [r3, r2]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	001a      	movs	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	18d2      	adds	r2, r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	18d3      	adds	r3, r2, r3
 8004106:	4a40      	ldr	r2, [pc, #256]	; (8004208 <HAL_PCD_EP_DB_Receive+0x234>)
 8004108:	4694      	mov	ip, r2
 800410a:	4463      	add	r3, ip
 800410c:	881a      	ldrh	r2, [r3, #0]
 800410e:	211a      	movs	r1, #26
 8004110:	187b      	adds	r3, r7, r1
 8004112:	0592      	lsls	r2, r2, #22
 8004114:	0d92      	lsrs	r2, r2, #22
 8004116:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	699a      	ldr	r2, [r3, #24]
 800411c:	187b      	adds	r3, r7, r1
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d307      	bcc.n	8004134 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	187b      	adds	r3, r7, r1
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	1ad2      	subs	r2, r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	619a      	str	r2, [r3, #24]
 8004132:	e002      	b.n	800413a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2200      	movs	r2, #0
 8004138:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d121      	bne.n	8004186 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	001a      	movs	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	18d3      	adds	r3, r2, r3
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29a      	uxth	r2, r3
 8004154:	201e      	movs	r0, #30
 8004156:	183b      	adds	r3, r7, r0
 8004158:	4927      	ldr	r1, [pc, #156]	; (80041f8 <HAL_PCD_EP_DB_Receive+0x224>)
 800415a:	400a      	ands	r2, r1
 800415c:	801a      	strh	r2, [r3, #0]
 800415e:	183b      	adds	r3, r7, r0
 8004160:	183a      	adds	r2, r7, r0
 8004162:	8812      	ldrh	r2, [r2, #0]
 8004164:	2180      	movs	r1, #128	; 0x80
 8004166:	0189      	lsls	r1, r1, #6
 8004168:	404a      	eors	r2, r1
 800416a:	801a      	strh	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	001a      	movs	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	18d3      	adds	r3, r2, r3
 800417a:	183a      	adds	r2, r7, r0
 800417c:	8812      	ldrh	r2, [r2, #0]
 800417e:	491f      	ldr	r1, [pc, #124]	; (80041fc <HAL_PCD_EP_DB_Receive+0x228>)
 8004180:	430a      	orrs	r2, r1
 8004182:	b292      	uxth	r2, r2
 8004184:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004186:	1dbb      	adds	r3, r7, #6
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	2240      	movs	r2, #64	; 0x40
 800418c:	4013      	ands	r3, r2
 800418e:	d11a      	bne.n	80041c6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	001a      	movs	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	18d3      	adds	r3, r2, r3
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	201c      	movs	r0, #28
 80041a4:	183b      	adds	r3, r7, r0
 80041a6:	4916      	ldr	r1, [pc, #88]	; (8004200 <HAL_PCD_EP_DB_Receive+0x22c>)
 80041a8:	400a      	ands	r2, r1
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	001a      	movs	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	18d3      	adds	r3, r2, r3
 80041ba:	183a      	adds	r2, r7, r0
 80041bc:	8812      	ldrh	r2, [r2, #0]
 80041be:	4911      	ldr	r1, [pc, #68]	; (8004204 <HAL_PCD_EP_DB_Receive+0x230>)
 80041c0:	430a      	orrs	r2, r1
 80041c2:	b292      	uxth	r2, r2
 80041c4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80041c6:	241a      	movs	r4, #26
 80041c8:	193b      	adds	r3, r7, r4
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d009      	beq.n	80041e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	6959      	ldr	r1, [r3, #20]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	895a      	ldrh	r2, [r3, #10]
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	f005 fbe2 	bl	80099a8 <USB_ReadPMA>
    }
  }

  return count;
 80041e4:	231a      	movs	r3, #26
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	881b      	ldrh	r3, [r3, #0]
}
 80041ea:	0018      	movs	r0, r3
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b009      	add	sp, #36	; 0x24
 80041f0:	bd90      	pop	{r4, r7, pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	00000402 	.word	0x00000402
 80041f8:	ffffbf8f 	.word	0xffffbf8f
 80041fc:	ffff8080 	.word	0xffff8080
 8004200:	ffff8f8f 	.word	0xffff8f8f
 8004204:	ffff80c0 	.word	0xffff80c0
 8004208:	00000406 	.word	0x00000406

0800420c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b0a2      	sub	sp, #136	; 0x88
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	1dbb      	adds	r3, r7, #6
 8004218:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800421a:	1dbb      	adds	r3, r7, #6
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	2240      	movs	r2, #64	; 0x40
 8004220:	4013      	ands	r3, r2
 8004222:	d100      	bne.n	8004226 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004224:	e1c8      	b.n	80045b8 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2250      	movs	r2, #80	; 0x50
 800422c:	5a9b      	ldrh	r3, [r3, r2]
 800422e:	b29b      	uxth	r3, r3
 8004230:	001a      	movs	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	18d2      	adds	r2, r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	18d3      	adds	r3, r2, r3
 8004240:	4ad7      	ldr	r2, [pc, #860]	; (80045a0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004242:	4694      	mov	ip, r2
 8004244:	4463      	add	r3, ip
 8004246:	881a      	ldrh	r2, [r3, #0]
 8004248:	214e      	movs	r1, #78	; 0x4e
 800424a:	187b      	adds	r3, r7, r1
 800424c:	0592      	lsls	r2, r2, #22
 800424e:	0d92      	lsrs	r2, r2, #22
 8004250:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	187b      	adds	r3, r7, r1
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d907      	bls.n	800426e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	187b      	adds	r3, r7, r1
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	1ad2      	subs	r2, r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	619a      	str	r2, [r3, #24]
 800426c:	e002      	b.n	8004274 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2200      	movs	r2, #0
 8004272:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d000      	beq.n	800427e <HAL_PCD_EP_DB_Transmit+0x72>
 800427c:	e0b5      	b.n	80043ea <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	785b      	ldrb	r3, [r3, #1]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d125      	bne.n	80042d2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2250      	movs	r2, #80	; 0x50
 8004292:	5a9b      	ldrh	r3, [r3, r2]
 8004294:	b29b      	uxth	r3, r3
 8004296:	001a      	movs	r2, r3
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	189b      	adds	r3, r3, r2
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	00da      	lsls	r2, r3, #3
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	18d3      	adds	r3, r2, r3
 80042a8:	4abd      	ldr	r2, [pc, #756]	; (80045a0 <HAL_PCD_EP_DB_Transmit+0x394>)
 80042aa:	4694      	mov	ip, r2
 80042ac:	4463      	add	r3, ip
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4abb      	ldr	r2, [pc, #748]	; (80045a4 <HAL_PCD_EP_DB_Transmit+0x398>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	4ab8      	ldr	r2, [pc, #736]	; (80045a8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	801a      	strh	r2, [r3, #0]
 80042d0:	e01b      	b.n	800430a <HAL_PCD_EP_DB_Transmit+0xfe>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d117      	bne.n	800430a <HAL_PCD_EP_DB_Transmit+0xfe>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	633b      	str	r3, [r7, #48]	; 0x30
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2250      	movs	r2, #80	; 0x50
 80042e6:	5a9b      	ldrh	r3, [r3, r2]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	001a      	movs	r2, r3
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	189b      	adds	r3, r3, r2
 80042f0:	633b      	str	r3, [r7, #48]	; 0x30
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	00da      	lsls	r2, r3, #3
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	18d3      	adds	r3, r2, r3
 80042fc:	4aa8      	ldr	r2, [pc, #672]	; (80045a0 <HAL_PCD_EP_DB_Transmit+0x394>)
 80042fe:	4694      	mov	ip, r2
 8004300:	4463      	add	r3, ip
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004306:	2200      	movs	r2, #0
 8004308:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d125      	bne.n	8004364 <HAL_PCD_EP_DB_Transmit+0x158>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2250      	movs	r2, #80	; 0x50
 8004324:	5a9b      	ldrh	r3, [r3, r2]
 8004326:	b29b      	uxth	r3, r3
 8004328:	001a      	movs	r2, r3
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	189b      	adds	r3, r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	00da      	lsls	r2, r3, #3
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	18d3      	adds	r3, r2, r3
 800433a:	4a9c      	ldr	r2, [pc, #624]	; (80045ac <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800433c:	4694      	mov	ip, r2
 800433e:	4463      	add	r3, ip
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	4a96      	ldr	r2, [pc, #600]	; (80045a4 <HAL_PCD_EP_DB_Transmit+0x398>)
 800434a:	4013      	ands	r3, r2
 800434c:	b29a      	uxth	r2, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	4a93      	ldr	r2, [pc, #588]	; (80045a8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800435a:	4313      	orrs	r3, r2
 800435c:	b29a      	uxth	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	801a      	strh	r2, [r3, #0]
 8004362:	e018      	b.n	8004396 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	785b      	ldrb	r3, [r3, #1]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d114      	bne.n	8004396 <HAL_PCD_EP_DB_Transmit+0x18a>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2250      	movs	r2, #80	; 0x50
 8004372:	5a9b      	ldrh	r3, [r3, r2]
 8004374:	b29b      	uxth	r3, r3
 8004376:	001a      	movs	r2, r3
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	189b      	adds	r3, r3, r2
 800437c:	623b      	str	r3, [r7, #32]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	00da      	lsls	r2, r3, #3
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	18d3      	adds	r3, r2, r3
 8004388:	4a88      	ldr	r2, [pc, #544]	; (80045ac <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800438a:	4694      	mov	ip, r2
 800438c:	4463      	add	r3, ip
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2200      	movs	r2, #0
 8004394:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	0011      	movs	r1, r2
 800439e:	0018      	movs	r0, r3
 80043a0:	f007 fb06 	bl	800b9b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043a4:	1dbb      	adds	r3, r7, #6
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	01db      	lsls	r3, r3, #7
 80043ac:	4013      	ands	r3, r2
 80043ae:	d100      	bne.n	80043b2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80043b0:	e2d4      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	001a      	movs	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	18d3      	adds	r3, r2, r3
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	2012      	movs	r0, #18
 80043c6:	183b      	adds	r3, r7, r0
 80043c8:	4979      	ldr	r1, [pc, #484]	; (80045b0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80043ca:	400a      	ands	r2, r1
 80043cc:	801a      	strh	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	001a      	movs	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	18d3      	adds	r3, r2, r3
 80043dc:	183a      	adds	r2, r7, r0
 80043de:	8812      	ldrh	r2, [r2, #0]
 80043e0:	4974      	ldr	r1, [pc, #464]	; (80045b4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80043e2:	430a      	orrs	r2, r1
 80043e4:	b292      	uxth	r2, r2
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	e2b8      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043ea:	1dbb      	adds	r3, r7, #6
 80043ec:	881a      	ldrh	r2, [r3, #0]
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	01db      	lsls	r3, r3, #7
 80043f2:	4013      	ands	r3, r2
 80043f4:	d01a      	beq.n	800442c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	001a      	movs	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	18d3      	adds	r3, r2, r3
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29a      	uxth	r2, r3
 8004408:	2044      	movs	r0, #68	; 0x44
 800440a:	183b      	adds	r3, r7, r0
 800440c:	4968      	ldr	r1, [pc, #416]	; (80045b0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800440e:	400a      	ands	r2, r1
 8004410:	801a      	strh	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	001a      	movs	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	18d3      	adds	r3, r2, r3
 8004420:	183a      	adds	r2, r7, r0
 8004422:	8812      	ldrh	r2, [r2, #0]
 8004424:	4963      	ldr	r1, [pc, #396]	; (80045b4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004426:	430a      	orrs	r2, r1
 8004428:	b292      	uxth	r2, r2
 800442a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2224      	movs	r2, #36	; 0x24
 8004430:	5c9b      	ldrb	r3, [r3, r2]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d000      	beq.n	8004438 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004436:	e291      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	214e      	movs	r1, #78	; 0x4e
 800443e:	187b      	adds	r3, r7, r1
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	18d2      	adds	r2, r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	187b      	adds	r3, r7, r1
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	18d2      	adds	r2, r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6a1a      	ldr	r2, [r3, #32]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	429a      	cmp	r2, r3
 8004460:	d309      	bcc.n	8004476 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	6a1a      	ldr	r2, [r3, #32]
 800446c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	621a      	str	r2, [r3, #32]
 8004474:	e016      	b.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d108      	bne.n	8004490 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 800447e:	234e      	movs	r3, #78	; 0x4e
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2224      	movs	r2, #36	; 0x24
 800448a:	2100      	movs	r1, #0
 800448c:	5499      	strb	r1, [r3, r2]
 800448e:	e009      	b.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2224      	movs	r2, #36	; 0x24
 8004494:	2100      	movs	r1, #0
 8004496:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2200      	movs	r2, #0
 80044a2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	785b      	ldrb	r3, [r3, #1]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d150      	bne.n	800454e <HAL_PCD_EP_DB_Transmit+0x342>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2250      	movs	r2, #80	; 0x50
 80044b8:	5a9b      	ldrh	r3, [r3, r2]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	001a      	movs	r2, r3
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	189b      	adds	r3, r3, r2
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	00da      	lsls	r2, r3, #3
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	18d3      	adds	r3, r2, r3
 80044ce:	4a34      	ldr	r2, [pc, #208]	; (80045a0 <HAL_PCD_EP_DB_Transmit+0x394>)
 80044d0:	4694      	mov	ip, r2
 80044d2:	4463      	add	r3, ip
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
 80044d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d110      	bne.n	80044fe <HAL_PCD_EP_DB_Transmit+0x2f2>
 80044dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	4a30      	ldr	r2, [pc, #192]	; (80045a4 <HAL_PCD_EP_DB_Transmit+0x398>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ea:	801a      	strh	r2, [r3, #0]
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4a2d      	ldr	r2, [pc, #180]	; (80045a8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fa:	801a      	strh	r2, [r3, #0]
 80044fc:	e044      	b.n	8004588 <HAL_PCD_EP_DB_Transmit+0x37c>
 80044fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004500:	2b3e      	cmp	r3, #62	; 0x3e
 8004502:	d810      	bhi.n	8004526 <HAL_PCD_EP_DB_Transmit+0x31a>
 8004504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	64bb      	str	r3, [r7, #72]	; 0x48
 800450a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800450c:	2201      	movs	r2, #1
 800450e:	4013      	ands	r3, r2
 8004510:	d002      	beq.n	8004518 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004514:	3301      	adds	r3, #1
 8004516:	64bb      	str	r3, [r7, #72]	; 0x48
 8004518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451a:	b29b      	uxth	r3, r3
 800451c:	029b      	lsls	r3, r3, #10
 800451e:	b29a      	uxth	r2, r3
 8004520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	e030      	b.n	8004588 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	64bb      	str	r3, [r7, #72]	; 0x48
 800452c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452e:	221f      	movs	r2, #31
 8004530:	4013      	ands	r3, r2
 8004532:	d102      	bne.n	800453a <HAL_PCD_EP_DB_Transmit+0x32e>
 8004534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004536:	3b01      	subs	r3, #1
 8004538:	64bb      	str	r3, [r7, #72]	; 0x48
 800453a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453c:	b29b      	uxth	r3, r3
 800453e:	029b      	lsls	r3, r3, #10
 8004540:	b29b      	uxth	r3, r3
 8004542:	4a19      	ldr	r2, [pc, #100]	; (80045a8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004544:	4313      	orrs	r3, r2
 8004546:	b29a      	uxth	r2, r3
 8004548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	e01c      	b.n	8004588 <HAL_PCD_EP_DB_Transmit+0x37c>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	785b      	ldrb	r3, [r3, #1]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d118      	bne.n	8004588 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	643b      	str	r3, [r7, #64]	; 0x40
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2250      	movs	r2, #80	; 0x50
 8004562:	5a9b      	ldrh	r3, [r3, r2]
 8004564:	b29b      	uxth	r3, r3
 8004566:	001a      	movs	r2, r3
 8004568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456a:	189b      	adds	r3, r3, r2
 800456c:	643b      	str	r3, [r7, #64]	; 0x40
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	00da      	lsls	r2, r3, #3
 8004574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004576:	18d3      	adds	r3, r2, r3
 8004578:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <HAL_PCD_EP_DB_Transmit+0x394>)
 800457a:	4694      	mov	ip, r2
 800457c:	4463      	add	r3, ip
 800457e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004582:	b29a      	uxth	r2, r3
 8004584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004586:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6959      	ldr	r1, [r3, #20]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	891a      	ldrh	r2, [r3, #8]
 8004594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004596:	b29b      	uxth	r3, r3
 8004598:	f005 f9c2 	bl	8009920 <USB_WritePMA>
 800459c:	e1de      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x750>
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	00000402 	.word	0x00000402
 80045a4:	ffff83ff 	.word	0xffff83ff
 80045a8:	ffff8000 	.word	0xffff8000
 80045ac:	00000406 	.word	0x00000406
 80045b0:	ffff8f8f 	.word	0xffff8f8f
 80045b4:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2250      	movs	r2, #80	; 0x50
 80045be:	5a9b      	ldrh	r3, [r3, r2]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	001a      	movs	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	18d2      	adds	r2, r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	18d3      	adds	r3, r2, r3
 80045d2:	4aca      	ldr	r2, [pc, #808]	; (80048fc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80045d4:	4694      	mov	ip, r2
 80045d6:	4463      	add	r3, ip
 80045d8:	881a      	ldrh	r2, [r3, #0]
 80045da:	214e      	movs	r1, #78	; 0x4e
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	0592      	lsls	r2, r2, #22
 80045e0:	0d92      	lsrs	r2, r2, #22
 80045e2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	699a      	ldr	r2, [r3, #24]
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d307      	bcc.n	8004600 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	699a      	ldr	r2, [r3, #24]
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	1ad2      	subs	r2, r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	619a      	str	r2, [r3, #24]
 80045fe:	e002      	b.n	8004606 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2200      	movs	r2, #0
 8004604:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d000      	beq.n	8004610 <HAL_PCD_EP_DB_Transmit+0x404>
 800460e:	e0c0      	b.n	8004792 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	785b      	ldrb	r3, [r3, #1]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d125      	bne.n	8004664 <HAL_PCD_EP_DB_Transmit+0x458>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2250      	movs	r2, #80	; 0x50
 8004624:	5a9b      	ldrh	r3, [r3, r2]
 8004626:	b29b      	uxth	r3, r3
 8004628:	001a      	movs	r2, r3
 800462a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462c:	189b      	adds	r3, r3, r2
 800462e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	00da      	lsls	r2, r3, #3
 8004636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004638:	18d3      	adds	r3, r2, r3
 800463a:	4ab1      	ldr	r2, [pc, #708]	; (8004900 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800463c:	4694      	mov	ip, r2
 800463e:	4463      	add	r3, ip
 8004640:	66bb      	str	r3, [r7, #104]	; 0x68
 8004642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	4aae      	ldr	r2, [pc, #696]	; (8004904 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800464a:	4013      	ands	r3, r2
 800464c:	b29a      	uxth	r2, r3
 800464e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004650:	801a      	strh	r2, [r3, #0]
 8004652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	4aab      	ldr	r2, [pc, #684]	; (8004908 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800465a:	4313      	orrs	r3, r2
 800465c:	b29a      	uxth	r2, r3
 800465e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	e01b      	b.n	800469c <HAL_PCD_EP_DB_Transmit+0x490>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d117      	bne.n	800469c <HAL_PCD_EP_DB_Transmit+0x490>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	677b      	str	r3, [r7, #116]	; 0x74
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2250      	movs	r2, #80	; 0x50
 8004678:	5a9b      	ldrh	r3, [r3, r2]
 800467a:	b29b      	uxth	r3, r3
 800467c:	001a      	movs	r2, r3
 800467e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004680:	189b      	adds	r3, r3, r2
 8004682:	677b      	str	r3, [r7, #116]	; 0x74
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	00da      	lsls	r2, r3, #3
 800468a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800468c:	18d3      	adds	r3, r2, r3
 800468e:	4a9c      	ldr	r2, [pc, #624]	; (8004900 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004690:	4694      	mov	ip, r2
 8004692:	4463      	add	r3, ip
 8004694:	673b      	str	r3, [r7, #112]	; 0x70
 8004696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004698:	2200      	movs	r2, #0
 800469a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d130      	bne.n	800470c <HAL_PCD_EP_DB_Transmit+0x500>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2180      	movs	r1, #128	; 0x80
 80046b0:	187a      	adds	r2, r7, r1
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2250      	movs	r2, #80	; 0x50
 80046ba:	5a9b      	ldrh	r3, [r3, r2]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	001a      	movs	r2, r3
 80046c0:	187b      	adds	r3, r7, r1
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	189b      	adds	r3, r3, r2
 80046c6:	187a      	adds	r2, r7, r1
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	00da      	lsls	r2, r3, #3
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	18d3      	adds	r3, r2, r3
 80046d6:	4a89      	ldr	r2, [pc, #548]	; (80048fc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80046d8:	4694      	mov	ip, r2
 80046da:	4463      	add	r3, ip
 80046dc:	2184      	movs	r1, #132	; 0x84
 80046de:	187a      	adds	r2, r7, r1
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	4a86      	ldr	r2, [pc, #536]	; (8004904 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	187b      	adds	r3, r7, r1
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	801a      	strh	r2, [r3, #0]
 80046f6:	187b      	adds	r3, r7, r1
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	4a82      	ldr	r2, [pc, #520]	; (8004908 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004700:	4313      	orrs	r3, r2
 8004702:	b29a      	uxth	r2, r3
 8004704:	187b      	adds	r3, r7, r1
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	801a      	strh	r2, [r3, #0]
 800470a:	e018      	b.n	800473e <HAL_PCD_EP_DB_Transmit+0x532>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d114      	bne.n	800473e <HAL_PCD_EP_DB_Transmit+0x532>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2250      	movs	r2, #80	; 0x50
 800471a:	5a9b      	ldrh	r3, [r3, r2]
 800471c:	b29b      	uxth	r3, r3
 800471e:	001a      	movs	r2, r3
 8004720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004722:	189b      	adds	r3, r3, r2
 8004724:	67bb      	str	r3, [r7, #120]	; 0x78
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	00da      	lsls	r2, r3, #3
 800472c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800472e:	18d3      	adds	r3, r2, r3
 8004730:	4a72      	ldr	r2, [pc, #456]	; (80048fc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004732:	4694      	mov	ip, r2
 8004734:	4463      	add	r3, ip
 8004736:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800473a:	2200      	movs	r2, #0
 800473c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781a      	ldrb	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	0011      	movs	r1, r2
 8004746:	0018      	movs	r0, r3
 8004748:	f007 f932 	bl	800b9b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800474c:	1dbb      	adds	r3, r7, #6
 800474e:	881a      	ldrh	r2, [r3, #0]
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	01db      	lsls	r3, r3, #7
 8004754:	4013      	ands	r3, r2
 8004756:	d000      	beq.n	800475a <HAL_PCD_EP_DB_Transmit+0x54e>
 8004758:	e100      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	001a      	movs	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	18d3      	adds	r3, r2, r3
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29a      	uxth	r2, r3
 800476c:	2046      	movs	r0, #70	; 0x46
 800476e:	183b      	adds	r3, r7, r0
 8004770:	4966      	ldr	r1, [pc, #408]	; (800490c <HAL_PCD_EP_DB_Transmit+0x700>)
 8004772:	400a      	ands	r2, r1
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	001a      	movs	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	18d3      	adds	r3, r2, r3
 8004784:	183a      	adds	r2, r7, r0
 8004786:	8812      	ldrh	r2, [r2, #0]
 8004788:	4961      	ldr	r1, [pc, #388]	; (8004910 <HAL_PCD_EP_DB_Transmit+0x704>)
 800478a:	430a      	orrs	r2, r1
 800478c:	b292      	uxth	r2, r2
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	e0e4      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004792:	1dbb      	adds	r3, r7, #6
 8004794:	881a      	ldrh	r2, [r3, #0]
 8004796:	2380      	movs	r3, #128	; 0x80
 8004798:	01db      	lsls	r3, r3, #7
 800479a:	4013      	ands	r3, r2
 800479c:	d11a      	bne.n	80047d4 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	001a      	movs	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	18d3      	adds	r3, r2, r3
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	204c      	movs	r0, #76	; 0x4c
 80047b2:	183b      	adds	r3, r7, r0
 80047b4:	4955      	ldr	r1, [pc, #340]	; (800490c <HAL_PCD_EP_DB_Transmit+0x700>)
 80047b6:	400a      	ands	r2, r1
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	001a      	movs	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	18d3      	adds	r3, r2, r3
 80047c8:	183a      	adds	r2, r7, r0
 80047ca:	8812      	ldrh	r2, [r2, #0]
 80047cc:	4950      	ldr	r1, [pc, #320]	; (8004910 <HAL_PCD_EP_DB_Transmit+0x704>)
 80047ce:	430a      	orrs	r2, r1
 80047d0:	b292      	uxth	r2, r2
 80047d2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2224      	movs	r2, #36	; 0x24
 80047d8:	5c9b      	ldrb	r3, [r3, r2]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d000      	beq.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x5d4>
 80047de:	e0bd      	b.n	800495c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	695a      	ldr	r2, [r3, #20]
 80047e4:	214e      	movs	r1, #78	; 0x4e
 80047e6:	187b      	adds	r3, r7, r1
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	18d2      	adds	r2, r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	187b      	adds	r3, r7, r1
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	18d2      	adds	r2, r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6a1a      	ldr	r2, [r3, #32]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	429a      	cmp	r2, r3
 8004808:	d309      	bcc.n	800481e <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004816:	1ad2      	subs	r2, r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	621a      	str	r2, [r3, #32]
 800481c:	e016      	b.n	800484c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d108      	bne.n	8004838 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8004826:	234e      	movs	r3, #78	; 0x4e
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2224      	movs	r2, #36	; 0x24
 8004832:	2100      	movs	r1, #0
 8004834:	5499      	strb	r1, [r3, r2]
 8004836:	e009      	b.n	800484c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2200      	movs	r2, #0
 8004842:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2224      	movs	r2, #36	; 0x24
 8004848:	2100      	movs	r1, #0
 800484a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	667b      	str	r3, [r7, #100]	; 0x64
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d15c      	bne.n	8004914 <HAL_PCD_EP_DB_Transmit+0x708>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2250      	movs	r2, #80	; 0x50
 8004866:	5a9b      	ldrh	r3, [r3, r2]
 8004868:	b29b      	uxth	r3, r3
 800486a:	001a      	movs	r2, r3
 800486c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486e:	189b      	adds	r3, r3, r2
 8004870:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	00da      	lsls	r2, r3, #3
 8004878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487a:	18d3      	adds	r3, r2, r3
 800487c:	4a1f      	ldr	r2, [pc, #124]	; (80048fc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800487e:	4694      	mov	ip, r2
 8004880:	4463      	add	r3, ip
 8004882:	65bb      	str	r3, [r7, #88]	; 0x58
 8004884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004886:	2b00      	cmp	r3, #0
 8004888:	d110      	bne.n	80048ac <HAL_PCD_EP_DB_Transmit+0x6a0>
 800488a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	4a1c      	ldr	r2, [pc, #112]	; (8004904 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004892:	4013      	ands	r3, r2
 8004894:	b29a      	uxth	r2, r3
 8004896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	4a19      	ldr	r2, [pc, #100]	; (8004908 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	e04d      	b.n	8004948 <HAL_PCD_EP_DB_Transmit+0x73c>
 80048ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ae:	2b3e      	cmp	r3, #62	; 0x3e
 80048b0:	d810      	bhi.n	80048d4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80048b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	657b      	str	r3, [r7, #84]	; 0x54
 80048b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ba:	2201      	movs	r2, #1
 80048bc:	4013      	ands	r3, r2
 80048be:	d002      	beq.n	80048c6 <HAL_PCD_EP_DB_Transmit+0x6ba>
 80048c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c2:	3301      	adds	r3, #1
 80048c4:	657b      	str	r3, [r7, #84]	; 0x54
 80048c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	029b      	lsls	r3, r3, #10
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	e039      	b.n	8004948 <HAL_PCD_EP_DB_Transmit+0x73c>
 80048d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	657b      	str	r3, [r7, #84]	; 0x54
 80048da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048dc:	221f      	movs	r2, #31
 80048de:	4013      	ands	r3, r2
 80048e0:	d102      	bne.n	80048e8 <HAL_PCD_EP_DB_Transmit+0x6dc>
 80048e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e4:	3b01      	subs	r3, #1
 80048e6:	657b      	str	r3, [r7, #84]	; 0x54
 80048e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	029b      	lsls	r3, r3, #10
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	4a05      	ldr	r2, [pc, #20]	; (8004908 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	e025      	b.n	8004948 <HAL_PCD_EP_DB_Transmit+0x73c>
 80048fc:	00000406 	.word	0x00000406
 8004900:	00000402 	.word	0x00000402
 8004904:	ffff83ff 	.word	0xffff83ff
 8004908:	ffff8000 	.word	0xffff8000
 800490c:	ffff8f8f 	.word	0xffff8f8f
 8004910:	ffffc080 	.word	0xffffc080
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	785b      	ldrb	r3, [r3, #1]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d115      	bne.n	8004948 <HAL_PCD_EP_DB_Transmit+0x73c>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2250      	movs	r2, #80	; 0x50
 8004922:	5a9b      	ldrh	r3, [r3, r2]
 8004924:	b29b      	uxth	r3, r3
 8004926:	001a      	movs	r2, r3
 8004928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800492a:	189b      	adds	r3, r3, r2
 800492c:	667b      	str	r3, [r7, #100]	; 0x64
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	00da      	lsls	r2, r3, #3
 8004934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004936:	18d3      	adds	r3, r2, r3
 8004938:	4a1e      	ldr	r2, [pc, #120]	; (80049b4 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800493a:	4694      	mov	ip, r2
 800493c:	4463      	add	r3, ip
 800493e:	663b      	str	r3, [r7, #96]	; 0x60
 8004940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004942:	b29a      	uxth	r2, r3
 8004944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004946:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6959      	ldr	r1, [r3, #20]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	895a      	ldrh	r2, [r3, #10]
 8004954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004956:	b29b      	uxth	r3, r3
 8004958:	f004 ffe2 	bl	8009920 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	001a      	movs	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	18d3      	adds	r3, r2, r3
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29a      	uxth	r2, r3
 800496e:	2010      	movs	r0, #16
 8004970:	183b      	adds	r3, r7, r0
 8004972:	4911      	ldr	r1, [pc, #68]	; (80049b8 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8004974:	400a      	ands	r2, r1
 8004976:	801a      	strh	r2, [r3, #0]
 8004978:	183b      	adds	r3, r7, r0
 800497a:	183a      	adds	r2, r7, r0
 800497c:	8812      	ldrh	r2, [r2, #0]
 800497e:	2110      	movs	r1, #16
 8004980:	404a      	eors	r2, r1
 8004982:	801a      	strh	r2, [r3, #0]
 8004984:	183b      	adds	r3, r7, r0
 8004986:	183a      	adds	r2, r7, r0
 8004988:	8812      	ldrh	r2, [r2, #0]
 800498a:	2120      	movs	r1, #32
 800498c:	404a      	eors	r2, r1
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	001a      	movs	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	18d3      	adds	r3, r2, r3
 800499e:	183a      	adds	r2, r7, r0
 80049a0:	8812      	ldrh	r2, [r2, #0]
 80049a2:	4906      	ldr	r1, [pc, #24]	; (80049bc <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80049a4:	430a      	orrs	r2, r1
 80049a6:	b292      	uxth	r2, r2
 80049a8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b022      	add	sp, #136	; 0x88
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	00000406 	.word	0x00000406
 80049b8:	ffff8fbf 	.word	0xffff8fbf
 80049bc:	ffff8080 	.word	0xffff8080

080049c0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80049c0:	b590      	push	{r4, r7, lr}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	0008      	movs	r0, r1
 80049ca:	0011      	movs	r1, r2
 80049cc:	607b      	str	r3, [r7, #4]
 80049ce:	240a      	movs	r4, #10
 80049d0:	193b      	adds	r3, r7, r4
 80049d2:	1c02      	adds	r2, r0, #0
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	2308      	movs	r3, #8
 80049d8:	18fb      	adds	r3, r7, r3
 80049da:	1c0a      	adds	r2, r1, #0
 80049dc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80049de:	0021      	movs	r1, r4
 80049e0:	187b      	adds	r3, r7, r1
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	2280      	movs	r2, #128	; 0x80
 80049e6:	4013      	ands	r3, r2
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00c      	beq.n	8004a08 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ee:	187b      	adds	r3, r7, r1
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	2207      	movs	r2, #7
 80049f4:	4013      	ands	r3, r2
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	0013      	movs	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	189b      	adds	r3, r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	18d3      	adds	r3, r2, r3
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e00b      	b.n	8004a20 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a08:	230a      	movs	r3, #10
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	881a      	ldrh	r2, [r3, #0]
 8004a0e:	0013      	movs	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	189b      	adds	r3, r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	3369      	adds	r3, #105	; 0x69
 8004a18:	33ff      	adds	r3, #255	; 0xff
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	18d3      	adds	r3, r2, r3
 8004a1e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004a20:	2308      	movs	r3, #8
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d107      	bne.n	8004a3a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	80da      	strh	r2, [r3, #6]
 8004a38:	e00b      	b.n	8004a52 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	0018      	movs	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b007      	add	sp, #28
 8004a5a:	bd90      	pop	{r4, r7, pc}

08004a5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	23ba      	movs	r3, #186	; 0xba
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	2101      	movs	r1, #1
 8004a72:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	23b8      	movs	r3, #184	; 0xb8
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2254      	movs	r2, #84	; 0x54
 8004a82:	5a9b      	ldrh	r3, [r3, r2]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2201      	movs	r2, #1
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	b299      	uxth	r1, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2254      	movs	r2, #84	; 0x54
 8004a90:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2254      	movs	r2, #84	; 0x54
 8004a96:	5a9b      	ldrh	r3, [r3, r2]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	b299      	uxth	r1, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2254      	movs	r2, #84	; 0x54
 8004aa4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b004      	add	sp, #16
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	000a      	movs	r2, r1
 8004aba:	1cfb      	adds	r3, r7, #3
 8004abc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	b002      	add	sp, #8
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d102      	bne.n	8004adc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f000 fb76 	bl	80051c8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d100      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x20>
 8004ae6:	e08e      	b.n	8004c06 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004ae8:	4bc5      	ldr	r3, [pc, #788]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	220c      	movs	r2, #12
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d00e      	beq.n	8004b12 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004af4:	4bc2      	ldr	r3, [pc, #776]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	220c      	movs	r2, #12
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d117      	bne.n	8004b30 <HAL_RCC_OscConfig+0x68>
 8004b00:	4bbf      	ldr	r3, [pc, #764]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	23c0      	movs	r3, #192	; 0xc0
 8004b06:	025b      	lsls	r3, r3, #9
 8004b08:	401a      	ands	r2, r3
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	025b      	lsls	r3, r3, #9
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d10e      	bne.n	8004b30 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b12:	4bbb      	ldr	r3, [pc, #748]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	029b      	lsls	r3, r3, #10
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d100      	bne.n	8004b20 <HAL_RCC_OscConfig+0x58>
 8004b1e:	e071      	b.n	8004c04 <HAL_RCC_OscConfig+0x13c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d000      	beq.n	8004b2a <HAL_RCC_OscConfig+0x62>
 8004b28:	e06c      	b.n	8004c04 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f000 fb4c 	bl	80051c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x80>
 8004b38:	4bb1      	ldr	r3, [pc, #708]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4bb0      	ldr	r3, [pc, #704]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b3e:	2180      	movs	r1, #128	; 0x80
 8004b40:	0249      	lsls	r1, r1, #9
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e02f      	b.n	8004ba8 <HAL_RCC_OscConfig+0xe0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10c      	bne.n	8004b6a <HAL_RCC_OscConfig+0xa2>
 8004b50:	4bab      	ldr	r3, [pc, #684]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4baa      	ldr	r3, [pc, #680]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b56:	49ab      	ldr	r1, [pc, #684]	; (8004e04 <HAL_RCC_OscConfig+0x33c>)
 8004b58:	400a      	ands	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	4ba8      	ldr	r3, [pc, #672]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4ba7      	ldr	r3, [pc, #668]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b62:	49a9      	ldr	r1, [pc, #676]	; (8004e08 <HAL_RCC_OscConfig+0x340>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e01e      	b.n	8004ba8 <HAL_RCC_OscConfig+0xe0>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d10e      	bne.n	8004b90 <HAL_RCC_OscConfig+0xc8>
 8004b72:	4ba3      	ldr	r3, [pc, #652]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4ba2      	ldr	r3, [pc, #648]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b78:	2180      	movs	r1, #128	; 0x80
 8004b7a:	02c9      	lsls	r1, r1, #11
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	4b9f      	ldr	r3, [pc, #636]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b9e      	ldr	r3, [pc, #632]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	0249      	lsls	r1, r1, #9
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e00b      	b.n	8004ba8 <HAL_RCC_OscConfig+0xe0>
 8004b90:	4b9b      	ldr	r3, [pc, #620]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4b9a      	ldr	r3, [pc, #616]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b96:	499b      	ldr	r1, [pc, #620]	; (8004e04 <HAL_RCC_OscConfig+0x33c>)
 8004b98:	400a      	ands	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	4b98      	ldr	r3, [pc, #608]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4b97      	ldr	r3, [pc, #604]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004ba2:	4999      	ldr	r1, [pc, #612]	; (8004e08 <HAL_RCC_OscConfig+0x340>)
 8004ba4:	400a      	ands	r2, r1
 8004ba6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d014      	beq.n	8004bda <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb0:	f7fd fa50 	bl	8002054 <HAL_GetTick>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bba:	f7fd fa4b 	bl	8002054 <HAL_GetTick>
 8004bbe:	0002      	movs	r2, r0
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b64      	cmp	r3, #100	; 0x64
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e2fd      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bcc:	4b8c      	ldr	r3, [pc, #560]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	029b      	lsls	r3, r3, #10
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d0f0      	beq.n	8004bba <HAL_RCC_OscConfig+0xf2>
 8004bd8:	e015      	b.n	8004c06 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bda:	f7fd fa3b 	bl	8002054 <HAL_GetTick>
 8004bde:	0003      	movs	r3, r0
 8004be0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be4:	f7fd fa36 	bl	8002054 <HAL_GetTick>
 8004be8:	0002      	movs	r2, r0
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e2e8      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf6:	4b82      	ldr	r3, [pc, #520]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	029b      	lsls	r3, r3, #10
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x11c>
 8004c02:	e000      	b.n	8004c06 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d100      	bne.n	8004c12 <HAL_RCC_OscConfig+0x14a>
 8004c10:	e06c      	b.n	8004cec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c12:	4b7b      	ldr	r3, [pc, #492]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	220c      	movs	r2, #12
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c1c:	4b78      	ldr	r3, [pc, #480]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	220c      	movs	r2, #12
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d11f      	bne.n	8004c68 <HAL_RCC_OscConfig+0x1a0>
 8004c28:	4b75      	ldr	r3, [pc, #468]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	23c0      	movs	r3, #192	; 0xc0
 8004c2e:	025b      	lsls	r3, r3, #9
 8004c30:	401a      	ands	r2, r3
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	021b      	lsls	r3, r3, #8
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d116      	bne.n	8004c68 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3a:	4b71      	ldr	r3, [pc, #452]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	4013      	ands	r3, r2
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_OscConfig+0x188>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e2bb      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c50:	4b6b      	ldr	r3, [pc, #428]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	22f8      	movs	r2, #248	; 0xf8
 8004c56:	4393      	bics	r3, r2
 8004c58:	0019      	movs	r1, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00da      	lsls	r2, r3, #3
 8004c60:	4b67      	ldr	r3, [pc, #412]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004c62:	430a      	orrs	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c66:	e041      	b.n	8004cec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d024      	beq.n	8004cba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c70:	4b63      	ldr	r3, [pc, #396]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b62      	ldr	r3, [pc, #392]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004c76:	2101      	movs	r1, #1
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7c:	f7fd f9ea 	bl	8002054 <HAL_GetTick>
 8004c80:	0003      	movs	r3, r0
 8004c82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c86:	f7fd f9e5 	bl	8002054 <HAL_GetTick>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e297      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c98:	4b59      	ldr	r3, [pc, #356]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d0f1      	beq.n	8004c86 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca2:	4b57      	ldr	r3, [pc, #348]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	22f8      	movs	r2, #248	; 0xf8
 8004ca8:	4393      	bics	r3, r2
 8004caa:	0019      	movs	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	00da      	lsls	r2, r3, #3
 8004cb2:	4b53      	ldr	r3, [pc, #332]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e018      	b.n	8004cec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cba:	4b51      	ldr	r3, [pc, #324]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b50      	ldr	r3, [pc, #320]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	438a      	bics	r2, r1
 8004cc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc6:	f7fd f9c5 	bl	8002054 <HAL_GetTick>
 8004cca:	0003      	movs	r3, r0
 8004ccc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd0:	f7fd f9c0 	bl	8002054 <HAL_GetTick>
 8004cd4:	0002      	movs	r2, r0
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e272      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce2:	4b47      	ldr	r3, [pc, #284]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d1f1      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d036      	beq.n	8004d64 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d019      	beq.n	8004d32 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cfe:	4b40      	ldr	r3, [pc, #256]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d02:	4b3f      	ldr	r3, [pc, #252]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004d04:	2101      	movs	r1, #1
 8004d06:	430a      	orrs	r2, r1
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0a:	f7fd f9a3 	bl	8002054 <HAL_GetTick>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d14:	f7fd f99e 	bl	8002054 <HAL_GetTick>
 8004d18:	0002      	movs	r2, r0
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e250      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d26:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d0f1      	beq.n	8004d14 <HAL_RCC_OscConfig+0x24c>
 8004d30:	e018      	b.n	8004d64 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d32:	4b33      	ldr	r3, [pc, #204]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004d34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d36:	4b32      	ldr	r3, [pc, #200]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004d38:	2101      	movs	r1, #1
 8004d3a:	438a      	bics	r2, r1
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3e:	f7fd f989 	bl	8002054 <HAL_GetTick>
 8004d42:	0003      	movs	r3, r0
 8004d44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d48:	f7fd f984 	bl	8002054 <HAL_GetTick>
 8004d4c:	0002      	movs	r2, r0
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e236      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d5a:	4b29      	ldr	r3, [pc, #164]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2202      	movs	r2, #2
 8004d60:	4013      	ands	r3, r2
 8004d62:	d1f1      	bne.n	8004d48 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2204      	movs	r2, #4
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d100      	bne.n	8004d70 <HAL_RCC_OscConfig+0x2a8>
 8004d6e:	e0b5      	b.n	8004edc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d70:	201f      	movs	r0, #31
 8004d72:	183b      	adds	r3, r7, r0
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d78:	4b21      	ldr	r3, [pc, #132]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	055b      	lsls	r3, r3, #21
 8004d80:	4013      	ands	r3, r2
 8004d82:	d110      	bne.n	8004da6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004d8a:	2180      	movs	r1, #128	; 0x80
 8004d8c:	0549      	lsls	r1, r1, #21
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	61da      	str	r2, [r3, #28]
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	055b      	lsls	r3, r3, #21
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004da0:	183b      	adds	r3, r7, r0
 8004da2:	2201      	movs	r2, #1
 8004da4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da6:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_RCC_OscConfig+0x344>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	4013      	ands	r3, r2
 8004db0:	d11a      	bne.n	8004de8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004db2:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <HAL_RCC_OscConfig+0x344>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <HAL_RCC_OscConfig+0x344>)
 8004db8:	2180      	movs	r1, #128	; 0x80
 8004dba:	0049      	lsls	r1, r1, #1
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc0:	f7fd f948 	bl	8002054 <HAL_GetTick>
 8004dc4:	0003      	movs	r3, r0
 8004dc6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dca:	f7fd f943 	bl	8002054 <HAL_GetTick>
 8004dce:	0002      	movs	r2, r0
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b64      	cmp	r3, #100	; 0x64
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e1f5      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_RCC_OscConfig+0x344>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	2380      	movs	r3, #128	; 0x80
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	4013      	ands	r3, r2
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d10f      	bne.n	8004e10 <HAL_RCC_OscConfig+0x348>
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004df2:	6a1a      	ldr	r2, [r3, #32]
 8004df4:	4b02      	ldr	r3, [pc, #8]	; (8004e00 <HAL_RCC_OscConfig+0x338>)
 8004df6:	2101      	movs	r1, #1
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	621a      	str	r2, [r3, #32]
 8004dfc:	e036      	b.n	8004e6c <HAL_RCC_OscConfig+0x3a4>
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	40021000 	.word	0x40021000
 8004e04:	fffeffff 	.word	0xfffeffff
 8004e08:	fffbffff 	.word	0xfffbffff
 8004e0c:	40007000 	.word	0x40007000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10c      	bne.n	8004e32 <HAL_RCC_OscConfig+0x36a>
 8004e18:	4bca      	ldr	r3, [pc, #808]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e1a:	6a1a      	ldr	r2, [r3, #32]
 8004e1c:	4bc9      	ldr	r3, [pc, #804]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e1e:	2101      	movs	r1, #1
 8004e20:	438a      	bics	r2, r1
 8004e22:	621a      	str	r2, [r3, #32]
 8004e24:	4bc7      	ldr	r3, [pc, #796]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e26:	6a1a      	ldr	r2, [r3, #32]
 8004e28:	4bc6      	ldr	r3, [pc, #792]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e2a:	2104      	movs	r1, #4
 8004e2c:	438a      	bics	r2, r1
 8004e2e:	621a      	str	r2, [r3, #32]
 8004e30:	e01c      	b.n	8004e6c <HAL_RCC_OscConfig+0x3a4>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCC_OscConfig+0x38c>
 8004e3a:	4bc2      	ldr	r3, [pc, #776]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e3c:	6a1a      	ldr	r2, [r3, #32]
 8004e3e:	4bc1      	ldr	r3, [pc, #772]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e40:	2104      	movs	r1, #4
 8004e42:	430a      	orrs	r2, r1
 8004e44:	621a      	str	r2, [r3, #32]
 8004e46:	4bbf      	ldr	r3, [pc, #764]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e48:	6a1a      	ldr	r2, [r3, #32]
 8004e4a:	4bbe      	ldr	r3, [pc, #760]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	621a      	str	r2, [r3, #32]
 8004e52:	e00b      	b.n	8004e6c <HAL_RCC_OscConfig+0x3a4>
 8004e54:	4bbb      	ldr	r3, [pc, #748]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e56:	6a1a      	ldr	r2, [r3, #32]
 8004e58:	4bba      	ldr	r3, [pc, #744]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	438a      	bics	r2, r1
 8004e5e:	621a      	str	r2, [r3, #32]
 8004e60:	4bb8      	ldr	r3, [pc, #736]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e62:	6a1a      	ldr	r2, [r3, #32]
 8004e64:	4bb7      	ldr	r3, [pc, #732]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e66:	2104      	movs	r1, #4
 8004e68:	438a      	bics	r2, r1
 8004e6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d014      	beq.n	8004e9e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e74:	f7fd f8ee 	bl	8002054 <HAL_GetTick>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7c:	e009      	b.n	8004e92 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e7e:	f7fd f8e9 	bl	8002054 <HAL_GetTick>
 8004e82:	0002      	movs	r2, r0
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	4aaf      	ldr	r2, [pc, #700]	; (8005148 <HAL_RCC_OscConfig+0x680>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e19a      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e92:	4bac      	ldr	r3, [pc, #688]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	2202      	movs	r2, #2
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x3b6>
 8004e9c:	e013      	b.n	8004ec6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e9e:	f7fd f8d9 	bl	8002054 <HAL_GetTick>
 8004ea2:	0003      	movs	r3, r0
 8004ea4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea6:	e009      	b.n	8004ebc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea8:	f7fd f8d4 	bl	8002054 <HAL_GetTick>
 8004eac:	0002      	movs	r2, r0
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	4aa5      	ldr	r2, [pc, #660]	; (8005148 <HAL_RCC_OscConfig+0x680>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e185      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ebc:	4ba1      	ldr	r3, [pc, #644]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ec6:	231f      	movs	r3, #31
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d105      	bne.n	8004edc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed0:	4b9c      	ldr	r3, [pc, #624]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	4b9b      	ldr	r3, [pc, #620]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004ed6:	499d      	ldr	r1, [pc, #628]	; (800514c <HAL_RCC_OscConfig+0x684>)
 8004ed8:	400a      	ands	r2, r1
 8004eda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d063      	beq.n	8004fae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d12a      	bne.n	8004f44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004eee:	4b95      	ldr	r3, [pc, #596]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef2:	4b94      	ldr	r3, [pc, #592]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004ef4:	2104      	movs	r1, #4
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004efa:	4b92      	ldr	r3, [pc, #584]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efe:	4b91      	ldr	r3, [pc, #580]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f00:	2101      	movs	r1, #1
 8004f02:	430a      	orrs	r2, r1
 8004f04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f06:	f7fd f8a5 	bl	8002054 <HAL_GetTick>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f10:	f7fd f8a0 	bl	8002054 <HAL_GetTick>
 8004f14:	0002      	movs	r2, r0
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e152      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f22:	4b88      	ldr	r3, [pc, #544]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f26:	2202      	movs	r2, #2
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d0f1      	beq.n	8004f10 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f2c:	4b85      	ldr	r3, [pc, #532]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f30:	22f8      	movs	r2, #248	; 0xf8
 8004f32:	4393      	bics	r3, r2
 8004f34:	0019      	movs	r1, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	00da      	lsls	r2, r3, #3
 8004f3c:	4b81      	ldr	r3, [pc, #516]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	635a      	str	r2, [r3, #52]	; 0x34
 8004f42:	e034      	b.n	8004fae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	3305      	adds	r3, #5
 8004f4a:	d111      	bne.n	8004f70 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004f4c:	4b7d      	ldr	r3, [pc, #500]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f50:	4b7c      	ldr	r3, [pc, #496]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f52:	2104      	movs	r1, #4
 8004f54:	438a      	bics	r2, r1
 8004f56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f58:	4b7a      	ldr	r3, [pc, #488]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5c:	22f8      	movs	r2, #248	; 0xf8
 8004f5e:	4393      	bics	r3, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	00da      	lsls	r2, r3, #3
 8004f68:	4b76      	ldr	r3, [pc, #472]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f6e:	e01e      	b.n	8004fae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f70:	4b74      	ldr	r3, [pc, #464]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f74:	4b73      	ldr	r3, [pc, #460]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f76:	2104      	movs	r1, #4
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004f7c:	4b71      	ldr	r3, [pc, #452]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f80:	4b70      	ldr	r3, [pc, #448]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004f82:	2101      	movs	r1, #1
 8004f84:	438a      	bics	r2, r1
 8004f86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f88:	f7fd f864 	bl	8002054 <HAL_GetTick>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f92:	f7fd f85f 	bl	8002054 <HAL_GetTick>
 8004f96:	0002      	movs	r2, r0
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e111      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004fa4:	4b67      	ldr	r3, [pc, #412]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	2202      	movs	r2, #2
 8004faa:	4013      	ands	r3, r2
 8004fac:	d1f1      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d05c      	beq.n	8005072 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fb8:	4b62      	ldr	r3, [pc, #392]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	220c      	movs	r2, #12
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004fc4:	4b5f      	ldr	r3, [pc, #380]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	220c      	movs	r2, #12
 8004fca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d114      	bne.n	8004ffa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004fd0:	4b5c      	ldr	r3, [pc, #368]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	23c0      	movs	r3, #192	; 0xc0
 8004fd6:	025b      	lsls	r3, r3, #9
 8004fd8:	401a      	ands	r2, r3
 8004fda:	23c0      	movs	r3, #192	; 0xc0
 8004fdc:	025b      	lsls	r3, r3, #9
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d10b      	bne.n	8004ffa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004fe2:	4b58      	ldr	r3, [pc, #352]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8004fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe6:	2380      	movs	r3, #128	; 0x80
 8004fe8:	025b      	lsls	r3, r3, #9
 8004fea:	4013      	ands	r3, r2
 8004fec:	d040      	beq.n	8005070 <HAL_RCC_OscConfig+0x5a8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d03c      	beq.n	8005070 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e0e6      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01b      	beq.n	800503a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005002:	4b50      	ldr	r3, [pc, #320]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8005004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005006:	4b4f      	ldr	r3, [pc, #316]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8005008:	2180      	movs	r1, #128	; 0x80
 800500a:	0249      	lsls	r1, r1, #9
 800500c:	430a      	orrs	r2, r1
 800500e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005010:	f7fd f820 	bl	8002054 <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800501a:	f7fd f81b 	bl	8002054 <HAL_GetTick>
 800501e:	0002      	movs	r2, r0
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e0cd      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800502c:	4b45      	ldr	r3, [pc, #276]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 800502e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	025b      	lsls	r3, r3, #9
 8005034:	4013      	ands	r3, r2
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x552>
 8005038:	e01b      	b.n	8005072 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800503a:	4b42      	ldr	r3, [pc, #264]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 800503c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800503e:	4b41      	ldr	r3, [pc, #260]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8005040:	4943      	ldr	r1, [pc, #268]	; (8005150 <HAL_RCC_OscConfig+0x688>)
 8005042:	400a      	ands	r2, r1
 8005044:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005046:	f7fd f805 	bl	8002054 <HAL_GetTick>
 800504a:	0003      	movs	r3, r0
 800504c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005050:	f7fd f800 	bl	8002054 <HAL_GetTick>
 8005054:	0002      	movs	r2, r0
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e0b2      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005062:	4b38      	ldr	r3, [pc, #224]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8005064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	025b      	lsls	r3, r3, #9
 800506a:	4013      	ands	r3, r2
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x588>
 800506e:	e000      	b.n	8005072 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005070:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	d100      	bne.n	800507c <HAL_RCC_OscConfig+0x5b4>
 800507a:	e0a4      	b.n	80051c6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800507c:	4b31      	ldr	r3, [pc, #196]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	220c      	movs	r2, #12
 8005082:	4013      	ands	r3, r2
 8005084:	2b08      	cmp	r3, #8
 8005086:	d100      	bne.n	800508a <HAL_RCC_OscConfig+0x5c2>
 8005088:	e078      	b.n	800517c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b02      	cmp	r3, #2
 8005090:	d14c      	bne.n	800512c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005092:	4b2c      	ldr	r3, [pc, #176]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b2b      	ldr	r3, [pc, #172]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8005098:	492e      	ldr	r1, [pc, #184]	; (8005154 <HAL_RCC_OscConfig+0x68c>)
 800509a:	400a      	ands	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509e:	f7fc ffd9 	bl	8002054 <HAL_GetTick>
 80050a2:	0003      	movs	r3, r0
 80050a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fc ffd4 	bl	8002054 <HAL_GetTick>
 80050ac:	0002      	movs	r2, r0
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e086      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ba:	4b22      	ldr	r3, [pc, #136]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	2380      	movs	r3, #128	; 0x80
 80050c0:	049b      	lsls	r3, r3, #18
 80050c2:	4013      	ands	r3, r2
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c6:	4b1f      	ldr	r3, [pc, #124]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	220f      	movs	r2, #15
 80050cc:	4393      	bics	r3, r2
 80050ce:	0019      	movs	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d4:	4b1b      	ldr	r3, [pc, #108]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 80050d6:	430a      	orrs	r2, r1
 80050d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050da:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <HAL_RCC_OscConfig+0x690>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	0019      	movs	r1, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	431a      	orrs	r2, r3
 80050ee:	4b15      	ldr	r3, [pc, #84]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f4:	4b13      	ldr	r3, [pc, #76]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	4b12      	ldr	r3, [pc, #72]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 80050fa:	2180      	movs	r1, #128	; 0x80
 80050fc:	0449      	lsls	r1, r1, #17
 80050fe:	430a      	orrs	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005102:	f7fc ffa7 	bl	8002054 <HAL_GetTick>
 8005106:	0003      	movs	r3, r0
 8005108:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800510c:	f7fc ffa2 	bl	8002054 <HAL_GetTick>
 8005110:	0002      	movs	r2, r0
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e054      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	2380      	movs	r3, #128	; 0x80
 8005124:	049b      	lsls	r3, r3, #18
 8005126:	4013      	ands	r3, r2
 8005128:	d0f0      	beq.n	800510c <HAL_RCC_OscConfig+0x644>
 800512a:	e04c      	b.n	80051c6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <HAL_RCC_OscConfig+0x67c>)
 8005132:	4908      	ldr	r1, [pc, #32]	; (8005154 <HAL_RCC_OscConfig+0x68c>)
 8005134:	400a      	ands	r2, r1
 8005136:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fc ff8c 	bl	8002054 <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005140:	e015      	b.n	800516e <HAL_RCC_OscConfig+0x6a6>
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	40021000 	.word	0x40021000
 8005148:	00001388 	.word	0x00001388
 800514c:	efffffff 	.word	0xefffffff
 8005150:	fffeffff 	.word	0xfffeffff
 8005154:	feffffff 	.word	0xfeffffff
 8005158:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515c:	f7fc ff7a 	bl	8002054 <HAL_GetTick>
 8005160:	0002      	movs	r2, r0
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e02c      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800516e:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <HAL_RCC_OscConfig+0x708>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	049b      	lsls	r3, r3, #18
 8005176:	4013      	ands	r3, r2
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x694>
 800517a:	e024      	b.n	80051c6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e01f      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005188:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <HAL_RCC_OscConfig+0x708>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800518e:	4b10      	ldr	r3, [pc, #64]	; (80051d0 <HAL_RCC_OscConfig+0x708>)
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	23c0      	movs	r3, #192	; 0xc0
 8005198:	025b      	lsls	r3, r3, #9
 800519a:	401a      	ands	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d10e      	bne.n	80051c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	220f      	movs	r2, #15
 80051a8:	401a      	ands	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	23f0      	movs	r3, #240	; 0xf0
 80051b6:	039b      	lsls	r3, r3, #14
 80051b8:	401a      	ands	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80051be:	429a      	cmp	r2, r3
 80051c0:	d001      	beq.n	80051c6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	0018      	movs	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b008      	add	sp, #32
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40021000 	.word	0x40021000

080051d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0bf      	b.n	8005368 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051e8:	4b61      	ldr	r3, [pc, #388]	; (8005370 <HAL_RCC_ClockConfig+0x19c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2201      	movs	r2, #1
 80051ee:	4013      	ands	r3, r2
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d911      	bls.n	800521a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f6:	4b5e      	ldr	r3, [pc, #376]	; (8005370 <HAL_RCC_ClockConfig+0x19c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2201      	movs	r2, #1
 80051fc:	4393      	bics	r3, r2
 80051fe:	0019      	movs	r1, r3
 8005200:	4b5b      	ldr	r3, [pc, #364]	; (8005370 <HAL_RCC_ClockConfig+0x19c>)
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005208:	4b59      	ldr	r3, [pc, #356]	; (8005370 <HAL_RCC_ClockConfig+0x19c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2201      	movs	r2, #1
 800520e:	4013      	ands	r3, r2
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d001      	beq.n	800521a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e0a6      	b.n	8005368 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2202      	movs	r2, #2
 8005220:	4013      	ands	r3, r2
 8005222:	d015      	beq.n	8005250 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2204      	movs	r2, #4
 800522a:	4013      	ands	r3, r2
 800522c:	d006      	beq.n	800523c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800522e:	4b51      	ldr	r3, [pc, #324]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	4b50      	ldr	r3, [pc, #320]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 8005234:	21e0      	movs	r1, #224	; 0xe0
 8005236:	00c9      	lsls	r1, r1, #3
 8005238:	430a      	orrs	r2, r1
 800523a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523c:	4b4d      	ldr	r3, [pc, #308]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	22f0      	movs	r2, #240	; 0xf0
 8005242:	4393      	bics	r3, r2
 8005244:	0019      	movs	r1, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	4b4a      	ldr	r3, [pc, #296]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 800524c:	430a      	orrs	r2, r1
 800524e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2201      	movs	r2, #1
 8005256:	4013      	ands	r3, r2
 8005258:	d04c      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d107      	bne.n	8005272 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005262:	4b44      	ldr	r3, [pc, #272]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	2380      	movs	r3, #128	; 0x80
 8005268:	029b      	lsls	r3, r3, #10
 800526a:	4013      	ands	r3, r2
 800526c:	d120      	bne.n	80052b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e07a      	b.n	8005368 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d107      	bne.n	800528a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527a:	4b3e      	ldr	r3, [pc, #248]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	049b      	lsls	r3, r3, #18
 8005282:	4013      	ands	r3, r2
 8005284:	d114      	bne.n	80052b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e06e      	b.n	8005368 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d107      	bne.n	80052a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005292:	4b38      	ldr	r3, [pc, #224]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 8005294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	025b      	lsls	r3, r3, #9
 800529a:	4013      	ands	r3, r2
 800529c:	d108      	bne.n	80052b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e062      	b.n	8005368 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a2:	4b34      	ldr	r3, [pc, #208]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2202      	movs	r2, #2
 80052a8:	4013      	ands	r3, r2
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e05b      	b.n	8005368 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052b0:	4b30      	ldr	r3, [pc, #192]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2203      	movs	r2, #3
 80052b6:	4393      	bics	r3, r2
 80052b8:	0019      	movs	r1, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4b2d      	ldr	r3, [pc, #180]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 80052c0:	430a      	orrs	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052c4:	f7fc fec6 	bl	8002054 <HAL_GetTick>
 80052c8:	0003      	movs	r3, r0
 80052ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052cc:	e009      	b.n	80052e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ce:	f7fc fec1 	bl	8002054 <HAL_GetTick>
 80052d2:	0002      	movs	r2, r0
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	4a27      	ldr	r2, [pc, #156]	; (8005378 <HAL_RCC_ClockConfig+0x1a4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e042      	b.n	8005368 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e2:	4b24      	ldr	r3, [pc, #144]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	220c      	movs	r2, #12
 80052e8:	401a      	ands	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d1ec      	bne.n	80052ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052f4:	4b1e      	ldr	r3, [pc, #120]	; (8005370 <HAL_RCC_ClockConfig+0x19c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2201      	movs	r2, #1
 80052fa:	4013      	ands	r3, r2
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d211      	bcs.n	8005326 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005302:	4b1b      	ldr	r3, [pc, #108]	; (8005370 <HAL_RCC_ClockConfig+0x19c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	4393      	bics	r3, r2
 800530a:	0019      	movs	r1, r3
 800530c:	4b18      	ldr	r3, [pc, #96]	; (8005370 <HAL_RCC_ClockConfig+0x19c>)
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005314:	4b16      	ldr	r3, [pc, #88]	; (8005370 <HAL_RCC_ClockConfig+0x19c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2201      	movs	r2, #1
 800531a:	4013      	ands	r3, r2
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d001      	beq.n	8005326 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e020      	b.n	8005368 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2204      	movs	r2, #4
 800532c:	4013      	ands	r3, r2
 800532e:	d009      	beq.n	8005344 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005330:	4b10      	ldr	r3, [pc, #64]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a11      	ldr	r2, [pc, #68]	; (800537c <HAL_RCC_ClockConfig+0x1a8>)
 8005336:	4013      	ands	r3, r2
 8005338:	0019      	movs	r1, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005344:	f000 f820 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8005348:	0001      	movs	r1, r0
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <HAL_RCC_ClockConfig+0x1a0>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	091b      	lsrs	r3, r3, #4
 8005350:	220f      	movs	r2, #15
 8005352:	4013      	ands	r3, r2
 8005354:	4a0a      	ldr	r2, [pc, #40]	; (8005380 <HAL_RCC_ClockConfig+0x1ac>)
 8005356:	5cd3      	ldrb	r3, [r2, r3]
 8005358:	000a      	movs	r2, r1
 800535a:	40da      	lsrs	r2, r3
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <HAL_RCC_ClockConfig+0x1b0>)
 800535e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005360:	2003      	movs	r0, #3
 8005362:	f7fc fe31 	bl	8001fc8 <HAL_InitTick>
  
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	0018      	movs	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	b004      	add	sp, #16
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40022000 	.word	0x40022000
 8005374:	40021000 	.word	0x40021000
 8005378:	00001388 	.word	0x00001388
 800537c:	fffff8ff 	.word	0xfffff8ff
 8005380:	0800c958 	.word	0x0800c958
 8005384:	20000000 	.word	0x20000000

08005388 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005388:	b590      	push	{r4, r7, lr}
 800538a:	b08f      	sub	sp, #60	; 0x3c
 800538c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800538e:	2314      	movs	r3, #20
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	4a38      	ldr	r2, [pc, #224]	; (8005474 <HAL_RCC_GetSysClockFreq+0xec>)
 8005394:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005396:	c313      	stmia	r3!, {r0, r1, r4}
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800539c:	1d3b      	adds	r3, r7, #4
 800539e:	4a36      	ldr	r2, [pc, #216]	; (8005478 <HAL_RCC_GetSysClockFreq+0xf0>)
 80053a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80053a2:	c313      	stmia	r3!, {r0, r1, r4}
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ac:	2300      	movs	r3, #0
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b0:	2300      	movs	r3, #0
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
 80053b4:	2300      	movs	r3, #0
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80053bc:	4b2f      	ldr	r3, [pc, #188]	; (800547c <HAL_RCC_GetSysClockFreq+0xf4>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	220c      	movs	r2, #12
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b0c      	cmp	r3, #12
 80053ca:	d047      	beq.n	800545c <HAL_RCC_GetSysClockFreq+0xd4>
 80053cc:	d849      	bhi.n	8005462 <HAL_RCC_GetSysClockFreq+0xda>
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d002      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0x50>
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d003      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0x56>
 80053d6:	e044      	b.n	8005462 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053d8:	4b29      	ldr	r3, [pc, #164]	; (8005480 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053dc:	e044      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	0c9b      	lsrs	r3, r3, #18
 80053e2:	220f      	movs	r2, #15
 80053e4:	4013      	ands	r3, r2
 80053e6:	2214      	movs	r2, #20
 80053e8:	18ba      	adds	r2, r7, r2
 80053ea:	5cd3      	ldrb	r3, [r2, r3]
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80053ee:	4b23      	ldr	r3, [pc, #140]	; (800547c <HAL_RCC_GetSysClockFreq+0xf4>)
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	220f      	movs	r2, #15
 80053f4:	4013      	ands	r3, r2
 80053f6:	1d3a      	adds	r2, r7, #4
 80053f8:	5cd3      	ldrb	r3, [r2, r3]
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fe:	23c0      	movs	r3, #192	; 0xc0
 8005400:	025b      	lsls	r3, r3, #9
 8005402:	401a      	ands	r2, r3
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	025b      	lsls	r3, r3, #9
 8005408:	429a      	cmp	r2, r3
 800540a:	d109      	bne.n	8005420 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800540c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800540e:	481c      	ldr	r0, [pc, #112]	; (8005480 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005410:	f7fa fe8c 	bl	800012c <__udivsi3>
 8005414:	0003      	movs	r3, r0
 8005416:	001a      	movs	r2, r3
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	4353      	muls	r3, r2
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
 800541e:	e01a      	b.n	8005456 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005422:	23c0      	movs	r3, #192	; 0xc0
 8005424:	025b      	lsls	r3, r3, #9
 8005426:	401a      	ands	r2, r3
 8005428:	23c0      	movs	r3, #192	; 0xc0
 800542a:	025b      	lsls	r3, r3, #9
 800542c:	429a      	cmp	r2, r3
 800542e:	d109      	bne.n	8005444 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005432:	4814      	ldr	r0, [pc, #80]	; (8005484 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005434:	f7fa fe7a 	bl	800012c <__udivsi3>
 8005438:	0003      	movs	r3, r0
 800543a:	001a      	movs	r2, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	4353      	muls	r3, r2
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
 8005442:	e008      	b.n	8005456 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005446:	4810      	ldr	r0, [pc, #64]	; (8005488 <HAL_RCC_GetSysClockFreq+0x100>)
 8005448:	f7fa fe70 	bl	800012c <__udivsi3>
 800544c:	0003      	movs	r3, r0
 800544e:	001a      	movs	r2, r3
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	4353      	muls	r3, r2
 8005454:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005458:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800545a:	e005      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <HAL_RCC_GetSysClockFreq+0xfc>)
 800545e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005460:	e002      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCC_GetSysClockFreq+0x100>)
 8005464:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005466:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800546a:	0018      	movs	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	b00f      	add	sp, #60	; 0x3c
 8005470:	bd90      	pop	{r4, r7, pc}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	0800c8d8 	.word	0x0800c8d8
 8005478:	0800c8e8 	.word	0x0800c8e8
 800547c:	40021000 	.word	0x40021000
 8005480:	00f42400 	.word	0x00f42400
 8005484:	02dc6c00 	.word	0x02dc6c00
 8005488:	007a1200 	.word	0x007a1200

0800548c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <HAL_RCC_GetHCLKFreq+0x10>)
 8005492:	681b      	ldr	r3, [r3, #0]
}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	20000000 	.word	0x20000000

080054a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80054a4:	f7ff fff2 	bl	800548c <HAL_RCC_GetHCLKFreq>
 80054a8:	0001      	movs	r1, r0
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	2207      	movs	r2, #7
 80054b2:	4013      	ands	r3, r2
 80054b4:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054b6:	5cd3      	ldrb	r3, [r2, r3]
 80054b8:	40d9      	lsrs	r1, r3
 80054ba:	000b      	movs	r3, r1
}    
 80054bc:	0018      	movs	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	40021000 	.word	0x40021000
 80054c8:	0800c968 	.word	0x0800c968

080054cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	2380      	movs	r3, #128	; 0x80
 80054e2:	025b      	lsls	r3, r3, #9
 80054e4:	4013      	ands	r3, r2
 80054e6:	d100      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80054e8:	e08e      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80054ea:	2017      	movs	r0, #23
 80054ec:	183b      	adds	r3, r7, r0
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f2:	4b6e      	ldr	r3, [pc, #440]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054f4:	69da      	ldr	r2, [r3, #28]
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	055b      	lsls	r3, r3, #21
 80054fa:	4013      	ands	r3, r2
 80054fc:	d110      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054fe:	4b6b      	ldr	r3, [pc, #428]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005500:	69da      	ldr	r2, [r3, #28]
 8005502:	4b6a      	ldr	r3, [pc, #424]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005504:	2180      	movs	r1, #128	; 0x80
 8005506:	0549      	lsls	r1, r1, #21
 8005508:	430a      	orrs	r2, r1
 800550a:	61da      	str	r2, [r3, #28]
 800550c:	4b67      	ldr	r3, [pc, #412]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	055b      	lsls	r3, r3, #21
 8005514:	4013      	ands	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551a:	183b      	adds	r3, r7, r0
 800551c:	2201      	movs	r2, #1
 800551e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005520:	4b63      	ldr	r3, [pc, #396]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	4013      	ands	r3, r2
 800552a:	d11a      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800552c:	4b60      	ldr	r3, [pc, #384]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b5f      	ldr	r3, [pc, #380]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005532:	2180      	movs	r1, #128	; 0x80
 8005534:	0049      	lsls	r1, r1, #1
 8005536:	430a      	orrs	r2, r1
 8005538:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553a:	f7fc fd8b 	bl	8002054 <HAL_GetTick>
 800553e:	0003      	movs	r3, r0
 8005540:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005542:	e008      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005544:	f7fc fd86 	bl	8002054 <HAL_GetTick>
 8005548:	0002      	movs	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b64      	cmp	r3, #100	; 0x64
 8005550:	d901      	bls.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e0a6      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005556:	4b56      	ldr	r3, [pc, #344]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	4013      	ands	r3, r2
 8005560:	d0f0      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005562:	4b52      	ldr	r3, [pc, #328]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005564:	6a1a      	ldr	r2, [r3, #32]
 8005566:	23c0      	movs	r3, #192	; 0xc0
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4013      	ands	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d034      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	23c0      	movs	r3, #192	; 0xc0
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4013      	ands	r3, r2
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	429a      	cmp	r2, r3
 8005582:	d02c      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005584:	4b49      	ldr	r3, [pc, #292]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	4a4a      	ldr	r2, [pc, #296]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800558a:	4013      	ands	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800558e:	4b47      	ldr	r3, [pc, #284]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005590:	6a1a      	ldr	r2, [r3, #32]
 8005592:	4b46      	ldr	r3, [pc, #280]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005594:	2180      	movs	r1, #128	; 0x80
 8005596:	0249      	lsls	r1, r1, #9
 8005598:	430a      	orrs	r2, r1
 800559a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800559c:	4b43      	ldr	r3, [pc, #268]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800559e:	6a1a      	ldr	r2, [r3, #32]
 80055a0:	4b42      	ldr	r3, [pc, #264]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055a2:	4945      	ldr	r1, [pc, #276]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80055a4:	400a      	ands	r2, r1
 80055a6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055a8:	4b40      	ldr	r3, [pc, #256]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	4013      	ands	r3, r2
 80055b4:	d013      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fc fd4d 	bl	8002054 <HAL_GetTick>
 80055ba:	0003      	movs	r3, r0
 80055bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055be:	e009      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c0:	f7fc fd48 	bl	8002054 <HAL_GetTick>
 80055c4:	0002      	movs	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	4a3c      	ldr	r2, [pc, #240]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e067      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d4:	4b35      	ldr	r3, [pc, #212]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	2202      	movs	r2, #2
 80055da:	4013      	ands	r3, r2
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055de:	4b33      	ldr	r3, [pc, #204]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	4a34      	ldr	r2, [pc, #208]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	0019      	movs	r1, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	4b2f      	ldr	r3, [pc, #188]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055ee:	430a      	orrs	r2, r1
 80055f0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055f2:	2317      	movs	r3, #23
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d105      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055fc:	4b2b      	ldr	r3, [pc, #172]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	4b2a      	ldr	r3, [pc, #168]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005602:	492f      	ldr	r1, [pc, #188]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005604:	400a      	ands	r2, r1
 8005606:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2201      	movs	r2, #1
 800560e:	4013      	ands	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005612:	4b26      	ldr	r3, [pc, #152]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	2203      	movs	r2, #3
 8005618:	4393      	bics	r3, r2
 800561a:	0019      	movs	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	4b22      	ldr	r3, [pc, #136]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005622:	430a      	orrs	r2, r1
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2202      	movs	r2, #2
 800562c:	4013      	ands	r3, r2
 800562e:	d009      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005630:	4b1e      	ldr	r3, [pc, #120]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	4a23      	ldr	r2, [pc, #140]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005636:	4013      	ands	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	4b1b      	ldr	r3, [pc, #108]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005640:	430a      	orrs	r2, r1
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2220      	movs	r2, #32
 800564a:	4013      	ands	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800564e:	4b17      	ldr	r3, [pc, #92]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	2210      	movs	r2, #16
 8005654:	4393      	bics	r3, r2
 8005656:	0019      	movs	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	4b13      	ldr	r3, [pc, #76]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800565e:	430a      	orrs	r2, r1
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	029b      	lsls	r3, r3, #10
 800566a:	4013      	ands	r3, r2
 800566c:	d009      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800566e:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	2280      	movs	r2, #128	; 0x80
 8005674:	4393      	bics	r3, r2
 8005676:	0019      	movs	r1, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800567e:	430a      	orrs	r2, r1
 8005680:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	2380      	movs	r3, #128	; 0x80
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	4013      	ands	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800568e:	4b07      	ldr	r3, [pc, #28]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	2240      	movs	r2, #64	; 0x40
 8005694:	4393      	bics	r3, r2
 8005696:	0019      	movs	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800569e:	430a      	orrs	r2, r1
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	0018      	movs	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b006      	add	sp, #24
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40021000 	.word	0x40021000
 80056b0:	40007000 	.word	0x40007000
 80056b4:	fffffcff 	.word	0xfffffcff
 80056b8:	fffeffff 	.word	0xfffeffff
 80056bc:	00001388 	.word	0x00001388
 80056c0:	efffffff 	.word	0xefffffff
 80056c4:	fffcffff 	.word	0xfffcffff

080056c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e0a8      	b.n	800582c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	2382      	movs	r3, #130	; 0x82
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d009      	beq.n	8005702 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	61da      	str	r2, [r3, #28]
 80056f4:	e005      	b.n	8005702 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	225d      	movs	r2, #93	; 0x5d
 800570c:	5c9b      	ldrb	r3, [r3, r2]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d107      	bne.n	8005724 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	225c      	movs	r2, #92	; 0x5c
 8005718:	2100      	movs	r1, #0
 800571a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	0018      	movs	r0, r3
 8005720:	f7fc f8c2 	bl	80018a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	225d      	movs	r2, #93	; 0x5d
 8005728:	2102      	movs	r1, #2
 800572a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2140      	movs	r1, #64	; 0x40
 8005738:	438a      	bics	r2, r1
 800573a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	23e0      	movs	r3, #224	; 0xe0
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	429a      	cmp	r2, r3
 8005746:	d902      	bls.n	800574e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	e002      	b.n	8005754 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800574e:	2380      	movs	r3, #128	; 0x80
 8005750:	015b      	lsls	r3, r3, #5
 8005752:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	23f0      	movs	r3, #240	; 0xf0
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	429a      	cmp	r2, r3
 800575e:	d008      	beq.n	8005772 <HAL_SPI_Init+0xaa>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	23e0      	movs	r3, #224	; 0xe0
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	429a      	cmp	r2, r3
 800576a:	d002      	beq.n	8005772 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	2382      	movs	r3, #130	; 0x82
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	401a      	ands	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	2384      	movs	r3, #132	; 0x84
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	400b      	ands	r3, r1
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2102      	movs	r1, #2
 800578e:	400b      	ands	r3, r1
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	2101      	movs	r1, #1
 8005798:	400b      	ands	r3, r1
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6999      	ldr	r1, [r3, #24]
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	400b      	ands	r3, r1
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	2138      	movs	r1, #56	; 0x38
 80057ae:	400b      	ands	r3, r1
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	2180      	movs	r1, #128	; 0x80
 80057b8:	400b      	ands	r3, r1
 80057ba:	431a      	orrs	r2, r3
 80057bc:	0011      	movs	r1, r2
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	019b      	lsls	r3, r3, #6
 80057c6:	401a      	ands	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	0c1b      	lsrs	r3, r3, #16
 80057d6:	2204      	movs	r2, #4
 80057d8:	401a      	ands	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	2110      	movs	r1, #16
 80057e0:	400b      	ands	r3, r1
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e8:	2108      	movs	r1, #8
 80057ea:	400b      	ands	r3, r1
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68d9      	ldr	r1, [r3, #12]
 80057f2:	23f0      	movs	r3, #240	; 0xf0
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	400b      	ands	r3, r1
 80057f8:	431a      	orrs	r2, r3
 80057fa:	0011      	movs	r1, r2
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	2380      	movs	r3, #128	; 0x80
 8005800:	015b      	lsls	r3, r3, #5
 8005802:	401a      	ands	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4907      	ldr	r1, [pc, #28]	; (8005834 <HAL_SPI_Init+0x16c>)
 8005818:	400a      	ands	r2, r1
 800581a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	225d      	movs	r2, #93	; 0x5d
 8005826:	2101      	movs	r1, #1
 8005828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	b004      	add	sp, #16
 8005832:	bd80      	pop	{r7, pc}
 8005834:	fffff7ff 	.word	0xfffff7ff

08005838 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	1dbb      	adds	r3, r7, #6
 8005846:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005848:	231f      	movs	r3, #31
 800584a:	18fb      	adds	r3, r7, r3
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	225c      	movs	r2, #92	; 0x5c
 8005854:	5c9b      	ldrb	r3, [r3, r2]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_SPI_Transmit+0x26>
 800585a:	2302      	movs	r3, #2
 800585c:	e140      	b.n	8005ae0 <HAL_SPI_Transmit+0x2a8>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	225c      	movs	r2, #92	; 0x5c
 8005862:	2101      	movs	r1, #1
 8005864:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005866:	f7fc fbf5 	bl	8002054 <HAL_GetTick>
 800586a:	0003      	movs	r3, r0
 800586c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800586e:	2316      	movs	r3, #22
 8005870:	18fb      	adds	r3, r7, r3
 8005872:	1dba      	adds	r2, r7, #6
 8005874:	8812      	ldrh	r2, [r2, #0]
 8005876:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	225d      	movs	r2, #93	; 0x5d
 800587c:	5c9b      	ldrb	r3, [r3, r2]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	d004      	beq.n	800588e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005884:	231f      	movs	r3, #31
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	2202      	movs	r2, #2
 800588a:	701a      	strb	r2, [r3, #0]
    goto error;
 800588c:	e11d      	b.n	8005aca <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_SPI_Transmit+0x64>
 8005894:	1dbb      	adds	r3, r7, #6
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800589c:	231f      	movs	r3, #31
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	2201      	movs	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80058a4:	e111      	b.n	8005aca <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	225d      	movs	r2, #93	; 0x5d
 80058aa:	2103      	movs	r1, #3
 80058ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1dba      	adds	r2, r7, #6
 80058be:	8812      	ldrh	r2, [r2, #0]
 80058c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1dba      	adds	r2, r7, #6
 80058c6:	8812      	ldrh	r2, [r2, #0]
 80058c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2244      	movs	r2, #68	; 0x44
 80058d4:	2100      	movs	r1, #0
 80058d6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2246      	movs	r2, #70	; 0x46
 80058dc:	2100      	movs	r1, #0
 80058de:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d110      	bne.n	800591a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2140      	movs	r1, #64	; 0x40
 8005904:	438a      	bics	r2, r1
 8005906:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2180      	movs	r1, #128	; 0x80
 8005914:	01c9      	lsls	r1, r1, #7
 8005916:	430a      	orrs	r2, r1
 8005918:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2240      	movs	r2, #64	; 0x40
 8005922:	4013      	ands	r3, r2
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	d007      	beq.n	8005938 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2140      	movs	r1, #64	; 0x40
 8005934:	430a      	orrs	r2, r1
 8005936:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	23e0      	movs	r3, #224	; 0xe0
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	429a      	cmp	r2, r3
 8005942:	d94e      	bls.n	80059e2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <HAL_SPI_Transmit+0x11e>
 800594c:	2316      	movs	r3, #22
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d13f      	bne.n	80059d6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	881a      	ldrh	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	1c9a      	adds	r2, r3, #2
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800597a:	e02c      	b.n	80059d6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2202      	movs	r2, #2
 8005984:	4013      	ands	r3, r2
 8005986:	2b02      	cmp	r3, #2
 8005988:	d112      	bne.n	80059b0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	881a      	ldrh	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	1c9a      	adds	r2, r3, #2
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059ae:	e012      	b.n	80059d6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b0:	f7fc fb50 	bl	8002054 <HAL_GetTick>
 80059b4:	0002      	movs	r2, r0
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d802      	bhi.n	80059c6 <HAL_SPI_Transmit+0x18e>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	d102      	bne.n	80059cc <HAL_SPI_Transmit+0x194>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80059cc:	231f      	movs	r3, #31
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	2203      	movs	r2, #3
 80059d2:	701a      	strb	r2, [r3, #0]
          goto error;
 80059d4:	e079      	b.n	8005aca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1cd      	bne.n	800597c <HAL_SPI_Transmit+0x144>
 80059e0:	e04f      	b.n	8005a82 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d004      	beq.n	80059f4 <HAL_SPI_Transmit+0x1bc>
 80059ea:	2316      	movs	r3, #22
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d141      	bne.n	8005a78 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005a1a:	e02d      	b.n	8005a78 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	2202      	movs	r2, #2
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d113      	bne.n	8005a52 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	7812      	ldrb	r2, [r2, #0]
 8005a36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a50:	e012      	b.n	8005a78 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a52:	f7fc faff 	bl	8002054 <HAL_GetTick>
 8005a56:	0002      	movs	r2, r0
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d802      	bhi.n	8005a68 <HAL_SPI_Transmit+0x230>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	3301      	adds	r3, #1
 8005a66:	d102      	bne.n	8005a6e <HAL_SPI_Transmit+0x236>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005a6e:	231f      	movs	r3, #31
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	2203      	movs	r2, #3
 8005a74:	701a      	strb	r2, [r3, #0]
          goto error;
 8005a76:	e028      	b.n	8005aca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1cc      	bne.n	8005a1c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f000 fb2f 	bl	80060ec <SPI_EndRxTxTransaction>
 8005a8e:	1e03      	subs	r3, r0, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005abe:	231f      	movs	r3, #31
 8005ac0:	18fb      	adds	r3, r7, r3
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	e000      	b.n	8005aca <HAL_SPI_Transmit+0x292>
  }

error:
 8005ac8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	225d      	movs	r2, #93	; 0x5d
 8005ace:	2101      	movs	r1, #1
 8005ad0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	225c      	movs	r2, #92	; 0x5c
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005ada:	231f      	movs	r3, #31
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	781b      	ldrb	r3, [r3, #0]
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b008      	add	sp, #32
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	001a      	movs	r2, r3
 8005af6:	1cbb      	adds	r3, r7, #2
 8005af8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005afa:	2301      	movs	r3, #1
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005afe:	2323      	movs	r3, #35	; 0x23
 8005b00:	18fb      	adds	r3, r7, r3
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	225c      	movs	r2, #92	; 0x5c
 8005b0a:	5c9b      	ldrb	r3, [r3, r2]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x2c>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e1b5      	b.n	8005e80 <HAL_SPI_TransmitReceive+0x398>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	225c      	movs	r2, #92	; 0x5c
 8005b18:	2101      	movs	r1, #1
 8005b1a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b1c:	f7fc fa9a 	bl	8002054 <HAL_GetTick>
 8005b20:	0003      	movs	r3, r0
 8005b22:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b24:	201b      	movs	r0, #27
 8005b26:	183b      	adds	r3, r7, r0
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	215d      	movs	r1, #93	; 0x5d
 8005b2c:	5c52      	ldrb	r2, [r2, r1]
 8005b2e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005b36:	2312      	movs	r3, #18
 8005b38:	18fb      	adds	r3, r7, r3
 8005b3a:	1cba      	adds	r2, r7, #2
 8005b3c:	8812      	ldrh	r2, [r2, #0]
 8005b3e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b40:	183b      	adds	r3, r7, r0
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d011      	beq.n	8005b6c <HAL_SPI_TransmitReceive+0x84>
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	2382      	movs	r3, #130	; 0x82
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d107      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <HAL_SPI_TransmitReceive+0x7a>
 8005b5a:	183b      	adds	r3, r7, r0
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d004      	beq.n	8005b6c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005b62:	2323      	movs	r3, #35	; 0x23
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	2202      	movs	r2, #2
 8005b68:	701a      	strb	r2, [r3, #0]
    goto error;
 8005b6a:	e17e      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <HAL_SPI_TransmitReceive+0x98>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_SPI_TransmitReceive+0x98>
 8005b78:	1cbb      	adds	r3, r7, #2
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005b80:	2323      	movs	r3, #35	; 0x23
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
    goto error;
 8005b88:	e16f      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	225d      	movs	r2, #93	; 0x5d
 8005b8e:	5c9b      	ldrb	r3, [r3, r2]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d003      	beq.n	8005b9e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	225d      	movs	r2, #93	; 0x5d
 8005b9a:	2105      	movs	r1, #5
 8005b9c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1cba      	adds	r2, r7, #2
 8005bae:	2146      	movs	r1, #70	; 0x46
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1cba      	adds	r2, r7, #2
 8005bb8:	2144      	movs	r1, #68	; 0x44
 8005bba:	8812      	ldrh	r2, [r2, #0]
 8005bbc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1cba      	adds	r2, r7, #2
 8005bc8:	8812      	ldrh	r2, [r2, #0]
 8005bca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1cba      	adds	r2, r7, #2
 8005bd0:	8812      	ldrh	r2, [r2, #0]
 8005bd2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	23e0      	movs	r3, #224	; 0xe0
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d908      	bls.n	8005bfe <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	49a4      	ldr	r1, [pc, #656]	; (8005e88 <HAL_SPI_TransmitReceive+0x3a0>)
 8005bf8:	400a      	ands	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	e008      	b.n	8005c10 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2180      	movs	r1, #128	; 0x80
 8005c0a:	0149      	lsls	r1, r1, #5
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2240      	movs	r2, #64	; 0x40
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	d007      	beq.n	8005c2e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2140      	movs	r1, #64	; 0x40
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	23e0      	movs	r3, #224	; 0xe0
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d800      	bhi.n	8005c3c <HAL_SPI_TransmitReceive+0x154>
 8005c3a:	e07f      	b.n	8005d3c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_SPI_TransmitReceive+0x168>
 8005c44:	2312      	movs	r3, #18
 8005c46:	18fb      	adds	r3, r7, r3
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d000      	beq.n	8005c50 <HAL_SPI_TransmitReceive+0x168>
 8005c4e:	e069      	b.n	8005d24 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	881a      	ldrh	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	1c9a      	adds	r2, r3, #2
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c74:	e056      	b.n	8005d24 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d11b      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x1d4>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d016      	beq.n	8005cbc <HAL_SPI_TransmitReceive+0x1d4>
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d113      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	881a      	ldrh	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	1c9a      	adds	r2, r3, #2
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d11c      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x21c>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2246      	movs	r2, #70	; 0x46
 8005cce:	5a9b      	ldrh	r3, [r3, r2]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	b292      	uxth	r2, r2
 8005ce2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	1c9a      	adds	r2, r3, #2
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2246      	movs	r2, #70	; 0x46
 8005cf2:	5a9b      	ldrh	r3, [r3, r2]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b299      	uxth	r1, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2246      	movs	r2, #70	; 0x46
 8005cfe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d00:	2301      	movs	r3, #1
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d04:	f7fc f9a6 	bl	8002054 <HAL_GetTick>
 8005d08:	0002      	movs	r2, r0
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d807      	bhi.n	8005d24 <HAL_SPI_TransmitReceive+0x23c>
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	3301      	adds	r3, #1
 8005d18:	d004      	beq.n	8005d24 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005d1a:	2323      	movs	r3, #35	; 0x23
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	2203      	movs	r2, #3
 8005d20:	701a      	strb	r2, [r3, #0]
        goto error;
 8005d22:	e0a2      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1a3      	bne.n	8005c76 <HAL_SPI_TransmitReceive+0x18e>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2246      	movs	r2, #70	; 0x46
 8005d32:	5a9b      	ldrh	r3, [r3, r2]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d19d      	bne.n	8005c76 <HAL_SPI_TransmitReceive+0x18e>
 8005d3a:	e085      	b.n	8005e48 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_SPI_TransmitReceive+0x268>
 8005d44:	2312      	movs	r3, #18
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d000      	beq.n	8005d50 <HAL_SPI_TransmitReceive+0x268>
 8005d4e:	e070      	b.n	8005e32 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	7812      	ldrb	r2, [r2, #0]
 8005d5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d76:	e05c      	b.n	8005e32 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d11c      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x2d8>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d017      	beq.n	8005dc0 <HAL_SPI_TransmitReceive+0x2d8>
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d114      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d11e      	bne.n	8005e0c <HAL_SPI_TransmitReceive+0x324>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2246      	movs	r2, #70	; 0x46
 8005dd2:	5a9b      	ldrh	r3, [r3, r2]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d018      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	330c      	adds	r3, #12
 8005de0:	001a      	movs	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	7812      	ldrb	r2, [r2, #0]
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2246      	movs	r2, #70	; 0x46
 8005dfa:	5a9b      	ldrh	r3, [r3, r2]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b299      	uxth	r1, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2246      	movs	r2, #70	; 0x46
 8005e06:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e0c:	f7fc f922 	bl	8002054 <HAL_GetTick>
 8005e10:	0002      	movs	r2, r0
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d802      	bhi.n	8005e22 <HAL_SPI_TransmitReceive+0x33a>
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	3301      	adds	r3, #1
 8005e20:	d102      	bne.n	8005e28 <HAL_SPI_TransmitReceive+0x340>
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005e28:	2323      	movs	r3, #35	; 0x23
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	701a      	strb	r2, [r3, #0]
        goto error;
 8005e30:	e01b      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d19d      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x290>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2246      	movs	r2, #70	; 0x46
 8005e40:	5a9b      	ldrh	r3, [r3, r2]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d197      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f000 f94c 	bl	80060ec <SPI_EndRxTxTransaction>
 8005e54:	1e03      	subs	r3, r0, #0
 8005e56:	d007      	beq.n	8005e68 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005e58:	2323      	movs	r3, #35	; 0x23
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	661a      	str	r2, [r3, #96]	; 0x60
 8005e66:	e000      	b.n	8005e6a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005e68:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	225d      	movs	r2, #93	; 0x5d
 8005e6e:	2101      	movs	r1, #1
 8005e70:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	225c      	movs	r2, #92	; 0x5c
 8005e76:	2100      	movs	r1, #0
 8005e78:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005e7a:	2323      	movs	r3, #35	; 0x23
 8005e7c:	18fb      	adds	r3, r7, r3
 8005e7e:	781b      	ldrb	r3, [r3, #0]
}
 8005e80:	0018      	movs	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b00a      	add	sp, #40	; 0x28
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	ffffefff 	.word	0xffffefff

08005e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	1dfb      	adds	r3, r7, #7
 8005e9a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e9c:	f7fc f8da 	bl	8002054 <HAL_GetTick>
 8005ea0:	0002      	movs	r2, r0
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	18d3      	adds	r3, r2, r3
 8005eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005eac:	f7fc f8d2 	bl	8002054 <HAL_GetTick>
 8005eb0:	0003      	movs	r3, r0
 8005eb2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005eb4:	4b3a      	ldr	r3, [pc, #232]	; (8005fa0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	015b      	lsls	r3, r3, #5
 8005eba:	0d1b      	lsrs	r3, r3, #20
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	4353      	muls	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ec2:	e058      	b.n	8005f76 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	d055      	beq.n	8005f76 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eca:	f7fc f8c3 	bl	8002054 <HAL_GetTick>
 8005ece:	0002      	movs	r2, r0
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d902      	bls.n	8005ee0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d142      	bne.n	8005f66 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	21e0      	movs	r1, #224	; 0xe0
 8005eec:	438a      	bics	r2, r1
 8005eee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	2382      	movs	r3, #130	; 0x82
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d113      	bne.n	8005f24 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d005      	beq.n	8005f14 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d107      	bne.n	8005f24 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2140      	movs	r1, #64	; 0x40
 8005f20:	438a      	bics	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f28:	2380      	movs	r3, #128	; 0x80
 8005f2a:	019b      	lsls	r3, r3, #6
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d110      	bne.n	8005f52 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	491a      	ldr	r1, [pc, #104]	; (8005fa4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005f3c:	400a      	ands	r2, r1
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2180      	movs	r1, #128	; 0x80
 8005f4c:	0189      	lsls	r1, r1, #6
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	225d      	movs	r2, #93	; 0x5d
 8005f56:	2101      	movs	r1, #1
 8005f58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	225c      	movs	r2, #92	; 0x5c
 8005f5e:	2100      	movs	r1, #0
 8005f60:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e017      	b.n	8005f96 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	425a      	negs	r2, r3
 8005f86:	4153      	adcs	r3, r2
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	001a      	movs	r2, r3
 8005f8c:	1dfb      	adds	r3, r7, #7
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d197      	bne.n	8005ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	0018      	movs	r0, r3
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	b008      	add	sp, #32
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	20000000 	.word	0x20000000
 8005fa4:	ffffdfff 	.word	0xffffdfff

08005fa8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005fb6:	2317      	movs	r3, #23
 8005fb8:	18fb      	adds	r3, r7, r3
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005fbe:	f7fc f849 	bl	8002054 <HAL_GetTick>
 8005fc2:	0002      	movs	r2, r0
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	18d3      	adds	r3, r2, r3
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005fce:	f7fc f841 	bl	8002054 <HAL_GetTick>
 8005fd2:	0003      	movs	r3, r0
 8005fd4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fde:	4b41      	ldr	r3, [pc, #260]	; (80060e4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	0013      	movs	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	189b      	adds	r3, r3, r2
 8005fe8:	00da      	lsls	r2, r3, #3
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	0d1b      	lsrs	r3, r3, #20
 8005fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff0:	4353      	muls	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ff4:	e068      	b.n	80060c8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	23c0      	movs	r3, #192	; 0xc0
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d10a      	bne.n	8006016 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d107      	bne.n	8006016 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b2da      	uxtb	r2, r3
 800600c:	2117      	movs	r1, #23
 800600e:	187b      	adds	r3, r7, r1
 8006010:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006012:	187b      	adds	r3, r7, r1
 8006014:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	3301      	adds	r3, #1
 800601a:	d055      	beq.n	80060c8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800601c:	f7fc f81a 	bl	8002054 <HAL_GetTick>
 8006020:	0002      	movs	r2, r0
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006028:	429a      	cmp	r2, r3
 800602a:	d902      	bls.n	8006032 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	d142      	bne.n	80060b8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	21e0      	movs	r1, #224	; 0xe0
 800603e:	438a      	bics	r2, r1
 8006040:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	2382      	movs	r3, #130	; 0x82
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	429a      	cmp	r2, r3
 800604c:	d113      	bne.n	8006076 <SPI_WaitFifoStateUntilTimeout+0xce>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	2380      	movs	r3, #128	; 0x80
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	429a      	cmp	r2, r3
 8006058:	d005      	beq.n	8006066 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	429a      	cmp	r2, r3
 8006064:	d107      	bne.n	8006076 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2140      	movs	r1, #64	; 0x40
 8006072:	438a      	bics	r2, r1
 8006074:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800607a:	2380      	movs	r3, #128	; 0x80
 800607c:	019b      	lsls	r3, r3, #6
 800607e:	429a      	cmp	r2, r3
 8006080:	d110      	bne.n	80060a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4916      	ldr	r1, [pc, #88]	; (80060e8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800608e:	400a      	ands	r2, r1
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2180      	movs	r1, #128	; 0x80
 800609e:	0189      	lsls	r1, r1, #6
 80060a0:	430a      	orrs	r2, r1
 80060a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	225d      	movs	r2, #93	; 0x5d
 80060a8:	2101      	movs	r1, #1
 80060aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	225c      	movs	r2, #92	; 0x5c
 80060b0:	2100      	movs	r1, #0
 80060b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e010      	b.n	80060da <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	4013      	ands	r3, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d18e      	bne.n	8005ff6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	0018      	movs	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	b00a      	add	sp, #40	; 0x28
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	46c0      	nop			; (mov r8, r8)
 80060e4:	20000000 	.word	0x20000000
 80060e8:	ffffdfff 	.word	0xffffdfff

080060ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	23c0      	movs	r3, #192	; 0xc0
 80060fc:	0159      	lsls	r1, r3, #5
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	0013      	movs	r3, r2
 8006106:	2200      	movs	r2, #0
 8006108:	f7ff ff4e 	bl	8005fa8 <SPI_WaitFifoStateUntilTimeout>
 800610c:	1e03      	subs	r3, r0, #0
 800610e:	d007      	beq.n	8006120 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006114:	2220      	movs	r2, #32
 8006116:	431a      	orrs	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e027      	b.n	8006170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	0013      	movs	r3, r2
 800612a:	2200      	movs	r2, #0
 800612c:	2180      	movs	r1, #128	; 0x80
 800612e:	f7ff fead 	bl	8005e8c <SPI_WaitFlagStateUntilTimeout>
 8006132:	1e03      	subs	r3, r0, #0
 8006134:	d007      	beq.n	8006146 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613a:	2220      	movs	r2, #32
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e014      	b.n	8006170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	23c0      	movs	r3, #192	; 0xc0
 800614a:	00d9      	lsls	r1, r3, #3
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	0013      	movs	r3, r2
 8006154:	2200      	movs	r2, #0
 8006156:	f7ff ff27 	bl	8005fa8 <SPI_WaitFifoStateUntilTimeout>
 800615a:	1e03      	subs	r3, r0, #0
 800615c:	d007      	beq.n	800616e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006162:	2220      	movs	r2, #32
 8006164:	431a      	orrs	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e000      	b.n	8006170 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	0018      	movs	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	b004      	add	sp, #16
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e042      	b.n	8006210 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	223d      	movs	r2, #61	; 0x3d
 800618e:	5c9b      	ldrb	r3, [r3, r2]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d107      	bne.n	80061a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	223c      	movs	r2, #60	; 0x3c
 800619a:	2100      	movs	r1, #0
 800619c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	0018      	movs	r0, r3
 80061a2:	f7fb fbcf 	bl	8001944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	223d      	movs	r2, #61	; 0x3d
 80061aa:	2102      	movs	r1, #2
 80061ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3304      	adds	r3, #4
 80061b6:	0019      	movs	r1, r3
 80061b8:	0010      	movs	r0, r2
 80061ba:	f000 fa65 	bl	8006688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2246      	movs	r2, #70	; 0x46
 80061c2:	2101      	movs	r1, #1
 80061c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	223e      	movs	r2, #62	; 0x3e
 80061ca:	2101      	movs	r1, #1
 80061cc:	5499      	strb	r1, [r3, r2]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	223f      	movs	r2, #63	; 0x3f
 80061d2:	2101      	movs	r1, #1
 80061d4:	5499      	strb	r1, [r3, r2]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2240      	movs	r2, #64	; 0x40
 80061da:	2101      	movs	r1, #1
 80061dc:	5499      	strb	r1, [r3, r2]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2241      	movs	r2, #65	; 0x41
 80061e2:	2101      	movs	r1, #1
 80061e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2242      	movs	r2, #66	; 0x42
 80061ea:	2101      	movs	r1, #1
 80061ec:	5499      	strb	r1, [r3, r2]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2243      	movs	r2, #67	; 0x43
 80061f2:	2101      	movs	r1, #1
 80061f4:	5499      	strb	r1, [r3, r2]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2244      	movs	r2, #68	; 0x44
 80061fa:	2101      	movs	r1, #1
 80061fc:	5499      	strb	r1, [r3, r2]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2245      	movs	r2, #69	; 0x45
 8006202:	2101      	movs	r1, #1
 8006204:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	223d      	movs	r2, #61	; 0x3d
 800620a:	2101      	movs	r1, #1
 800620c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	0018      	movs	r0, r3
 8006212:	46bd      	mov	sp, r7
 8006214:	b002      	add	sp, #8
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	223d      	movs	r2, #61	; 0x3d
 8006224:	5c9b      	ldrb	r3, [r3, r2]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	d001      	beq.n	8006230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e03b      	b.n	80062a8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	223d      	movs	r2, #61	; 0x3d
 8006234:	2102      	movs	r1, #2
 8006236:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2101      	movs	r1, #1
 8006244:	430a      	orrs	r2, r1
 8006246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <HAL_TIM_Base_Start_IT+0x98>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00f      	beq.n	8006272 <HAL_TIM_Base_Start_IT+0x5a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	2380      	movs	r3, #128	; 0x80
 8006258:	05db      	lsls	r3, r3, #23
 800625a:	429a      	cmp	r2, r3
 800625c:	d009      	beq.n	8006272 <HAL_TIM_Base_Start_IT+0x5a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a14      	ldr	r2, [pc, #80]	; (80062b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d004      	beq.n	8006272 <HAL_TIM_Base_Start_IT+0x5a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a12      	ldr	r2, [pc, #72]	; (80062b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d111      	bne.n	8006296 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2207      	movs	r2, #7
 800627a:	4013      	ands	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b06      	cmp	r3, #6
 8006282:	d010      	beq.n	80062a6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2101      	movs	r1, #1
 8006290:	430a      	orrs	r2, r1
 8006292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006294:	e007      	b.n	80062a6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2101      	movs	r1, #1
 80062a2:	430a      	orrs	r2, r1
 80062a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	0018      	movs	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b004      	add	sp, #16
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40000400 	.word	0x40000400
 80062b8:	40014000 	.word	0x40014000

080062bc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e042      	b.n	8006354 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	223d      	movs	r2, #61	; 0x3d
 80062d2:	5c9b      	ldrb	r3, [r3, r2]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d107      	bne.n	80062ea <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	223c      	movs	r2, #60	; 0x3c
 80062de:	2100      	movs	r1, #0
 80062e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0018      	movs	r0, r3
 80062e6:	f000 f839 	bl	800635c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	223d      	movs	r2, #61	; 0x3d
 80062ee:	2102      	movs	r1, #2
 80062f0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3304      	adds	r3, #4
 80062fa:	0019      	movs	r1, r3
 80062fc:	0010      	movs	r0, r2
 80062fe:	f000 f9c3 	bl	8006688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2246      	movs	r2, #70	; 0x46
 8006306:	2101      	movs	r1, #1
 8006308:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	223e      	movs	r2, #62	; 0x3e
 800630e:	2101      	movs	r1, #1
 8006310:	5499      	strb	r1, [r3, r2]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	223f      	movs	r2, #63	; 0x3f
 8006316:	2101      	movs	r1, #1
 8006318:	5499      	strb	r1, [r3, r2]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2240      	movs	r2, #64	; 0x40
 800631e:	2101      	movs	r1, #1
 8006320:	5499      	strb	r1, [r3, r2]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2241      	movs	r2, #65	; 0x41
 8006326:	2101      	movs	r1, #1
 8006328:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2242      	movs	r2, #66	; 0x42
 800632e:	2101      	movs	r1, #1
 8006330:	5499      	strb	r1, [r3, r2]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2243      	movs	r2, #67	; 0x43
 8006336:	2101      	movs	r1, #1
 8006338:	5499      	strb	r1, [r3, r2]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2244      	movs	r2, #68	; 0x44
 800633e:	2101      	movs	r1, #1
 8006340:	5499      	strb	r1, [r3, r2]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2245      	movs	r2, #69	; 0x45
 8006346:	2101      	movs	r1, #1
 8006348:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	223d      	movs	r2, #61	; 0x3d
 800634e:	2101      	movs	r1, #1
 8006350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	0018      	movs	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	b002      	add	sp, #8
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006364:	46c0      	nop			; (mov r8, r8)
 8006366:	46bd      	mov	sp, r7
 8006368:	b002      	add	sp, #8
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2202      	movs	r2, #2
 800637c:	4013      	ands	r3, r2
 800637e:	2b02      	cmp	r3, #2
 8006380:	d124      	bne.n	80063cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2202      	movs	r2, #2
 800638a:	4013      	ands	r3, r2
 800638c:	2b02      	cmp	r3, #2
 800638e:	d11d      	bne.n	80063cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2203      	movs	r2, #3
 8006396:	4252      	negs	r2, r2
 8006398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	2203      	movs	r2, #3
 80063a8:	4013      	ands	r3, r2
 80063aa:	d004      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	0018      	movs	r0, r3
 80063b0:	f000 f952 	bl	8006658 <HAL_TIM_IC_CaptureCallback>
 80063b4:	e007      	b.n	80063c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	0018      	movs	r0, r3
 80063ba:	f000 f945 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	0018      	movs	r0, r3
 80063c2:	f000 f951 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2204      	movs	r2, #4
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d125      	bne.n	8006426 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2204      	movs	r2, #4
 80063e2:	4013      	ands	r3, r2
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d11e      	bne.n	8006426 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2205      	movs	r2, #5
 80063ee:	4252      	negs	r2, r2
 80063f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2202      	movs	r2, #2
 80063f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	23c0      	movs	r3, #192	; 0xc0
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4013      	ands	r3, r2
 8006404:	d004      	beq.n	8006410 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	0018      	movs	r0, r3
 800640a:	f000 f925 	bl	8006658 <HAL_TIM_IC_CaptureCallback>
 800640e:	e007      	b.n	8006420 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	0018      	movs	r0, r3
 8006414:	f000 f918 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	0018      	movs	r0, r3
 800641c:	f000 f924 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2208      	movs	r2, #8
 800642e:	4013      	ands	r3, r2
 8006430:	2b08      	cmp	r3, #8
 8006432:	d124      	bne.n	800647e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	2208      	movs	r2, #8
 800643c:	4013      	ands	r3, r2
 800643e:	2b08      	cmp	r3, #8
 8006440:	d11d      	bne.n	800647e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2209      	movs	r2, #9
 8006448:	4252      	negs	r2, r2
 800644a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2204      	movs	r2, #4
 8006450:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	2203      	movs	r2, #3
 800645a:	4013      	ands	r3, r2
 800645c:	d004      	beq.n	8006468 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	0018      	movs	r0, r3
 8006462:	f000 f8f9 	bl	8006658 <HAL_TIM_IC_CaptureCallback>
 8006466:	e007      	b.n	8006478 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	0018      	movs	r0, r3
 800646c:	f000 f8ec 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	0018      	movs	r0, r3
 8006474:	f000 f8f8 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2210      	movs	r2, #16
 8006486:	4013      	ands	r3, r2
 8006488:	2b10      	cmp	r3, #16
 800648a:	d125      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2210      	movs	r2, #16
 8006494:	4013      	ands	r3, r2
 8006496:	2b10      	cmp	r3, #16
 8006498:	d11e      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2211      	movs	r2, #17
 80064a0:	4252      	negs	r2, r2
 80064a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2208      	movs	r2, #8
 80064a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	23c0      	movs	r3, #192	; 0xc0
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4013      	ands	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	0018      	movs	r0, r3
 80064bc:	f000 f8cc 	bl	8006658 <HAL_TIM_IC_CaptureCallback>
 80064c0:	e007      	b.n	80064d2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	0018      	movs	r0, r3
 80064c6:	f000 f8bf 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	0018      	movs	r0, r3
 80064ce:	f000 f8cb 	bl	8006668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2201      	movs	r2, #1
 80064e0:	4013      	ands	r3, r2
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d10f      	bne.n	8006506 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d108      	bne.n	8006506 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2202      	movs	r2, #2
 80064fa:	4252      	negs	r2, r2
 80064fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	0018      	movs	r0, r3
 8006502:	f7fa f81d 	bl	8000540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2280      	movs	r2, #128	; 0x80
 800650e:	4013      	ands	r3, r2
 8006510:	2b80      	cmp	r3, #128	; 0x80
 8006512:	d10f      	bne.n	8006534 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	2280      	movs	r2, #128	; 0x80
 800651c:	4013      	ands	r3, r2
 800651e:	2b80      	cmp	r3, #128	; 0x80
 8006520:	d108      	bne.n	8006534 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2281      	movs	r2, #129	; 0x81
 8006528:	4252      	negs	r2, r2
 800652a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	0018      	movs	r0, r3
 8006530:	f000 fb2e 	bl	8006b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2240      	movs	r2, #64	; 0x40
 800653c:	4013      	ands	r3, r2
 800653e:	2b40      	cmp	r3, #64	; 0x40
 8006540:	d10f      	bne.n	8006562 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2240      	movs	r2, #64	; 0x40
 800654a:	4013      	ands	r3, r2
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d108      	bne.n	8006562 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2241      	movs	r2, #65	; 0x41
 8006556:	4252      	negs	r2, r2
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	0018      	movs	r0, r3
 800655e:	f000 f88b 	bl	8006678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	2220      	movs	r2, #32
 800656a:	4013      	ands	r3, r2
 800656c:	2b20      	cmp	r3, #32
 800656e:	d10f      	bne.n	8006590 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	4013      	ands	r3, r2
 800657a:	2b20      	cmp	r3, #32
 800657c:	d108      	bne.n	8006590 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2221      	movs	r2, #33	; 0x21
 8006584:	4252      	negs	r2, r2
 8006586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	0018      	movs	r0, r3
 800658c:	f000 faf8 	bl	8006b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006590:	46c0      	nop			; (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a4:	2317      	movs	r3, #23
 80065a6:	18fb      	adds	r3, r7, r3
 80065a8:	2200      	movs	r2, #0
 80065aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	223c      	movs	r2, #60	; 0x3c
 80065b0:	5c9b      	ldrb	r3, [r3, r2]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_TIM_OC_ConfigChannel+0x22>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e042      	b.n	8006640 <HAL_TIM_OC_ConfigChannel+0xa8>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	223c      	movs	r2, #60	; 0x3c
 80065be:	2101      	movs	r1, #1
 80065c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b0c      	cmp	r3, #12
 80065c6:	d027      	beq.n	8006618 <HAL_TIM_OC_ConfigChannel+0x80>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b0c      	cmp	r3, #12
 80065cc:	d82c      	bhi.n	8006628 <HAL_TIM_OC_ConfigChannel+0x90>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d019      	beq.n	8006608 <HAL_TIM_OC_ConfigChannel+0x70>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d826      	bhi.n	8006628 <HAL_TIM_OC_ConfigChannel+0x90>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_TIM_OC_ConfigChannel+0x50>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d008      	beq.n	80065f8 <HAL_TIM_OC_ConfigChannel+0x60>
 80065e6:	e01f      	b.n	8006628 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	0011      	movs	r1, r2
 80065f0:	0018      	movs	r0, r3
 80065f2:	f000 f8c9 	bl	8006788 <TIM_OC1_SetConfig>
      break;
 80065f6:	e01c      	b.n	8006632 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	0011      	movs	r1, r2
 8006600:	0018      	movs	r0, r3
 8006602:	f000 f949 	bl	8006898 <TIM_OC2_SetConfig>
      break;
 8006606:	e014      	b.n	8006632 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	0011      	movs	r1, r2
 8006610:	0018      	movs	r0, r3
 8006612:	f000 f9c5 	bl	80069a0 <TIM_OC3_SetConfig>
      break;
 8006616:	e00c      	b.n	8006632 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	0011      	movs	r1, r2
 8006620:	0018      	movs	r0, r3
 8006622:	f000 fa43 	bl	8006aac <TIM_OC4_SetConfig>
      break;
 8006626:	e004      	b.n	8006632 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006628:	2317      	movs	r3, #23
 800662a:	18fb      	adds	r3, r7, r3
 800662c:	2201      	movs	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]
      break;
 8006630:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	223c      	movs	r2, #60	; 0x3c
 8006636:	2100      	movs	r1, #0
 8006638:	5499      	strb	r1, [r3, r2]

  return status;
 800663a:	2317      	movs	r3, #23
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	781b      	ldrb	r3, [r3, #0]
}
 8006640:	0018      	movs	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	b006      	add	sp, #24
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006650:	46c0      	nop			; (mov r8, r8)
 8006652:	46bd      	mov	sp, r7
 8006654:	b002      	add	sp, #8
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006660:	46c0      	nop			; (mov r8, r8)
 8006662:	46bd      	mov	sp, r7
 8006664:	b002      	add	sp, #8
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	46bd      	mov	sp, r7
 8006674:	b002      	add	sp, #8
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006680:	46c0      	nop			; (mov r8, r8)
 8006682:	46bd      	mov	sp, r7
 8006684:	b002      	add	sp, #8
 8006686:	bd80      	pop	{r7, pc}

08006688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a34      	ldr	r2, [pc, #208]	; (800676c <TIM_Base_SetConfig+0xe4>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d008      	beq.n	80066b2 <TIM_Base_SetConfig+0x2a>
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	2380      	movs	r3, #128	; 0x80
 80066a4:	05db      	lsls	r3, r3, #23
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d003      	beq.n	80066b2 <TIM_Base_SetConfig+0x2a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a30      	ldr	r2, [pc, #192]	; (8006770 <TIM_Base_SetConfig+0xe8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d108      	bne.n	80066c4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2270      	movs	r2, #112	; 0x70
 80066b6:	4393      	bics	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a29      	ldr	r2, [pc, #164]	; (800676c <TIM_Base_SetConfig+0xe4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d018      	beq.n	80066fe <TIM_Base_SetConfig+0x76>
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	2380      	movs	r3, #128	; 0x80
 80066d0:	05db      	lsls	r3, r3, #23
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d013      	beq.n	80066fe <TIM_Base_SetConfig+0x76>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a25      	ldr	r2, [pc, #148]	; (8006770 <TIM_Base_SetConfig+0xe8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00f      	beq.n	80066fe <TIM_Base_SetConfig+0x76>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a24      	ldr	r2, [pc, #144]	; (8006774 <TIM_Base_SetConfig+0xec>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00b      	beq.n	80066fe <TIM_Base_SetConfig+0x76>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a23      	ldr	r2, [pc, #140]	; (8006778 <TIM_Base_SetConfig+0xf0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d007      	beq.n	80066fe <TIM_Base_SetConfig+0x76>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a22      	ldr	r2, [pc, #136]	; (800677c <TIM_Base_SetConfig+0xf4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d003      	beq.n	80066fe <TIM_Base_SetConfig+0x76>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a21      	ldr	r2, [pc, #132]	; (8006780 <TIM_Base_SetConfig+0xf8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d108      	bne.n	8006710 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4a20      	ldr	r2, [pc, #128]	; (8006784 <TIM_Base_SetConfig+0xfc>)
 8006702:	4013      	ands	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	4393      	bics	r3, r2
 8006716:	001a      	movs	r2, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a0c      	ldr	r2, [pc, #48]	; (800676c <TIM_Base_SetConfig+0xe4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_Base_SetConfig+0xce>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a0d      	ldr	r2, [pc, #52]	; (8006778 <TIM_Base_SetConfig+0xf0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d007      	beq.n	8006756 <TIM_Base_SetConfig+0xce>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a0c      	ldr	r2, [pc, #48]	; (800677c <TIM_Base_SetConfig+0xf4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_Base_SetConfig+0xce>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a0b      	ldr	r2, [pc, #44]	; (8006780 <TIM_Base_SetConfig+0xf8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d103      	bne.n	800675e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	615a      	str	r2, [r3, #20]
}
 8006764:	46c0      	nop			; (mov r8, r8)
 8006766:	46bd      	mov	sp, r7
 8006768:	b004      	add	sp, #16
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40000400 	.word	0x40000400
 8006774:	40002000 	.word	0x40002000
 8006778:	40014000 	.word	0x40014000
 800677c:	40014400 	.word	0x40014400
 8006780:	40014800 	.word	0x40014800
 8006784:	fffffcff 	.word	0xfffffcff

08006788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	2201      	movs	r2, #1
 8006798:	4393      	bics	r3, r2
 800679a:	001a      	movs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2270      	movs	r2, #112	; 0x70
 80067b6:	4393      	bics	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2203      	movs	r2, #3
 80067be:	4393      	bics	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2202      	movs	r2, #2
 80067d0:	4393      	bics	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a27      	ldr	r2, [pc, #156]	; (8006880 <TIM_OC1_SetConfig+0xf8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00b      	beq.n	80067fe <TIM_OC1_SetConfig+0x76>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a26      	ldr	r2, [pc, #152]	; (8006884 <TIM_OC1_SetConfig+0xfc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d007      	beq.n	80067fe <TIM_OC1_SetConfig+0x76>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a25      	ldr	r2, [pc, #148]	; (8006888 <TIM_OC1_SetConfig+0x100>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <TIM_OC1_SetConfig+0x76>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a24      	ldr	r2, [pc, #144]	; (800688c <TIM_OC1_SetConfig+0x104>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d10c      	bne.n	8006818 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2208      	movs	r2, #8
 8006802:	4393      	bics	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2204      	movs	r2, #4
 8006814:	4393      	bics	r3, r2
 8006816:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a19      	ldr	r2, [pc, #100]	; (8006880 <TIM_OC1_SetConfig+0xf8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00b      	beq.n	8006838 <TIM_OC1_SetConfig+0xb0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a18      	ldr	r2, [pc, #96]	; (8006884 <TIM_OC1_SetConfig+0xfc>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d007      	beq.n	8006838 <TIM_OC1_SetConfig+0xb0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a17      	ldr	r2, [pc, #92]	; (8006888 <TIM_OC1_SetConfig+0x100>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d003      	beq.n	8006838 <TIM_OC1_SetConfig+0xb0>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a16      	ldr	r2, [pc, #88]	; (800688c <TIM_OC1_SetConfig+0x104>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d111      	bne.n	800685c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	4a15      	ldr	r2, [pc, #84]	; (8006890 <TIM_OC1_SetConfig+0x108>)
 800683c:	4013      	ands	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4a14      	ldr	r2, [pc, #80]	; (8006894 <TIM_OC1_SetConfig+0x10c>)
 8006844:	4013      	ands	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	46bd      	mov	sp, r7
 800687a:	b006      	add	sp, #24
 800687c:	bd80      	pop	{r7, pc}
 800687e:	46c0      	nop			; (mov r8, r8)
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40014000 	.word	0x40014000
 8006888:	40014400 	.word	0x40014400
 800688c:	40014800 	.word	0x40014800
 8006890:	fffffeff 	.word	0xfffffeff
 8006894:	fffffdff 	.word	0xfffffdff

08006898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	2210      	movs	r2, #16
 80068a8:	4393      	bics	r3, r2
 80068aa:	001a      	movs	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4a2e      	ldr	r2, [pc, #184]	; (8006980 <TIM_OC2_SetConfig+0xe8>)
 80068c6:	4013      	ands	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <TIM_OC2_SetConfig+0xec>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2220      	movs	r2, #32
 80068e2:	4393      	bics	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a24      	ldr	r2, [pc, #144]	; (8006988 <TIM_OC2_SetConfig+0xf0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d10d      	bne.n	8006916 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2280      	movs	r2, #128	; 0x80
 80068fe:	4393      	bics	r3, r2
 8006900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2240      	movs	r2, #64	; 0x40
 8006912:	4393      	bics	r3, r2
 8006914:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a1b      	ldr	r2, [pc, #108]	; (8006988 <TIM_OC2_SetConfig+0xf0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00b      	beq.n	8006936 <TIM_OC2_SetConfig+0x9e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a1a      	ldr	r2, [pc, #104]	; (800698c <TIM_OC2_SetConfig+0xf4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d007      	beq.n	8006936 <TIM_OC2_SetConfig+0x9e>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a19      	ldr	r2, [pc, #100]	; (8006990 <TIM_OC2_SetConfig+0xf8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d003      	beq.n	8006936 <TIM_OC2_SetConfig+0x9e>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a18      	ldr	r2, [pc, #96]	; (8006994 <TIM_OC2_SetConfig+0xfc>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d113      	bne.n	800695e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4a17      	ldr	r2, [pc, #92]	; (8006998 <TIM_OC2_SetConfig+0x100>)
 800693a:	4013      	ands	r3, r2
 800693c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4a16      	ldr	r2, [pc, #88]	; (800699c <TIM_OC2_SetConfig+0x104>)
 8006942:	4013      	ands	r3, r2
 8006944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	621a      	str	r2, [r3, #32]
}
 8006978:	46c0      	nop			; (mov r8, r8)
 800697a:	46bd      	mov	sp, r7
 800697c:	b006      	add	sp, #24
 800697e:	bd80      	pop	{r7, pc}
 8006980:	ffff8fff 	.word	0xffff8fff
 8006984:	fffffcff 	.word	0xfffffcff
 8006988:	40012c00 	.word	0x40012c00
 800698c:	40014000 	.word	0x40014000
 8006990:	40014400 	.word	0x40014400
 8006994:	40014800 	.word	0x40014800
 8006998:	fffffbff 	.word	0xfffffbff
 800699c:	fffff7ff 	.word	0xfffff7ff

080069a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	4a35      	ldr	r2, [pc, #212]	; (8006a84 <TIM_OC3_SetConfig+0xe4>)
 80069b0:	401a      	ands	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2270      	movs	r2, #112	; 0x70
 80069cc:	4393      	bics	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2203      	movs	r2, #3
 80069d4:	4393      	bics	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	4a28      	ldr	r2, [pc, #160]	; (8006a88 <TIM_OC3_SetConfig+0xe8>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a24      	ldr	r2, [pc, #144]	; (8006a8c <TIM_OC3_SetConfig+0xec>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d10d      	bne.n	8006a1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	4a23      	ldr	r2, [pc, #140]	; (8006a90 <TIM_OC3_SetConfig+0xf0>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	021b      	lsls	r3, r3, #8
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	4a1f      	ldr	r2, [pc, #124]	; (8006a94 <TIM_OC3_SetConfig+0xf4>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a1b      	ldr	r2, [pc, #108]	; (8006a8c <TIM_OC3_SetConfig+0xec>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00b      	beq.n	8006a3a <TIM_OC3_SetConfig+0x9a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a1c      	ldr	r2, [pc, #112]	; (8006a98 <TIM_OC3_SetConfig+0xf8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d007      	beq.n	8006a3a <TIM_OC3_SetConfig+0x9a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1b      	ldr	r2, [pc, #108]	; (8006a9c <TIM_OC3_SetConfig+0xfc>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d003      	beq.n	8006a3a <TIM_OC3_SetConfig+0x9a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1a      	ldr	r2, [pc, #104]	; (8006aa0 <TIM_OC3_SetConfig+0x100>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d113      	bne.n	8006a62 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4a19      	ldr	r2, [pc, #100]	; (8006aa4 <TIM_OC3_SetConfig+0x104>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <TIM_OC3_SetConfig+0x108>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	621a      	str	r2, [r3, #32]
}
 8006a7c:	46c0      	nop			; (mov r8, r8)
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	b006      	add	sp, #24
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	fffffeff 	.word	0xfffffeff
 8006a88:	fffffdff 	.word	0xfffffdff
 8006a8c:	40012c00 	.word	0x40012c00
 8006a90:	fffff7ff 	.word	0xfffff7ff
 8006a94:	fffffbff 	.word	0xfffffbff
 8006a98:	40014000 	.word	0x40014000
 8006a9c:	40014400 	.word	0x40014400
 8006aa0:	40014800 	.word	0x40014800
 8006aa4:	ffffefff 	.word	0xffffefff
 8006aa8:	ffffdfff 	.word	0xffffdfff

08006aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	4a28      	ldr	r2, [pc, #160]	; (8006b5c <TIM_OC4_SetConfig+0xb0>)
 8006abc:	401a      	ands	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4a22      	ldr	r2, [pc, #136]	; (8006b60 <TIM_OC4_SetConfig+0xb4>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4a21      	ldr	r2, [pc, #132]	; (8006b64 <TIM_OC4_SetConfig+0xb8>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <TIM_OC4_SetConfig+0xbc>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	031b      	lsls	r3, r3, #12
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <TIM_OC4_SetConfig+0xc0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_OC4_SetConfig+0x78>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a18      	ldr	r2, [pc, #96]	; (8006b70 <TIM_OC4_SetConfig+0xc4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_OC4_SetConfig+0x78>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a17      	ldr	r2, [pc, #92]	; (8006b74 <TIM_OC4_SetConfig+0xc8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_OC4_SetConfig+0x78>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a16      	ldr	r2, [pc, #88]	; (8006b78 <TIM_OC4_SetConfig+0xcc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d109      	bne.n	8006b38 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4a15      	ldr	r2, [pc, #84]	; (8006b7c <TIM_OC4_SetConfig+0xd0>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	019b      	lsls	r3, r3, #6
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	46c0      	nop			; (mov r8, r8)
 8006b54:	46bd      	mov	sp, r7
 8006b56:	b006      	add	sp, #24
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	ffffefff 	.word	0xffffefff
 8006b60:	ffff8fff 	.word	0xffff8fff
 8006b64:	fffffcff 	.word	0xfffffcff
 8006b68:	ffffdfff 	.word	0xffffdfff
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800
 8006b7c:	ffffbfff 	.word	0xffffbfff

08006b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b88:	46c0      	nop			; (mov r8, r8)
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	b002      	add	sp, #8
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b98:	46c0      	nop			; (mov r8, r8)
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b002      	add	sp, #8
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e044      	b.n	8006c3c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d107      	bne.n	8006bca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2274      	movs	r2, #116	; 0x74
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	f7fa fee5 	bl	8001994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2224      	movs	r2, #36	; 0x24
 8006bce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2101      	movs	r1, #1
 8006bdc:	438a      	bics	r2, r1
 8006bde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	0018      	movs	r0, r3
 8006be4:	f000 fb24 	bl	8007230 <UART_SetConfig>
 8006be8:	0003      	movs	r3, r0
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e024      	b.n	8006c3c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f000 fc9f 	bl	8007540 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	490d      	ldr	r1, [pc, #52]	; (8006c44 <HAL_UART_Init+0xa4>)
 8006c0e:	400a      	ands	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	212a      	movs	r1, #42	; 0x2a
 8006c1e:	438a      	bics	r2, r1
 8006c20:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f000 fd37 	bl	80076a8 <UART_CheckIdleState>
 8006c3a:	0003      	movs	r3, r0
}
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b002      	add	sp, #8
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	ffffb7ff 	.word	0xffffb7ff

08006c48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b0ab      	sub	sp, #172	; 0xac
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	22a4      	movs	r2, #164	; 0xa4
 8006c58:	18b9      	adds	r1, r7, r2
 8006c5a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	20a0      	movs	r0, #160	; 0xa0
 8006c64:	1839      	adds	r1, r7, r0
 8006c66:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	219c      	movs	r1, #156	; 0x9c
 8006c70:	1879      	adds	r1, r7, r1
 8006c72:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c74:	0011      	movs	r1, r2
 8006c76:	18bb      	adds	r3, r7, r2
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a99      	ldr	r2, [pc, #612]	; (8006ee0 <HAL_UART_IRQHandler+0x298>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	2298      	movs	r2, #152	; 0x98
 8006c80:	18bc      	adds	r4, r7, r2
 8006c82:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006c84:	18bb      	adds	r3, r7, r2
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d114      	bne.n	8006cb6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c8c:	187b      	adds	r3, r7, r1
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2220      	movs	r2, #32
 8006c92:	4013      	ands	r3, r2
 8006c94:	d00f      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c96:	183b      	adds	r3, r7, r0
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d00a      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d100      	bne.n	8006caa <HAL_UART_IRQHandler+0x62>
 8006ca8:	e296      	b.n	80071d8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	0010      	movs	r0, r2
 8006cb2:	4798      	blx	r3
      }
      return;
 8006cb4:	e290      	b.n	80071d8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cb6:	2398      	movs	r3, #152	; 0x98
 8006cb8:	18fb      	adds	r3, r7, r3
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d100      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x7a>
 8006cc0:	e114      	b.n	8006eec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006cc2:	239c      	movs	r3, #156	; 0x9c
 8006cc4:	18fb      	adds	r3, r7, r3
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d106      	bne.n	8006cdc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006cce:	23a0      	movs	r3, #160	; 0xa0
 8006cd0:	18fb      	adds	r3, r7, r3
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a83      	ldr	r2, [pc, #524]	; (8006ee4 <HAL_UART_IRQHandler+0x29c>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	d100      	bne.n	8006cdc <HAL_UART_IRQHandler+0x94>
 8006cda:	e107      	b.n	8006eec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cdc:	23a4      	movs	r3, #164	; 0xa4
 8006cde:	18fb      	adds	r3, r7, r3
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d012      	beq.n	8006d0e <HAL_UART_IRQHandler+0xc6>
 8006ce8:	23a0      	movs	r3, #160	; 0xa0
 8006cea:	18fb      	adds	r3, r7, r3
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	2380      	movs	r3, #128	; 0x80
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d00b      	beq.n	8006d0e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2280      	movs	r2, #128	; 0x80
 8006d02:	589b      	ldr	r3, [r3, r2]
 8006d04:	2201      	movs	r2, #1
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2180      	movs	r1, #128	; 0x80
 8006d0c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d0e:	23a4      	movs	r3, #164	; 0xa4
 8006d10:	18fb      	adds	r3, r7, r3
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2202      	movs	r2, #2
 8006d16:	4013      	ands	r3, r2
 8006d18:	d011      	beq.n	8006d3e <HAL_UART_IRQHandler+0xf6>
 8006d1a:	239c      	movs	r3, #156	; 0x9c
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2201      	movs	r2, #1
 8006d22:	4013      	ands	r3, r2
 8006d24:	d00b      	beq.n	8006d3e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2280      	movs	r2, #128	; 0x80
 8006d32:	589b      	ldr	r3, [r3, r2]
 8006d34:	2204      	movs	r2, #4
 8006d36:	431a      	orrs	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2180      	movs	r1, #128	; 0x80
 8006d3c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d3e:	23a4      	movs	r3, #164	; 0xa4
 8006d40:	18fb      	adds	r3, r7, r3
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2204      	movs	r2, #4
 8006d46:	4013      	ands	r3, r2
 8006d48:	d011      	beq.n	8006d6e <HAL_UART_IRQHandler+0x126>
 8006d4a:	239c      	movs	r3, #156	; 0x9c
 8006d4c:	18fb      	adds	r3, r7, r3
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2201      	movs	r2, #1
 8006d52:	4013      	ands	r3, r2
 8006d54:	d00b      	beq.n	8006d6e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2280      	movs	r2, #128	; 0x80
 8006d62:	589b      	ldr	r3, [r3, r2]
 8006d64:	2202      	movs	r2, #2
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2180      	movs	r1, #128	; 0x80
 8006d6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d6e:	23a4      	movs	r3, #164	; 0xa4
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2208      	movs	r2, #8
 8006d76:	4013      	ands	r3, r2
 8006d78:	d017      	beq.n	8006daa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d7a:	23a0      	movs	r3, #160	; 0xa0
 8006d7c:	18fb      	adds	r3, r7, r3
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2220      	movs	r2, #32
 8006d82:	4013      	ands	r3, r2
 8006d84:	d105      	bne.n	8006d92 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d86:	239c      	movs	r3, #156	; 0x9c
 8006d88:	18fb      	adds	r3, r7, r3
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d90:	d00b      	beq.n	8006daa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2208      	movs	r2, #8
 8006d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2280      	movs	r2, #128	; 0x80
 8006d9e:	589b      	ldr	r3, [r3, r2]
 8006da0:	2208      	movs	r2, #8
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2180      	movs	r1, #128	; 0x80
 8006da8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006daa:	23a4      	movs	r3, #164	; 0xa4
 8006dac:	18fb      	adds	r3, r7, r3
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	2380      	movs	r3, #128	; 0x80
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	4013      	ands	r3, r2
 8006db6:	d013      	beq.n	8006de0 <HAL_UART_IRQHandler+0x198>
 8006db8:	23a0      	movs	r3, #160	; 0xa0
 8006dba:	18fb      	adds	r3, r7, r3
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	2380      	movs	r3, #128	; 0x80
 8006dc0:	04db      	lsls	r3, r3, #19
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	d00c      	beq.n	8006de0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2280      	movs	r2, #128	; 0x80
 8006dcc:	0112      	lsls	r2, r2, #4
 8006dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2280      	movs	r2, #128	; 0x80
 8006dd4:	589b      	ldr	r3, [r3, r2]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2180      	movs	r1, #128	; 0x80
 8006dde:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2280      	movs	r2, #128	; 0x80
 8006de4:	589b      	ldr	r3, [r3, r2]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d100      	bne.n	8006dec <HAL_UART_IRQHandler+0x1a4>
 8006dea:	e1f7      	b.n	80071dc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006dec:	23a4      	movs	r3, #164	; 0xa4
 8006dee:	18fb      	adds	r3, r7, r3
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2220      	movs	r2, #32
 8006df4:	4013      	ands	r3, r2
 8006df6:	d00e      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006df8:	23a0      	movs	r3, #160	; 0xa0
 8006dfa:	18fb      	adds	r3, r7, r3
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	4013      	ands	r3, r2
 8006e02:	d008      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	0010      	movs	r0, r2
 8006e14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2280      	movs	r2, #128	; 0x80
 8006e1a:	589b      	ldr	r3, [r3, r2]
 8006e1c:	2194      	movs	r1, #148	; 0x94
 8006e1e:	187a      	adds	r2, r7, r1
 8006e20:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	2240      	movs	r2, #64	; 0x40
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	d004      	beq.n	8006e3a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e30:	187b      	adds	r3, r7, r1
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2228      	movs	r2, #40	; 0x28
 8006e36:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e38:	d047      	beq.n	8006eca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f000 fd3f 	bl	80078c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2240      	movs	r2, #64	; 0x40
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b40      	cmp	r3, #64	; 0x40
 8006e4e:	d137      	bne.n	8006ec0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e50:	f3ef 8310 	mrs	r3, PRIMASK
 8006e54:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e58:	2090      	movs	r0, #144	; 0x90
 8006e5a:	183a      	adds	r2, r7, r0
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	2301      	movs	r3, #1
 8006e60:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e64:	f383 8810 	msr	PRIMASK, r3
}
 8006e68:	46c0      	nop			; (mov r8, r8)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2140      	movs	r1, #64	; 0x40
 8006e76:	438a      	bics	r2, r1
 8006e78:	609a      	str	r2, [r3, #8]
 8006e7a:	183b      	adds	r3, r7, r0
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e82:	f383 8810 	msr	PRIMASK, r3
}
 8006e86:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d012      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e94:	4a14      	ldr	r2, [pc, #80]	; (8006ee8 <HAL_UART_IRQHandler+0x2a0>)
 8006e96:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7fb fcb3 	bl	8002808 <HAL_DMA_Abort_IT>
 8006ea2:	1e03      	subs	r3, r0, #0
 8006ea4:	d01a      	beq.n	8006edc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb4:	e012      	b.n	8006edc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f000 f9a5 	bl	8007208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ebe:	e00d      	b.n	8006edc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f000 f9a0 	bl	8007208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec8:	e008      	b.n	8006edc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	0018      	movs	r0, r3
 8006ece:	f000 f99b 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2280      	movs	r2, #128	; 0x80
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006eda:	e17f      	b.n	80071dc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006edc:	46c0      	nop			; (mov r8, r8)
    return;
 8006ede:	e17d      	b.n	80071dc <HAL_UART_IRQHandler+0x594>
 8006ee0:	0000080f 	.word	0x0000080f
 8006ee4:	04000120 	.word	0x04000120
 8006ee8:	08007985 	.word	0x08007985

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d000      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x2ae>
 8006ef4:	e131      	b.n	800715a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ef6:	23a4      	movs	r3, #164	; 0xa4
 8006ef8:	18fb      	adds	r3, r7, r3
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2210      	movs	r2, #16
 8006efe:	4013      	ands	r3, r2
 8006f00:	d100      	bne.n	8006f04 <HAL_UART_IRQHandler+0x2bc>
 8006f02:	e12a      	b.n	800715a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f04:	23a0      	movs	r3, #160	; 0xa0
 8006f06:	18fb      	adds	r3, r7, r3
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2210      	movs	r2, #16
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	d100      	bne.n	8006f12 <HAL_UART_IRQHandler+0x2ca>
 8006f10:	e123      	b.n	800715a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2210      	movs	r2, #16
 8006f18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2240      	movs	r2, #64	; 0x40
 8006f22:	4013      	ands	r3, r2
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d000      	beq.n	8006f2a <HAL_UART_IRQHandler+0x2e2>
 8006f28:	e09b      	b.n	8007062 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	217e      	movs	r1, #126	; 0x7e
 8006f34:	187b      	adds	r3, r7, r1
 8006f36:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006f38:	187b      	adds	r3, r7, r1
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d100      	bne.n	8006f42 <HAL_UART_IRQHandler+0x2fa>
 8006f40:	e14e      	b.n	80071e0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2258      	movs	r2, #88	; 0x58
 8006f46:	5a9b      	ldrh	r3, [r3, r2]
 8006f48:	187a      	adds	r2, r7, r1
 8006f4a:	8812      	ldrh	r2, [r2, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d300      	bcc.n	8006f52 <HAL_UART_IRQHandler+0x30a>
 8006f50:	e146      	b.n	80071e0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	187a      	adds	r2, r7, r1
 8006f56:	215a      	movs	r1, #90	; 0x5a
 8006f58:	8812      	ldrh	r2, [r2, #0]
 8006f5a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d06e      	beq.n	8007044 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f66:	f3ef 8310 	mrs	r3, PRIMASK
 8006f6a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f70:	2301      	movs	r3, #1
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f76:	f383 8810 	msr	PRIMASK, r3
}
 8006f7a:	46c0      	nop			; (mov r8, r8)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	499a      	ldr	r1, [pc, #616]	; (80071f0 <HAL_UART_IRQHandler+0x5a8>)
 8006f88:	400a      	ands	r2, r1
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	f383 8810 	msr	PRIMASK, r3
}
 8006f96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f98:	f3ef 8310 	mrs	r3, PRIMASK
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa0:	677b      	str	r3, [r7, #116]	; 0x74
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa8:	f383 8810 	msr	PRIMASK, r3
}
 8006fac:	46c0      	nop			; (mov r8, r8)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2101      	movs	r1, #1
 8006fba:	438a      	bics	r2, r1
 8006fbc:	609a      	str	r2, [r3, #8]
 8006fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc4:	f383 8810 	msr	PRIMASK, r3
}
 8006fc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fca:	f3ef 8310 	mrs	r3, PRIMASK
 8006fce:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd2:	673b      	str	r3, [r7, #112]	; 0x70
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fda:	f383 8810 	msr	PRIMASK, r3
}
 8006fde:	46c0      	nop			; (mov r8, r8)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2140      	movs	r1, #64	; 0x40
 8006fec:	438a      	bics	r2, r1
 8006fee:	609a      	str	r2, [r3, #8]
 8006ff0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff6:	f383 8810 	msr	PRIMASK, r3
}
 8006ffa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007008:	f3ef 8310 	mrs	r3, PRIMASK
 800700c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800700e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007010:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007012:	2301      	movs	r3, #1
 8007014:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007018:	f383 8810 	msr	PRIMASK, r3
}
 800701c:	46c0      	nop			; (mov r8, r8)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2110      	movs	r1, #16
 800702a:	438a      	bics	r2, r1
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007030:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007034:	f383 8810 	msr	PRIMASK, r3
}
 8007038:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703e:	0018      	movs	r0, r3
 8007040:	f7fb fbaa 	bl	8002798 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2258      	movs	r2, #88	; 0x58
 8007048:	5a9a      	ldrh	r2, [r3, r2]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	215a      	movs	r1, #90	; 0x5a
 800704e:	5a5b      	ldrh	r3, [r3, r1]
 8007050:	b29b      	uxth	r3, r3
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	b29a      	uxth	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0011      	movs	r1, r2
 800705a:	0018      	movs	r0, r3
 800705c:	f000 f8dc 	bl	8007218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007060:	e0be      	b.n	80071e0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2258      	movs	r2, #88	; 0x58
 8007066:	5a99      	ldrh	r1, [r3, r2]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	225a      	movs	r2, #90	; 0x5a
 800706c:	5a9b      	ldrh	r3, [r3, r2]
 800706e:	b29a      	uxth	r2, r3
 8007070:	208e      	movs	r0, #142	; 0x8e
 8007072:	183b      	adds	r3, r7, r0
 8007074:	1a8a      	subs	r2, r1, r2
 8007076:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	225a      	movs	r2, #90	; 0x5a
 800707c:	5a9b      	ldrh	r3, [r3, r2]
 800707e:	b29b      	uxth	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d100      	bne.n	8007086 <HAL_UART_IRQHandler+0x43e>
 8007084:	e0ae      	b.n	80071e4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8007086:	183b      	adds	r3, r7, r0
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d100      	bne.n	8007090 <HAL_UART_IRQHandler+0x448>
 800708e:	e0a9      	b.n	80071e4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007090:	f3ef 8310 	mrs	r3, PRIMASK
 8007094:	60fb      	str	r3, [r7, #12]
  return(result);
 8007096:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007098:	2488      	movs	r4, #136	; 0x88
 800709a:	193a      	adds	r2, r7, r4
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	2301      	movs	r3, #1
 80070a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f383 8810 	msr	PRIMASK, r3
}
 80070a8:	46c0      	nop			; (mov r8, r8)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	494f      	ldr	r1, [pc, #316]	; (80071f4 <HAL_UART_IRQHandler+0x5ac>)
 80070b6:	400a      	ands	r2, r1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	193b      	adds	r3, r7, r4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f383 8810 	msr	PRIMASK, r3
}
 80070c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070c8:	f3ef 8310 	mrs	r3, PRIMASK
 80070cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80070ce:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d0:	2484      	movs	r4, #132	; 0x84
 80070d2:	193a      	adds	r2, r7, r4
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	2301      	movs	r3, #1
 80070d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	f383 8810 	msr	PRIMASK, r3
}
 80070e0:	46c0      	nop			; (mov r8, r8)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2101      	movs	r1, #1
 80070ee:	438a      	bics	r2, r1
 80070f0:	609a      	str	r2, [r3, #8]
 80070f2:	193b      	adds	r3, r7, r4
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	f383 8810 	msr	PRIMASK, r3
}
 80070fe:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007112:	f3ef 8310 	mrs	r3, PRIMASK
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711a:	2480      	movs	r4, #128	; 0x80
 800711c:	193a      	adds	r2, r7, r4
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	2301      	movs	r3, #1
 8007122:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	f383 8810 	msr	PRIMASK, r3
}
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2110      	movs	r1, #16
 8007138:	438a      	bics	r2, r1
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	193b      	adds	r3, r7, r4
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	f383 8810 	msr	PRIMASK, r3
}
 8007148:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800714a:	183b      	adds	r3, r7, r0
 800714c:	881a      	ldrh	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	0011      	movs	r1, r2
 8007152:	0018      	movs	r0, r3
 8007154:	f000 f860 	bl	8007218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007158:	e044      	b.n	80071e4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800715a:	23a4      	movs	r3, #164	; 0xa4
 800715c:	18fb      	adds	r3, r7, r3
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	2380      	movs	r3, #128	; 0x80
 8007162:	035b      	lsls	r3, r3, #13
 8007164:	4013      	ands	r3, r2
 8007166:	d010      	beq.n	800718a <HAL_UART_IRQHandler+0x542>
 8007168:	239c      	movs	r3, #156	; 0x9c
 800716a:	18fb      	adds	r3, r7, r3
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	2380      	movs	r3, #128	; 0x80
 8007170:	03db      	lsls	r3, r3, #15
 8007172:	4013      	ands	r3, r2
 8007174:	d009      	beq.n	800718a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2280      	movs	r2, #128	; 0x80
 800717c:	0352      	lsls	r2, r2, #13
 800717e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	0018      	movs	r0, r3
 8007184:	f000 fc40 	bl	8007a08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007188:	e02f      	b.n	80071ea <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800718a:	23a4      	movs	r3, #164	; 0xa4
 800718c:	18fb      	adds	r3, r7, r3
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2280      	movs	r2, #128	; 0x80
 8007192:	4013      	ands	r3, r2
 8007194:	d00f      	beq.n	80071b6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007196:	23a0      	movs	r3, #160	; 0xa0
 8007198:	18fb      	adds	r3, r7, r3
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2280      	movs	r2, #128	; 0x80
 800719e:	4013      	ands	r3, r2
 80071a0:	d009      	beq.n	80071b6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01e      	beq.n	80071e8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	0010      	movs	r0, r2
 80071b2:	4798      	blx	r3
    }
    return;
 80071b4:	e018      	b.n	80071e8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071b6:	23a4      	movs	r3, #164	; 0xa4
 80071b8:	18fb      	adds	r3, r7, r3
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2240      	movs	r2, #64	; 0x40
 80071be:	4013      	ands	r3, r2
 80071c0:	d013      	beq.n	80071ea <HAL_UART_IRQHandler+0x5a2>
 80071c2:	23a0      	movs	r3, #160	; 0xa0
 80071c4:	18fb      	adds	r3, r7, r3
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2240      	movs	r2, #64	; 0x40
 80071ca:	4013      	ands	r3, r2
 80071cc:	d00d      	beq.n	80071ea <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	0018      	movs	r0, r3
 80071d2:	f000 fbee 	bl	80079b2 <UART_EndTransmit_IT>
    return;
 80071d6:	e008      	b.n	80071ea <HAL_UART_IRQHandler+0x5a2>
      return;
 80071d8:	46c0      	nop			; (mov r8, r8)
 80071da:	e006      	b.n	80071ea <HAL_UART_IRQHandler+0x5a2>
    return;
 80071dc:	46c0      	nop			; (mov r8, r8)
 80071de:	e004      	b.n	80071ea <HAL_UART_IRQHandler+0x5a2>
      return;
 80071e0:	46c0      	nop			; (mov r8, r8)
 80071e2:	e002      	b.n	80071ea <HAL_UART_IRQHandler+0x5a2>
      return;
 80071e4:	46c0      	nop			; (mov r8, r8)
 80071e6:	e000      	b.n	80071ea <HAL_UART_IRQHandler+0x5a2>
    return;
 80071e8:	46c0      	nop			; (mov r8, r8)
  }

}
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b02b      	add	sp, #172	; 0xac
 80071ee:	bd90      	pop	{r4, r7, pc}
 80071f0:	fffffeff 	.word	0xfffffeff
 80071f4:	fffffedf 	.word	0xfffffedf

080071f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007200:	46c0      	nop			; (mov r8, r8)
 8007202:	46bd      	mov	sp, r7
 8007204:	b002      	add	sp, #8
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007210:	46c0      	nop			; (mov r8, r8)
 8007212:	46bd      	mov	sp, r7
 8007214:	b002      	add	sp, #8
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	000a      	movs	r2, r1
 8007222:	1cbb      	adds	r3, r7, #2
 8007224:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	46bd      	mov	sp, r7
 800722a:	b002      	add	sp, #8
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007238:	231e      	movs	r3, #30
 800723a:	18fb      	adds	r3, r7, r3
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	4313      	orrs	r3, r2
 8007256:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4aaf      	ldr	r2, [pc, #700]	; (800751c <UART_SetConfig+0x2ec>)
 8007260:	4013      	ands	r3, r2
 8007262:	0019      	movs	r1, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	430a      	orrs	r2, r1
 800726c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	4aaa      	ldr	r2, [pc, #680]	; (8007520 <UART_SetConfig+0x2f0>)
 8007276:	4013      	ands	r3, r2
 8007278:	0019      	movs	r1, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	4aa1      	ldr	r2, [pc, #644]	; (8007524 <UART_SetConfig+0x2f4>)
 800729e:	4013      	ands	r3, r2
 80072a0:	0019      	movs	r1, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a9d      	ldr	r2, [pc, #628]	; (8007528 <UART_SetConfig+0x2f8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d127      	bne.n	8007306 <UART_SetConfig+0xd6>
 80072b6:	4b9d      	ldr	r3, [pc, #628]	; (800752c <UART_SetConfig+0x2fc>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	2203      	movs	r2, #3
 80072bc:	4013      	ands	r3, r2
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d00d      	beq.n	80072de <UART_SetConfig+0xae>
 80072c2:	d81b      	bhi.n	80072fc <UART_SetConfig+0xcc>
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d014      	beq.n	80072f2 <UART_SetConfig+0xc2>
 80072c8:	d818      	bhi.n	80072fc <UART_SetConfig+0xcc>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <UART_SetConfig+0xa4>
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d00a      	beq.n	80072e8 <UART_SetConfig+0xb8>
 80072d2:	e013      	b.n	80072fc <UART_SetConfig+0xcc>
 80072d4:	231f      	movs	r3, #31
 80072d6:	18fb      	adds	r3, r7, r3
 80072d8:	2200      	movs	r2, #0
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	e065      	b.n	80073aa <UART_SetConfig+0x17a>
 80072de:	231f      	movs	r3, #31
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	2202      	movs	r2, #2
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	e060      	b.n	80073aa <UART_SetConfig+0x17a>
 80072e8:	231f      	movs	r3, #31
 80072ea:	18fb      	adds	r3, r7, r3
 80072ec:	2204      	movs	r2, #4
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	e05b      	b.n	80073aa <UART_SetConfig+0x17a>
 80072f2:	231f      	movs	r3, #31
 80072f4:	18fb      	adds	r3, r7, r3
 80072f6:	2208      	movs	r2, #8
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	e056      	b.n	80073aa <UART_SetConfig+0x17a>
 80072fc:	231f      	movs	r3, #31
 80072fe:	18fb      	adds	r3, r7, r3
 8007300:	2210      	movs	r2, #16
 8007302:	701a      	strb	r2, [r3, #0]
 8007304:	e051      	b.n	80073aa <UART_SetConfig+0x17a>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a89      	ldr	r2, [pc, #548]	; (8007530 <UART_SetConfig+0x300>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d134      	bne.n	800737a <UART_SetConfig+0x14a>
 8007310:	4b86      	ldr	r3, [pc, #536]	; (800752c <UART_SetConfig+0x2fc>)
 8007312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007314:	23c0      	movs	r3, #192	; 0xc0
 8007316:	029b      	lsls	r3, r3, #10
 8007318:	4013      	ands	r3, r2
 800731a:	22c0      	movs	r2, #192	; 0xc0
 800731c:	0292      	lsls	r2, r2, #10
 800731e:	4293      	cmp	r3, r2
 8007320:	d017      	beq.n	8007352 <UART_SetConfig+0x122>
 8007322:	22c0      	movs	r2, #192	; 0xc0
 8007324:	0292      	lsls	r2, r2, #10
 8007326:	4293      	cmp	r3, r2
 8007328:	d822      	bhi.n	8007370 <UART_SetConfig+0x140>
 800732a:	2280      	movs	r2, #128	; 0x80
 800732c:	0292      	lsls	r2, r2, #10
 800732e:	4293      	cmp	r3, r2
 8007330:	d019      	beq.n	8007366 <UART_SetConfig+0x136>
 8007332:	2280      	movs	r2, #128	; 0x80
 8007334:	0292      	lsls	r2, r2, #10
 8007336:	4293      	cmp	r3, r2
 8007338:	d81a      	bhi.n	8007370 <UART_SetConfig+0x140>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <UART_SetConfig+0x118>
 800733e:	2280      	movs	r2, #128	; 0x80
 8007340:	0252      	lsls	r2, r2, #9
 8007342:	4293      	cmp	r3, r2
 8007344:	d00a      	beq.n	800735c <UART_SetConfig+0x12c>
 8007346:	e013      	b.n	8007370 <UART_SetConfig+0x140>
 8007348:	231f      	movs	r3, #31
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]
 8007350:	e02b      	b.n	80073aa <UART_SetConfig+0x17a>
 8007352:	231f      	movs	r3, #31
 8007354:	18fb      	adds	r3, r7, r3
 8007356:	2202      	movs	r2, #2
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	e026      	b.n	80073aa <UART_SetConfig+0x17a>
 800735c:	231f      	movs	r3, #31
 800735e:	18fb      	adds	r3, r7, r3
 8007360:	2204      	movs	r2, #4
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e021      	b.n	80073aa <UART_SetConfig+0x17a>
 8007366:	231f      	movs	r3, #31
 8007368:	18fb      	adds	r3, r7, r3
 800736a:	2208      	movs	r2, #8
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	e01c      	b.n	80073aa <UART_SetConfig+0x17a>
 8007370:	231f      	movs	r3, #31
 8007372:	18fb      	adds	r3, r7, r3
 8007374:	2210      	movs	r2, #16
 8007376:	701a      	strb	r2, [r3, #0]
 8007378:	e017      	b.n	80073aa <UART_SetConfig+0x17a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a6d      	ldr	r2, [pc, #436]	; (8007534 <UART_SetConfig+0x304>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d104      	bne.n	800738e <UART_SetConfig+0x15e>
 8007384:	231f      	movs	r3, #31
 8007386:	18fb      	adds	r3, r7, r3
 8007388:	2200      	movs	r2, #0
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	e00d      	b.n	80073aa <UART_SetConfig+0x17a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a69      	ldr	r2, [pc, #420]	; (8007538 <UART_SetConfig+0x308>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d104      	bne.n	80073a2 <UART_SetConfig+0x172>
 8007398:	231f      	movs	r3, #31
 800739a:	18fb      	adds	r3, r7, r3
 800739c:	2200      	movs	r2, #0
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	e003      	b.n	80073aa <UART_SetConfig+0x17a>
 80073a2:	231f      	movs	r3, #31
 80073a4:	18fb      	adds	r3, r7, r3
 80073a6:	2210      	movs	r2, #16
 80073a8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69da      	ldr	r2, [r3, #28]
 80073ae:	2380      	movs	r3, #128	; 0x80
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d15d      	bne.n	8007472 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80073b6:	231f      	movs	r3, #31
 80073b8:	18fb      	adds	r3, r7, r3
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d015      	beq.n	80073ec <UART_SetConfig+0x1bc>
 80073c0:	dc18      	bgt.n	80073f4 <UART_SetConfig+0x1c4>
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	d00d      	beq.n	80073e2 <UART_SetConfig+0x1b2>
 80073c6:	dc15      	bgt.n	80073f4 <UART_SetConfig+0x1c4>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <UART_SetConfig+0x1a2>
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d005      	beq.n	80073dc <UART_SetConfig+0x1ac>
 80073d0:	e010      	b.n	80073f4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d2:	f7fe f865 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 80073d6:	0003      	movs	r3, r0
 80073d8:	61bb      	str	r3, [r7, #24]
        break;
 80073da:	e012      	b.n	8007402 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073dc:	4b57      	ldr	r3, [pc, #348]	; (800753c <UART_SetConfig+0x30c>)
 80073de:	61bb      	str	r3, [r7, #24]
        break;
 80073e0:	e00f      	b.n	8007402 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073e2:	f7fd ffd1 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 80073e6:	0003      	movs	r3, r0
 80073e8:	61bb      	str	r3, [r7, #24]
        break;
 80073ea:	e00a      	b.n	8007402 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ec:	2380      	movs	r3, #128	; 0x80
 80073ee:	021b      	lsls	r3, r3, #8
 80073f0:	61bb      	str	r3, [r7, #24]
        break;
 80073f2:	e006      	b.n	8007402 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073f8:	231e      	movs	r3, #30
 80073fa:	18fb      	adds	r3, r7, r3
 80073fc:	2201      	movs	r2, #1
 80073fe:	701a      	strb	r2, [r3, #0]
        break;
 8007400:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d100      	bne.n	800740a <UART_SetConfig+0x1da>
 8007408:	e07b      	b.n	8007502 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	005a      	lsls	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	085b      	lsrs	r3, r3, #1
 8007414:	18d2      	adds	r2, r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	0019      	movs	r1, r3
 800741c:	0010      	movs	r0, r2
 800741e:	f7f8 fe85 	bl	800012c <__udivsi3>
 8007422:	0003      	movs	r3, r0
 8007424:	b29b      	uxth	r3, r3
 8007426:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b0f      	cmp	r3, #15
 800742c:	d91c      	bls.n	8007468 <UART_SetConfig+0x238>
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	025b      	lsls	r3, r3, #9
 8007434:	429a      	cmp	r2, r3
 8007436:	d217      	bcs.n	8007468 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	b29a      	uxth	r2, r3
 800743c:	200e      	movs	r0, #14
 800743e:	183b      	adds	r3, r7, r0
 8007440:	210f      	movs	r1, #15
 8007442:	438a      	bics	r2, r1
 8007444:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	085b      	lsrs	r3, r3, #1
 800744a:	b29b      	uxth	r3, r3
 800744c:	2207      	movs	r2, #7
 800744e:	4013      	ands	r3, r2
 8007450:	b299      	uxth	r1, r3
 8007452:	183b      	adds	r3, r7, r0
 8007454:	183a      	adds	r2, r7, r0
 8007456:	8812      	ldrh	r2, [r2, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	183a      	adds	r2, r7, r0
 8007462:	8812      	ldrh	r2, [r2, #0]
 8007464:	60da      	str	r2, [r3, #12]
 8007466:	e04c      	b.n	8007502 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007468:	231e      	movs	r3, #30
 800746a:	18fb      	adds	r3, r7, r3
 800746c:	2201      	movs	r2, #1
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	e047      	b.n	8007502 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007472:	231f      	movs	r3, #31
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b08      	cmp	r3, #8
 800747a:	d015      	beq.n	80074a8 <UART_SetConfig+0x278>
 800747c:	dc18      	bgt.n	80074b0 <UART_SetConfig+0x280>
 800747e:	2b04      	cmp	r3, #4
 8007480:	d00d      	beq.n	800749e <UART_SetConfig+0x26e>
 8007482:	dc15      	bgt.n	80074b0 <UART_SetConfig+0x280>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <UART_SetConfig+0x25e>
 8007488:	2b02      	cmp	r3, #2
 800748a:	d005      	beq.n	8007498 <UART_SetConfig+0x268>
 800748c:	e010      	b.n	80074b0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800748e:	f7fe f807 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 8007492:	0003      	movs	r3, r0
 8007494:	61bb      	str	r3, [r7, #24]
        break;
 8007496:	e012      	b.n	80074be <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007498:	4b28      	ldr	r3, [pc, #160]	; (800753c <UART_SetConfig+0x30c>)
 800749a:	61bb      	str	r3, [r7, #24]
        break;
 800749c:	e00f      	b.n	80074be <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800749e:	f7fd ff73 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 80074a2:	0003      	movs	r3, r0
 80074a4:	61bb      	str	r3, [r7, #24]
        break;
 80074a6:	e00a      	b.n	80074be <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074a8:	2380      	movs	r3, #128	; 0x80
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	61bb      	str	r3, [r7, #24]
        break;
 80074ae:	e006      	b.n	80074be <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074b4:	231e      	movs	r3, #30
 80074b6:	18fb      	adds	r3, r7, r3
 80074b8:	2201      	movs	r2, #1
 80074ba:	701a      	strb	r2, [r3, #0]
        break;
 80074bc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01e      	beq.n	8007502 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	085a      	lsrs	r2, r3, #1
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	18d2      	adds	r2, r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	0019      	movs	r1, r3
 80074d4:	0010      	movs	r0, r2
 80074d6:	f7f8 fe29 	bl	800012c <__udivsi3>
 80074da:	0003      	movs	r3, r0
 80074dc:	b29b      	uxth	r3, r3
 80074de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2b0f      	cmp	r3, #15
 80074e4:	d909      	bls.n	80074fa <UART_SetConfig+0x2ca>
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	2380      	movs	r3, #128	; 0x80
 80074ea:	025b      	lsls	r3, r3, #9
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d204      	bcs.n	80074fa <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	60da      	str	r2, [r3, #12]
 80074f8:	e003      	b.n	8007502 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80074fa:	231e      	movs	r3, #30
 80074fc:	18fb      	adds	r3, r7, r3
 80074fe:	2201      	movs	r2, #1
 8007500:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800750e:	231e      	movs	r3, #30
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	781b      	ldrb	r3, [r3, #0]
}
 8007514:	0018      	movs	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	b008      	add	sp, #32
 800751a:	bd80      	pop	{r7, pc}
 800751c:	efff69f3 	.word	0xefff69f3
 8007520:	ffffcfff 	.word	0xffffcfff
 8007524:	fffff4ff 	.word	0xfffff4ff
 8007528:	40013800 	.word	0x40013800
 800752c:	40021000 	.word	0x40021000
 8007530:	40004400 	.word	0x40004400
 8007534:	40004800 	.word	0x40004800
 8007538:	40004c00 	.word	0x40004c00
 800753c:	007a1200 	.word	0x007a1200

08007540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	2201      	movs	r2, #1
 800754e:	4013      	ands	r3, r2
 8007550:	d00b      	beq.n	800756a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	4a4a      	ldr	r2, [pc, #296]	; (8007684 <UART_AdvFeatureConfig+0x144>)
 800755a:	4013      	ands	r3, r2
 800755c:	0019      	movs	r1, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	2202      	movs	r2, #2
 8007570:	4013      	ands	r3, r2
 8007572:	d00b      	beq.n	800758c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	4a43      	ldr	r2, [pc, #268]	; (8007688 <UART_AdvFeatureConfig+0x148>)
 800757c:	4013      	ands	r3, r2
 800757e:	0019      	movs	r1, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	2204      	movs	r2, #4
 8007592:	4013      	ands	r3, r2
 8007594:	d00b      	beq.n	80075ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	4a3b      	ldr	r2, [pc, #236]	; (800768c <UART_AdvFeatureConfig+0x14c>)
 800759e:	4013      	ands	r3, r2
 80075a0:	0019      	movs	r1, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	2208      	movs	r2, #8
 80075b4:	4013      	ands	r3, r2
 80075b6:	d00b      	beq.n	80075d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	4a34      	ldr	r2, [pc, #208]	; (8007690 <UART_AdvFeatureConfig+0x150>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	0019      	movs	r1, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	2210      	movs	r2, #16
 80075d6:	4013      	ands	r3, r2
 80075d8:	d00b      	beq.n	80075f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	4a2c      	ldr	r2, [pc, #176]	; (8007694 <UART_AdvFeatureConfig+0x154>)
 80075e2:	4013      	ands	r3, r2
 80075e4:	0019      	movs	r1, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	2220      	movs	r2, #32
 80075f8:	4013      	ands	r3, r2
 80075fa:	d00b      	beq.n	8007614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	4a25      	ldr	r2, [pc, #148]	; (8007698 <UART_AdvFeatureConfig+0x158>)
 8007604:	4013      	ands	r3, r2
 8007606:	0019      	movs	r1, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	2240      	movs	r2, #64	; 0x40
 800761a:	4013      	ands	r3, r2
 800761c:	d01d      	beq.n	800765a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	4a1d      	ldr	r2, [pc, #116]	; (800769c <UART_AdvFeatureConfig+0x15c>)
 8007626:	4013      	ands	r3, r2
 8007628:	0019      	movs	r1, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800763a:	2380      	movs	r3, #128	; 0x80
 800763c:	035b      	lsls	r3, r3, #13
 800763e:	429a      	cmp	r2, r3
 8007640:	d10b      	bne.n	800765a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4a15      	ldr	r2, [pc, #84]	; (80076a0 <UART_AdvFeatureConfig+0x160>)
 800764a:	4013      	ands	r3, r2
 800764c:	0019      	movs	r1, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2280      	movs	r2, #128	; 0x80
 8007660:	4013      	ands	r3, r2
 8007662:	d00b      	beq.n	800767c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4a0e      	ldr	r2, [pc, #56]	; (80076a4 <UART_AdvFeatureConfig+0x164>)
 800766c:	4013      	ands	r3, r2
 800766e:	0019      	movs	r1, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	605a      	str	r2, [r3, #4]
  }
}
 800767c:	46c0      	nop			; (mov r8, r8)
 800767e:	46bd      	mov	sp, r7
 8007680:	b002      	add	sp, #8
 8007682:	bd80      	pop	{r7, pc}
 8007684:	fffdffff 	.word	0xfffdffff
 8007688:	fffeffff 	.word	0xfffeffff
 800768c:	fffbffff 	.word	0xfffbffff
 8007690:	ffff7fff 	.word	0xffff7fff
 8007694:	ffffefff 	.word	0xffffefff
 8007698:	ffffdfff 	.word	0xffffdfff
 800769c:	ffefffff 	.word	0xffefffff
 80076a0:	ff9fffff 	.word	0xff9fffff
 80076a4:	fff7ffff 	.word	0xfff7ffff

080076a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2280      	movs	r2, #128	; 0x80
 80076b4:	2100      	movs	r1, #0
 80076b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076b8:	f7fa fccc 	bl	8002054 <HAL_GetTick>
 80076bc:	0003      	movs	r3, r0
 80076be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2208      	movs	r2, #8
 80076c8:	4013      	ands	r3, r2
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d10c      	bne.n	80076e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2280      	movs	r2, #128	; 0x80
 80076d2:	0391      	lsls	r1, r2, #14
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	4a17      	ldr	r2, [pc, #92]	; (8007734 <UART_CheckIdleState+0x8c>)
 80076d8:	9200      	str	r2, [sp, #0]
 80076da:	2200      	movs	r2, #0
 80076dc:	f000 f82c 	bl	8007738 <UART_WaitOnFlagUntilTimeout>
 80076e0:	1e03      	subs	r3, r0, #0
 80076e2:	d001      	beq.n	80076e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e021      	b.n	800772c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2204      	movs	r2, #4
 80076f0:	4013      	ands	r3, r2
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	d10c      	bne.n	8007710 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2280      	movs	r2, #128	; 0x80
 80076fa:	03d1      	lsls	r1, r2, #15
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4a0d      	ldr	r2, [pc, #52]	; (8007734 <UART_CheckIdleState+0x8c>)
 8007700:	9200      	str	r2, [sp, #0]
 8007702:	2200      	movs	r2, #0
 8007704:	f000 f818 	bl	8007738 <UART_WaitOnFlagUntilTimeout>
 8007708:	1e03      	subs	r3, r0, #0
 800770a:	d001      	beq.n	8007710 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e00d      	b.n	800772c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2274      	movs	r2, #116	; 0x74
 8007726:	2100      	movs	r1, #0
 8007728:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	0018      	movs	r0, r3
 800772e:	46bd      	mov	sp, r7
 8007730:	b004      	add	sp, #16
 8007732:	bd80      	pop	{r7, pc}
 8007734:	01ffffff 	.word	0x01ffffff

08007738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b094      	sub	sp, #80	; 0x50
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	1dfb      	adds	r3, r7, #7
 8007746:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007748:	e0a3      	b.n	8007892 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800774a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800774c:	3301      	adds	r3, #1
 800774e:	d100      	bne.n	8007752 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007750:	e09f      	b.n	8007892 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007752:	f7fa fc7f 	bl	8002054 <HAL_GetTick>
 8007756:	0002      	movs	r2, r0
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800775e:	429a      	cmp	r2, r3
 8007760:	d302      	bcc.n	8007768 <UART_WaitOnFlagUntilTimeout+0x30>
 8007762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007764:	2b00      	cmp	r3, #0
 8007766:	d13d      	bne.n	80077e4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007768:	f3ef 8310 	mrs	r3, PRIMASK
 800776c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007770:	647b      	str	r3, [r7, #68]	; 0x44
 8007772:	2301      	movs	r3, #1
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	f383 8810 	msr	PRIMASK, r3
}
 800777c:	46c0      	nop			; (mov r8, r8)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	494c      	ldr	r1, [pc, #304]	; (80078bc <UART_WaitOnFlagUntilTimeout+0x184>)
 800778a:	400a      	ands	r2, r1
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007790:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f383 8810 	msr	PRIMASK, r3
}
 8007798:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800779a:	f3ef 8310 	mrs	r3, PRIMASK
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a2:	643b      	str	r3, [r7, #64]	; 0x40
 80077a4:	2301      	movs	r3, #1
 80077a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077aa:	f383 8810 	msr	PRIMASK, r3
}
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2101      	movs	r1, #1
 80077bc:	438a      	bics	r2, r1
 80077be:	609a      	str	r2, [r3, #8]
 80077c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c6:	f383 8810 	msr	PRIMASK, r3
}
 80077ca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2220      	movs	r2, #32
 80077d0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2274      	movs	r2, #116	; 0x74
 80077dc:	2100      	movs	r1, #0
 80077de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e067      	b.n	80078b4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2204      	movs	r2, #4
 80077ec:	4013      	ands	r3, r2
 80077ee:	d050      	beq.n	8007892 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	69da      	ldr	r2, [r3, #28]
 80077f6:	2380      	movs	r3, #128	; 0x80
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	401a      	ands	r2, r3
 80077fc:	2380      	movs	r3, #128	; 0x80
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	429a      	cmp	r2, r3
 8007802:	d146      	bne.n	8007892 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2280      	movs	r2, #128	; 0x80
 800780a:	0112      	lsls	r2, r2, #4
 800780c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800780e:	f3ef 8310 	mrs	r3, PRIMASK
 8007812:	613b      	str	r3, [r7, #16]
  return(result);
 8007814:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007818:	2301      	movs	r3, #1
 800781a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	f383 8810 	msr	PRIMASK, r3
}
 8007822:	46c0      	nop			; (mov r8, r8)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4923      	ldr	r1, [pc, #140]	; (80078bc <UART_WaitOnFlagUntilTimeout+0x184>)
 8007830:	400a      	ands	r2, r1
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007836:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	f383 8810 	msr	PRIMASK, r3
}
 800783e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007840:	f3ef 8310 	mrs	r3, PRIMASK
 8007844:	61fb      	str	r3, [r7, #28]
  return(result);
 8007846:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007848:	64bb      	str	r3, [r7, #72]	; 0x48
 800784a:	2301      	movs	r3, #1
 800784c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	f383 8810 	msr	PRIMASK, r3
}
 8007854:	46c0      	nop			; (mov r8, r8)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2101      	movs	r1, #1
 8007862:	438a      	bics	r2, r1
 8007864:	609a      	str	r2, [r3, #8]
 8007866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	f383 8810 	msr	PRIMASK, r3
}
 8007870:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2220      	movs	r2, #32
 8007876:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2280      	movs	r2, #128	; 0x80
 8007882:	2120      	movs	r1, #32
 8007884:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2274      	movs	r2, #116	; 0x74
 800788a:	2100      	movs	r1, #0
 800788c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e010      	b.n	80078b4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	4013      	ands	r3, r2
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	425a      	negs	r2, r3
 80078a2:	4153      	adcs	r3, r2
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	001a      	movs	r2, r3
 80078a8:	1dfb      	adds	r3, r7, #7
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d100      	bne.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80078b0:	e74b      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	0018      	movs	r0, r3
 80078b6:	46bd      	mov	sp, r7
 80078b8:	b014      	add	sp, #80	; 0x50
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	fffffe5f 	.word	0xfffffe5f

080078c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08e      	sub	sp, #56	; 0x38
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078c8:	f3ef 8310 	mrs	r3, PRIMASK
 80078cc:	617b      	str	r3, [r7, #20]
  return(result);
 80078ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078d0:	637b      	str	r3, [r7, #52]	; 0x34
 80078d2:	2301      	movs	r3, #1
 80078d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	f383 8810 	msr	PRIMASK, r3
}
 80078dc:	46c0      	nop			; (mov r8, r8)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4925      	ldr	r1, [pc, #148]	; (8007980 <UART_EndRxTransfer+0xc0>)
 80078ea:	400a      	ands	r2, r1
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f383 8810 	msr	PRIMASK, r3
}
 80078f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078fa:	f3ef 8310 	mrs	r3, PRIMASK
 80078fe:	623b      	str	r3, [r7, #32]
  return(result);
 8007900:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007902:	633b      	str	r3, [r7, #48]	; 0x30
 8007904:	2301      	movs	r3, #1
 8007906:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	f383 8810 	msr	PRIMASK, r3
}
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2101      	movs	r1, #1
 800791c:	438a      	bics	r2, r1
 800791e:	609a      	str	r2, [r3, #8]
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007926:	f383 8810 	msr	PRIMASK, r3
}
 800792a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007930:	2b01      	cmp	r3, #1
 8007932:	d118      	bne.n	8007966 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007934:	f3ef 8310 	mrs	r3, PRIMASK
 8007938:	60bb      	str	r3, [r7, #8]
  return(result);
 800793a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800793c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800793e:	2301      	movs	r3, #1
 8007940:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f383 8810 	msr	PRIMASK, r3
}
 8007948:	46c0      	nop			; (mov r8, r8)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2110      	movs	r1, #16
 8007956:	438a      	bics	r2, r1
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f383 8810 	msr	PRIMASK, r3
}
 8007964:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	46bd      	mov	sp, r7
 800797c:	b00e      	add	sp, #56	; 0x38
 800797e:	bd80      	pop	{r7, pc}
 8007980:	fffffedf 	.word	0xfffffedf

08007984 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	225a      	movs	r2, #90	; 0x5a
 8007996:	2100      	movs	r1, #0
 8007998:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2252      	movs	r2, #82	; 0x52
 800799e:	2100      	movs	r1, #0
 80079a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	0018      	movs	r0, r3
 80079a6:	f7ff fc2f 	bl	8007208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079aa:	46c0      	nop			; (mov r8, r8)
 80079ac:	46bd      	mov	sp, r7
 80079ae:	b004      	add	sp, #16
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b086      	sub	sp, #24
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ba:	f3ef 8310 	mrs	r3, PRIMASK
 80079be:	60bb      	str	r3, [r7, #8]
  return(result);
 80079c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	2301      	movs	r3, #1
 80079c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f383 8810 	msr	PRIMASK, r3
}
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2140      	movs	r1, #64	; 0x40
 80079dc:	438a      	bics	r2, r1
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f383 8810 	msr	PRIMASK, r3
}
 80079ea:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2220      	movs	r2, #32
 80079f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	0018      	movs	r0, r3
 80079fc:	f7ff fbfc 	bl	80071f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a00:	46c0      	nop			; (mov r8, r8)
 8007a02:	46bd      	mov	sp, r7
 8007a04:	b006      	add	sp, #24
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a10:	46c0      	nop			; (mov r8, r8)
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b002      	add	sp, #8
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2244      	movs	r2, #68	; 0x44
 8007a24:	2100      	movs	r1, #0
 8007a26:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a28:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <USB_EnableGlobalInt+0x28>)
 8007a2a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	b299      	uxth	r1, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2240      	movs	r2, #64	; 0x40
 8007a34:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	0018      	movs	r0, r3
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	b004      	add	sp, #16
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	0000bf80 	.word	0x0000bf80

08007a44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a4c:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <USB_DisableGlobalInt+0x30>)
 8007a4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2240      	movs	r2, #64	; 0x40
 8007a54:	5a9b      	ldrh	r3, [r3, r2]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	b292      	uxth	r2, r2
 8007a5c:	43d2      	mvns	r2, r2
 8007a5e:	b292      	uxth	r2, r2
 8007a60:	4013      	ands	r3, r2
 8007a62:	b299      	uxth	r1, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2240      	movs	r2, #64	; 0x40
 8007a68:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b004      	add	sp, #16
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	0000bf80 	.word	0x0000bf80

08007a78 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a78:	b084      	sub	sp, #16
 8007a7a:	b590      	push	{r4, r7, lr}
 8007a7c:	46c6      	mov	lr, r8
 8007a7e:	b500      	push	{lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	2004      	movs	r0, #4
 8007a88:	2410      	movs	r4, #16
 8007a8a:	46a4      	mov	ip, r4
 8007a8c:	2408      	movs	r4, #8
 8007a8e:	46a0      	mov	r8, r4
 8007a90:	44b8      	add	r8, r7
 8007a92:	44c4      	add	ip, r8
 8007a94:	4460      	add	r0, ip
 8007a96:	6001      	str	r1, [r0, #0]
 8007a98:	6042      	str	r2, [r0, #4]
 8007a9a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2240      	movs	r2, #64	; 0x40
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2240      	movs	r2, #64	; 0x40
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2244      	movs	r2, #68	; 0x44
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2250      	movs	r2, #80	; 0x50
 8007ab8:	2100      	movs	r1, #0
 8007aba:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	0018      	movs	r0, r3
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	b002      	add	sp, #8
 8007ac4:	bc80      	pop	{r7}
 8007ac6:	46b8      	mov	r8, r7
 8007ac8:	bc90      	pop	{r4, r7}
 8007aca:	bc08      	pop	{r3}
 8007acc:	b004      	add	sp, #16
 8007ace:	4718      	bx	r3

08007ad0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b09c      	sub	sp, #112	; 0x70
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ada:	236f      	movs	r3, #111	; 0x6f
 8007adc:	18fb      	adds	r3, r7, r3
 8007ade:	2200      	movs	r2, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	18d3      	adds	r3, r2, r3
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	236c      	movs	r3, #108	; 0x6c
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	49cf      	ldr	r1, [pc, #828]	; (8007e34 <USB_ActivateEndpoint+0x364>)
 8007af6:	400a      	ands	r2, r1
 8007af8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	78db      	ldrb	r3, [r3, #3]
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d017      	beq.n	8007b32 <USB_ActivateEndpoint+0x62>
 8007b02:	dc28      	bgt.n	8007b56 <USB_ActivateEndpoint+0x86>
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d00e      	beq.n	8007b26 <USB_ActivateEndpoint+0x56>
 8007b08:	dc25      	bgt.n	8007b56 <USB_ActivateEndpoint+0x86>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <USB_ActivateEndpoint+0x44>
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d018      	beq.n	8007b44 <USB_ActivateEndpoint+0x74>
 8007b12:	e020      	b.n	8007b56 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007b14:	226c      	movs	r2, #108	; 0x6c
 8007b16:	18bb      	adds	r3, r7, r2
 8007b18:	18ba      	adds	r2, r7, r2
 8007b1a:	8812      	ldrh	r2, [r2, #0]
 8007b1c:	2180      	movs	r1, #128	; 0x80
 8007b1e:	0089      	lsls	r1, r1, #2
 8007b20:	430a      	orrs	r2, r1
 8007b22:	801a      	strh	r2, [r3, #0]
      break;
 8007b24:	e01c      	b.n	8007b60 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8007b26:	226c      	movs	r2, #108	; 0x6c
 8007b28:	18bb      	adds	r3, r7, r2
 8007b2a:	18ba      	adds	r2, r7, r2
 8007b2c:	8812      	ldrh	r2, [r2, #0]
 8007b2e:	801a      	strh	r2, [r3, #0]
      break;
 8007b30:	e016      	b.n	8007b60 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007b32:	226c      	movs	r2, #108	; 0x6c
 8007b34:	18bb      	adds	r3, r7, r2
 8007b36:	18ba      	adds	r2, r7, r2
 8007b38:	8812      	ldrh	r2, [r2, #0]
 8007b3a:	21c0      	movs	r1, #192	; 0xc0
 8007b3c:	00c9      	lsls	r1, r1, #3
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	801a      	strh	r2, [r3, #0]
      break;
 8007b42:	e00d      	b.n	8007b60 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007b44:	226c      	movs	r2, #108	; 0x6c
 8007b46:	18bb      	adds	r3, r7, r2
 8007b48:	18ba      	adds	r2, r7, r2
 8007b4a:	8812      	ldrh	r2, [r2, #0]
 8007b4c:	2180      	movs	r1, #128	; 0x80
 8007b4e:	00c9      	lsls	r1, r1, #3
 8007b50:	430a      	orrs	r2, r1
 8007b52:	801a      	strh	r2, [r3, #0]
      break;
 8007b54:	e004      	b.n	8007b60 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8007b56:	236f      	movs	r3, #111	; 0x6f
 8007b58:	18fb      	adds	r3, r7, r3
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	701a      	strb	r2, [r3, #0]
      break;
 8007b5e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	18d3      	adds	r3, r2, r3
 8007b6a:	226c      	movs	r2, #108	; 0x6c
 8007b6c:	18ba      	adds	r2, r7, r2
 8007b6e:	8812      	ldrh	r2, [r2, #0]
 8007b70:	49b1      	ldr	r1, [pc, #708]	; (8007e38 <USB_ActivateEndpoint+0x368>)
 8007b72:	430a      	orrs	r2, r1
 8007b74:	b292      	uxth	r2, r2
 8007b76:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	18d3      	adds	r3, r2, r3
 8007b82:	881b      	ldrh	r3, [r3, #0]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	b21b      	sxth	r3, r3
 8007b88:	4aac      	ldr	r2, [pc, #688]	; (8007e3c <USB_ActivateEndpoint+0x36c>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	b21a      	sxth	r2, r3
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	b21b      	sxth	r3, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	b21a      	sxth	r2, r3
 8007b98:	2166      	movs	r1, #102	; 0x66
 8007b9a:	187b      	adds	r3, r7, r1
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	18d3      	adds	r3, r2, r3
 8007ba8:	187a      	adds	r2, r7, r1
 8007baa:	8812      	ldrh	r2, [r2, #0]
 8007bac:	49a2      	ldr	r1, [pc, #648]	; (8007e38 <USB_ActivateEndpoint+0x368>)
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	b292      	uxth	r2, r2
 8007bb2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	7b1b      	ldrb	r3, [r3, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d000      	beq.n	8007bbe <USB_ActivateEndpoint+0xee>
 8007bbc:	e150      	b.n	8007e60 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d100      	bne.n	8007bc8 <USB_ActivateEndpoint+0xf8>
 8007bc6:	e07a      	b.n	8007cbe <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2250      	movs	r2, #80	; 0x50
 8007bd0:	5a9b      	ldrh	r3, [r3, r2]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	001a      	movs	r2, r3
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	189b      	adds	r3, r3, r2
 8007bda:	61bb      	str	r3, [r7, #24]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	00da      	lsls	r2, r3, #3
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	18d3      	adds	r3, r2, r3
 8007be6:	2280      	movs	r2, #128	; 0x80
 8007be8:	00d2      	lsls	r2, r2, #3
 8007bea:	4694      	mov	ip, r2
 8007bec:	4463      	add	r3, ip
 8007bee:	617b      	str	r3, [r7, #20]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	88db      	ldrh	r3, [r3, #6]
 8007bf4:	085b      	lsrs	r3, r3, #1
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	18db      	adds	r3, r3, r3
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	18d2      	adds	r2, r2, r3
 8007c0a:	2112      	movs	r1, #18
 8007c0c:	187b      	adds	r3, r7, r1
 8007c0e:	8812      	ldrh	r2, [r2, #0]
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	187b      	adds	r3, r7, r1
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	2240      	movs	r2, #64	; 0x40
 8007c18:	4013      	ands	r3, r2
 8007c1a:	d016      	beq.n	8007c4a <USB_ActivateEndpoint+0x17a>
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	18d3      	adds	r3, r2, r3
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	2010      	movs	r0, #16
 8007c2c:	183b      	adds	r3, r7, r0
 8007c2e:	4983      	ldr	r1, [pc, #524]	; (8007e3c <USB_ActivateEndpoint+0x36c>)
 8007c30:	400a      	ands	r2, r1
 8007c32:	801a      	strh	r2, [r3, #0]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	18d3      	adds	r3, r2, r3
 8007c3e:	183a      	adds	r2, r7, r0
 8007c40:	8812      	ldrh	r2, [r2, #0]
 8007c42:	497f      	ldr	r1, [pc, #508]	; (8007e40 <USB_ActivateEndpoint+0x370>)
 8007c44:	430a      	orrs	r2, r1
 8007c46:	b292      	uxth	r2, r2
 8007c48:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	78db      	ldrb	r3, [r3, #3]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d01d      	beq.n	8007c8e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	18d3      	adds	r3, r2, r3
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	200c      	movs	r0, #12
 8007c62:	183b      	adds	r3, r7, r0
 8007c64:	4977      	ldr	r1, [pc, #476]	; (8007e44 <USB_ActivateEndpoint+0x374>)
 8007c66:	400a      	ands	r2, r1
 8007c68:	801a      	strh	r2, [r3, #0]
 8007c6a:	183b      	adds	r3, r7, r0
 8007c6c:	183a      	adds	r2, r7, r0
 8007c6e:	8812      	ldrh	r2, [r2, #0]
 8007c70:	2120      	movs	r1, #32
 8007c72:	404a      	eors	r2, r1
 8007c74:	801a      	strh	r2, [r3, #0]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	18d3      	adds	r3, r2, r3
 8007c80:	183a      	adds	r2, r7, r0
 8007c82:	8812      	ldrh	r2, [r2, #0]
 8007c84:	496c      	ldr	r1, [pc, #432]	; (8007e38 <USB_ActivateEndpoint+0x368>)
 8007c86:	430a      	orrs	r2, r1
 8007c88:	b292      	uxth	r2, r2
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	e27a      	b.n	8008184 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	18d3      	adds	r3, r2, r3
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	200e      	movs	r0, #14
 8007c9e:	183b      	adds	r3, r7, r0
 8007ca0:	4968      	ldr	r1, [pc, #416]	; (8007e44 <USB_ActivateEndpoint+0x374>)
 8007ca2:	400a      	ands	r2, r1
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	18d3      	adds	r3, r2, r3
 8007cb0:	183a      	adds	r2, r7, r0
 8007cb2:	8812      	ldrh	r2, [r2, #0]
 8007cb4:	4960      	ldr	r1, [pc, #384]	; (8007e38 <USB_ActivateEndpoint+0x368>)
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	b292      	uxth	r2, r2
 8007cba:	801a      	strh	r2, [r3, #0]
 8007cbc:	e262      	b.n	8008184 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2250      	movs	r2, #80	; 0x50
 8007cc6:	5a9b      	ldrh	r3, [r3, r2]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	001a      	movs	r2, r3
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	189b      	adds	r3, r3, r2
 8007cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	00da      	lsls	r2, r3, #3
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cda:	18d3      	adds	r3, r2, r3
 8007cdc:	4a5a      	ldr	r2, [pc, #360]	; (8007e48 <USB_ActivateEndpoint+0x378>)
 8007cde:	4694      	mov	ip, r2
 8007ce0:	4463      	add	r3, ip
 8007ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	88db      	ldrh	r3, [r3, #6]
 8007ce8:	085b      	lsrs	r3, r3, #1
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	18db      	adds	r3, r3, r3
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2250      	movs	r2, #80	; 0x50
 8007cfc:	5a9b      	ldrh	r3, [r3, r2]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	001a      	movs	r2, r3
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	189b      	adds	r3, r3, r2
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	00da      	lsls	r2, r3, #3
 8007d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d10:	18d3      	adds	r3, r2, r3
 8007d12:	4a4e      	ldr	r2, [pc, #312]	; (8007e4c <USB_ActivateEndpoint+0x37c>)
 8007d14:	4694      	mov	ip, r2
 8007d16:	4463      	add	r3, ip
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d110      	bne.n	8007d44 <USB_ActivateEndpoint+0x274>
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	4a49      	ldr	r2, [pc, #292]	; (8007e50 <USB_ActivateEndpoint+0x380>)
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	801a      	strh	r2, [r3, #0]
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	4a46      	ldr	r2, [pc, #280]	; (8007e54 <USB_ActivateEndpoint+0x384>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	801a      	strh	r2, [r3, #0]
 8007d42:	e02b      	b.n	8007d9c <USB_ActivateEndpoint+0x2cc>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2b3e      	cmp	r3, #62	; 0x3e
 8007d4a:	d812      	bhi.n	8007d72 <USB_ActivateEndpoint+0x2a2>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	085b      	lsrs	r3, r3, #1
 8007d52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	d002      	beq.n	8007d64 <USB_ActivateEndpoint+0x294>
 8007d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d60:	3301      	adds	r3, #1
 8007d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	029b      	lsls	r3, r3, #10
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	801a      	strh	r2, [r3, #0]
 8007d70:	e014      	b.n	8007d9c <USB_ActivateEndpoint+0x2cc>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	095b      	lsrs	r3, r3, #5
 8007d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	221f      	movs	r2, #31
 8007d80:	4013      	ands	r3, r2
 8007d82:	d102      	bne.n	8007d8a <USB_ActivateEndpoint+0x2ba>
 8007d84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d86:	3b01      	subs	r3, #1
 8007d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	029b      	lsls	r3, r3, #10
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4a30      	ldr	r2, [pc, #192]	; (8007e54 <USB_ActivateEndpoint+0x384>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	18d2      	adds	r2, r2, r3
 8007da6:	2122      	movs	r1, #34	; 0x22
 8007da8:	187b      	adds	r3, r7, r1
 8007daa:	8812      	ldrh	r2, [r2, #0]
 8007dac:	801a      	strh	r2, [r3, #0]
 8007dae:	187b      	adds	r3, r7, r1
 8007db0:	881a      	ldrh	r2, [r3, #0]
 8007db2:	2380      	movs	r3, #128	; 0x80
 8007db4:	01db      	lsls	r3, r3, #7
 8007db6:	4013      	ands	r3, r2
 8007db8:	d016      	beq.n	8007de8 <USB_ActivateEndpoint+0x318>
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	18d3      	adds	r3, r2, r3
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	2020      	movs	r0, #32
 8007dca:	183b      	adds	r3, r7, r0
 8007dcc:	491b      	ldr	r1, [pc, #108]	; (8007e3c <USB_ActivateEndpoint+0x36c>)
 8007dce:	400a      	ands	r2, r1
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	18d3      	adds	r3, r2, r3
 8007ddc:	183a      	adds	r2, r7, r0
 8007dde:	8812      	ldrh	r2, [r2, #0]
 8007de0:	491d      	ldr	r1, [pc, #116]	; (8007e58 <USB_ActivateEndpoint+0x388>)
 8007de2:	430a      	orrs	r2, r1
 8007de4:	b292      	uxth	r2, r2
 8007de6:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	18d3      	adds	r3, r2, r3
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	201e      	movs	r0, #30
 8007df8:	183b      	adds	r3, r7, r0
 8007dfa:	4918      	ldr	r1, [pc, #96]	; (8007e5c <USB_ActivateEndpoint+0x38c>)
 8007dfc:	400a      	ands	r2, r1
 8007dfe:	801a      	strh	r2, [r3, #0]
 8007e00:	183b      	adds	r3, r7, r0
 8007e02:	183a      	adds	r2, r7, r0
 8007e04:	8812      	ldrh	r2, [r2, #0]
 8007e06:	2180      	movs	r1, #128	; 0x80
 8007e08:	0149      	lsls	r1, r1, #5
 8007e0a:	404a      	eors	r2, r1
 8007e0c:	801a      	strh	r2, [r3, #0]
 8007e0e:	183b      	adds	r3, r7, r0
 8007e10:	183a      	adds	r2, r7, r0
 8007e12:	8812      	ldrh	r2, [r2, #0]
 8007e14:	2180      	movs	r1, #128	; 0x80
 8007e16:	0189      	lsls	r1, r1, #6
 8007e18:	404a      	eors	r2, r1
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	18d3      	adds	r3, r2, r3
 8007e26:	183a      	adds	r2, r7, r0
 8007e28:	8812      	ldrh	r2, [r2, #0]
 8007e2a:	4903      	ldr	r1, [pc, #12]	; (8007e38 <USB_ActivateEndpoint+0x368>)
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	b292      	uxth	r2, r2
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	e1a7      	b.n	8008184 <USB_ActivateEndpoint+0x6b4>
 8007e34:	ffff898f 	.word	0xffff898f
 8007e38:	ffff8080 	.word	0xffff8080
 8007e3c:	ffff8f8f 	.word	0xffff8f8f
 8007e40:	ffff80c0 	.word	0xffff80c0
 8007e44:	ffff8fbf 	.word	0xffff8fbf
 8007e48:	00000404 	.word	0x00000404
 8007e4c:	00000406 	.word	0x00000406
 8007e50:	ffff83ff 	.word	0xffff83ff
 8007e54:	ffff8000 	.word	0xffff8000
 8007e58:	ffffc080 	.word	0xffffc080
 8007e5c:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	78db      	ldrb	r3, [r3, #3]
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d117      	bne.n	8007e98 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	18d3      	adds	r3, r2, r3
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	2062      	movs	r0, #98	; 0x62
 8007e78:	183b      	adds	r3, r7, r0
 8007e7a:	49c6      	ldr	r1, [pc, #792]	; (8008194 <USB_ActivateEndpoint+0x6c4>)
 8007e7c:	400a      	ands	r2, r1
 8007e7e:	801a      	strh	r2, [r3, #0]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	18d3      	adds	r3, r2, r3
 8007e8a:	183a      	adds	r2, r7, r0
 8007e8c:	8812      	ldrh	r2, [r2, #0]
 8007e8e:	49c2      	ldr	r1, [pc, #776]	; (8008198 <USB_ActivateEndpoint+0x6c8>)
 8007e90:	430a      	orrs	r2, r1
 8007e92:	b292      	uxth	r2, r2
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	e016      	b.n	8007ec6 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	18d3      	adds	r3, r2, r3
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	2064      	movs	r0, #100	; 0x64
 8007ea8:	183b      	adds	r3, r7, r0
 8007eaa:	49bc      	ldr	r1, [pc, #752]	; (800819c <USB_ActivateEndpoint+0x6cc>)
 8007eac:	400a      	ands	r2, r1
 8007eae:	801a      	strh	r2, [r3, #0]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	18d3      	adds	r3, r2, r3
 8007eba:	183a      	adds	r2, r7, r0
 8007ebc:	8812      	ldrh	r2, [r2, #0]
 8007ebe:	49b8      	ldr	r1, [pc, #736]	; (80081a0 <USB_ActivateEndpoint+0x6d0>)
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	b292      	uxth	r2, r2
 8007ec4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2250      	movs	r2, #80	; 0x50
 8007ece:	5a9b      	ldrh	r3, [r3, r2]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	001a      	movs	r2, r3
 8007ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed6:	189b      	adds	r3, r3, r2
 8007ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	00da      	lsls	r2, r3, #3
 8007ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ee2:	18d3      	adds	r3, r2, r3
 8007ee4:	2280      	movs	r2, #128	; 0x80
 8007ee6:	00d2      	lsls	r2, r2, #3
 8007ee8:	4694      	mov	ip, r2
 8007eea:	4463      	add	r3, ip
 8007eec:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	891b      	ldrh	r3, [r3, #8]
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	18db      	adds	r3, r3, r3
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	657b      	str	r3, [r7, #84]	; 0x54
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2250      	movs	r2, #80	; 0x50
 8007f06:	5a9b      	ldrh	r3, [r3, r2]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	001a      	movs	r2, r3
 8007f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f0e:	189b      	adds	r3, r3, r2
 8007f10:	657b      	str	r3, [r7, #84]	; 0x54
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	00da      	lsls	r2, r3, #3
 8007f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f1a:	18d3      	adds	r3, r2, r3
 8007f1c:	4aa1      	ldr	r2, [pc, #644]	; (80081a4 <USB_ActivateEndpoint+0x6d4>)
 8007f1e:	4694      	mov	ip, r2
 8007f20:	4463      	add	r3, ip
 8007f22:	653b      	str	r3, [r7, #80]	; 0x50
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	895b      	ldrh	r3, [r3, #10]
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	18db      	adds	r3, r3, r3
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	785b      	ldrb	r3, [r3, #1]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d000      	beq.n	8007f3e <USB_ActivateEndpoint+0x46e>
 8007f3c:	e087      	b.n	800804e <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	18d2      	adds	r2, r2, r3
 8007f48:	2140      	movs	r1, #64	; 0x40
 8007f4a:	187b      	adds	r3, r7, r1
 8007f4c:	8812      	ldrh	r2, [r2, #0]
 8007f4e:	801a      	strh	r2, [r3, #0]
 8007f50:	187b      	adds	r3, r7, r1
 8007f52:	881a      	ldrh	r2, [r3, #0]
 8007f54:	2380      	movs	r3, #128	; 0x80
 8007f56:	01db      	lsls	r3, r3, #7
 8007f58:	4013      	ands	r3, r2
 8007f5a:	d016      	beq.n	8007f8a <USB_ActivateEndpoint+0x4ba>
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	18d3      	adds	r3, r2, r3
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	203e      	movs	r0, #62	; 0x3e
 8007f6c:	183b      	adds	r3, r7, r0
 8007f6e:	4989      	ldr	r1, [pc, #548]	; (8008194 <USB_ActivateEndpoint+0x6c4>)
 8007f70:	400a      	ands	r2, r1
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	18d3      	adds	r3, r2, r3
 8007f7e:	183a      	adds	r2, r7, r0
 8007f80:	8812      	ldrh	r2, [r2, #0]
 8007f82:	4989      	ldr	r1, [pc, #548]	; (80081a8 <USB_ActivateEndpoint+0x6d8>)
 8007f84:	430a      	orrs	r2, r1
 8007f86:	b292      	uxth	r2, r2
 8007f88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	18d2      	adds	r2, r2, r3
 8007f94:	213c      	movs	r1, #60	; 0x3c
 8007f96:	187b      	adds	r3, r7, r1
 8007f98:	8812      	ldrh	r2, [r2, #0]
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	187b      	adds	r3, r7, r1
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	2240      	movs	r2, #64	; 0x40
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	d016      	beq.n	8007fd4 <USB_ActivateEndpoint+0x504>
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	18d3      	adds	r3, r2, r3
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	203a      	movs	r0, #58	; 0x3a
 8007fb6:	183b      	adds	r3, r7, r0
 8007fb8:	4976      	ldr	r1, [pc, #472]	; (8008194 <USB_ActivateEndpoint+0x6c4>)
 8007fba:	400a      	ands	r2, r1
 8007fbc:	801a      	strh	r2, [r3, #0]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	18d3      	adds	r3, r2, r3
 8007fc8:	183a      	adds	r2, r7, r0
 8007fca:	8812      	ldrh	r2, [r2, #0]
 8007fcc:	4977      	ldr	r1, [pc, #476]	; (80081ac <USB_ActivateEndpoint+0x6dc>)
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	b292      	uxth	r2, r2
 8007fd2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	18d3      	adds	r3, r2, r3
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	2038      	movs	r0, #56	; 0x38
 8007fe4:	183b      	adds	r3, r7, r0
 8007fe6:	4972      	ldr	r1, [pc, #456]	; (80081b0 <USB_ActivateEndpoint+0x6e0>)
 8007fe8:	400a      	ands	r2, r1
 8007fea:	801a      	strh	r2, [r3, #0]
 8007fec:	183b      	adds	r3, r7, r0
 8007fee:	183a      	adds	r2, r7, r0
 8007ff0:	8812      	ldrh	r2, [r2, #0]
 8007ff2:	2180      	movs	r1, #128	; 0x80
 8007ff4:	0149      	lsls	r1, r1, #5
 8007ff6:	404a      	eors	r2, r1
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	183b      	adds	r3, r7, r0
 8007ffc:	183a      	adds	r2, r7, r0
 8007ffe:	8812      	ldrh	r2, [r2, #0]
 8008000:	2180      	movs	r1, #128	; 0x80
 8008002:	0189      	lsls	r1, r1, #6
 8008004:	404a      	eors	r2, r1
 8008006:	801a      	strh	r2, [r3, #0]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	18d3      	adds	r3, r2, r3
 8008012:	183a      	adds	r2, r7, r0
 8008014:	8812      	ldrh	r2, [r2, #0]
 8008016:	4962      	ldr	r1, [pc, #392]	; (80081a0 <USB_ActivateEndpoint+0x6d0>)
 8008018:	430a      	orrs	r2, r1
 800801a:	b292      	uxth	r2, r2
 800801c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	18d3      	adds	r3, r2, r3
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29a      	uxth	r2, r3
 800802c:	2036      	movs	r0, #54	; 0x36
 800802e:	183b      	adds	r3, r7, r0
 8008030:	4960      	ldr	r1, [pc, #384]	; (80081b4 <USB_ActivateEndpoint+0x6e4>)
 8008032:	400a      	ands	r2, r1
 8008034:	801a      	strh	r2, [r3, #0]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	18d3      	adds	r3, r2, r3
 8008040:	183a      	adds	r2, r7, r0
 8008042:	8812      	ldrh	r2, [r2, #0]
 8008044:	4956      	ldr	r1, [pc, #344]	; (80081a0 <USB_ActivateEndpoint+0x6d0>)
 8008046:	430a      	orrs	r2, r1
 8008048:	b292      	uxth	r2, r2
 800804a:	801a      	strh	r2, [r3, #0]
 800804c:	e09a      	b.n	8008184 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	18d2      	adds	r2, r2, r3
 8008058:	214e      	movs	r1, #78	; 0x4e
 800805a:	187b      	adds	r3, r7, r1
 800805c:	8812      	ldrh	r2, [r2, #0]
 800805e:	801a      	strh	r2, [r3, #0]
 8008060:	187b      	adds	r3, r7, r1
 8008062:	881a      	ldrh	r2, [r3, #0]
 8008064:	2380      	movs	r3, #128	; 0x80
 8008066:	01db      	lsls	r3, r3, #7
 8008068:	4013      	ands	r3, r2
 800806a:	d016      	beq.n	800809a <USB_ActivateEndpoint+0x5ca>
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	18d3      	adds	r3, r2, r3
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29a      	uxth	r2, r3
 800807a:	204c      	movs	r0, #76	; 0x4c
 800807c:	183b      	adds	r3, r7, r0
 800807e:	4945      	ldr	r1, [pc, #276]	; (8008194 <USB_ActivateEndpoint+0x6c4>)
 8008080:	400a      	ands	r2, r1
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	18d3      	adds	r3, r2, r3
 800808e:	183a      	adds	r2, r7, r0
 8008090:	8812      	ldrh	r2, [r2, #0]
 8008092:	4945      	ldr	r1, [pc, #276]	; (80081a8 <USB_ActivateEndpoint+0x6d8>)
 8008094:	430a      	orrs	r2, r1
 8008096:	b292      	uxth	r2, r2
 8008098:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	18d2      	adds	r2, r2, r3
 80080a4:	214a      	movs	r1, #74	; 0x4a
 80080a6:	187b      	adds	r3, r7, r1
 80080a8:	8812      	ldrh	r2, [r2, #0]
 80080aa:	801a      	strh	r2, [r3, #0]
 80080ac:	187b      	adds	r3, r7, r1
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	2240      	movs	r2, #64	; 0x40
 80080b2:	4013      	ands	r3, r2
 80080b4:	d016      	beq.n	80080e4 <USB_ActivateEndpoint+0x614>
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	18d3      	adds	r3, r2, r3
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	2048      	movs	r0, #72	; 0x48
 80080c6:	183b      	adds	r3, r7, r0
 80080c8:	4932      	ldr	r1, [pc, #200]	; (8008194 <USB_ActivateEndpoint+0x6c4>)
 80080ca:	400a      	ands	r2, r1
 80080cc:	801a      	strh	r2, [r3, #0]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	18d3      	adds	r3, r2, r3
 80080d8:	183a      	adds	r2, r7, r0
 80080da:	8812      	ldrh	r2, [r2, #0]
 80080dc:	4933      	ldr	r1, [pc, #204]	; (80081ac <USB_ActivateEndpoint+0x6dc>)
 80080de:	430a      	orrs	r2, r1
 80080e0:	b292      	uxth	r2, r2
 80080e2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	78db      	ldrb	r3, [r3, #3]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d01d      	beq.n	8008128 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	18d3      	adds	r3, r2, r3
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	2044      	movs	r0, #68	; 0x44
 80080fc:	183b      	adds	r3, r7, r0
 80080fe:	492d      	ldr	r1, [pc, #180]	; (80081b4 <USB_ActivateEndpoint+0x6e4>)
 8008100:	400a      	ands	r2, r1
 8008102:	801a      	strh	r2, [r3, #0]
 8008104:	183b      	adds	r3, r7, r0
 8008106:	183a      	adds	r2, r7, r0
 8008108:	8812      	ldrh	r2, [r2, #0]
 800810a:	2120      	movs	r1, #32
 800810c:	404a      	eors	r2, r1
 800810e:	801a      	strh	r2, [r3, #0]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	18d3      	adds	r3, r2, r3
 800811a:	183a      	adds	r2, r7, r0
 800811c:	8812      	ldrh	r2, [r2, #0]
 800811e:	4920      	ldr	r1, [pc, #128]	; (80081a0 <USB_ActivateEndpoint+0x6d0>)
 8008120:	430a      	orrs	r2, r1
 8008122:	b292      	uxth	r2, r2
 8008124:	801a      	strh	r2, [r3, #0]
 8008126:	e016      	b.n	8008156 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	18d3      	adds	r3, r2, r3
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29a      	uxth	r2, r3
 8008136:	2046      	movs	r0, #70	; 0x46
 8008138:	183b      	adds	r3, r7, r0
 800813a:	491e      	ldr	r1, [pc, #120]	; (80081b4 <USB_ActivateEndpoint+0x6e4>)
 800813c:	400a      	ands	r2, r1
 800813e:	801a      	strh	r2, [r3, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	18d3      	adds	r3, r2, r3
 800814a:	183a      	adds	r2, r7, r0
 800814c:	8812      	ldrh	r2, [r2, #0]
 800814e:	4914      	ldr	r1, [pc, #80]	; (80081a0 <USB_ActivateEndpoint+0x6d0>)
 8008150:	430a      	orrs	r2, r1
 8008152:	b292      	uxth	r2, r2
 8008154:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	18d3      	adds	r3, r2, r3
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29a      	uxth	r2, r3
 8008164:	2042      	movs	r0, #66	; 0x42
 8008166:	183b      	adds	r3, r7, r0
 8008168:	4911      	ldr	r1, [pc, #68]	; (80081b0 <USB_ActivateEndpoint+0x6e0>)
 800816a:	400a      	ands	r2, r1
 800816c:	801a      	strh	r2, [r3, #0]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	18d3      	adds	r3, r2, r3
 8008178:	183a      	adds	r2, r7, r0
 800817a:	8812      	ldrh	r2, [r2, #0]
 800817c:	4908      	ldr	r1, [pc, #32]	; (80081a0 <USB_ActivateEndpoint+0x6d0>)
 800817e:	430a      	orrs	r2, r1
 8008180:	b292      	uxth	r2, r2
 8008182:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8008184:	236f      	movs	r3, #111	; 0x6f
 8008186:	18fb      	adds	r3, r7, r3
 8008188:	781b      	ldrb	r3, [r3, #0]
}
 800818a:	0018      	movs	r0, r3
 800818c:	46bd      	mov	sp, r7
 800818e:	b01c      	add	sp, #112	; 0x70
 8008190:	bd80      	pop	{r7, pc}
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	ffff8f8f 	.word	0xffff8f8f
 8008198:	ffff8180 	.word	0xffff8180
 800819c:	ffff8e8f 	.word	0xffff8e8f
 80081a0:	ffff8080 	.word	0xffff8080
 80081a4:	00000404 	.word	0x00000404
 80081a8:	ffffc080 	.word	0xffffc080
 80081ac:	ffff80c0 	.word	0xffff80c0
 80081b0:	ffffbf8f 	.word	0xffffbf8f
 80081b4:	ffff8fbf 	.word	0xffff8fbf

080081b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08c      	sub	sp, #48	; 0x30
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	7b1b      	ldrb	r3, [r3, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d000      	beq.n	80081cc <USB_DeactivateEndpoint+0x14>
 80081ca:	e07e      	b.n	80082ca <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d03c      	beq.n	800824e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	18d2      	adds	r2, r2, r3
 80081de:	210c      	movs	r1, #12
 80081e0:	187b      	adds	r3, r7, r1
 80081e2:	8812      	ldrh	r2, [r2, #0]
 80081e4:	801a      	strh	r2, [r3, #0]
 80081e6:	187b      	adds	r3, r7, r1
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	2240      	movs	r2, #64	; 0x40
 80081ec:	4013      	ands	r3, r2
 80081ee:	d016      	beq.n	800821e <USB_DeactivateEndpoint+0x66>
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	18d3      	adds	r3, r2, r3
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	200a      	movs	r0, #10
 8008200:	183b      	adds	r3, r7, r0
 8008202:	49c7      	ldr	r1, [pc, #796]	; (8008520 <USB_DeactivateEndpoint+0x368>)
 8008204:	400a      	ands	r2, r1
 8008206:	801a      	strh	r2, [r3, #0]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	18d3      	adds	r3, r2, r3
 8008212:	183a      	adds	r2, r7, r0
 8008214:	8812      	ldrh	r2, [r2, #0]
 8008216:	49c3      	ldr	r1, [pc, #780]	; (8008524 <USB_DeactivateEndpoint+0x36c>)
 8008218:	430a      	orrs	r2, r1
 800821a:	b292      	uxth	r2, r2
 800821c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	18d3      	adds	r3, r2, r3
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	b29a      	uxth	r2, r3
 800822c:	2008      	movs	r0, #8
 800822e:	183b      	adds	r3, r7, r0
 8008230:	49bd      	ldr	r1, [pc, #756]	; (8008528 <USB_DeactivateEndpoint+0x370>)
 8008232:	400a      	ands	r2, r1
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	18d3      	adds	r3, r2, r3
 8008240:	183a      	adds	r2, r7, r0
 8008242:	8812      	ldrh	r2, [r2, #0]
 8008244:	49b9      	ldr	r1, [pc, #740]	; (800852c <USB_DeactivateEndpoint+0x374>)
 8008246:	430a      	orrs	r2, r1
 8008248:	b292      	uxth	r2, r2
 800824a:	801a      	strh	r2, [r3, #0]
 800824c:	e163      	b.n	8008516 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	18d2      	adds	r2, r2, r3
 8008258:	2112      	movs	r1, #18
 800825a:	187b      	adds	r3, r7, r1
 800825c:	8812      	ldrh	r2, [r2, #0]
 800825e:	801a      	strh	r2, [r3, #0]
 8008260:	187b      	adds	r3, r7, r1
 8008262:	881a      	ldrh	r2, [r3, #0]
 8008264:	2380      	movs	r3, #128	; 0x80
 8008266:	01db      	lsls	r3, r3, #7
 8008268:	4013      	ands	r3, r2
 800826a:	d016      	beq.n	800829a <USB_DeactivateEndpoint+0xe2>
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	18d3      	adds	r3, r2, r3
 8008276:	881b      	ldrh	r3, [r3, #0]
 8008278:	b29a      	uxth	r2, r3
 800827a:	2010      	movs	r0, #16
 800827c:	183b      	adds	r3, r7, r0
 800827e:	49a8      	ldr	r1, [pc, #672]	; (8008520 <USB_DeactivateEndpoint+0x368>)
 8008280:	400a      	ands	r2, r1
 8008282:	801a      	strh	r2, [r3, #0]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	18d3      	adds	r3, r2, r3
 800828e:	183a      	adds	r2, r7, r0
 8008290:	8812      	ldrh	r2, [r2, #0]
 8008292:	49a7      	ldr	r1, [pc, #668]	; (8008530 <USB_DeactivateEndpoint+0x378>)
 8008294:	430a      	orrs	r2, r1
 8008296:	b292      	uxth	r2, r2
 8008298:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	18d3      	adds	r3, r2, r3
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	200e      	movs	r0, #14
 80082aa:	183b      	adds	r3, r7, r0
 80082ac:	49a1      	ldr	r1, [pc, #644]	; (8008534 <USB_DeactivateEndpoint+0x37c>)
 80082ae:	400a      	ands	r2, r1
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	18d3      	adds	r3, r2, r3
 80082bc:	183a      	adds	r2, r7, r0
 80082be:	8812      	ldrh	r2, [r2, #0]
 80082c0:	499a      	ldr	r1, [pc, #616]	; (800852c <USB_DeactivateEndpoint+0x374>)
 80082c2:	430a      	orrs	r2, r1
 80082c4:	b292      	uxth	r2, r2
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	e125      	b.n	8008516 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d000      	beq.n	80082d4 <USB_DeactivateEndpoint+0x11c>
 80082d2:	e090      	b.n	80083f6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	18d2      	adds	r2, r2, r3
 80082de:	2120      	movs	r1, #32
 80082e0:	187b      	adds	r3, r7, r1
 80082e2:	8812      	ldrh	r2, [r2, #0]
 80082e4:	801a      	strh	r2, [r3, #0]
 80082e6:	187b      	adds	r3, r7, r1
 80082e8:	881a      	ldrh	r2, [r3, #0]
 80082ea:	2380      	movs	r3, #128	; 0x80
 80082ec:	01db      	lsls	r3, r3, #7
 80082ee:	4013      	ands	r3, r2
 80082f0:	d016      	beq.n	8008320 <USB_DeactivateEndpoint+0x168>
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	18d3      	adds	r3, r2, r3
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29a      	uxth	r2, r3
 8008300:	201e      	movs	r0, #30
 8008302:	183b      	adds	r3, r7, r0
 8008304:	4986      	ldr	r1, [pc, #536]	; (8008520 <USB_DeactivateEndpoint+0x368>)
 8008306:	400a      	ands	r2, r1
 8008308:	801a      	strh	r2, [r3, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	18d3      	adds	r3, r2, r3
 8008314:	183a      	adds	r2, r7, r0
 8008316:	8812      	ldrh	r2, [r2, #0]
 8008318:	4985      	ldr	r1, [pc, #532]	; (8008530 <USB_DeactivateEndpoint+0x378>)
 800831a:	430a      	orrs	r2, r1
 800831c:	b292      	uxth	r2, r2
 800831e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	18d2      	adds	r2, r2, r3
 800832a:	211c      	movs	r1, #28
 800832c:	187b      	adds	r3, r7, r1
 800832e:	8812      	ldrh	r2, [r2, #0]
 8008330:	801a      	strh	r2, [r3, #0]
 8008332:	187b      	adds	r3, r7, r1
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	2240      	movs	r2, #64	; 0x40
 8008338:	4013      	ands	r3, r2
 800833a:	d016      	beq.n	800836a <USB_DeactivateEndpoint+0x1b2>
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	18d3      	adds	r3, r2, r3
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	b29a      	uxth	r2, r3
 800834a:	201a      	movs	r0, #26
 800834c:	183b      	adds	r3, r7, r0
 800834e:	4974      	ldr	r1, [pc, #464]	; (8008520 <USB_DeactivateEndpoint+0x368>)
 8008350:	400a      	ands	r2, r1
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	18d3      	adds	r3, r2, r3
 800835e:	183a      	adds	r2, r7, r0
 8008360:	8812      	ldrh	r2, [r2, #0]
 8008362:	4970      	ldr	r1, [pc, #448]	; (8008524 <USB_DeactivateEndpoint+0x36c>)
 8008364:	430a      	orrs	r2, r1
 8008366:	b292      	uxth	r2, r2
 8008368:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	18d3      	adds	r3, r2, r3
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	b29a      	uxth	r2, r3
 8008378:	2018      	movs	r0, #24
 800837a:	183b      	adds	r3, r7, r0
 800837c:	4968      	ldr	r1, [pc, #416]	; (8008520 <USB_DeactivateEndpoint+0x368>)
 800837e:	400a      	ands	r2, r1
 8008380:	801a      	strh	r2, [r3, #0]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	18d3      	adds	r3, r2, r3
 800838c:	183a      	adds	r2, r7, r0
 800838e:	8812      	ldrh	r2, [r2, #0]
 8008390:	4964      	ldr	r1, [pc, #400]	; (8008524 <USB_DeactivateEndpoint+0x36c>)
 8008392:	430a      	orrs	r2, r1
 8008394:	b292      	uxth	r2, r2
 8008396:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	18d3      	adds	r3, r2, r3
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	2016      	movs	r0, #22
 80083a8:	183b      	adds	r3, r7, r0
 80083aa:	4962      	ldr	r1, [pc, #392]	; (8008534 <USB_DeactivateEndpoint+0x37c>)
 80083ac:	400a      	ands	r2, r1
 80083ae:	801a      	strh	r2, [r3, #0]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	18d3      	adds	r3, r2, r3
 80083ba:	183a      	adds	r2, r7, r0
 80083bc:	8812      	ldrh	r2, [r2, #0]
 80083be:	495b      	ldr	r1, [pc, #364]	; (800852c <USB_DeactivateEndpoint+0x374>)
 80083c0:	430a      	orrs	r2, r1
 80083c2:	b292      	uxth	r2, r2
 80083c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	18d3      	adds	r3, r2, r3
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	2014      	movs	r0, #20
 80083d6:	183b      	adds	r3, r7, r0
 80083d8:	4953      	ldr	r1, [pc, #332]	; (8008528 <USB_DeactivateEndpoint+0x370>)
 80083da:	400a      	ands	r2, r1
 80083dc:	801a      	strh	r2, [r3, #0]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	18d3      	adds	r3, r2, r3
 80083e8:	183a      	adds	r2, r7, r0
 80083ea:	8812      	ldrh	r2, [r2, #0]
 80083ec:	494f      	ldr	r1, [pc, #316]	; (800852c <USB_DeactivateEndpoint+0x374>)
 80083ee:	430a      	orrs	r2, r1
 80083f0:	b292      	uxth	r2, r2
 80083f2:	801a      	strh	r2, [r3, #0]
 80083f4:	e08f      	b.n	8008516 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	18d2      	adds	r2, r2, r3
 8008400:	212e      	movs	r1, #46	; 0x2e
 8008402:	187b      	adds	r3, r7, r1
 8008404:	8812      	ldrh	r2, [r2, #0]
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	187b      	adds	r3, r7, r1
 800840a:	881a      	ldrh	r2, [r3, #0]
 800840c:	2380      	movs	r3, #128	; 0x80
 800840e:	01db      	lsls	r3, r3, #7
 8008410:	4013      	ands	r3, r2
 8008412:	d016      	beq.n	8008442 <USB_DeactivateEndpoint+0x28a>
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	18d3      	adds	r3, r2, r3
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	b29a      	uxth	r2, r3
 8008422:	202c      	movs	r0, #44	; 0x2c
 8008424:	183b      	adds	r3, r7, r0
 8008426:	493e      	ldr	r1, [pc, #248]	; (8008520 <USB_DeactivateEndpoint+0x368>)
 8008428:	400a      	ands	r2, r1
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	18d3      	adds	r3, r2, r3
 8008436:	183a      	adds	r2, r7, r0
 8008438:	8812      	ldrh	r2, [r2, #0]
 800843a:	493d      	ldr	r1, [pc, #244]	; (8008530 <USB_DeactivateEndpoint+0x378>)
 800843c:	430a      	orrs	r2, r1
 800843e:	b292      	uxth	r2, r2
 8008440:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	18d2      	adds	r2, r2, r3
 800844c:	212a      	movs	r1, #42	; 0x2a
 800844e:	187b      	adds	r3, r7, r1
 8008450:	8812      	ldrh	r2, [r2, #0]
 8008452:	801a      	strh	r2, [r3, #0]
 8008454:	187b      	adds	r3, r7, r1
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	2240      	movs	r2, #64	; 0x40
 800845a:	4013      	ands	r3, r2
 800845c:	d016      	beq.n	800848c <USB_DeactivateEndpoint+0x2d4>
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	18d3      	adds	r3, r2, r3
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29a      	uxth	r2, r3
 800846c:	2028      	movs	r0, #40	; 0x28
 800846e:	183b      	adds	r3, r7, r0
 8008470:	492b      	ldr	r1, [pc, #172]	; (8008520 <USB_DeactivateEndpoint+0x368>)
 8008472:	400a      	ands	r2, r1
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	18d3      	adds	r3, r2, r3
 8008480:	183a      	adds	r2, r7, r0
 8008482:	8812      	ldrh	r2, [r2, #0]
 8008484:	4927      	ldr	r1, [pc, #156]	; (8008524 <USB_DeactivateEndpoint+0x36c>)
 8008486:	430a      	orrs	r2, r1
 8008488:	b292      	uxth	r2, r2
 800848a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	18d3      	adds	r3, r2, r3
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29a      	uxth	r2, r3
 800849a:	2026      	movs	r0, #38	; 0x26
 800849c:	183b      	adds	r3, r7, r0
 800849e:	4920      	ldr	r1, [pc, #128]	; (8008520 <USB_DeactivateEndpoint+0x368>)
 80084a0:	400a      	ands	r2, r1
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	18d3      	adds	r3, r2, r3
 80084ae:	183a      	adds	r2, r7, r0
 80084b0:	8812      	ldrh	r2, [r2, #0]
 80084b2:	491f      	ldr	r1, [pc, #124]	; (8008530 <USB_DeactivateEndpoint+0x378>)
 80084b4:	430a      	orrs	r2, r1
 80084b6:	b292      	uxth	r2, r2
 80084b8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	18d3      	adds	r3, r2, r3
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	2024      	movs	r0, #36	; 0x24
 80084ca:	183b      	adds	r3, r7, r0
 80084cc:	4916      	ldr	r1, [pc, #88]	; (8008528 <USB_DeactivateEndpoint+0x370>)
 80084ce:	400a      	ands	r2, r1
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	18d3      	adds	r3, r2, r3
 80084dc:	183a      	adds	r2, r7, r0
 80084de:	8812      	ldrh	r2, [r2, #0]
 80084e0:	4912      	ldr	r1, [pc, #72]	; (800852c <USB_DeactivateEndpoint+0x374>)
 80084e2:	430a      	orrs	r2, r1
 80084e4:	b292      	uxth	r2, r2
 80084e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	18d3      	adds	r3, r2, r3
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	2022      	movs	r0, #34	; 0x22
 80084f8:	183b      	adds	r3, r7, r0
 80084fa:	490e      	ldr	r1, [pc, #56]	; (8008534 <USB_DeactivateEndpoint+0x37c>)
 80084fc:	400a      	ands	r2, r1
 80084fe:	801a      	strh	r2, [r3, #0]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	18d3      	adds	r3, r2, r3
 800850a:	183a      	adds	r2, r7, r0
 800850c:	8812      	ldrh	r2, [r2, #0]
 800850e:	4907      	ldr	r1, [pc, #28]	; (800852c <USB_DeactivateEndpoint+0x374>)
 8008510:	430a      	orrs	r2, r1
 8008512:	b292      	uxth	r2, r2
 8008514:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	0018      	movs	r0, r3
 800851a:	46bd      	mov	sp, r7
 800851c:	b00c      	add	sp, #48	; 0x30
 800851e:	bd80      	pop	{r7, pc}
 8008520:	ffff8f8f 	.word	0xffff8f8f
 8008524:	ffff80c0 	.word	0xffff80c0
 8008528:	ffff8fbf 	.word	0xffff8fbf
 800852c:	ffff8080 	.word	0xffff8080
 8008530:	ffffc080 	.word	0xffffc080
 8008534:	ffffbf8f 	.word	0xffffbf8f

08008538 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008538:	b590      	push	{r4, r7, lr}
 800853a:	b0c3      	sub	sp, #268	; 0x10c
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d001      	beq.n	800854e <USB_EPStartXfer+0x16>
 800854a:	f000 fcef 	bl	8008f2c <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	699a      	ldr	r2, [r3, #24]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	429a      	cmp	r2, r3
 8008558:	d905      	bls.n	8008566 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	1d7a      	adds	r2, r7, #5
 8008560:	32ff      	adds	r2, #255	; 0xff
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	e004      	b.n	8008570 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	1d7a      	adds	r2, r7, #5
 800856c:	32ff      	adds	r2, #255	; 0xff
 800856e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	7b1b      	ldrb	r3, [r3, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d125      	bne.n	80085c4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	6959      	ldr	r1, [r3, #20]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	88da      	ldrh	r2, [r3, #6]
 8008580:	1d7b      	adds	r3, r7, #5
 8008582:	33ff      	adds	r3, #255	; 0xff
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f001 f9c9 	bl	8009920 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	613b      	str	r3, [r7, #16]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2250      	movs	r2, #80	; 0x50
 8008596:	5a9b      	ldrh	r3, [r3, r2]
 8008598:	b29b      	uxth	r3, r3
 800859a:	001a      	movs	r2, r3
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	189b      	adds	r3, r3, r2
 80085a0:	613b      	str	r3, [r7, #16]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	00da      	lsls	r2, r3, #3
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	18d3      	adds	r3, r2, r3
 80085ac:	4acc      	ldr	r2, [pc, #816]	; (80088e0 <USB_EPStartXfer+0x3a8>)
 80085ae:	4694      	mov	ip, r2
 80085b0:	4463      	add	r3, ip
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	1d7b      	adds	r3, r7, #5
 80085b6:	33ff      	adds	r3, #255	; 0xff
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	801a      	strh	r2, [r3, #0]
 80085c0:	f000 fc8f 	bl	8008ee2 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	78db      	ldrb	r3, [r3, #3]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d000      	beq.n	80085ce <USB_EPStartXfer+0x96>
 80085cc:	e33a      	b.n	8008c44 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	6a1a      	ldr	r2, [r3, #32]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d800      	bhi.n	80085dc <USB_EPStartXfer+0xa4>
 80085da:	e2df      	b.n	8008b9c <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	18d3      	adds	r3, r2, r3
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	2056      	movs	r0, #86	; 0x56
 80085ec:	183b      	adds	r3, r7, r0
 80085ee:	49bd      	ldr	r1, [pc, #756]	; (80088e4 <USB_EPStartXfer+0x3ac>)
 80085f0:	400a      	ands	r2, r1
 80085f2:	801a      	strh	r2, [r3, #0]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	18d3      	adds	r3, r2, r3
 80085fe:	183a      	adds	r2, r7, r0
 8008600:	8812      	ldrh	r2, [r2, #0]
 8008602:	49b9      	ldr	r1, [pc, #740]	; (80088e8 <USB_EPStartXfer+0x3b0>)
 8008604:	430a      	orrs	r2, r1
 8008606:	b292      	uxth	r2, r2
 8008608:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	6a1a      	ldr	r2, [r3, #32]
 800860e:	1d7b      	adds	r3, r7, #5
 8008610:	33ff      	adds	r3, #255	; 0xff
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	1ad2      	subs	r2, r2, r3
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	18d3      	adds	r3, r2, r3
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	001a      	movs	r2, r3
 800862a:	2340      	movs	r3, #64	; 0x40
 800862c:	4013      	ands	r3, r2
 800862e:	d100      	bne.n	8008632 <USB_EPStartXfer+0xfa>
 8008630:	e162      	b.n	80088f8 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	633b      	str	r3, [r7, #48]	; 0x30
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	785b      	ldrb	r3, [r3, #1]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d16a      	bne.n	8008714 <USB_EPStartXfer+0x1dc>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	62bb      	str	r3, [r7, #40]	; 0x28
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2250      	movs	r2, #80	; 0x50
 8008646:	5a9b      	ldrh	r3, [r3, r2]
 8008648:	b29b      	uxth	r3, r3
 800864a:	001a      	movs	r2, r3
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	189b      	adds	r3, r3, r2
 8008650:	62bb      	str	r3, [r7, #40]	; 0x28
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	00da      	lsls	r2, r3, #3
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	18d3      	adds	r3, r2, r3
 800865c:	4aa3      	ldr	r2, [pc, #652]	; (80088ec <USB_EPStartXfer+0x3b4>)
 800865e:	4694      	mov	ip, r2
 8008660:	4463      	add	r3, ip
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
 8008664:	1d7b      	adds	r3, r7, #5
 8008666:	33ff      	adds	r3, #255	; 0xff
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d110      	bne.n	8008690 <USB_EPStartXfer+0x158>
 800866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	b29b      	uxth	r3, r3
 8008674:	4a9e      	ldr	r2, [pc, #632]	; (80088f0 <USB_EPStartXfer+0x3b8>)
 8008676:	4013      	ands	r3, r2
 8008678:	b29a      	uxth	r2, r3
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	801a      	strh	r2, [r3, #0]
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	b29b      	uxth	r3, r3
 8008684:	4a9b      	ldr	r2, [pc, #620]	; (80088f4 <USB_EPStartXfer+0x3bc>)
 8008686:	4313      	orrs	r3, r2
 8008688:	b29a      	uxth	r2, r3
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	801a      	strh	r2, [r3, #0]
 800868e:	e05c      	b.n	800874a <USB_EPStartXfer+0x212>
 8008690:	1d7b      	adds	r3, r7, #5
 8008692:	33ff      	adds	r3, #255	; 0xff
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b3e      	cmp	r3, #62	; 0x3e
 8008698:	d81c      	bhi.n	80086d4 <USB_EPStartXfer+0x19c>
 800869a:	1d7b      	adds	r3, r7, #5
 800869c:	33ff      	adds	r3, #255	; 0xff
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	085b      	lsrs	r3, r3, #1
 80086a2:	1c7a      	adds	r2, r7, #1
 80086a4:	32ff      	adds	r2, #255	; 0xff
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	1d7b      	adds	r3, r7, #5
 80086aa:	33ff      	adds	r3, #255	; 0xff
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2201      	movs	r2, #1
 80086b0:	4013      	ands	r3, r2
 80086b2:	d006      	beq.n	80086c2 <USB_EPStartXfer+0x18a>
 80086b4:	1c7b      	adds	r3, r7, #1
 80086b6:	33ff      	adds	r3, #255	; 0xff
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3301      	adds	r3, #1
 80086bc:	1c7a      	adds	r2, r7, #1
 80086be:	32ff      	adds	r2, #255	; 0xff
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	1c7b      	adds	r3, r7, #1
 80086c4:	33ff      	adds	r3, #255	; 0xff
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	029b      	lsls	r3, r3, #10
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	801a      	strh	r2, [r3, #0]
 80086d2:	e03a      	b.n	800874a <USB_EPStartXfer+0x212>
 80086d4:	1d7b      	adds	r3, r7, #5
 80086d6:	33ff      	adds	r3, #255	; 0xff
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	095b      	lsrs	r3, r3, #5
 80086dc:	1c7a      	adds	r2, r7, #1
 80086de:	32ff      	adds	r2, #255	; 0xff
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	1d7b      	adds	r3, r7, #5
 80086e4:	33ff      	adds	r3, #255	; 0xff
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	221f      	movs	r2, #31
 80086ea:	4013      	ands	r3, r2
 80086ec:	d106      	bne.n	80086fc <USB_EPStartXfer+0x1c4>
 80086ee:	1c7b      	adds	r3, r7, #1
 80086f0:	33ff      	adds	r3, #255	; 0xff
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	1c7a      	adds	r2, r7, #1
 80086f8:	32ff      	adds	r2, #255	; 0xff
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	1c7b      	adds	r3, r7, #1
 80086fe:	33ff      	adds	r3, #255	; 0xff
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	b29b      	uxth	r3, r3
 8008704:	029b      	lsls	r3, r3, #10
 8008706:	b29b      	uxth	r3, r3
 8008708:	4a7a      	ldr	r2, [pc, #488]	; (80088f4 <USB_EPStartXfer+0x3bc>)
 800870a:	4313      	orrs	r3, r2
 800870c:	b29a      	uxth	r2, r3
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	801a      	strh	r2, [r3, #0]
 8008712:	e01a      	b.n	800874a <USB_EPStartXfer+0x212>
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	785b      	ldrb	r3, [r3, #1]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d116      	bne.n	800874a <USB_EPStartXfer+0x212>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2250      	movs	r2, #80	; 0x50
 8008720:	5a9b      	ldrh	r3, [r3, r2]
 8008722:	b29b      	uxth	r3, r3
 8008724:	001a      	movs	r2, r3
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	189b      	adds	r3, r3, r2
 800872a:	633b      	str	r3, [r7, #48]	; 0x30
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	00da      	lsls	r2, r3, #3
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	18d3      	adds	r3, r2, r3
 8008736:	4a6d      	ldr	r2, [pc, #436]	; (80088ec <USB_EPStartXfer+0x3b4>)
 8008738:	4694      	mov	ip, r2
 800873a:	4463      	add	r3, ip
 800873c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800873e:	1d7b      	adds	r3, r7, #5
 8008740:	33ff      	adds	r3, #255	; 0xff
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	b29a      	uxth	r2, r3
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800874a:	2076      	movs	r0, #118	; 0x76
 800874c:	183b      	adds	r3, r7, r0
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	8952      	ldrh	r2, [r2, #10]
 8008752:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	6959      	ldr	r1, [r3, #20]
 8008758:	1d7b      	adds	r3, r7, #5
 800875a:	33ff      	adds	r3, #255	; 0xff
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	b29c      	uxth	r4, r3
 8008760:	183b      	adds	r3, r7, r0
 8008762:	881a      	ldrh	r2, [r3, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	0023      	movs	r3, r4
 8008768:	f001 f8da 	bl	8009920 <USB_WritePMA>
            ep->xfer_buff += len;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	695a      	ldr	r2, [r3, #20]
 8008770:	1d7b      	adds	r3, r7, #5
 8008772:	33ff      	adds	r3, #255	; 0xff
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	18d2      	adds	r2, r2, r3
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	6a1a      	ldr	r2, [r3, #32]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	429a      	cmp	r2, r3
 8008786:	d908      	bls.n	800879a <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	6a1a      	ldr	r2, [r3, #32]
 800878c:	1d7b      	adds	r3, r7, #5
 800878e:	33ff      	adds	r3, #255	; 0xff
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	1ad2      	subs	r2, r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	621a      	str	r2, [r3, #32]
 8008798:	e007      	b.n	80087aa <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	1d7a      	adds	r2, r7, #5
 80087a0:	32ff      	adds	r2, #255	; 0xff
 80087a2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2200      	movs	r2, #0
 80087a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	785b      	ldrb	r3, [r3, #1]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d166      	bne.n	8008880 <USB_EPStartXfer+0x348>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	61bb      	str	r3, [r7, #24]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2250      	movs	r2, #80	; 0x50
 80087ba:	5a9b      	ldrh	r3, [r3, r2]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	001a      	movs	r2, r3
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	189b      	adds	r3, r3, r2
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	00da      	lsls	r2, r3, #3
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	18d3      	adds	r3, r2, r3
 80087d0:	4a43      	ldr	r2, [pc, #268]	; (80088e0 <USB_EPStartXfer+0x3a8>)
 80087d2:	4694      	mov	ip, r2
 80087d4:	4463      	add	r3, ip
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	1d7b      	adds	r3, r7, #5
 80087da:	33ff      	adds	r3, #255	; 0xff
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d110      	bne.n	8008804 <USB_EPStartXfer+0x2cc>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4a41      	ldr	r2, [pc, #260]	; (80088f0 <USB_EPStartXfer+0x3b8>)
 80087ea:	4013      	ands	r3, r2
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	801a      	strh	r2, [r3, #0]
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	4a3e      	ldr	r2, [pc, #248]	; (80088f4 <USB_EPStartXfer+0x3bc>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	801a      	strh	r2, [r3, #0]
 8008802:	e05a      	b.n	80088ba <USB_EPStartXfer+0x382>
 8008804:	1d7b      	adds	r3, r7, #5
 8008806:	33ff      	adds	r3, #255	; 0xff
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b3e      	cmp	r3, #62	; 0x3e
 800880c:	d81a      	bhi.n	8008844 <USB_EPStartXfer+0x30c>
 800880e:	1d7b      	adds	r3, r7, #5
 8008810:	33ff      	adds	r3, #255	; 0xff
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	085b      	lsrs	r3, r3, #1
 8008816:	21fc      	movs	r1, #252	; 0xfc
 8008818:	187a      	adds	r2, r7, r1
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	1d7b      	adds	r3, r7, #5
 800881e:	33ff      	adds	r3, #255	; 0xff
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2201      	movs	r2, #1
 8008824:	4013      	ands	r3, r2
 8008826:	d004      	beq.n	8008832 <USB_EPStartXfer+0x2fa>
 8008828:	187b      	adds	r3, r7, r1
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3301      	adds	r3, #1
 800882e:	187a      	adds	r2, r7, r1
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	23fc      	movs	r3, #252	; 0xfc
 8008834:	18fb      	adds	r3, r7, r3
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	b29b      	uxth	r3, r3
 800883a:	029b      	lsls	r3, r3, #10
 800883c:	b29a      	uxth	r2, r3
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	e03a      	b.n	80088ba <USB_EPStartXfer+0x382>
 8008844:	1d7b      	adds	r3, r7, #5
 8008846:	33ff      	adds	r3, #255	; 0xff
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	095b      	lsrs	r3, r3, #5
 800884c:	21fc      	movs	r1, #252	; 0xfc
 800884e:	187a      	adds	r2, r7, r1
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	1d7b      	adds	r3, r7, #5
 8008854:	33ff      	adds	r3, #255	; 0xff
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	221f      	movs	r2, #31
 800885a:	4013      	ands	r3, r2
 800885c:	d104      	bne.n	8008868 <USB_EPStartXfer+0x330>
 800885e:	187b      	adds	r3, r7, r1
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3b01      	subs	r3, #1
 8008864:	187a      	adds	r2, r7, r1
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	23fc      	movs	r3, #252	; 0xfc
 800886a:	18fb      	adds	r3, r7, r3
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	b29b      	uxth	r3, r3
 8008870:	029b      	lsls	r3, r3, #10
 8008872:	b29b      	uxth	r3, r3
 8008874:	4a1f      	ldr	r2, [pc, #124]	; (80088f4 <USB_EPStartXfer+0x3bc>)
 8008876:	4313      	orrs	r3, r2
 8008878:	b29a      	uxth	r2, r3
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	801a      	strh	r2, [r3, #0]
 800887e:	e01c      	b.n	80088ba <USB_EPStartXfer+0x382>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	785b      	ldrb	r3, [r3, #1]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d118      	bne.n	80088ba <USB_EPStartXfer+0x382>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	623b      	str	r3, [r7, #32]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2250      	movs	r2, #80	; 0x50
 8008890:	5a9b      	ldrh	r3, [r3, r2]
 8008892:	b29b      	uxth	r3, r3
 8008894:	001a      	movs	r2, r3
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	189b      	adds	r3, r3, r2
 800889a:	623b      	str	r3, [r7, #32]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	00da      	lsls	r2, r3, #3
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	18d3      	adds	r3, r2, r3
 80088a6:	4a0e      	ldr	r2, [pc, #56]	; (80088e0 <USB_EPStartXfer+0x3a8>)
 80088a8:	4694      	mov	ip, r2
 80088aa:	4463      	add	r3, ip
 80088ac:	61fb      	str	r3, [r7, #28]
 80088ae:	1d7b      	adds	r3, r7, #5
 80088b0:	33ff      	adds	r3, #255	; 0xff
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80088ba:	2076      	movs	r0, #118	; 0x76
 80088bc:	183b      	adds	r3, r7, r0
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	8912      	ldrh	r2, [r2, #8]
 80088c2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	6959      	ldr	r1, [r3, #20]
 80088c8:	1d7b      	adds	r3, r7, #5
 80088ca:	33ff      	adds	r3, #255	; 0xff
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	b29c      	uxth	r4, r3
 80088d0:	183b      	adds	r3, r7, r0
 80088d2:	881a      	ldrh	r2, [r3, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	0023      	movs	r3, r4
 80088d8:	f001 f822 	bl	8009920 <USB_WritePMA>
 80088dc:	e301      	b.n	8008ee2 <USB_EPStartXfer+0x9aa>
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	00000402 	.word	0x00000402
 80088e4:	ffff8f8f 	.word	0xffff8f8f
 80088e8:	ffff8180 	.word	0xffff8180
 80088ec:	00000406 	.word	0x00000406
 80088f0:	ffff83ff 	.word	0xffff83ff
 80088f4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	785b      	ldrb	r3, [r3, #1]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d166      	bne.n	80089ce <USB_EPStartXfer+0x496>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	64bb      	str	r3, [r7, #72]	; 0x48
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2250      	movs	r2, #80	; 0x50
 8008908:	5a9b      	ldrh	r3, [r3, r2]
 800890a:	b29b      	uxth	r3, r3
 800890c:	001a      	movs	r2, r3
 800890e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008910:	189b      	adds	r3, r3, r2
 8008912:	64bb      	str	r3, [r7, #72]	; 0x48
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	00da      	lsls	r2, r3, #3
 800891a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800891c:	18d3      	adds	r3, r2, r3
 800891e:	4ac3      	ldr	r2, [pc, #780]	; (8008c2c <USB_EPStartXfer+0x6f4>)
 8008920:	4694      	mov	ip, r2
 8008922:	4463      	add	r3, ip
 8008924:	647b      	str	r3, [r7, #68]	; 0x44
 8008926:	1d7b      	adds	r3, r7, #5
 8008928:	33ff      	adds	r3, #255	; 0xff
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d110      	bne.n	8008952 <USB_EPStartXfer+0x41a>
 8008930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	4abe      	ldr	r2, [pc, #760]	; (8008c30 <USB_EPStartXfer+0x6f8>)
 8008938:	4013      	ands	r3, r2
 800893a:	b29a      	uxth	r2, r3
 800893c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800893e:	801a      	strh	r2, [r3, #0]
 8008940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	b29b      	uxth	r3, r3
 8008946:	4abb      	ldr	r2, [pc, #748]	; (8008c34 <USB_EPStartXfer+0x6fc>)
 8008948:	4313      	orrs	r3, r2
 800894a:	b29a      	uxth	r2, r3
 800894c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800894e:	801a      	strh	r2, [r3, #0]
 8008950:	e05a      	b.n	8008a08 <USB_EPStartXfer+0x4d0>
 8008952:	1d7b      	adds	r3, r7, #5
 8008954:	33ff      	adds	r3, #255	; 0xff
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b3e      	cmp	r3, #62	; 0x3e
 800895a:	d81a      	bhi.n	8008992 <USB_EPStartXfer+0x45a>
 800895c:	1d7b      	adds	r3, r7, #5
 800895e:	33ff      	adds	r3, #255	; 0xff
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	085b      	lsrs	r3, r3, #1
 8008964:	21f8      	movs	r1, #248	; 0xf8
 8008966:	187a      	adds	r2, r7, r1
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	1d7b      	adds	r3, r7, #5
 800896c:	33ff      	adds	r3, #255	; 0xff
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2201      	movs	r2, #1
 8008972:	4013      	ands	r3, r2
 8008974:	d004      	beq.n	8008980 <USB_EPStartXfer+0x448>
 8008976:	187b      	adds	r3, r7, r1
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3301      	adds	r3, #1
 800897c:	187a      	adds	r2, r7, r1
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	23f8      	movs	r3, #248	; 0xf8
 8008982:	18fb      	adds	r3, r7, r3
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	b29b      	uxth	r3, r3
 8008988:	029b      	lsls	r3, r3, #10
 800898a:	b29a      	uxth	r2, r3
 800898c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800898e:	801a      	strh	r2, [r3, #0]
 8008990:	e03a      	b.n	8008a08 <USB_EPStartXfer+0x4d0>
 8008992:	1d7b      	adds	r3, r7, #5
 8008994:	33ff      	adds	r3, #255	; 0xff
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	095b      	lsrs	r3, r3, #5
 800899a:	21f8      	movs	r1, #248	; 0xf8
 800899c:	187a      	adds	r2, r7, r1
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	1d7b      	adds	r3, r7, #5
 80089a2:	33ff      	adds	r3, #255	; 0xff
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	221f      	movs	r2, #31
 80089a8:	4013      	ands	r3, r2
 80089aa:	d104      	bne.n	80089b6 <USB_EPStartXfer+0x47e>
 80089ac:	187b      	adds	r3, r7, r1
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3b01      	subs	r3, #1
 80089b2:	187a      	adds	r2, r7, r1
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	23f8      	movs	r3, #248	; 0xf8
 80089b8:	18fb      	adds	r3, r7, r3
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	029b      	lsls	r3, r3, #10
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	4a9c      	ldr	r2, [pc, #624]	; (8008c34 <USB_EPStartXfer+0x6fc>)
 80089c4:	4313      	orrs	r3, r2
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ca:	801a      	strh	r2, [r3, #0]
 80089cc:	e01c      	b.n	8008a08 <USB_EPStartXfer+0x4d0>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d118      	bne.n	8008a08 <USB_EPStartXfer+0x4d0>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	653b      	str	r3, [r7, #80]	; 0x50
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2250      	movs	r2, #80	; 0x50
 80089de:	5a9b      	ldrh	r3, [r3, r2]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	001a      	movs	r2, r3
 80089e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089e6:	189b      	adds	r3, r3, r2
 80089e8:	653b      	str	r3, [r7, #80]	; 0x50
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	00da      	lsls	r2, r3, #3
 80089f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f2:	18d3      	adds	r3, r2, r3
 80089f4:	4a8d      	ldr	r2, [pc, #564]	; (8008c2c <USB_EPStartXfer+0x6f4>)
 80089f6:	4694      	mov	ip, r2
 80089f8:	4463      	add	r3, ip
 80089fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089fc:	1d7b      	adds	r3, r7, #5
 80089fe:	33ff      	adds	r3, #255	; 0xff
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a08:	2076      	movs	r0, #118	; 0x76
 8008a0a:	183b      	adds	r3, r7, r0
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	8912      	ldrh	r2, [r2, #8]
 8008a10:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	6959      	ldr	r1, [r3, #20]
 8008a16:	1d7b      	adds	r3, r7, #5
 8008a18:	33ff      	adds	r3, #255	; 0xff
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	b29c      	uxth	r4, r3
 8008a1e:	183b      	adds	r3, r7, r0
 8008a20:	881a      	ldrh	r2, [r3, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	0023      	movs	r3, r4
 8008a26:	f000 ff7b 	bl	8009920 <USB_WritePMA>
            ep->xfer_buff += len;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	695a      	ldr	r2, [r3, #20]
 8008a2e:	1d7b      	adds	r3, r7, #5
 8008a30:	33ff      	adds	r3, #255	; 0xff
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	18d2      	adds	r2, r2, r3
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	6a1a      	ldr	r2, [r3, #32]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d908      	bls.n	8008a58 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	6a1a      	ldr	r2, [r3, #32]
 8008a4a:	1d7b      	adds	r3, r7, #5
 8008a4c:	33ff      	adds	r3, #255	; 0xff
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	1ad2      	subs	r2, r2, r3
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	621a      	str	r2, [r3, #32]
 8008a56:	e007      	b.n	8008a68 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	6a1b      	ldr	r3, [r3, #32]
 8008a5c:	1d7a      	adds	r2, r7, #5
 8008a5e:	32ff      	adds	r2, #255	; 0xff
 8008a60:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2200      	movs	r2, #0
 8008a66:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d166      	bne.n	8008b42 <USB_EPStartXfer+0x60a>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2250      	movs	r2, #80	; 0x50
 8008a7c:	5a9b      	ldrh	r3, [r3, r2]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	001a      	movs	r2, r3
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	189b      	adds	r3, r3, r2
 8008a86:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	00da      	lsls	r2, r3, #3
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	18d3      	adds	r3, r2, r3
 8008a92:	4a69      	ldr	r2, [pc, #420]	; (8008c38 <USB_EPStartXfer+0x700>)
 8008a94:	4694      	mov	ip, r2
 8008a96:	4463      	add	r3, ip
 8008a98:	637b      	str	r3, [r7, #52]	; 0x34
 8008a9a:	1d7b      	adds	r3, r7, #5
 8008a9c:	33ff      	adds	r3, #255	; 0xff
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d110      	bne.n	8008ac6 <USB_EPStartXfer+0x58e>
 8008aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	4a61      	ldr	r2, [pc, #388]	; (8008c30 <USB_EPStartXfer+0x6f8>)
 8008aac:	4013      	ands	r3, r2
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab2:	801a      	strh	r2, [r3, #0]
 8008ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	4a5e      	ldr	r2, [pc, #376]	; (8008c34 <USB_EPStartXfer+0x6fc>)
 8008abc:	4313      	orrs	r3, r2
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac2:	801a      	strh	r2, [r3, #0]
 8008ac4:	e058      	b.n	8008b78 <USB_EPStartXfer+0x640>
 8008ac6:	1d7b      	adds	r3, r7, #5
 8008ac8:	33ff      	adds	r3, #255	; 0xff
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b3e      	cmp	r3, #62	; 0x3e
 8008ace:	d81a      	bhi.n	8008b06 <USB_EPStartXfer+0x5ce>
 8008ad0:	1d7b      	adds	r3, r7, #5
 8008ad2:	33ff      	adds	r3, #255	; 0xff
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	21f4      	movs	r1, #244	; 0xf4
 8008ada:	187a      	adds	r2, r7, r1
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	1d7b      	adds	r3, r7, #5
 8008ae0:	33ff      	adds	r3, #255	; 0xff
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	d004      	beq.n	8008af4 <USB_EPStartXfer+0x5bc>
 8008aea:	187b      	adds	r3, r7, r1
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3301      	adds	r3, #1
 8008af0:	187a      	adds	r2, r7, r1
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	23f4      	movs	r3, #244	; 0xf4
 8008af6:	18fb      	adds	r3, r7, r3
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	029b      	lsls	r3, r3, #10
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b02:	801a      	strh	r2, [r3, #0]
 8008b04:	e038      	b.n	8008b78 <USB_EPStartXfer+0x640>
 8008b06:	1d7b      	adds	r3, r7, #5
 8008b08:	33ff      	adds	r3, #255	; 0xff
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	095b      	lsrs	r3, r3, #5
 8008b0e:	21f4      	movs	r1, #244	; 0xf4
 8008b10:	187a      	adds	r2, r7, r1
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	1d7b      	adds	r3, r7, #5
 8008b16:	33ff      	adds	r3, #255	; 0xff
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	221f      	movs	r2, #31
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	d104      	bne.n	8008b2a <USB_EPStartXfer+0x5f2>
 8008b20:	187b      	adds	r3, r7, r1
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	187a      	adds	r2, r7, r1
 8008b28:	6013      	str	r3, [r2, #0]
 8008b2a:	23f4      	movs	r3, #244	; 0xf4
 8008b2c:	18fb      	adds	r3, r7, r3
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	029b      	lsls	r3, r3, #10
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	4a3f      	ldr	r2, [pc, #252]	; (8008c34 <USB_EPStartXfer+0x6fc>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3e:	801a      	strh	r2, [r3, #0]
 8008b40:	e01a      	b.n	8008b78 <USB_EPStartXfer+0x640>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	785b      	ldrb	r3, [r3, #1]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d116      	bne.n	8008b78 <USB_EPStartXfer+0x640>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2250      	movs	r2, #80	; 0x50
 8008b4e:	5a9b      	ldrh	r3, [r3, r2]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	001a      	movs	r2, r3
 8008b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b56:	189b      	adds	r3, r3, r2
 8008b58:	643b      	str	r3, [r7, #64]	; 0x40
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	00da      	lsls	r2, r3, #3
 8008b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b62:	18d3      	adds	r3, r2, r3
 8008b64:	4a34      	ldr	r2, [pc, #208]	; (8008c38 <USB_EPStartXfer+0x700>)
 8008b66:	4694      	mov	ip, r2
 8008b68:	4463      	add	r3, ip
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b6c:	1d7b      	adds	r3, r7, #5
 8008b6e:	33ff      	adds	r3, #255	; 0xff
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b78:	2076      	movs	r0, #118	; 0x76
 8008b7a:	183b      	adds	r3, r7, r0
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	8952      	ldrh	r2, [r2, #10]
 8008b80:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6959      	ldr	r1, [r3, #20]
 8008b86:	1d7b      	adds	r3, r7, #5
 8008b88:	33ff      	adds	r3, #255	; 0xff
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	b29c      	uxth	r4, r3
 8008b8e:	183b      	adds	r3, r7, r0
 8008b90:	881a      	ldrh	r2, [r3, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	0023      	movs	r3, r4
 8008b96:	f000 fec3 	bl	8009920 <USB_WritePMA>
 8008b9a:	e1a2      	b.n	8008ee2 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	1d7a      	adds	r2, r7, #5
 8008ba2:	32ff      	adds	r2, #255	; 0xff
 8008ba4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	18d3      	adds	r3, r2, r3
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	2062      	movs	r0, #98	; 0x62
 8008bb6:	183b      	adds	r3, r7, r0
 8008bb8:	4920      	ldr	r1, [pc, #128]	; (8008c3c <USB_EPStartXfer+0x704>)
 8008bba:	400a      	ands	r2, r1
 8008bbc:	801a      	strh	r2, [r3, #0]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	18d3      	adds	r3, r2, r3
 8008bc8:	183a      	adds	r2, r7, r0
 8008bca:	8812      	ldrh	r2, [r2, #0]
 8008bcc:	491c      	ldr	r1, [pc, #112]	; (8008c40 <USB_EPStartXfer+0x708>)
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	b292      	uxth	r2, r2
 8008bd2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2250      	movs	r2, #80	; 0x50
 8008bdc:	5a9b      	ldrh	r3, [r3, r2]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	001a      	movs	r2, r3
 8008be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008be4:	189b      	adds	r3, r3, r2
 8008be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	00da      	lsls	r2, r3, #3
 8008bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf0:	18d3      	adds	r3, r2, r3
 8008bf2:	4a0e      	ldr	r2, [pc, #56]	; (8008c2c <USB_EPStartXfer+0x6f4>)
 8008bf4:	4694      	mov	ip, r2
 8008bf6:	4463      	add	r3, ip
 8008bf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bfa:	1d7b      	adds	r3, r7, #5
 8008bfc:	33ff      	adds	r3, #255	; 0xff
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c04:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c06:	2076      	movs	r0, #118	; 0x76
 8008c08:	183b      	adds	r3, r7, r0
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	8912      	ldrh	r2, [r2, #8]
 8008c0e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	6959      	ldr	r1, [r3, #20]
 8008c14:	1d7b      	adds	r3, r7, #5
 8008c16:	33ff      	adds	r3, #255	; 0xff
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	b29c      	uxth	r4, r3
 8008c1c:	183b      	adds	r3, r7, r0
 8008c1e:	881a      	ldrh	r2, [r3, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	0023      	movs	r3, r4
 8008c24:	f000 fe7c 	bl	8009920 <USB_WritePMA>
 8008c28:	e15b      	b.n	8008ee2 <USB_EPStartXfer+0x9aa>
 8008c2a:	46c0      	nop			; (mov r8, r8)
 8008c2c:	00000402 	.word	0x00000402
 8008c30:	ffff83ff 	.word	0xffff83ff
 8008c34:	ffff8000 	.word	0xffff8000
 8008c38:	00000406 	.word	0x00000406
 8008c3c:	ffff8e8f 	.word	0xffff8e8f
 8008c40:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	6a1a      	ldr	r2, [r3, #32]
 8008c48:	1d7b      	adds	r3, r7, #5
 8008c4a:	33ff      	adds	r3, #255	; 0xff
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	1ad2      	subs	r2, r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	18d3      	adds	r3, r2, r3
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	001a      	movs	r2, r3
 8008c64:	2340      	movs	r3, #64	; 0x40
 8008c66:	4013      	ands	r3, r2
 8008c68:	d100      	bne.n	8008c6c <USB_EPStartXfer+0x734>
 8008c6a:	e099      	b.n	8008da0 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	673b      	str	r3, [r7, #112]	; 0x70
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d166      	bne.n	8008d46 <USB_EPStartXfer+0x80e>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2250      	movs	r2, #80	; 0x50
 8008c80:	5a9b      	ldrh	r3, [r3, r2]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	001a      	movs	r2, r3
 8008c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c88:	189b      	adds	r3, r3, r2
 8008c8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	00da      	lsls	r2, r3, #3
 8008c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c94:	18d3      	adds	r3, r2, r3
 8008c96:	4ad0      	ldr	r2, [pc, #832]	; (8008fd8 <USB_EPStartXfer+0xaa0>)
 8008c98:	4694      	mov	ip, r2
 8008c9a:	4463      	add	r3, ip
 8008c9c:	667b      	str	r3, [r7, #100]	; 0x64
 8008c9e:	1d7b      	adds	r3, r7, #5
 8008ca0:	33ff      	adds	r3, #255	; 0xff
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d110      	bne.n	8008cca <USB_EPStartXfer+0x792>
 8008ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	4acb      	ldr	r2, [pc, #812]	; (8008fdc <USB_EPStartXfer+0xaa4>)
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cb6:	801a      	strh	r2, [r3, #0]
 8008cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	4ac8      	ldr	r2, [pc, #800]	; (8008fe0 <USB_EPStartXfer+0xaa8>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	e058      	b.n	8008d7c <USB_EPStartXfer+0x844>
 8008cca:	1d7b      	adds	r3, r7, #5
 8008ccc:	33ff      	adds	r3, #255	; 0xff
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8008cd2:	d81a      	bhi.n	8008d0a <USB_EPStartXfer+0x7d2>
 8008cd4:	1d7b      	adds	r3, r7, #5
 8008cd6:	33ff      	adds	r3, #255	; 0xff
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	085b      	lsrs	r3, r3, #1
 8008cdc:	21f0      	movs	r1, #240	; 0xf0
 8008cde:	187a      	adds	r2, r7, r1
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	1d7b      	adds	r3, r7, #5
 8008ce4:	33ff      	adds	r3, #255	; 0xff
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	4013      	ands	r3, r2
 8008cec:	d004      	beq.n	8008cf8 <USB_EPStartXfer+0x7c0>
 8008cee:	187b      	adds	r3, r7, r1
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	187a      	adds	r2, r7, r1
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	23f0      	movs	r3, #240	; 0xf0
 8008cfa:	18fb      	adds	r3, r7, r3
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	029b      	lsls	r3, r3, #10
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d06:	801a      	strh	r2, [r3, #0]
 8008d08:	e038      	b.n	8008d7c <USB_EPStartXfer+0x844>
 8008d0a:	1d7b      	adds	r3, r7, #5
 8008d0c:	33ff      	adds	r3, #255	; 0xff
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	095b      	lsrs	r3, r3, #5
 8008d12:	21f0      	movs	r1, #240	; 0xf0
 8008d14:	187a      	adds	r2, r7, r1
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	1d7b      	adds	r3, r7, #5
 8008d1a:	33ff      	adds	r3, #255	; 0xff
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	221f      	movs	r2, #31
 8008d20:	4013      	ands	r3, r2
 8008d22:	d104      	bne.n	8008d2e <USB_EPStartXfer+0x7f6>
 8008d24:	187b      	adds	r3, r7, r1
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	187a      	adds	r2, r7, r1
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	23f0      	movs	r3, #240	; 0xf0
 8008d30:	18fb      	adds	r3, r7, r3
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	029b      	lsls	r3, r3, #10
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	4aa9      	ldr	r2, [pc, #676]	; (8008fe0 <USB_EPStartXfer+0xaa8>)
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d42:	801a      	strh	r2, [r3, #0]
 8008d44:	e01a      	b.n	8008d7c <USB_EPStartXfer+0x844>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	785b      	ldrb	r3, [r3, #1]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d116      	bne.n	8008d7c <USB_EPStartXfer+0x844>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2250      	movs	r2, #80	; 0x50
 8008d52:	5a9b      	ldrh	r3, [r3, r2]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	001a      	movs	r2, r3
 8008d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d5a:	189b      	adds	r3, r3, r2
 8008d5c:	673b      	str	r3, [r7, #112]	; 0x70
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	00da      	lsls	r2, r3, #3
 8008d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d66:	18d3      	adds	r3, r2, r3
 8008d68:	4a9b      	ldr	r2, [pc, #620]	; (8008fd8 <USB_EPStartXfer+0xaa0>)
 8008d6a:	4694      	mov	ip, r2
 8008d6c:	4463      	add	r3, ip
 8008d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d70:	1d7b      	adds	r3, r7, #5
 8008d72:	33ff      	adds	r3, #255	; 0xff
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008d7c:	2076      	movs	r0, #118	; 0x76
 8008d7e:	183b      	adds	r3, r7, r0
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	8952      	ldrh	r2, [r2, #10]
 8008d84:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	6959      	ldr	r1, [r3, #20]
 8008d8a:	1d7b      	adds	r3, r7, #5
 8008d8c:	33ff      	adds	r3, #255	; 0xff
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	b29c      	uxth	r4, r3
 8008d92:	183b      	adds	r3, r7, r0
 8008d94:	881a      	ldrh	r2, [r3, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	0023      	movs	r3, r4
 8008d9a:	f000 fdc1 	bl	8009920 <USB_WritePMA>
 8008d9e:	e0a0      	b.n	8008ee2 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d166      	bne.n	8008e76 <USB_EPStartXfer+0x93e>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2250      	movs	r2, #80	; 0x50
 8008db0:	5a9b      	ldrh	r3, [r3, r2]
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	001a      	movs	r2, r3
 8008db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008db8:	189b      	adds	r3, r3, r2
 8008dba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	00da      	lsls	r2, r3, #3
 8008dc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008dc4:	18d3      	adds	r3, r2, r3
 8008dc6:	4a87      	ldr	r2, [pc, #540]	; (8008fe4 <USB_EPStartXfer+0xaac>)
 8008dc8:	4694      	mov	ip, r2
 8008dca:	4463      	add	r3, ip
 8008dcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008dce:	1d7b      	adds	r3, r7, #5
 8008dd0:	33ff      	adds	r3, #255	; 0xff
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d110      	bne.n	8008dfa <USB_EPStartXfer+0x8c2>
 8008dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	4a7f      	ldr	r2, [pc, #508]	; (8008fdc <USB_EPStartXfer+0xaa4>)
 8008de0:	4013      	ands	r3, r2
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008de6:	801a      	strh	r2, [r3, #0]
 8008de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	4a7c      	ldr	r2, [pc, #496]	; (8008fe0 <USB_EPStartXfer+0xaa8>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008df6:	801a      	strh	r2, [r3, #0]
 8008df8:	e062      	b.n	8008ec0 <USB_EPStartXfer+0x988>
 8008dfa:	1d7b      	adds	r3, r7, #5
 8008dfc:	33ff      	adds	r3, #255	; 0xff
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b3e      	cmp	r3, #62	; 0x3e
 8008e02:	d81a      	bhi.n	8008e3a <USB_EPStartXfer+0x902>
 8008e04:	1d7b      	adds	r3, r7, #5
 8008e06:	33ff      	adds	r3, #255	; 0xff
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	085b      	lsrs	r3, r3, #1
 8008e0c:	21ec      	movs	r1, #236	; 0xec
 8008e0e:	187a      	adds	r2, r7, r1
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	1d7b      	adds	r3, r7, #5
 8008e14:	33ff      	adds	r3, #255	; 0xff
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	d004      	beq.n	8008e28 <USB_EPStartXfer+0x8f0>
 8008e1e:	187b      	adds	r3, r7, r1
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3301      	adds	r3, #1
 8008e24:	187a      	adds	r2, r7, r1
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	23ec      	movs	r3, #236	; 0xec
 8008e2a:	18fb      	adds	r3, r7, r3
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e36:	801a      	strh	r2, [r3, #0]
 8008e38:	e042      	b.n	8008ec0 <USB_EPStartXfer+0x988>
 8008e3a:	1d7b      	adds	r3, r7, #5
 8008e3c:	33ff      	adds	r3, #255	; 0xff
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	095b      	lsrs	r3, r3, #5
 8008e42:	21ec      	movs	r1, #236	; 0xec
 8008e44:	187a      	adds	r2, r7, r1
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	1d7b      	adds	r3, r7, #5
 8008e4a:	33ff      	adds	r3, #255	; 0xff
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	221f      	movs	r2, #31
 8008e50:	4013      	ands	r3, r2
 8008e52:	d104      	bne.n	8008e5e <USB_EPStartXfer+0x926>
 8008e54:	187b      	adds	r3, r7, r1
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	187a      	adds	r2, r7, r1
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	23ec      	movs	r3, #236	; 0xec
 8008e60:	18fb      	adds	r3, r7, r3
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	029b      	lsls	r3, r3, #10
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	4a5d      	ldr	r2, [pc, #372]	; (8008fe0 <USB_EPStartXfer+0xaa8>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e72:	801a      	strh	r2, [r3, #0]
 8008e74:	e024      	b.n	8008ec0 <USB_EPStartXfer+0x988>
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	785b      	ldrb	r3, [r3, #1]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d120      	bne.n	8008ec0 <USB_EPStartXfer+0x988>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2184      	movs	r1, #132	; 0x84
 8008e82:	187a      	adds	r2, r7, r1
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2250      	movs	r2, #80	; 0x50
 8008e8a:	5a9b      	ldrh	r3, [r3, r2]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	001a      	movs	r2, r3
 8008e90:	187b      	adds	r3, r7, r1
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	189b      	adds	r3, r3, r2
 8008e96:	187a      	adds	r2, r7, r1
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	00da      	lsls	r2, r3, #3
 8008ea0:	187b      	adds	r3, r7, r1
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	18d3      	adds	r3, r2, r3
 8008ea6:	4a4f      	ldr	r2, [pc, #316]	; (8008fe4 <USB_EPStartXfer+0xaac>)
 8008ea8:	4694      	mov	ip, r2
 8008eaa:	4463      	add	r3, ip
 8008eac:	2180      	movs	r1, #128	; 0x80
 8008eae:	187a      	adds	r2, r7, r1
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	1d7b      	adds	r3, r7, #5
 8008eb4:	33ff      	adds	r3, #255	; 0xff
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	187b      	adds	r3, r7, r1
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ec0:	2076      	movs	r0, #118	; 0x76
 8008ec2:	183b      	adds	r3, r7, r0
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	8912      	ldrh	r2, [r2, #8]
 8008ec8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	6959      	ldr	r1, [r3, #20]
 8008ece:	1d7b      	adds	r3, r7, #5
 8008ed0:	33ff      	adds	r3, #255	; 0xff
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	b29c      	uxth	r4, r3
 8008ed6:	183b      	adds	r3, r7, r0
 8008ed8:	881a      	ldrh	r2, [r3, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	0023      	movs	r3, r4
 8008ede:	f000 fd1f 	bl	8009920 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	18d3      	adds	r3, r2, r3
 8008eec:	881b      	ldrh	r3, [r3, #0]
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	200a      	movs	r0, #10
 8008ef2:	183b      	adds	r3, r7, r0
 8008ef4:	493c      	ldr	r1, [pc, #240]	; (8008fe8 <USB_EPStartXfer+0xab0>)
 8008ef6:	400a      	ands	r2, r1
 8008ef8:	801a      	strh	r2, [r3, #0]
 8008efa:	183b      	adds	r3, r7, r0
 8008efc:	183a      	adds	r2, r7, r0
 8008efe:	8812      	ldrh	r2, [r2, #0]
 8008f00:	2110      	movs	r1, #16
 8008f02:	404a      	eors	r2, r1
 8008f04:	801a      	strh	r2, [r3, #0]
 8008f06:	183b      	adds	r3, r7, r0
 8008f08:	183a      	adds	r2, r7, r0
 8008f0a:	8812      	ldrh	r2, [r2, #0]
 8008f0c:	2120      	movs	r1, #32
 8008f0e:	404a      	eors	r2, r1
 8008f10:	801a      	strh	r2, [r3, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	18d3      	adds	r3, r2, r3
 8008f1c:	183a      	adds	r2, r7, r0
 8008f1e:	8812      	ldrh	r2, [r2, #0]
 8008f20:	4932      	ldr	r1, [pc, #200]	; (8008fec <USB_EPStartXfer+0xab4>)
 8008f22:	430a      	orrs	r2, r1
 8008f24:	b292      	uxth	r2, r2
 8008f26:	801a      	strh	r2, [r3, #0]
 8008f28:	f000 fbaf 	bl	800968a <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	7b1b      	ldrb	r3, [r3, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d000      	beq.n	8008f36 <USB_EPStartXfer+0x9fe>
 8008f34:	e09e      	b.n	8009074 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	699a      	ldr	r2, [r3, #24]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d90d      	bls.n	8008f5e <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	1d7a      	adds	r2, r7, #5
 8008f48:	32ff      	adds	r2, #255	; 0xff
 8008f4a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	699a      	ldr	r2, [r3, #24]
 8008f50:	1d7b      	adds	r3, r7, #5
 8008f52:	33ff      	adds	r3, #255	; 0xff
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	619a      	str	r2, [r3, #24]
 8008f5c:	e007      	b.n	8008f6e <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	1d7a      	adds	r2, r7, #5
 8008f64:	32ff      	adds	r2, #255	; 0xff
 8008f66:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2190      	movs	r1, #144	; 0x90
 8008f72:	187a      	adds	r2, r7, r1
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2250      	movs	r2, #80	; 0x50
 8008f7a:	5a9b      	ldrh	r3, [r3, r2]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	001a      	movs	r2, r3
 8008f80:	187b      	adds	r3, r7, r1
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	189b      	adds	r3, r3, r2
 8008f86:	187a      	adds	r2, r7, r1
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	00da      	lsls	r2, r3, #3
 8008f90:	187b      	adds	r3, r7, r1
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	18d3      	adds	r3, r2, r3
 8008f96:	4a10      	ldr	r2, [pc, #64]	; (8008fd8 <USB_EPStartXfer+0xaa0>)
 8008f98:	4694      	mov	ip, r2
 8008f9a:	4463      	add	r3, ip
 8008f9c:	218c      	movs	r1, #140	; 0x8c
 8008f9e:	187a      	adds	r2, r7, r1
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	1d7b      	adds	r3, r7, #5
 8008fa4:	33ff      	adds	r3, #255	; 0xff
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d121      	bne.n	8008ff0 <USB_EPStartXfer+0xab8>
 8008fac:	187b      	adds	r3, r7, r1
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	4a09      	ldr	r2, [pc, #36]	; (8008fdc <USB_EPStartXfer+0xaa4>)
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	187b      	adds	r3, r7, r1
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	801a      	strh	r2, [r3, #0]
 8008fc0:	187b      	adds	r3, r7, r1
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	4a05      	ldr	r2, [pc, #20]	; (8008fe0 <USB_EPStartXfer+0xaa8>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	187b      	adds	r3, r7, r1
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	801a      	strh	r2, [r3, #0]
 8008fd4:	e334      	b.n	8009640 <USB_EPStartXfer+0x1108>
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	00000406 	.word	0x00000406
 8008fdc:	ffff83ff 	.word	0xffff83ff
 8008fe0:	ffff8000 	.word	0xffff8000
 8008fe4:	00000402 	.word	0x00000402
 8008fe8:	ffff8fbf 	.word	0xffff8fbf
 8008fec:	ffff8080 	.word	0xffff8080
 8008ff0:	1d7b      	adds	r3, r7, #5
 8008ff2:	33ff      	adds	r3, #255	; 0xff
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ff8:	d81c      	bhi.n	8009034 <USB_EPStartXfer+0xafc>
 8008ffa:	1d7b      	adds	r3, r7, #5
 8008ffc:	33ff      	adds	r3, #255	; 0xff
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	21e8      	movs	r1, #232	; 0xe8
 8009004:	187a      	adds	r2, r7, r1
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	1d7b      	adds	r3, r7, #5
 800900a:	33ff      	adds	r3, #255	; 0xff
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2201      	movs	r2, #1
 8009010:	4013      	ands	r3, r2
 8009012:	d004      	beq.n	800901e <USB_EPStartXfer+0xae6>
 8009014:	187b      	adds	r3, r7, r1
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3301      	adds	r3, #1
 800901a:	187a      	adds	r2, r7, r1
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	23e8      	movs	r3, #232	; 0xe8
 8009020:	18fb      	adds	r3, r7, r3
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	b29b      	uxth	r3, r3
 8009026:	029b      	lsls	r3, r3, #10
 8009028:	b29a      	uxth	r2, r3
 800902a:	238c      	movs	r3, #140	; 0x8c
 800902c:	18fb      	adds	r3, r7, r3
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	801a      	strh	r2, [r3, #0]
 8009032:	e305      	b.n	8009640 <USB_EPStartXfer+0x1108>
 8009034:	1d7b      	adds	r3, r7, #5
 8009036:	33ff      	adds	r3, #255	; 0xff
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	095b      	lsrs	r3, r3, #5
 800903c:	21e8      	movs	r1, #232	; 0xe8
 800903e:	187a      	adds	r2, r7, r1
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	1d7b      	adds	r3, r7, #5
 8009044:	33ff      	adds	r3, #255	; 0xff
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	221f      	movs	r2, #31
 800904a:	4013      	ands	r3, r2
 800904c:	d104      	bne.n	8009058 <USB_EPStartXfer+0xb20>
 800904e:	187b      	adds	r3, r7, r1
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3b01      	subs	r3, #1
 8009054:	187a      	adds	r2, r7, r1
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	23e8      	movs	r3, #232	; 0xe8
 800905a:	18fb      	adds	r3, r7, r3
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	b29b      	uxth	r3, r3
 8009060:	029b      	lsls	r3, r3, #10
 8009062:	b29b      	uxth	r3, r3
 8009064:	4aca      	ldr	r2, [pc, #808]	; (8009390 <USB_EPStartXfer+0xe58>)
 8009066:	4313      	orrs	r3, r2
 8009068:	b29a      	uxth	r2, r3
 800906a:	238c      	movs	r3, #140	; 0x8c
 800906c:	18fb      	adds	r3, r7, r3
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	801a      	strh	r2, [r3, #0]
 8009072:	e2e5      	b.n	8009640 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	78db      	ldrb	r3, [r3, #3]
 8009078:	2b02      	cmp	r3, #2
 800907a:	d000      	beq.n	800907e <USB_EPStartXfer+0xb46>
 800907c:	e16f      	b.n	800935e <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	785b      	ldrb	r3, [r3, #1]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d16f      	bne.n	8009166 <USB_EPStartXfer+0xc2e>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	21ac      	movs	r1, #172	; 0xac
 800908a:	187a      	adds	r2, r7, r1
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2250      	movs	r2, #80	; 0x50
 8009092:	5a9b      	ldrh	r3, [r3, r2]
 8009094:	b29b      	uxth	r3, r3
 8009096:	001a      	movs	r2, r3
 8009098:	187b      	adds	r3, r7, r1
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	189b      	adds	r3, r3, r2
 800909e:	187a      	adds	r2, r7, r1
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	00da      	lsls	r2, r3, #3
 80090a8:	187b      	adds	r3, r7, r1
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	18d3      	adds	r3, r2, r3
 80090ae:	4ab9      	ldr	r2, [pc, #740]	; (8009394 <USB_EPStartXfer+0xe5c>)
 80090b0:	4694      	mov	ip, r2
 80090b2:	4463      	add	r3, ip
 80090b4:	21a8      	movs	r1, #168	; 0xa8
 80090b6:	187a      	adds	r2, r7, r1
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d114      	bne.n	80090ec <USB_EPStartXfer+0xbb4>
 80090c2:	187b      	adds	r3, r7, r1
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	4ab3      	ldr	r2, [pc, #716]	; (8009398 <USB_EPStartXfer+0xe60>)
 80090cc:	4013      	ands	r3, r2
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	187b      	adds	r3, r7, r1
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	187b      	adds	r3, r7, r1
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	b29b      	uxth	r3, r3
 80090de:	4aac      	ldr	r2, [pc, #688]	; (8009390 <USB_EPStartXfer+0xe58>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	187b      	adds	r3, r7, r1
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	801a      	strh	r2, [r3, #0]
 80090ea:	e060      	b.n	80091ae <USB_EPStartXfer+0xc76>
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	2b3e      	cmp	r3, #62	; 0x3e
 80090f2:	d81a      	bhi.n	800912a <USB_EPStartXfer+0xbf2>
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	21e4      	movs	r1, #228	; 0xe4
 80090fc:	187a      	adds	r2, r7, r1
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	2201      	movs	r2, #1
 8009106:	4013      	ands	r3, r2
 8009108:	d004      	beq.n	8009114 <USB_EPStartXfer+0xbdc>
 800910a:	187b      	adds	r3, r7, r1
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3301      	adds	r3, #1
 8009110:	187a      	adds	r2, r7, r1
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	23e4      	movs	r3, #228	; 0xe4
 8009116:	18fb      	adds	r3, r7, r3
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	b29b      	uxth	r3, r3
 800911c:	029b      	lsls	r3, r3, #10
 800911e:	b29a      	uxth	r2, r3
 8009120:	23a8      	movs	r3, #168	; 0xa8
 8009122:	18fb      	adds	r3, r7, r3
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	801a      	strh	r2, [r3, #0]
 8009128:	e041      	b.n	80091ae <USB_EPStartXfer+0xc76>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	095b      	lsrs	r3, r3, #5
 8009130:	21e4      	movs	r1, #228	; 0xe4
 8009132:	187a      	adds	r2, r7, r1
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	221f      	movs	r2, #31
 800913c:	4013      	ands	r3, r2
 800913e:	d104      	bne.n	800914a <USB_EPStartXfer+0xc12>
 8009140:	187b      	adds	r3, r7, r1
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3b01      	subs	r3, #1
 8009146:	187a      	adds	r2, r7, r1
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	23e4      	movs	r3, #228	; 0xe4
 800914c:	18fb      	adds	r3, r7, r3
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	b29b      	uxth	r3, r3
 8009152:	029b      	lsls	r3, r3, #10
 8009154:	b29b      	uxth	r3, r3
 8009156:	4a8e      	ldr	r2, [pc, #568]	; (8009390 <USB_EPStartXfer+0xe58>)
 8009158:	4313      	orrs	r3, r2
 800915a:	b29a      	uxth	r2, r3
 800915c:	23a8      	movs	r3, #168	; 0xa8
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	801a      	strh	r2, [r3, #0]
 8009164:	e023      	b.n	80091ae <USB_EPStartXfer+0xc76>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	785b      	ldrb	r3, [r3, #1]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d11f      	bne.n	80091ae <USB_EPStartXfer+0xc76>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	21b4      	movs	r1, #180	; 0xb4
 8009172:	187a      	adds	r2, r7, r1
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2250      	movs	r2, #80	; 0x50
 800917a:	5a9b      	ldrh	r3, [r3, r2]
 800917c:	b29b      	uxth	r3, r3
 800917e:	001a      	movs	r2, r3
 8009180:	187b      	adds	r3, r7, r1
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	189b      	adds	r3, r3, r2
 8009186:	187a      	adds	r2, r7, r1
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	00da      	lsls	r2, r3, #3
 8009190:	187b      	adds	r3, r7, r1
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	18d3      	adds	r3, r2, r3
 8009196:	4a7f      	ldr	r2, [pc, #508]	; (8009394 <USB_EPStartXfer+0xe5c>)
 8009198:	4694      	mov	ip, r2
 800919a:	4463      	add	r3, ip
 800919c:	21b0      	movs	r1, #176	; 0xb0
 800919e:	187a      	adds	r2, r7, r1
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	187b      	adds	r3, r7, r1
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	801a      	strh	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	22a4      	movs	r2, #164	; 0xa4
 80091b2:	18ba      	adds	r2, r7, r2
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	785b      	ldrb	r3, [r3, #1]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d16f      	bne.n	800929e <USB_EPStartXfer+0xd66>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	219c      	movs	r1, #156	; 0x9c
 80091c2:	187a      	adds	r2, r7, r1
 80091c4:	6013      	str	r3, [r2, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2250      	movs	r2, #80	; 0x50
 80091ca:	5a9b      	ldrh	r3, [r3, r2]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	001a      	movs	r2, r3
 80091d0:	187b      	adds	r3, r7, r1
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	189b      	adds	r3, r3, r2
 80091d6:	187a      	adds	r2, r7, r1
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	00da      	lsls	r2, r3, #3
 80091e0:	187b      	adds	r3, r7, r1
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	18d3      	adds	r3, r2, r3
 80091e6:	4a6d      	ldr	r2, [pc, #436]	; (800939c <USB_EPStartXfer+0xe64>)
 80091e8:	4694      	mov	ip, r2
 80091ea:	4463      	add	r3, ip
 80091ec:	2198      	movs	r1, #152	; 0x98
 80091ee:	187a      	adds	r2, r7, r1
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d114      	bne.n	8009224 <USB_EPStartXfer+0xcec>
 80091fa:	187b      	adds	r3, r7, r1
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	b29b      	uxth	r3, r3
 8009202:	4a65      	ldr	r2, [pc, #404]	; (8009398 <USB_EPStartXfer+0xe60>)
 8009204:	4013      	ands	r3, r2
 8009206:	b29a      	uxth	r2, r3
 8009208:	187b      	adds	r3, r7, r1
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	801a      	strh	r2, [r3, #0]
 800920e:	187b      	adds	r3, r7, r1
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	b29b      	uxth	r3, r3
 8009216:	4a5e      	ldr	r2, [pc, #376]	; (8009390 <USB_EPStartXfer+0xe58>)
 8009218:	4313      	orrs	r3, r2
 800921a:	b29a      	uxth	r2, r3
 800921c:	187b      	adds	r3, r7, r1
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	801a      	strh	r2, [r3, #0]
 8009222:	e05d      	b.n	80092e0 <USB_EPStartXfer+0xda8>
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	2b3e      	cmp	r3, #62	; 0x3e
 800922a:	d81a      	bhi.n	8009262 <USB_EPStartXfer+0xd2a>
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	085b      	lsrs	r3, r3, #1
 8009232:	21e0      	movs	r1, #224	; 0xe0
 8009234:	187a      	adds	r2, r7, r1
 8009236:	6013      	str	r3, [r2, #0]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	2201      	movs	r2, #1
 800923e:	4013      	ands	r3, r2
 8009240:	d004      	beq.n	800924c <USB_EPStartXfer+0xd14>
 8009242:	187b      	adds	r3, r7, r1
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3301      	adds	r3, #1
 8009248:	187a      	adds	r2, r7, r1
 800924a:	6013      	str	r3, [r2, #0]
 800924c:	23e0      	movs	r3, #224	; 0xe0
 800924e:	18fb      	adds	r3, r7, r3
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	b29b      	uxth	r3, r3
 8009254:	029b      	lsls	r3, r3, #10
 8009256:	b29a      	uxth	r2, r3
 8009258:	2398      	movs	r3, #152	; 0x98
 800925a:	18fb      	adds	r3, r7, r3
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	801a      	strh	r2, [r3, #0]
 8009260:	e03e      	b.n	80092e0 <USB_EPStartXfer+0xda8>
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	095b      	lsrs	r3, r3, #5
 8009268:	21e0      	movs	r1, #224	; 0xe0
 800926a:	187a      	adds	r2, r7, r1
 800926c:	6013      	str	r3, [r2, #0]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	221f      	movs	r2, #31
 8009274:	4013      	ands	r3, r2
 8009276:	d104      	bne.n	8009282 <USB_EPStartXfer+0xd4a>
 8009278:	187b      	adds	r3, r7, r1
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3b01      	subs	r3, #1
 800927e:	187a      	adds	r2, r7, r1
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	23e0      	movs	r3, #224	; 0xe0
 8009284:	18fb      	adds	r3, r7, r3
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	b29b      	uxth	r3, r3
 800928a:	029b      	lsls	r3, r3, #10
 800928c:	b29b      	uxth	r3, r3
 800928e:	4a40      	ldr	r2, [pc, #256]	; (8009390 <USB_EPStartXfer+0xe58>)
 8009290:	4313      	orrs	r3, r2
 8009292:	b29a      	uxth	r2, r3
 8009294:	2398      	movs	r3, #152	; 0x98
 8009296:	18fb      	adds	r3, r7, r3
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	801a      	strh	r2, [r3, #0]
 800929c:	e020      	b.n	80092e0 <USB_EPStartXfer+0xda8>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d11c      	bne.n	80092e0 <USB_EPStartXfer+0xda8>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2250      	movs	r2, #80	; 0x50
 80092aa:	5a9b      	ldrh	r3, [r3, r2]
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	001a      	movs	r2, r3
 80092b0:	21a4      	movs	r1, #164	; 0xa4
 80092b2:	187b      	adds	r3, r7, r1
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	189b      	adds	r3, r3, r2
 80092b8:	187a      	adds	r2, r7, r1
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	00da      	lsls	r2, r3, #3
 80092c2:	187b      	adds	r3, r7, r1
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	18d3      	adds	r3, r2, r3
 80092c8:	4a34      	ldr	r2, [pc, #208]	; (800939c <USB_EPStartXfer+0xe64>)
 80092ca:	4694      	mov	ip, r2
 80092cc:	4463      	add	r3, ip
 80092ce:	21a0      	movs	r1, #160	; 0xa0
 80092d0:	187a      	adds	r2, r7, r1
 80092d2:	6013      	str	r3, [r2, #0]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	b29a      	uxth	r2, r3
 80092da:	187b      	adds	r3, r7, r1
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d100      	bne.n	80092ea <USB_EPStartXfer+0xdb2>
 80092e8:	e1aa      	b.n	8009640 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	18d2      	adds	r2, r2, r3
 80092f4:	2196      	movs	r1, #150	; 0x96
 80092f6:	187b      	adds	r3, r7, r1
 80092f8:	8812      	ldrh	r2, [r2, #0]
 80092fa:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80092fc:	187b      	adds	r3, r7, r1
 80092fe:	881a      	ldrh	r2, [r3, #0]
 8009300:	2380      	movs	r3, #128	; 0x80
 8009302:	01db      	lsls	r3, r3, #7
 8009304:	4013      	ands	r3, r2
 8009306:	d004      	beq.n	8009312 <USB_EPStartXfer+0xdda>
 8009308:	187b      	adds	r3, r7, r1
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	2240      	movs	r2, #64	; 0x40
 800930e:	4013      	ands	r3, r2
 8009310:	d10d      	bne.n	800932e <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009312:	2196      	movs	r1, #150	; 0x96
 8009314:	187b      	adds	r3, r7, r1
 8009316:	881a      	ldrh	r2, [r3, #0]
 8009318:	2380      	movs	r3, #128	; 0x80
 800931a:	01db      	lsls	r3, r3, #7
 800931c:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800931e:	d000      	beq.n	8009322 <USB_EPStartXfer+0xdea>
 8009320:	e18e      	b.n	8009640 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009322:	187b      	adds	r3, r7, r1
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	2240      	movs	r2, #64	; 0x40
 8009328:	4013      	ands	r3, r2
 800932a:	d000      	beq.n	800932e <USB_EPStartXfer+0xdf6>
 800932c:	e188      	b.n	8009640 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	18d3      	adds	r3, r2, r3
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	b29a      	uxth	r2, r3
 800933c:	2094      	movs	r0, #148	; 0x94
 800933e:	183b      	adds	r3, r7, r0
 8009340:	4917      	ldr	r1, [pc, #92]	; (80093a0 <USB_EPStartXfer+0xe68>)
 8009342:	400a      	ands	r2, r1
 8009344:	801a      	strh	r2, [r3, #0]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	18d3      	adds	r3, r2, r3
 8009350:	183a      	adds	r2, r7, r0
 8009352:	8812      	ldrh	r2, [r2, #0]
 8009354:	4913      	ldr	r1, [pc, #76]	; (80093a4 <USB_EPStartXfer+0xe6c>)
 8009356:	430a      	orrs	r2, r1
 8009358:	b292      	uxth	r2, r2
 800935a:	801a      	strh	r2, [r3, #0]
 800935c:	e170      	b.n	8009640 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	78db      	ldrb	r3, [r3, #3]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d000      	beq.n	8009368 <USB_EPStartXfer+0xe30>
 8009366:	e169      	b.n	800963c <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	699a      	ldr	r2, [r3, #24]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	429a      	cmp	r2, r3
 8009372:	d919      	bls.n	80093a8 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	1d7a      	adds	r2, r7, #5
 800937a:	32ff      	adds	r2, #255	; 0xff
 800937c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	699a      	ldr	r2, [r3, #24]
 8009382:	1d7b      	adds	r3, r7, #5
 8009384:	33ff      	adds	r3, #255	; 0xff
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	1ad2      	subs	r2, r2, r3
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	619a      	str	r2, [r3, #24]
 800938e:	e013      	b.n	80093b8 <USB_EPStartXfer+0xe80>
 8009390:	ffff8000 	.word	0xffff8000
 8009394:	00000402 	.word	0x00000402
 8009398:	ffff83ff 	.word	0xffff83ff
 800939c:	00000406 	.word	0x00000406
 80093a0:	ffff8f8f 	.word	0xffff8f8f
 80093a4:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	1d7a      	adds	r2, r7, #5
 80093ae:	32ff      	adds	r2, #255	; 0xff
 80093b0:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2200      	movs	r2, #0
 80093b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	785b      	ldrb	r3, [r3, #1]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d000      	beq.n	80093c2 <USB_EPStartXfer+0xe8a>
 80093c0:	e075      	b.n	80094ae <USB_EPStartXfer+0xf76>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	21cc      	movs	r1, #204	; 0xcc
 80093c6:	187a      	adds	r2, r7, r1
 80093c8:	6013      	str	r3, [r2, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2250      	movs	r2, #80	; 0x50
 80093ce:	5a9b      	ldrh	r3, [r3, r2]
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	001a      	movs	r2, r3
 80093d4:	187b      	adds	r3, r7, r1
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	189b      	adds	r3, r3, r2
 80093da:	187a      	adds	r2, r7, r1
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	00da      	lsls	r2, r3, #3
 80093e4:	187b      	adds	r3, r7, r1
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	18d3      	adds	r3, r2, r3
 80093ea:	4aaa      	ldr	r2, [pc, #680]	; (8009694 <USB_EPStartXfer+0x115c>)
 80093ec:	4694      	mov	ip, r2
 80093ee:	4463      	add	r3, ip
 80093f0:	21c8      	movs	r1, #200	; 0xc8
 80093f2:	187a      	adds	r2, r7, r1
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	1d7b      	adds	r3, r7, #5
 80093f8:	33ff      	adds	r3, #255	; 0xff
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d114      	bne.n	800942a <USB_EPStartXfer+0xef2>
 8009400:	187b      	adds	r3, r7, r1
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
 8009408:	4aa3      	ldr	r2, [pc, #652]	; (8009698 <USB_EPStartXfer+0x1160>)
 800940a:	4013      	ands	r3, r2
 800940c:	b29a      	uxth	r2, r3
 800940e:	187b      	adds	r3, r7, r1
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	801a      	strh	r2, [r3, #0]
 8009414:	187b      	adds	r3, r7, r1
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	b29b      	uxth	r3, r3
 800941c:	4a9f      	ldr	r2, [pc, #636]	; (800969c <USB_EPStartXfer+0x1164>)
 800941e:	4313      	orrs	r3, r2
 8009420:	b29a      	uxth	r2, r3
 8009422:	187b      	adds	r3, r7, r1
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	801a      	strh	r2, [r3, #0]
 8009428:	e066      	b.n	80094f8 <USB_EPStartXfer+0xfc0>
 800942a:	1d7b      	adds	r3, r7, #5
 800942c:	33ff      	adds	r3, #255	; 0xff
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b3e      	cmp	r3, #62	; 0x3e
 8009432:	d81c      	bhi.n	800946e <USB_EPStartXfer+0xf36>
 8009434:	1d7b      	adds	r3, r7, #5
 8009436:	33ff      	adds	r3, #255	; 0xff
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	085b      	lsrs	r3, r3, #1
 800943c:	21dc      	movs	r1, #220	; 0xdc
 800943e:	187a      	adds	r2, r7, r1
 8009440:	6013      	str	r3, [r2, #0]
 8009442:	1d7b      	adds	r3, r7, #5
 8009444:	33ff      	adds	r3, #255	; 0xff
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2201      	movs	r2, #1
 800944a:	4013      	ands	r3, r2
 800944c:	d004      	beq.n	8009458 <USB_EPStartXfer+0xf20>
 800944e:	187b      	adds	r3, r7, r1
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3301      	adds	r3, #1
 8009454:	187a      	adds	r2, r7, r1
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	23dc      	movs	r3, #220	; 0xdc
 800945a:	18fb      	adds	r3, r7, r3
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	b29b      	uxth	r3, r3
 8009460:	029b      	lsls	r3, r3, #10
 8009462:	b29a      	uxth	r2, r3
 8009464:	23c8      	movs	r3, #200	; 0xc8
 8009466:	18fb      	adds	r3, r7, r3
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	801a      	strh	r2, [r3, #0]
 800946c:	e044      	b.n	80094f8 <USB_EPStartXfer+0xfc0>
 800946e:	1d7b      	adds	r3, r7, #5
 8009470:	33ff      	adds	r3, #255	; 0xff
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	095b      	lsrs	r3, r3, #5
 8009476:	21dc      	movs	r1, #220	; 0xdc
 8009478:	187a      	adds	r2, r7, r1
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	1d7b      	adds	r3, r7, #5
 800947e:	33ff      	adds	r3, #255	; 0xff
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	221f      	movs	r2, #31
 8009484:	4013      	ands	r3, r2
 8009486:	d104      	bne.n	8009492 <USB_EPStartXfer+0xf5a>
 8009488:	187b      	adds	r3, r7, r1
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3b01      	subs	r3, #1
 800948e:	187a      	adds	r2, r7, r1
 8009490:	6013      	str	r3, [r2, #0]
 8009492:	23dc      	movs	r3, #220	; 0xdc
 8009494:	18fb      	adds	r3, r7, r3
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	b29b      	uxth	r3, r3
 800949a:	029b      	lsls	r3, r3, #10
 800949c:	b29b      	uxth	r3, r3
 800949e:	4a7f      	ldr	r2, [pc, #508]	; (800969c <USB_EPStartXfer+0x1164>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	23c8      	movs	r3, #200	; 0xc8
 80094a6:	18fb      	adds	r3, r7, r3
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	801a      	strh	r2, [r3, #0]
 80094ac:	e024      	b.n	80094f8 <USB_EPStartXfer+0xfc0>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	785b      	ldrb	r3, [r3, #1]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d120      	bne.n	80094f8 <USB_EPStartXfer+0xfc0>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	21d4      	movs	r1, #212	; 0xd4
 80094ba:	187a      	adds	r2, r7, r1
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2250      	movs	r2, #80	; 0x50
 80094c2:	5a9b      	ldrh	r3, [r3, r2]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	001a      	movs	r2, r3
 80094c8:	187b      	adds	r3, r7, r1
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	189b      	adds	r3, r3, r2
 80094ce:	187a      	adds	r2, r7, r1
 80094d0:	6013      	str	r3, [r2, #0]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	00da      	lsls	r2, r3, #3
 80094d8:	187b      	adds	r3, r7, r1
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	18d3      	adds	r3, r2, r3
 80094de:	4a6d      	ldr	r2, [pc, #436]	; (8009694 <USB_EPStartXfer+0x115c>)
 80094e0:	4694      	mov	ip, r2
 80094e2:	4463      	add	r3, ip
 80094e4:	21d0      	movs	r1, #208	; 0xd0
 80094e6:	187a      	adds	r2, r7, r1
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	1d7b      	adds	r3, r7, #5
 80094ec:	33ff      	adds	r3, #255	; 0xff
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	187b      	adds	r3, r7, r1
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	801a      	strh	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	22c4      	movs	r2, #196	; 0xc4
 80094fc:	18ba      	adds	r2, r7, r2
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	785b      	ldrb	r3, [r3, #1]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d000      	beq.n	800950a <USB_EPStartXfer+0xfd2>
 8009508:	e075      	b.n	80095f6 <USB_EPStartXfer+0x10be>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	21bc      	movs	r1, #188	; 0xbc
 800950e:	187a      	adds	r2, r7, r1
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2250      	movs	r2, #80	; 0x50
 8009516:	5a9b      	ldrh	r3, [r3, r2]
 8009518:	b29b      	uxth	r3, r3
 800951a:	001a      	movs	r2, r3
 800951c:	187b      	adds	r3, r7, r1
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	189b      	adds	r3, r3, r2
 8009522:	187a      	adds	r2, r7, r1
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	00da      	lsls	r2, r3, #3
 800952c:	187b      	adds	r3, r7, r1
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	18d3      	adds	r3, r2, r3
 8009532:	4a5b      	ldr	r2, [pc, #364]	; (80096a0 <USB_EPStartXfer+0x1168>)
 8009534:	4694      	mov	ip, r2
 8009536:	4463      	add	r3, ip
 8009538:	21b8      	movs	r1, #184	; 0xb8
 800953a:	187a      	adds	r2, r7, r1
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	1d7b      	adds	r3, r7, #5
 8009540:	33ff      	adds	r3, #255	; 0xff
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d114      	bne.n	8009572 <USB_EPStartXfer+0x103a>
 8009548:	187b      	adds	r3, r7, r1
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	b29b      	uxth	r3, r3
 8009550:	4a51      	ldr	r2, [pc, #324]	; (8009698 <USB_EPStartXfer+0x1160>)
 8009552:	4013      	ands	r3, r2
 8009554:	b29a      	uxth	r2, r3
 8009556:	187b      	adds	r3, r7, r1
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	801a      	strh	r2, [r3, #0]
 800955c:	187b      	adds	r3, r7, r1
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	b29b      	uxth	r3, r3
 8009564:	4a4d      	ldr	r2, [pc, #308]	; (800969c <USB_EPStartXfer+0x1164>)
 8009566:	4313      	orrs	r3, r2
 8009568:	b29a      	uxth	r2, r3
 800956a:	187b      	adds	r3, r7, r1
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	e066      	b.n	8009640 <USB_EPStartXfer+0x1108>
 8009572:	1d7b      	adds	r3, r7, #5
 8009574:	33ff      	adds	r3, #255	; 0xff
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b3e      	cmp	r3, #62	; 0x3e
 800957a:	d81c      	bhi.n	80095b6 <USB_EPStartXfer+0x107e>
 800957c:	1d7b      	adds	r3, r7, #5
 800957e:	33ff      	adds	r3, #255	; 0xff
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	085b      	lsrs	r3, r3, #1
 8009584:	21d8      	movs	r1, #216	; 0xd8
 8009586:	187a      	adds	r2, r7, r1
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	1d7b      	adds	r3, r7, #5
 800958c:	33ff      	adds	r3, #255	; 0xff
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2201      	movs	r2, #1
 8009592:	4013      	ands	r3, r2
 8009594:	d004      	beq.n	80095a0 <USB_EPStartXfer+0x1068>
 8009596:	187b      	adds	r3, r7, r1
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3301      	adds	r3, #1
 800959c:	187a      	adds	r2, r7, r1
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	23d8      	movs	r3, #216	; 0xd8
 80095a2:	18fb      	adds	r3, r7, r3
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	029b      	lsls	r3, r3, #10
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	23b8      	movs	r3, #184	; 0xb8
 80095ae:	18fb      	adds	r3, r7, r3
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	e044      	b.n	8009640 <USB_EPStartXfer+0x1108>
 80095b6:	1d7b      	adds	r3, r7, #5
 80095b8:	33ff      	adds	r3, #255	; 0xff
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	095b      	lsrs	r3, r3, #5
 80095be:	21d8      	movs	r1, #216	; 0xd8
 80095c0:	187a      	adds	r2, r7, r1
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	1d7b      	adds	r3, r7, #5
 80095c6:	33ff      	adds	r3, #255	; 0xff
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	221f      	movs	r2, #31
 80095cc:	4013      	ands	r3, r2
 80095ce:	d104      	bne.n	80095da <USB_EPStartXfer+0x10a2>
 80095d0:	187b      	adds	r3, r7, r1
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	187a      	adds	r2, r7, r1
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	23d8      	movs	r3, #216	; 0xd8
 80095dc:	18fb      	adds	r3, r7, r3
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	029b      	lsls	r3, r3, #10
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	4a2d      	ldr	r2, [pc, #180]	; (800969c <USB_EPStartXfer+0x1164>)
 80095e8:	4313      	orrs	r3, r2
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	23b8      	movs	r3, #184	; 0xb8
 80095ee:	18fb      	adds	r3, r7, r3
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	801a      	strh	r2, [r3, #0]
 80095f4:	e024      	b.n	8009640 <USB_EPStartXfer+0x1108>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	785b      	ldrb	r3, [r3, #1]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d120      	bne.n	8009640 <USB_EPStartXfer+0x1108>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2250      	movs	r2, #80	; 0x50
 8009602:	5a9b      	ldrh	r3, [r3, r2]
 8009604:	b29b      	uxth	r3, r3
 8009606:	001a      	movs	r2, r3
 8009608:	21c4      	movs	r1, #196	; 0xc4
 800960a:	187b      	adds	r3, r7, r1
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	189b      	adds	r3, r3, r2
 8009610:	187a      	adds	r2, r7, r1
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	00da      	lsls	r2, r3, #3
 800961a:	187b      	adds	r3, r7, r1
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	18d3      	adds	r3, r2, r3
 8009620:	4a1f      	ldr	r2, [pc, #124]	; (80096a0 <USB_EPStartXfer+0x1168>)
 8009622:	4694      	mov	ip, r2
 8009624:	4463      	add	r3, ip
 8009626:	21c0      	movs	r1, #192	; 0xc0
 8009628:	187a      	adds	r2, r7, r1
 800962a:	6013      	str	r3, [r2, #0]
 800962c:	1d7b      	adds	r3, r7, #5
 800962e:	33ff      	adds	r3, #255	; 0xff
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	b29a      	uxth	r2, r3
 8009634:	187b      	adds	r3, r7, r1
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	801a      	strh	r2, [r3, #0]
 800963a:	e001      	b.n	8009640 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e025      	b.n	800968c <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	18d3      	adds	r3, r2, r3
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	b29a      	uxth	r2, r3
 800964e:	208a      	movs	r0, #138	; 0x8a
 8009650:	183b      	adds	r3, r7, r0
 8009652:	4914      	ldr	r1, [pc, #80]	; (80096a4 <USB_EPStartXfer+0x116c>)
 8009654:	400a      	ands	r2, r1
 8009656:	801a      	strh	r2, [r3, #0]
 8009658:	183b      	adds	r3, r7, r0
 800965a:	183a      	adds	r2, r7, r0
 800965c:	8812      	ldrh	r2, [r2, #0]
 800965e:	2180      	movs	r1, #128	; 0x80
 8009660:	0149      	lsls	r1, r1, #5
 8009662:	404a      	eors	r2, r1
 8009664:	801a      	strh	r2, [r3, #0]
 8009666:	183b      	adds	r3, r7, r0
 8009668:	183a      	adds	r2, r7, r0
 800966a:	8812      	ldrh	r2, [r2, #0]
 800966c:	2180      	movs	r1, #128	; 0x80
 800966e:	0189      	lsls	r1, r1, #6
 8009670:	404a      	eors	r2, r1
 8009672:	801a      	strh	r2, [r3, #0]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	18d3      	adds	r3, r2, r3
 800967e:	183a      	adds	r2, r7, r0
 8009680:	8812      	ldrh	r2, [r2, #0]
 8009682:	4909      	ldr	r1, [pc, #36]	; (80096a8 <USB_EPStartXfer+0x1170>)
 8009684:	430a      	orrs	r2, r1
 8009686:	b292      	uxth	r2, r2
 8009688:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	0018      	movs	r0, r3
 800968e:	46bd      	mov	sp, r7
 8009690:	b043      	add	sp, #268	; 0x10c
 8009692:	bd90      	pop	{r4, r7, pc}
 8009694:	00000402 	.word	0x00000402
 8009698:	ffff83ff 	.word	0xffff83ff
 800969c:	ffff8000 	.word	0xffff8000
 80096a0:	00000406 	.word	0x00000406
 80096a4:	ffffbf8f 	.word	0xffffbf8f
 80096a8:	ffff8080 	.word	0xffff8080

080096ac <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d01d      	beq.n	80096fa <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	18d3      	adds	r3, r2, r3
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	200c      	movs	r0, #12
 80096ce:	183b      	adds	r3, r7, r0
 80096d0:	491b      	ldr	r1, [pc, #108]	; (8009740 <USB_EPSetStall+0x94>)
 80096d2:	400a      	ands	r2, r1
 80096d4:	801a      	strh	r2, [r3, #0]
 80096d6:	183b      	adds	r3, r7, r0
 80096d8:	183a      	adds	r2, r7, r0
 80096da:	8812      	ldrh	r2, [r2, #0]
 80096dc:	2110      	movs	r1, #16
 80096de:	404a      	eors	r2, r1
 80096e0:	801a      	strh	r2, [r3, #0]
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	18d3      	adds	r3, r2, r3
 80096ec:	183a      	adds	r2, r7, r0
 80096ee:	8812      	ldrh	r2, [r2, #0]
 80096f0:	4914      	ldr	r1, [pc, #80]	; (8009744 <USB_EPSetStall+0x98>)
 80096f2:	430a      	orrs	r2, r1
 80096f4:	b292      	uxth	r2, r2
 80096f6:	801a      	strh	r2, [r3, #0]
 80096f8:	e01d      	b.n	8009736 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	18d3      	adds	r3, r2, r3
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	b29a      	uxth	r2, r3
 8009708:	200e      	movs	r0, #14
 800970a:	183b      	adds	r3, r7, r0
 800970c:	490e      	ldr	r1, [pc, #56]	; (8009748 <USB_EPSetStall+0x9c>)
 800970e:	400a      	ands	r2, r1
 8009710:	801a      	strh	r2, [r3, #0]
 8009712:	183b      	adds	r3, r7, r0
 8009714:	183a      	adds	r2, r7, r0
 8009716:	8812      	ldrh	r2, [r2, #0]
 8009718:	2180      	movs	r1, #128	; 0x80
 800971a:	0149      	lsls	r1, r1, #5
 800971c:	404a      	eors	r2, r1
 800971e:	801a      	strh	r2, [r3, #0]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	18d3      	adds	r3, r2, r3
 800972a:	183a      	adds	r2, r7, r0
 800972c:	8812      	ldrh	r2, [r2, #0]
 800972e:	4905      	ldr	r1, [pc, #20]	; (8009744 <USB_EPSetStall+0x98>)
 8009730:	430a      	orrs	r2, r1
 8009732:	b292      	uxth	r2, r2
 8009734:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	0018      	movs	r0, r3
 800973a:	46bd      	mov	sp, r7
 800973c:	b004      	add	sp, #16
 800973e:	bd80      	pop	{r7, pc}
 8009740:	ffff8fbf 	.word	0xffff8fbf
 8009744:	ffff8080 	.word	0xffff8080
 8009748:	ffffbf8f 	.word	0xffffbf8f

0800974c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b086      	sub	sp, #24
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	7b1b      	ldrb	r3, [r3, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d000      	beq.n	8009760 <USB_EPClearStall+0x14>
 800975e:	e095      	b.n	800988c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	785b      	ldrb	r3, [r3, #1]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d046      	beq.n	80097f6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	18d2      	adds	r2, r2, r3
 8009772:	2110      	movs	r1, #16
 8009774:	187b      	adds	r3, r7, r1
 8009776:	8812      	ldrh	r2, [r2, #0]
 8009778:	801a      	strh	r2, [r3, #0]
 800977a:	187b      	adds	r3, r7, r1
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	2240      	movs	r2, #64	; 0x40
 8009780:	4013      	ands	r3, r2
 8009782:	d016      	beq.n	80097b2 <USB_EPClearStall+0x66>
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	18d3      	adds	r3, r2, r3
 800978e:	881b      	ldrh	r3, [r3, #0]
 8009790:	b29a      	uxth	r2, r3
 8009792:	200e      	movs	r0, #14
 8009794:	183b      	adds	r3, r7, r0
 8009796:	4940      	ldr	r1, [pc, #256]	; (8009898 <USB_EPClearStall+0x14c>)
 8009798:	400a      	ands	r2, r1
 800979a:	801a      	strh	r2, [r3, #0]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	18d3      	adds	r3, r2, r3
 80097a6:	183a      	adds	r2, r7, r0
 80097a8:	8812      	ldrh	r2, [r2, #0]
 80097aa:	493c      	ldr	r1, [pc, #240]	; (800989c <USB_EPClearStall+0x150>)
 80097ac:	430a      	orrs	r2, r1
 80097ae:	b292      	uxth	r2, r2
 80097b0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	78db      	ldrb	r3, [r3, #3]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d068      	beq.n	800988c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	18d3      	adds	r3, r2, r3
 80097c4:	881b      	ldrh	r3, [r3, #0]
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	200c      	movs	r0, #12
 80097ca:	183b      	adds	r3, r7, r0
 80097cc:	4934      	ldr	r1, [pc, #208]	; (80098a0 <USB_EPClearStall+0x154>)
 80097ce:	400a      	ands	r2, r1
 80097d0:	801a      	strh	r2, [r3, #0]
 80097d2:	183b      	adds	r3, r7, r0
 80097d4:	183a      	adds	r2, r7, r0
 80097d6:	8812      	ldrh	r2, [r2, #0]
 80097d8:	2120      	movs	r1, #32
 80097da:	404a      	eors	r2, r1
 80097dc:	801a      	strh	r2, [r3, #0]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	18d3      	adds	r3, r2, r3
 80097e8:	183a      	adds	r2, r7, r0
 80097ea:	8812      	ldrh	r2, [r2, #0]
 80097ec:	492d      	ldr	r1, [pc, #180]	; (80098a4 <USB_EPClearStall+0x158>)
 80097ee:	430a      	orrs	r2, r1
 80097f0:	b292      	uxth	r2, r2
 80097f2:	801a      	strh	r2, [r3, #0]
 80097f4:	e04a      	b.n	800988c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	18d2      	adds	r2, r2, r3
 8009800:	2116      	movs	r1, #22
 8009802:	187b      	adds	r3, r7, r1
 8009804:	8812      	ldrh	r2, [r2, #0]
 8009806:	801a      	strh	r2, [r3, #0]
 8009808:	187b      	adds	r3, r7, r1
 800980a:	881a      	ldrh	r2, [r3, #0]
 800980c:	2380      	movs	r3, #128	; 0x80
 800980e:	01db      	lsls	r3, r3, #7
 8009810:	4013      	ands	r3, r2
 8009812:	d016      	beq.n	8009842 <USB_EPClearStall+0xf6>
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	18d3      	adds	r3, r2, r3
 800981e:	881b      	ldrh	r3, [r3, #0]
 8009820:	b29a      	uxth	r2, r3
 8009822:	2014      	movs	r0, #20
 8009824:	183b      	adds	r3, r7, r0
 8009826:	491c      	ldr	r1, [pc, #112]	; (8009898 <USB_EPClearStall+0x14c>)
 8009828:	400a      	ands	r2, r1
 800982a:	801a      	strh	r2, [r3, #0]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	18d3      	adds	r3, r2, r3
 8009836:	183a      	adds	r2, r7, r0
 8009838:	8812      	ldrh	r2, [r2, #0]
 800983a:	491b      	ldr	r1, [pc, #108]	; (80098a8 <USB_EPClearStall+0x15c>)
 800983c:	430a      	orrs	r2, r1
 800983e:	b292      	uxth	r2, r2
 8009840:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	18d3      	adds	r3, r2, r3
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	b29a      	uxth	r2, r3
 8009850:	2012      	movs	r0, #18
 8009852:	183b      	adds	r3, r7, r0
 8009854:	4915      	ldr	r1, [pc, #84]	; (80098ac <USB_EPClearStall+0x160>)
 8009856:	400a      	ands	r2, r1
 8009858:	801a      	strh	r2, [r3, #0]
 800985a:	183b      	adds	r3, r7, r0
 800985c:	183a      	adds	r2, r7, r0
 800985e:	8812      	ldrh	r2, [r2, #0]
 8009860:	2180      	movs	r1, #128	; 0x80
 8009862:	0149      	lsls	r1, r1, #5
 8009864:	404a      	eors	r2, r1
 8009866:	801a      	strh	r2, [r3, #0]
 8009868:	183b      	adds	r3, r7, r0
 800986a:	183a      	adds	r2, r7, r0
 800986c:	8812      	ldrh	r2, [r2, #0]
 800986e:	2180      	movs	r1, #128	; 0x80
 8009870:	0189      	lsls	r1, r1, #6
 8009872:	404a      	eors	r2, r1
 8009874:	801a      	strh	r2, [r3, #0]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	18d3      	adds	r3, r2, r3
 8009880:	183a      	adds	r2, r7, r0
 8009882:	8812      	ldrh	r2, [r2, #0]
 8009884:	4907      	ldr	r1, [pc, #28]	; (80098a4 <USB_EPClearStall+0x158>)
 8009886:	430a      	orrs	r2, r1
 8009888:	b292      	uxth	r2, r2
 800988a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	0018      	movs	r0, r3
 8009890:	46bd      	mov	sp, r7
 8009892:	b006      	add	sp, #24
 8009894:	bd80      	pop	{r7, pc}
 8009896:	46c0      	nop			; (mov r8, r8)
 8009898:	ffff8f8f 	.word	0xffff8f8f
 800989c:	ffff80c0 	.word	0xffff80c0
 80098a0:	ffff8fbf 	.word	0xffff8fbf
 80098a4:	ffff8080 	.word	0xffff8080
 80098a8:	ffffc080 	.word	0xffffc080
 80098ac:	ffffbf8f 	.word	0xffffbf8f

080098b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	000a      	movs	r2, r1
 80098ba:	1cfb      	adds	r3, r7, #3
 80098bc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80098be:	1cfb      	adds	r3, r7, #3
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d103      	bne.n	80098ce <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	224c      	movs	r2, #76	; 0x4c
 80098ca:	2180      	movs	r1, #128	; 0x80
 80098cc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	0018      	movs	r0, r3
 80098d2:	46bd      	mov	sp, r7
 80098d4:	b002      	add	sp, #8
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2258      	movs	r2, #88	; 0x58
 80098e4:	5a9b      	ldrh	r3, [r3, r2]
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	4a05      	ldr	r2, [pc, #20]	; (8009900 <USB_DevConnect+0x28>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	b299      	uxth	r1, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2258      	movs	r2, #88	; 0x58
 80098f2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	0018      	movs	r0, r3
 80098f8:	46bd      	mov	sp, r7
 80098fa:	b002      	add	sp, #8
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	46c0      	nop			; (mov r8, r8)
 8009900:	ffff8000 	.word	0xffff8000

08009904 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2244      	movs	r2, #68	; 0x44
 8009910:	5a9b      	ldrh	r3, [r3, r2]
 8009912:	b29b      	uxth	r3, r3
 8009914:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009916:	68fb      	ldr	r3, [r7, #12]
}
 8009918:	0018      	movs	r0, r3
 800991a:	46bd      	mov	sp, r7
 800991c:	b004      	add	sp, #16
 800991e:	bd80      	pop	{r7, pc}

08009920 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08c      	sub	sp, #48	; 0x30
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	0019      	movs	r1, r3
 800992c:	1dbb      	adds	r3, r7, #6
 800992e:	801a      	strh	r2, [r3, #0]
 8009930:	1d3b      	adds	r3, r7, #4
 8009932:	1c0a      	adds	r2, r1, #0
 8009934:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009936:	1d3b      	adds	r3, r7, #4
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	3301      	adds	r3, #1
 800993c:	085b      	lsrs	r3, r3, #1
 800993e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009948:	1dbb      	adds	r3, r7, #6
 800994a:	881a      	ldrh	r2, [r3, #0]
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	18d3      	adds	r3, r2, r3
 8009950:	2280      	movs	r2, #128	; 0x80
 8009952:	00d2      	lsls	r2, r2, #3
 8009954:	4694      	mov	ip, r2
 8009956:	4463      	add	r3, ip
 8009958:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800995e:	e01b      	b.n	8009998 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	3301      	adds	r3, #1
 800996a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	b29b      	uxth	r3, r3
 8009972:	021b      	lsls	r3, r3, #8
 8009974:	b29b      	uxth	r3, r3
 8009976:	001a      	movs	r2, r3
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	4313      	orrs	r3, r2
 800997c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	b29a      	uxth	r2, r3
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009988:	3302      	adds	r3, #2
 800998a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	3301      	adds	r3, #1
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009994:	3b01      	subs	r3, #1
 8009996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1e0      	bne.n	8009960 <USB_WritePMA+0x40>
  }
}
 800999e:	46c0      	nop			; (mov r8, r8)
 80099a0:	46c0      	nop			; (mov r8, r8)
 80099a2:	46bd      	mov	sp, r7
 80099a4:	b00c      	add	sp, #48	; 0x30
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08a      	sub	sp, #40	; 0x28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	0019      	movs	r1, r3
 80099b4:	1dbb      	adds	r3, r7, #6
 80099b6:	801a      	strh	r2, [r3, #0]
 80099b8:	1d3b      	adds	r3, r7, #4
 80099ba:	1c0a      	adds	r2, r1, #0
 80099bc:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80099be:	1d3b      	adds	r3, r7, #4
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	085b      	lsrs	r3, r3, #1
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80099d0:	1dbb      	adds	r3, r7, #6
 80099d2:	881a      	ldrh	r2, [r3, #0]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	18d3      	adds	r3, r2, r3
 80099d8:	2280      	movs	r2, #128	; 0x80
 80099da:	00d2      	lsls	r2, r2, #3
 80099dc:	4694      	mov	ip, r2
 80099de:	4463      	add	r3, ip
 80099e0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24
 80099e6:	e018      	b.n	8009a1a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	3302      	adds	r3, #2
 80099f4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	3301      	adds	r3, #1
 8009a02:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	0a1b      	lsrs	r3, r3, #8
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	3301      	adds	r3, #1
 8009a12:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	3b01      	subs	r3, #1
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e3      	bne.n	80099e8 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009a20:	1d3b      	adds	r3, r7, #4
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	2201      	movs	r2, #1
 8009a26:	4013      	ands	r3, r2
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d007      	beq.n	8009a3e <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	701a      	strb	r2, [r3, #0]
  }
}
 8009a3e:	46c0      	nop			; (mov r8, r8)
 8009a40:	46bd      	mov	sp, r7
 8009a42:	b00a      	add	sp, #40	; 0x28
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	000a      	movs	r2, r1
 8009a50:	1cfb      	adds	r3, r7, #3
 8009a52:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8009a54:	230f      	movs	r3, #15
 8009a56:	18fb      	adds	r3, r7, r3
 8009a58:	2200      	movs	r2, #0
 8009a5a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	7c1b      	ldrb	r3, [r3, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d116      	bne.n	8009a92 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a64:	2380      	movs	r3, #128	; 0x80
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	2181      	movs	r1, #129	; 0x81
 8009a6e:	f002 f8b4 	bl	800bbda <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2201      	movs	r2, #1
 8009a76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a78:	2380      	movs	r3, #128	; 0x80
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	2101      	movs	r1, #1
 8009a82:	f002 f8aa 	bl	800bbda <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	23b6      	movs	r3, #182	; 0xb6
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	50d1      	str	r1, [r2, r3]
 8009a90:	e013      	b.n	8009aba <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	2340      	movs	r3, #64	; 0x40
 8009a96:	2202      	movs	r2, #2
 8009a98:	2181      	movs	r1, #129	; 0x81
 8009a9a:	f002 f89e 	bl	800bbda <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	2340      	movs	r3, #64	; 0x40
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	2101      	movs	r1, #1
 8009aac:	f002 f895 	bl	800bbda <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	23b6      	movs	r3, #182	; 0xb6
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	2308      	movs	r3, #8
 8009abe:	2203      	movs	r2, #3
 8009ac0:	2182      	movs	r1, #130	; 0x82
 8009ac2:	f002 f88a 	bl	800bbda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009acc:	2387      	movs	r3, #135	; 0x87
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f002 fa1b 	bl	800bf0c <USBD_static_malloc>
 8009ad6:	0001      	movs	r1, r0
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	23ae      	movs	r3, #174	; 0xae
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	23ae      	movs	r3, #174	; 0xae
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	58d3      	ldr	r3, [r2, r3]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d104      	bne.n	8009af6 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8009aec:	230f      	movs	r3, #15
 8009aee:	18fb      	adds	r3, r7, r3
 8009af0:	2201      	movs	r2, #1
 8009af2:	701a      	strb	r2, [r3, #0]
 8009af4:	e02c      	b.n	8009b50 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	23ae      	movs	r3, #174	; 0xae
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	58d3      	ldr	r3, [r2, r3]
 8009afe:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	23af      	movs	r3, #175	; 0xaf
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	58d3      	ldr	r3, [r2, r3]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	2385      	movs	r3, #133	; 0x85
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	2100      	movs	r1, #0
 8009b14:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	2386      	movs	r3, #134	; 0x86
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	7c1b      	ldrb	r3, [r3, #16]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10a      	bne.n	8009b3e <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	2381      	movs	r3, #129	; 0x81
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	58d2      	ldr	r2, [r2, r3]
 8009b30:	2380      	movs	r3, #128	; 0x80
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	2101      	movs	r1, #1
 8009b38:	f002 f99a 	bl	800be70 <USBD_LL_PrepareReceive>
 8009b3c:	e008      	b.n	8009b50 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	2381      	movs	r3, #129	; 0x81
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	58d2      	ldr	r2, [r2, r3]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	2340      	movs	r3, #64	; 0x40
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	f002 f990 	bl	800be70 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009b50:	230f      	movs	r3, #15
 8009b52:	18fb      	adds	r3, r7, r3
 8009b54:	781b      	ldrb	r3, [r3, #0]
}
 8009b56:	0018      	movs	r0, r3
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	b004      	add	sp, #16
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b084      	sub	sp, #16
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	000a      	movs	r2, r1
 8009b68:	1cfb      	adds	r3, r7, #3
 8009b6a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8009b6c:	230f      	movs	r3, #15
 8009b6e:	18fb      	adds	r3, r7, r3
 8009b70:	2200      	movs	r2, #0
 8009b72:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2181      	movs	r1, #129	; 0x81
 8009b78:	0018      	movs	r0, r3
 8009b7a:	f002 f865 	bl	800bc48 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2101      	movs	r1, #1
 8009b88:	0018      	movs	r0, r3
 8009b8a:	f002 f85d 	bl	800bc48 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	23b6      	movs	r3, #182	; 0xb6
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	2100      	movs	r1, #0
 8009b96:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2182      	movs	r1, #130	; 0x82
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	f002 f853 	bl	800bc48 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	23ae      	movs	r3, #174	; 0xae
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	58d3      	ldr	r3, [r2, r3]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d011      	beq.n	8009bd8 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	23af      	movs	r3, #175	; 0xaf
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	58d3      	ldr	r3, [r2, r3]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	23ae      	movs	r3, #174	; 0xae
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	58d3      	ldr	r3, [r2, r3]
 8009bc8:	0018      	movs	r0, r3
 8009bca:	f002 f9ab 	bl	800bf24 <USBD_static_free>
    pdev->pClassData = NULL;
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	23ae      	movs	r3, #174	; 0xae
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8009bd8:	230f      	movs	r3, #15
 8009bda:	18fb      	adds	r3, r7, r3
 8009bdc:	781b      	ldrb	r3, [r3, #0]
}
 8009bde:	0018      	movs	r0, r3
 8009be0:	46bd      	mov	sp, r7
 8009be2:	b004      	add	sp, #16
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	23ae      	movs	r3, #174	; 0xae
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	58d3      	ldr	r3, [r2, r3]
 8009bfa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009bfc:	230f      	movs	r3, #15
 8009bfe:	18fb      	adds	r3, r7, r3
 8009c00:	2200      	movs	r2, #0
 8009c02:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8009c04:	230c      	movs	r3, #12
 8009c06:	18fb      	adds	r3, r7, r3
 8009c08:	2200      	movs	r2, #0
 8009c0a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8009c0c:	2317      	movs	r3, #23
 8009c0e:	18fb      	adds	r3, r7, r3
 8009c10:	2200      	movs	r2, #0
 8009c12:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	001a      	movs	r2, r3
 8009c1a:	2360      	movs	r3, #96	; 0x60
 8009c1c:	4013      	ands	r3, r2
 8009c1e:	d03d      	beq.n	8009c9c <USBD_CDC_Setup+0xb4>
 8009c20:	2b20      	cmp	r3, #32
 8009c22:	d000      	beq.n	8009c26 <USBD_CDC_Setup+0x3e>
 8009c24:	e094      	b.n	8009d50 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	88db      	ldrh	r3, [r3, #6]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d02b      	beq.n	8009c86 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	b25b      	sxtb	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	da12      	bge.n	8009c5e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	23af      	movs	r3, #175	; 0xaf
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	58d3      	ldr	r3, [r2, r3]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009c46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	88d2      	ldrh	r2, [r2, #6]
 8009c4c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009c4e:	6939      	ldr	r1, [r7, #16]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	88da      	ldrh	r2, [r3, #6]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	0018      	movs	r0, r3
 8009c58:	f001 fbb2 	bl	800b3c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009c5c:	e083      	b.n	8009d66 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	7859      	ldrb	r1, [r3, #1]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	2380      	movs	r3, #128	; 0x80
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	88db      	ldrh	r3, [r3, #6]
 8009c6e:	b2d9      	uxtb	r1, r3
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	4a40      	ldr	r2, [pc, #256]	; (8009d74 <USBD_CDC_Setup+0x18c>)
 8009c74:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009c76:	6939      	ldr	r1, [r7, #16]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	88da      	ldrh	r2, [r3, #6]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f001 fbd1 	bl	800b426 <USBD_CtlPrepareRx>
      break;
 8009c84:	e06f      	b.n	8009d66 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	23af      	movs	r3, #175	; 0xaf
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	58d3      	ldr	r3, [r2, r3]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	7850      	ldrb	r0, [r2, #1]
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	2200      	movs	r2, #0
 8009c98:	4798      	blx	r3
      break;
 8009c9a:	e064      	b.n	8009d66 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	785b      	ldrb	r3, [r3, #1]
 8009ca0:	2b0b      	cmp	r3, #11
 8009ca2:	d037      	beq.n	8009d14 <USBD_CDC_Setup+0x12c>
 8009ca4:	dc47      	bgt.n	8009d36 <USBD_CDC_Setup+0x14e>
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d002      	beq.n	8009cb0 <USBD_CDC_Setup+0xc8>
 8009caa:	2b0a      	cmp	r3, #10
 8009cac:	d019      	beq.n	8009ce2 <USBD_CDC_Setup+0xfa>
 8009cae:	e042      	b.n	8009d36 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	23a7      	movs	r3, #167	; 0xa7
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	5cd3      	ldrb	r3, [r2, r3]
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d107      	bne.n	8009ccc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009cbc:	230c      	movs	r3, #12
 8009cbe:	18f9      	adds	r1, r7, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	f001 fb7b 	bl	800b3c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cca:	e040      	b.n	8009d4e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	0011      	movs	r1, r2
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	f001 faf6 	bl	800b2c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cd8:	2317      	movs	r3, #23
 8009cda:	18fb      	adds	r3, r7, r3
 8009cdc:	2202      	movs	r2, #2
 8009cde:	701a      	strb	r2, [r3, #0]
          break;
 8009ce0:	e035      	b.n	8009d4e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	23a7      	movs	r3, #167	; 0xa7
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	5cd3      	ldrb	r3, [r2, r3]
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d107      	bne.n	8009cfe <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cee:	230f      	movs	r3, #15
 8009cf0:	18f9      	adds	r1, r7, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	0018      	movs	r0, r3
 8009cf8:	f001 fb62 	bl	800b3c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cfc:	e027      	b.n	8009d4e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	0011      	movs	r1, r2
 8009d04:	0018      	movs	r0, r3
 8009d06:	f001 fadd 	bl	800b2c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d0a:	2317      	movs	r3, #23
 8009d0c:	18fb      	adds	r3, r7, r3
 8009d0e:	2202      	movs	r2, #2
 8009d10:	701a      	strb	r2, [r3, #0]
          break;
 8009d12:	e01c      	b.n	8009d4e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	23a7      	movs	r3, #167	; 0xa7
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	5cd3      	ldrb	r3, [r2, r3]
 8009d1c:	2b03      	cmp	r3, #3
 8009d1e:	d015      	beq.n	8009d4c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	0011      	movs	r1, r2
 8009d26:	0018      	movs	r0, r3
 8009d28:	f001 facc 	bl	800b2c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d2c:	2317      	movs	r3, #23
 8009d2e:	18fb      	adds	r3, r7, r3
 8009d30:	2202      	movs	r2, #2
 8009d32:	701a      	strb	r2, [r3, #0]
          }
          break;
 8009d34:	e00a      	b.n	8009d4c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	0011      	movs	r1, r2
 8009d3c:	0018      	movs	r0, r3
 8009d3e:	f001 fac1 	bl	800b2c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8009d42:	2317      	movs	r3, #23
 8009d44:	18fb      	adds	r3, r7, r3
 8009d46:	2202      	movs	r2, #2
 8009d48:	701a      	strb	r2, [r3, #0]
          break;
 8009d4a:	e000      	b.n	8009d4e <USBD_CDC_Setup+0x166>
          break;
 8009d4c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009d4e:	e00a      	b.n	8009d66 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	0011      	movs	r1, r2
 8009d56:	0018      	movs	r0, r3
 8009d58:	f001 fab4 	bl	800b2c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009d5c:	2317      	movs	r3, #23
 8009d5e:	18fb      	adds	r3, r7, r3
 8009d60:	2202      	movs	r2, #2
 8009d62:	701a      	strb	r2, [r3, #0]
      break;
 8009d64:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009d66:	2317      	movs	r3, #23
 8009d68:	18fb      	adds	r3, r7, r3
 8009d6a:	781b      	ldrb	r3, [r3, #0]
}
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	b006      	add	sp, #24
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	00000201 	.word	0x00000201

08009d78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	000a      	movs	r2, r1
 8009d82:	1cfb      	adds	r3, r7, #3
 8009d84:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	23ae      	movs	r3, #174	; 0xae
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	58d3      	ldr	r3, [r2, r3]
 8009d8e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	23b0      	movs	r3, #176	; 0xb0
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	58d3      	ldr	r3, [r2, r3]
 8009d98:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	23ae      	movs	r3, #174	; 0xae
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	58d3      	ldr	r3, [r2, r3]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d03e      	beq.n	8009e24 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009da6:	1cfb      	adds	r3, r7, #3
 8009da8:	781a      	ldrb	r2, [r3, #0]
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	0013      	movs	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	189b      	adds	r3, r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	18cb      	adds	r3, r1, r3
 8009db6:	331c      	adds	r3, #28
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d02b      	beq.n	8009e16 <USBD_CDC_DataIn+0x9e>
 8009dbe:	1cfb      	adds	r3, r7, #3
 8009dc0:	781a      	ldrb	r2, [r3, #0]
 8009dc2:	6879      	ldr	r1, [r7, #4]
 8009dc4:	0013      	movs	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	189b      	adds	r3, r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	18cb      	adds	r3, r1, r3
 8009dce:	331c      	adds	r3, #28
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	1cfb      	adds	r3, r7, #3
 8009dd4:	781a      	ldrb	r2, [r3, #0]
 8009dd6:	68b9      	ldr	r1, [r7, #8]
 8009dd8:	0013      	movs	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	189b      	adds	r3, r3, r2
 8009dde:	00db      	lsls	r3, r3, #3
 8009de0:	18cb      	adds	r3, r1, r3
 8009de2:	3338      	adds	r3, #56	; 0x38
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	0019      	movs	r1, r3
 8009de8:	f7f6 fa26 	bl	8000238 <__aeabi_uidivmod>
 8009dec:	1e0b      	subs	r3, r1, #0
 8009dee:	d112      	bne.n	8009e16 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009df0:	1cfb      	adds	r3, r7, #3
 8009df2:	781a      	ldrb	r2, [r3, #0]
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	0013      	movs	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	189b      	adds	r3, r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	18cb      	adds	r3, r1, r3
 8009e00:	331c      	adds	r3, #28
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e06:	1cfb      	adds	r3, r7, #3
 8009e08:	7819      	ldrb	r1, [r3, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f001 fff7 	bl	800be02 <USBD_LL_Transmit>
 8009e14:	e004      	b.n	8009e20 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	2385      	movs	r3, #133	; 0x85
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	e000      	b.n	8009e26 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8009e24:	2302      	movs	r3, #2
  }
}
 8009e26:	0018      	movs	r0, r3
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	b004      	add	sp, #16
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	000a      	movs	r2, r1
 8009e38:	1cfb      	adds	r3, r7, #3
 8009e3a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	23ae      	movs	r3, #174	; 0xae
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	58d3      	ldr	r3, [r2, r3]
 8009e44:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e46:	1cfb      	adds	r3, r7, #3
 8009e48:	781a      	ldrb	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	0011      	movs	r1, r2
 8009e4e:	0018      	movs	r0, r3
 8009e50:	f002 f845 	bl	800bede <USBD_LL_GetRxDataSize>
 8009e54:	0001      	movs	r1, r0
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	2383      	movs	r3, #131	; 0x83
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	23ae      	movs	r3, #174	; 0xae
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	58d3      	ldr	r3, [r2, r3]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d011      	beq.n	8009e8e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	23af      	movs	r3, #175	; 0xaf
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	58d3      	ldr	r3, [r2, r3]
 8009e72:	68da      	ldr	r2, [r3, #12]
 8009e74:	68f9      	ldr	r1, [r7, #12]
 8009e76:	2381      	movs	r3, #129	; 0x81
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	58c8      	ldr	r0, [r1, r3]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2183      	movs	r1, #131	; 0x83
 8009e80:	0089      	lsls	r1, r1, #2
 8009e82:	468c      	mov	ip, r1
 8009e84:	4463      	add	r3, ip
 8009e86:	0019      	movs	r1, r3
 8009e88:	4790      	blx	r2

    return USBD_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e000      	b.n	8009e90 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8009e8e:	2302      	movs	r3, #2
  }
}
 8009e90:	0018      	movs	r0, r3
 8009e92:	46bd      	mov	sp, r7
 8009e94:	b004      	add	sp, #16
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e98:	b590      	push	{r4, r7, lr}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	23ae      	movs	r3, #174	; 0xae
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	58d3      	ldr	r3, [r2, r3]
 8009ea8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	23af      	movs	r3, #175	; 0xaf
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	58d3      	ldr	r3, [r2, r3]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d019      	beq.n	8009eea <USBD_CDC_EP0_RxReady+0x52>
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	2380      	movs	r3, #128	; 0x80
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	5cd3      	ldrb	r3, [r2, r3]
 8009ebe:	2bff      	cmp	r3, #255	; 0xff
 8009ec0:	d013      	beq.n	8009eea <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	23af      	movs	r3, #175	; 0xaf
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	58d3      	ldr	r3, [r2, r3]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	68f9      	ldr	r1, [r7, #12]
 8009ece:	2280      	movs	r2, #128	; 0x80
 8009ed0:	0092      	lsls	r2, r2, #2
 8009ed2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8009ed4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	4c06      	ldr	r4, [pc, #24]	; (8009ef4 <USBD_CDC_EP0_RxReady+0x5c>)
 8009eda:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009edc:	b292      	uxth	r2, r2
 8009ede:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	2380      	movs	r3, #128	; 0x80
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	21ff      	movs	r1, #255	; 0xff
 8009ee8:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	0018      	movs	r0, r3
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	b005      	add	sp, #20
 8009ef2:	bd90      	pop	{r4, r7, pc}
 8009ef4:	00000201 	.word	0x00000201

08009ef8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2243      	movs	r2, #67	; 0x43
 8009f04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009f06:	4b02      	ldr	r3, [pc, #8]	; (8009f10 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8009f08:	0018      	movs	r0, r3
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	b002      	add	sp, #8
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	20000094 	.word	0x20000094

08009f14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2243      	movs	r2, #67	; 0x43
 8009f20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009f22:	4b02      	ldr	r3, [pc, #8]	; (8009f2c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8009f24:	0018      	movs	r0, r3
 8009f26:	46bd      	mov	sp, r7
 8009f28:	b002      	add	sp, #8
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	20000050 	.word	0x20000050

08009f30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2243      	movs	r2, #67	; 0x43
 8009f3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009f3e:	4b02      	ldr	r3, [pc, #8]	; (8009f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8009f40:	0018      	movs	r0, r3
 8009f42:	46bd      	mov	sp, r7
 8009f44:	b002      	add	sp, #8
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	200000d8 	.word	0x200000d8

08009f4c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	220a      	movs	r2, #10
 8009f58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009f5a:	4b02      	ldr	r3, [pc, #8]	; (8009f64 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	b002      	add	sp, #8
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	2000000c 	.word	0x2000000c

08009f68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009f72:	200f      	movs	r0, #15
 8009f74:	183b      	adds	r3, r7, r0
 8009f76:	2202      	movs	r2, #2
 8009f78:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d007      	beq.n	8009f90 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	23af      	movs	r3, #175	; 0xaf
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8009f8a:	183b      	adds	r3, r7, r0
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009f90:	230f      	movs	r3, #15
 8009f92:	18fb      	adds	r3, r7, r3
 8009f94:	781b      	ldrb	r3, [r3, #0]
}
 8009f96:	0018      	movs	r0, r3
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	b004      	add	sp, #16
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	1dbb      	adds	r3, r7, #6
 8009faa:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	23ae      	movs	r3, #174	; 0xae
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	58d3      	ldr	r3, [r2, r3]
 8009fb4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	2382      	movs	r3, #130	; 0x82
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	68b9      	ldr	r1, [r7, #8]
 8009fbe:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8009fc0:	1dbb      	adds	r3, r7, #6
 8009fc2:	8819      	ldrh	r1, [r3, #0]
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	2384      	movs	r3, #132	; 0x84
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	0018      	movs	r0, r3
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	b006      	add	sp, #24
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b084      	sub	sp, #16
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	23ae      	movs	r3, #174	; 0xae
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	58d3      	ldr	r3, [r2, r3]
 8009fe8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	2381      	movs	r3, #129	; 0x81
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	b004      	add	sp, #16
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	23ae      	movs	r3, #174	; 0xae
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	58d3      	ldr	r3, [r2, r3]
 800a00e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	23ae      	movs	r3, #174	; 0xae
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	58d3      	ldr	r3, [r2, r3]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d022      	beq.n	800a062 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	2385      	movs	r3, #133	; 0x85
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	58d3      	ldr	r3, [r2, r3]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d11a      	bne.n	800a05e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	2385      	movs	r3, #133	; 0x85
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	2101      	movs	r1, #1
 800a030:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	2384      	movs	r3, #132	; 0x84
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	58d2      	ldr	r2, [r2, r3]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	2382      	movs	r3, #130	; 0x82
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	2384      	movs	r3, #132	; 0x84
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a04e:	b29b      	uxth	r3, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	000a      	movs	r2, r1
 800a054:	2181      	movs	r1, #129	; 0x81
 800a056:	f001 fed4 	bl	800be02 <USBD_LL_Transmit>

      return USBD_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	e002      	b.n	800a064 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800a062:	2302      	movs	r3, #2
  }
}
 800a064:	0018      	movs	r0, r3
 800a066:	46bd      	mov	sp, r7
 800a068:	b004      	add	sp, #16
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	23ae      	movs	r3, #174	; 0xae
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	58d3      	ldr	r3, [r2, r3]
 800a07c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	23ae      	movs	r3, #174	; 0xae
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	58d3      	ldr	r3, [r2, r3]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d019      	beq.n	800a0be <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	7c1b      	ldrb	r3, [r3, #16]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10a      	bne.n	800a0a8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	2381      	movs	r3, #129	; 0x81
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	58d2      	ldr	r2, [r2, r3]
 800a09a:	2380      	movs	r3, #128	; 0x80
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	f001 fee5 	bl	800be70 <USBD_LL_PrepareReceive>
 800a0a6:	e008      	b.n	800a0ba <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	2381      	movs	r3, #129	; 0x81
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	58d2      	ldr	r2, [r2, r3]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	2340      	movs	r3, #64	; 0x40
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	f001 fedb 	bl	800be70 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	e000      	b.n	800a0c0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800a0be:	2302      	movs	r3, #2
  }
}
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	b004      	add	sp, #16
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	1dfb      	adds	r3, r7, #7
 800a0d4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e020      	b.n	800a122 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	23ad      	movs	r3, #173	; 0xad
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	58d3      	ldr	r3, [r2, r3]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d004      	beq.n	800a0f6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	23ad      	movs	r3, #173	; 0xad
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	23ac      	movs	r3, #172	; 0xac
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	68b9      	ldr	r1, [r7, #8]
 800a104:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	23a7      	movs	r3, #167	; 0xa7
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	2101      	movs	r1, #1
 800a10e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	1dfa      	adds	r2, r7, #7
 800a114:	7812      	ldrb	r2, [r2, #0]
 800a116:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	0018      	movs	r0, r3
 800a11c:	f001 fcd4 	bl	800bac8 <USBD_LL_Init>

  return USBD_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	0018      	movs	r0, r3
 800a124:	46bd      	mov	sp, r7
 800a126:	b004      	add	sp, #16
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a134:	200f      	movs	r0, #15
 800a136:	183b      	adds	r3, r7, r0
 800a138:	2200      	movs	r2, #0
 800a13a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d008      	beq.n	800a154 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	23ad      	movs	r3, #173	; 0xad
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800a14c:	183b      	adds	r3, r7, r0
 800a14e:	2200      	movs	r2, #0
 800a150:	701a      	strb	r2, [r3, #0]
 800a152:	e003      	b.n	800a15c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a154:	230f      	movs	r3, #15
 800a156:	18fb      	adds	r3, r7, r3
 800a158:	2202      	movs	r2, #2
 800a15a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a15c:	230f      	movs	r3, #15
 800a15e:	18fb      	adds	r3, r7, r3
 800a160:	781b      	ldrb	r3, [r3, #0]
}
 800a162:	0018      	movs	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	b004      	add	sp, #16
 800a168:	bd80      	pop	{r7, pc}

0800a16a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	0018      	movs	r0, r3
 800a176:	f001 fd0b 	bl	800bb90 <USBD_LL_Start>

  return USBD_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	0018      	movs	r0, r3
 800a17e:	46bd      	mov	sp, r7
 800a180:	b002      	add	sp, #8
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	0018      	movs	r0, r3
 800a190:	46bd      	mov	sp, r7
 800a192:	b002      	add	sp, #8
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a196:	b590      	push	{r4, r7, lr}
 800a198:	b085      	sub	sp, #20
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	000a      	movs	r2, r1
 800a1a0:	1cfb      	adds	r3, r7, #3
 800a1a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a1a4:	240f      	movs	r4, #15
 800a1a6:	193b      	adds	r3, r7, r4
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	23ad      	movs	r3, #173	; 0xad
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	58d3      	ldr	r3, [r2, r3]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00e      	beq.n	800a1d6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	23ad      	movs	r3, #173	; 0xad
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	58d3      	ldr	r3, [r2, r3]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	1cfa      	adds	r2, r7, #3
 800a1c4:	7811      	ldrb	r1, [r2, #0]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	0010      	movs	r0, r2
 800a1ca:	4798      	blx	r3
 800a1cc:	1e03      	subs	r3, r0, #0
 800a1ce:	d102      	bne.n	800a1d6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800a1d0:	193b      	adds	r3, r7, r4
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800a1d6:	230f      	movs	r3, #15
 800a1d8:	18fb      	adds	r3, r7, r3
 800a1da:	781b      	ldrb	r3, [r3, #0]
}
 800a1dc:	0018      	movs	r0, r3
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	b005      	add	sp, #20
 800a1e2:	bd90      	pop	{r4, r7, pc}

0800a1e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	000a      	movs	r2, r1
 800a1ee:	1cfb      	adds	r3, r7, #3
 800a1f0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	23ad      	movs	r3, #173	; 0xad
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	58d3      	ldr	r3, [r2, r3]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	1cfa      	adds	r2, r7, #3
 800a1fe:	7811      	ldrb	r1, [r2, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	0010      	movs	r0, r2
 800a204:	4798      	blx	r3

  return USBD_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	0018      	movs	r0, r3
 800a20a:	46bd      	mov	sp, r7
 800a20c:	b002      	add	sp, #8
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	22aa      	movs	r2, #170	; 0xaa
 800a21e:	0092      	lsls	r2, r2, #2
 800a220:	4694      	mov	ip, r2
 800a222:	4463      	add	r3, ip
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	0011      	movs	r1, r2
 800a228:	0018      	movs	r0, r3
 800a22a:	f001 f810 	bl	800b24e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	23a5      	movs	r3, #165	; 0xa5
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	2101      	movs	r1, #1
 800a236:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a23      	ldr	r2, [pc, #140]	; (800a2c8 <USBD_LL_SetupStage+0xb8>)
 800a23c:	5a9b      	ldrh	r3, [r3, r2]
 800a23e:	0019      	movs	r1, r3
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	23a6      	movs	r3, #166	; 0xa6
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	23aa      	movs	r3, #170	; 0xaa
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	5cd3      	ldrb	r3, [r2, r3]
 800a250:	001a      	movs	r2, r3
 800a252:	231f      	movs	r3, #31
 800a254:	4013      	ands	r3, r2
 800a256:	2b02      	cmp	r3, #2
 800a258:	d019      	beq.n	800a28e <USBD_LL_SetupStage+0x7e>
 800a25a:	d822      	bhi.n	800a2a2 <USBD_LL_SetupStage+0x92>
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <USBD_LL_SetupStage+0x56>
 800a260:	2b01      	cmp	r3, #1
 800a262:	d00a      	beq.n	800a27a <USBD_LL_SetupStage+0x6a>
 800a264:	e01d      	b.n	800a2a2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	22aa      	movs	r2, #170	; 0xaa
 800a26a:	0092      	lsls	r2, r2, #2
 800a26c:	189a      	adds	r2, r3, r2
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	0011      	movs	r1, r2
 800a272:	0018      	movs	r0, r3
 800a274:	f000 fa10 	bl	800a698 <USBD_StdDevReq>
      break;
 800a278:	e020      	b.n	800a2bc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	22aa      	movs	r2, #170	; 0xaa
 800a27e:	0092      	lsls	r2, r2, #2
 800a280:	189a      	adds	r2, r3, r2
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	0011      	movs	r1, r2
 800a286:	0018      	movs	r0, r3
 800a288:	f000 fa78 	bl	800a77c <USBD_StdItfReq>
      break;
 800a28c:	e016      	b.n	800a2bc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	22aa      	movs	r2, #170	; 0xaa
 800a292:	0092      	lsls	r2, r2, #2
 800a294:	189a      	adds	r2, r3, r2
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	0011      	movs	r1, r2
 800a29a:	0018      	movs	r0, r3
 800a29c:	f000 fac5 	bl	800a82a <USBD_StdEPReq>
      break;
 800a2a0:	e00c      	b.n	800a2bc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	23aa      	movs	r3, #170	; 0xaa
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	5cd3      	ldrb	r3, [r2, r3]
 800a2aa:	227f      	movs	r2, #127	; 0x7f
 800a2ac:	4393      	bics	r3, r2
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	0011      	movs	r1, r2
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f001 fcf2 	bl	800bc9e <USBD_LL_StallEP>
      break;
 800a2ba:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	0018      	movs	r0, r3
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	b002      	add	sp, #8
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	46c0      	nop			; (mov r8, r8)
 800a2c8:	000002ae 	.word	0x000002ae

0800a2cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	607a      	str	r2, [r7, #4]
 800a2d6:	200b      	movs	r0, #11
 800a2d8:	183b      	adds	r3, r7, r0
 800a2da:	1c0a      	adds	r2, r1, #0
 800a2dc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a2de:	183b      	adds	r3, r7, r0
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d154      	bne.n	800a390 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3355      	adds	r3, #85	; 0x55
 800a2ea:	33ff      	adds	r3, #255	; 0xff
 800a2ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	23a5      	movs	r3, #165	; 0xa5
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	58d3      	ldr	r3, [r2, r3]
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d139      	bne.n	800a36e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	68da      	ldr	r2, [r3, #12]
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	429a      	cmp	r2, r3
 800a304:	d919      	bls.n	800a33a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	68da      	ldr	r2, [r3, #12]
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	68da      	ldr	r2, [r3, #12]
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d203      	bcs.n	800a328 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a324:	b29b      	uxth	r3, r3
 800a326:	e002      	b.n	800a32e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	001a      	movs	r2, r3
 800a334:	f001 f89b 	bl	800b46e <USBD_CtlContinueRx>
 800a338:	e045      	b.n	800a3c6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	23ad      	movs	r3, #173	; 0xad
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	58d3      	ldr	r3, [r2, r3]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00d      	beq.n	800a364 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	23a7      	movs	r3, #167	; 0xa7
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a350:	2b03      	cmp	r3, #3
 800a352:	d107      	bne.n	800a364 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	23ad      	movs	r3, #173	; 0xad
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	58d3      	ldr	r3, [r2, r3]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	0010      	movs	r0, r2
 800a362:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	0018      	movs	r0, r3
 800a368:	f001 f894 	bl	800b494 <USBD_CtlSendStatus>
 800a36c:	e02b      	b.n	800a3c6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	23a5      	movs	r3, #165	; 0xa5
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	58d3      	ldr	r3, [r2, r3]
 800a376:	2b05      	cmp	r3, #5
 800a378:	d125      	bne.n	800a3c6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	23a5      	movs	r3, #165	; 0xa5
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	2100      	movs	r1, #0
 800a382:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2100      	movs	r1, #0
 800a388:	0018      	movs	r0, r3
 800a38a:	f001 fc88 	bl	800bc9e <USBD_LL_StallEP>
 800a38e:	e01a      	b.n	800a3c6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	23ad      	movs	r3, #173	; 0xad
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	58d3      	ldr	r3, [r2, r3]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d011      	beq.n	800a3c2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	23a7      	movs	r3, #167	; 0xa7
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d10b      	bne.n	800a3c2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	23ad      	movs	r3, #173	; 0xad
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	58d3      	ldr	r3, [r2, r3]
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	220b      	movs	r2, #11
 800a3b6:	18ba      	adds	r2, r7, r2
 800a3b8:	7811      	ldrb	r1, [r2, #0]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	0010      	movs	r0, r2
 800a3be:	4798      	blx	r3
 800a3c0:	e001      	b.n	800a3c6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	e000      	b.n	800a3c8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	b006      	add	sp, #24
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	607a      	str	r2, [r7, #4]
 800a3da:	200b      	movs	r0, #11
 800a3dc:	183b      	adds	r3, r7, r0
 800a3de:	1c0a      	adds	r2, r1, #0
 800a3e0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a3e2:	183b      	adds	r3, r7, r0
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d000      	beq.n	800a3ec <USBD_LL_DataInStage+0x1c>
 800a3ea:	e08e      	b.n	800a50a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3314      	adds	r3, #20
 800a3f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	23a5      	movs	r3, #165	; 0xa5
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	58d3      	ldr	r3, [r2, r3]
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d164      	bne.n	800a4c8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	429a      	cmp	r2, r3
 800a408:	d915      	bls.n	800a436 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	68da      	ldr	r2, [r3, #12]
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	1ad2      	subs	r2, r2, r3
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	6879      	ldr	r1, [r7, #4]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	0018      	movs	r0, r3
 800a424:	f000 ffec 	bl	800b400 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	2300      	movs	r3, #0
 800a42c:	2200      	movs	r2, #0
 800a42e:	2100      	movs	r1, #0
 800a430:	f001 fd1e 	bl	800be70 <USBD_LL_PrepareReceive>
 800a434:	e059      	b.n	800a4ea <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	0019      	movs	r1, r3
 800a440:	0010      	movs	r0, r2
 800a442:	f7f5 fef9 	bl	8000238 <__aeabi_uidivmod>
 800a446:	1e0b      	subs	r3, r1, #0
 800a448:	d11f      	bne.n	800a48a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a452:	429a      	cmp	r2, r3
 800a454:	d319      	bcc.n	800a48a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	689a      	ldr	r2, [r3, #8]
 800a45a:	68f9      	ldr	r1, [r7, #12]
 800a45c:	23a6      	movs	r3, #166	; 0xa6
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800a462:	429a      	cmp	r2, r3
 800a464:	d211      	bcs.n	800a48a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	2100      	movs	r1, #0
 800a46c:	0018      	movs	r0, r3
 800a46e:	f000 ffc7 	bl	800b400 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	23a6      	movs	r3, #166	; 0xa6
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	2100      	movs	r1, #0
 800a47a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	2300      	movs	r3, #0
 800a480:	2200      	movs	r2, #0
 800a482:	2100      	movs	r1, #0
 800a484:	f001 fcf4 	bl	800be70 <USBD_LL_PrepareReceive>
 800a488:	e02f      	b.n	800a4ea <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	23ad      	movs	r3, #173	; 0xad
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	58d3      	ldr	r3, [r2, r3]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00d      	beq.n	800a4b4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	23a7      	movs	r3, #167	; 0xa7
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d107      	bne.n	800a4b4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	23ad      	movs	r3, #173	; 0xad
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	58d3      	ldr	r3, [r2, r3]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	0010      	movs	r0, r2
 800a4b2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2180      	movs	r1, #128	; 0x80
 800a4b8:	0018      	movs	r0, r3
 800a4ba:	f001 fbf0 	bl	800bc9e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	f000 fffb 	bl	800b4bc <USBD_CtlReceiveStatus>
 800a4c6:	e010      	b.n	800a4ea <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	23a5      	movs	r3, #165	; 0xa5
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	58d3      	ldr	r3, [r2, r3]
 800a4d0:	2b04      	cmp	r3, #4
 800a4d2:	d005      	beq.n	800a4e0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	23a5      	movs	r3, #165	; 0xa5
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d104      	bne.n	800a4ea <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2180      	movs	r1, #128	; 0x80
 800a4e4:	0018      	movs	r0, r3
 800a4e6:	f001 fbda 	bl	800bc9e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	23a8      	movs	r3, #168	; 0xa8
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	5cd3      	ldrb	r3, [r2, r3]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d124      	bne.n	800a540 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	0018      	movs	r0, r3
 800a4fa:	f7ff fe43 	bl	800a184 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	23a8      	movs	r3, #168	; 0xa8
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	2100      	movs	r1, #0
 800a506:	54d1      	strb	r1, [r2, r3]
 800a508:	e01a      	b.n	800a540 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	23ad      	movs	r3, #173	; 0xad
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	58d3      	ldr	r3, [r2, r3]
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d011      	beq.n	800a53c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	23a7      	movs	r3, #167	; 0xa7
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800a520:	2b03      	cmp	r3, #3
 800a522:	d10b      	bne.n	800a53c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	23ad      	movs	r3, #173	; 0xad
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	58d3      	ldr	r3, [r2, r3]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	220b      	movs	r2, #11
 800a530:	18ba      	adds	r2, r7, r2
 800a532:	7811      	ldrb	r1, [r2, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	0010      	movs	r0, r2
 800a538:	4798      	blx	r3
 800a53a:	e001      	b.n	800a540 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a53c:	2302      	movs	r3, #2
 800a53e:	e000      	b.n	800a542 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	0018      	movs	r0, r3
 800a544:	46bd      	mov	sp, r7
 800a546:	b006      	add	sp, #24
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	2340      	movs	r3, #64	; 0x40
 800a556:	2200      	movs	r2, #0
 800a558:	2100      	movs	r1, #0
 800a55a:	f001 fb3e 	bl	800bbda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	23ac      	movs	r3, #172	; 0xac
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	2101      	movs	r1, #1
 800a566:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	23b2      	movs	r3, #178	; 0xb2
 800a56c:	005b      	lsls	r3, r3, #1
 800a56e:	2140      	movs	r1, #64	; 0x40
 800a570:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	2340      	movs	r3, #64	; 0x40
 800a576:	2200      	movs	r2, #0
 800a578:	2180      	movs	r1, #128	; 0x80
 800a57a:	f001 fb2e 	bl	800bbda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2240      	movs	r2, #64	; 0x40
 800a588:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	23a7      	movs	r3, #167	; 0xa7
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	2101      	movs	r1, #1
 800a592:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	23a5      	movs	r3, #165	; 0xa5
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	2100      	movs	r1, #0
 800a59c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	23a9      	movs	r3, #169	; 0xa9
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	23ae      	movs	r3, #174	; 0xae
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	58d3      	ldr	r3, [r2, r3]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	23ad      	movs	r3, #173	; 0xad
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	58d3      	ldr	r3, [r2, r3]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	b2d9      	uxtb	r1, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	0018      	movs	r0, r3
 800a5ce:	4790      	blx	r2
  }

  return USBD_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	0018      	movs	r0, r3
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	b002      	add	sp, #8
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b082      	sub	sp, #8
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	000a      	movs	r2, r1
 800a5e4:	1cfb      	adds	r3, r7, #3
 800a5e6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	1cfa      	adds	r2, r7, #3
 800a5ec:	7812      	ldrb	r2, [r2, #0]
 800a5ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	b002      	add	sp, #8
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	23a7      	movs	r3, #167	; 0xa7
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	5cd1      	ldrb	r1, [r2, r3]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a06      	ldr	r2, [pc, #24]	; (800a628 <USBD_LL_Suspend+0x2c>)
 800a610:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	23a7      	movs	r3, #167	; 0xa7
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	2104      	movs	r1, #4
 800a61a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	0018      	movs	r0, r3
 800a620:	46bd      	mov	sp, r7
 800a622:	b002      	add	sp, #8
 800a624:	bd80      	pop	{r7, pc}
 800a626:	46c0      	nop			; (mov r8, r8)
 800a628:	0000029d 	.word	0x0000029d

0800a62c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	23a7      	movs	r3, #167	; 0xa7
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	5cd3      	ldrb	r3, [r2, r3]
 800a63c:	2b04      	cmp	r3, #4
 800a63e:	d106      	bne.n	800a64e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a05      	ldr	r2, [pc, #20]	; (800a658 <USBD_LL_Resume+0x2c>)
 800a644:	5c99      	ldrb	r1, [r3, r2]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	23a7      	movs	r3, #167	; 0xa7
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	0018      	movs	r0, r3
 800a652:	46bd      	mov	sp, r7
 800a654:	b002      	add	sp, #8
 800a656:	bd80      	pop	{r7, pc}
 800a658:	0000029d 	.word	0x0000029d

0800a65c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	23a7      	movs	r3, #167	; 0xa7
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	5cd3      	ldrb	r3, [r2, r3]
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	d10e      	bne.n	800a68e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	23ad      	movs	r3, #173	; 0xad
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	58d3      	ldr	r3, [r2, r3]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d007      	beq.n	800a68e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	23ad      	movs	r3, #173	; 0xad
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	58d3      	ldr	r3, [r2, r3]
 800a686:	69db      	ldr	r3, [r3, #28]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	0010      	movs	r0, r2
 800a68c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	0018      	movs	r0, r3
 800a692:	46bd      	mov	sp, r7
 800a694:	b002      	add	sp, #8
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6a2:	230f      	movs	r3, #15
 800a6a4:	18fb      	adds	r3, r7, r3
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	001a      	movs	r2, r3
 800a6b0:	2360      	movs	r3, #96	; 0x60
 800a6b2:	4013      	ands	r3, r2
 800a6b4:	2b40      	cmp	r3, #64	; 0x40
 800a6b6:	d004      	beq.n	800a6c2 <USBD_StdDevReq+0x2a>
 800a6b8:	d84f      	bhi.n	800a75a <USBD_StdDevReq+0xc2>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00b      	beq.n	800a6d6 <USBD_StdDevReq+0x3e>
 800a6be:	2b20      	cmp	r3, #32
 800a6c0:	d14b      	bne.n	800a75a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	23ad      	movs	r3, #173	; 0xad
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	58d3      	ldr	r3, [r2, r3]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	0010      	movs	r0, r2
 800a6d2:	4798      	blx	r3
      break;
 800a6d4:	e048      	b.n	800a768 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	785b      	ldrb	r3, [r3, #1]
 800a6da:	2b09      	cmp	r3, #9
 800a6dc:	d835      	bhi.n	800a74a <USBD_StdDevReq+0xb2>
 800a6de:	009a      	lsls	r2, r3, #2
 800a6e0:	4b25      	ldr	r3, [pc, #148]	; (800a778 <USBD_StdDevReq+0xe0>)
 800a6e2:	18d3      	adds	r3, r2, r3
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	0011      	movs	r1, r2
 800a6ee:	0018      	movs	r0, r3
 800a6f0:	f000 fa52 	bl	800ab98 <USBD_GetDescriptor>
          break;
 800a6f4:	e030      	b.n	800a758 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	0011      	movs	r1, r2
 800a6fc:	0018      	movs	r0, r3
 800a6fe:	f000 fbfd 	bl	800aefc <USBD_SetAddress>
          break;
 800a702:	e029      	b.n	800a758 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	0011      	movs	r1, r2
 800a70a:	0018      	movs	r0, r3
 800a70c:	f000 fc4a 	bl	800afa4 <USBD_SetConfig>
          break;
 800a710:	e022      	b.n	800a758 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	0011      	movs	r1, r2
 800a718:	0018      	movs	r0, r3
 800a71a:	f000 fce7 	bl	800b0ec <USBD_GetConfig>
          break;
 800a71e:	e01b      	b.n	800a758 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	0011      	movs	r1, r2
 800a726:	0018      	movs	r0, r3
 800a728:	f000 fd1b 	bl	800b162 <USBD_GetStatus>
          break;
 800a72c:	e014      	b.n	800a758 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	0011      	movs	r1, r2
 800a734:	0018      	movs	r0, r3
 800a736:	f000 fd4e 	bl	800b1d6 <USBD_SetFeature>
          break;
 800a73a:	e00d      	b.n	800a758 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a73c:	683a      	ldr	r2, [r7, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	0011      	movs	r1, r2
 800a742:	0018      	movs	r0, r3
 800a744:	f000 fd5d 	bl	800b202 <USBD_ClrFeature>
          break;
 800a748:	e006      	b.n	800a758 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	0011      	movs	r1, r2
 800a750:	0018      	movs	r0, r3
 800a752:	f000 fdb7 	bl	800b2c4 <USBD_CtlError>
          break;
 800a756:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a758:	e006      	b.n	800a768 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	0011      	movs	r1, r2
 800a760:	0018      	movs	r0, r3
 800a762:	f000 fdaf 	bl	800b2c4 <USBD_CtlError>
      break;
 800a766:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a768:	230f      	movs	r3, #15
 800a76a:	18fb      	adds	r3, r7, r3
 800a76c:	781b      	ldrb	r3, [r3, #0]
}
 800a76e:	0018      	movs	r0, r3
 800a770:	46bd      	mov	sp, r7
 800a772:	b004      	add	sp, #16
 800a774:	bd80      	pop	{r7, pc}
 800a776:	46c0      	nop			; (mov r8, r8)
 800a778:	0800c98c 	.word	0x0800c98c

0800a77c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a77c:	b5b0      	push	{r4, r5, r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a786:	230f      	movs	r3, #15
 800a788:	18fb      	adds	r3, r7, r3
 800a78a:	2200      	movs	r2, #0
 800a78c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	001a      	movs	r2, r3
 800a794:	2360      	movs	r3, #96	; 0x60
 800a796:	4013      	ands	r3, r2
 800a798:	2b40      	cmp	r3, #64	; 0x40
 800a79a:	d004      	beq.n	800a7a6 <USBD_StdItfReq+0x2a>
 800a79c:	d839      	bhi.n	800a812 <USBD_StdItfReq+0x96>
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <USBD_StdItfReq+0x2a>
 800a7a2:	2b20      	cmp	r3, #32
 800a7a4:	d135      	bne.n	800a812 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	23a7      	movs	r3, #167	; 0xa7
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	5cd3      	ldrb	r3, [r2, r3]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d825      	bhi.n	800a800 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	889b      	ldrh	r3, [r3, #4]
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d819      	bhi.n	800a7f2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	23ad      	movs	r3, #173	; 0xad
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	58d3      	ldr	r3, [r2, r3]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	250f      	movs	r5, #15
 800a7ca:	197c      	adds	r4, r7, r5
 800a7cc:	6839      	ldr	r1, [r7, #0]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	0010      	movs	r0, r2
 800a7d2:	4798      	blx	r3
 800a7d4:	0003      	movs	r3, r0
 800a7d6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	88db      	ldrh	r3, [r3, #6]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d116      	bne.n	800a80e <USBD_StdItfReq+0x92>
 800a7e0:	197b      	adds	r3, r7, r5
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d112      	bne.n	800a80e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	0018      	movs	r0, r3
 800a7ec:	f000 fe52 	bl	800b494 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a7f0:	e00d      	b.n	800a80e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	0011      	movs	r1, r2
 800a7f8:	0018      	movs	r0, r3
 800a7fa:	f000 fd63 	bl	800b2c4 <USBD_CtlError>
          break;
 800a7fe:	e006      	b.n	800a80e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	0011      	movs	r1, r2
 800a806:	0018      	movs	r0, r3
 800a808:	f000 fd5c 	bl	800b2c4 <USBD_CtlError>
          break;
 800a80c:	e000      	b.n	800a810 <USBD_StdItfReq+0x94>
          break;
 800a80e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a810:	e006      	b.n	800a820 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	0011      	movs	r1, r2
 800a818:	0018      	movs	r0, r3
 800a81a:	f000 fd53 	bl	800b2c4 <USBD_CtlError>
      break;
 800a81e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	0018      	movs	r0, r3
 800a824:	46bd      	mov	sp, r7
 800a826:	b004      	add	sp, #16
 800a828:	bdb0      	pop	{r4, r5, r7, pc}

0800a82a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a82a:	b5b0      	push	{r4, r5, r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a834:	230f      	movs	r3, #15
 800a836:	18fb      	adds	r3, r7, r3
 800a838:	2200      	movs	r2, #0
 800a83a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	889a      	ldrh	r2, [r3, #4]
 800a840:	230e      	movs	r3, #14
 800a842:	18fb      	adds	r3, r7, r3
 800a844:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	001a      	movs	r2, r3
 800a84c:	2360      	movs	r3, #96	; 0x60
 800a84e:	4013      	ands	r3, r2
 800a850:	2b40      	cmp	r3, #64	; 0x40
 800a852:	d006      	beq.n	800a862 <USBD_StdEPReq+0x38>
 800a854:	d900      	bls.n	800a858 <USBD_StdEPReq+0x2e>
 800a856:	e190      	b.n	800ab7a <USBD_StdEPReq+0x350>
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00c      	beq.n	800a876 <USBD_StdEPReq+0x4c>
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	d000      	beq.n	800a862 <USBD_StdEPReq+0x38>
 800a860:	e18b      	b.n	800ab7a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	23ad      	movs	r3, #173	; 0xad
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	58d3      	ldr	r3, [r2, r3]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	0010      	movs	r0, r2
 800a872:	4798      	blx	r3
      break;
 800a874:	e188      	b.n	800ab88 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	001a      	movs	r2, r3
 800a87c:	2360      	movs	r3, #96	; 0x60
 800a87e:	4013      	ands	r3, r2
 800a880:	2b20      	cmp	r3, #32
 800a882:	d10f      	bne.n	800a8a4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	23ad      	movs	r3, #173	; 0xad
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	58d3      	ldr	r3, [r2, r3]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	250f      	movs	r5, #15
 800a890:	197c      	adds	r4, r7, r5
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	0010      	movs	r0, r2
 800a898:	4798      	blx	r3
 800a89a:	0003      	movs	r3, r0
 800a89c:	7023      	strb	r3, [r4, #0]

        return ret;
 800a89e:	197b      	adds	r3, r7, r5
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	e174      	b.n	800ab8e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	785b      	ldrb	r3, [r3, #1]
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d007      	beq.n	800a8bc <USBD_StdEPReq+0x92>
 800a8ac:	dd00      	ble.n	800a8b0 <USBD_StdEPReq+0x86>
 800a8ae:	e15c      	b.n	800ab6a <USBD_StdEPReq+0x340>
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d100      	bne.n	800a8b6 <USBD_StdEPReq+0x8c>
 800a8b4:	e092      	b.n	800a9dc <USBD_StdEPReq+0x1b2>
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d04b      	beq.n	800a952 <USBD_StdEPReq+0x128>
 800a8ba:	e156      	b.n	800ab6a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	23a7      	movs	r3, #167	; 0xa7
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	5cd3      	ldrb	r3, [r2, r3]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d002      	beq.n	800a8ce <USBD_StdEPReq+0xa4>
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d01d      	beq.n	800a908 <USBD_StdEPReq+0xde>
 800a8cc:	e039      	b.n	800a942 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8ce:	220e      	movs	r2, #14
 800a8d0:	18bb      	adds	r3, r7, r2
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d010      	beq.n	800a8fa <USBD_StdEPReq+0xd0>
 800a8d8:	18bb      	adds	r3, r7, r2
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b80      	cmp	r3, #128	; 0x80
 800a8de:	d00c      	beq.n	800a8fa <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a8e0:	18bb      	adds	r3, r7, r2
 800a8e2:	781a      	ldrb	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	0011      	movs	r1, r2
 800a8e8:	0018      	movs	r0, r3
 800a8ea:	f001 f9d8 	bl	800bc9e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2180      	movs	r1, #128	; 0x80
 800a8f2:	0018      	movs	r0, r3
 800a8f4:	f001 f9d3 	bl	800bc9e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8f8:	e02a      	b.n	800a950 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	0011      	movs	r1, r2
 800a900:	0018      	movs	r0, r3
 800a902:	f000 fcdf 	bl	800b2c4 <USBD_CtlError>
              break;
 800a906:	e023      	b.n	800a950 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	885b      	ldrh	r3, [r3, #2]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d113      	bne.n	800a938 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800a910:	220e      	movs	r2, #14
 800a912:	18bb      	adds	r3, r7, r2
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00e      	beq.n	800a938 <USBD_StdEPReq+0x10e>
 800a91a:	18bb      	adds	r3, r7, r2
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	2b80      	cmp	r3, #128	; 0x80
 800a920:	d00a      	beq.n	800a938 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	88db      	ldrh	r3, [r3, #6]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d106      	bne.n	800a938 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a92a:	18bb      	adds	r3, r7, r2
 800a92c:	781a      	ldrb	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	0011      	movs	r1, r2
 800a932:	0018      	movs	r0, r3
 800a934:	f001 f9b3 	bl	800bc9e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	0018      	movs	r0, r3
 800a93c:	f000 fdaa 	bl	800b494 <USBD_CtlSendStatus>

              break;
 800a940:	e006      	b.n	800a950 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	0011      	movs	r1, r2
 800a948:	0018      	movs	r0, r3
 800a94a:	f000 fcbb 	bl	800b2c4 <USBD_CtlError>
              break;
 800a94e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a950:	e112      	b.n	800ab78 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	23a7      	movs	r3, #167	; 0xa7
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	5cd3      	ldrb	r3, [r2, r3]
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d002      	beq.n	800a964 <USBD_StdEPReq+0x13a>
 800a95e:	2b03      	cmp	r3, #3
 800a960:	d01d      	beq.n	800a99e <USBD_StdEPReq+0x174>
 800a962:	e032      	b.n	800a9ca <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a964:	220e      	movs	r2, #14
 800a966:	18bb      	adds	r3, r7, r2
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d010      	beq.n	800a990 <USBD_StdEPReq+0x166>
 800a96e:	18bb      	adds	r3, r7, r2
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	2b80      	cmp	r3, #128	; 0x80
 800a974:	d00c      	beq.n	800a990 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a976:	18bb      	adds	r3, r7, r2
 800a978:	781a      	ldrb	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	0011      	movs	r1, r2
 800a97e:	0018      	movs	r0, r3
 800a980:	f001 f98d 	bl	800bc9e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2180      	movs	r1, #128	; 0x80
 800a988:	0018      	movs	r0, r3
 800a98a:	f001 f988 	bl	800bc9e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a98e:	e024      	b.n	800a9da <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	0011      	movs	r1, r2
 800a996:	0018      	movs	r0, r3
 800a998:	f000 fc94 	bl	800b2c4 <USBD_CtlError>
              break;
 800a99c:	e01d      	b.n	800a9da <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	885b      	ldrh	r3, [r3, #2]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d118      	bne.n	800a9d8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9a6:	210e      	movs	r1, #14
 800a9a8:	187b      	adds	r3, r7, r1
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	227f      	movs	r2, #127	; 0x7f
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	d006      	beq.n	800a9c0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9b2:	187b      	adds	r3, r7, r1
 800a9b4:	781a      	ldrb	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	0011      	movs	r1, r2
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	f001 f99a 	bl	800bcf4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	f000 fd66 	bl	800b494 <USBD_CtlSendStatus>
              }
              break;
 800a9c8:	e006      	b.n	800a9d8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	0011      	movs	r1, r2
 800a9d0:	0018      	movs	r0, r3
 800a9d2:	f000 fc77 	bl	800b2c4 <USBD_CtlError>
              break;
 800a9d6:	e000      	b.n	800a9da <USBD_StdEPReq+0x1b0>
              break;
 800a9d8:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a9da:	e0cd      	b.n	800ab78 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	23a7      	movs	r3, #167	; 0xa7
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	5cd3      	ldrb	r3, [r2, r3]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d002      	beq.n	800a9ee <USBD_StdEPReq+0x1c4>
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d03c      	beq.n	800aa66 <USBD_StdEPReq+0x23c>
 800a9ec:	e0b5      	b.n	800ab5a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9ee:	220e      	movs	r2, #14
 800a9f0:	18bb      	adds	r3, r7, r2
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <USBD_StdEPReq+0x1e4>
 800a9f8:	18bb      	adds	r3, r7, r2
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	2b80      	cmp	r3, #128	; 0x80
 800a9fe:	d006      	beq.n	800aa0e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	0011      	movs	r1, r2
 800aa06:	0018      	movs	r0, r3
 800aa08:	f000 fc5c 	bl	800b2c4 <USBD_CtlError>
                break;
 800aa0c:	e0ac      	b.n	800ab68 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa0e:	220e      	movs	r2, #14
 800aa10:	18bb      	adds	r3, r7, r2
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	b25b      	sxtb	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	da0c      	bge.n	800aa34 <USBD_StdEPReq+0x20a>
 800aa1a:	18bb      	adds	r3, r7, r2
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	227f      	movs	r2, #127	; 0x7f
 800aa20:	401a      	ands	r2, r3
 800aa22:	0013      	movs	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	189b      	adds	r3, r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	3310      	adds	r3, #16
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	18d3      	adds	r3, r2, r3
 800aa30:	3304      	adds	r3, #4
 800aa32:	e00d      	b.n	800aa50 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa34:	230e      	movs	r3, #14
 800aa36:	18fb      	adds	r3, r7, r3
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	227f      	movs	r2, #127	; 0x7f
 800aa3c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa3e:	0013      	movs	r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	189b      	adds	r3, r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	3351      	adds	r3, #81	; 0x51
 800aa48:	33ff      	adds	r3, #255	; 0xff
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	18d3      	adds	r3, r2, r3
 800aa4e:	3304      	adds	r3, #4
 800aa50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	2200      	movs	r2, #0
 800aa56:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aa58:	68b9      	ldr	r1, [r7, #8]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	0018      	movs	r0, r3
 800aa60:	f000 fcae 	bl	800b3c0 <USBD_CtlSendData>
              break;
 800aa64:	e080      	b.n	800ab68 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa66:	220e      	movs	r2, #14
 800aa68:	18bb      	adds	r3, r7, r2
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	b25b      	sxtb	r3, r3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	da14      	bge.n	800aa9c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa72:	18bb      	adds	r3, r7, r2
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	220f      	movs	r2, #15
 800aa78:	401a      	ands	r2, r3
 800aa7a:	6879      	ldr	r1, [r7, #4]
 800aa7c:	0013      	movs	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	189b      	adds	r3, r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	18cb      	adds	r3, r1, r3
 800aa86:	3318      	adds	r3, #24
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d11e      	bne.n	800aacc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	0011      	movs	r1, r2
 800aa94:	0018      	movs	r0, r3
 800aa96:	f000 fc15 	bl	800b2c4 <USBD_CtlError>
                  break;
 800aa9a:	e065      	b.n	800ab68 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa9c:	230e      	movs	r3, #14
 800aa9e:	18fb      	adds	r3, r7, r3
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	220f      	movs	r2, #15
 800aaa4:	401a      	ands	r2, r3
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	23ac      	movs	r3, #172	; 0xac
 800aaaa:	0059      	lsls	r1, r3, #1
 800aaac:	0013      	movs	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	189b      	adds	r3, r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	18c3      	adds	r3, r0, r3
 800aab6:	185b      	adds	r3, r3, r1
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d106      	bne.n	800aacc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800aabe:	683a      	ldr	r2, [r7, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	0011      	movs	r1, r2
 800aac4:	0018      	movs	r0, r3
 800aac6:	f000 fbfd 	bl	800b2c4 <USBD_CtlError>
                  break;
 800aaca:	e04d      	b.n	800ab68 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aacc:	220e      	movs	r2, #14
 800aace:	18bb      	adds	r3, r7, r2
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	b25b      	sxtb	r3, r3
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	da0c      	bge.n	800aaf2 <USBD_StdEPReq+0x2c8>
 800aad8:	18bb      	adds	r3, r7, r2
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	227f      	movs	r2, #127	; 0x7f
 800aade:	401a      	ands	r2, r3
 800aae0:	0013      	movs	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	189b      	adds	r3, r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	3310      	adds	r3, #16
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	18d3      	adds	r3, r2, r3
 800aaee:	3304      	adds	r3, #4
 800aaf0:	e00d      	b.n	800ab0e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaf2:	230e      	movs	r3, #14
 800aaf4:	18fb      	adds	r3, r7, r3
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	227f      	movs	r2, #127	; 0x7f
 800aafa:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aafc:	0013      	movs	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	189b      	adds	r3, r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	3351      	adds	r3, #81	; 0x51
 800ab06:	33ff      	adds	r3, #255	; 0xff
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	18d3      	adds	r3, r2, r3
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab10:	220e      	movs	r2, #14
 800ab12:	18bb      	adds	r3, r7, r2
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <USBD_StdEPReq+0x2f8>
 800ab1a:	18bb      	adds	r3, r7, r2
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b80      	cmp	r3, #128	; 0x80
 800ab20:	d103      	bne.n	800ab2a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	2200      	movs	r2, #0
 800ab26:	601a      	str	r2, [r3, #0]
 800ab28:	e010      	b.n	800ab4c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ab2a:	230e      	movs	r3, #14
 800ab2c:	18fb      	adds	r3, r7, r3
 800ab2e:	781a      	ldrb	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	0011      	movs	r1, r2
 800ab34:	0018      	movs	r0, r3
 800ab36:	f001 f908 	bl	800bd4a <USBD_LL_IsStallEP>
 800ab3a:	1e03      	subs	r3, r0, #0
 800ab3c:	d003      	beq.n	800ab46 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	2201      	movs	r2, #1
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	e002      	b.n	800ab4c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2202      	movs	r2, #2
 800ab52:	0018      	movs	r0, r3
 800ab54:	f000 fc34 	bl	800b3c0 <USBD_CtlSendData>
              break;
 800ab58:	e006      	b.n	800ab68 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	0011      	movs	r1, r2
 800ab60:	0018      	movs	r0, r3
 800ab62:	f000 fbaf 	bl	800b2c4 <USBD_CtlError>
              break;
 800ab66:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800ab68:	e006      	b.n	800ab78 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800ab6a:	683a      	ldr	r2, [r7, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	0011      	movs	r1, r2
 800ab70:	0018      	movs	r0, r3
 800ab72:	f000 fba7 	bl	800b2c4 <USBD_CtlError>
          break;
 800ab76:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800ab78:	e006      	b.n	800ab88 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	0011      	movs	r1, r2
 800ab80:	0018      	movs	r0, r3
 800ab82:	f000 fb9f 	bl	800b2c4 <USBD_CtlError>
      break;
 800ab86:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800ab88:	230f      	movs	r3, #15
 800ab8a:	18fb      	adds	r3, r7, r3
 800ab8c:	781b      	ldrb	r3, [r3, #0]
}
 800ab8e:	0018      	movs	r0, r3
 800ab90:	46bd      	mov	sp, r7
 800ab92:	b004      	add	sp, #16
 800ab94:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ab98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aba2:	2308      	movs	r3, #8
 800aba4:	18fb      	adds	r3, r7, r3
 800aba6:	2200      	movs	r2, #0
 800aba8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800abaa:	2300      	movs	r3, #0
 800abac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abae:	230b      	movs	r3, #11
 800abb0:	18fb      	adds	r3, r7, r3
 800abb2:	2200      	movs	r2, #0
 800abb4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	885b      	ldrh	r3, [r3, #2]
 800abba:	0a1b      	lsrs	r3, r3, #8
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	2b07      	cmp	r3, #7
 800abc0:	d900      	bls.n	800abc4 <USBD_GetDescriptor+0x2c>
 800abc2:	e159      	b.n	800ae78 <USBD_GetDescriptor+0x2e0>
 800abc4:	009a      	lsls	r2, r3, #2
 800abc6:	4bcb      	ldr	r3, [pc, #812]	; (800aef4 <USBD_GetDescriptor+0x35c>)
 800abc8:	18d3      	adds	r3, r2, r3
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	23ac      	movs	r3, #172	; 0xac
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	58d3      	ldr	r3, [r2, r3]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	7c12      	ldrb	r2, [r2, #16]
 800abdc:	2108      	movs	r1, #8
 800abde:	1879      	adds	r1, r7, r1
 800abe0:	0010      	movs	r0, r2
 800abe2:	4798      	blx	r3
 800abe4:	0003      	movs	r3, r0
 800abe6:	60fb      	str	r3, [r7, #12]
      break;
 800abe8:	e153      	b.n	800ae92 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	7c1b      	ldrb	r3, [r3, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10f      	bne.n	800ac12 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	23ad      	movs	r3, #173	; 0xad
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	58d3      	ldr	r3, [r2, r3]
 800abfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfc:	2208      	movs	r2, #8
 800abfe:	18ba      	adds	r2, r7, r2
 800ac00:	0010      	movs	r0, r2
 800ac02:	4798      	blx	r3
 800ac04:	0003      	movs	r3, r0
 800ac06:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac10:	e13f      	b.n	800ae92 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	23ad      	movs	r3, #173	; 0xad
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	58d3      	ldr	r3, [r2, r3]
 800ac1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1c:	2208      	movs	r2, #8
 800ac1e:	18ba      	adds	r2, r7, r2
 800ac20:	0010      	movs	r0, r2
 800ac22:	4798      	blx	r3
 800ac24:	0003      	movs	r3, r0
 800ac26:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	2202      	movs	r2, #2
 800ac2e:	701a      	strb	r2, [r3, #0]
      break;
 800ac30:	e12f      	b.n	800ae92 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	885b      	ldrh	r3, [r3, #2]
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b05      	cmp	r3, #5
 800ac3a:	d900      	bls.n	800ac3e <USBD_GetDescriptor+0xa6>
 800ac3c:	e0d0      	b.n	800ade0 <USBD_GetDescriptor+0x248>
 800ac3e:	009a      	lsls	r2, r3, #2
 800ac40:	4bad      	ldr	r3, [pc, #692]	; (800aef8 <USBD_GetDescriptor+0x360>)
 800ac42:	18d3      	adds	r3, r2, r3
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	23ac      	movs	r3, #172	; 0xac
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	58d3      	ldr	r3, [r2, r3]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00d      	beq.n	800ac72 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	23ac      	movs	r3, #172	; 0xac
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	58d3      	ldr	r3, [r2, r3]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	7c12      	ldrb	r2, [r2, #16]
 800ac64:	2108      	movs	r1, #8
 800ac66:	1879      	adds	r1, r7, r1
 800ac68:	0010      	movs	r0, r2
 800ac6a:	4798      	blx	r3
 800ac6c:	0003      	movs	r3, r0
 800ac6e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac70:	e0c3      	b.n	800adfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	0011      	movs	r1, r2
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f000 fb23 	bl	800b2c4 <USBD_CtlError>
            err++;
 800ac7e:	210b      	movs	r1, #11
 800ac80:	187b      	adds	r3, r7, r1
 800ac82:	781a      	ldrb	r2, [r3, #0]
 800ac84:	187b      	adds	r3, r7, r1
 800ac86:	3201      	adds	r2, #1
 800ac88:	701a      	strb	r2, [r3, #0]
          break;
 800ac8a:	e0b6      	b.n	800adfa <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	23ac      	movs	r3, #172	; 0xac
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	58d3      	ldr	r3, [r2, r3]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00d      	beq.n	800acb6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	23ac      	movs	r3, #172	; 0xac
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	58d3      	ldr	r3, [r2, r3]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	7c12      	ldrb	r2, [r2, #16]
 800aca8:	2108      	movs	r1, #8
 800acaa:	1879      	adds	r1, r7, r1
 800acac:	0010      	movs	r0, r2
 800acae:	4798      	blx	r3
 800acb0:	0003      	movs	r3, r0
 800acb2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acb4:	e0a1      	b.n	800adfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	0011      	movs	r1, r2
 800acbc:	0018      	movs	r0, r3
 800acbe:	f000 fb01 	bl	800b2c4 <USBD_CtlError>
            err++;
 800acc2:	210b      	movs	r1, #11
 800acc4:	187b      	adds	r3, r7, r1
 800acc6:	781a      	ldrb	r2, [r3, #0]
 800acc8:	187b      	adds	r3, r7, r1
 800acca:	3201      	adds	r2, #1
 800accc:	701a      	strb	r2, [r3, #0]
          break;
 800acce:	e094      	b.n	800adfa <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	23ac      	movs	r3, #172	; 0xac
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	58d3      	ldr	r3, [r2, r3]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00d      	beq.n	800acfa <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	23ac      	movs	r3, #172	; 0xac
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	58d3      	ldr	r3, [r2, r3]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	7c12      	ldrb	r2, [r2, #16]
 800acec:	2108      	movs	r1, #8
 800acee:	1879      	adds	r1, r7, r1
 800acf0:	0010      	movs	r0, r2
 800acf2:	4798      	blx	r3
 800acf4:	0003      	movs	r3, r0
 800acf6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acf8:	e07f      	b.n	800adfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	0011      	movs	r1, r2
 800ad00:	0018      	movs	r0, r3
 800ad02:	f000 fadf 	bl	800b2c4 <USBD_CtlError>
            err++;
 800ad06:	210b      	movs	r1, #11
 800ad08:	187b      	adds	r3, r7, r1
 800ad0a:	781a      	ldrb	r2, [r3, #0]
 800ad0c:	187b      	adds	r3, r7, r1
 800ad0e:	3201      	adds	r2, #1
 800ad10:	701a      	strb	r2, [r3, #0]
          break;
 800ad12:	e072      	b.n	800adfa <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	23ac      	movs	r3, #172	; 0xac
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	58d3      	ldr	r3, [r2, r3]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00d      	beq.n	800ad3e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	23ac      	movs	r3, #172	; 0xac
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	58d3      	ldr	r3, [r2, r3]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	7c12      	ldrb	r2, [r2, #16]
 800ad30:	2108      	movs	r1, #8
 800ad32:	1879      	adds	r1, r7, r1
 800ad34:	0010      	movs	r0, r2
 800ad36:	4798      	blx	r3
 800ad38:	0003      	movs	r3, r0
 800ad3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad3c:	e05d      	b.n	800adfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	0011      	movs	r1, r2
 800ad44:	0018      	movs	r0, r3
 800ad46:	f000 fabd 	bl	800b2c4 <USBD_CtlError>
            err++;
 800ad4a:	210b      	movs	r1, #11
 800ad4c:	187b      	adds	r3, r7, r1
 800ad4e:	781a      	ldrb	r2, [r3, #0]
 800ad50:	187b      	adds	r3, r7, r1
 800ad52:	3201      	adds	r2, #1
 800ad54:	701a      	strb	r2, [r3, #0]
          break;
 800ad56:	e050      	b.n	800adfa <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	23ac      	movs	r3, #172	; 0xac
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	58d3      	ldr	r3, [r2, r3]
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00d      	beq.n	800ad82 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	23ac      	movs	r3, #172	; 0xac
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	58d3      	ldr	r3, [r2, r3]
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	7c12      	ldrb	r2, [r2, #16]
 800ad74:	2108      	movs	r1, #8
 800ad76:	1879      	adds	r1, r7, r1
 800ad78:	0010      	movs	r0, r2
 800ad7a:	4798      	blx	r3
 800ad7c:	0003      	movs	r3, r0
 800ad7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad80:	e03b      	b.n	800adfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	0011      	movs	r1, r2
 800ad88:	0018      	movs	r0, r3
 800ad8a:	f000 fa9b 	bl	800b2c4 <USBD_CtlError>
            err++;
 800ad8e:	210b      	movs	r1, #11
 800ad90:	187b      	adds	r3, r7, r1
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	187b      	adds	r3, r7, r1
 800ad96:	3201      	adds	r2, #1
 800ad98:	701a      	strb	r2, [r3, #0]
          break;
 800ad9a:	e02e      	b.n	800adfa <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	23ac      	movs	r3, #172	; 0xac
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	58d3      	ldr	r3, [r2, r3]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00d      	beq.n	800adc6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	23ac      	movs	r3, #172	; 0xac
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	58d3      	ldr	r3, [r2, r3]
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	7c12      	ldrb	r2, [r2, #16]
 800adb8:	2108      	movs	r1, #8
 800adba:	1879      	adds	r1, r7, r1
 800adbc:	0010      	movs	r0, r2
 800adbe:	4798      	blx	r3
 800adc0:	0003      	movs	r3, r0
 800adc2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adc4:	e019      	b.n	800adfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	0011      	movs	r1, r2
 800adcc:	0018      	movs	r0, r3
 800adce:	f000 fa79 	bl	800b2c4 <USBD_CtlError>
            err++;
 800add2:	210b      	movs	r1, #11
 800add4:	187b      	adds	r3, r7, r1
 800add6:	781a      	ldrb	r2, [r3, #0]
 800add8:	187b      	adds	r3, r7, r1
 800adda:	3201      	adds	r2, #1
 800addc:	701a      	strb	r2, [r3, #0]
          break;
 800adde:	e00c      	b.n	800adfa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	0011      	movs	r1, r2
 800ade6:	0018      	movs	r0, r3
 800ade8:	f000 fa6c 	bl	800b2c4 <USBD_CtlError>
          err++;
 800adec:	210b      	movs	r1, #11
 800adee:	187b      	adds	r3, r7, r1
 800adf0:	781a      	ldrb	r2, [r3, #0]
 800adf2:	187b      	adds	r3, r7, r1
 800adf4:	3201      	adds	r2, #1
 800adf6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800adf8:	e04b      	b.n	800ae92 <USBD_GetDescriptor+0x2fa>
 800adfa:	e04a      	b.n	800ae92 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	7c1b      	ldrb	r3, [r3, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10b      	bne.n	800ae1c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	23ad      	movs	r3, #173	; 0xad
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	58d3      	ldr	r3, [r2, r3]
 800ae0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0e:	2208      	movs	r2, #8
 800ae10:	18ba      	adds	r2, r7, r2
 800ae12:	0010      	movs	r0, r2
 800ae14:	4798      	blx	r3
 800ae16:	0003      	movs	r3, r0
 800ae18:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae1a:	e03a      	b.n	800ae92 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	0011      	movs	r1, r2
 800ae22:	0018      	movs	r0, r3
 800ae24:	f000 fa4e 	bl	800b2c4 <USBD_CtlError>
        err++;
 800ae28:	210b      	movs	r1, #11
 800ae2a:	187b      	adds	r3, r7, r1
 800ae2c:	781a      	ldrb	r2, [r3, #0]
 800ae2e:	187b      	adds	r3, r7, r1
 800ae30:	3201      	adds	r2, #1
 800ae32:	701a      	strb	r2, [r3, #0]
      break;
 800ae34:	e02d      	b.n	800ae92 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	7c1b      	ldrb	r3, [r3, #16]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10f      	bne.n	800ae5e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	23ad      	movs	r3, #173	; 0xad
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	58d3      	ldr	r3, [r2, r3]
 800ae46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae48:	2208      	movs	r2, #8
 800ae4a:	18ba      	adds	r2, r7, r2
 800ae4c:	0010      	movs	r0, r2
 800ae4e:	4798      	blx	r3
 800ae50:	0003      	movs	r3, r0
 800ae52:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3301      	adds	r3, #1
 800ae58:	2207      	movs	r2, #7
 800ae5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae5c:	e019      	b.n	800ae92 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800ae5e:	683a      	ldr	r2, [r7, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	0011      	movs	r1, r2
 800ae64:	0018      	movs	r0, r3
 800ae66:	f000 fa2d 	bl	800b2c4 <USBD_CtlError>
        err++;
 800ae6a:	210b      	movs	r1, #11
 800ae6c:	187b      	adds	r3, r7, r1
 800ae6e:	781a      	ldrb	r2, [r3, #0]
 800ae70:	187b      	adds	r3, r7, r1
 800ae72:	3201      	adds	r2, #1
 800ae74:	701a      	strb	r2, [r3, #0]
      break;
 800ae76:	e00c      	b.n	800ae92 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	0011      	movs	r1, r2
 800ae7e:	0018      	movs	r0, r3
 800ae80:	f000 fa20 	bl	800b2c4 <USBD_CtlError>
      err++;
 800ae84:	210b      	movs	r1, #11
 800ae86:	187b      	adds	r3, r7, r1
 800ae88:	781a      	ldrb	r2, [r3, #0]
 800ae8a:	187b      	adds	r3, r7, r1
 800ae8c:	3201      	adds	r2, #1
 800ae8e:	701a      	strb	r2, [r3, #0]
      break;
 800ae90:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800ae92:	230b      	movs	r3, #11
 800ae94:	18fb      	adds	r3, r7, r3
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d127      	bne.n	800aeec <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ae9c:	2108      	movs	r1, #8
 800ae9e:	187b      	adds	r3, r7, r1
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d019      	beq.n	800aeda <USBD_GetDescriptor+0x342>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	88db      	ldrh	r3, [r3, #6]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d015      	beq.n	800aeda <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	88da      	ldrh	r2, [r3, #6]
 800aeb2:	187b      	adds	r3, r7, r1
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	1c18      	adds	r0, r3, #0
 800aeb8:	1c11      	adds	r1, r2, #0
 800aeba:	b28a      	uxth	r2, r1
 800aebc:	b283      	uxth	r3, r0
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d900      	bls.n	800aec4 <USBD_GetDescriptor+0x32c>
 800aec2:	1c01      	adds	r1, r0, #0
 800aec4:	b28a      	uxth	r2, r1
 800aec6:	2108      	movs	r1, #8
 800aec8:	187b      	adds	r3, r7, r1
 800aeca:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aecc:	187b      	adds	r3, r7, r1
 800aece:	881a      	ldrh	r2, [r3, #0]
 800aed0:	68f9      	ldr	r1, [r7, #12]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	0018      	movs	r0, r3
 800aed6:	f000 fa73 	bl	800b3c0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	88db      	ldrh	r3, [r3, #6]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d105      	bne.n	800aeee <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	0018      	movs	r0, r3
 800aee6:	f000 fad5 	bl	800b494 <USBD_CtlSendStatus>
 800aeea:	e000      	b.n	800aeee <USBD_GetDescriptor+0x356>
    return;
 800aeec:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800aeee:	46bd      	mov	sp, r7
 800aef0:	b004      	add	sp, #16
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	0800c9b4 	.word	0x0800c9b4
 800aef8:	0800c9d4 	.word	0x0800c9d4

0800aefc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aefc:	b590      	push	{r4, r7, lr}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	889b      	ldrh	r3, [r3, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d13d      	bne.n	800af8a <USBD_SetAddress+0x8e>
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	88db      	ldrh	r3, [r3, #6]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d139      	bne.n	800af8a <USBD_SetAddress+0x8e>
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	885b      	ldrh	r3, [r3, #2]
 800af1a:	2b7f      	cmp	r3, #127	; 0x7f
 800af1c:	d835      	bhi.n	800af8a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	885b      	ldrh	r3, [r3, #2]
 800af22:	b2da      	uxtb	r2, r3
 800af24:	230f      	movs	r3, #15
 800af26:	18fb      	adds	r3, r7, r3
 800af28:	217f      	movs	r1, #127	; 0x7f
 800af2a:	400a      	ands	r2, r1
 800af2c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	23a7      	movs	r3, #167	; 0xa7
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	5cd3      	ldrb	r3, [r2, r3]
 800af36:	2b03      	cmp	r3, #3
 800af38:	d106      	bne.n	800af48 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	0011      	movs	r1, r2
 800af40:	0018      	movs	r0, r3
 800af42:	f000 f9bf 	bl	800b2c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af46:	e027      	b.n	800af98 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	240f      	movs	r4, #15
 800af4c:	193a      	adds	r2, r7, r4
 800af4e:	4914      	ldr	r1, [pc, #80]	; (800afa0 <USBD_SetAddress+0xa4>)
 800af50:	7812      	ldrb	r2, [r2, #0]
 800af52:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af54:	193b      	adds	r3, r7, r4
 800af56:	781a      	ldrb	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	0011      	movs	r1, r2
 800af5c:	0018      	movs	r0, r3
 800af5e:	f000 ff25 	bl	800bdac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	0018      	movs	r0, r3
 800af66:	f000 fa95 	bl	800b494 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af6a:	193b      	adds	r3, r7, r4
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d005      	beq.n	800af7e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	23a7      	movs	r3, #167	; 0xa7
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	2102      	movs	r1, #2
 800af7a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af7c:	e00c      	b.n	800af98 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	23a7      	movs	r3, #167	; 0xa7
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	2101      	movs	r1, #1
 800af86:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af88:	e006      	b.n	800af98 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	0011      	movs	r1, r2
 800af90:	0018      	movs	r0, r3
 800af92:	f000 f997 	bl	800b2c4 <USBD_CtlError>
  }
}
 800af96:	46c0      	nop			; (mov r8, r8)
 800af98:	46c0      	nop			; (mov r8, r8)
 800af9a:	46bd      	mov	sp, r7
 800af9c:	b005      	add	sp, #20
 800af9e:	bd90      	pop	{r4, r7, pc}
 800afa0:	0000029e 	.word	0x0000029e

0800afa4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	885b      	ldrh	r3, [r3, #2]
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	4b4c      	ldr	r3, [pc, #304]	; (800b0e8 <USBD_SetConfig+0x144>)
 800afb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800afb8:	4b4b      	ldr	r3, [pc, #300]	; (800b0e8 <USBD_SetConfig+0x144>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d906      	bls.n	800afce <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	0011      	movs	r1, r2
 800afc6:	0018      	movs	r0, r3
 800afc8:	f000 f97c 	bl	800b2c4 <USBD_CtlError>
 800afcc:	e088      	b.n	800b0e0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	23a7      	movs	r3, #167	; 0xa7
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	5cd3      	ldrb	r3, [r2, r3]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d002      	beq.n	800afe0 <USBD_SetConfig+0x3c>
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d029      	beq.n	800b032 <USBD_SetConfig+0x8e>
 800afde:	e071      	b.n	800b0c4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800afe0:	4b41      	ldr	r3, [pc, #260]	; (800b0e8 <USBD_SetConfig+0x144>)
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d01f      	beq.n	800b028 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800afe8:	4b3f      	ldr	r3, [pc, #252]	; (800b0e8 <USBD_SetConfig+0x144>)
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	001a      	movs	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	23a7      	movs	r3, #167	; 0xa7
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	2103      	movs	r1, #3
 800affa:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800affc:	4b3a      	ldr	r3, [pc, #232]	; (800b0e8 <USBD_SetConfig+0x144>)
 800affe:	781a      	ldrb	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	0011      	movs	r1, r2
 800b004:	0018      	movs	r0, r3
 800b006:	f7ff f8c6 	bl	800a196 <USBD_SetClassConfig>
 800b00a:	0003      	movs	r3, r0
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d106      	bne.n	800b01e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	0011      	movs	r1, r2
 800b016:	0018      	movs	r0, r3
 800b018:	f000 f954 	bl	800b2c4 <USBD_CtlError>
            return;
 800b01c:	e060      	b.n	800b0e0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	0018      	movs	r0, r3
 800b022:	f000 fa37 	bl	800b494 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b026:	e05b      	b.n	800b0e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	0018      	movs	r0, r3
 800b02c:	f000 fa32 	bl	800b494 <USBD_CtlSendStatus>
        break;
 800b030:	e056      	b.n	800b0e0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b032:	4b2d      	ldr	r3, [pc, #180]	; (800b0e8 <USBD_SetConfig+0x144>)
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d115      	bne.n	800b066 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	23a7      	movs	r3, #167	; 0xa7
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	2102      	movs	r1, #2
 800b042:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800b044:	4b28      	ldr	r3, [pc, #160]	; (800b0e8 <USBD_SetConfig+0x144>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	001a      	movs	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b04e:	4b26      	ldr	r3, [pc, #152]	; (800b0e8 <USBD_SetConfig+0x144>)
 800b050:	781a      	ldrb	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	0011      	movs	r1, r2
 800b056:	0018      	movs	r0, r3
 800b058:	f7ff f8c4 	bl	800a1e4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	0018      	movs	r0, r3
 800b060:	f000 fa18 	bl	800b494 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b064:	e03c      	b.n	800b0e0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800b066:	4b20      	ldr	r3, [pc, #128]	; (800b0e8 <USBD_SetConfig+0x144>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	001a      	movs	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	429a      	cmp	r2, r3
 800b072:	d022      	beq.n	800b0ba <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	0011      	movs	r1, r2
 800b07e:	0018      	movs	r0, r3
 800b080:	f7ff f8b0 	bl	800a1e4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b084:	4b18      	ldr	r3, [pc, #96]	; (800b0e8 <USBD_SetConfig+0x144>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	001a      	movs	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b08e:	4b16      	ldr	r3, [pc, #88]	; (800b0e8 <USBD_SetConfig+0x144>)
 800b090:	781a      	ldrb	r2, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	0011      	movs	r1, r2
 800b096:	0018      	movs	r0, r3
 800b098:	f7ff f87d 	bl	800a196 <USBD_SetClassConfig>
 800b09c:	0003      	movs	r3, r0
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d106      	bne.n	800b0b0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800b0a2:	683a      	ldr	r2, [r7, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	0011      	movs	r1, r2
 800b0a8:	0018      	movs	r0, r3
 800b0aa:	f000 f90b 	bl	800b2c4 <USBD_CtlError>
            return;
 800b0ae:	e017      	b.n	800b0e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	0018      	movs	r0, r3
 800b0b4:	f000 f9ee 	bl	800b494 <USBD_CtlSendStatus>
        break;
 800b0b8:	e012      	b.n	800b0e0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	0018      	movs	r0, r3
 800b0be:	f000 f9e9 	bl	800b494 <USBD_CtlSendStatus>
        break;
 800b0c2:	e00d      	b.n	800b0e0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	0011      	movs	r1, r2
 800b0ca:	0018      	movs	r0, r3
 800b0cc:	f000 f8fa 	bl	800b2c4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b0d0:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <USBD_SetConfig+0x144>)
 800b0d2:	781a      	ldrb	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	0011      	movs	r1, r2
 800b0d8:	0018      	movs	r0, r3
 800b0da:	f7ff f883 	bl	800a1e4 <USBD_ClrClassConfig>
        break;
 800b0de:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	b002      	add	sp, #8
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	46c0      	nop			; (mov r8, r8)
 800b0e8:	20000219 	.word	0x20000219

0800b0ec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	88db      	ldrh	r3, [r3, #6]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d006      	beq.n	800b10c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	0011      	movs	r1, r2
 800b104:	0018      	movs	r0, r3
 800b106:	f000 f8dd 	bl	800b2c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b10a:	e026      	b.n	800b15a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	23a7      	movs	r3, #167	; 0xa7
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	5cd3      	ldrb	r3, [r2, r3]
 800b114:	2b02      	cmp	r3, #2
 800b116:	dc02      	bgt.n	800b11e <USBD_GetConfig+0x32>
 800b118:	2b00      	cmp	r3, #0
 800b11a:	dc03      	bgt.n	800b124 <USBD_GetConfig+0x38>
 800b11c:	e016      	b.n	800b14c <USBD_GetConfig+0x60>
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d00c      	beq.n	800b13c <USBD_GetConfig+0x50>
 800b122:	e013      	b.n	800b14c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	3308      	adds	r3, #8
 800b12e:	0019      	movs	r1, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	0018      	movs	r0, r3
 800b136:	f000 f943 	bl	800b3c0 <USBD_CtlSendData>
        break;
 800b13a:	e00e      	b.n	800b15a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	1d19      	adds	r1, r3, #4
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	0018      	movs	r0, r3
 800b146:	f000 f93b 	bl	800b3c0 <USBD_CtlSendData>
        break;
 800b14a:	e006      	b.n	800b15a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	0011      	movs	r1, r2
 800b152:	0018      	movs	r0, r3
 800b154:	f000 f8b6 	bl	800b2c4 <USBD_CtlError>
        break;
 800b158:	46c0      	nop			; (mov r8, r8)
}
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	46bd      	mov	sp, r7
 800b15e:	b002      	add	sp, #8
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	23a7      	movs	r3, #167	; 0xa7
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	5cd3      	ldrb	r3, [r2, r3]
 800b174:	3b01      	subs	r3, #1
 800b176:	2b02      	cmp	r3, #2
 800b178:	d822      	bhi.n	800b1c0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	88db      	ldrh	r3, [r3, #6]
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d006      	beq.n	800b190 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	0011      	movs	r1, r2
 800b188:	0018      	movs	r0, r3
 800b18a:	f000 f89b 	bl	800b2c4 <USBD_CtlError>
        break;
 800b18e:	e01e      	b.n	800b1ce <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	23a9      	movs	r3, #169	; 0xa9
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	58d3      	ldr	r3, [r2, r3]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d005      	beq.n	800b1ae <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	431a      	orrs	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	330c      	adds	r3, #12
 800b1b2:	0019      	movs	r1, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	f000 f901 	bl	800b3c0 <USBD_CtlSendData>
      break;
 800b1be:	e006      	b.n	800b1ce <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	0011      	movs	r1, r2
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	f000 f87c 	bl	800b2c4 <USBD_CtlError>
      break;
 800b1cc:	46c0      	nop			; (mov r8, r8)
  }
}
 800b1ce:	46c0      	nop			; (mov r8, r8)
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	b002      	add	sp, #8
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b082      	sub	sp, #8
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	885b      	ldrh	r3, [r3, #2]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d108      	bne.n	800b1fa <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	23a9      	movs	r3, #169	; 0xa9
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f000 f94d 	bl	800b494 <USBD_CtlSendStatus>
  }
}
 800b1fa:	46c0      	nop			; (mov r8, r8)
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	b002      	add	sp, #8
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b082      	sub	sp, #8
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	23a7      	movs	r3, #167	; 0xa7
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	5cd3      	ldrb	r3, [r2, r3]
 800b214:	3b01      	subs	r3, #1
 800b216:	2b02      	cmp	r3, #2
 800b218:	d80d      	bhi.n	800b236 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	885b      	ldrh	r3, [r3, #2]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d110      	bne.n	800b244 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	23a9      	movs	r3, #169	; 0xa9
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	2100      	movs	r1, #0
 800b22a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	0018      	movs	r0, r3
 800b230:	f000 f930 	bl	800b494 <USBD_CtlSendStatus>
      }
      break;
 800b234:	e006      	b.n	800b244 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	0011      	movs	r1, r2
 800b23c:	0018      	movs	r0, r3
 800b23e:	f000 f841 	bl	800b2c4 <USBD_CtlError>
      break;
 800b242:	e000      	b.n	800b246 <USBD_ClrFeature+0x44>
      break;
 800b244:	46c0      	nop			; (mov r8, r8)
  }
}
 800b246:	46c0      	nop			; (mov r8, r8)
 800b248:	46bd      	mov	sp, r7
 800b24a:	b002      	add	sp, #8
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b082      	sub	sp, #8
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781a      	ldrb	r2, [r3, #0]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	785a      	ldrb	r2, [r3, #1]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	3302      	adds	r3, #2
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b29a      	uxth	r2, r3
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	3303      	adds	r3, #3
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	b29b      	uxth	r3, r3
 800b278:	021b      	lsls	r3, r3, #8
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	18d3      	adds	r3, r2, r3
 800b27e:	b29a      	uxth	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	3304      	adds	r3, #4
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	3305      	adds	r3, #5
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	b29b      	uxth	r3, r3
 800b294:	021b      	lsls	r3, r3, #8
 800b296:	b29b      	uxth	r3, r3
 800b298:	18d3      	adds	r3, r2, r3
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	3306      	adds	r3, #6
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	3307      	adds	r3, #7
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	021b      	lsls	r3, r3, #8
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	18d3      	adds	r3, r2, r3
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	80da      	strh	r2, [r3, #6]

}
 800b2bc:	46c0      	nop			; (mov r8, r8)
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	b002      	add	sp, #8
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2180      	movs	r1, #128	; 0x80
 800b2d2:	0018      	movs	r0, r3
 800b2d4:	f000 fce3 	bl	800bc9e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2100      	movs	r1, #0
 800b2dc:	0018      	movs	r0, r3
 800b2de:	f000 fcde 	bl	800bc9e <USBD_LL_StallEP>
}
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	b002      	add	sp, #8
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b2ea:	b590      	push	{r4, r7, lr}
 800b2ec:	b087      	sub	sp, #28
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	60f8      	str	r0, [r7, #12]
 800b2f2:	60b9      	str	r1, [r7, #8]
 800b2f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b2f6:	2417      	movs	r4, #23
 800b2f8:	193b      	adds	r3, r7, r4
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d03c      	beq.n	800b37e <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	0018      	movs	r0, r3
 800b308:	f000 f83d 	bl	800b386 <USBD_GetLen>
 800b30c:	0003      	movs	r3, r0
 800b30e:	3301      	adds	r3, #1
 800b310:	b29b      	uxth	r3, r3
 800b312:	18db      	adds	r3, r3, r3
 800b314:	b29a      	uxth	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b31a:	193b      	adds	r3, r7, r4
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	193a      	adds	r2, r7, r4
 800b320:	1c59      	adds	r1, r3, #1
 800b322:	7011      	strb	r1, [r2, #0]
 800b324:	001a      	movs	r2, r3
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	189b      	adds	r3, r3, r2
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	7812      	ldrb	r2, [r2, #0]
 800b32e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b330:	193b      	adds	r3, r7, r4
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	193a      	adds	r2, r7, r4
 800b336:	1c59      	adds	r1, r3, #1
 800b338:	7011      	strb	r1, [r2, #0]
 800b33a:	001a      	movs	r2, r3
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	189b      	adds	r3, r3, r2
 800b340:	2203      	movs	r2, #3
 800b342:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b344:	e017      	b.n	800b376 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	1c5a      	adds	r2, r3, #1
 800b34a:	60fa      	str	r2, [r7, #12]
 800b34c:	2417      	movs	r4, #23
 800b34e:	193a      	adds	r2, r7, r4
 800b350:	7812      	ldrb	r2, [r2, #0]
 800b352:	1939      	adds	r1, r7, r4
 800b354:	1c50      	adds	r0, r2, #1
 800b356:	7008      	strb	r0, [r1, #0]
 800b358:	0011      	movs	r1, r2
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	1852      	adds	r2, r2, r1
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b362:	193b      	adds	r3, r7, r4
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	193a      	adds	r2, r7, r4
 800b368:	1c59      	adds	r1, r3, #1
 800b36a:	7011      	strb	r1, [r2, #0]
 800b36c:	001a      	movs	r2, r3
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	189b      	adds	r3, r3, r2
 800b372:	2200      	movs	r2, #0
 800b374:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1e3      	bne.n	800b346 <USBD_GetString+0x5c>
    }
  }
}
 800b37e:	46c0      	nop			; (mov r8, r8)
 800b380:	46bd      	mov	sp, r7
 800b382:	b007      	add	sp, #28
 800b384:	bd90      	pop	{r4, r7, pc}

0800b386 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b38e:	230f      	movs	r3, #15
 800b390:	18fb      	adds	r3, r7, r3
 800b392:	2200      	movs	r2, #0
 800b394:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800b396:	e008      	b.n	800b3aa <USBD_GetLen+0x24>
  {
    len++;
 800b398:	210f      	movs	r1, #15
 800b39a:	187b      	adds	r3, r7, r1
 800b39c:	781a      	ldrb	r2, [r3, #0]
 800b39e:	187b      	adds	r3, r7, r1
 800b3a0:	3201      	adds	r2, #1
 800b3a2:	701a      	strb	r2, [r3, #0]
    buf++;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1f2      	bne.n	800b398 <USBD_GetLen+0x12>
  }

  return len;
 800b3b2:	230f      	movs	r3, #15
 800b3b4:	18fb      	adds	r3, r7, r3
 800b3b6:	781b      	ldrb	r3, [r3, #0]
}
 800b3b8:	0018      	movs	r0, r3
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	b004      	add	sp, #16
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	1dbb      	adds	r3, r7, #6
 800b3cc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	23a5      	movs	r3, #165	; 0xa5
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	2102      	movs	r1, #2
 800b3d6:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800b3d8:	1dbb      	adds	r3, r7, #6
 800b3da:	881a      	ldrh	r2, [r3, #0]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b3e0:	1dbb      	adds	r3, r7, #6
 800b3e2:	881a      	ldrh	r2, [r3, #0]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3e8:	1dbb      	adds	r3, r7, #6
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	f000 fd06 	bl	800be02 <USBD_LL_Transmit>

  return USBD_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	0018      	movs	r0, r3
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	b004      	add	sp, #16
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	1dbb      	adds	r3, r7, #6
 800b40c:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b40e:	1dbb      	adds	r3, r7, #6
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	2100      	movs	r1, #0
 800b418:	f000 fcf3 	bl	800be02 <USBD_LL_Transmit>

  return USBD_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	0018      	movs	r0, r3
 800b420:	46bd      	mov	sp, r7
 800b422:	b004      	add	sp, #16
 800b424:	bd80      	pop	{r7, pc}

0800b426 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	60f8      	str	r0, [r7, #12]
 800b42e:	60b9      	str	r1, [r7, #8]
 800b430:	1dbb      	adds	r3, r7, #6
 800b432:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	23a5      	movs	r3, #165	; 0xa5
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	2103      	movs	r1, #3
 800b43c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800b43e:	1dbb      	adds	r3, r7, #6
 800b440:	8819      	ldrh	r1, [r3, #0]
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	23ae      	movs	r3, #174	; 0xae
 800b446:	005b      	lsls	r3, r3, #1
 800b448:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800b44a:	1dbb      	adds	r3, r7, #6
 800b44c:	8819      	ldrh	r1, [r3, #0]
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	23b0      	movs	r3, #176	; 0xb0
 800b452:	005b      	lsls	r3, r3, #1
 800b454:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b456:	1dbb      	adds	r3, r7, #6
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	2100      	movs	r1, #0
 800b460:	f000 fd06 	bl	800be70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	0018      	movs	r0, r3
 800b468:	46bd      	mov	sp, r7
 800b46a:	b004      	add	sp, #16
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	60f8      	str	r0, [r7, #12]
 800b476:	60b9      	str	r1, [r7, #8]
 800b478:	1dbb      	adds	r3, r7, #6
 800b47a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b47c:	1dbb      	adds	r3, r7, #6
 800b47e:	881b      	ldrh	r3, [r3, #0]
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	2100      	movs	r1, #0
 800b486:	f000 fcf3 	bl	800be70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	0018      	movs	r0, r3
 800b48e:	46bd      	mov	sp, r7
 800b490:	b004      	add	sp, #16
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	23a5      	movs	r3, #165	; 0xa5
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	2104      	movs	r1, #4
 800b4a4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	f000 fca8 	bl	800be02 <USBD_LL_Transmit>

  return USBD_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	0018      	movs	r0, r3
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	b002      	add	sp, #8
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	23a5      	movs	r3, #165	; 0xa5
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	2105      	movs	r1, #5
 800b4cc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	f000 fccb 	bl	800be70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	0018      	movs	r0, r3
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	b002      	add	sp, #8
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b4e8:	4914      	ldr	r1, [pc, #80]	; (800b53c <MX_USB_DEVICE_Init+0x58>)
 800b4ea:	4b15      	ldr	r3, [pc, #84]	; (800b540 <MX_USB_DEVICE_Init+0x5c>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	0018      	movs	r0, r3
 800b4f0:	f7fe fdea 	bl	800a0c8 <USBD_Init>
 800b4f4:	1e03      	subs	r3, r0, #0
 800b4f6:	d001      	beq.n	800b4fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b4f8:	f7f5 ff52 	bl	80013a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b4fc:	4a11      	ldr	r2, [pc, #68]	; (800b544 <MX_USB_DEVICE_Init+0x60>)
 800b4fe:	4b10      	ldr	r3, [pc, #64]	; (800b540 <MX_USB_DEVICE_Init+0x5c>)
 800b500:	0011      	movs	r1, r2
 800b502:	0018      	movs	r0, r3
 800b504:	f7fe fe11 	bl	800a12a <USBD_RegisterClass>
 800b508:	1e03      	subs	r3, r0, #0
 800b50a:	d001      	beq.n	800b510 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800b50c:	f7f5 ff48 	bl	80013a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b510:	4a0d      	ldr	r2, [pc, #52]	; (800b548 <MX_USB_DEVICE_Init+0x64>)
 800b512:	4b0b      	ldr	r3, [pc, #44]	; (800b540 <MX_USB_DEVICE_Init+0x5c>)
 800b514:	0011      	movs	r1, r2
 800b516:	0018      	movs	r0, r3
 800b518:	f7fe fd26 	bl	8009f68 <USBD_CDC_RegisterInterface>
 800b51c:	1e03      	subs	r3, r0, #0
 800b51e:	d001      	beq.n	800b524 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800b520:	f7f5 ff3e 	bl	80013a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b524:	4b06      	ldr	r3, [pc, #24]	; (800b540 <MX_USB_DEVICE_Init+0x5c>)
 800b526:	0018      	movs	r0, r3
 800b528:	f7fe fe1f 	bl	800a16a <USBD_Start>
 800b52c:	1e03      	subs	r3, r0, #0
 800b52e:	d001      	beq.n	800b534 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800b530:	f7f5 ff36 	bl	80013a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b534:	46c0      	nop			; (mov r8, r8)
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	46c0      	nop			; (mov r8, r8)
 800b53c:	2000012c 	.word	0x2000012c
 800b540:	2000063c 	.word	0x2000063c
 800b544:	20000018 	.word	0x20000018
 800b548:	2000011c 	.word	0x2000011c

0800b54c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b550:	4907      	ldr	r1, [pc, #28]	; (800b570 <CDC_Init_FS+0x24>)
 800b552:	4b08      	ldr	r3, [pc, #32]	; (800b574 <CDC_Init_FS+0x28>)
 800b554:	2200      	movs	r2, #0
 800b556:	0018      	movs	r0, r3
 800b558:	f7fe fd21 	bl	8009f9e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b55c:	4a06      	ldr	r2, [pc, #24]	; (800b578 <CDC_Init_FS+0x2c>)
 800b55e:	4b05      	ldr	r3, [pc, #20]	; (800b574 <CDC_Init_FS+0x28>)
 800b560:	0011      	movs	r1, r2
 800b562:	0018      	movs	r0, r3
 800b564:	f7fe fd37 	bl	8009fd6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b568:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b56a:	0018      	movs	r0, r3
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	20000ce8 	.word	0x20000ce8
 800b574:	2000063c 	.word	0x2000063c
 800b578:	20000900 	.word	0x20000900

0800b57c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b580:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b582:	0018      	movs	r0, r3
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6039      	str	r1, [r7, #0]
 800b590:	0011      	movs	r1, r2
 800b592:	1dfb      	adds	r3, r7, #7
 800b594:	1c02      	adds	r2, r0, #0
 800b596:	701a      	strb	r2, [r3, #0]
 800b598:	1d3b      	adds	r3, r7, #4
 800b59a:	1c0a      	adds	r2, r1, #0
 800b59c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b59e:	1dfb      	adds	r3, r7, #7
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	2b23      	cmp	r3, #35	; 0x23
 800b5a4:	d804      	bhi.n	800b5b0 <CDC_Control_FS+0x28>
 800b5a6:	009a      	lsls	r2, r3, #2
 800b5a8:	4b04      	ldr	r3, [pc, #16]	; (800b5bc <CDC_Control_FS+0x34>)
 800b5aa:	18d3      	adds	r3, r2, r3
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b5b0:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800b5b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5b4:	0018      	movs	r0, r3
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	b002      	add	sp, #8
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	0800c9ec 	.word	0x0800c9ec

0800b5c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5c0:	b590      	push	{r4, r7, lr}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800b5ca:	4b18      	ldr	r3, [pc, #96]	; (800b62c <CDC_Receive_FS+0x6c>)
 800b5cc:	7a1a      	ldrb	r2, [r3, #8]
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	430a      	orrs	r2, r1
 800b5d2:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800b5d4:	230f      	movs	r3, #15
 800b5d6:	18fb      	adds	r3, r7, r3
 800b5d8:	2200      	movs	r2, #0
 800b5da:	701a      	strb	r2, [r3, #0]
 800b5dc:	e00f      	b.n	800b5fe <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800b5de:	4b14      	ldr	r3, [pc, #80]	; (800b630 <CDC_Receive_FS+0x70>)
 800b5e0:	6818      	ldr	r0, [r3, #0]
 800b5e2:	240f      	movs	r4, #15
 800b5e4:	193b      	adds	r3, r7, r4
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	18d3      	adds	r3, r2, r3
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	0019      	movs	r1, r3
 800b5f0:	f7f5 ff10 	bl	8001414 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800b5f4:	193b      	adds	r3, r7, r4
 800b5f6:	781a      	ldrb	r2, [r3, #0]
 800b5f8:	193b      	adds	r3, r7, r4
 800b5fa:	3201      	adds	r2, #1
 800b5fc:	701a      	strb	r2, [r3, #0]
 800b5fe:	230f      	movs	r3, #15
 800b600:	18fb      	adds	r3, r7, r3
 800b602:	781a      	ldrb	r2, [r3, #0]
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d3e8      	bcc.n	800b5de <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	4b09      	ldr	r3, [pc, #36]	; (800b634 <CDC_Receive_FS+0x74>)
 800b610:	0011      	movs	r1, r2
 800b612:	0018      	movs	r0, r3
 800b614:	f7fe fcdf 	bl	8009fd6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b618:	4b06      	ldr	r3, [pc, #24]	; (800b634 <CDC_Receive_FS+0x74>)
 800b61a:	0018      	movs	r0, r3
 800b61c:	f7fe fd26 	bl	800a06c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b620:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b622:	0018      	movs	r0, r3
 800b624:	46bd      	mov	sp, r7
 800b626:	b005      	add	sp, #20
 800b628:	bd90      	pop	{r4, r7, pc}
 800b62a:	46c0      	nop			; (mov r8, r8)
 800b62c:	20000584 	.word	0x20000584
 800b630:	200010d0 	.word	0x200010d0
 800b634:	2000063c 	.word	0x2000063c

0800b638 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b638:	b5b0      	push	{r4, r5, r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	000a      	movs	r2, r1
 800b642:	1cbb      	adds	r3, r7, #2
 800b644:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800b646:	230f      	movs	r3, #15
 800b648:	18fb      	adds	r3, r7, r3
 800b64a:	2200      	movs	r2, #0
 800b64c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b64e:	4a11      	ldr	r2, [pc, #68]	; (800b694 <CDC_Transmit_FS+0x5c>)
 800b650:	23ae      	movs	r3, #174	; 0xae
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	58d3      	ldr	r3, [r2, r3]
 800b656:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	2385      	movs	r3, #133	; 0x85
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	58d3      	ldr	r3, [r2, r3]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800b664:	2301      	movs	r3, #1
 800b666:	e010      	b.n	800b68a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b668:	1cbb      	adds	r3, r7, #2
 800b66a:	881a      	ldrh	r2, [r3, #0]
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	4b09      	ldr	r3, [pc, #36]	; (800b694 <CDC_Transmit_FS+0x5c>)
 800b670:	0018      	movs	r0, r3
 800b672:	f7fe fc94 	bl	8009f9e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b676:	250f      	movs	r5, #15
 800b678:	197c      	adds	r4, r7, r5
 800b67a:	4b06      	ldr	r3, [pc, #24]	; (800b694 <CDC_Transmit_FS+0x5c>)
 800b67c:	0018      	movs	r0, r3
 800b67e:	f7fe fcbe 	bl	8009ffe <USBD_CDC_TransmitPacket>
 800b682:	0003      	movs	r3, r0
 800b684:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800b686:	197b      	adds	r3, r7, r5
 800b688:	781b      	ldrb	r3, [r3, #0]
}
 800b68a:	0018      	movs	r0, r3
 800b68c:	46bd      	mov	sp, r7
 800b68e:	b004      	add	sp, #16
 800b690:	bdb0      	pop	{r4, r5, r7, pc}
 800b692:	46c0      	nop			; (mov r8, r8)
 800b694:	2000063c 	.word	0x2000063c

0800b698 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	0002      	movs	r2, r0
 800b6a0:	6039      	str	r1, [r7, #0]
 800b6a2:	1dfb      	adds	r3, r7, #7
 800b6a4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2212      	movs	r2, #18
 800b6aa:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6ac:	4b02      	ldr	r3, [pc, #8]	; (800b6b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6ae:	0018      	movs	r0, r3
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	b002      	add	sp, #8
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	46c0      	nop			; (mov r8, r8)
 800b6b8:	20000148 	.word	0x20000148

0800b6bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	0002      	movs	r2, r0
 800b6c4:	6039      	str	r1, [r7, #0]
 800b6c6:	1dfb      	adds	r3, r7, #7
 800b6c8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2204      	movs	r2, #4
 800b6ce:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6d0:	4b02      	ldr	r3, [pc, #8]	; (800b6dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b6d2:	0018      	movs	r0, r3
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	b002      	add	sp, #8
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	46c0      	nop			; (mov r8, r8)
 800b6dc:	2000015c 	.word	0x2000015c

0800b6e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	0002      	movs	r2, r0
 800b6e8:	6039      	str	r1, [r7, #0]
 800b6ea:	1dfb      	adds	r3, r7, #7
 800b6ec:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b6ee:	1dfb      	adds	r3, r7, #7
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d106      	bne.n	800b704 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	4908      	ldr	r1, [pc, #32]	; (800b71c <USBD_FS_ProductStrDescriptor+0x3c>)
 800b6fa:	4b09      	ldr	r3, [pc, #36]	; (800b720 <USBD_FS_ProductStrDescriptor+0x40>)
 800b6fc:	0018      	movs	r0, r3
 800b6fe:	f7ff fdf4 	bl	800b2ea <USBD_GetString>
 800b702:	e005      	b.n	800b710 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	4905      	ldr	r1, [pc, #20]	; (800b71c <USBD_FS_ProductStrDescriptor+0x3c>)
 800b708:	4b05      	ldr	r3, [pc, #20]	; (800b720 <USBD_FS_ProductStrDescriptor+0x40>)
 800b70a:	0018      	movs	r0, r3
 800b70c:	f7ff fded 	bl	800b2ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800b710:	4b02      	ldr	r3, [pc, #8]	; (800b71c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800b712:	0018      	movs	r0, r3
 800b714:	46bd      	mov	sp, r7
 800b716:	b002      	add	sp, #8
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	46c0      	nop			; (mov r8, r8)
 800b71c:	200010d4 	.word	0x200010d4
 800b720:	0800c8f8 	.word	0x0800c8f8

0800b724 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	0002      	movs	r2, r0
 800b72c:	6039      	str	r1, [r7, #0]
 800b72e:	1dfb      	adds	r3, r7, #7
 800b730:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	4904      	ldr	r1, [pc, #16]	; (800b748 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b736:	4b05      	ldr	r3, [pc, #20]	; (800b74c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800b738:	0018      	movs	r0, r3
 800b73a:	f7ff fdd6 	bl	800b2ea <USBD_GetString>
  return USBD_StrDesc;
 800b73e:	4b02      	ldr	r3, [pc, #8]	; (800b748 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800b740:	0018      	movs	r0, r3
 800b742:	46bd      	mov	sp, r7
 800b744:	b002      	add	sp, #8
 800b746:	bd80      	pop	{r7, pc}
 800b748:	200010d4 	.word	0x200010d4
 800b74c:	0800c910 	.word	0x0800c910

0800b750 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	0002      	movs	r2, r0
 800b758:	6039      	str	r1, [r7, #0]
 800b75a:	1dfb      	adds	r3, r7, #7
 800b75c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	221a      	movs	r2, #26
 800b762:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b764:	f000 f84c 	bl	800b800 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b768:	4b02      	ldr	r3, [pc, #8]	; (800b774 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800b76a:	0018      	movs	r0, r3
 800b76c:	46bd      	mov	sp, r7
 800b76e:	b002      	add	sp, #8
 800b770:	bd80      	pop	{r7, pc}
 800b772:	46c0      	nop			; (mov r8, r8)
 800b774:	20000160 	.word	0x20000160

0800b778 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	0002      	movs	r2, r0
 800b780:	6039      	str	r1, [r7, #0]
 800b782:	1dfb      	adds	r3, r7, #7
 800b784:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800b786:	1dfb      	adds	r3, r7, #7
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d106      	bne.n	800b79c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	4908      	ldr	r1, [pc, #32]	; (800b7b4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b792:	4b09      	ldr	r3, [pc, #36]	; (800b7b8 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b794:	0018      	movs	r0, r3
 800b796:	f7ff fda8 	bl	800b2ea <USBD_GetString>
 800b79a:	e005      	b.n	800b7a8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	4905      	ldr	r1, [pc, #20]	; (800b7b4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b7a0:	4b05      	ldr	r3, [pc, #20]	; (800b7b8 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b7a2:	0018      	movs	r0, r3
 800b7a4:	f7ff fda1 	bl	800b2ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7a8:	4b02      	ldr	r3, [pc, #8]	; (800b7b4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800b7aa:	0018      	movs	r0, r3
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	b002      	add	sp, #8
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	46c0      	nop			; (mov r8, r8)
 800b7b4:	200010d4 	.word	0x200010d4
 800b7b8:	0800c924 	.word	0x0800c924

0800b7bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	0002      	movs	r2, r0
 800b7c4:	6039      	str	r1, [r7, #0]
 800b7c6:	1dfb      	adds	r3, r7, #7
 800b7c8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b7ca:	1dfb      	adds	r3, r7, #7
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d106      	bne.n	800b7e0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	4908      	ldr	r1, [pc, #32]	; (800b7f8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b7d6:	4b09      	ldr	r3, [pc, #36]	; (800b7fc <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b7d8:	0018      	movs	r0, r3
 800b7da:	f7ff fd86 	bl	800b2ea <USBD_GetString>
 800b7de:	e005      	b.n	800b7ec <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	4905      	ldr	r1, [pc, #20]	; (800b7f8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b7e4:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b7e6:	0018      	movs	r0, r3
 800b7e8:	f7ff fd7f 	bl	800b2ea <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7ec:	4b02      	ldr	r3, [pc, #8]	; (800b7f8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800b7ee:	0018      	movs	r0, r3
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	b002      	add	sp, #8
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	46c0      	nop			; (mov r8, r8)
 800b7f8:	200010d4 	.word	0x200010d4
 800b7fc:	0800c930 	.word	0x0800c930

0800b800 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b806:	4b10      	ldr	r3, [pc, #64]	; (800b848 <Get_SerialNum+0x48>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b80c:	4b0f      	ldr	r3, [pc, #60]	; (800b84c <Get_SerialNum+0x4c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b812:	4b0f      	ldr	r3, [pc, #60]	; (800b850 <Get_SerialNum+0x50>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	18d3      	adds	r3, r2, r3
 800b81e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00b      	beq.n	800b83e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b826:	490b      	ldr	r1, [pc, #44]	; (800b854 <Get_SerialNum+0x54>)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2208      	movs	r2, #8
 800b82c:	0018      	movs	r0, r3
 800b82e:	f000 f815 	bl	800b85c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b832:	4909      	ldr	r1, [pc, #36]	; (800b858 <Get_SerialNum+0x58>)
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	2204      	movs	r2, #4
 800b838:	0018      	movs	r0, r3
 800b83a:	f000 f80f 	bl	800b85c <IntToUnicode>
  }
}
 800b83e:	46c0      	nop			; (mov r8, r8)
 800b840:	46bd      	mov	sp, r7
 800b842:	b004      	add	sp, #16
 800b844:	bd80      	pop	{r7, pc}
 800b846:	46c0      	nop			; (mov r8, r8)
 800b848:	1ffff7ac 	.word	0x1ffff7ac
 800b84c:	1ffff7b0 	.word	0x1ffff7b0
 800b850:	1ffff7b4 	.word	0x1ffff7b4
 800b854:	20000162 	.word	0x20000162
 800b858:	20000172 	.word	0x20000172

0800b85c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	1dfb      	adds	r3, r7, #7
 800b868:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800b86a:	2117      	movs	r1, #23
 800b86c:	187b      	adds	r3, r7, r1
 800b86e:	2200      	movs	r2, #0
 800b870:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800b872:	187b      	adds	r3, r7, r1
 800b874:	2200      	movs	r2, #0
 800b876:	701a      	strb	r2, [r3, #0]
 800b878:	e02f      	b.n	800b8da <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	0f1b      	lsrs	r3, r3, #28
 800b87e:	2b09      	cmp	r3, #9
 800b880:	d80d      	bhi.n	800b89e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	0f1b      	lsrs	r3, r3, #28
 800b886:	b2da      	uxtb	r2, r3
 800b888:	2317      	movs	r3, #23
 800b88a:	18fb      	adds	r3, r7, r3
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	005b      	lsls	r3, r3, #1
 800b890:	0019      	movs	r1, r3
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	185b      	adds	r3, r3, r1
 800b896:	3230      	adds	r2, #48	; 0x30
 800b898:	b2d2      	uxtb	r2, r2
 800b89a:	701a      	strb	r2, [r3, #0]
 800b89c:	e00c      	b.n	800b8b8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	0f1b      	lsrs	r3, r3, #28
 800b8a2:	b2da      	uxtb	r2, r3
 800b8a4:	2317      	movs	r3, #23
 800b8a6:	18fb      	adds	r3, r7, r3
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	005b      	lsls	r3, r3, #1
 800b8ac:	0019      	movs	r1, r3
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	185b      	adds	r3, r3, r1
 800b8b2:	3237      	adds	r2, #55	; 0x37
 800b8b4:	b2d2      	uxtb	r2, r2
 800b8b6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	011b      	lsls	r3, r3, #4
 800b8bc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8be:	2117      	movs	r1, #23
 800b8c0:	187b      	adds	r3, r7, r1
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	18d3      	adds	r3, r2, r3
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b8d0:	187b      	adds	r3, r7, r1
 800b8d2:	781a      	ldrb	r2, [r3, #0]
 800b8d4:	187b      	adds	r3, r7, r1
 800b8d6:	3201      	adds	r2, #1
 800b8d8:	701a      	strb	r2, [r3, #0]
 800b8da:	2317      	movs	r3, #23
 800b8dc:	18fa      	adds	r2, r7, r3
 800b8de:	1dfb      	adds	r3, r7, #7
 800b8e0:	7812      	ldrb	r2, [r2, #0]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d3c8      	bcc.n	800b87a <IntToUnicode+0x1e>
  }
}
 800b8e8:	46c0      	nop			; (mov r8, r8)
 800b8ea:	46c0      	nop			; (mov r8, r8)
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	b006      	add	sp, #24
 800b8f0:	bd80      	pop	{r7, pc}
	...

0800b8f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a0e      	ldr	r2, [pc, #56]	; (800b93c <HAL_PCD_MspInit+0x48>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d115      	bne.n	800b932 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b906:	4b0e      	ldr	r3, [pc, #56]	; (800b940 <HAL_PCD_MspInit+0x4c>)
 800b908:	69da      	ldr	r2, [r3, #28]
 800b90a:	4b0d      	ldr	r3, [pc, #52]	; (800b940 <HAL_PCD_MspInit+0x4c>)
 800b90c:	2180      	movs	r1, #128	; 0x80
 800b90e:	0409      	lsls	r1, r1, #16
 800b910:	430a      	orrs	r2, r1
 800b912:	61da      	str	r2, [r3, #28]
 800b914:	4b0a      	ldr	r3, [pc, #40]	; (800b940 <HAL_PCD_MspInit+0x4c>)
 800b916:	69da      	ldr	r2, [r3, #28]
 800b918:	2380      	movs	r3, #128	; 0x80
 800b91a:	041b      	lsls	r3, r3, #16
 800b91c:	4013      	ands	r3, r2
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b922:	2200      	movs	r2, #0
 800b924:	2100      	movs	r1, #0
 800b926:	201f      	movs	r0, #31
 800b928:	f7f6 febc 	bl	80026a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b92c:	201f      	movs	r0, #31
 800b92e:	f7f6 fece 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b932:	46c0      	nop			; (mov r8, r8)
 800b934:	46bd      	mov	sp, r7
 800b936:	b004      	add	sp, #16
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	46c0      	nop			; (mov r8, r8)
 800b93c:	40005c00 	.word	0x40005c00
 800b940:	40021000 	.word	0x40021000

0800b944 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	23bc      	movs	r3, #188	; 0xbc
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	58d2      	ldr	r2, [r2, r3]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	21ac      	movs	r1, #172	; 0xac
 800b958:	0089      	lsls	r1, r1, #2
 800b95a:	468c      	mov	ip, r1
 800b95c:	4463      	add	r3, ip
 800b95e:	0019      	movs	r1, r3
 800b960:	0010      	movs	r0, r2
 800b962:	f7fe fc55 	bl	800a210 <USBD_LL_SetupStage>
}
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	46bd      	mov	sp, r7
 800b96a:	b002      	add	sp, #8
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b96e:	b590      	push	{r4, r7, lr}
 800b970:	b083      	sub	sp, #12
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	000a      	movs	r2, r1
 800b978:	1cfb      	adds	r3, r7, #3
 800b97a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	23bc      	movs	r3, #188	; 0xbc
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	58d4      	ldr	r4, [r2, r3]
 800b984:	1cfb      	adds	r3, r7, #3
 800b986:	781a      	ldrb	r2, [r3, #0]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	23be      	movs	r3, #190	; 0xbe
 800b98c:	0059      	lsls	r1, r3, #1
 800b98e:	0013      	movs	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	189b      	adds	r3, r3, r2
 800b994:	00db      	lsls	r3, r3, #3
 800b996:	18c3      	adds	r3, r0, r3
 800b998:	185b      	adds	r3, r3, r1
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	1cfb      	adds	r3, r7, #3
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	0019      	movs	r1, r3
 800b9a2:	0020      	movs	r0, r4
 800b9a4:	f7fe fc92 	bl	800a2cc <USBD_LL_DataOutStage>
}
 800b9a8:	46c0      	nop			; (mov r8, r8)
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	b003      	add	sp, #12
 800b9ae:	bd90      	pop	{r4, r7, pc}

0800b9b0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	000a      	movs	r2, r1
 800b9ba:	1cfb      	adds	r3, r7, #3
 800b9bc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	23bc      	movs	r3, #188	; 0xbc
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	58d0      	ldr	r0, [r2, r3]
 800b9c6:	1cfb      	adds	r3, r7, #3
 800b9c8:	781a      	ldrb	r2, [r3, #0]
 800b9ca:	6879      	ldr	r1, [r7, #4]
 800b9cc:	0013      	movs	r3, r2
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	189b      	adds	r3, r3, r2
 800b9d2:	00db      	lsls	r3, r3, #3
 800b9d4:	18cb      	adds	r3, r1, r3
 800b9d6:	333c      	adds	r3, #60	; 0x3c
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	1cfb      	adds	r3, r7, #3
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	0019      	movs	r1, r3
 800b9e0:	f7fe fcf6 	bl	800a3d0 <USBD_LL_DataInStage>
}
 800b9e4:	46c0      	nop			; (mov r8, r8)
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	b002      	add	sp, #8
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	23bc      	movs	r3, #188	; 0xbc
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	58d3      	ldr	r3, [r2, r3]
 800b9fc:	0018      	movs	r0, r3
 800b9fe:	f7fe fe2d 	bl	800a65c <USBD_LL_SOF>
}
 800ba02:	46c0      	nop			; (mov r8, r8)
 800ba04:	46bd      	mov	sp, r7
 800ba06:	b002      	add	sp, #8
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba12:	230f      	movs	r3, #15
 800ba14:	18fb      	adds	r3, r7, r3
 800ba16:	2201      	movs	r2, #1
 800ba18:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d001      	beq.n	800ba26 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800ba22:	f7f5 fcbd 	bl	80013a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	23bc      	movs	r3, #188	; 0xbc
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	58d2      	ldr	r2, [r2, r3]
 800ba2e:	230f      	movs	r3, #15
 800ba30:	18fb      	adds	r3, r7, r3
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	0019      	movs	r1, r3
 800ba36:	0010      	movs	r0, r2
 800ba38:	f7fe fdcf 	bl	800a5da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	23bc      	movs	r3, #188	; 0xbc
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	58d3      	ldr	r3, [r2, r3]
 800ba44:	0018      	movs	r0, r3
 800ba46:	f7fe fd80 	bl	800a54a <USBD_LL_Reset>
}
 800ba4a:	46c0      	nop			; (mov r8, r8)
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	b004      	add	sp, #16
 800ba50:	bd80      	pop	{r7, pc}
	...

0800ba54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	23bc      	movs	r3, #188	; 0xbc
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	58d3      	ldr	r3, [r2, r3]
 800ba64:	0018      	movs	r0, r3
 800ba66:	f7fe fdc9 	bl	800a5fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d005      	beq.n	800ba7e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba72:	4b05      	ldr	r3, [pc, #20]	; (800ba88 <HAL_PCD_SuspendCallback+0x34>)
 800ba74:	691a      	ldr	r2, [r3, #16]
 800ba76:	4b04      	ldr	r3, [pc, #16]	; (800ba88 <HAL_PCD_SuspendCallback+0x34>)
 800ba78:	2106      	movs	r1, #6
 800ba7a:	430a      	orrs	r2, r1
 800ba7c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800ba7e:	46c0      	nop			; (mov r8, r8)
 800ba80:	46bd      	mov	sp, r7
 800ba82:	b002      	add	sp, #8
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	46c0      	nop			; (mov r8, r8)
 800ba88:	e000ed00 	.word	0xe000ed00

0800ba8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d007      	beq.n	800baac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba9c:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <HAL_PCD_ResumeCallback+0x38>)
 800ba9e:	691a      	ldr	r2, [r3, #16]
 800baa0:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <HAL_PCD_ResumeCallback+0x38>)
 800baa2:	2106      	movs	r1, #6
 800baa4:	438a      	bics	r2, r1
 800baa6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800baa8:	f000 fa44 	bl	800bf34 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	23bc      	movs	r3, #188	; 0xbc
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	58d3      	ldr	r3, [r2, r3]
 800bab4:	0018      	movs	r0, r3
 800bab6:	f7fe fdb9 	bl	800a62c <USBD_LL_Resume>
}
 800baba:	46c0      	nop			; (mov r8, r8)
 800babc:	46bd      	mov	sp, r7
 800babe:	b002      	add	sp, #8
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	46c0      	nop			; (mov r8, r8)
 800bac4:	e000ed00 	.word	0xe000ed00

0800bac8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bad0:	4a2d      	ldr	r2, [pc, #180]	; (800bb88 <USBD_LL_Init+0xc0>)
 800bad2:	23bc      	movs	r3, #188	; 0xbc
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	6879      	ldr	r1, [r7, #4]
 800bad8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	23b0      	movs	r3, #176	; 0xb0
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4929      	ldr	r1, [pc, #164]	; (800bb88 <USBD_LL_Init+0xc0>)
 800bae2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800bae4:	4b28      	ldr	r3, [pc, #160]	; (800bb88 <USBD_LL_Init+0xc0>)
 800bae6:	4a29      	ldr	r2, [pc, #164]	; (800bb8c <USBD_LL_Init+0xc4>)
 800bae8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800baea:	4b27      	ldr	r3, [pc, #156]	; (800bb88 <USBD_LL_Init+0xc0>)
 800baec:	2208      	movs	r2, #8
 800baee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800baf0:	4b25      	ldr	r3, [pc, #148]	; (800bb88 <USBD_LL_Init+0xc0>)
 800baf2:	2202      	movs	r2, #2
 800baf4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800baf6:	4b24      	ldr	r3, [pc, #144]	; (800bb88 <USBD_LL_Init+0xc0>)
 800baf8:	2202      	movs	r2, #2
 800bafa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bafc:	4b22      	ldr	r3, [pc, #136]	; (800bb88 <USBD_LL_Init+0xc0>)
 800bafe:	2200      	movs	r2, #0
 800bb00:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bb02:	4b21      	ldr	r3, [pc, #132]	; (800bb88 <USBD_LL_Init+0xc0>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bb08:	4b1f      	ldr	r3, [pc, #124]	; (800bb88 <USBD_LL_Init+0xc0>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bb0e:	4b1e      	ldr	r3, [pc, #120]	; (800bb88 <USBD_LL_Init+0xc0>)
 800bb10:	0018      	movs	r0, r3
 800bb12:	f7f7 f967 	bl	8002de4 <HAL_PCD_Init>
 800bb16:	1e03      	subs	r3, r0, #0
 800bb18:	d001      	beq.n	800bb1e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800bb1a:	f7f5 fc41 	bl	80013a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	23b0      	movs	r3, #176	; 0xb0
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	58d0      	ldr	r0, [r2, r3]
 800bb26:	2318      	movs	r3, #24
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	f7f8 ff48 	bl	80049c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	23b0      	movs	r3, #176	; 0xb0
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	58d0      	ldr	r0, [r2, r3]
 800bb38:	2358      	movs	r3, #88	; 0x58
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2180      	movs	r1, #128	; 0x80
 800bb3e:	f7f8 ff3f 	bl	80049c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	23b0      	movs	r3, #176	; 0xb0
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	58d0      	ldr	r0, [r2, r3]
 800bb4a:	23c0      	movs	r3, #192	; 0xc0
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	2181      	movs	r1, #129	; 0x81
 800bb50:	f7f8 ff36 	bl	80049c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	23b0      	movs	r3, #176	; 0xb0
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	58d0      	ldr	r0, [r2, r3]
 800bb5c:	2388      	movs	r3, #136	; 0x88
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	2200      	movs	r2, #0
 800bb62:	2101      	movs	r1, #1
 800bb64:	f7f8 ff2c 	bl	80049c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	23b0      	movs	r3, #176	; 0xb0
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	58d0      	ldr	r0, [r2, r3]
 800bb70:	2380      	movs	r3, #128	; 0x80
 800bb72:	005b      	lsls	r3, r3, #1
 800bb74:	2200      	movs	r2, #0
 800bb76:	2182      	movs	r1, #130	; 0x82
 800bb78:	f7f8 ff22 	bl	80049c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	0018      	movs	r0, r3
 800bb80:	46bd      	mov	sp, r7
 800bb82:	b002      	add	sp, #8
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	200012d4 	.word	0x200012d4
 800bb8c:	40005c00 	.word	0x40005c00

0800bb90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb98:	210f      	movs	r1, #15
 800bb9a:	187b      	adds	r3, r7, r1
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba0:	260e      	movs	r6, #14
 800bba2:	19bb      	adds	r3, r7, r6
 800bba4:	2200      	movs	r2, #0
 800bba6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	23b0      	movs	r3, #176	; 0xb0
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	58d3      	ldr	r3, [r2, r3]
 800bbb0:	000d      	movs	r5, r1
 800bbb2:	187c      	adds	r4, r7, r1
 800bbb4:	0018      	movs	r0, r3
 800bbb6:	f7f7 fa25 	bl	8003004 <HAL_PCD_Start>
 800bbba:	0003      	movs	r3, r0
 800bbbc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbbe:	19bc      	adds	r4, r7, r6
 800bbc0:	197b      	adds	r3, r7, r5
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	0018      	movs	r0, r3
 800bbc6:	f000 f9bc 	bl	800bf42 <USBD_Get_USB_Status>
 800bbca:	0003      	movs	r3, r0
 800bbcc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bbce:	19bb      	adds	r3, r7, r6
 800bbd0:	781b      	ldrb	r3, [r3, #0]
}
 800bbd2:	0018      	movs	r0, r3
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	b005      	add	sp, #20
 800bbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bbda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbda:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbdc:	b085      	sub	sp, #20
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	000c      	movs	r4, r1
 800bbe4:	0010      	movs	r0, r2
 800bbe6:	0019      	movs	r1, r3
 800bbe8:	1cfb      	adds	r3, r7, #3
 800bbea:	1c22      	adds	r2, r4, #0
 800bbec:	701a      	strb	r2, [r3, #0]
 800bbee:	1cbb      	adds	r3, r7, #2
 800bbf0:	1c02      	adds	r2, r0, #0
 800bbf2:	701a      	strb	r2, [r3, #0]
 800bbf4:	003b      	movs	r3, r7
 800bbf6:	1c0a      	adds	r2, r1, #0
 800bbf8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbfa:	260f      	movs	r6, #15
 800bbfc:	19bb      	adds	r3, r7, r6
 800bbfe:	2200      	movs	r2, #0
 800bc00:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc02:	250e      	movs	r5, #14
 800bc04:	197b      	adds	r3, r7, r5
 800bc06:	2200      	movs	r2, #0
 800bc08:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	23b0      	movs	r3, #176	; 0xb0
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	58d0      	ldr	r0, [r2, r3]
 800bc12:	19bc      	adds	r4, r7, r6
 800bc14:	1cbb      	adds	r3, r7, #2
 800bc16:	781d      	ldrb	r5, [r3, #0]
 800bc18:	003b      	movs	r3, r7
 800bc1a:	881a      	ldrh	r2, [r3, #0]
 800bc1c:	1cfb      	adds	r3, r7, #3
 800bc1e:	7819      	ldrb	r1, [r3, #0]
 800bc20:	002b      	movs	r3, r5
 800bc22:	f7f7 fbbc 	bl	800339e <HAL_PCD_EP_Open>
 800bc26:	0003      	movs	r3, r0
 800bc28:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc2a:	250e      	movs	r5, #14
 800bc2c:	197c      	adds	r4, r7, r5
 800bc2e:	19bb      	adds	r3, r7, r6
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	0018      	movs	r0, r3
 800bc34:	f000 f985 	bl	800bf42 <USBD_Get_USB_Status>
 800bc38:	0003      	movs	r3, r0
 800bc3a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bc3c:	197b      	adds	r3, r7, r5
 800bc3e:	781b      	ldrb	r3, [r3, #0]
}
 800bc40:	0018      	movs	r0, r3
 800bc42:	46bd      	mov	sp, r7
 800bc44:	b005      	add	sp, #20
 800bc46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc48 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	000a      	movs	r2, r1
 800bc52:	1cfb      	adds	r3, r7, #3
 800bc54:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc56:	210f      	movs	r1, #15
 800bc58:	187b      	adds	r3, r7, r1
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc5e:	260e      	movs	r6, #14
 800bc60:	19bb      	adds	r3, r7, r6
 800bc62:	2200      	movs	r2, #0
 800bc64:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	23b0      	movs	r3, #176	; 0xb0
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	58d2      	ldr	r2, [r2, r3]
 800bc6e:	000d      	movs	r5, r1
 800bc70:	187c      	adds	r4, r7, r1
 800bc72:	1cfb      	adds	r3, r7, #3
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	0019      	movs	r1, r3
 800bc78:	0010      	movs	r0, r2
 800bc7a:	f7f7 fc08 	bl	800348e <HAL_PCD_EP_Close>
 800bc7e:	0003      	movs	r3, r0
 800bc80:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc82:	19bc      	adds	r4, r7, r6
 800bc84:	197b      	adds	r3, r7, r5
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	0018      	movs	r0, r3
 800bc8a:	f000 f95a 	bl	800bf42 <USBD_Get_USB_Status>
 800bc8e:	0003      	movs	r3, r0
 800bc90:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bc92:	19bb      	adds	r3, r7, r6
 800bc94:	781b      	ldrb	r3, [r3, #0]
}
 800bc96:	0018      	movs	r0, r3
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	b005      	add	sp, #20
 800bc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc9e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bca0:	b085      	sub	sp, #20
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	000a      	movs	r2, r1
 800bca8:	1cfb      	adds	r3, r7, #3
 800bcaa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcac:	210f      	movs	r1, #15
 800bcae:	187b      	adds	r3, r7, r1
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb4:	260e      	movs	r6, #14
 800bcb6:	19bb      	adds	r3, r7, r6
 800bcb8:	2200      	movs	r2, #0
 800bcba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	23b0      	movs	r3, #176	; 0xb0
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	58d2      	ldr	r2, [r2, r3]
 800bcc4:	000d      	movs	r5, r1
 800bcc6:	187c      	adds	r4, r7, r1
 800bcc8:	1cfb      	adds	r3, r7, #3
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	0019      	movs	r1, r3
 800bcce:	0010      	movs	r0, r2
 800bcd0:	f7f7 fcd4 	bl	800367c <HAL_PCD_EP_SetStall>
 800bcd4:	0003      	movs	r3, r0
 800bcd6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcd8:	19bc      	adds	r4, r7, r6
 800bcda:	197b      	adds	r3, r7, r5
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	0018      	movs	r0, r3
 800bce0:	f000 f92f 	bl	800bf42 <USBD_Get_USB_Status>
 800bce4:	0003      	movs	r3, r0
 800bce6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bce8:	19bb      	adds	r3, r7, r6
 800bcea:	781b      	ldrb	r3, [r3, #0]
}
 800bcec:	0018      	movs	r0, r3
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	b005      	add	sp, #20
 800bcf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bcf4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	000a      	movs	r2, r1
 800bcfe:	1cfb      	adds	r3, r7, #3
 800bd00:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd02:	210f      	movs	r1, #15
 800bd04:	187b      	adds	r3, r7, r1
 800bd06:	2200      	movs	r2, #0
 800bd08:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd0a:	260e      	movs	r6, #14
 800bd0c:	19bb      	adds	r3, r7, r6
 800bd0e:	2200      	movs	r2, #0
 800bd10:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	23b0      	movs	r3, #176	; 0xb0
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	58d2      	ldr	r2, [r2, r3]
 800bd1a:	000d      	movs	r5, r1
 800bd1c:	187c      	adds	r4, r7, r1
 800bd1e:	1cfb      	adds	r3, r7, #3
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	0019      	movs	r1, r3
 800bd24:	0010      	movs	r0, r2
 800bd26:	f7f7 fd05 	bl	8003734 <HAL_PCD_EP_ClrStall>
 800bd2a:	0003      	movs	r3, r0
 800bd2c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd2e:	19bc      	adds	r4, r7, r6
 800bd30:	197b      	adds	r3, r7, r5
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	0018      	movs	r0, r3
 800bd36:	f000 f904 	bl	800bf42 <USBD_Get_USB_Status>
 800bd3a:	0003      	movs	r3, r0
 800bd3c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bd3e:	19bb      	adds	r3, r7, r6
 800bd40:	781b      	ldrb	r3, [r3, #0]
}
 800bd42:	0018      	movs	r0, r3
 800bd44:	46bd      	mov	sp, r7
 800bd46:	b005      	add	sp, #20
 800bd48:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd4a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b084      	sub	sp, #16
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	000a      	movs	r2, r1
 800bd54:	1cfb      	adds	r3, r7, #3
 800bd56:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	23b0      	movs	r3, #176	; 0xb0
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	58d3      	ldr	r3, [r2, r3]
 800bd60:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd62:	1cfb      	adds	r3, r7, #3
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	b25b      	sxtb	r3, r3
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	da0d      	bge.n	800bd88 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd6c:	1cfb      	adds	r3, r7, #3
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	227f      	movs	r2, #127	; 0x7f
 800bd72:	4013      	ands	r3, r2
 800bd74:	68f9      	ldr	r1, [r7, #12]
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	0013      	movs	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	189b      	adds	r3, r3, r2
 800bd7e:	00db      	lsls	r3, r3, #3
 800bd80:	18cb      	adds	r3, r1, r3
 800bd82:	3302      	adds	r3, #2
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	e00d      	b.n	800bda4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd88:	1cfb      	adds	r3, r7, #3
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	227f      	movs	r2, #127	; 0x7f
 800bd8e:	401a      	ands	r2, r3
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	23b5      	movs	r3, #181	; 0xb5
 800bd94:	0059      	lsls	r1, r3, #1
 800bd96:	0013      	movs	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	189b      	adds	r3, r3, r2
 800bd9c:	00db      	lsls	r3, r3, #3
 800bd9e:	18c3      	adds	r3, r0, r3
 800bda0:	185b      	adds	r3, r3, r1
 800bda2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bda4:	0018      	movs	r0, r3
 800bda6:	46bd      	mov	sp, r7
 800bda8:	b004      	add	sp, #16
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bdac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	000a      	movs	r2, r1
 800bdb6:	1cfb      	adds	r3, r7, #3
 800bdb8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdba:	210f      	movs	r1, #15
 800bdbc:	187b      	adds	r3, r7, r1
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdc2:	260e      	movs	r6, #14
 800bdc4:	19bb      	adds	r3, r7, r6
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	23b0      	movs	r3, #176	; 0xb0
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	58d2      	ldr	r2, [r2, r3]
 800bdd2:	000d      	movs	r5, r1
 800bdd4:	187c      	adds	r4, r7, r1
 800bdd6:	1cfb      	adds	r3, r7, #3
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	0019      	movs	r1, r3
 800bddc:	0010      	movs	r0, r2
 800bdde:	f7f7 fab3 	bl	8003348 <HAL_PCD_SetAddress>
 800bde2:	0003      	movs	r3, r0
 800bde4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bde6:	19bc      	adds	r4, r7, r6
 800bde8:	197b      	adds	r3, r7, r5
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	0018      	movs	r0, r3
 800bdee:	f000 f8a8 	bl	800bf42 <USBD_Get_USB_Status>
 800bdf2:	0003      	movs	r3, r0
 800bdf4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bdf6:	19bb      	adds	r3, r7, r6
 800bdf8:	781b      	ldrb	r3, [r3, #0]
}
 800bdfa:	0018      	movs	r0, r3
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	b005      	add	sp, #20
 800be00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800be02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be04:	b087      	sub	sp, #28
 800be06:	af00      	add	r7, sp, #0
 800be08:	60f8      	str	r0, [r7, #12]
 800be0a:	0008      	movs	r0, r1
 800be0c:	607a      	str	r2, [r7, #4]
 800be0e:	0019      	movs	r1, r3
 800be10:	230b      	movs	r3, #11
 800be12:	18fb      	adds	r3, r7, r3
 800be14:	1c02      	adds	r2, r0, #0
 800be16:	701a      	strb	r2, [r3, #0]
 800be18:	2408      	movs	r4, #8
 800be1a:	193b      	adds	r3, r7, r4
 800be1c:	1c0a      	adds	r2, r1, #0
 800be1e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be20:	2117      	movs	r1, #23
 800be22:	187b      	adds	r3, r7, r1
 800be24:	2200      	movs	r2, #0
 800be26:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be28:	2516      	movs	r5, #22
 800be2a:	197b      	adds	r3, r7, r5
 800be2c:	2200      	movs	r2, #0
 800be2e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	23b0      	movs	r3, #176	; 0xb0
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	58d0      	ldr	r0, [r2, r3]
 800be38:	193b      	adds	r3, r7, r4
 800be3a:	881d      	ldrh	r5, [r3, #0]
 800be3c:	000e      	movs	r6, r1
 800be3e:	187c      	adds	r4, r7, r1
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	230b      	movs	r3, #11
 800be44:	18fb      	adds	r3, r7, r3
 800be46:	7819      	ldrb	r1, [r3, #0]
 800be48:	002b      	movs	r3, r5
 800be4a:	f7f7 fbce 	bl	80035ea <HAL_PCD_EP_Transmit>
 800be4e:	0003      	movs	r3, r0
 800be50:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be52:	2516      	movs	r5, #22
 800be54:	197c      	adds	r4, r7, r5
 800be56:	19bb      	adds	r3, r7, r6
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	0018      	movs	r0, r3
 800be5c:	f000 f871 	bl	800bf42 <USBD_Get_USB_Status>
 800be60:	0003      	movs	r3, r0
 800be62:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800be64:	197b      	adds	r3, r7, r5
 800be66:	781b      	ldrb	r3, [r3, #0]
}
 800be68:	0018      	movs	r0, r3
 800be6a:	46bd      	mov	sp, r7
 800be6c:	b007      	add	sp, #28
 800be6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800be70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be72:	b087      	sub	sp, #28
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	0008      	movs	r0, r1
 800be7a:	607a      	str	r2, [r7, #4]
 800be7c:	0019      	movs	r1, r3
 800be7e:	230b      	movs	r3, #11
 800be80:	18fb      	adds	r3, r7, r3
 800be82:	1c02      	adds	r2, r0, #0
 800be84:	701a      	strb	r2, [r3, #0]
 800be86:	2408      	movs	r4, #8
 800be88:	193b      	adds	r3, r7, r4
 800be8a:	1c0a      	adds	r2, r1, #0
 800be8c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be8e:	2117      	movs	r1, #23
 800be90:	187b      	adds	r3, r7, r1
 800be92:	2200      	movs	r2, #0
 800be94:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be96:	2516      	movs	r5, #22
 800be98:	197b      	adds	r3, r7, r5
 800be9a:	2200      	movs	r2, #0
 800be9c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	23b0      	movs	r3, #176	; 0xb0
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	58d0      	ldr	r0, [r2, r3]
 800bea6:	193b      	adds	r3, r7, r4
 800bea8:	881d      	ldrh	r5, [r3, #0]
 800beaa:	000e      	movs	r6, r1
 800beac:	187c      	adds	r4, r7, r1
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	230b      	movs	r3, #11
 800beb2:	18fb      	adds	r3, r7, r3
 800beb4:	7819      	ldrb	r1, [r3, #0]
 800beb6:	002b      	movs	r3, r5
 800beb8:	f7f7 fb3a 	bl	8003530 <HAL_PCD_EP_Receive>
 800bebc:	0003      	movs	r3, r0
 800bebe:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bec0:	2516      	movs	r5, #22
 800bec2:	197c      	adds	r4, r7, r5
 800bec4:	19bb      	adds	r3, r7, r6
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	0018      	movs	r0, r3
 800beca:	f000 f83a 	bl	800bf42 <USBD_Get_USB_Status>
 800bece:	0003      	movs	r3, r0
 800bed0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bed2:	197b      	adds	r3, r7, r5
 800bed4:	781b      	ldrb	r3, [r3, #0]
}
 800bed6:	0018      	movs	r0, r3
 800bed8:	46bd      	mov	sp, r7
 800beda:	b007      	add	sp, #28
 800bedc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bede <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b082      	sub	sp, #8
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	000a      	movs	r2, r1
 800bee8:	1cfb      	adds	r3, r7, #3
 800beea:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	23b0      	movs	r3, #176	; 0xb0
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	58d2      	ldr	r2, [r2, r3]
 800bef4:	1cfb      	adds	r3, r7, #3
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	0019      	movs	r1, r3
 800befa:	0010      	movs	r0, r2
 800befc:	f7f7 fb5c 	bl	80035b8 <HAL_PCD_EP_GetRxCount>
 800bf00:	0003      	movs	r3, r0
}
 800bf02:	0018      	movs	r0, r3
 800bf04:	46bd      	mov	sp, r7
 800bf06:	b002      	add	sp, #8
 800bf08:	bd80      	pop	{r7, pc}
	...

0800bf0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf14:	4b02      	ldr	r3, [pc, #8]	; (800bf20 <USBD_static_malloc+0x14>)
}
 800bf16:	0018      	movs	r0, r3
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	b002      	add	sp, #8
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	46c0      	nop			; (mov r8, r8)
 800bf20:	2000021c 	.word	0x2000021c

0800bf24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]

}
 800bf2c:	46c0      	nop			; (mov r8, r8)
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	b002      	add	sp, #8
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bf38:	f7f4 fb9c 	bl	8000674 <SystemClock_Config>
}
 800bf3c:	46c0      	nop			; (mov r8, r8)
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b084      	sub	sp, #16
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	0002      	movs	r2, r0
 800bf4a:	1dfb      	adds	r3, r7, #7
 800bf4c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf4e:	230f      	movs	r3, #15
 800bf50:	18fb      	adds	r3, r7, r3
 800bf52:	2200      	movs	r2, #0
 800bf54:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800bf56:	1dfb      	adds	r3, r7, #7
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d017      	beq.n	800bf8e <USBD_Get_USB_Status+0x4c>
 800bf5e:	dc1b      	bgt.n	800bf98 <USBD_Get_USB_Status+0x56>
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d00f      	beq.n	800bf84 <USBD_Get_USB_Status+0x42>
 800bf64:	dc18      	bgt.n	800bf98 <USBD_Get_USB_Status+0x56>
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <USBD_Get_USB_Status+0x2e>
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d005      	beq.n	800bf7a <USBD_Get_USB_Status+0x38>
 800bf6e:	e013      	b.n	800bf98 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bf70:	230f      	movs	r3, #15
 800bf72:	18fb      	adds	r3, r7, r3
 800bf74:	2200      	movs	r2, #0
 800bf76:	701a      	strb	r2, [r3, #0]
    break;
 800bf78:	e013      	b.n	800bfa2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf7a:	230f      	movs	r3, #15
 800bf7c:	18fb      	adds	r3, r7, r3
 800bf7e:	2202      	movs	r2, #2
 800bf80:	701a      	strb	r2, [r3, #0]
    break;
 800bf82:	e00e      	b.n	800bfa2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf84:	230f      	movs	r3, #15
 800bf86:	18fb      	adds	r3, r7, r3
 800bf88:	2201      	movs	r2, #1
 800bf8a:	701a      	strb	r2, [r3, #0]
    break;
 800bf8c:	e009      	b.n	800bfa2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf8e:	230f      	movs	r3, #15
 800bf90:	18fb      	adds	r3, r7, r3
 800bf92:	2202      	movs	r2, #2
 800bf94:	701a      	strb	r2, [r3, #0]
    break;
 800bf96:	e004      	b.n	800bfa2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800bf98:	230f      	movs	r3, #15
 800bf9a:	18fb      	adds	r3, r7, r3
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	701a      	strb	r2, [r3, #0]
    break;
 800bfa0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800bfa2:	230f      	movs	r3, #15
 800bfa4:	18fb      	adds	r3, r7, r3
 800bfa6:	781b      	ldrb	r3, [r3, #0]
}
 800bfa8:	0018      	movs	r0, r3
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	b004      	add	sp, #16
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <__errno>:
 800bfb0:	4b01      	ldr	r3, [pc, #4]	; (800bfb8 <__errno+0x8>)
 800bfb2:	6818      	ldr	r0, [r3, #0]
 800bfb4:	4770      	bx	lr
 800bfb6:	46c0      	nop			; (mov r8, r8)
 800bfb8:	2000017c 	.word	0x2000017c

0800bfbc <__libc_init_array>:
 800bfbc:	b570      	push	{r4, r5, r6, lr}
 800bfbe:	2600      	movs	r6, #0
 800bfc0:	4d0c      	ldr	r5, [pc, #48]	; (800bff4 <__libc_init_array+0x38>)
 800bfc2:	4c0d      	ldr	r4, [pc, #52]	; (800bff8 <__libc_init_array+0x3c>)
 800bfc4:	1b64      	subs	r4, r4, r5
 800bfc6:	10a4      	asrs	r4, r4, #2
 800bfc8:	42a6      	cmp	r6, r4
 800bfca:	d109      	bne.n	800bfe0 <__libc_init_array+0x24>
 800bfcc:	2600      	movs	r6, #0
 800bfce:	f000 fc5b 	bl	800c888 <_init>
 800bfd2:	4d0a      	ldr	r5, [pc, #40]	; (800bffc <__libc_init_array+0x40>)
 800bfd4:	4c0a      	ldr	r4, [pc, #40]	; (800c000 <__libc_init_array+0x44>)
 800bfd6:	1b64      	subs	r4, r4, r5
 800bfd8:	10a4      	asrs	r4, r4, #2
 800bfda:	42a6      	cmp	r6, r4
 800bfdc:	d105      	bne.n	800bfea <__libc_init_array+0x2e>
 800bfde:	bd70      	pop	{r4, r5, r6, pc}
 800bfe0:	00b3      	lsls	r3, r6, #2
 800bfe2:	58eb      	ldr	r3, [r5, r3]
 800bfe4:	4798      	blx	r3
 800bfe6:	3601      	adds	r6, #1
 800bfe8:	e7ee      	b.n	800bfc8 <__libc_init_array+0xc>
 800bfea:	00b3      	lsls	r3, r6, #2
 800bfec:	58eb      	ldr	r3, [r5, r3]
 800bfee:	4798      	blx	r3
 800bff0:	3601      	adds	r6, #1
 800bff2:	e7f2      	b.n	800bfda <__libc_init_array+0x1e>
 800bff4:	0800cab0 	.word	0x0800cab0
 800bff8:	0800cab0 	.word	0x0800cab0
 800bffc:	0800cab0 	.word	0x0800cab0
 800c000:	0800cab4 	.word	0x0800cab4

0800c004 <malloc>:
 800c004:	b510      	push	{r4, lr}
 800c006:	4b03      	ldr	r3, [pc, #12]	; (800c014 <malloc+0x10>)
 800c008:	0001      	movs	r1, r0
 800c00a:	6818      	ldr	r0, [r3, #0]
 800c00c:	f000 f860 	bl	800c0d0 <_malloc_r>
 800c010:	bd10      	pop	{r4, pc}
 800c012:	46c0      	nop			; (mov r8, r8)
 800c014:	2000017c 	.word	0x2000017c

0800c018 <free>:
 800c018:	b510      	push	{r4, lr}
 800c01a:	4b03      	ldr	r3, [pc, #12]	; (800c028 <free+0x10>)
 800c01c:	0001      	movs	r1, r0
 800c01e:	6818      	ldr	r0, [r3, #0]
 800c020:	f000 f80c 	bl	800c03c <_free_r>
 800c024:	bd10      	pop	{r4, pc}
 800c026:	46c0      	nop			; (mov r8, r8)
 800c028:	2000017c 	.word	0x2000017c

0800c02c <memset>:
 800c02c:	0003      	movs	r3, r0
 800c02e:	1882      	adds	r2, r0, r2
 800c030:	4293      	cmp	r3, r2
 800c032:	d100      	bne.n	800c036 <memset+0xa>
 800c034:	4770      	bx	lr
 800c036:	7019      	strb	r1, [r3, #0]
 800c038:	3301      	adds	r3, #1
 800c03a:	e7f9      	b.n	800c030 <memset+0x4>

0800c03c <_free_r>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	0005      	movs	r5, r0
 800c040:	2900      	cmp	r1, #0
 800c042:	d010      	beq.n	800c066 <_free_r+0x2a>
 800c044:	1f0c      	subs	r4, r1, #4
 800c046:	6823      	ldr	r3, [r4, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	da00      	bge.n	800c04e <_free_r+0x12>
 800c04c:	18e4      	adds	r4, r4, r3
 800c04e:	0028      	movs	r0, r5
 800c050:	f000 f8ce 	bl	800c1f0 <__malloc_lock>
 800c054:	4a1d      	ldr	r2, [pc, #116]	; (800c0cc <_free_r+0x90>)
 800c056:	6813      	ldr	r3, [r2, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d105      	bne.n	800c068 <_free_r+0x2c>
 800c05c:	6063      	str	r3, [r4, #4]
 800c05e:	6014      	str	r4, [r2, #0]
 800c060:	0028      	movs	r0, r5
 800c062:	f000 f8cd 	bl	800c200 <__malloc_unlock>
 800c066:	bd70      	pop	{r4, r5, r6, pc}
 800c068:	42a3      	cmp	r3, r4
 800c06a:	d908      	bls.n	800c07e <_free_r+0x42>
 800c06c:	6821      	ldr	r1, [r4, #0]
 800c06e:	1860      	adds	r0, r4, r1
 800c070:	4283      	cmp	r3, r0
 800c072:	d1f3      	bne.n	800c05c <_free_r+0x20>
 800c074:	6818      	ldr	r0, [r3, #0]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	1841      	adds	r1, r0, r1
 800c07a:	6021      	str	r1, [r4, #0]
 800c07c:	e7ee      	b.n	800c05c <_free_r+0x20>
 800c07e:	001a      	movs	r2, r3
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <_free_r+0x4e>
 800c086:	42a3      	cmp	r3, r4
 800c088:	d9f9      	bls.n	800c07e <_free_r+0x42>
 800c08a:	6811      	ldr	r1, [r2, #0]
 800c08c:	1850      	adds	r0, r2, r1
 800c08e:	42a0      	cmp	r0, r4
 800c090:	d10b      	bne.n	800c0aa <_free_r+0x6e>
 800c092:	6820      	ldr	r0, [r4, #0]
 800c094:	1809      	adds	r1, r1, r0
 800c096:	1850      	adds	r0, r2, r1
 800c098:	6011      	str	r1, [r2, #0]
 800c09a:	4283      	cmp	r3, r0
 800c09c:	d1e0      	bne.n	800c060 <_free_r+0x24>
 800c09e:	6818      	ldr	r0, [r3, #0]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	1841      	adds	r1, r0, r1
 800c0a4:	6011      	str	r1, [r2, #0]
 800c0a6:	6053      	str	r3, [r2, #4]
 800c0a8:	e7da      	b.n	800c060 <_free_r+0x24>
 800c0aa:	42a0      	cmp	r0, r4
 800c0ac:	d902      	bls.n	800c0b4 <_free_r+0x78>
 800c0ae:	230c      	movs	r3, #12
 800c0b0:	602b      	str	r3, [r5, #0]
 800c0b2:	e7d5      	b.n	800c060 <_free_r+0x24>
 800c0b4:	6821      	ldr	r1, [r4, #0]
 800c0b6:	1860      	adds	r0, r4, r1
 800c0b8:	4283      	cmp	r3, r0
 800c0ba:	d103      	bne.n	800c0c4 <_free_r+0x88>
 800c0bc:	6818      	ldr	r0, [r3, #0]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	1841      	adds	r1, r0, r1
 800c0c2:	6021      	str	r1, [r4, #0]
 800c0c4:	6063      	str	r3, [r4, #4]
 800c0c6:	6054      	str	r4, [r2, #4]
 800c0c8:	e7ca      	b.n	800c060 <_free_r+0x24>
 800c0ca:	46c0      	nop			; (mov r8, r8)
 800c0cc:	2000043c 	.word	0x2000043c

0800c0d0 <_malloc_r>:
 800c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d2:	2303      	movs	r3, #3
 800c0d4:	1ccd      	adds	r5, r1, #3
 800c0d6:	439d      	bics	r5, r3
 800c0d8:	3508      	adds	r5, #8
 800c0da:	0006      	movs	r6, r0
 800c0dc:	2d0c      	cmp	r5, #12
 800c0de:	d21f      	bcs.n	800c120 <_malloc_r+0x50>
 800c0e0:	250c      	movs	r5, #12
 800c0e2:	42a9      	cmp	r1, r5
 800c0e4:	d81e      	bhi.n	800c124 <_malloc_r+0x54>
 800c0e6:	0030      	movs	r0, r6
 800c0e8:	f000 f882 	bl	800c1f0 <__malloc_lock>
 800c0ec:	4925      	ldr	r1, [pc, #148]	; (800c184 <_malloc_r+0xb4>)
 800c0ee:	680a      	ldr	r2, [r1, #0]
 800c0f0:	0014      	movs	r4, r2
 800c0f2:	2c00      	cmp	r4, #0
 800c0f4:	d11a      	bne.n	800c12c <_malloc_r+0x5c>
 800c0f6:	4f24      	ldr	r7, [pc, #144]	; (800c188 <_malloc_r+0xb8>)
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d104      	bne.n	800c108 <_malloc_r+0x38>
 800c0fe:	0021      	movs	r1, r4
 800c100:	0030      	movs	r0, r6
 800c102:	f000 f843 	bl	800c18c <_sbrk_r>
 800c106:	6038      	str	r0, [r7, #0]
 800c108:	0029      	movs	r1, r5
 800c10a:	0030      	movs	r0, r6
 800c10c:	f000 f83e 	bl	800c18c <_sbrk_r>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d12b      	bne.n	800c16c <_malloc_r+0x9c>
 800c114:	230c      	movs	r3, #12
 800c116:	0030      	movs	r0, r6
 800c118:	6033      	str	r3, [r6, #0]
 800c11a:	f000 f871 	bl	800c200 <__malloc_unlock>
 800c11e:	e003      	b.n	800c128 <_malloc_r+0x58>
 800c120:	2d00      	cmp	r5, #0
 800c122:	dade      	bge.n	800c0e2 <_malloc_r+0x12>
 800c124:	230c      	movs	r3, #12
 800c126:	6033      	str	r3, [r6, #0]
 800c128:	2000      	movs	r0, #0
 800c12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c12c:	6823      	ldr	r3, [r4, #0]
 800c12e:	1b5b      	subs	r3, r3, r5
 800c130:	d419      	bmi.n	800c166 <_malloc_r+0x96>
 800c132:	2b0b      	cmp	r3, #11
 800c134:	d903      	bls.n	800c13e <_malloc_r+0x6e>
 800c136:	6023      	str	r3, [r4, #0]
 800c138:	18e4      	adds	r4, r4, r3
 800c13a:	6025      	str	r5, [r4, #0]
 800c13c:	e003      	b.n	800c146 <_malloc_r+0x76>
 800c13e:	6863      	ldr	r3, [r4, #4]
 800c140:	42a2      	cmp	r2, r4
 800c142:	d10e      	bne.n	800c162 <_malloc_r+0x92>
 800c144:	600b      	str	r3, [r1, #0]
 800c146:	0030      	movs	r0, r6
 800c148:	f000 f85a 	bl	800c200 <__malloc_unlock>
 800c14c:	0020      	movs	r0, r4
 800c14e:	2207      	movs	r2, #7
 800c150:	300b      	adds	r0, #11
 800c152:	1d23      	adds	r3, r4, #4
 800c154:	4390      	bics	r0, r2
 800c156:	1ac2      	subs	r2, r0, r3
 800c158:	4298      	cmp	r0, r3
 800c15a:	d0e6      	beq.n	800c12a <_malloc_r+0x5a>
 800c15c:	1a1b      	subs	r3, r3, r0
 800c15e:	50a3      	str	r3, [r4, r2]
 800c160:	e7e3      	b.n	800c12a <_malloc_r+0x5a>
 800c162:	6053      	str	r3, [r2, #4]
 800c164:	e7ef      	b.n	800c146 <_malloc_r+0x76>
 800c166:	0022      	movs	r2, r4
 800c168:	6864      	ldr	r4, [r4, #4]
 800c16a:	e7c2      	b.n	800c0f2 <_malloc_r+0x22>
 800c16c:	2303      	movs	r3, #3
 800c16e:	1cc4      	adds	r4, r0, #3
 800c170:	439c      	bics	r4, r3
 800c172:	42a0      	cmp	r0, r4
 800c174:	d0e1      	beq.n	800c13a <_malloc_r+0x6a>
 800c176:	1a21      	subs	r1, r4, r0
 800c178:	0030      	movs	r0, r6
 800c17a:	f000 f807 	bl	800c18c <_sbrk_r>
 800c17e:	1c43      	adds	r3, r0, #1
 800c180:	d1db      	bne.n	800c13a <_malloc_r+0x6a>
 800c182:	e7c7      	b.n	800c114 <_malloc_r+0x44>
 800c184:	2000043c 	.word	0x2000043c
 800c188:	20000440 	.word	0x20000440

0800c18c <_sbrk_r>:
 800c18c:	2300      	movs	r3, #0
 800c18e:	b570      	push	{r4, r5, r6, lr}
 800c190:	4d06      	ldr	r5, [pc, #24]	; (800c1ac <_sbrk_r+0x20>)
 800c192:	0004      	movs	r4, r0
 800c194:	0008      	movs	r0, r1
 800c196:	602b      	str	r3, [r5, #0]
 800c198:	f7f5 fca8 	bl	8001aec <_sbrk>
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	d103      	bne.n	800c1a8 <_sbrk_r+0x1c>
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d000      	beq.n	800c1a8 <_sbrk_r+0x1c>
 800c1a6:	6023      	str	r3, [r4, #0]
 800c1a8:	bd70      	pop	{r4, r5, r6, pc}
 800c1aa:	46c0      	nop			; (mov r8, r8)
 800c1ac:	200015c8 	.word	0x200015c8

0800c1b0 <siprintf>:
 800c1b0:	b40e      	push	{r1, r2, r3}
 800c1b2:	b500      	push	{lr}
 800c1b4:	490b      	ldr	r1, [pc, #44]	; (800c1e4 <siprintf+0x34>)
 800c1b6:	b09c      	sub	sp, #112	; 0x70
 800c1b8:	ab1d      	add	r3, sp, #116	; 0x74
 800c1ba:	9002      	str	r0, [sp, #8]
 800c1bc:	9006      	str	r0, [sp, #24]
 800c1be:	9107      	str	r1, [sp, #28]
 800c1c0:	9104      	str	r1, [sp, #16]
 800c1c2:	4809      	ldr	r0, [pc, #36]	; (800c1e8 <siprintf+0x38>)
 800c1c4:	4909      	ldr	r1, [pc, #36]	; (800c1ec <siprintf+0x3c>)
 800c1c6:	cb04      	ldmia	r3!, {r2}
 800c1c8:	9105      	str	r1, [sp, #20]
 800c1ca:	6800      	ldr	r0, [r0, #0]
 800c1cc:	a902      	add	r1, sp, #8
 800c1ce:	9301      	str	r3, [sp, #4]
 800c1d0:	f000 f880 	bl	800c2d4 <_svfiprintf_r>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	9a02      	ldr	r2, [sp, #8]
 800c1d8:	7013      	strb	r3, [r2, #0]
 800c1da:	b01c      	add	sp, #112	; 0x70
 800c1dc:	bc08      	pop	{r3}
 800c1de:	b003      	add	sp, #12
 800c1e0:	4718      	bx	r3
 800c1e2:	46c0      	nop			; (mov r8, r8)
 800c1e4:	7fffffff 	.word	0x7fffffff
 800c1e8:	2000017c 	.word	0x2000017c
 800c1ec:	ffff0208 	.word	0xffff0208

0800c1f0 <__malloc_lock>:
 800c1f0:	b510      	push	{r4, lr}
 800c1f2:	4802      	ldr	r0, [pc, #8]	; (800c1fc <__malloc_lock+0xc>)
 800c1f4:	f000 faf0 	bl	800c7d8 <__retarget_lock_acquire_recursive>
 800c1f8:	bd10      	pop	{r4, pc}
 800c1fa:	46c0      	nop			; (mov r8, r8)
 800c1fc:	200015d0 	.word	0x200015d0

0800c200 <__malloc_unlock>:
 800c200:	b510      	push	{r4, lr}
 800c202:	4802      	ldr	r0, [pc, #8]	; (800c20c <__malloc_unlock+0xc>)
 800c204:	f000 fae9 	bl	800c7da <__retarget_lock_release_recursive>
 800c208:	bd10      	pop	{r4, pc}
 800c20a:	46c0      	nop			; (mov r8, r8)
 800c20c:	200015d0 	.word	0x200015d0

0800c210 <__ssputs_r>:
 800c210:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c212:	688e      	ldr	r6, [r1, #8]
 800c214:	b085      	sub	sp, #20
 800c216:	0007      	movs	r7, r0
 800c218:	000c      	movs	r4, r1
 800c21a:	9203      	str	r2, [sp, #12]
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	429e      	cmp	r6, r3
 800c220:	d83c      	bhi.n	800c29c <__ssputs_r+0x8c>
 800c222:	2390      	movs	r3, #144	; 0x90
 800c224:	898a      	ldrh	r2, [r1, #12]
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	421a      	tst	r2, r3
 800c22a:	d034      	beq.n	800c296 <__ssputs_r+0x86>
 800c22c:	2503      	movs	r5, #3
 800c22e:	6909      	ldr	r1, [r1, #16]
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	1a5b      	subs	r3, r3, r1
 800c234:	9302      	str	r3, [sp, #8]
 800c236:	6963      	ldr	r3, [r4, #20]
 800c238:	9802      	ldr	r0, [sp, #8]
 800c23a:	435d      	muls	r5, r3
 800c23c:	0feb      	lsrs	r3, r5, #31
 800c23e:	195d      	adds	r5, r3, r5
 800c240:	9b01      	ldr	r3, [sp, #4]
 800c242:	106d      	asrs	r5, r5, #1
 800c244:	3301      	adds	r3, #1
 800c246:	181b      	adds	r3, r3, r0
 800c248:	42ab      	cmp	r3, r5
 800c24a:	d900      	bls.n	800c24e <__ssputs_r+0x3e>
 800c24c:	001d      	movs	r5, r3
 800c24e:	0553      	lsls	r3, r2, #21
 800c250:	d532      	bpl.n	800c2b8 <__ssputs_r+0xa8>
 800c252:	0029      	movs	r1, r5
 800c254:	0038      	movs	r0, r7
 800c256:	f7ff ff3b 	bl	800c0d0 <_malloc_r>
 800c25a:	1e06      	subs	r6, r0, #0
 800c25c:	d109      	bne.n	800c272 <__ssputs_r+0x62>
 800c25e:	230c      	movs	r3, #12
 800c260:	603b      	str	r3, [r7, #0]
 800c262:	2340      	movs	r3, #64	; 0x40
 800c264:	2001      	movs	r0, #1
 800c266:	89a2      	ldrh	r2, [r4, #12]
 800c268:	4240      	negs	r0, r0
 800c26a:	4313      	orrs	r3, r2
 800c26c:	81a3      	strh	r3, [r4, #12]
 800c26e:	b005      	add	sp, #20
 800c270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c272:	9a02      	ldr	r2, [sp, #8]
 800c274:	6921      	ldr	r1, [r4, #16]
 800c276:	f000 fabc 	bl	800c7f2 <memcpy>
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	4a14      	ldr	r2, [pc, #80]	; (800c2d0 <__ssputs_r+0xc0>)
 800c27e:	401a      	ands	r2, r3
 800c280:	2380      	movs	r3, #128	; 0x80
 800c282:	4313      	orrs	r3, r2
 800c284:	81a3      	strh	r3, [r4, #12]
 800c286:	9b02      	ldr	r3, [sp, #8]
 800c288:	6126      	str	r6, [r4, #16]
 800c28a:	18f6      	adds	r6, r6, r3
 800c28c:	6026      	str	r6, [r4, #0]
 800c28e:	6165      	str	r5, [r4, #20]
 800c290:	9e01      	ldr	r6, [sp, #4]
 800c292:	1aed      	subs	r5, r5, r3
 800c294:	60a5      	str	r5, [r4, #8]
 800c296:	9b01      	ldr	r3, [sp, #4]
 800c298:	429e      	cmp	r6, r3
 800c29a:	d900      	bls.n	800c29e <__ssputs_r+0x8e>
 800c29c:	9e01      	ldr	r6, [sp, #4]
 800c29e:	0032      	movs	r2, r6
 800c2a0:	9903      	ldr	r1, [sp, #12]
 800c2a2:	6820      	ldr	r0, [r4, #0]
 800c2a4:	f000 faae 	bl	800c804 <memmove>
 800c2a8:	68a3      	ldr	r3, [r4, #8]
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	1b9b      	subs	r3, r3, r6
 800c2ae:	60a3      	str	r3, [r4, #8]
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	199e      	adds	r6, r3, r6
 800c2b4:	6026      	str	r6, [r4, #0]
 800c2b6:	e7da      	b.n	800c26e <__ssputs_r+0x5e>
 800c2b8:	002a      	movs	r2, r5
 800c2ba:	0038      	movs	r0, r7
 800c2bc:	f000 fab5 	bl	800c82a <_realloc_r>
 800c2c0:	1e06      	subs	r6, r0, #0
 800c2c2:	d1e0      	bne.n	800c286 <__ssputs_r+0x76>
 800c2c4:	0038      	movs	r0, r7
 800c2c6:	6921      	ldr	r1, [r4, #16]
 800c2c8:	f7ff feb8 	bl	800c03c <_free_r>
 800c2cc:	e7c7      	b.n	800c25e <__ssputs_r+0x4e>
 800c2ce:	46c0      	nop			; (mov r8, r8)
 800c2d0:	fffffb7f 	.word	0xfffffb7f

0800c2d4 <_svfiprintf_r>:
 800c2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2d6:	b0a1      	sub	sp, #132	; 0x84
 800c2d8:	9003      	str	r0, [sp, #12]
 800c2da:	001d      	movs	r5, r3
 800c2dc:	898b      	ldrh	r3, [r1, #12]
 800c2de:	000f      	movs	r7, r1
 800c2e0:	0016      	movs	r6, r2
 800c2e2:	061b      	lsls	r3, r3, #24
 800c2e4:	d511      	bpl.n	800c30a <_svfiprintf_r+0x36>
 800c2e6:	690b      	ldr	r3, [r1, #16]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10e      	bne.n	800c30a <_svfiprintf_r+0x36>
 800c2ec:	2140      	movs	r1, #64	; 0x40
 800c2ee:	f7ff feef 	bl	800c0d0 <_malloc_r>
 800c2f2:	6038      	str	r0, [r7, #0]
 800c2f4:	6138      	str	r0, [r7, #16]
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d105      	bne.n	800c306 <_svfiprintf_r+0x32>
 800c2fa:	230c      	movs	r3, #12
 800c2fc:	9a03      	ldr	r2, [sp, #12]
 800c2fe:	3801      	subs	r0, #1
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	b021      	add	sp, #132	; 0x84
 800c304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c306:	2340      	movs	r3, #64	; 0x40
 800c308:	617b      	str	r3, [r7, #20]
 800c30a:	2300      	movs	r3, #0
 800c30c:	ac08      	add	r4, sp, #32
 800c30e:	6163      	str	r3, [r4, #20]
 800c310:	3320      	adds	r3, #32
 800c312:	7663      	strb	r3, [r4, #25]
 800c314:	3310      	adds	r3, #16
 800c316:	76a3      	strb	r3, [r4, #26]
 800c318:	9507      	str	r5, [sp, #28]
 800c31a:	0035      	movs	r5, r6
 800c31c:	782b      	ldrb	r3, [r5, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <_svfiprintf_r+0x52>
 800c322:	2b25      	cmp	r3, #37	; 0x25
 800c324:	d147      	bne.n	800c3b6 <_svfiprintf_r+0xe2>
 800c326:	1bab      	subs	r3, r5, r6
 800c328:	9305      	str	r3, [sp, #20]
 800c32a:	42b5      	cmp	r5, r6
 800c32c:	d00c      	beq.n	800c348 <_svfiprintf_r+0x74>
 800c32e:	0032      	movs	r2, r6
 800c330:	0039      	movs	r1, r7
 800c332:	9803      	ldr	r0, [sp, #12]
 800c334:	f7ff ff6c 	bl	800c210 <__ssputs_r>
 800c338:	1c43      	adds	r3, r0, #1
 800c33a:	d100      	bne.n	800c33e <_svfiprintf_r+0x6a>
 800c33c:	e0ae      	b.n	800c49c <_svfiprintf_r+0x1c8>
 800c33e:	6962      	ldr	r2, [r4, #20]
 800c340:	9b05      	ldr	r3, [sp, #20]
 800c342:	4694      	mov	ip, r2
 800c344:	4463      	add	r3, ip
 800c346:	6163      	str	r3, [r4, #20]
 800c348:	782b      	ldrb	r3, [r5, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d100      	bne.n	800c350 <_svfiprintf_r+0x7c>
 800c34e:	e0a5      	b.n	800c49c <_svfiprintf_r+0x1c8>
 800c350:	2201      	movs	r2, #1
 800c352:	2300      	movs	r3, #0
 800c354:	4252      	negs	r2, r2
 800c356:	6062      	str	r2, [r4, #4]
 800c358:	a904      	add	r1, sp, #16
 800c35a:	3254      	adds	r2, #84	; 0x54
 800c35c:	1852      	adds	r2, r2, r1
 800c35e:	1c6e      	adds	r6, r5, #1
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	60e3      	str	r3, [r4, #12]
 800c364:	60a3      	str	r3, [r4, #8]
 800c366:	7013      	strb	r3, [r2, #0]
 800c368:	65a3      	str	r3, [r4, #88]	; 0x58
 800c36a:	2205      	movs	r2, #5
 800c36c:	7831      	ldrb	r1, [r6, #0]
 800c36e:	4854      	ldr	r0, [pc, #336]	; (800c4c0 <_svfiprintf_r+0x1ec>)
 800c370:	f000 fa34 	bl	800c7dc <memchr>
 800c374:	1c75      	adds	r5, r6, #1
 800c376:	2800      	cmp	r0, #0
 800c378:	d11f      	bne.n	800c3ba <_svfiprintf_r+0xe6>
 800c37a:	6822      	ldr	r2, [r4, #0]
 800c37c:	06d3      	lsls	r3, r2, #27
 800c37e:	d504      	bpl.n	800c38a <_svfiprintf_r+0xb6>
 800c380:	2353      	movs	r3, #83	; 0x53
 800c382:	a904      	add	r1, sp, #16
 800c384:	185b      	adds	r3, r3, r1
 800c386:	2120      	movs	r1, #32
 800c388:	7019      	strb	r1, [r3, #0]
 800c38a:	0713      	lsls	r3, r2, #28
 800c38c:	d504      	bpl.n	800c398 <_svfiprintf_r+0xc4>
 800c38e:	2353      	movs	r3, #83	; 0x53
 800c390:	a904      	add	r1, sp, #16
 800c392:	185b      	adds	r3, r3, r1
 800c394:	212b      	movs	r1, #43	; 0x2b
 800c396:	7019      	strb	r1, [r3, #0]
 800c398:	7833      	ldrb	r3, [r6, #0]
 800c39a:	2b2a      	cmp	r3, #42	; 0x2a
 800c39c:	d016      	beq.n	800c3cc <_svfiprintf_r+0xf8>
 800c39e:	0035      	movs	r5, r6
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	200a      	movs	r0, #10
 800c3a4:	68e3      	ldr	r3, [r4, #12]
 800c3a6:	782a      	ldrb	r2, [r5, #0]
 800c3a8:	1c6e      	adds	r6, r5, #1
 800c3aa:	3a30      	subs	r2, #48	; 0x30
 800c3ac:	2a09      	cmp	r2, #9
 800c3ae:	d94e      	bls.n	800c44e <_svfiprintf_r+0x17a>
 800c3b0:	2900      	cmp	r1, #0
 800c3b2:	d111      	bne.n	800c3d8 <_svfiprintf_r+0x104>
 800c3b4:	e017      	b.n	800c3e6 <_svfiprintf_r+0x112>
 800c3b6:	3501      	adds	r5, #1
 800c3b8:	e7b0      	b.n	800c31c <_svfiprintf_r+0x48>
 800c3ba:	4b41      	ldr	r3, [pc, #260]	; (800c4c0 <_svfiprintf_r+0x1ec>)
 800c3bc:	6822      	ldr	r2, [r4, #0]
 800c3be:	1ac0      	subs	r0, r0, r3
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	4083      	lsls	r3, r0
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	002e      	movs	r6, r5
 800c3c8:	6023      	str	r3, [r4, #0]
 800c3ca:	e7ce      	b.n	800c36a <_svfiprintf_r+0x96>
 800c3cc:	9b07      	ldr	r3, [sp, #28]
 800c3ce:	1d19      	adds	r1, r3, #4
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	9107      	str	r1, [sp, #28]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	db01      	blt.n	800c3dc <_svfiprintf_r+0x108>
 800c3d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3da:	e004      	b.n	800c3e6 <_svfiprintf_r+0x112>
 800c3dc:	425b      	negs	r3, r3
 800c3de:	60e3      	str	r3, [r4, #12]
 800c3e0:	2302      	movs	r3, #2
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	782b      	ldrb	r3, [r5, #0]
 800c3e8:	2b2e      	cmp	r3, #46	; 0x2e
 800c3ea:	d10a      	bne.n	800c402 <_svfiprintf_r+0x12e>
 800c3ec:	786b      	ldrb	r3, [r5, #1]
 800c3ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c3f0:	d135      	bne.n	800c45e <_svfiprintf_r+0x18a>
 800c3f2:	9b07      	ldr	r3, [sp, #28]
 800c3f4:	3502      	adds	r5, #2
 800c3f6:	1d1a      	adds	r2, r3, #4
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	9207      	str	r2, [sp, #28]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	db2b      	blt.n	800c458 <_svfiprintf_r+0x184>
 800c400:	9309      	str	r3, [sp, #36]	; 0x24
 800c402:	4e30      	ldr	r6, [pc, #192]	; (800c4c4 <_svfiprintf_r+0x1f0>)
 800c404:	2203      	movs	r2, #3
 800c406:	0030      	movs	r0, r6
 800c408:	7829      	ldrb	r1, [r5, #0]
 800c40a:	f000 f9e7 	bl	800c7dc <memchr>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d006      	beq.n	800c420 <_svfiprintf_r+0x14c>
 800c412:	2340      	movs	r3, #64	; 0x40
 800c414:	1b80      	subs	r0, r0, r6
 800c416:	4083      	lsls	r3, r0
 800c418:	6822      	ldr	r2, [r4, #0]
 800c41a:	3501      	adds	r5, #1
 800c41c:	4313      	orrs	r3, r2
 800c41e:	6023      	str	r3, [r4, #0]
 800c420:	7829      	ldrb	r1, [r5, #0]
 800c422:	2206      	movs	r2, #6
 800c424:	4828      	ldr	r0, [pc, #160]	; (800c4c8 <_svfiprintf_r+0x1f4>)
 800c426:	1c6e      	adds	r6, r5, #1
 800c428:	7621      	strb	r1, [r4, #24]
 800c42a:	f000 f9d7 	bl	800c7dc <memchr>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d03c      	beq.n	800c4ac <_svfiprintf_r+0x1d8>
 800c432:	4b26      	ldr	r3, [pc, #152]	; (800c4cc <_svfiprintf_r+0x1f8>)
 800c434:	2b00      	cmp	r3, #0
 800c436:	d125      	bne.n	800c484 <_svfiprintf_r+0x1b0>
 800c438:	2207      	movs	r2, #7
 800c43a:	9b07      	ldr	r3, [sp, #28]
 800c43c:	3307      	adds	r3, #7
 800c43e:	4393      	bics	r3, r2
 800c440:	3308      	adds	r3, #8
 800c442:	9307      	str	r3, [sp, #28]
 800c444:	6963      	ldr	r3, [r4, #20]
 800c446:	9a04      	ldr	r2, [sp, #16]
 800c448:	189b      	adds	r3, r3, r2
 800c44a:	6163      	str	r3, [r4, #20]
 800c44c:	e765      	b.n	800c31a <_svfiprintf_r+0x46>
 800c44e:	4343      	muls	r3, r0
 800c450:	0035      	movs	r5, r6
 800c452:	2101      	movs	r1, #1
 800c454:	189b      	adds	r3, r3, r2
 800c456:	e7a6      	b.n	800c3a6 <_svfiprintf_r+0xd2>
 800c458:	2301      	movs	r3, #1
 800c45a:	425b      	negs	r3, r3
 800c45c:	e7d0      	b.n	800c400 <_svfiprintf_r+0x12c>
 800c45e:	2300      	movs	r3, #0
 800c460:	200a      	movs	r0, #10
 800c462:	001a      	movs	r2, r3
 800c464:	3501      	adds	r5, #1
 800c466:	6063      	str	r3, [r4, #4]
 800c468:	7829      	ldrb	r1, [r5, #0]
 800c46a:	1c6e      	adds	r6, r5, #1
 800c46c:	3930      	subs	r1, #48	; 0x30
 800c46e:	2909      	cmp	r1, #9
 800c470:	d903      	bls.n	800c47a <_svfiprintf_r+0x1a6>
 800c472:	2b00      	cmp	r3, #0
 800c474:	d0c5      	beq.n	800c402 <_svfiprintf_r+0x12e>
 800c476:	9209      	str	r2, [sp, #36]	; 0x24
 800c478:	e7c3      	b.n	800c402 <_svfiprintf_r+0x12e>
 800c47a:	4342      	muls	r2, r0
 800c47c:	0035      	movs	r5, r6
 800c47e:	2301      	movs	r3, #1
 800c480:	1852      	adds	r2, r2, r1
 800c482:	e7f1      	b.n	800c468 <_svfiprintf_r+0x194>
 800c484:	ab07      	add	r3, sp, #28
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	003a      	movs	r2, r7
 800c48a:	0021      	movs	r1, r4
 800c48c:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <_svfiprintf_r+0x1fc>)
 800c48e:	9803      	ldr	r0, [sp, #12]
 800c490:	e000      	b.n	800c494 <_svfiprintf_r+0x1c0>
 800c492:	bf00      	nop
 800c494:	9004      	str	r0, [sp, #16]
 800c496:	9b04      	ldr	r3, [sp, #16]
 800c498:	3301      	adds	r3, #1
 800c49a:	d1d3      	bne.n	800c444 <_svfiprintf_r+0x170>
 800c49c:	89bb      	ldrh	r3, [r7, #12]
 800c49e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c4a0:	065b      	lsls	r3, r3, #25
 800c4a2:	d400      	bmi.n	800c4a6 <_svfiprintf_r+0x1d2>
 800c4a4:	e72d      	b.n	800c302 <_svfiprintf_r+0x2e>
 800c4a6:	2001      	movs	r0, #1
 800c4a8:	4240      	negs	r0, r0
 800c4aa:	e72a      	b.n	800c302 <_svfiprintf_r+0x2e>
 800c4ac:	ab07      	add	r3, sp, #28
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	003a      	movs	r2, r7
 800c4b2:	0021      	movs	r1, r4
 800c4b4:	4b06      	ldr	r3, [pc, #24]	; (800c4d0 <_svfiprintf_r+0x1fc>)
 800c4b6:	9803      	ldr	r0, [sp, #12]
 800c4b8:	f000 f87c 	bl	800c5b4 <_printf_i>
 800c4bc:	e7ea      	b.n	800c494 <_svfiprintf_r+0x1c0>
 800c4be:	46c0      	nop			; (mov r8, r8)
 800c4c0:	0800ca7c 	.word	0x0800ca7c
 800c4c4:	0800ca82 	.word	0x0800ca82
 800c4c8:	0800ca86 	.word	0x0800ca86
 800c4cc:	00000000 	.word	0x00000000
 800c4d0:	0800c211 	.word	0x0800c211

0800c4d4 <_printf_common>:
 800c4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4d6:	0015      	movs	r5, r2
 800c4d8:	9301      	str	r3, [sp, #4]
 800c4da:	688a      	ldr	r2, [r1, #8]
 800c4dc:	690b      	ldr	r3, [r1, #16]
 800c4de:	000c      	movs	r4, r1
 800c4e0:	9000      	str	r0, [sp, #0]
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	da00      	bge.n	800c4e8 <_printf_common+0x14>
 800c4e6:	0013      	movs	r3, r2
 800c4e8:	0022      	movs	r2, r4
 800c4ea:	602b      	str	r3, [r5, #0]
 800c4ec:	3243      	adds	r2, #67	; 0x43
 800c4ee:	7812      	ldrb	r2, [r2, #0]
 800c4f0:	2a00      	cmp	r2, #0
 800c4f2:	d001      	beq.n	800c4f8 <_printf_common+0x24>
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	602b      	str	r3, [r5, #0]
 800c4f8:	6823      	ldr	r3, [r4, #0]
 800c4fa:	069b      	lsls	r3, r3, #26
 800c4fc:	d502      	bpl.n	800c504 <_printf_common+0x30>
 800c4fe:	682b      	ldr	r3, [r5, #0]
 800c500:	3302      	adds	r3, #2
 800c502:	602b      	str	r3, [r5, #0]
 800c504:	6822      	ldr	r2, [r4, #0]
 800c506:	2306      	movs	r3, #6
 800c508:	0017      	movs	r7, r2
 800c50a:	401f      	ands	r7, r3
 800c50c:	421a      	tst	r2, r3
 800c50e:	d027      	beq.n	800c560 <_printf_common+0x8c>
 800c510:	0023      	movs	r3, r4
 800c512:	3343      	adds	r3, #67	; 0x43
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	1e5a      	subs	r2, r3, #1
 800c518:	4193      	sbcs	r3, r2
 800c51a:	6822      	ldr	r2, [r4, #0]
 800c51c:	0692      	lsls	r2, r2, #26
 800c51e:	d430      	bmi.n	800c582 <_printf_common+0xae>
 800c520:	0022      	movs	r2, r4
 800c522:	9901      	ldr	r1, [sp, #4]
 800c524:	9800      	ldr	r0, [sp, #0]
 800c526:	9e08      	ldr	r6, [sp, #32]
 800c528:	3243      	adds	r2, #67	; 0x43
 800c52a:	47b0      	blx	r6
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d025      	beq.n	800c57c <_printf_common+0xa8>
 800c530:	2306      	movs	r3, #6
 800c532:	6820      	ldr	r0, [r4, #0]
 800c534:	682a      	ldr	r2, [r5, #0]
 800c536:	68e1      	ldr	r1, [r4, #12]
 800c538:	2500      	movs	r5, #0
 800c53a:	4003      	ands	r3, r0
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	d103      	bne.n	800c548 <_printf_common+0x74>
 800c540:	1a8d      	subs	r5, r1, r2
 800c542:	43eb      	mvns	r3, r5
 800c544:	17db      	asrs	r3, r3, #31
 800c546:	401d      	ands	r5, r3
 800c548:	68a3      	ldr	r3, [r4, #8]
 800c54a:	6922      	ldr	r2, [r4, #16]
 800c54c:	4293      	cmp	r3, r2
 800c54e:	dd01      	ble.n	800c554 <_printf_common+0x80>
 800c550:	1a9b      	subs	r3, r3, r2
 800c552:	18ed      	adds	r5, r5, r3
 800c554:	2700      	movs	r7, #0
 800c556:	42bd      	cmp	r5, r7
 800c558:	d120      	bne.n	800c59c <_printf_common+0xc8>
 800c55a:	2000      	movs	r0, #0
 800c55c:	e010      	b.n	800c580 <_printf_common+0xac>
 800c55e:	3701      	adds	r7, #1
 800c560:	68e3      	ldr	r3, [r4, #12]
 800c562:	682a      	ldr	r2, [r5, #0]
 800c564:	1a9b      	subs	r3, r3, r2
 800c566:	42bb      	cmp	r3, r7
 800c568:	ddd2      	ble.n	800c510 <_printf_common+0x3c>
 800c56a:	0022      	movs	r2, r4
 800c56c:	2301      	movs	r3, #1
 800c56e:	9901      	ldr	r1, [sp, #4]
 800c570:	9800      	ldr	r0, [sp, #0]
 800c572:	9e08      	ldr	r6, [sp, #32]
 800c574:	3219      	adds	r2, #25
 800c576:	47b0      	blx	r6
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d1f0      	bne.n	800c55e <_printf_common+0x8a>
 800c57c:	2001      	movs	r0, #1
 800c57e:	4240      	negs	r0, r0
 800c580:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c582:	2030      	movs	r0, #48	; 0x30
 800c584:	18e1      	adds	r1, r4, r3
 800c586:	3143      	adds	r1, #67	; 0x43
 800c588:	7008      	strb	r0, [r1, #0]
 800c58a:	0021      	movs	r1, r4
 800c58c:	1c5a      	adds	r2, r3, #1
 800c58e:	3145      	adds	r1, #69	; 0x45
 800c590:	7809      	ldrb	r1, [r1, #0]
 800c592:	18a2      	adds	r2, r4, r2
 800c594:	3243      	adds	r2, #67	; 0x43
 800c596:	3302      	adds	r3, #2
 800c598:	7011      	strb	r1, [r2, #0]
 800c59a:	e7c1      	b.n	800c520 <_printf_common+0x4c>
 800c59c:	0022      	movs	r2, r4
 800c59e:	2301      	movs	r3, #1
 800c5a0:	9901      	ldr	r1, [sp, #4]
 800c5a2:	9800      	ldr	r0, [sp, #0]
 800c5a4:	9e08      	ldr	r6, [sp, #32]
 800c5a6:	321a      	adds	r2, #26
 800c5a8:	47b0      	blx	r6
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	d0e6      	beq.n	800c57c <_printf_common+0xa8>
 800c5ae:	3701      	adds	r7, #1
 800c5b0:	e7d1      	b.n	800c556 <_printf_common+0x82>
	...

0800c5b4 <_printf_i>:
 800c5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5b6:	b08b      	sub	sp, #44	; 0x2c
 800c5b8:	9206      	str	r2, [sp, #24]
 800c5ba:	000a      	movs	r2, r1
 800c5bc:	3243      	adds	r2, #67	; 0x43
 800c5be:	9307      	str	r3, [sp, #28]
 800c5c0:	9005      	str	r0, [sp, #20]
 800c5c2:	9204      	str	r2, [sp, #16]
 800c5c4:	7e0a      	ldrb	r2, [r1, #24]
 800c5c6:	000c      	movs	r4, r1
 800c5c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5ca:	2a78      	cmp	r2, #120	; 0x78
 800c5cc:	d806      	bhi.n	800c5dc <_printf_i+0x28>
 800c5ce:	2a62      	cmp	r2, #98	; 0x62
 800c5d0:	d808      	bhi.n	800c5e4 <_printf_i+0x30>
 800c5d2:	2a00      	cmp	r2, #0
 800c5d4:	d100      	bne.n	800c5d8 <_printf_i+0x24>
 800c5d6:	e0c0      	b.n	800c75a <_printf_i+0x1a6>
 800c5d8:	2a58      	cmp	r2, #88	; 0x58
 800c5da:	d052      	beq.n	800c682 <_printf_i+0xce>
 800c5dc:	0026      	movs	r6, r4
 800c5de:	3642      	adds	r6, #66	; 0x42
 800c5e0:	7032      	strb	r2, [r6, #0]
 800c5e2:	e022      	b.n	800c62a <_printf_i+0x76>
 800c5e4:	0010      	movs	r0, r2
 800c5e6:	3863      	subs	r0, #99	; 0x63
 800c5e8:	2815      	cmp	r0, #21
 800c5ea:	d8f7      	bhi.n	800c5dc <_printf_i+0x28>
 800c5ec:	f7f3 fd94 	bl	8000118 <__gnu_thumb1_case_shi>
 800c5f0:	001f0016 	.word	0x001f0016
 800c5f4:	fff6fff6 	.word	0xfff6fff6
 800c5f8:	fff6fff6 	.word	0xfff6fff6
 800c5fc:	fff6001f 	.word	0xfff6001f
 800c600:	fff6fff6 	.word	0xfff6fff6
 800c604:	00a8fff6 	.word	0x00a8fff6
 800c608:	009a0036 	.word	0x009a0036
 800c60c:	fff6fff6 	.word	0xfff6fff6
 800c610:	fff600b9 	.word	0xfff600b9
 800c614:	fff60036 	.word	0xfff60036
 800c618:	009efff6 	.word	0x009efff6
 800c61c:	0026      	movs	r6, r4
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	3642      	adds	r6, #66	; 0x42
 800c622:	1d11      	adds	r1, r2, #4
 800c624:	6019      	str	r1, [r3, #0]
 800c626:	6813      	ldr	r3, [r2, #0]
 800c628:	7033      	strb	r3, [r6, #0]
 800c62a:	2301      	movs	r3, #1
 800c62c:	e0a7      	b.n	800c77e <_printf_i+0x1ca>
 800c62e:	6808      	ldr	r0, [r1, #0]
 800c630:	6819      	ldr	r1, [r3, #0]
 800c632:	1d0a      	adds	r2, r1, #4
 800c634:	0605      	lsls	r5, r0, #24
 800c636:	d50b      	bpl.n	800c650 <_printf_i+0x9c>
 800c638:	680d      	ldr	r5, [r1, #0]
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	2d00      	cmp	r5, #0
 800c63e:	da03      	bge.n	800c648 <_printf_i+0x94>
 800c640:	232d      	movs	r3, #45	; 0x2d
 800c642:	9a04      	ldr	r2, [sp, #16]
 800c644:	426d      	negs	r5, r5
 800c646:	7013      	strb	r3, [r2, #0]
 800c648:	4b61      	ldr	r3, [pc, #388]	; (800c7d0 <_printf_i+0x21c>)
 800c64a:	270a      	movs	r7, #10
 800c64c:	9303      	str	r3, [sp, #12]
 800c64e:	e032      	b.n	800c6b6 <_printf_i+0x102>
 800c650:	680d      	ldr	r5, [r1, #0]
 800c652:	601a      	str	r2, [r3, #0]
 800c654:	0641      	lsls	r1, r0, #25
 800c656:	d5f1      	bpl.n	800c63c <_printf_i+0x88>
 800c658:	b22d      	sxth	r5, r5
 800c65a:	e7ef      	b.n	800c63c <_printf_i+0x88>
 800c65c:	680d      	ldr	r5, [r1, #0]
 800c65e:	6819      	ldr	r1, [r3, #0]
 800c660:	1d08      	adds	r0, r1, #4
 800c662:	6018      	str	r0, [r3, #0]
 800c664:	062e      	lsls	r6, r5, #24
 800c666:	d501      	bpl.n	800c66c <_printf_i+0xb8>
 800c668:	680d      	ldr	r5, [r1, #0]
 800c66a:	e003      	b.n	800c674 <_printf_i+0xc0>
 800c66c:	066d      	lsls	r5, r5, #25
 800c66e:	d5fb      	bpl.n	800c668 <_printf_i+0xb4>
 800c670:	680d      	ldr	r5, [r1, #0]
 800c672:	b2ad      	uxth	r5, r5
 800c674:	4b56      	ldr	r3, [pc, #344]	; (800c7d0 <_printf_i+0x21c>)
 800c676:	270a      	movs	r7, #10
 800c678:	9303      	str	r3, [sp, #12]
 800c67a:	2a6f      	cmp	r2, #111	; 0x6f
 800c67c:	d117      	bne.n	800c6ae <_printf_i+0xfa>
 800c67e:	2708      	movs	r7, #8
 800c680:	e015      	b.n	800c6ae <_printf_i+0xfa>
 800c682:	3145      	adds	r1, #69	; 0x45
 800c684:	700a      	strb	r2, [r1, #0]
 800c686:	4a52      	ldr	r2, [pc, #328]	; (800c7d0 <_printf_i+0x21c>)
 800c688:	9203      	str	r2, [sp, #12]
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	6821      	ldr	r1, [r4, #0]
 800c68e:	ca20      	ldmia	r2!, {r5}
 800c690:	601a      	str	r2, [r3, #0]
 800c692:	0608      	lsls	r0, r1, #24
 800c694:	d550      	bpl.n	800c738 <_printf_i+0x184>
 800c696:	07cb      	lsls	r3, r1, #31
 800c698:	d502      	bpl.n	800c6a0 <_printf_i+0xec>
 800c69a:	2320      	movs	r3, #32
 800c69c:	4319      	orrs	r1, r3
 800c69e:	6021      	str	r1, [r4, #0]
 800c6a0:	2710      	movs	r7, #16
 800c6a2:	2d00      	cmp	r5, #0
 800c6a4:	d103      	bne.n	800c6ae <_printf_i+0xfa>
 800c6a6:	2320      	movs	r3, #32
 800c6a8:	6822      	ldr	r2, [r4, #0]
 800c6aa:	439a      	bics	r2, r3
 800c6ac:	6022      	str	r2, [r4, #0]
 800c6ae:	0023      	movs	r3, r4
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	3343      	adds	r3, #67	; 0x43
 800c6b4:	701a      	strb	r2, [r3, #0]
 800c6b6:	6863      	ldr	r3, [r4, #4]
 800c6b8:	60a3      	str	r3, [r4, #8]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	db03      	blt.n	800c6c6 <_printf_i+0x112>
 800c6be:	2204      	movs	r2, #4
 800c6c0:	6821      	ldr	r1, [r4, #0]
 800c6c2:	4391      	bics	r1, r2
 800c6c4:	6021      	str	r1, [r4, #0]
 800c6c6:	2d00      	cmp	r5, #0
 800c6c8:	d102      	bne.n	800c6d0 <_printf_i+0x11c>
 800c6ca:	9e04      	ldr	r6, [sp, #16]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00c      	beq.n	800c6ea <_printf_i+0x136>
 800c6d0:	9e04      	ldr	r6, [sp, #16]
 800c6d2:	0028      	movs	r0, r5
 800c6d4:	0039      	movs	r1, r7
 800c6d6:	f7f3 fdaf 	bl	8000238 <__aeabi_uidivmod>
 800c6da:	9b03      	ldr	r3, [sp, #12]
 800c6dc:	3e01      	subs	r6, #1
 800c6de:	5c5b      	ldrb	r3, [r3, r1]
 800c6e0:	7033      	strb	r3, [r6, #0]
 800c6e2:	002b      	movs	r3, r5
 800c6e4:	0005      	movs	r5, r0
 800c6e6:	429f      	cmp	r7, r3
 800c6e8:	d9f3      	bls.n	800c6d2 <_printf_i+0x11e>
 800c6ea:	2f08      	cmp	r7, #8
 800c6ec:	d109      	bne.n	800c702 <_printf_i+0x14e>
 800c6ee:	6823      	ldr	r3, [r4, #0]
 800c6f0:	07db      	lsls	r3, r3, #31
 800c6f2:	d506      	bpl.n	800c702 <_printf_i+0x14e>
 800c6f4:	6863      	ldr	r3, [r4, #4]
 800c6f6:	6922      	ldr	r2, [r4, #16]
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	dc02      	bgt.n	800c702 <_printf_i+0x14e>
 800c6fc:	2330      	movs	r3, #48	; 0x30
 800c6fe:	3e01      	subs	r6, #1
 800c700:	7033      	strb	r3, [r6, #0]
 800c702:	9b04      	ldr	r3, [sp, #16]
 800c704:	1b9b      	subs	r3, r3, r6
 800c706:	6123      	str	r3, [r4, #16]
 800c708:	9b07      	ldr	r3, [sp, #28]
 800c70a:	0021      	movs	r1, r4
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	9805      	ldr	r0, [sp, #20]
 800c710:	9b06      	ldr	r3, [sp, #24]
 800c712:	aa09      	add	r2, sp, #36	; 0x24
 800c714:	f7ff fede 	bl	800c4d4 <_printf_common>
 800c718:	1c43      	adds	r3, r0, #1
 800c71a:	d135      	bne.n	800c788 <_printf_i+0x1d4>
 800c71c:	2001      	movs	r0, #1
 800c71e:	4240      	negs	r0, r0
 800c720:	b00b      	add	sp, #44	; 0x2c
 800c722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c724:	2220      	movs	r2, #32
 800c726:	6809      	ldr	r1, [r1, #0]
 800c728:	430a      	orrs	r2, r1
 800c72a:	6022      	str	r2, [r4, #0]
 800c72c:	0022      	movs	r2, r4
 800c72e:	2178      	movs	r1, #120	; 0x78
 800c730:	3245      	adds	r2, #69	; 0x45
 800c732:	7011      	strb	r1, [r2, #0]
 800c734:	4a27      	ldr	r2, [pc, #156]	; (800c7d4 <_printf_i+0x220>)
 800c736:	e7a7      	b.n	800c688 <_printf_i+0xd4>
 800c738:	0648      	lsls	r0, r1, #25
 800c73a:	d5ac      	bpl.n	800c696 <_printf_i+0xe2>
 800c73c:	b2ad      	uxth	r5, r5
 800c73e:	e7aa      	b.n	800c696 <_printf_i+0xe2>
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	680d      	ldr	r5, [r1, #0]
 800c744:	1d10      	adds	r0, r2, #4
 800c746:	6949      	ldr	r1, [r1, #20]
 800c748:	6018      	str	r0, [r3, #0]
 800c74a:	6813      	ldr	r3, [r2, #0]
 800c74c:	062e      	lsls	r6, r5, #24
 800c74e:	d501      	bpl.n	800c754 <_printf_i+0x1a0>
 800c750:	6019      	str	r1, [r3, #0]
 800c752:	e002      	b.n	800c75a <_printf_i+0x1a6>
 800c754:	066d      	lsls	r5, r5, #25
 800c756:	d5fb      	bpl.n	800c750 <_printf_i+0x19c>
 800c758:	8019      	strh	r1, [r3, #0]
 800c75a:	2300      	movs	r3, #0
 800c75c:	9e04      	ldr	r6, [sp, #16]
 800c75e:	6123      	str	r3, [r4, #16]
 800c760:	e7d2      	b.n	800c708 <_printf_i+0x154>
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	1d11      	adds	r1, r2, #4
 800c766:	6019      	str	r1, [r3, #0]
 800c768:	6816      	ldr	r6, [r2, #0]
 800c76a:	2100      	movs	r1, #0
 800c76c:	0030      	movs	r0, r6
 800c76e:	6862      	ldr	r2, [r4, #4]
 800c770:	f000 f834 	bl	800c7dc <memchr>
 800c774:	2800      	cmp	r0, #0
 800c776:	d001      	beq.n	800c77c <_printf_i+0x1c8>
 800c778:	1b80      	subs	r0, r0, r6
 800c77a:	6060      	str	r0, [r4, #4]
 800c77c:	6863      	ldr	r3, [r4, #4]
 800c77e:	6123      	str	r3, [r4, #16]
 800c780:	2300      	movs	r3, #0
 800c782:	9a04      	ldr	r2, [sp, #16]
 800c784:	7013      	strb	r3, [r2, #0]
 800c786:	e7bf      	b.n	800c708 <_printf_i+0x154>
 800c788:	6923      	ldr	r3, [r4, #16]
 800c78a:	0032      	movs	r2, r6
 800c78c:	9906      	ldr	r1, [sp, #24]
 800c78e:	9805      	ldr	r0, [sp, #20]
 800c790:	9d07      	ldr	r5, [sp, #28]
 800c792:	47a8      	blx	r5
 800c794:	1c43      	adds	r3, r0, #1
 800c796:	d0c1      	beq.n	800c71c <_printf_i+0x168>
 800c798:	6823      	ldr	r3, [r4, #0]
 800c79a:	079b      	lsls	r3, r3, #30
 800c79c:	d415      	bmi.n	800c7ca <_printf_i+0x216>
 800c79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7a0:	68e0      	ldr	r0, [r4, #12]
 800c7a2:	4298      	cmp	r0, r3
 800c7a4:	dabc      	bge.n	800c720 <_printf_i+0x16c>
 800c7a6:	0018      	movs	r0, r3
 800c7a8:	e7ba      	b.n	800c720 <_printf_i+0x16c>
 800c7aa:	0022      	movs	r2, r4
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	9906      	ldr	r1, [sp, #24]
 800c7b0:	9805      	ldr	r0, [sp, #20]
 800c7b2:	9e07      	ldr	r6, [sp, #28]
 800c7b4:	3219      	adds	r2, #25
 800c7b6:	47b0      	blx	r6
 800c7b8:	1c43      	adds	r3, r0, #1
 800c7ba:	d0af      	beq.n	800c71c <_printf_i+0x168>
 800c7bc:	3501      	adds	r5, #1
 800c7be:	68e3      	ldr	r3, [r4, #12]
 800c7c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7c2:	1a9b      	subs	r3, r3, r2
 800c7c4:	42ab      	cmp	r3, r5
 800c7c6:	dcf0      	bgt.n	800c7aa <_printf_i+0x1f6>
 800c7c8:	e7e9      	b.n	800c79e <_printf_i+0x1ea>
 800c7ca:	2500      	movs	r5, #0
 800c7cc:	e7f7      	b.n	800c7be <_printf_i+0x20a>
 800c7ce:	46c0      	nop			; (mov r8, r8)
 800c7d0:	0800ca8d 	.word	0x0800ca8d
 800c7d4:	0800ca9e 	.word	0x0800ca9e

0800c7d8 <__retarget_lock_acquire_recursive>:
 800c7d8:	4770      	bx	lr

0800c7da <__retarget_lock_release_recursive>:
 800c7da:	4770      	bx	lr

0800c7dc <memchr>:
 800c7dc:	b2c9      	uxtb	r1, r1
 800c7de:	1882      	adds	r2, r0, r2
 800c7e0:	4290      	cmp	r0, r2
 800c7e2:	d101      	bne.n	800c7e8 <memchr+0xc>
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	4770      	bx	lr
 800c7e8:	7803      	ldrb	r3, [r0, #0]
 800c7ea:	428b      	cmp	r3, r1
 800c7ec:	d0fb      	beq.n	800c7e6 <memchr+0xa>
 800c7ee:	3001      	adds	r0, #1
 800c7f0:	e7f6      	b.n	800c7e0 <memchr+0x4>

0800c7f2 <memcpy>:
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	b510      	push	{r4, lr}
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d100      	bne.n	800c7fc <memcpy+0xa>
 800c7fa:	bd10      	pop	{r4, pc}
 800c7fc:	5ccc      	ldrb	r4, [r1, r3]
 800c7fe:	54c4      	strb	r4, [r0, r3]
 800c800:	3301      	adds	r3, #1
 800c802:	e7f8      	b.n	800c7f6 <memcpy+0x4>

0800c804 <memmove>:
 800c804:	b510      	push	{r4, lr}
 800c806:	4288      	cmp	r0, r1
 800c808:	d902      	bls.n	800c810 <memmove+0xc>
 800c80a:	188b      	adds	r3, r1, r2
 800c80c:	4298      	cmp	r0, r3
 800c80e:	d303      	bcc.n	800c818 <memmove+0x14>
 800c810:	2300      	movs	r3, #0
 800c812:	e007      	b.n	800c824 <memmove+0x20>
 800c814:	5c8b      	ldrb	r3, [r1, r2]
 800c816:	5483      	strb	r3, [r0, r2]
 800c818:	3a01      	subs	r2, #1
 800c81a:	d2fb      	bcs.n	800c814 <memmove+0x10>
 800c81c:	bd10      	pop	{r4, pc}
 800c81e:	5ccc      	ldrb	r4, [r1, r3]
 800c820:	54c4      	strb	r4, [r0, r3]
 800c822:	3301      	adds	r3, #1
 800c824:	429a      	cmp	r2, r3
 800c826:	d1fa      	bne.n	800c81e <memmove+0x1a>
 800c828:	e7f8      	b.n	800c81c <memmove+0x18>

0800c82a <_realloc_r>:
 800c82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82c:	0007      	movs	r7, r0
 800c82e:	000d      	movs	r5, r1
 800c830:	0016      	movs	r6, r2
 800c832:	2900      	cmp	r1, #0
 800c834:	d105      	bne.n	800c842 <_realloc_r+0x18>
 800c836:	0011      	movs	r1, r2
 800c838:	f7ff fc4a 	bl	800c0d0 <_malloc_r>
 800c83c:	0004      	movs	r4, r0
 800c83e:	0020      	movs	r0, r4
 800c840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c842:	2a00      	cmp	r2, #0
 800c844:	d103      	bne.n	800c84e <_realloc_r+0x24>
 800c846:	f7ff fbf9 	bl	800c03c <_free_r>
 800c84a:	0034      	movs	r4, r6
 800c84c:	e7f7      	b.n	800c83e <_realloc_r+0x14>
 800c84e:	f000 f812 	bl	800c876 <_malloc_usable_size_r>
 800c852:	002c      	movs	r4, r5
 800c854:	42b0      	cmp	r0, r6
 800c856:	d2f2      	bcs.n	800c83e <_realloc_r+0x14>
 800c858:	0031      	movs	r1, r6
 800c85a:	0038      	movs	r0, r7
 800c85c:	f7ff fc38 	bl	800c0d0 <_malloc_r>
 800c860:	1e04      	subs	r4, r0, #0
 800c862:	d0ec      	beq.n	800c83e <_realloc_r+0x14>
 800c864:	0029      	movs	r1, r5
 800c866:	0032      	movs	r2, r6
 800c868:	f7ff ffc3 	bl	800c7f2 <memcpy>
 800c86c:	0029      	movs	r1, r5
 800c86e:	0038      	movs	r0, r7
 800c870:	f7ff fbe4 	bl	800c03c <_free_r>
 800c874:	e7e3      	b.n	800c83e <_realloc_r+0x14>

0800c876 <_malloc_usable_size_r>:
 800c876:	1f0b      	subs	r3, r1, #4
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	1f18      	subs	r0, r3, #4
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	da01      	bge.n	800c884 <_malloc_usable_size_r+0xe>
 800c880:	580b      	ldr	r3, [r1, r0]
 800c882:	18c0      	adds	r0, r0, r3
 800c884:	4770      	bx	lr
	...

0800c888 <_init>:
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88a:	46c0      	nop			; (mov r8, r8)
 800c88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c88e:	bc08      	pop	{r3}
 800c890:	469e      	mov	lr, r3
 800c892:	4770      	bx	lr

0800c894 <_fini>:
 800c894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c896:	46c0      	nop			; (mov r8, r8)
 800c898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c89a:	bc08      	pop	{r3}
 800c89c:	469e      	mov	lr, r3
 800c89e:	4770      	bx	lr
