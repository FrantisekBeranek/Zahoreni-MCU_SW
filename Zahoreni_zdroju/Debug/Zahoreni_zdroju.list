
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800d1ac  0800d1ac  0001d1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d41c  0800d41c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d41c  0800d41c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d41c  0800d41c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d41c  0800d41c  0001d41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d420  0800d420  0001d420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  200001e0  0800d604  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001640  0800d604  00021640  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bd70  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005183  00000000  00000000  0004bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00051100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  00052868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002071e  00000000  00000000  00053de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020997  00000000  00000000  00074506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4715  00000000  00000000  00094e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001395b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  00139608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d194 	.word	0x0800d194

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800d194 	.word	0x0800d194

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	46c6      	mov	lr, r8
 800041c:	b500      	push	{lr}
 800041e:	b0a2      	sub	sp, #136	; 0x88
 8000420:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 8000422:	4bc0      	ldr	r3, [pc, #768]	; (8000724 <comHandler+0x30c>)
 8000424:	7a1b      	ldrb	r3, [r3, #8]
 8000426:	2201      	movs	r2, #1
 8000428:	4013      	ands	r3, r2
 800042a:	b2db      	uxtb	r3, r3
 800042c:	2b00      	cmp	r3, #0
 800042e:	d042      	beq.n	80004b6 <comHandler+0x9e>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000430:	e02e      	b.n	8000490 <comHandler+0x78>
		{
#ifdef __DEBUG_INST__
			uint8_t txt[30];
#endif

			switch(instruction)
 8000432:	235f      	movs	r3, #95	; 0x5f
 8000434:	2218      	movs	r2, #24
 8000436:	4694      	mov	ip, r2
 8000438:	44bc      	add	ip, r7
 800043a:	4463      	add	r3, ip
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b73      	cmp	r3, #115	; 0x73
 8000440:	d008      	beq.n	8000454 <comHandler+0x3c>
 8000442:	dc1f      	bgt.n	8000484 <comHandler+0x6c>
 8000444:	2b70      	cmp	r3, #112	; 0x70
 8000446:	d011      	beq.n	800046c <comHandler+0x54>
 8000448:	dc1c      	bgt.n	8000484 <comHandler+0x6c>
 800044a:	2b63      	cmp	r3, #99	; 0x63
 800044c:	d008      	beq.n	8000460 <comHandler+0x48>
 800044e:	2b6b      	cmp	r3, #107	; 0x6b
 8000450:	d012      	beq.n	8000478 <comHandler+0x60>
 8000452:	e017      	b.n	8000484 <comHandler+0x6c>
			{
			case 's': ;
				//___Start testu___//
				flags.instructions.startRequest = 1;
 8000454:	4bb3      	ldr	r3, [pc, #716]	; (8000724 <comHandler+0x30c>)
 8000456:	7b1a      	ldrb	r2, [r3, #12]
 8000458:	2101      	movs	r1, #1
 800045a:	430a      	orrs	r2, r1
 800045c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800045e:	e017      	b.n	8000490 <comHandler+0x78>

			case'c': ;
				//___Ukončení___//
				flags.instructions.stopRequest = 1;
 8000460:	4bb0      	ldr	r3, [pc, #704]	; (8000724 <comHandler+0x30c>)
 8000462:	7b1a      	ldrb	r2, [r3, #12]
 8000464:	2102      	movs	r1, #2
 8000466:	430a      	orrs	r2, r1
 8000468:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800046a:	e011      	b.n	8000490 <comHandler+0x78>

			case'p': ;
				//___Pauza___//
				flags.instructions.pauseRequest = 1;
 800046c:	4bad      	ldr	r3, [pc, #692]	; (8000724 <comHandler+0x30c>)
 800046e:	7b1a      	ldrb	r2, [r3, #12]
 8000470:	2104      	movs	r1, #4
 8000472:	430a      	orrs	r2, r1
 8000474:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000476:	e00b      	b.n	8000490 <comHandler+0x78>

			case'k': ;
				//___Kalibrace___//
				flags.instructions.calibRequest = 1;
 8000478:	4baa      	ldr	r3, [pc, #680]	; (8000724 <comHandler+0x30c>)
 800047a:	7b1a      	ldrb	r2, [r3, #12]
 800047c:	2108      	movs	r1, #8
 800047e:	430a      	orrs	r2, r1
 8000480:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000482:	e005      	b.n	8000490 <comHandler+0x78>

			default: ;
				//___Neplatný příkaz___//
				flags.instructions.unknownInst = 1;
 8000484:	4ba7      	ldr	r3, [pc, #668]	; (8000724 <comHandler+0x30c>)
 8000486:	7b1a      	ldrb	r2, [r3, #12]
 8000488:	2110      	movs	r1, #16
 800048a:	430a      	orrs	r2, r1
 800048c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800048e:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000490:	4ba5      	ldr	r3, [pc, #660]	; (8000728 <comHandler+0x310>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	225f      	movs	r2, #95	; 0x5f
 8000496:	2118      	movs	r1, #24
 8000498:	468c      	mov	ip, r1
 800049a:	44bc      	add	ip, r7
 800049c:	4462      	add	r2, ip
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fa76 	bl	8001992 <pop>
 80004a6:	0003      	movs	r3, r0
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d1c2      	bne.n	8000432 <comHandler+0x1a>
			}
		}
		flags.data_received = 0;
 80004ac:	4b9d      	ldr	r3, [pc, #628]	; (8000724 <comHandler+0x30c>)
 80004ae:	7a1a      	ldrb	r2, [r3, #8]
 80004b0:	2101      	movs	r1, #1
 80004b2:	438a      	bics	r2, r1
 80004b4:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)
 80004b6:	4b9b      	ldr	r3, [pc, #620]	; (8000724 <comHandler+0x30c>)
 80004b8:	7e1b      	ldrb	r3, [r3, #24]
 80004ba:	2202      	movs	r2, #2
 80004bc:	4013      	ands	r3, r2
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d055      	beq.n	8000570 <comHandler+0x158>
	{
		char testPhaseChr;
		switch(currentPhase())
 80004c4:	f001 fd8c 	bl	8001fe0 <currentPhase>
 80004c8:	0003      	movs	r3, r0
 80004ca:	2b06      	cmp	r3, #6
 80004cc:	d834      	bhi.n	8000538 <comHandler+0x120>
 80004ce:	009a      	lsls	r2, r3, #2
 80004d0:	4b96      	ldr	r3, [pc, #600]	; (800072c <comHandler+0x314>)
 80004d2:	18d3      	adds	r3, r2, r3
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 80004d8:	235e      	movs	r3, #94	; 0x5e
 80004da:	2218      	movs	r2, #24
 80004dc:	4694      	mov	ip, r2
 80004de:	44bc      	add	ip, r7
 80004e0:	4463      	add	r3, ip
 80004e2:	2273      	movs	r2, #115	; 0x73
 80004e4:	701a      	strb	r2, [r3, #0]
			break;
 80004e6:	e02f      	b.n	8000548 <comHandler+0x130>
		case START_DONE:
			testPhaseChr = 's';
 80004e8:	235e      	movs	r3, #94	; 0x5e
 80004ea:	2218      	movs	r2, #24
 80004ec:	4694      	mov	ip, r2
 80004ee:	44bc      	add	ip, r7
 80004f0:	4463      	add	r3, ip
 80004f2:	2273      	movs	r2, #115	; 0x73
 80004f4:	701a      	strb	r2, [r3, #0]
			break;
 80004f6:	e027      	b.n	8000548 <comHandler+0x130>
		case MAIN_TEST:
			testPhaseChr = 'm';
 80004f8:	235e      	movs	r3, #94	; 0x5e
 80004fa:	2218      	movs	r2, #24
 80004fc:	4694      	mov	ip, r2
 80004fe:	44bc      	add	ip, r7
 8000500:	4463      	add	r3, ip
 8000502:	226d      	movs	r2, #109	; 0x6d
 8000504:	701a      	strb	r2, [r3, #0]
			break;
 8000506:	e01f      	b.n	8000548 <comHandler+0x130>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 8000508:	235e      	movs	r3, #94	; 0x5e
 800050a:	2218      	movs	r2, #24
 800050c:	4694      	mov	ip, r2
 800050e:	44bc      	add	ip, r7
 8000510:	4463      	add	r3, ip
 8000512:	226d      	movs	r2, #109	; 0x6d
 8000514:	701a      	strb	r2, [r3, #0]
			break;
 8000516:	e017      	b.n	8000548 <comHandler+0x130>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 8000518:	235e      	movs	r3, #94	; 0x5e
 800051a:	2218      	movs	r2, #24
 800051c:	4694      	mov	ip, r2
 800051e:	44bc      	add	ip, r7
 8000520:	4463      	add	r3, ip
 8000522:	2262      	movs	r2, #98	; 0x62
 8000524:	701a      	strb	r2, [r3, #0]
			break;
 8000526:	e00f      	b.n	8000548 <comHandler+0x130>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 8000528:	235e      	movs	r3, #94	; 0x5e
 800052a:	2218      	movs	r2, #24
 800052c:	4694      	mov	ip, r2
 800052e:	44bc      	add	ip, r7
 8000530:	4463      	add	r3, ip
 8000532:	224d      	movs	r2, #77	; 0x4d
 8000534:	701a      	strb	r2, [r3, #0]
			break;
 8000536:	e007      	b.n	8000548 <comHandler+0x130>
		default:
			testPhaseChr = 'e';
 8000538:	235e      	movs	r3, #94	; 0x5e
 800053a:	2218      	movs	r2, #24
 800053c:	4694      	mov	ip, r2
 800053e:	44bc      	add	ip, r7
 8000540:	4463      	add	r3, ip
 8000542:	2265      	movs	r2, #101	; 0x65
 8000544:	701a      	strb	r2, [r3, #0]
			break;
 8000546:	46c0      	nop			; (mov r8, r8)
#else
		//sprintf(txt, "Test progress #%c\n", testPhaseChr);
#endif
		//pushStr(USB_Tx_Buffer, txt, strlen(txt));
		Paket paket;
		fillPaket(&paket, TEST_PHASE_PAKET, &testPhaseChr, 1);
 8000548:	235e      	movs	r3, #94	; 0x5e
 800054a:	2118      	movs	r1, #24
 800054c:	187a      	adds	r2, r7, r1
 800054e:	18d2      	adds	r2, r2, r3
 8000550:	2634      	movs	r6, #52	; 0x34
 8000552:	187b      	adds	r3, r7, r1
 8000554:	1998      	adds	r0, r3, r6
 8000556:	2301      	movs	r3, #1
 8000558:	2104      	movs	r1, #4
 800055a:	f000 f919 	bl	8000790 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800055e:	4b74      	ldr	r3, [pc, #464]	; (8000730 <comHandler+0x318>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2118      	movs	r1, #24
 8000564:	187a      	adds	r2, r7, r1
 8000566:	1992      	adds	r2, r2, r6
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f000 f950 	bl	8000810 <pushPaket>
	}

	if(flags.meas.measComplete)
 8000570:	4b6c      	ldr	r3, [pc, #432]	; (8000724 <comHandler+0x30c>)
 8000572:	7d1b      	ldrb	r3, [r3, #20]
 8000574:	2202      	movs	r2, #2
 8000576:	4013      	ands	r3, r2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d053      	beq.n	8000626 <comHandler+0x20e>
	{
		if(!flags.meas.calibMeas)
 800057e:	4b69      	ldr	r3, [pc, #420]	; (8000724 <comHandler+0x30c>)
 8000580:	7d1b      	ldrb	r3, [r3, #20]
 8000582:	2240      	movs	r2, #64	; 0x40
 8000584:	4013      	ands	r3, r2
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d117      	bne.n	80005bc <comHandler+0x1a4>
			else
				push(USB_Tx_Buffer, testNum);
			push(USB_Tx_Buffer, '\n');*/

			Paket paket;
			fillPaket(&paket, TEST_NUM_PAKET, &testNum, 1);
 800058c:	4a69      	ldr	r2, [pc, #420]	; (8000734 <comHandler+0x31c>)
 800058e:	2628      	movs	r6, #40	; 0x28
 8000590:	2318      	movs	r3, #24
 8000592:	18f9      	adds	r1, r7, r3
 8000594:	1988      	adds	r0, r1, r6
 8000596:	2301      	movs	r3, #1
 8000598:	2103      	movs	r1, #3
 800059a:	f000 f8f9 	bl	8000790 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 800059e:	4b64      	ldr	r3, [pc, #400]	; (8000730 <comHandler+0x318>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2218      	movs	r2, #24
 80005a4:	18ba      	adds	r2, r7, r2
 80005a6:	1992      	adds	r2, r2, r6
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f930 	bl	8000810 <pushPaket>
			testNum++;
 80005b0:	4b60      	ldr	r3, [pc, #384]	; (8000734 <comHandler+0x31c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	4b5f      	ldr	r3, [pc, #380]	; (8000734 <comHandler+0x31c>)
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	e004      	b.n	80005c6 <comHandler+0x1ae>
		}
		else
		{
			flags.meas.calibMeas = 0;
 80005bc:	4b59      	ldr	r3, [pc, #356]	; (8000724 <comHandler+0x30c>)
 80005be:	7d1a      	ldrb	r2, [r3, #20]
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	438a      	bics	r2, r1
 80005c4:	751a      	strb	r2, [r3, #20]
		}

		if(flags.meas.onlyBattery)
 80005c6:	4b57      	ldr	r3, [pc, #348]	; (8000724 <comHandler+0x30c>)
 80005c8:	7d1b      	ldrb	r3, [r3, #20]
 80005ca:	2220      	movs	r2, #32
 80005cc:	4013      	ands	r3, r2
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d014      	beq.n	80005fe <comHandler+0x1e6>
		{
			/*char res[20] = {0};
			sprintf(res, "%d;\n", ADC_Results[12]);
			pushStr(USB_Tx_Buffer, res, strlen(res));*/

			makeByteArray();
 80005d4:	f000 f8b6 	bl	8000744 <makeByteArray>
			Paket paket;
			fillPaket(&paket, DATA_BAT_PAKET, &data[12], 2);
 80005d8:	4a57      	ldr	r2, [pc, #348]	; (8000738 <comHandler+0x320>)
 80005da:	261c      	movs	r6, #28
 80005dc:	2318      	movs	r3, #24
 80005de:	18f9      	adds	r1, r7, r3
 80005e0:	1988      	adds	r0, r1, r6
 80005e2:	2302      	movs	r3, #2
 80005e4:	2102      	movs	r1, #2
 80005e6:	f000 f8d3 	bl	8000790 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 80005ea:	4b51      	ldr	r3, [pc, #324]	; (8000730 <comHandler+0x318>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2218      	movs	r2, #24
 80005f0:	18ba      	adds	r2, r7, r2
 80005f2:	1992      	adds	r2, r2, r6
 80005f4:	0011      	movs	r1, r2
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 f90a 	bl	8000810 <pushPaket>
 80005fc:	e013      	b.n	8000626 <comHandler+0x20e>
				sprintf(res, "%d;", ADC_Results[2*i]);
				pushStr(USB_Tx_Buffer, res, strlen(res));
			}
			push(USB_Tx_Buffer, 0x0A);*/

			makeByteArray();
 80005fe:	f000 f8a1 	bl	8000744 <makeByteArray>
			Paket paket;
			fillPaket(&paket, DATA_PAKET, data, 14);
 8000602:	4a4e      	ldr	r2, [pc, #312]	; (800073c <comHandler+0x324>)
 8000604:	2610      	movs	r6, #16
 8000606:	2318      	movs	r3, #24
 8000608:	18f9      	adds	r1, r7, r3
 800060a:	1988      	adds	r0, r1, r6
 800060c:	230e      	movs	r3, #14
 800060e:	2101      	movs	r1, #1
 8000610:	f000 f8be 	bl	8000790 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000614:	4b46      	ldr	r3, [pc, #280]	; (8000730 <comHandler+0x318>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2218      	movs	r2, #24
 800061a:	18ba      	adds	r2, r7, r2
 800061c:	1992      	adds	r2, r2, r6
 800061e:	0011      	movs	r1, r2
 8000620:	0018      	movs	r0, r3
 8000622:	f000 f8f5 	bl	8000810 <pushPaket>
	}
#endif

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000626:	4b42      	ldr	r3, [pc, #264]	; (8000730 <comHandler+0x318>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	7d1b      	ldrb	r3, [r3, #20]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d116      	bne.n	800065e <comHandler+0x246>
	{
		flags.ui.shortBeep = 1;
 8000630:	4b3c      	ldr	r3, [pc, #240]	; (8000724 <comHandler+0x30c>)
 8000632:	7c1a      	ldrb	r2, [r3, #16]
 8000634:	2101      	movs	r1, #1
 8000636:	430a      	orrs	r2, r1
 8000638:	741a      	strb	r2, [r3, #16]
		char msg[] = {"Buffer full\n"};
 800063a:	2618      	movs	r6, #24
 800063c:	19bb      	adds	r3, r7, r6
 800063e:	4a40      	ldr	r2, [pc, #256]	; (8000740 <comHandler+0x328>)
 8000640:	ca43      	ldmia	r2!, {r0, r1, r6}
 8000642:	c343      	stmia	r3!, {r0, r1, r6}
 8000644:	7812      	ldrb	r2, [r2, #0]
 8000646:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 8000648:	2618      	movs	r6, #24
 800064a:	19bb      	adds	r3, r7, r6
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff fd5b 	bl	8000108 <strlen>
 8000652:	0002      	movs	r2, r0
 8000654:	19bb      	adds	r3, r7, r6
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f00b fc73 	bl	800bf44 <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <comHandler+0x318>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d057      	beq.n	8000718 <comHandler+0x300>
	{
 8000668:	466b      	mov	r3, sp
 800066a:	4698      	mov	r8, r3
		int size = USB_Tx_Buffer->filled;
 800066c:	4b30      	ldr	r3, [pc, #192]	; (8000730 <comHandler+0x318>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	18b9      	adds	r1, r7, r2
 8000676:	600b      	str	r3, [r1, #0]
		char tmpStr[size];
 8000678:	18bb      	adds	r3, r7, r2
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	1e5a      	subs	r2, r3, #1
 800067e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000680:	001a      	movs	r2, r3
 8000682:	60ba      	str	r2, [r7, #8]
 8000684:	2200      	movs	r2, #0
 8000686:	60fa      	str	r2, [r7, #12]
 8000688:	68b8      	ldr	r0, [r7, #8]
 800068a:	68f9      	ldr	r1, [r7, #12]
 800068c:	0002      	movs	r2, r0
 800068e:	0f52      	lsrs	r2, r2, #29
 8000690:	000e      	movs	r6, r1
 8000692:	00f6      	lsls	r6, r6, #3
 8000694:	617e      	str	r6, [r7, #20]
 8000696:	697e      	ldr	r6, [r7, #20]
 8000698:	4316      	orrs	r6, r2
 800069a:	617e      	str	r6, [r7, #20]
 800069c:	0002      	movs	r2, r0
 800069e:	00d2      	lsls	r2, r2, #3
 80006a0:	613a      	str	r2, [r7, #16]
 80006a2:	001a      	movs	r2, r3
 80006a4:	603a      	str	r2, [r7, #0]
 80006a6:	2200      	movs	r2, #0
 80006a8:	607a      	str	r2, [r7, #4]
 80006aa:	6838      	ldr	r0, [r7, #0]
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	0002      	movs	r2, r0
 80006b0:	0f52      	lsrs	r2, r2, #29
 80006b2:	000e      	movs	r6, r1
 80006b4:	00f5      	lsls	r5, r6, #3
 80006b6:	4315      	orrs	r5, r2
 80006b8:	0002      	movs	r2, r0
 80006ba:	00d4      	lsls	r4, r2, #3
 80006bc:	3307      	adds	r3, #7
 80006be:	08db      	lsrs	r3, r3, #3
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	466a      	mov	r2, sp
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	469d      	mov	sp, r3
 80006c8:	466b      	mov	r3, sp
 80006ca:	3300      	adds	r3, #0
 80006cc:	67bb      	str	r3, [r7, #120]	; 0x78
		for(int i = 0; i < size; i++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	2284      	movs	r2, #132	; 0x84
 80006d2:	18ba      	adds	r2, r7, r2
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	e00f      	b.n	80006f8 <comHandler+0x2e0>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <comHandler+0x318>)
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80006de:	2484      	movs	r4, #132	; 0x84
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	0019      	movs	r1, r3
 80006e8:	f001 f953 	bl	8001992 <pop>
		for(int i = 0; i < size; i++)
 80006ec:	0022      	movs	r2, r4
 80006ee:	18bb      	adds	r3, r7, r2
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	18ba      	adds	r2, r7, r2
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	2384      	movs	r3, #132	; 0x84
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	187b      	adds	r3, r7, r1
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbe7      	blt.n	80006d8 <comHandler+0x2c0>
		}
		CDC_Transmit_FS(tmpStr, size);
 8000708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800070a:	187a      	adds	r2, r7, r1
 800070c:	6812      	ldr	r2, [r2, #0]
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f00b fc17 	bl	800bf44 <CDC_Transmit_FS>
 8000716:	46c5      	mov	sp, r8
	}

}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b022      	add	sp, #136	; 0x88
 800071e:	bc80      	pop	{r7}
 8000720:	46b8      	mov	r8, r7
 8000722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000724:	20000630 	.word	0x20000630
 8000728:	20001138 	.word	0x20001138
 800072c:	0800d250 	.word	0x0800d250
 8000730:	20000490 	.word	0x20000490
 8000734:	20000260 	.word	0x20000260
 8000738:	200004a0 	.word	0x200004a0
 800073c:	20000494 	.word	0x20000494
 8000740:	0800d1ac 	.word	0x0800d1ac

08000744 <makeByteArray>:

//_____Zpracuje ADC_Results do pole data_____//
static void makeByteArray()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++)
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	e012      	b.n	8000776 <makeByteArray+0x32>
	{
		data[2*i] = MaskByte(ADC_Results[2*i], 0);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	005a      	lsls	r2, r3, #1
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <makeByteArray+0x44>)
 8000756:	0092      	lsls	r2, r2, #2
 8000758:	58d2      	ldr	r2, [r2, r3]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	b2d1      	uxtb	r1, r2
 8000760:	4a0a      	ldr	r2, [pc, #40]	; (800078c <makeByteArray+0x48>)
 8000762:	54d1      	strb	r1, [r2, r3]
		data[2*i+1] = MaskByte(ADC_Results[2*i], 1);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	3301      	adds	r3, #1
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <makeByteArray+0x48>)
 800076c:	2100      	movs	r1, #0
 800076e:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 7; i++)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3301      	adds	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b06      	cmp	r3, #6
 800077a:	dde9      	ble.n	8000750 <makeByteArray+0xc>
	}
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	200001fc 	.word	0x200001fc
 800078c:	20000494 	.word	0x20000494

08000790 <fillPaket>:

//_____Vytvoří strukturu Paket z dat v arcumentech_____//
static void fillPaket(Paket* paket, outPaketType type, uint8_t* data, uint8_t dataLength)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b087      	sub	sp, #28
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	0008      	movs	r0, r1
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	0019      	movs	r1, r3
 800079e:	240b      	movs	r4, #11
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	1c02      	adds	r2, r0, #0
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	200a      	movs	r0, #10
 80007a8:	183b      	adds	r3, r7, r0
 80007aa:	1c0a      	adds	r2, r1, #0
 80007ac:	701a      	strb	r2, [r3, #0]
	paket->type = type;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	0021      	movs	r1, r4
 80007b2:	187a      	adds	r2, r7, r1
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	701a      	strb	r2, [r3, #0]
	paket->data = data;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	605a      	str	r2, [r3, #4]
	paket->dataLength = dataLength;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	183a      	adds	r2, r7, r0
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	721a      	strb	r2, [r3, #8]
	uint8_t CA = type;
 80007c6:	2317      	movs	r3, #23
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	187a      	adds	r2, r7, r1
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	e00c      	b.n	80007f0 <fillPaket+0x60>
		CA += data[i];
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	18d3      	adds	r3, r2, r3
 80007dc:	7819      	ldrb	r1, [r3, #0]
 80007de:	2217      	movs	r2, #23
 80007e0:	18bb      	adds	r3, r7, r2
 80007e2:	18ba      	adds	r2, r7, r2
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	188a      	adds	r2, r1, r2
 80007e8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	3301      	adds	r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	230a      	movs	r3, #10
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dbec      	blt.n	80007d6 <fillPaket+0x46>
	paket->CA_value = CA;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2217      	movs	r2, #23
 8000800:	18ba      	adds	r2, r7, r2
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	725a      	strb	r2, [r3, #9]
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b007      	add	sp, #28
 800080c:	bd90      	pop	{r4, r7, pc}
	...

08000810 <pushPaket>:

//_____Vloží do bufferu řetězec odpovídající sestavenému paketu_____//
static void pushPaket(RING_BUFFER* buffer, Paket* paket)
{
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000812:	46c6      	mov	lr, r8
 8000814:	b500      	push	{lr}
 8000816:	b096      	sub	sp, #88	; 0x58
 8000818:	af00      	add	r7, sp, #0
 800081a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800081c:	63b9      	str	r1, [r7, #56]	; 0x38
 800081e:	466b      	mov	r3, sp
 8000820:	4698      	mov	r8, r3
	uint8_t msg[paket->dataLength + 2];
 8000822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000824:	7a1b      	ldrb	r3, [r3, #8]
 8000826:	1c9a      	adds	r2, r3, #2
 8000828:	1e53      	subs	r3, r2, #1
 800082a:	657b      	str	r3, [r7, #84]	; 0x54
 800082c:	0013      	movs	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	69b8      	ldr	r0, [r7, #24]
 8000836:	69f9      	ldr	r1, [r7, #28]
 8000838:	0003      	movs	r3, r0
 800083a:	0f5b      	lsrs	r3, r3, #29
 800083c:	000e      	movs	r6, r1
 800083e:	00f5      	lsls	r5, r6, #3
 8000840:	431d      	orrs	r5, r3
 8000842:	0003      	movs	r3, r0
 8000844:	00dc      	lsls	r4, r3, #3
 8000846:	0013      	movs	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	6938      	ldr	r0, [r7, #16]
 8000850:	6979      	ldr	r1, [r7, #20]
 8000852:	0003      	movs	r3, r0
 8000854:	0f5b      	lsrs	r3, r3, #29
 8000856:	000c      	movs	r4, r1
 8000858:	00e4      	lsls	r4, r4, #3
 800085a:	637c      	str	r4, [r7, #52]	; 0x34
 800085c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800085e:	431c      	orrs	r4, r3
 8000860:	637c      	str	r4, [r7, #52]	; 0x34
 8000862:	0003      	movs	r3, r0
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
 8000868:	0013      	movs	r3, r2
 800086a:	3307      	adds	r3, #7
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	466a      	mov	r2, sp
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	469d      	mov	sp, r3
 8000876:	466b      	mov	r3, sp
 8000878:	3300      	adds	r3, #0
 800087a:	653b      	str	r3, [r7, #80]	; 0x50
	msg[0] = paket->type;
 800087c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800087e:	781a      	ldrb	r2, [r3, #0]
 8000880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000882:	701a      	strb	r2, [r3, #0]
	memcpy(msg+1, paket->data, paket->dataLength);
 8000884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000886:	1c58      	adds	r0, r3, #1
 8000888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800088a:	6859      	ldr	r1, [r3, #4]
 800088c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800088e:	7a1b      	ldrb	r3, [r3, #8]
 8000890:	001a      	movs	r2, r3
 8000892:	f00c f851 	bl	800c938 <memcpy>
	msg[paket->dataLength+1] = paket->CA_value;
 8000896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000898:	7a1b      	ldrb	r3, [r3, #8]
 800089a:	3301      	adds	r3, #1
 800089c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800089e:	7a51      	ldrb	r1, [r2, #9]
 80008a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80008a2:	54d1      	strb	r1, [r2, r3]
	//msg[paket->dataLength+2] = 0U;

	uint8_t str[] = {">>"};
 80008a4:	200c      	movs	r0, #12
 80008a6:	2638      	movs	r6, #56	; 0x38
 80008a8:	19bb      	adds	r3, r7, r6
 80008aa:	181b      	adds	r3, r3, r0
 80008ac:	4a34      	ldr	r2, [pc, #208]	; (8000980 <pushPaket+0x170>)
 80008ae:	8811      	ldrh	r1, [r2, #0]
 80008b0:	8019      	strh	r1, [r3, #0]
 80008b2:	7892      	ldrb	r2, [r2, #2]
 80008b4:	709a      	strb	r2, [r3, #2]
	uint8_t end[] = {"<<\n"};
 80008b6:	2508      	movs	r5, #8
 80008b8:	19bb      	adds	r3, r7, r6
 80008ba:	195b      	adds	r3, r3, r5
 80008bc:	4a31      	ldr	r2, [pc, #196]	; (8000984 <pushPaket+0x174>)
 80008be:	601a      	str	r2, [r3, #0]

	uint8_t toSend[6+paket->dataLength + 2];
 80008c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008c2:	7a1b      	ldrb	r3, [r3, #8]
 80008c4:	3308      	adds	r3, #8
 80008c6:	001c      	movs	r4, r3
 80008c8:	1e63      	subs	r3, r4, #1
 80008ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008cc:	0023      	movs	r3, r4
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	000b      	movs	r3, r1
 80008da:	0f5b      	lsrs	r3, r3, #29
 80008dc:	0016      	movs	r6, r2
 80008de:	00f6      	lsls	r6, r6, #3
 80008e0:	62fe      	str	r6, [r7, #44]	; 0x2c
 80008e2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 80008e4:	431e      	orrs	r6, r3
 80008e6:	62fe      	str	r6, [r7, #44]	; 0x2c
 80008e8:	000b      	movs	r3, r1
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80008ee:	0023      	movs	r3, r4
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	000b      	movs	r3, r1
 80008fc:	0f5b      	lsrs	r3, r3, #29
 80008fe:	0016      	movs	r6, r2
 8000900:	00f6      	lsls	r6, r6, #3
 8000902:	627e      	str	r6, [r7, #36]	; 0x24
 8000904:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000906:	431e      	orrs	r6, r3
 8000908:	627e      	str	r6, [r7, #36]	; 0x24
 800090a:	000b      	movs	r3, r1
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	623b      	str	r3, [r7, #32]
 8000910:	0023      	movs	r3, r4
 8000912:	3307      	adds	r3, #7
 8000914:	08db      	lsrs	r3, r3, #3
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	466a      	mov	r2, sp
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	469d      	mov	sp, r3
 800091e:	466b      	mov	r3, sp
 8000920:	3300      	adds	r3, #0
 8000922:	64bb      	str	r3, [r7, #72]	; 0x48
	//sprintf(toSend, "%s%s%s\n", str, msg, end);	//pro testNum = 0 se vytiskne jen paket->type, jelikož sprintf pak narazí na nulu
	memcpy(toSend, str, 2);
 8000924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000926:	2638      	movs	r6, #56	; 0x38
 8000928:	19ba      	adds	r2, r7, r6
 800092a:	1811      	adds	r1, r2, r0
 800092c:	2202      	movs	r2, #2
 800092e:	0018      	movs	r0, r3
 8000930:	f00c f802 	bl	800c938 <memcpy>
	memcpy(toSend+2, msg, paket->dataLength + 2);
 8000934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000936:	1c98      	adds	r0, r3, #2
 8000938:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800093a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800093c:	7a1b      	ldrb	r3, [r3, #8]
 800093e:	3302      	adds	r3, #2
 8000940:	001a      	movs	r2, r3
 8000942:	f00b fff9 	bl	800c938 <memcpy>
	memcpy(toSend+2+paket->dataLength + 2, end, 4);
 8000946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800094a:	7a1b      	ldrb	r3, [r3, #8]
 800094c:	3304      	adds	r3, #4
 800094e:	18d2      	adds	r2, r2, r3
 8000950:	19bb      	adds	r3, r7, r6
 8000952:	195b      	adds	r3, r3, r5
 8000954:	0010      	movs	r0, r2
 8000956:	0019      	movs	r1, r3
 8000958:	2304      	movs	r3, #4
 800095a:	001a      	movs	r2, r3
 800095c:	f00b ffec 	bl	800c938 <memcpy>
	pushStr(buffer, toSend, sizeof(toSend)-1);
 8000960:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000962:	0023      	movs	r3, r4
 8000964:	3b01      	subs	r3, #1
 8000966:	001a      	movs	r2, r3
 8000968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800096a:	0018      	movs	r0, r3
 800096c:	f000 ffe9 	bl	8001942 <pushStr>
 8000970:	46c5      	mov	sp, r8
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b016      	add	sp, #88	; 0x58
 8000978:	bc80      	pop	{r7}
 800097a:	46b8      	mov	r8, r7
 800097c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	0800d1bc 	.word	0x0800d1bc
 8000984:	000a3c3c 	.word	0x000a3c3c

08000988 <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	0002      	movs	r2, r0
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d033      	beq.n	8000a04 <setColour+0x7c>
 800099c:	dc49      	bgt.n	8000a32 <setColour+0xaa>
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <setColour+0x20>
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d017      	beq.n	80009d6 <setColour+0x4e>
 80009a6:	e044      	b.n	8000a32 <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	482e      	ldr	r0, [pc, #184]	; (8000a68 <setColour+0xe0>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	0019      	movs	r1, r3
 80009b2:	f002 fe48 	bl	8003646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	0219      	lsls	r1, r3, #8
 80009ba:	2390      	movs	r3, #144	; 0x90
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2200      	movs	r2, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f002 fe40 	bl	8003646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4827      	ldr	r0, [pc, #156]	; (8000a68 <setColour+0xe0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	0019      	movs	r1, r3
 80009d0:	f002 fe39 	bl	8003646 <HAL_GPIO_WritePin>
		break;
 80009d4:	e044      	b.n	8000a60 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4823      	ldr	r0, [pc, #140]	; (8000a68 <setColour+0xe0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	0019      	movs	r1, r3
 80009e0:	f002 fe31 	bl	8003646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	0219      	lsls	r1, r3, #8
 80009e8:	2390      	movs	r3, #144	; 0x90
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	2200      	movs	r2, #0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f002 fe29 	bl	8003646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	481b      	ldr	r0, [pc, #108]	; (8000a68 <setColour+0xe0>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	0019      	movs	r1, r3
 80009fe:	f002 fe22 	bl	8003646 <HAL_GPIO_WritePin>
		break;
 8000a02:	e02d      	b.n	8000a60 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4817      	ldr	r0, [pc, #92]	; (8000a68 <setColour+0xe0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	f002 fe1a 	bl	8003646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	0219      	lsls	r1, r3, #8
 8000a16:	2390      	movs	r3, #144	; 0x90
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f002 fe12 	bl	8003646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4810      	ldr	r0, [pc, #64]	; (8000a68 <setColour+0xe0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	f002 fe0b 	bl	8003646 <HAL_GPIO_WritePin>
		break;
 8000a30:	e016      	b.n	8000a60 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <setColour+0xe0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	f002 fe03 	bl	8003646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	0219      	lsls	r1, r3, #8
 8000a44:	2390      	movs	r3, #144	; 0x90
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	2200      	movs	r2, #0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fdfb 	bl	8003646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <setColour+0xe0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	0019      	movs	r1, r3
 8000a5a:	f002 fdf4 	bl	8003646 <HAL_GPIO_WritePin>
		break;
 8000a5e:	46c0      	nop			; (mov r8, r8)
	}
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	48000400 	.word	0x48000400

08000a6c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	0002      	movs	r2, r0
 8000a74:	1dbb      	adds	r3, r7, #6
 8000a76:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000a78:	1dbb      	adds	r3, r7, #6
 8000a7a:	881a      	ldrh	r2, [r3, #0]
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d104      	bne.n	8000a8e <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_GPIO_EXTI_Callback+0x40>)
 8000a86:	791a      	ldrb	r2, [r3, #4]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 8000a8e:	1dbb      	adds	r3, r7, #6
 8000a90:	881a      	ldrh	r2, [r3, #0]
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d104      	bne.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <HAL_GPIO_EXTI_Callback+0x40>)
 8000a9c:	791a      	ldrb	r2, [r3, #4]
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	711a      	strb	r2, [r3, #4]
	}
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000630 	.word	0x20000630

08000ab0 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d104      	bne.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	701a      	strb	r2, [r3, #0]
	}
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	200005e8 	.word	0x200005e8
 8000ad8:	20000630 	.word	0x20000630

08000adc <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc);
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 ff4e 	bl	8002988 <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <HAL_ADC_ConvCpltCallback+0x24>)
 8000aee:	7d1a      	ldrb	r2, [r3, #20]
 8000af0:	2104      	movs	r1, #4
 8000af2:	430a      	orrs	r2, r1
 8000af4:	751a      	strb	r2, [r3, #20]
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000630 	.word	0x20000630

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f001 fd04 	bl	8002514 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 8000b0c:	2064      	movs	r0, #100	; 0x64
 8000b0e:	f000 feac 	bl	800186a <createBuffer>
 8000b12:	0002      	movs	r2, r0
 8000b14:	4b36      	ldr	r3, [pc, #216]	; (8000bf0 <main+0xec>)
 8000b16:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 8000b18:	2064      	movs	r0, #100	; 0x64
 8000b1a:	f000 fea6 	bl	800186a <createBuffer>
 8000b1e:	0002      	movs	r2, r0
 8000b20:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <main+0xf0>)
 8000b22:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 8000b24:	23fa      	movs	r3, #250	; 0xfa
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 fe9e 	bl	800186a <createBuffer>
 8000b2e:	0002      	movs	r2, r0
 8000b30:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <main+0xf4>)
 8000b32:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 8000b34:	23fa      	movs	r3, #250	; 0xfa
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fe96 	bl	800186a <createBuffer>
 8000b3e:	0002      	movs	r2, r0
 8000b40:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <main+0xf8>)
 8000b42:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f862 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f000 faac 	bl	80010a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000b4c:	f00b f950 	bl	800bdf0 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 8000b50:	f000 f8c8 	bl	8000ce4 <MX_ADC_Init>
  MX_SPI1_Init();
 8000b54:	f000 f9e4 	bl	8000f20 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000b58:	f000 fa74 	bl	8001044 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8000b5c:	f000 fa26 	bl	8000fac <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);

  LOAD_MIN_OFF;
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <main+0xfc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	0018      	movs	r0, r3
 8000b68:	f002 fd6d 	bl	8003646 <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <main+0xfc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2140      	movs	r1, #64	; 0x40
 8000b72:	0018      	movs	r0, r3
 8000b74:	f002 fd67 	bl	8003646 <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 8000b78:	f000 ff82 	bl	8001a80 <regInit>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d004      	beq.n	8000b8a <main+0x86>
  {
	  flags.conErr = 1;
 8000b80:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <main+0x100>)
 8000b82:	7e1a      	ldrb	r2, [r3, #24]
 8000b84:	2104      	movs	r1, #4
 8000b86:	430a      	orrs	r2, r1
 8000b88:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <main+0x104>)
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f005 ffc9 	bl	8006b24 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <main+0x100>)
 8000b94:	7c1a      	ldrb	r2, [r3, #16]
 8000b96:	2102      	movs	r1, #2
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <main+0x100>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	07db      	lsls	r3, r3, #31
 8000ba2:	0fdb      	lsrs	r3, r3, #31
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f8      	beq.n	8000b9c <main+0x98>
	  {
		  clkHandler();
 8000baa:	f000 fb67 	bl	800127c <clkHandler>
		  buttonDebounce();
 8000bae:	f000 fbe3 	bl	8001378 <buttonDebounce>
		  comHandler();
 8000bb2:	f7ff fc31 	bl	8000418 <comHandler>
		  if(flags.instructions.calibRequest)
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <main+0x100>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	071b      	lsls	r3, r3, #28
 8000bbc:	0fdb      	lsrs	r3, r3, #31
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d00e      	beq.n	8000be2 <main+0xde>
		  {
			  flags.meas.measRequest = 1;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <main+0x100>)
 8000bc6:	7d1a      	ldrb	r2, [r3, #20]
 8000bc8:	2101      	movs	r1, #1
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	751a      	strb	r2, [r3, #20]
			  flags.meas.calibMeas = 1;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <main+0x100>)
 8000bd0:	7d1a      	ldrb	r2, [r3, #20]
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	751a      	strb	r2, [r3, #20]
			  flags.instructions.calibRequest = 0;
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <main+0x100>)
 8000bda:	7b1a      	ldrb	r2, [r3, #12]
 8000bdc:	2108      	movs	r1, #8
 8000bde:	438a      	bics	r2, r1
 8000be0:	731a      	strb	r2, [r3, #12]
		  }
		  UI_Handler();
 8000be2:	f000 fc47 	bl	8001474 <UI_Handler>
		  testHandler();
 8000be6:	f001 fa05 	bl	8001ff4 <testHandler>
		  measHandler();
 8000bea:	f000 fd83 	bl	80016f4 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 8000bee:	e7d5      	b.n	8000b9c <main+0x98>
 8000bf0:	200004a4 	.word	0x200004a4
 8000bf4:	20000694 	.word	0x20000694
 8000bf8:	20001138 	.word	0x20001138
 8000bfc:	20000490 	.word	0x20000490
 8000c00:	48000800 	.word	0x48000800
 8000c04:	20000630 	.word	0x20000630
 8000c08:	200005e8 	.word	0x200005e8

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b099      	sub	sp, #100	; 0x64
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	242c      	movs	r4, #44	; 0x2c
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	0018      	movs	r0, r3
 8000c18:	2334      	movs	r3, #52	; 0x34
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f00b fe94 	bl	800c94a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c22:	231c      	movs	r3, #28
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	0018      	movs	r0, r3
 8000c28:	2310      	movs	r3, #16
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f00b fe8c 	bl	800c94a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c32:	003b      	movs	r3, r7
 8000c34:	0018      	movs	r0, r3
 8000c36:	231c      	movs	r3, #28
 8000c38:	001a      	movs	r2, r3
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	f00b fe85 	bl	800c94a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000c40:	0021      	movs	r1, r4
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2232      	movs	r2, #50	; 0x32
 8000c46:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2201      	movs	r2, #1
 8000c52:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2201      	movs	r2, #1
 8000c58:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2210      	movs	r2, #16
 8000c64:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2202      	movs	r2, #2
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	0212      	lsls	r2, r2, #8
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	0352      	lsls	r2, r2, #13
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	0018      	movs	r0, r3
 8000c86:	f004 fba5 	bl	80053d4 <HAL_RCC_OscConfig>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000c8e:	f000 fde7 	bl	8001860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	211c      	movs	r1, #28
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2207      	movs	r2, #7
 8000c98:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2101      	movs	r1, #1
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f004 ff15 	bl	8005ae0 <HAL_RCC_ClockConfig>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000cba:	f000 fdd1 	bl	8001860 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cbe:	003b      	movs	r3, r7
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	0292      	lsls	r2, r2, #10
 8000cc4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000cc6:	003b      	movs	r3, r7
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ccc:	003b      	movs	r3, r7
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f005 f882 	bl	8005dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000cd8:	f000 fdc2 	bl	8001860 <Error_Handler>
  }
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b019      	add	sp, #100	; 0x64
 8000ce2:	bd90      	pop	{r4, r7, pc}

08000ce4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	0018      	movs	r0, r3
 8000cee:	230c      	movs	r3, #12
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f00b fe29 	bl	800c94a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000cf8:	4b87      	ldr	r3, [pc, #540]	; (8000f18 <MX_ADC_Init+0x234>)
 8000cfa:	4a88      	ldr	r2, [pc, #544]	; (8000f1c <MX_ADC_Init+0x238>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cfe:	4b86      	ldr	r3, [pc, #536]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d04:	4b84      	ldr	r3, [pc, #528]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d0a:	4b83      	ldr	r3, [pc, #524]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d10:	4b81      	ldr	r3, [pc, #516]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d16:	4b80      	ldr	r3, [pc, #512]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d18:	2204      	movs	r2, #4
 8000d1a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d1c:	4b7e      	ldr	r3, [pc, #504]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d22:	4b7d      	ldr	r3, [pc, #500]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000d28:	4b7b      	ldr	r3, [pc, #492]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d2e:	4b7a      	ldr	r3, [pc, #488]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d34:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d36:	22c2      	movs	r2, #194	; 0xc2
 8000d38:	32ff      	adds	r2, #255	; 0xff
 8000d3a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d3c:	4b76      	ldr	r3, [pc, #472]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d42:	4b75      	ldr	r3, [pc, #468]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d44:	2224      	movs	r2, #36	; 0x24
 8000d46:	2100      	movs	r1, #0
 8000d48:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d4a:	4b73      	ldr	r3, [pc, #460]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d50:	4b71      	ldr	r3, [pc, #452]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 fc66 	bl	8002624 <HAL_ADC_Init>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000d5c:	f000 fd80 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	0152      	lsls	r2, r2, #5
 8000d6c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2205      	movs	r2, #5
 8000d72:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d74:	1d3a      	adds	r2, r7, #4
 8000d76:	4b68      	ldr	r3, [pc, #416]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f001 ff22 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000d84:	f000 fd6c 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d8e:	1d3a      	adds	r2, r7, #4
 8000d90:	4b61      	ldr	r3, [pc, #388]	; (8000f18 <MX_ADC_Init+0x234>)
 8000d92:	0011      	movs	r1, r2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f001 ff15 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000d9e:	f000 fd5f 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2202      	movs	r2, #2
 8000da6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000da8:	1d3a      	adds	r2, r7, #4
 8000daa:	4b5b      	ldr	r3, [pc, #364]	; (8000f18 <MX_ADC_Init+0x234>)
 8000dac:	0011      	movs	r1, r2
 8000dae:	0018      	movs	r0, r3
 8000db0:	f001 ff08 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000db8:	f000 fd52 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dc2:	1d3a      	adds	r2, r7, #4
 8000dc4:	4b54      	ldr	r3, [pc, #336]	; (8000f18 <MX_ADC_Init+0x234>)
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f001 fefb 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000dce:	1e03      	subs	r3, r0, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000dd2:	f000 fd45 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2204      	movs	r2, #4
 8000dda:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ddc:	1d3a      	adds	r2, r7, #4
 8000dde:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <MX_ADC_Init+0x234>)
 8000de0:	0011      	movs	r1, r2
 8000de2:	0018      	movs	r0, r3
 8000de4:	f001 feee 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8000dec:	f000 fd38 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2205      	movs	r2, #5
 8000df4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000df6:	1d3a      	adds	r2, r7, #4
 8000df8:	4b47      	ldr	r3, [pc, #284]	; (8000f18 <MX_ADC_Init+0x234>)
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f001 fee1 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000e02:	1e03      	subs	r3, r0, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8000e06:	f000 fd2b 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2206      	movs	r2, #6
 8000e0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e10:	1d3a      	adds	r2, r7, #4
 8000e12:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <MX_ADC_Init+0x234>)
 8000e14:	0011      	movs	r1, r2
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 fed4 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000e1c:	1e03      	subs	r3, r0, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8000e20:	f000 fd1e 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2207      	movs	r2, #7
 8000e28:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e2a:	1d3a      	adds	r2, r7, #4
 8000e2c:	4b3a      	ldr	r3, [pc, #232]	; (8000f18 <MX_ADC_Init+0x234>)
 8000e2e:	0011      	movs	r1, r2
 8000e30:	0018      	movs	r0, r3
 8000e32:	f001 fec7 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8000e3a:	f000 fd11 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2208      	movs	r2, #8
 8000e42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e44:	1d3a      	adds	r2, r7, #4
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <MX_ADC_Init+0x234>)
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f001 feba 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8000e54:	f000 fd04 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2209      	movs	r2, #9
 8000e5c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e5e:	1d3a      	adds	r2, r7, #4
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <MX_ADC_Init+0x234>)
 8000e62:	0011      	movs	r1, r2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f001 fead 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000e6a:	1e03      	subs	r3, r0, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 8000e6e:	f000 fcf7 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	220a      	movs	r2, #10
 8000e76:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e78:	1d3a      	adds	r2, r7, #4
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <MX_ADC_Init+0x234>)
 8000e7c:	0011      	movs	r1, r2
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f001 fea0 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 8000e88:	f000 fcea 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	220b      	movs	r2, #11
 8000e90:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e92:	1d3a      	adds	r2, r7, #4
 8000e94:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <MX_ADC_Init+0x234>)
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f001 fe93 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000e9e:	1e03      	subs	r3, r0, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 8000ea2:	f000 fcdd 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	220c      	movs	r2, #12
 8000eaa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eac:	1d3a      	adds	r2, r7, #4
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_ADC_Init+0x234>)
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f001 fe86 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 8000ebc:	f000 fcd0 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	220d      	movs	r2, #13
 8000ec4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ec6:	1d3a      	adds	r2, r7, #4
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_ADC_Init+0x234>)
 8000eca:	0011      	movs	r1, r2
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f001 fe79 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 8000ed6:	f000 fcc3 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	220e      	movs	r2, #14
 8000ede:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ee0:	1d3a      	adds	r2, r7, #4
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_ADC_Init+0x234>)
 8000ee4:	0011      	movs	r1, r2
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f001 fe6c 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000eec:	1e03      	subs	r3, r0, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 8000ef0:	f000 fcb6 	bl	8001860 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000efa:	1d3a      	adds	r2, r7, #4
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_ADC_Init+0x234>)
 8000efe:	0011      	movs	r1, r2
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 fe5f 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 8000f0a:	f000 fca9 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b004      	add	sp, #16
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	2000064c 	.word	0x2000064c
 8000f1c:	40012400 	.word	0x40012400

08000f20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f26:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <MX_SPI1_Init+0x84>)
 8000f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f2c:	2282      	movs	r2, #130	; 0x82
 8000f2e:	0052      	lsls	r2, r2, #1
 8000f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f3a:	22e0      	movs	r2, #224	; 0xe0
 8000f3c:	00d2      	lsls	r2, r2, #3
 8000f3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	0092      	lsls	r2, r2, #2
 8000f52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f56:	2238      	movs	r2, #56	; 0x38
 8000f58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f6e:	2207      	movs	r2, #7
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_SPI1_Init+0x80>)
 8000f80:	0018      	movs	r0, r3
 8000f82:	f005 f827 	bl	8005fd4 <HAL_SPI_Init>
 8000f86:	1e03      	subs	r3, r0, #0
 8000f88:	d001      	beq.n	8000f8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f8a:	f000 fc69 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_SPI1_Init+0x88>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	2140      	movs	r1, #64	; 0x40
 8000f94:	0018      	movs	r0, r3
 8000f96:	f002 fb56 	bl	8003646 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000584 	.word	0x20000584
 8000fa4:	40013000 	.word	0x40013000
 8000fa8:	48000400 	.word	0x48000400

08000fac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	231c      	movs	r3, #28
 8000fb8:	001a      	movs	r2, r3
 8000fba:	2100      	movs	r1, #0
 8000fbc:	f00b fcc5 	bl	800c94a <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_TIM14_Init+0x8c>)
 8000fc2:	4a1e      	ldr	r2, [pc, #120]	; (800103c <MX_TIM14_Init+0x90>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_TIM14_Init+0x8c>)
 8000fc8:	222f      	movs	r2, #47	; 0x2f
 8000fca:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_TIM14_Init+0x8c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_TIM14_Init+0x8c>)
 8000fd4:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <MX_TIM14_Init+0x94>)
 8000fd6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_TIM14_Init+0x8c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_TIM14_Init+0x8c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_TIM14_Init+0x8c>)
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f005 fd4c 	bl	8006a84 <HAL_TIM_Base_Init>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000ff0:	f000 fc36 	bl	8001860 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_TIM14_Init+0x8c>)
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f005 fde6 	bl	8006bc8 <HAL_TIM_OC_Init>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001000:	f000 fc2e 	bl	8001860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101c:	1d39      	adds	r1, r7, #4
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_TIM14_Init+0x8c>)
 8001020:	2200      	movs	r2, #0
 8001022:	0018      	movs	r0, r3
 8001024:	f005 ff3e 	bl	8006ea4 <HAL_TIM_OC_ConfigChannel>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800102c:	f000 fc18 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b008      	add	sp, #32
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200005e8 	.word	0x200005e8
 800103c:	40002000 	.word	0x40002000
 8001040:	0000270f 	.word	0x0000270f

08001044 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_USART3_UART_Init+0x58>)
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <MX_USART3_UART_Init+0x5c>)
 800104c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_USART3_UART_Init+0x58>)
 8001050:	2296      	movs	r2, #150	; 0x96
 8001052:	0212      	lsls	r2, r2, #8
 8001054:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_USART3_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_USART3_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_USART3_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_USART3_UART_Init+0x58>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_USART3_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_USART3_UART_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_USART3_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_USART3_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <MX_USART3_UART_Init+0x58>)
 8001088:	0018      	movs	r0, r3
 800108a:	f006 fa0f 	bl	80074ac <HAL_UART_Init>
 800108e:	1e03      	subs	r3, r0, #0
 8001090:	d001      	beq.n	8001096 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001092:	f000 fbe5 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000500 	.word	0x20000500
 80010a0:	40004800 	.word	0x40004800

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b08b      	sub	sp, #44	; 0x2c
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	2414      	movs	r4, #20
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	0018      	movs	r0, r3
 80010b0:	2314      	movs	r3, #20
 80010b2:	001a      	movs	r2, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	f00b fc48 	bl	800c94a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ba:	4b6b      	ldr	r3, [pc, #428]	; (8001268 <MX_GPIO_Init+0x1c4>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	4b6a      	ldr	r3, [pc, #424]	; (8001268 <MX_GPIO_Init+0x1c4>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	03c9      	lsls	r1, r1, #15
 80010c4:	430a      	orrs	r2, r1
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	4b67      	ldr	r3, [pc, #412]	; (8001268 <MX_GPIO_Init+0x1c4>)
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	03db      	lsls	r3, r3, #15
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	4b64      	ldr	r3, [pc, #400]	; (8001268 <MX_GPIO_Init+0x1c4>)
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <MX_GPIO_Init+0x1c4>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	0309      	lsls	r1, r1, #12
 80010e0:	430a      	orrs	r2, r1
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	4b60      	ldr	r3, [pc, #384]	; (8001268 <MX_GPIO_Init+0x1c4>)
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	031b      	lsls	r3, r3, #12
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b5d      	ldr	r3, [pc, #372]	; (8001268 <MX_GPIO_Init+0x1c4>)
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	4b5c      	ldr	r3, [pc, #368]	; (8001268 <MX_GPIO_Init+0x1c4>)
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	0289      	lsls	r1, r1, #10
 80010fc:	430a      	orrs	r2, r1
 80010fe:	615a      	str	r2, [r3, #20]
 8001100:	4b59      	ldr	r3, [pc, #356]	; (8001268 <MX_GPIO_Init+0x1c4>)
 8001102:	695a      	ldr	r2, [r3, #20]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	029b      	lsls	r3, r3, #10
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b56      	ldr	r3, [pc, #344]	; (8001268 <MX_GPIO_Init+0x1c4>)
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	4b55      	ldr	r3, [pc, #340]	; (8001268 <MX_GPIO_Init+0x1c4>)
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	02c9      	lsls	r1, r1, #11
 8001118:	430a      	orrs	r2, r1
 800111a:	615a      	str	r2, [r3, #20]
 800111c:	4b52      	ldr	r3, [pc, #328]	; (8001268 <MX_GPIO_Init+0x1c4>)
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	02db      	lsls	r3, r3, #11
 8001124:	4013      	ands	r3, r2
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112a:	4b4f      	ldr	r3, [pc, #316]	; (8001268 <MX_GPIO_Init+0x1c4>)
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	4b4e      	ldr	r3, [pc, #312]	; (8001268 <MX_GPIO_Init+0x1c4>)
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	0349      	lsls	r1, r1, #13
 8001134:	430a      	orrs	r2, r1
 8001136:	615a      	str	r2, [r3, #20]
 8001138:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <MX_GPIO_Init+0x1c4>)
 800113a:	695a      	ldr	r2, [r3, #20]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	035b      	lsls	r3, r3, #13
 8001140:	4013      	ands	r3, r2
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8001146:	4949      	ldr	r1, [pc, #292]	; (800126c <MX_GPIO_Init+0x1c8>)
 8001148:	4b49      	ldr	r3, [pc, #292]	; (8001270 <MX_GPIO_Init+0x1cc>)
 800114a:	2200      	movs	r2, #0
 800114c:	0018      	movs	r0, r3
 800114e:	f002 fa7a 	bl	8003646 <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001152:	239e      	movs	r3, #158	; 0x9e
 8001154:	015b      	lsls	r3, r3, #5
 8001156:	4847      	ldr	r0, [pc, #284]	; (8001274 <MX_GPIO_Init+0x1d0>)
 8001158:	2200      	movs	r2, #0
 800115a:	0019      	movs	r1, r3
 800115c:	f002 fa73 	bl	8003646 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	0219      	lsls	r1, r3, #8
 8001164:	2390      	movs	r3, #144	; 0x90
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	2200      	movs	r2, #0
 800116a:	0018      	movs	r0, r3
 800116c:	f002 fa6b 	bl	8003646 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8001170:	193b      	adds	r3, r7, r4
 8001172:	4a3e      	ldr	r2, [pc, #248]	; (800126c <MX_GPIO_Init+0x1c8>)
 8001174:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	193b      	adds	r3, r7, r4
 8001178:	2201      	movs	r2, #1
 800117a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	193b      	adds	r3, r7, r4
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	193b      	adds	r3, r7, r4
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	193b      	adds	r3, r7, r4
 800118a:	4a39      	ldr	r2, [pc, #228]	; (8001270 <MX_GPIO_Init+0x1cc>)
 800118c:	0019      	movs	r1, r3
 800118e:	0010      	movs	r0, r2
 8001190:	f002 f8c4 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001194:	0021      	movs	r1, r4
 8001196:	187b      	adds	r3, r7, r1
 8001198:	229e      	movs	r2, #158	; 0x9e
 800119a:	0152      	lsls	r2, r2, #5
 800119c:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	000c      	movs	r4, r1
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	2201      	movs	r2, #1
 80011a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	4a2f      	ldr	r2, [pc, #188]	; (8001274 <MX_GPIO_Init+0x1d0>)
 80011b6:	0019      	movs	r1, r3
 80011b8:	0010      	movs	r0, r2
 80011ba:	f002 f8af 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	22c0      	movs	r2, #192	; 0xc0
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c6:	193b      	adds	r3, r7, r4
 80011c8:	2288      	movs	r2, #136	; 0x88
 80011ca:	0352      	lsls	r2, r2, #13
 80011cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ce:	193b      	adds	r3, r7, r4
 80011d0:	2202      	movs	r2, #2
 80011d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	193a      	adds	r2, r7, r4
 80011d6:	2390      	movs	r3, #144	; 0x90
 80011d8:	05db      	lsls	r3, r3, #23
 80011da:	0011      	movs	r1, r2
 80011dc:	0018      	movs	r0, r3
 80011de:	f002 f89d 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011e2:	193b      	adds	r3, r7, r4
 80011e4:	2280      	movs	r2, #128	; 0x80
 80011e6:	00d2      	lsls	r2, r2, #3
 80011e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	193b      	adds	r3, r7, r4
 80011ec:	2200      	movs	r2, #0
 80011ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	193b      	adds	r3, r7, r4
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011f6:	193a      	adds	r2, r7, r4
 80011f8:	2390      	movs	r3, #144	; 0x90
 80011fa:	05db      	lsls	r3, r3, #23
 80011fc:	0011      	movs	r1, r2
 80011fe:	0018      	movs	r0, r3
 8001200:	f002 f88c 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8001204:	0021      	movs	r1, r4
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	0212      	lsls	r2, r2, #8
 800120c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	000c      	movs	r4, r1
 8001210:	193b      	adds	r3, r7, r4
 8001212:	2201      	movs	r2, #1
 8001214:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	193b      	adds	r3, r7, r4
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	193b      	adds	r3, r7, r4
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8001222:	193a      	adds	r2, r7, r4
 8001224:	2390      	movs	r3, #144	; 0x90
 8001226:	05db      	lsls	r3, r3, #23
 8001228:	0011      	movs	r1, r2
 800122a:	0018      	movs	r0, r3
 800122c:	f002 f876 	bl	800331c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8001230:	193b      	adds	r3, r7, r4
 8001232:	2204      	movs	r2, #4
 8001234:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	193b      	adds	r3, r7, r4
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	193b      	adds	r3, r7, r4
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8001242:	193b      	adds	r3, r7, r4
 8001244:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <MX_GPIO_Init+0x1d4>)
 8001246:	0019      	movs	r1, r3
 8001248:	0010      	movs	r0, r2
 800124a:	f002 f867 	bl	800331c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2007      	movs	r0, #7
 8001254:	f001 ffb2 	bl	80031bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001258:	2007      	movs	r0, #7
 800125a:	f001 ffc4 	bl	80031e6 <HAL_NVIC_EnableIRQ>

}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b00b      	add	sp, #44	; 0x2c
 8001264:	bd90      	pop	{r4, r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	40021000 	.word	0x40021000
 800126c:	0000f3c4 	.word	0x0000f3c4
 8001270:	48000400 	.word	0x48000400
 8001274:	48000800 	.word	0x48000800
 8001278:	48000c00 	.word	0x48000c00

0800127c <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	flags.time.ten_ms = 0;
 8001280:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <clkHandler+0xf4>)
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	438a      	bics	r2, r1
 8001288:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 800128a:	4b39      	ldr	r3, [pc, #228]	; (8001370 <clkHandler+0xf4>)
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	2102      	movs	r1, #2
 8001290:	438a      	bics	r2, r1
 8001292:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <clkHandler+0xf4>)
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	2104      	movs	r1, #4
 800129a:	438a      	bics	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 800129e:	4b34      	ldr	r3, [pc, #208]	; (8001370 <clkHandler+0xf4>)
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	2108      	movs	r1, #8
 80012a4:	438a      	bics	r2, r1
 80012a6:	701a      	strb	r2, [r3, #0]
	sysTime[SYSTIME_TEN_MS]++;
 80012a8:	4b32      	ldr	r3, [pc, #200]	; (8001374 <clkHandler+0xf8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	4b31      	ldr	r3, [pc, #196]	; (8001374 <clkHandler+0xf8>)
 80012b0:	601a      	str	r2, [r3, #0]
#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <clkHandler+0xf8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2164      	movs	r1, #100	; 0x64
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7fe ffbd 	bl	8000238 <__aeabi_uidivmod>
 80012be:	1e0b      	subs	r3, r1, #0
 80012c0:	d109      	bne.n	80012d6 <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <clkHandler+0xf8>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <clkHandler+0xf8>)
 80012ca:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <clkHandler+0xf4>)
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	2102      	movs	r1, #2
 80012d2:	430a      	orrs	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <clkHandler+0xf4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	079b      	lsls	r3, r3, #30
 80012dc:	0fdb      	lsrs	r3, r3, #31
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d042      	beq.n	800136a <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <clkHandler+0xf8>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	213c      	movs	r1, #60	; 0x3c
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7fe ffa4 	bl	8000238 <__aeabi_uidivmod>
 80012f0:	1e0b      	subs	r3, r1, #0
 80012f2:	d110      	bne.n	8001316 <clkHandler+0x9a>
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <clkHandler+0xf8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00c      	beq.n	8001316 <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <clkHandler+0xf8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <clkHandler+0xf8>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <clkHandler+0xf8>)
 800130a:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <clkHandler+0xf4>)
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	2104      	movs	r1, #4
 8001312:	430a      	orrs	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <clkHandler+0xf4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	075b      	lsls	r3, r3, #29
 800131c:	0fdb      	lsrs	r3, r3, #31
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d022      	beq.n	800136a <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <clkHandler+0xf8>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	213c      	movs	r1, #60	; 0x3c
 800132a:	0018      	movs	r0, r3
 800132c:	f7fe ff84 	bl	8000238 <__aeabi_uidivmod>
 8001330:	1e0b      	subs	r3, r1, #0
 8001332:	d11a      	bne.n	800136a <clkHandler+0xee>
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <clkHandler+0xf8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d016      	beq.n	800136a <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <clkHandler+0xf8>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <clkHandler+0xf8>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <clkHandler+0xf8>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <clkHandler+0xf8>)
 8001350:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <clkHandler+0xf4>)
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	2108      	movs	r1, #8
 8001358:	430a      	orrs	r2, r1
 800135a:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <clkHandler+0xf8>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b16      	cmp	r3, #22
 8001362:	d902      	bls.n	800136a <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <clkHandler+0xf8>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000630 	.word	0x20000630
 8001374:	2000023c 	.word	0x2000023c

08001378 <buttonDebounce>:

void buttonDebounce(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	flags.buttons.butt0_ver = 0;
 800137c:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <buttonDebounce+0xf0>)
 800137e:	791a      	ldrb	r2, [r3, #4]
 8001380:	2102      	movs	r1, #2
 8001382:	438a      	bics	r2, r1
 8001384:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 8001386:	4b38      	ldr	r3, [pc, #224]	; (8001468 <buttonDebounce+0xf0>)
 8001388:	791a      	ldrb	r2, [r3, #4]
 800138a:	2108      	movs	r1, #8
 800138c:	438a      	bics	r2, r1
 800138e:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)
 8001390:	4b35      	ldr	r3, [pc, #212]	; (8001468 <buttonDebounce+0xf0>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	07db      	lsls	r3, r3, #31
 8001396:	0fdb      	lsrs	r3, r3, #31
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d02c      	beq.n	80013f8 <buttonDebounce+0x80>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	009a      	lsls	r2, r3, #2
 80013a2:	2390      	movs	r3, #144	; 0x90
 80013a4:	05db      	lsls	r3, r3, #23
 80013a6:	0011      	movs	r1, r2
 80013a8:	0018      	movs	r0, r3
 80013aa:	f002 f92f 	bl	800360c <HAL_GPIO_ReadPin>
 80013ae:	0003      	movs	r3, r0
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d107      	bne.n	80013c4 <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <buttonDebounce+0xf4>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	3301      	adds	r3, #1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <buttonDebounce+0xf4>)
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	e007      	b.n	80013d4 <buttonDebounce+0x5c>
		}
		else
		{
			button0_Debounce = 0;
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <buttonDebounce+0xf4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <buttonDebounce+0xf0>)
 80013cc:	791a      	ldrb	r2, [r3, #4]
 80013ce:	2101      	movs	r1, #1
 80013d0:	438a      	bics	r2, r1
 80013d2:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <buttonDebounce+0xf4>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d90c      	bls.n	80013f8 <buttonDebounce+0x80>
		{
			flags.buttons.butt0_ver = 1;
 80013de:	4b22      	ldr	r3, [pc, #136]	; (8001468 <buttonDebounce+0xf0>)
 80013e0:	791a      	ldrb	r2, [r3, #4]
 80013e2:	2102      	movs	r1, #2
 80013e4:	430a      	orrs	r2, r1
 80013e6:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <buttonDebounce+0xf0>)
 80013ea:	791a      	ldrb	r2, [r3, #4]
 80013ec:	2101      	movs	r1, #1
 80013ee:	438a      	bics	r2, r1
 80013f0:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <buttonDebounce+0xf4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <buttonDebounce+0xf0>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	075b      	lsls	r3, r3, #29
 80013fe:	0fdb      	lsrs	r3, r3, #31
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d02c      	beq.n	8001460 <buttonDebounce+0xe8>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	005a      	lsls	r2, r3, #1
 800140a:	2390      	movs	r3, #144	; 0x90
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	0011      	movs	r1, r2
 8001410:	0018      	movs	r0, r3
 8001412:	f002 f8fb 	bl	800360c <HAL_GPIO_ReadPin>
 8001416:	0003      	movs	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d107      	bne.n	800142c <buttonDebounce+0xb4>
		{
			button1_Debounce++;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <buttonDebounce+0xf8>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	3301      	adds	r3, #1
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <buttonDebounce+0xf8>)
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	e007      	b.n	800143c <buttonDebounce+0xc4>
		}
		else
		{
			button1_Debounce = 0;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <buttonDebounce+0xf8>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <buttonDebounce+0xf0>)
 8001434:	791a      	ldrb	r2, [r3, #4]
 8001436:	2104      	movs	r1, #4
 8001438:	438a      	bics	r2, r1
 800143a:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <buttonDebounce+0xf8>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b04      	cmp	r3, #4
 8001444:	d90c      	bls.n	8001460 <buttonDebounce+0xe8>
		{
			flags.buttons.butt1_ver = 1;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <buttonDebounce+0xf0>)
 8001448:	791a      	ldrb	r2, [r3, #4]
 800144a:	2108      	movs	r1, #8
 800144c:	430a      	orrs	r2, r1
 800144e:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <buttonDebounce+0xf0>)
 8001452:	791a      	ldrb	r2, [r3, #4]
 8001454:	2104      	movs	r1, #4
 8001456:	438a      	bics	r2, r1
 8001458:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <buttonDebounce+0xf8>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	20000630 	.word	0x20000630
 800146c:	2000024c 	.word	0x2000024c
 8001470:	2000024d 	.word	0x2000024d

08001474 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.ui.error && (UI_State != ERROR))
 8001478:	4b97      	ldr	r3, [pc, #604]	; (80016d8 <UI_Handler+0x264>)
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	075b      	lsls	r3, r3, #29
 800147e:	0fdb      	lsrs	r3, r3, #31
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <UI_Handler+0x2a>
 8001486:	4b95      	ldr	r3, [pc, #596]	; (80016dc <UI_Handler+0x268>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d007      	beq.n	800149e <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 800148e:	4b93      	ldr	r3, [pc, #588]	; (80016dc <UI_Handler+0x268>)
 8001490:	2203      	movs	r2, #3
 8001492:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001494:	4b92      	ldr	r3, [pc, #584]	; (80016e0 <UI_Handler+0x26c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <UI_Handler+0x270>)
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e05e      	b.n	800155c <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 800149e:	4b8e      	ldr	r3, [pc, #568]	; (80016d8 <UI_Handler+0x264>)
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	071b      	lsls	r3, r3, #28
 80014a4:	0fdb      	lsrs	r3, r3, #31
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d010      	beq.n	80014ce <UI_Handler+0x5a>
 80014ac:	4b8b      	ldr	r3, [pc, #556]	; (80016dc <UI_Handler+0x268>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10c      	bne.n	80014ce <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 80014b4:	4b89      	ldr	r3, [pc, #548]	; (80016dc <UI_Handler+0x268>)
 80014b6:	2204      	movs	r2, #4
 80014b8:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80014ba:	4b89      	ldr	r3, [pc, #548]	; (80016e0 <UI_Handler+0x26c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b89      	ldr	r3, [pc, #548]	; (80016e4 <UI_Handler+0x270>)
 80014c0:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 80014c2:	4b85      	ldr	r3, [pc, #532]	; (80016d8 <UI_Handler+0x264>)
 80014c4:	7c1a      	ldrb	r2, [r3, #16]
 80014c6:	2108      	movs	r1, #8
 80014c8:	438a      	bics	r2, r1
 80014ca:	741a      	strb	r2, [r3, #16]
 80014cc:	e046      	b.n	800155c <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 80014ce:	4b82      	ldr	r3, [pc, #520]	; (80016d8 <UI_Handler+0x264>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	06db      	lsls	r3, r3, #27
 80014d4:	0fdb      	lsrs	r3, r3, #31
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d010      	beq.n	80014fe <UI_Handler+0x8a>
 80014dc:	4b7f      	ldr	r3, [pc, #508]	; (80016dc <UI_Handler+0x268>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10c      	bne.n	80014fe <UI_Handler+0x8a>
	{
		UI_State = DONE;
 80014e4:	4b7d      	ldr	r3, [pc, #500]	; (80016dc <UI_Handler+0x268>)
 80014e6:	2205      	movs	r2, #5
 80014e8:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80014ea:	4b7d      	ldr	r3, [pc, #500]	; (80016e0 <UI_Handler+0x26c>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <UI_Handler+0x270>)
 80014f0:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 80014f2:	4b79      	ldr	r3, [pc, #484]	; (80016d8 <UI_Handler+0x264>)
 80014f4:	7c1a      	ldrb	r2, [r3, #16]
 80014f6:	2110      	movs	r1, #16
 80014f8:	438a      	bics	r2, r1
 80014fa:	741a      	strb	r2, [r3, #16]
 80014fc:	e02e      	b.n	800155c <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 80014fe:	4b76      	ldr	r3, [pc, #472]	; (80016d8 <UI_Handler+0x264>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	079b      	lsls	r3, r3, #30
 8001504:	0fdb      	lsrs	r3, r3, #31
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d010      	beq.n	800152e <UI_Handler+0xba>
 800150c:	4b73      	ldr	r3, [pc, #460]	; (80016dc <UI_Handler+0x268>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10c      	bne.n	800152e <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 8001514:	4b71      	ldr	r3, [pc, #452]	; (80016dc <UI_Handler+0x268>)
 8001516:	2202      	movs	r2, #2
 8001518:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800151a:	4b71      	ldr	r3, [pc, #452]	; (80016e0 <UI_Handler+0x26c>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b71      	ldr	r3, [pc, #452]	; (80016e4 <UI_Handler+0x270>)
 8001520:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 8001522:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <UI_Handler+0x264>)
 8001524:	7c1a      	ldrb	r2, [r3, #16]
 8001526:	2102      	movs	r1, #2
 8001528:	438a      	bics	r2, r1
 800152a:	741a      	strb	r2, [r3, #16]
 800152c:	e016      	b.n	800155c <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 800152e:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <UI_Handler+0x264>)
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	07db      	lsls	r3, r3, #31
 8001534:	0fdb      	lsrs	r3, r3, #31
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00f      	beq.n	800155c <UI_Handler+0xe8>
 800153c:	4b67      	ldr	r3, [pc, #412]	; (80016dc <UI_Handler+0x268>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10b      	bne.n	800155c <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 8001544:	4b65      	ldr	r3, [pc, #404]	; (80016dc <UI_Handler+0x268>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800154a:	4b65      	ldr	r3, [pc, #404]	; (80016e0 <UI_Handler+0x26c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <UI_Handler+0x270>)
 8001550:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 8001552:	4b61      	ldr	r3, [pc, #388]	; (80016d8 <UI_Handler+0x264>)
 8001554:	7c1a      	ldrb	r2, [r3, #16]
 8001556:	2101      	movs	r1, #1
 8001558:	438a      	bics	r2, r1
 800155a:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 800155c:	4b5f      	ldr	r3, [pc, #380]	; (80016dc <UI_Handler+0x268>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d900      	bls.n	8001566 <UI_Handler+0xf2>
 8001564:	e0a0      	b.n	80016a8 <UI_Handler+0x234>
 8001566:	009a      	lsls	r2, r3, #2
 8001568:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <UI_Handler+0x274>)
 800156a:	18d3      	adds	r3, r2, r3
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	015b      	lsls	r3, r3, #5
 8001574:	485d      	ldr	r0, [pc, #372]	; (80016ec <UI_Handler+0x278>)
 8001576:	2201      	movs	r2, #1
 8001578:	0019      	movs	r1, r3
 800157a:	f002 f864 	bl	8003646 <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)
 800157e:	4b58      	ldr	r3, [pc, #352]	; (80016e0 <UI_Handler+0x26c>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <UI_Handler+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b31      	cmp	r3, #49	; 0x31
 800158a:	d800      	bhi.n	800158e <UI_Handler+0x11a>
 800158c:	e097      	b.n	80016be <UI_Handler+0x24a>
		{
			UI_State = OFF;
 800158e:	4b53      	ldr	r3, [pc, #332]	; (80016dc <UI_Handler+0x268>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	015b      	lsls	r3, r3, #5
 8001598:	4854      	ldr	r0, [pc, #336]	; (80016ec <UI_Handler+0x278>)
 800159a:	2200      	movs	r2, #0
 800159c:	0019      	movs	r1, r3
 800159e:	f002 f852 	bl	8003646 <HAL_GPIO_WritePin>
		}
		break;
 80015a2:	e08c      	b.n	80016be <UI_Handler+0x24a>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	015b      	lsls	r3, r3, #5
 80015a8:	4850      	ldr	r0, [pc, #320]	; (80016ec <UI_Handler+0x278>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	0019      	movs	r1, r3
 80015ae:	f002 f84a 	bl	8003646 <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)
 80015b2:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <UI_Handler+0x26c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <UI_Handler+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b63      	cmp	r3, #99	; 0x63
 80015be:	d800      	bhi.n	80015c2 <UI_Handler+0x14e>
 80015c0:	e07f      	b.n	80016c2 <UI_Handler+0x24e>
		{
			UI_State = OFF;
 80015c2:	4b46      	ldr	r3, [pc, #280]	; (80016dc <UI_Handler+0x268>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	015b      	lsls	r3, r3, #5
 80015cc:	4847      	ldr	r0, [pc, #284]	; (80016ec <UI_Handler+0x278>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	0019      	movs	r1, r3
 80015d2:	f002 f838 	bl	8003646 <HAL_GPIO_WritePin>
		}
		break;
 80015d6:	e074      	b.n	80016c2 <UI_Handler+0x24e>

	case ERROR:
		if(!flags.ui.error)
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <UI_Handler+0x264>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	075b      	lsls	r3, r3, #29
 80015de:	0fdb      	lsrs	r3, r3, #31
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <UI_Handler+0x178>
			UI_State = OFF;
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <UI_Handler+0x268>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 80015ec:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <UI_Handler+0x26c>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b3c      	ldr	r3, [pc, #240]	; (80016e4 <UI_Handler+0x270>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2132      	movs	r1, #50	; 0x32
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7fe fe1d 	bl	8000238 <__aeabi_uidivmod>
 80015fe:	1e0b      	subs	r3, r1, #0
 8001600:	d161      	bne.n	80016c6 <UI_Handler+0x252>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	015b      	lsls	r3, r3, #5
 8001606:	4a39      	ldr	r2, [pc, #228]	; (80016ec <UI_Handler+0x278>)
 8001608:	0019      	movs	r1, r3
 800160a:	0010      	movs	r0, r2
 800160c:	f002 f838 	bl	8003680 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	021a      	lsls	r2, r3, #8
 8001614:	2390      	movs	r3, #144	; 0x90
 8001616:	05db      	lsls	r3, r3, #23
 8001618:	0011      	movs	r1, r2
 800161a:	0018      	movs	r0, r3
 800161c:	f002 f830 	bl	8003680 <HAL_GPIO_TogglePin>
		}
		break;
 8001620:	e051      	b.n	80016c6 <UI_Handler+0x252>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))
 8001622:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <UI_Handler+0x26c>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <UI_Handler+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2123      	movs	r1, #35	; 0x23
 800162e:	0018      	movs	r0, r3
 8001630:	f7fe fe02 	bl	8000238 <__aeabi_uidivmod>
 8001634:	1e0b      	subs	r3, r1, #0
 8001636:	d106      	bne.n	8001646 <UI_Handler+0x1d2>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	015b      	lsls	r3, r3, #5
 800163c:	4a2b      	ldr	r2, [pc, #172]	; (80016ec <UI_Handler+0x278>)
 800163e:	0019      	movs	r1, r3
 8001640:	0010      	movs	r0, r2
 8001642:	f002 f81d 	bl	8003680 <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <UI_Handler+0x26c>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <UI_Handler+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2bd0      	cmp	r3, #208	; 0xd0
 8001652:	d93a      	bls.n	80016ca <UI_Handler+0x256>
			UI_State = OFF;
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <UI_Handler+0x268>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
		break;
 800165a:	e036      	b.n	80016ca <UI_Handler+0x256>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <UI_Handler+0x26c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <UI_Handler+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2132      	movs	r1, #50	; 0x32
 8001668:	0018      	movs	r0, r3
 800166a:	f7fe fde5 	bl	8000238 <__aeabi_uidivmod>
 800166e:	1e0b      	subs	r3, r1, #0
 8001670:	d10d      	bne.n	800168e <UI_Handler+0x21a>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	015b      	lsls	r3, r3, #5
 8001676:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <UI_Handler+0x278>)
 8001678:	0019      	movs	r1, r3
 800167a:	0010      	movs	r0, r2
 800167c:	f002 f800 	bl	8003680 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <UI_Handler+0x27c>)
 8001686:	0019      	movs	r1, r3
 8001688:	0010      	movs	r0, r2
 800168a:	f001 fff9 	bl	8003680 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <UI_Handler+0x26c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <UI_Handler+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	1ad2      	subs	r2, r2, r3
 8001698:	2395      	movs	r3, #149	; 0x95
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	429a      	cmp	r2, r3
 800169e:	d916      	bls.n	80016ce <UI_Handler+0x25a>
			UI_State = OFF;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <UI_Handler+0x268>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
		break;
 80016a6:	e012      	b.n	80016ce <UI_Handler+0x25a>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	480f      	ldr	r0, [pc, #60]	; (80016ec <UI_Handler+0x278>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	0019      	movs	r1, r3
 80016b2:	f001 ffc8 	bl	8003646 <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
 80016b6:	2003      	movs	r0, #3
 80016b8:	f7ff f966 	bl	8000988 <setColour>
#endif
		break;
 80016bc:	e008      	b.n	80016d0 <UI_Handler+0x25c>
		break;
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	e006      	b.n	80016d0 <UI_Handler+0x25c>
		break;
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	e004      	b.n	80016d0 <UI_Handler+0x25c>
		break;
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	e002      	b.n	80016d0 <UI_Handler+0x25c>
		break;
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	e000      	b.n	80016d0 <UI_Handler+0x25c>
		break;
 80016ce:	46c0      	nop			; (mov r8, r8)

	}
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	20000630 	.word	0x20000630
 80016dc:	2000024e 	.word	0x2000024e
 80016e0:	2000023c 	.word	0x2000023c
 80016e4:	20000250 	.word	0x20000250
 80016e8:	0800d2ac 	.word	0x0800d2ac
 80016ec:	48000800 	.word	0x48000800
 80016f0:	48000400 	.word	0x48000400

080016f4 <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;

	flags.meas.measComplete = 0;
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <measHandler+0x154>)
 80016fa:	7d1a      	ldrb	r2, [r3, #20]
 80016fc:	2102      	movs	r1, #2
 80016fe:	438a      	bics	r2, r1
 8001700:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 8001702:	4b51      	ldr	r3, [pc, #324]	; (8001848 <measHandler+0x154>)
 8001704:	7d1a      	ldrb	r2, [r3, #20]
 8001706:	2110      	movs	r1, #16
 8001708:	438a      	bics	r2, r1
 800170a:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 800170c:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <measHandler+0x154>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	07db      	lsls	r3, r3, #31
 8001712:	0fdb      	lsrs	r3, r3, #31
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d049      	beq.n	80017ae <measHandler+0xba>
	{
		if(!flags.meas.measRunning)
 800171a:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <measHandler+0x154>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	071b      	lsls	r3, r3, #28
 8001720:	0fdb      	lsrs	r3, r3, #31
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d138      	bne.n	800179a <measHandler+0xa6>
		{
			flags.meas.measRunning = 1;
 8001728:	4b47      	ldr	r3, [pc, #284]	; (8001848 <measHandler+0x154>)
 800172a:	7d1a      	ldrb	r2, [r3, #20]
 800172c:	2108      	movs	r1, #8
 800172e:	430a      	orrs	r2, r1
 8001730:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 8001732:	f000 fc55 	bl	8001fe0 <currentPhase>
 8001736:	0003      	movs	r3, r0
 8001738:	2b05      	cmp	r3, #5
 800173a:	d004      	beq.n	8001746 <measHandler+0x52>
 800173c:	f000 fc50 	bl	8001fe0 <currentPhase>
 8001740:	0003      	movs	r3, r0
 8001742:	2b06      	cmp	r3, #6
 8001744:	d114      	bne.n	8001770 <measHandler+0x7c>
			{
				flags.meas.onlyBattery = 1;
 8001746:	4b40      	ldr	r3, [pc, #256]	; (8001848 <measHandler+0x154>)
 8001748:	7d1a      	ldrb	r2, [r3, #20]
 800174a:	2120      	movs	r1, #32
 800174c:	430a      	orrs	r2, r1
 800174e:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8001750:	4b3e      	ldr	r3, [pc, #248]	; (800184c <measHandler+0x158>)
 8001752:	220d      	movs	r2, #13
 8001754:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8001756:	4b3d      	ldr	r3, [pc, #244]	; (800184c <measHandler+0x158>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	1e59      	subs	r1, r3, #1
 800175c:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <measHandler+0x15c>)
 800175e:	4a3d      	ldr	r2, [pc, #244]	; (8001854 <measHandler+0x160>)
 8001760:	0089      	lsls	r1, r1, #2
 8001762:	588a      	ldr	r2, [r1, r2]
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 8001766:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <measHandler+0x164>)
 8001768:	0018      	movs	r0, r3
 800176a:	f001 f89b 	bl	80028a4 <HAL_ADC_Start_IT>
 800176e:	e019      	b.n	80017a4 <measHandler+0xb0>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 8001770:	4b35      	ldr	r3, [pc, #212]	; (8001848 <measHandler+0x154>)
 8001772:	7d1a      	ldrb	r2, [r3, #20]
 8001774:	2120      	movs	r1, #32
 8001776:	438a      	bics	r2, r1
 8001778:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 800177a:	4b34      	ldr	r3, [pc, #208]	; (800184c <measHandler+0x158>)
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8001780:	4b32      	ldr	r3, [pc, #200]	; (800184c <measHandler+0x158>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	1e59      	subs	r1, r3, #1
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <measHandler+0x15c>)
 8001788:	4a32      	ldr	r2, [pc, #200]	; (8001854 <measHandler+0x160>)
 800178a:	0089      	lsls	r1, r1, #2
 800178c:	588a      	ldr	r2, [r1, r2]
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 8001790:	4b31      	ldr	r3, [pc, #196]	; (8001858 <measHandler+0x164>)
 8001792:	0018      	movs	r0, r3
 8001794:	f001 f886 	bl	80028a4 <HAL_ADC_Start_IT>
 8001798:	e004      	b.n	80017a4 <measHandler+0xb0>
			}
		}
		else
		{
			flags.meas.measConflict = 1;
 800179a:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <measHandler+0x154>)
 800179c:	7d1a      	ldrb	r2, [r3, #20]
 800179e:	2110      	movs	r1, #16
 80017a0:	430a      	orrs	r2, r1
 80017a2:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 80017a4:	4b28      	ldr	r3, [pc, #160]	; (8001848 <measHandler+0x154>)
 80017a6:	7d1a      	ldrb	r2, [r3, #20]
 80017a8:	2101      	movs	r1, #1
 80017aa:	438a      	bics	r2, r1
 80017ac:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING)
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <measHandler+0x158>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d045      	beq.n	8001842 <measHandler+0x14e>
	{
		if(flags.meas.measDataReady)
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <measHandler+0x154>)
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	075b      	lsls	r3, r3, #29
 80017bc:	0fdb      	lsrs	r3, r3, #31
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d03e      	beq.n	8001842 <measHandler+0x14e>
		{
			flags.meas.measDataReady = 0;
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <measHandler+0x154>)
 80017c6:	7d1a      	ldrb	r2, [r3, #20]
 80017c8:	2104      	movs	r1, #4
 80017ca:	438a      	bics	r2, r1
 80017cc:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <measHandler+0x158>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b0d      	cmp	r3, #13
 80017d4:	d118      	bne.n	8001808 <measHandler+0x114>
			{
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <measHandler+0x158>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	1e5c      	subs	r4, r3, #1
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <measHandler+0x164>)
 80017de:	0018      	movs	r0, r3
 80017e0:	f001 f91c 	bl	8002a1c <HAL_ADC_GetValue>
 80017e4:	0001      	movs	r1, r0
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <measHandler+0x168>)
 80017e8:	00a2      	lsls	r2, r4, #2
 80017ea:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <measHandler+0x154>)
 80017ee:	7d1a      	ldrb	r2, [r3, #20]
 80017f0:	2102      	movs	r1, #2
 80017f2:	430a      	orrs	r2, r1
 80017f4:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <measHandler+0x154>)
 80017f8:	7d1a      	ldrb	r2, [r3, #20]
 80017fa:	2108      	movs	r1, #8
 80017fc:	438a      	bics	r2, r1
 80017fe:	751a      	strb	r2, [r3, #20]
				ADC_State = ADC_WAITING;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <measHandler+0x158>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_IT(&hadc);
			}
		}
	}
}
 8001806:	e01c      	b.n	8001842 <measHandler+0x14e>
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <measHandler+0x158>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	1e5c      	subs	r4, r3, #1
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <measHandler+0x164>)
 8001810:	0018      	movs	r0, r3
 8001812:	f001 f903 	bl	8002a1c <HAL_ADC_GetValue>
 8001816:	0001      	movs	r1, r0
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <measHandler+0x168>)
 800181a:	00a2      	lsls	r2, r4, #2
 800181c:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <measHandler+0x158>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	3302      	adds	r3, #2
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <measHandler+0x158>)
 8001828:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <measHandler+0x158>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	1e59      	subs	r1, r3, #1
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <measHandler+0x15c>)
 8001832:	4a08      	ldr	r2, [pc, #32]	; (8001854 <measHandler+0x160>)
 8001834:	0089      	lsls	r1, r1, #2
 8001836:	588a      	ldr	r2, [r1, r2]
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <measHandler+0x164>)
 800183c:	0018      	movs	r0, r3
 800183e:	f001 f831 	bl	80028a4 <HAL_ADC_Start_IT>
}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	20000630 	.word	0x20000630
 800184c:	20000254 	.word	0x20000254
 8001850:	40012400 	.word	0x40012400
 8001854:	0800d26c 	.word	0x0800d26c
 8001858:	2000064c 	.word	0x2000064c
 800185c:	200001fc 	.word	0x200001fc

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>

0800186a <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 8001872:	2018      	movs	r0, #24
 8001874:	f00b f84c 	bl	800c910 <malloc>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <createBuffer+0x1c>
	{
		return NULL;
 8001882:	2300      	movs	r3, #0
 8001884:	e022      	b.n	80018cc <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	0018      	movs	r0, r3
 800188a:	f00b f841 	bl	800c910 <malloc>
 800188e:	0003      	movs	r3, r0
 8001890:	001a      	movs	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <createBuffer+0x40>
	{
		free(buffer);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f00b f83f 	bl	800c924 <free>
		return NULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e010      	b.n	80018cc <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	1e5a      	subs	r2, r3, #1
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	751a      	strb	r2, [r3, #20]

	return buffer;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b004      	add	sp, #16
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	000a      	movs	r2, r1
 80018de:	1cfb      	adds	r3, r7, #3
 80018e0:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7d1b      	ldrb	r3, [r3, #20]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d101      	bne.n	80018ee <push+0x1a>
		return BUFFER_FULL;
 80018ea:	2302      	movs	r3, #2
 80018ec:	e025      	b.n	800193a <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	0019      	movs	r1, r3
 80018fa:	0010      	movs	r0, r2
 80018fc:	f7fe fd86 	bl	800040c <__aeabi_idivmod>
 8001900:	000b      	movs	r3, r1
 8001902:	001a      	movs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	18d3      	adds	r3, r2, r3
 800191c:	1cfa      	adds	r2, r7, #3
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	db01      	blt.n	8001932 <push+0x5e>
 800192e:	2202      	movs	r2, #2
 8001930:	e000      	b.n	8001934 <push+0x60>
 8001932:	2200      	movs	r2, #0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}

08001942 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6899      	ldr	r1, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	18cb      	adds	r3, r1, r3
 800195a:	429a      	cmp	r2, r3
 800195c:	da01      	bge.n	8001962 <pushStr+0x20>
		return BUFFER_FULL;
 800195e:	2302      	movs	r3, #2
 8001960:	e013      	b.n	800198a <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e00b      	b.n	8001980 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	18d3      	adds	r3, r2, r3
 800196e:	781a      	ldrb	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	0011      	movs	r1, r2
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff ffad 	bl	80018d4 <push>
	for(int i = 0; i < len; i++)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbef      	blt.n	8001968 <pushStr+0x26>
	}

	return BUFFER_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b006      	add	sp, #24
 8001990:	bd80      	pop	{r7, pc}

08001992 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7d1b      	ldrb	r3, [r3, #20]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <pop+0x16>
		return BUFFER_EMPTY;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e023      	b.n	80019f0 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	18d3      	adds	r3, r2, r3
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0019      	movs	r1, r3
 80019c4:	0010      	movs	r0, r2
 80019c6:	f7fe fd21 	bl	800040c <__aeabi_idivmod>
 80019ca:	000b      	movs	r3, r1
 80019cc:	001a      	movs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	4313      	orrs	r3, r2
 80019e4:	0fdb      	lsrs	r3, r3, #31
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	001a      	movs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <getCount+0x7c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 8001a04:	1dfb      	adds	r3, r7, #7
 8001a06:	222a      	movs	r2, #42	; 0x2a
 8001a08:	701a      	strb	r2, [r3, #0]
		answer = 0;
 8001a0a:	1dbb      	adds	r3, r7, #6
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 8001a10:	1dba      	adds	r2, r7, #6
 8001a12:	1df9      	adds	r1, r7, #7
 8001a14:	4818      	ldr	r0, [pc, #96]	; (8001a78 <getCount+0x80>)
 8001a16:	2364      	movs	r3, #100	; 0x64
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f004 fcea 	bl	80063f4 <HAL_SPI_TransmitReceive>
 8001a20:	1e03      	subs	r3, r0, #0
 8001a22:	d001      	beq.n	8001a28 <getCount+0x30>
			return 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e021      	b.n	8001a6c <getCount+0x74>
		regCount++;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <getCount+0x7c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <getCount+0x7c>)
 8001a32:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f000 fdd1 	bl	80025dc <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <getCount+0x7c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b63      	cmp	r3, #99	; 0x63
 8001a40:	d906      	bls.n	8001a50 <getCount+0x58>
		{
			flags.conErr = 1;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <getCount+0x84>)
 8001a44:	7e1a      	ldrb	r2, [r3, #24]
 8001a46:	2104      	movs	r1, #4
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	761a      	strb	r2, [r3, #24]
			return 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e00d      	b.n	8001a6c <getCount+0x74>
		}
	}
	while(answer != question);
 8001a50:	1dbb      	adds	r3, r7, #6
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1d3      	bne.n	8001a04 <getCount+0xc>

	regCount--;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <getCount+0x7c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <getCount+0x7c>)
 8001a66:	701a      	strb	r2, [r3, #0]

	return regCount;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <getCount+0x7c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b002      	add	sp, #8
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000691 	.word	0x20000691
 8001a78:	20000584 	.word	0x20000584
 8001a7c:	20000630 	.word	0x20000630

08001a80 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
	REG_CLR_ACTIVE;
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	019b      	lsls	r3, r3, #6
 8001a8a:	482f      	ldr	r0, [pc, #188]	; (8001b48 <regInit+0xc8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	0019      	movs	r1, r3
 8001a90:	f001 fdd9 	bl	8003646 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001a94:	2005      	movs	r0, #5
 8001a96:	f000 fda1 	bl	80025dc <HAL_Delay>
	REG_CLR_INACTIVE;
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	019b      	lsls	r3, r3, #6
 8001a9e:	482a      	ldr	r0, [pc, #168]	; (8001b48 <regInit+0xc8>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	f001 fdcf 	bl	8003646 <HAL_GPIO_WritePin>

	REG_DISABLE;
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	4826      	ldr	r0, [pc, #152]	; (8001b48 <regInit+0xc8>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	f001 fdc8 	bl	8003646 <HAL_GPIO_WritePin>

	if(getCount() == 0)
 8001ab6:	f7ff ff9f 	bl	80019f8 <getCount>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d101      	bne.n	8001ac2 <regInit+0x42>
	{
		return REG_CON_ERR;	//Connection error
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e03e      	b.n	8001b40 <regInit+0xc0>
	}

	regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <regInit+0xcc>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f00a ff22 	bl	800c910 <malloc>
 8001acc:	0003      	movs	r3, r0
 8001ace:	001a      	movs	r2, r3
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <regInit+0xd0>)
 8001ad2:	601a      	str	r2, [r3, #0]
	if(regValues == NULL)
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <regInit+0xd0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d104      	bne.n	8001ae6 <regInit+0x66>
	{
		regState = REG_ERR;
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <regInit+0xd4>)
 8001ade:	2202      	movs	r2, #2
 8001ae0:	701a      	strb	r2, [r3, #0]
		return REG_ERR;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e02c      	b.n	8001b40 <regInit+0xc0>
	}

	for(int i = 0; i < regCount; i++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	e008      	b.n	8001afe <regInit+0x7e>
	{
		regValues[i] = 0;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <regInit+0xd0>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	18d3      	adds	r3, r2, r3
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3301      	adds	r3, #1
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <regInit+0xcc>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	001a      	movs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4293      	cmp	r3, r2
 8001b08:	dbf0      	blt.n	8001aec <regInit+0x6c>
	}

	sendData();
 8001b0a:	f000 f827 	bl	8001b5c <sendData>

	REG_ENABLE;
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	480d      	ldr	r0, [pc, #52]	; (8001b48 <regInit+0xc8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	0019      	movs	r1, r3
 8001b18:	f001 fd95 	bl	8003646 <HAL_GPIO_WritePin>

	regState = (HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)? REG_OK : REG_ERR;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <regInit+0xd0>)
 8001b1e:	6819      	ldr	r1, [r3, #0]
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <regInit+0xcc>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <regInit+0xd8>)
 8001b28:	2364      	movs	r3, #100	; 0x64
 8001b2a:	f004 fb0b 	bl	8006144 <HAL_SPI_Transmit>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d101      	bne.n	8001b36 <regInit+0xb6>
 8001b32:	2200      	movs	r2, #0
 8001b34:	e000      	b.n	8001b38 <regInit+0xb8>
 8001b36:	2202      	movs	r2, #2
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <regInit+0xd4>)
 8001b3a:	701a      	strb	r2, [r3, #0]
	return regState;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <regInit+0xd4>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	20000691 	.word	0x20000691
 8001b50:	2000068c 	.word	0x2000068c
 8001b54:	20000690 	.word	0x20000690
 8001b58:	20000584 	.word	0x20000584

08001b5c <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <sendData+0x54>)
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <sendData+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4813      	ldr	r0, [pc, #76]	; (8001bb8 <sendData+0x5c>)
 8001b6c:	2364      	movs	r3, #100	; 0x64
 8001b6e:	f004 fae9 	bl	8006144 <HAL_SPI_Transmit>
 8001b72:	1e03      	subs	r3, r0, #0
 8001b74:	d114      	bne.n	8001ba0 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	01db      	lsls	r3, r3, #7
 8001b7a:	4810      	ldr	r0, [pc, #64]	; (8001bbc <sendData+0x60>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	0019      	movs	r1, r3
 8001b80:	f001 fd61 	bl	8003646 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f000 fd29 	bl	80025dc <HAL_Delay>
		REG_RCLK_LOW;
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	01db      	lsls	r3, r3, #7
 8001b8e:	480b      	ldr	r0, [pc, #44]	; (8001bbc <sendData+0x60>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	0019      	movs	r1, r3
 8001b94:	f001 fd57 	bl	8003646 <HAL_GPIO_WritePin>

		regState = REG_OK;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <sendData+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e002      	b.n	8001ba6 <sendData+0x4a>
	}
	else
	{
		regState = REG_ERR;
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <sendData+0x64>)
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	701a      	strb	r2, [r3, #0]
	}

	return regState;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <sendData+0x64>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
}
 8001baa:	0018      	movs	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2000068c 	.word	0x2000068c
 8001bb4:	20000691 	.word	0x20000691
 8001bb8:	20000584 	.word	0x20000584
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	20000690 	.word	0x20000690

08001bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_MspInit+0x44>)
 8001bcc:	699a      	ldr	r2, [r3, #24]
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_MspInit+0x44>)
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	619a      	str	r2, [r3, #24]
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_MspInit+0x44>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4013      	ands	r3, r2
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_MspInit+0x44>)
 8001be4:	69da      	ldr	r2, [r3, #28]
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_MspInit+0x44>)
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	0549      	lsls	r1, r1, #21
 8001bec:	430a      	orrs	r2, r1
 8001bee:	61da      	str	r2, [r3, #28]
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_MspInit+0x44>)
 8001bf2:	69da      	ldr	r2, [r3, #28]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	055b      	lsls	r3, r3, #21
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b08d      	sub	sp, #52	; 0x34
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	241c      	movs	r4, #28
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	0018      	movs	r0, r3
 8001c1a:	2314      	movs	r3, #20
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	2100      	movs	r1, #0
 8001c20:	f00a fe93 	bl	800c94a <memset>
  if(hadc->Instance==ADC1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a3a      	ldr	r2, [pc, #232]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d16d      	bne.n	8001d0a <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c2e:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	0089      	lsls	r1, r1, #2
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	619a      	str	r2, [r3, #24]
 8001c3c:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c3e:	699a      	ldr	r2, [r3, #24]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	4b33      	ldr	r3, [pc, #204]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0309      	lsls	r1, r1, #12
 8001c54:	430a      	orrs	r2, r1
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	031b      	lsls	r3, r3, #12
 8001c60:	4013      	ands	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	0289      	lsls	r1, r1, #10
 8001c70:	430a      	orrs	r2, r1
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	02c9      	lsls	r1, r1, #11
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	615a      	str	r2, [r3, #20]
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	02db      	lsls	r3, r3, #11
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c9e:	193b      	adds	r3, r7, r4
 8001ca0:	223f      	movs	r2, #63	; 0x3f
 8001ca2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca4:	193b      	adds	r3, r7, r4
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	193b      	adds	r3, r7, r4
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb0:	193b      	adds	r3, r7, r4
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <HAL_ADC_MspInit+0x110>)
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	f001 fb30 	bl	800331c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001cbc:	193b      	adds	r3, r7, r4
 8001cbe:	22ff      	movs	r2, #255	; 0xff
 8001cc0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc2:	193b      	adds	r3, r7, r4
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	193b      	adds	r3, r7, r4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	193a      	adds	r2, r7, r4
 8001cd0:	2390      	movs	r3, #144	; 0x90
 8001cd2:	05db      	lsls	r3, r3, #23
 8001cd4:	0011      	movs	r1, r2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f001 fb20 	bl	800331c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cdc:	193b      	adds	r3, r7, r4
 8001cde:	2203      	movs	r2, #3
 8001ce0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce2:	193b      	adds	r3, r7, r4
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	193b      	adds	r3, r7, r4
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	193b      	adds	r3, r7, r4
 8001cf0:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <HAL_ADC_MspInit+0x114>)
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	0010      	movs	r0, r2
 8001cf6:	f001 fb11 	bl	800331c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	200c      	movs	r0, #12
 8001d00:	f001 fa5c 	bl	80031bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001d04:	200c      	movs	r0, #12
 8001d06:	f001 fa6e 	bl	80031e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b00d      	add	sp, #52	; 0x34
 8001d10:	bd90      	pop	{r4, r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	40012400 	.word	0x40012400
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	48000800 	.word	0x48000800
 8001d20:	48000400 	.word	0x48000400

08001d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	2414      	movs	r4, #20
 8001d2e:	193b      	adds	r3, r7, r4
 8001d30:	0018      	movs	r0, r3
 8001d32:	2314      	movs	r3, #20
 8001d34:	001a      	movs	r2, r3
 8001d36:	2100      	movs	r1, #0
 8001d38:	f00a fe07 	bl	800c94a <memset>
  if(hspi->Instance==SPI1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <HAL_SPI_MspInit+0x90>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d131      	bne.n	8001daa <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_SPI_MspInit+0x94>)
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_SPI_MspInit+0x94>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0149      	lsls	r1, r1, #5
 8001d50:	430a      	orrs	r2, r1
 8001d52:	619a      	str	r2, [r3, #24]
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_SPI_MspInit+0x94>)
 8001d56:	699a      	ldr	r2, [r3, #24]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	015b      	lsls	r3, r3, #5
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_SPI_MspInit+0x94>)
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_SPI_MspInit+0x94>)
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	02c9      	lsls	r1, r1, #11
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	615a      	str	r2, [r3, #20]
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_SPI_MspInit+0x94>)
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	02db      	lsls	r3, r3, #11
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d7e:	0021      	movs	r1, r4
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2238      	movs	r2, #56	; 0x38
 8001d84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	2202      	movs	r2, #2
 8001d8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	2203      	movs	r2, #3
 8001d96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <HAL_SPI_MspInit+0x98>)
 8001da2:	0019      	movs	r1, r3
 8001da4:	0010      	movs	r0, r2
 8001da6:	f001 fab9 	bl	800331c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b00b      	add	sp, #44	; 0x2c
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	40013000 	.word	0x40013000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	48000400 	.word	0x48000400

08001dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <HAL_TIM_Base_MspInit+0x48>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d115      	bne.n	8001dfe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_TIM_Base_MspInit+0x4c>)
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_TIM_Base_MspInit+0x4c>)
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	0049      	lsls	r1, r1, #1
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	61da      	str	r2, [r3, #28]
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_TIM_Base_MspInit+0x4c>)
 8001de2:	69da      	ldr	r2, [r3, #28]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	2013      	movs	r0, #19
 8001df4:	f001 f9e2 	bl	80031bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001df8:	2013      	movs	r0, #19
 8001dfa:	f001 f9f4 	bl	80031e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	46bd      	mov	sp, r7
 8001e02:	b004      	add	sp, #16
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	40002000 	.word	0x40002000
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b08b      	sub	sp, #44	; 0x2c
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	2414      	movs	r4, #20
 8001e1a:	193b      	adds	r3, r7, r4
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	2314      	movs	r3, #20
 8001e20:	001a      	movs	r2, r3
 8001e22:	2100      	movs	r1, #0
 8001e24:	f00a fd91 	bl	800c94a <memset>
  if(huart->Instance==USART3)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a20      	ldr	r2, [pc, #128]	; (8001eb0 <HAL_UART_MspInit+0xa0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d13a      	bne.n	8001ea8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_UART_MspInit+0xa4>)
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_UART_MspInit+0xa4>)
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	02c9      	lsls	r1, r1, #11
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	61da      	str	r2, [r3, #28]
 8001e40:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_UART_MspInit+0xa4>)
 8001e42:	69da      	ldr	r2, [r3, #28]
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	02db      	lsls	r3, r3, #11
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_UART_MspInit+0xa4>)
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_UART_MspInit+0xa4>)
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	0309      	lsls	r1, r1, #12
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	615a      	str	r2, [r3, #20]
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_UART_MspInit+0xa4>)
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	031b      	lsls	r3, r3, #12
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e6a:	193b      	adds	r3, r7, r4
 8001e6c:	22c0      	movs	r2, #192	; 0xc0
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	0021      	movs	r1, r4
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	2202      	movs	r2, #2
 8001e78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	2203      	movs	r2, #3
 8001e84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001e86:	187b      	adds	r3, r7, r1
 8001e88:	2201      	movs	r2, #1
 8001e8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <HAL_UART_MspInit+0xa8>)
 8001e90:	0019      	movs	r1, r3
 8001e92:	0010      	movs	r0, r2
 8001e94:	f001 fa42 	bl	800331c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	201d      	movs	r0, #29
 8001e9e:	f001 f98d 	bl	80031bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001ea2:	201d      	movs	r0, #29
 8001ea4:	f001 f99f 	bl	80031e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b00b      	add	sp, #44	; 0x2c
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	40004800 	.word	0x40004800
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48000800 	.word	0x48000800

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <NMI_Handler+0x4>

08001ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <HardFault_Handler+0x4>

08001ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ecc:	46c0      	nop			; (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee0:	f000 fb60 	bl	80025a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f001 fbe0 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	0018      	movs	r0, r3
 8001efe:	f001 fbdb 	bl	80036b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <ADC1_COMP_IRQHandler+0x14>)
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 fd90 	bl	8002a34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	2000064c 	.word	0x2000064c

08001f20 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <TIM14_IRQHandler+0x14>)
 8001f26:	0018      	movs	r0, r3
 8001f28:	f004 fea6 	bl	8006c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	200005e8 	.word	0x200005e8

08001f38 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <USART3_4_IRQHandler+0x14>)
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f005 fb08 	bl	8007554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	20000500 	.word	0x20000500

08001f50 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <USB_IRQHandler+0x14>)
 8001f56:	0018      	movs	r0, r3
 8001f58:	f001 fd00 	bl	800395c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	2000133c 	.word	0x2000133c

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	18d3      	adds	r3, r2, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d207      	bcs.n	8001fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f98:	f00a fc90 	bl	800c8bc <__errno>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	425b      	negs	r3, r3
 8001fa6:	e009      	b.n	8001fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	18d2      	adds	r2, r2, r3
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <_sbrk+0x64>)
 8001fb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b006      	add	sp, #24
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20004000 	.word	0x20004000
 8001fc8:	00000400 	.word	0x00000400
 8001fcc:	20000258 	.word	0x20000258
 8001fd0:	20001640 	.word	0x20001640

08001fd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001fd8:	46c0      	nop			; (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	return testPhase;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <currentPhase+0x10>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	2000025c 	.word	0x2000025c

08001ff4 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b092      	sub	sp, #72	; 0x48
 8001ff8:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 8001ffa:	4bd9      	ldr	r3, [pc, #868]	; (8002360 <testHandler+0x36c>)
 8001ffc:	7e1a      	ldrb	r2, [r3, #24]
 8001ffe:	2102      	movs	r1, #2
 8002000:	438a      	bics	r2, r1
 8002002:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8002004:	4bd6      	ldr	r3, [pc, #856]	; (8002360 <testHandler+0x36c>)
 8002006:	7b1b      	ldrb	r3, [r3, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d02f      	beq.n	8002072 <testHandler+0x7e>
	{
		if(testPhase == WAITING)
 8002012:	4bd4      	ldr	r3, [pc, #848]	; (8002364 <testHandler+0x370>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d126      	bne.n	8002068 <testHandler+0x74>
		{
			if(flags.conErr)
 800201a:	4bd1      	ldr	r3, [pc, #836]	; (8002360 <testHandler+0x36c>)
 800201c:	7e1b      	ldrb	r3, [r3, #24]
 800201e:	2204      	movs	r2, #4
 8002020:	4013      	ands	r3, r2
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01c      	beq.n	8002062 <testHandler+0x6e>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8002028:	211c      	movs	r1, #28
 800202a:	187b      	adds	r3, r7, r1
 800202c:	4ace      	ldr	r2, [pc, #824]	; (8002368 <testHandler+0x374>)
 800202e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002030:	c331      	stmia	r3!, {r0, r4, r5}
 8002032:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002034:	c331      	stmia	r3!, {r0, r4, r5}
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 800203a:	4bcc      	ldr	r3, [pc, #816]	; (800236c <testHandler+0x378>)
 800203c:	681c      	ldr	r4, [r3, #0]
 800203e:	000d      	movs	r5, r1
 8002040:	187b      	adds	r3, r7, r1
 8002042:	0018      	movs	r0, r3
 8002044:	f7fe f860 	bl	8000108 <strlen>
 8002048:	0003      	movs	r3, r0
 800204a:	001a      	movs	r2, r3
 800204c:	197b      	adds	r3, r7, r5
 800204e:	0019      	movs	r1, r3
 8002050:	0020      	movs	r0, r4
 8002052:	f7ff fc76 	bl	8001942 <pushStr>
				flags.instructions.startRequest = 0;
 8002056:	4bc2      	ldr	r3, [pc, #776]	; (8002360 <testHandler+0x36c>)
 8002058:	7b1a      	ldrb	r2, [r3, #12]
 800205a:	2101      	movs	r1, #1
 800205c:	438a      	bics	r2, r1
 800205e:	731a      	strb	r2, [r3, #12]
 8002060:	e007      	b.n	8002072 <testHandler+0x7e>
			}
			else
			{
				startTest();
 8002062:	f000 f995 	bl	8002390 <startTest>
 8002066:	e004      	b.n	8002072 <testHandler+0x7e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8002068:	4bbd      	ldr	r3, [pc, #756]	; (8002360 <testHandler+0x36c>)
 800206a:	7e1a      	ldrb	r2, [r3, #24]
 800206c:	2101      	movs	r1, #1
 800206e:	430a      	orrs	r2, r1
 8002070:	761a      	strb	r2, [r3, #24]
		}
	}
	if(flags.instructions.stopRequest)
 8002072:	4bbb      	ldr	r3, [pc, #748]	; (8002360 <testHandler+0x36c>)
 8002074:	7b1b      	ldrb	r3, [r3, #12]
 8002076:	2202      	movs	r2, #2
 8002078:	4013      	ands	r3, r2
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <testHandler+0x90>
	{
		stopTest();
 8002080:	f000 f9e8 	bl	8002454 <stopTest>
	}

	switch(testPhase)
 8002084:	4bb7      	ldr	r3, [pc, #732]	; (8002364 <testHandler+0x370>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b06      	cmp	r3, #6
 800208a:	d900      	bls.n	800208e <testHandler+0x9a>
 800208c:	e17b      	b.n	8002386 <testHandler+0x392>
 800208e:	009a      	lsls	r2, r3, #2
 8002090:	4bb7      	ldr	r3, [pc, #732]	; (8002370 <testHandler+0x37c>)
 8002092:	18d3      	adds	r3, r2, r3
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8002098:	4bb1      	ldr	r3, [pc, #708]	; (8002360 <testHandler+0x36c>)
 800209a:	7e1a      	ldrb	r2, [r3, #24]
 800209c:	2102      	movs	r1, #2
 800209e:	438a      	bics	r2, r1
 80020a0:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 80020a2:	e170      	b.n	8002386 <testHandler+0x392>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 80020a4:	4bae      	ldr	r3, [pc, #696]	; (8002360 <testHandler+0x36c>)
 80020a6:	7d1b      	ldrb	r3, [r3, #20]
 80020a8:	2202      	movs	r2, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d006      	beq.n	80020c0 <testHandler+0xcc>
		{
			testPhase++;
 80020b2:	4bac      	ldr	r3, [pc, #688]	; (8002364 <testHandler+0x370>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4baa      	ldr	r3, [pc, #680]	; (8002364 <testHandler+0x370>)
 80020bc:	701a      	strb	r2, [r3, #0]
		}
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
		{
			flags.meas.measRequest = 1;
		}
		break;
 80020be:	e146      	b.n	800234e <testHandler+0x35a>
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
 80020c0:	4bac      	ldr	r3, [pc, #688]	; (8002374 <testHandler+0x380>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d000      	beq.n	80020ca <testHandler+0xd6>
 80020c8:	e141      	b.n	800234e <testHandler+0x35a>
			flags.meas.measRequest = 1;
 80020ca:	4ba5      	ldr	r3, [pc, #660]	; (8002360 <testHandler+0x36c>)
 80020cc:	7d1a      	ldrb	r2, [r3, #20]
 80020ce:	2101      	movs	r1, #1
 80020d0:	430a      	orrs	r2, r1
 80020d2:	751a      	strb	r2, [r3, #20]
		break;
 80020d4:	e13b      	b.n	800234e <testHandler+0x35a>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 80020d6:	4ba8      	ldr	r3, [pc, #672]	; (8002378 <testHandler+0x384>)
 80020d8:	2201      	movs	r2, #1
 80020da:	2180      	movs	r1, #128	; 0x80
 80020dc:	0018      	movs	r0, r3
 80020de:	f001 fab2 	bl	8003646 <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 80020e2:	4ba5      	ldr	r3, [pc, #660]	; (8002378 <testHandler+0x384>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	2140      	movs	r1, #64	; 0x40
 80020e8:	0018      	movs	r0, r3
 80020ea:	f001 faac 	bl	8003646 <HAL_GPIO_WritePin>

		testPhase++;
 80020ee:	4b9d      	ldr	r3, [pc, #628]	; (8002364 <testHandler+0x370>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b9b      	ldr	r3, [pc, #620]	; (8002364 <testHandler+0x370>)
 80020f8:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 80020fa:	4b99      	ldr	r3, [pc, #612]	; (8002360 <testHandler+0x36c>)
 80020fc:	7e1a      	ldrb	r2, [r3, #24]
 80020fe:	2102      	movs	r1, #2
 8002100:	430a      	orrs	r2, r1
 8002102:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//blikání druhé progress led
 8002104:	4b9d      	ldr	r3, [pc, #628]	; (800237c <testHandler+0x388>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	781a      	ldrb	r2, [r3, #0]
 800210a:	4b9c      	ldr	r3, [pc, #624]	; (800237c <testHandler+0x388>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2120      	movs	r1, #32
 8002110:	430a      	orrs	r2, r1
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]
		sendData();
 8002116:	f7ff fd21 	bl	8001b5c <sendData>

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 800211a:	2301      	movs	r3, #1
 800211c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800211e:	e007      	b.n	8002130 <testHandler+0x13c>
		{
			sysTime[i] = 0;
 8002120:	4b94      	ldr	r3, [pc, #592]	; (8002374 <testHandler+0x380>)
 8002122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002124:	0092      	lsls	r2, r2, #2
 8002126:	2100      	movs	r1, #0
 8002128:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 800212a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800212c:	3301      	adds	r3, #1
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002132:	2b03      	cmp	r3, #3
 8002134:	ddf4      	ble.n	8002120 <testHandler+0x12c>
		}
		break;
 8002136:	e126      	b.n	8002386 <testHandler+0x392>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002138:	4b89      	ldr	r3, [pc, #548]	; (8002360 <testHandler+0x36c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2202      	movs	r2, #2
 800213e:	4013      	ands	r3, r2
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d026      	beq.n	8002194 <testHandler+0x1a0>
		{
			char time[9] = {0};
 8002146:	2510      	movs	r5, #16
 8002148:	197b      	adds	r3, r7, r5
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	3304      	adds	r3, #4
 8002150:	2205      	movs	r2, #5
 8002152:	2100      	movs	r1, #0
 8002154:	0018      	movs	r0, r3
 8002156:	f00a fbf8 	bl	800c94a <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 800215a:	4b86      	ldr	r3, [pc, #536]	; (8002374 <testHandler+0x380>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	223c      	movs	r2, #60	; 0x3c
 8002160:	1ad2      	subs	r2, r2, r3
 8002162:	4b84      	ldr	r3, [pc, #528]	; (8002374 <testHandler+0x380>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	213c      	movs	r1, #60	; 0x3c
 8002168:	1acc      	subs	r4, r1, r3
 800216a:	4b82      	ldr	r3, [pc, #520]	; (8002374 <testHandler+0x380>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2103      	movs	r1, #3
 8002170:	1acb      	subs	r3, r1, r3
 8002172:	4983      	ldr	r1, [pc, #524]	; (8002380 <testHandler+0x38c>)
 8002174:	1978      	adds	r0, r7, r5
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	0023      	movs	r3, r4
 800217a:	f00a fca9 	bl	800cad0 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 800217e:	4b7f      	ldr	r3, [pc, #508]	; (800237c <testHandler+0x388>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	4b7d      	ldr	r3, [pc, #500]	; (800237c <testHandler+0x388>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2110      	movs	r1, #16
 800218a:	404a      	eors	r2, r1
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]
			sendData();
 8002190:	f7ff fce4 	bl	8001b5c <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 8002194:	4b77      	ldr	r3, [pc, #476]	; (8002374 <testHandler+0x380>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <testHandler+0x1c0>
 800219c:	4b70      	ldr	r3, [pc, #448]	; (8002360 <testHandler+0x36c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2204      	movs	r2, #4
 80021a2:	4013      	ands	r3, r2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d004      	beq.n	80021b4 <testHandler+0x1c0>
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
#endif
		{
			flags.meas.measRequest = 1;
 80021aa:	4b6d      	ldr	r3, [pc, #436]	; (8002360 <testHandler+0x36c>)
 80021ac:	7d1a      	ldrb	r2, [r3, #20]
 80021ae:	2101      	movs	r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 10)	//___Po deseti minutách je měření u konce___//
 80021b4:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <testHandler+0x380>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	dc00      	bgt.n	80021be <testHandler+0x1ca>
 80021bc:	e0c9      	b.n	8002352 <testHandler+0x35e>
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
#endif
		{
			testPhase++;
 80021be:	4b69      	ldr	r3, [pc, #420]	; (8002364 <testHandler+0x370>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	3301      	adds	r3, #1
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <testHandler+0x370>)
 80021c8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80021ca:	e0c2      	b.n	8002352 <testHandler+0x35e>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 80021cc:	4b64      	ldr	r3, [pc, #400]	; (8002360 <testHandler+0x36c>)
 80021ce:	7d1b      	ldrb	r3, [r3, #20]
 80021d0:	2208      	movs	r2, #8
 80021d2:	4013      	ands	r3, r2
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d000      	beq.n	80021dc <testHandler+0x1e8>
 80021da:	e0bc      	b.n	8002356 <testHandler+0x362>
		{
			flags.ui.notice = 1;
 80021dc:	4b60      	ldr	r3, [pc, #384]	; (8002360 <testHandler+0x36c>)
 80021de:	7c1a      	ldrb	r2, [r3, #16]
 80021e0:	2108      	movs	r1, #8
 80021e2:	430a      	orrs	r2, r1
 80021e4:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 80021e6:	4b5e      	ldr	r3, [pc, #376]	; (8002360 <testHandler+0x36c>)
 80021e8:	7e1a      	ldrb	r2, [r3, #24]
 80021ea:	2102      	movs	r1, #2
 80021ec:	430a      	orrs	r2, r1
 80021ee:	761a      	strb	r2, [r3, #24]

			testPhase++;
 80021f0:	4b5c      	ldr	r3, [pc, #368]	; (8002364 <testHandler+0x370>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	4b5a      	ldr	r3, [pc, #360]	; (8002364 <testHandler+0x370>)
 80021fa:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 80021fc:	4b5e      	ldr	r3, [pc, #376]	; (8002378 <testHandler+0x384>)
 80021fe:	2200      	movs	r2, #0
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	0018      	movs	r0, r3
 8002204:	f001 fa1f 	bl	8003646 <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 8002208:	4b5b      	ldr	r3, [pc, #364]	; (8002378 <testHandler+0x384>)
 800220a:	2200      	movs	r2, #0
 800220c:	2140      	movs	r1, #64	; 0x40
 800220e:	0018      	movs	r0, r3
 8002210:	f001 fa19 	bl	8003646 <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8002214:	4b59      	ldr	r3, [pc, #356]	; (800237c <testHandler+0x388>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	4b58      	ldr	r3, [pc, #352]	; (800237c <testHandler+0x388>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2110      	movs	r1, #16
 8002220:	430a      	orrs	r2, r1
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 8002226:	4b55      	ldr	r3, [pc, #340]	; (800237c <testHandler+0x388>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	4b53      	ldr	r3, [pc, #332]	; (800237c <testHandler+0x388>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	430a      	orrs	r2, r1
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	701a      	strb	r2, [r3, #0]
			sendData();
 8002238:	f7ff fc90 	bl	8001b5c <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 800223c:	2301      	movs	r3, #1
 800223e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002240:	e007      	b.n	8002252 <testHandler+0x25e>
			{
				sysTime[i] = 0;
 8002242:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <testHandler+0x380>)
 8002244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	2100      	movs	r1, #0
 800224a:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 800224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224e:	3301      	adds	r3, #1
 8002250:	63bb      	str	r3, [r7, #56]	; 0x38
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002254:	2b03      	cmp	r3, #3
 8002256:	ddf4      	ble.n	8002242 <testHandler+0x24e>
			}
		}
		break;
 8002258:	e07d      	b.n	8002356 <testHandler+0x362>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <testHandler+0x36c>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2202      	movs	r2, #2
 8002260:	4013      	ands	r3, r2
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d025      	beq.n	80022b4 <testHandler+0x2c0>
		{
			char time[9] = {0};
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	3304      	adds	r3, #4
 8002270:	2205      	movs	r2, #5
 8002272:	2100      	movs	r1, #0
 8002274:	0018      	movs	r0, r3
 8002276:	f00a fb68 	bl	800c94a <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 800227a:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <testHandler+0x380>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	223c      	movs	r2, #60	; 0x3c
 8002280:	1ad2      	subs	r2, r2, r3
 8002282:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <testHandler+0x380>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	213c      	movs	r1, #60	; 0x3c
 8002288:	1acc      	subs	r4, r1, r3
 800228a:	4b3a      	ldr	r3, [pc, #232]	; (8002374 <testHandler+0x380>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2103      	movs	r1, #3
 8002290:	1acb      	subs	r3, r1, r3
 8002292:	493b      	ldr	r1, [pc, #236]	; (8002380 <testHandler+0x38c>)
 8002294:	1d38      	adds	r0, r7, #4
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	0023      	movs	r3, r4
 800229a:	f00a fc19 	bl	800cad0 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 800229e:	4b37      	ldr	r3, [pc, #220]	; (800237c <testHandler+0x388>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	4b35      	ldr	r3, [pc, #212]	; (800237c <testHandler+0x388>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2108      	movs	r1, #8
 80022aa:	404a      	eors	r2, r1
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	701a      	strb	r2, [r3, #0]
			sendData();
 80022b0:	f7ff fc54 	bl	8001b5c <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 80022b4:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <testHandler+0x380>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <testHandler+0x2e0>
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <testHandler+0x36c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2204      	movs	r2, #4
 80022c2:	4013      	ands	r3, r2
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <testHandler+0x2e0>
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
#endif
		{
			flags.meas.measRequest = 1;
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <testHandler+0x36c>)
 80022cc:	7d1a      	ldrb	r2, [r3, #20]
 80022ce:	2101      	movs	r1, #1
 80022d0:	430a      	orrs	r2, r1
 80022d2:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po třech minutách je měření u konce___//
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <testHandler+0x380>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	dd3e      	ble.n	800235a <testHandler+0x366>
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
#endif
		{
			testPhase++;
 80022dc:	4b21      	ldr	r3, [pc, #132]	; (8002364 <testHandler+0x370>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <testHandler+0x370>)
 80022e6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80022e8:	e037      	b.n	800235a <testHandler+0x366>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <testHandler+0x36c>)
 80022ec:	7d1b      	ldrb	r3, [r3, #20]
 80022ee:	2208      	movs	r2, #8
 80022f0:	4013      	ands	r3, r2
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d145      	bne.n	8002384 <testHandler+0x390>
		{
			flags.ui.done = 1;
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <testHandler+0x36c>)
 80022fa:	7c1a      	ldrb	r2, [r3, #16]
 80022fc:	2110      	movs	r1, #16
 80022fe:	430a      	orrs	r2, r1
 8002300:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <testHandler+0x36c>)
 8002304:	7e1a      	ldrb	r2, [r3, #24]
 8002306:	2102      	movs	r1, #2
 8002308:	430a      	orrs	r2, r1
 800230a:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <testHandler+0x388>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	781a      	ldrb	r2, [r3, #0]
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <testHandler+0x388>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2108      	movs	r1, #8
 8002318:	430a      	orrs	r2, r1
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <testHandler+0x388>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <testHandler+0x388>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2102      	movs	r1, #2
 800232a:	438a      	bics	r2, r1
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <testHandler+0x388>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <testHandler+0x388>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2101      	movs	r1, #1
 800233c:	438a      	bics	r2, r1
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]
			sendData();
 8002342:	f7ff fc0b 	bl	8001b5c <sendData>

			testPhase = WAITING;
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <testHandler+0x370>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800234c:	e01a      	b.n	8002384 <testHandler+0x390>
		break;
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	e019      	b.n	8002386 <testHandler+0x392>
		break;
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	e017      	b.n	8002386 <testHandler+0x392>
		break;
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	e015      	b.n	8002386 <testHandler+0x392>
		break;
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	e013      	b.n	8002386 <testHandler+0x392>
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	20000630 	.word	0x20000630
 8002364:	2000025c 	.word	0x2000025c
 8002368:	0800d1cc 	.word	0x0800d1cc
 800236c:	20000490 	.word	0x20000490
 8002370:	0800d2dc 	.word	0x0800d2dc
 8002374:	2000023c 	.word	0x2000023c
 8002378:	48000800 	.word	0x48000800
 800237c:	2000069c 	.word	0x2000069c
 8002380:	0800d1c0 	.word	0x0800d1c0
		break;
 8002384:	46c0      	nop			; (mov r8, r8)

	}
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b010      	add	sp, #64	; 0x40
 800238c:	bdb0      	pop	{r4, r5, r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)

08002390 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <startTest+0xa8>)
 8002398:	7c1a      	ldrb	r2, [r3, #16]
 800239a:	2101      	movs	r1, #1
 800239c:	430a      	orrs	r2, r1
 800239e:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 80023a0:	4b26      	ldr	r3, [pc, #152]	; (800243c <startTest+0xac>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <startTest+0xb0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <startTest+0xa8>)
 80023ae:	7e1a      	ldrb	r2, [r3, #24]
 80023b0:	2102      	movs	r1, #2
 80023b2:	430a      	orrs	r2, r1
 80023b4:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 80023b6:	4b23      	ldr	r3, [pc, #140]	; (8002444 <startTest+0xb4>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <startTest+0xb8>)
 80023bc:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	e008      	b.n	80023d6 <startTest+0x46>
	{
		regValues[i] = 0;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <startTest+0xb4>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	18d3      	adds	r3, r2, r3
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3301      	adds	r3, #1
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <startTest+0xbc>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	001a      	movs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4293      	cmp	r3, r2
 80023e0:	dbf0      	blt.n	80023c4 <startTest+0x34>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <startTest+0xb8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <startTest+0xb8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2120      	movs	r1, #32
 80023ee:	430a      	orrs	r2, r1
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <startTest+0xb8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <startTest+0xb8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2102      	movs	r1, #2
 8002400:	430a      	orrs	r2, r1
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 8002406:	f7ff fba9 	bl	8001b5c <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 800240a:	2301      	movs	r3, #1
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	e007      	b.n	8002420 <startTest+0x90>
	{
		sysTime[i] = 0;
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <startTest+0xc0>)
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	2100      	movs	r1, #0
 8002418:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	3301      	adds	r3, #1
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b03      	cmp	r3, #3
 8002424:	ddf4      	ble.n	8002410 <startTest+0x80>
	}

	flags.instructions.startRequest = 0;
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <startTest+0xa8>)
 8002428:	7b1a      	ldrb	r2, [r3, #12]
 800242a:	2101      	movs	r1, #1
 800242c:	438a      	bics	r2, r1
 800242e:	731a      	strb	r2, [r3, #12]
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000630 	.word	0x20000630
 800243c:	2000025c 	.word	0x2000025c
 8002440:	20000260 	.word	0x20000260
 8002444:	2000068c 	.word	0x2000068c
 8002448:	2000069c 	.word	0x2000069c
 800244c:	20000691 	.word	0x20000691
 8002450:	2000023c 	.word	0x2000023c

08002454 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <stopTest+0x5c>)
 800245a:	7c1a      	ldrb	r2, [r3, #16]
 800245c:	2102      	movs	r1, #2
 800245e:	430a      	orrs	r2, r1
 8002460:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <stopTest+0x60>)
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <stopTest+0x64>)
 800246a:	2200      	movs	r2, #0
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	0018      	movs	r0, r3
 8002470:	f001 f8e9 	bl	8003646 <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <stopTest+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	2140      	movs	r1, #64	; 0x40
 800247a:	0018      	movs	r0, r3
 800247c:	f001 f8e3 	bl	8003646 <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <stopTest+0x68>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <stopTest+0x68>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <stopTest+0x68>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2104      	movs	r1, #4
 8002494:	430a      	orrs	r2, r1
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]
	sendData();
 800249a:	f7ff fb5f 	bl	8001b5c <sendData>

	flags.instructions.stopRequest = 0;
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <stopTest+0x5c>)
 80024a0:	7b1a      	ldrb	r2, [r3, #12]
 80024a2:	2102      	movs	r1, #2
 80024a4:	438a      	bics	r2, r1
 80024a6:	731a      	strb	r2, [r3, #12]
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	20000630 	.word	0x20000630
 80024b4:	2000025c 	.word	0x2000025c
 80024b8:	48000800 	.word	0x48000800
 80024bc:	2000069c 	.word	0x2000069c

080024c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024c0:	480d      	ldr	r0, [pc, #52]	; (80024f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c4:	480d      	ldr	r0, [pc, #52]	; (80024fc <LoopForever+0x6>)
  ldr r1, =_edata
 80024c6:	490e      	ldr	r1, [pc, #56]	; (8002500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <LoopForever+0xe>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024cc:	e002      	b.n	80024d4 <LoopCopyDataInit>

080024ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d2:	3304      	adds	r3, #4

080024d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d8:	d3f9      	bcc.n	80024ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024dc:	4c0b      	ldr	r4, [pc, #44]	; (800250c <LoopForever+0x16>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e0:	e001      	b.n	80024e6 <LoopFillZerobss>

080024e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e4:	3204      	adds	r2, #4

080024e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e8:	d3fb      	bcc.n	80024e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024ea:	f7ff fd73 	bl	8001fd4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80024ee:	f00a f9eb 	bl	800c8c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024f2:	f7fe fb07 	bl	8000b04 <main>

080024f6 <LoopForever>:

LoopForever:
    b LoopForever
 80024f6:	e7fe      	b.n	80024f6 <LoopForever>
  ldr   r0, =_estack
 80024f8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002500:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002504:	0800d424 	.word	0x0800d424
  ldr r2, =_sbss
 8002508:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800250c:	20001640 	.word	0x20001640

08002510 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002510:	e7fe      	b.n	8002510 <CEC_CAN_IRQHandler>
	...

08002514 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <HAL_Init+0x24>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_Init+0x24>)
 800251e:	2110      	movs	r1, #16
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002524:	2003      	movs	r0, #3
 8002526:	f000 f809 	bl	800253c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800252a:	f7ff fb4b 	bl	8001bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	40022000 	.word	0x40022000

0800253c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_InitTick+0x5c>)
 8002546:	681c      	ldr	r4, [r3, #0]
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_InitTick+0x60>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	0019      	movs	r1, r3
 800254e:	23fa      	movs	r3, #250	; 0xfa
 8002550:	0098      	lsls	r0, r3, #2
 8002552:	f7fd fdeb 	bl	800012c <__udivsi3>
 8002556:	0003      	movs	r3, r0
 8002558:	0019      	movs	r1, r3
 800255a:	0020      	movs	r0, r4
 800255c:	f7fd fde6 	bl	800012c <__udivsi3>
 8002560:	0003      	movs	r3, r0
 8002562:	0018      	movs	r0, r3
 8002564:	f000 fe4f 	bl	8003206 <HAL_SYSTICK_Config>
 8002568:	1e03      	subs	r3, r0, #0
 800256a:	d001      	beq.n	8002570 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e00f      	b.n	8002590 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d80b      	bhi.n	800258e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	2301      	movs	r3, #1
 800257a:	425b      	negs	r3, r3
 800257c:	2200      	movs	r2, #0
 800257e:	0018      	movs	r0, r3
 8002580:	f000 fe1c 	bl	80031bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_InitTick+0x64>)
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	b003      	add	sp, #12
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	20000000 	.word	0x20000000
 800259c:	20000008 	.word	0x20000008
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_IncTick+0x1c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	001a      	movs	r2, r3
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_IncTick+0x20>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	18d2      	adds	r2, r2, r3
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_IncTick+0x20>)
 80025b6:	601a      	str	r2, [r3, #0]
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	20000008 	.word	0x20000008
 80025c4:	200006a0 	.word	0x200006a0

080025c8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b02      	ldr	r3, [pc, #8]	; (80025d8 <HAL_GetTick+0x10>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	200006a0 	.word	0x200006a0

080025dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e4:	f7ff fff0 	bl	80025c8 <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3301      	adds	r3, #1
 80025f4:	d005      	beq.n	8002602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_Delay+0x44>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	001a      	movs	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	f7ff ffe0 	bl	80025c8 <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	429a      	cmp	r2, r3
 8002612:	d8f7      	bhi.n	8002604 <HAL_Delay+0x28>
  {
  }
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b004      	add	sp, #16
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	20000008 	.word	0x20000008

08002624 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262c:	230f      	movs	r3, #15
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e125      	b.n	800288e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2234      	movs	r2, #52	; 0x34
 8002654:	2100      	movs	r1, #0
 8002656:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	0018      	movs	r0, r3
 800265c:	f7ff fad6 	bl	8001c0c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002664:	2210      	movs	r2, #16
 8002666:	4013      	ands	r3, r2
 8002668:	d000      	beq.n	800266c <HAL_ADC_Init+0x48>
 800266a:	e103      	b.n	8002874 <HAL_ADC_Init+0x250>
 800266c:	230f      	movs	r3, #15
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d000      	beq.n	8002678 <HAL_ADC_Init+0x54>
 8002676:	e0fd      	b.n	8002874 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2204      	movs	r2, #4
 8002680:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002682:	d000      	beq.n	8002686 <HAL_ADC_Init+0x62>
 8002684:	e0f6      	b.n	8002874 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	4a83      	ldr	r2, [pc, #524]	; (8002898 <HAL_ADC_Init+0x274>)
 800268c:	4013      	ands	r3, r2
 800268e:	2202      	movs	r2, #2
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2203      	movs	r2, #3
 800269e:	4013      	ands	r3, r2
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d112      	bne.n	80026ca <HAL_ADC_Init+0xa6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2201      	movs	r2, #1
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d009      	beq.n	80026c6 <HAL_ADC_Init+0xa2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	401a      	ands	r2, r3
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_Init+0xa6>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_ADC_Init+0xa8>
 80026ca:	2300      	movs	r3, #0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d116      	bne.n	80026fe <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2218      	movs	r2, #24
 80026d8:	4393      	bics	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	0899      	lsrs	r1, r3, #2
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4964      	ldr	r1, [pc, #400]	; (800289c <HAL_ADC_Init+0x278>)
 800270a:	400a      	ands	r2, r1
 800270c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7e1b      	ldrb	r3, [r3, #24]
 8002712:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7e5b      	ldrb	r3, [r3, #25]
 8002718:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800271a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7e9b      	ldrb	r3, [r3, #26]
 8002720:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002722:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	2b01      	cmp	r3, #1
 800272a:	d002      	beq.n	8002732 <HAL_ADC_Init+0x10e>
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	015b      	lsls	r3, r3, #5
 8002730:	e000      	b.n	8002734 <HAL_ADC_Init+0x110>
 8002732:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002734:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800273a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d101      	bne.n	8002748 <HAL_ADC_Init+0x124>
 8002744:	2304      	movs	r3, #4
 8002746:	e000      	b.n	800274a <HAL_ADC_Init+0x126>
 8002748:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800274a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2124      	movs	r1, #36	; 0x24
 8002750:	5c5b      	ldrb	r3, [r3, r1]
 8002752:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002754:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	4313      	orrs	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7edb      	ldrb	r3, [r3, #27]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d115      	bne.n	8002790 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	7e9b      	ldrb	r3, [r3, #26]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	0252      	lsls	r2, r2, #9
 8002772:	4313      	orrs	r3, r2
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	e00b      	b.n	8002790 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	2220      	movs	r2, #32
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	2201      	movs	r2, #1
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	23c2      	movs	r3, #194	; 0xc2
 8002796:	33ff      	adds	r3, #255	; 0xff
 8002798:	429a      	cmp	r2, r3
 800279a:	d007      	beq.n	80027ac <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80027a4:	4313      	orrs	r3, r2
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68d9      	ldr	r1, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	055b      	lsls	r3, r3, #21
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d01b      	beq.n	8002800 <HAL_ADC_Init+0x1dc>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d017      	beq.n	8002800 <HAL_ADC_Init+0x1dc>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d013      	beq.n	8002800 <HAL_ADC_Init+0x1dc>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d00f      	beq.n	8002800 <HAL_ADC_Init+0x1dc>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d00b      	beq.n	8002800 <HAL_ADC_Init+0x1dc>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d007      	beq.n	8002800 <HAL_ADC_Init+0x1dc>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d003      	beq.n	8002800 <HAL_ADC_Init+0x1dc>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	2b07      	cmp	r3, #7
 80027fe:	d112      	bne.n	8002826 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2107      	movs	r1, #7
 800280c:	438a      	bics	r2, r1
 800280e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6959      	ldr	r1, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	2207      	movs	r2, #7
 800281c:	401a      	ands	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_ADC_Init+0x27c>)
 800282e:	4013      	ands	r3, r2
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	429a      	cmp	r2, r3
 8002834:	d10b      	bne.n	800284e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	2203      	movs	r2, #3
 8002842:	4393      	bics	r3, r2
 8002844:	2201      	movs	r2, #1
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800284c:	e01c      	b.n	8002888 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	2212      	movs	r2, #18
 8002854:	4393      	bics	r3, r2
 8002856:	2210      	movs	r2, #16
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	2201      	movs	r2, #1
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800286a:	230f      	movs	r3, #15
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002872:	e009      	b.n	8002888 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	2210      	movs	r2, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002880:	230f      	movs	r3, #15
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002888:	230f      	movs	r3, #15
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	781b      	ldrb	r3, [r3, #0]
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b004      	add	sp, #16
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	fffffefd 	.word	0xfffffefd
 800289c:	fffe0219 	.word	0xfffe0219
 80028a0:	833fffe7 	.word	0x833fffe7

080028a4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ac:	230f      	movs	r3, #15
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2204      	movs	r2, #4
 80028bc:	4013      	ands	r3, r2
 80028be:	d156      	bne.n	800296e <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2234      	movs	r2, #52	; 0x34
 80028c4:	5c9b      	ldrb	r3, [r3, r2]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_Start_IT+0x2a>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e056      	b.n	800297c <HAL_ADC_Start_IT+0xd8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2234      	movs	r2, #52	; 0x34
 80028d2:	2101      	movs	r1, #1
 80028d4:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7e5b      	ldrb	r3, [r3, #25]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d007      	beq.n	80028ee <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80028de:	230f      	movs	r3, #15
 80028e0:	18fc      	adds	r4, r7, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 fa7b 	bl	8002de0 <ADC_Enable>
 80028ea:	0003      	movs	r3, r0
 80028ec:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028ee:	230f      	movs	r3, #15
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d13e      	bne.n	8002976 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fc:	4a21      	ldr	r2, [pc, #132]	; (8002984 <HAL_ADC_Start_IT+0xe0>)
 80028fe:	4013      	ands	r3, r2
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	0052      	lsls	r2, r2, #1
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2234      	movs	r2, #52	; 0x34
 8002914:	2100      	movs	r1, #0
 8002916:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	221c      	movs	r2, #28
 800291e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	2b08      	cmp	r3, #8
 8002926:	d110      	bne.n	800294a <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2104      	movs	r1, #4
 8002934:	438a      	bics	r2, r1
 8002936:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2118      	movs	r1, #24
 8002944:	430a      	orrs	r2, r1
 8002946:	605a      	str	r2, [r3, #4]
          break;
 8002948:	e008      	b.n	800295c <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	211c      	movs	r1, #28
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
          break;
 800295a:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2104      	movs	r1, #4
 8002968:	430a      	orrs	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	e003      	b.n	8002976 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800296e:	230f      	movs	r3, #15
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	2202      	movs	r2, #2
 8002974:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8002976:	230f      	movs	r3, #15
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	781b      	ldrb	r3, [r3, #0]
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	b005      	add	sp, #20
 8002982:	bd90      	pop	{r4, r7, pc}
 8002984:	fffff0fe 	.word	0xfffff0fe

08002988 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002990:	230f      	movs	r3, #15
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2234      	movs	r2, #52	; 0x34
 800299c:	5c9b      	ldrb	r3, [r3, r2]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_Stop_IT+0x1e>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e033      	b.n	8002a0e <HAL_ADC_Stop_IT+0x86>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2234      	movs	r2, #52	; 0x34
 80029aa:	2101      	movs	r1, #1
 80029ac:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80029ae:	250f      	movs	r5, #15
 80029b0:	197c      	adds	r4, r7, r5
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f000 fb08 	bl	8002fca <ADC_ConversionStop>
 80029ba:	0003      	movs	r3, r0
 80029bc:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80029be:	0028      	movs	r0, r5
 80029c0:	183b      	adds	r3, r7, r0
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d11b      	bne.n	8002a00 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	211c      	movs	r1, #28
 80029d4:	438a      	bics	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80029d8:	0005      	movs	r5, r0
 80029da:	183c      	adds	r4, r7, r0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 fa82 	bl	8002ee8 <ADC_Disable>
 80029e4:	0003      	movs	r3, r0
 80029e6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80029e8:	197b      	adds	r3, r7, r5
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d107      	bne.n	8002a00 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_ADC_Stop_IT+0x90>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	2201      	movs	r2, #1
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2234      	movs	r2, #52	; 0x34
 8002a04:	2100      	movs	r1, #0
 8002a06:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002a08:	230f      	movs	r3, #15
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	781b      	ldrb	r3, [r3, #0]
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b004      	add	sp, #16
 8002a14:	bdb0      	pop	{r4, r5, r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	fffffefe 	.word	0xfffffefe

08002a1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b002      	add	sp, #8
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2204      	movs	r2, #4
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d106      	bne.n	8002a58 <HAL_ADC_IRQHandler+0x24>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2204      	movs	r2, #4
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d00d      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2208      	movs	r2, #8
 8002a60:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d14f      	bne.n	8002b06 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d148      	bne.n	8002b06 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	2210      	movs	r2, #16
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d106      	bne.n	8002a8c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	0092      	lsls	r2, r2, #2
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	23c0      	movs	r3, #192	; 0xc0
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	4013      	ands	r3, r2
 8002a98:	d12d      	bne.n	8002af6 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d129      	bne.n	8002af6 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d122      	bne.n	8002af6 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d110      	bne.n	8002ade <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	210c      	movs	r1, #12
 8002ac8:	438a      	bics	r2, r1
 8002aca:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	4a33      	ldr	r2, [pc, #204]	; (8002ba0 <HAL_ADC_IRQHandler+0x16c>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38
 8002adc:	e00b      	b.n	8002af6 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	2201      	movs	r2, #1
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7fd ffef 	bl	8000adc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	220c      	movs	r2, #12
 8002b04:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b80      	cmp	r3, #128	; 0x80
 8002b12:	d115      	bne.n	8002b40 <HAL_ADC_IRQHandler+0x10c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2280      	movs	r2, #128	; 0x80
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b80      	cmp	r3, #128	; 0x80
 8002b20:	d10e      	bne.n	8002b40 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	0252      	lsls	r2, r2, #9
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 f836 	bl	8002ba4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2210      	movs	r2, #16
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d123      	bne.n	8002b96 <HAL_ADC_IRQHandler+0x162>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2210      	movs	r2, #16
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d11c      	bne.n	8002b96 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d006      	beq.n	8002b72 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d10d      	bne.n	8002b8e <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	2202      	movs	r2, #2
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2210      	movs	r2, #16
 8002b84:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f813 	bl	8002bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2210      	movs	r2, #16
 8002b94:	601a      	str	r2, [r3, #0]
  }

}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b002      	add	sp, #8
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	fffffefe 	.word	0xfffffefe

08002ba4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bce:	230f      	movs	r3, #15
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	055b      	lsls	r3, r3, #21
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d011      	beq.n	8002c0a <HAL_ADC_ConfigChannel+0x46>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d00d      	beq.n	8002c0a <HAL_ADC_ConfigChannel+0x46>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d009      	beq.n	8002c0a <HAL_ADC_ConfigChannel+0x46>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d005      	beq.n	8002c0a <HAL_ADC_ConfigChannel+0x46>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d001      	beq.n	8002c0a <HAL_ADC_ConfigChannel+0x46>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2234      	movs	r2, #52	; 0x34
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x54>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e0d0      	b.n	8002dba <HAL_ADC_ConfigChannel+0x1f6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2234      	movs	r2, #52	; 0x34
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2204      	movs	r2, #4
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d000      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0x6a>
 8002c2c:	e0b4      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a64      	ldr	r2, [pc, #400]	; (8002dc4 <HAL_ADC_ConfigChannel+0x200>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d100      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x76>
 8002c38:	e082      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2201      	movs	r2, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	055b      	lsls	r3, r3, #21
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d037      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x108>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d033      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x108>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d02f      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x108>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d02b      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x108>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d027      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x108>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d023      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x108>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	2b06      	cmp	r3, #6
 8002c8a:	d01f      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x108>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	2b07      	cmp	r3, #7
 8002c92:	d01b      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2107      	movs	r1, #7
 8002ca0:	400b      	ands	r3, r1
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d012      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2107      	movs	r1, #7
 8002cb2:	438a      	bics	r2, r1
 8002cb4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6959      	ldr	r1, [r3, #20]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d007      	beq.n	8002ce4 <HAL_ADC_ConfigChannel+0x120>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b11      	cmp	r3, #17
 8002cda:	d003      	beq.n	8002ce4 <HAL_ADC_ConfigChannel+0x120>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b12      	cmp	r3, #18
 8002ce2:	d163      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ce4:	4b38      	ldr	r3, [pc, #224]	; (8002dc8 <HAL_ADC_ConfigChannel+0x204>)
 8002ce6:	6819      	ldr	r1, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d009      	beq.n	8002d04 <HAL_ADC_ConfigChannel+0x140>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b11      	cmp	r3, #17
 8002cf6:	d102      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x13a>
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	03db      	lsls	r3, r3, #15
 8002cfc:	e004      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x144>
 8002cfe:	2380      	movs	r3, #128	; 0x80
 8002d00:	045b      	lsls	r3, r3, #17
 8002d02:	e001      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x144>
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	041b      	lsls	r3, r3, #16
 8002d08:	4a2f      	ldr	r2, [pc, #188]	; (8002dc8 <HAL_ADC_ConfigChannel+0x204>)
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d14a      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d16:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <HAL_ADC_ConfigChannel+0x208>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	492d      	ldr	r1, [pc, #180]	; (8002dd0 <HAL_ADC_ConfigChannel+0x20c>)
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7fd fa05 	bl	800012c <__udivsi3>
 8002d22:	0003      	movs	r3, r0
 8002d24:	001a      	movs	r2, r3
 8002d26:	0013      	movs	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d30:	e002      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f9      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x16e>
 8002d3e:	e035      	b.n	8002dac <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	4099      	lsls	r1, r3
 8002d4e:	000b      	movs	r3, r1
 8002d50:	43d9      	mvns	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	400a      	ands	r2, r1
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d007      	beq.n	8002d72 <HAL_ADC_ConfigChannel+0x1ae>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b11      	cmp	r3, #17
 8002d68:	d003      	beq.n	8002d72 <HAL_ADC_ConfigChannel+0x1ae>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b12      	cmp	r3, #18
 8002d70:	d11c      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_ADC_ConfigChannel+0x204>)
 8002d74:	6819      	ldr	r1, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d007      	beq.n	8002d8e <HAL_ADC_ConfigChannel+0x1ca>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b11      	cmp	r3, #17
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x1c6>
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_ADC_ConfigChannel+0x210>)
 8002d88:	e002      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x1cc>
 8002d8a:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_ADC_ConfigChannel+0x214>)
 8002d8c:	e000      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x1cc>
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_ADC_ConfigChannel+0x218>)
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <HAL_ADC_ConfigChannel+0x204>)
 8002d92:	400b      	ands	r3, r1
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e009      	b.n	8002dac <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002da4:	230f      	movs	r3, #15
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	2201      	movs	r2, #1
 8002daa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2234      	movs	r2, #52	; 0x34
 8002db0:	2100      	movs	r1, #0
 8002db2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002db4:	230f      	movs	r3, #15
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	781b      	ldrb	r3, [r3, #0]
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b004      	add	sp, #16
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	00001001 	.word	0x00001001
 8002dc8:	40012708 	.word	0x40012708
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	000f4240 	.word	0x000f4240
 8002dd4:	ffbfffff 	.word	0xffbfffff
 8002dd8:	feffffff 	.word	0xfeffffff
 8002ddc:	ff7fffff 	.word	0xff7fffff

08002de0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2203      	movs	r2, #3
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d112      	bne.n	8002e24 <ADC_Enable+0x44>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2201      	movs	r2, #1
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d009      	beq.n	8002e20 <ADC_Enable+0x40>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	401a      	ands	r2, r3
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d101      	bne.n	8002e24 <ADC_Enable+0x44>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <ADC_Enable+0x46>
 8002e24:	2300      	movs	r3, #0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d152      	bne.n	8002ed0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a2a      	ldr	r2, [pc, #168]	; (8002edc <ADC_Enable+0xfc>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	d00d      	beq.n	8002e52 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	2201      	movs	r2, #1
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e03f      	b.n	8002ed2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e62:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <ADC_Enable+0x100>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	491f      	ldr	r1, [pc, #124]	; (8002ee4 <ADC_Enable+0x104>)
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7fd f95f 	bl	800012c <__udivsi3>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e72:	e002      	b.n	8002e7a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f9      	bne.n	8002e74 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e80:	f7ff fba2 	bl	80025c8 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e88:	e01b      	b.n	8002ec2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e8a:	f7ff fb9d 	bl	80025c8 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d914      	bls.n	8002ec2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d00d      	beq.n	8002ec2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	2210      	movs	r2, #16
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e007      	b.n	8002ed2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d1dc      	bne.n	8002e8a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	80000017 	.word	0x80000017
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	000f4240 	.word	0x000f4240

08002ee8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2203      	movs	r2, #3
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d112      	bne.n	8002f28 <ADC_Disable+0x40>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d009      	beq.n	8002f24 <ADC_Disable+0x3c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d101      	bne.n	8002f28 <ADC_Disable+0x40>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <ADC_Disable+0x42>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d048      	beq.n	8002fc0 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2205      	movs	r2, #5
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d110      	bne.n	8002f5e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2102      	movs	r1, #2
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2203      	movs	r2, #3
 8002f52:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f54:	f7ff fb38 	bl	80025c8 <HAL_GetTick>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f5c:	e029      	b.n	8002fb2 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	2210      	movs	r2, #16
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	2201      	movs	r2, #1
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e023      	b.n	8002fc2 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f7a:	f7ff fb25 	bl	80025c8 <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d914      	bls.n	8002fb2 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10d      	bne.n	8002fb2 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	2210      	movs	r2, #16
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e007      	b.n	8002fc2 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d0dc      	beq.n	8002f7a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d03a      	beq.n	8003058 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d10d      	bne.n	800300c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002ffa:	d107      	bne.n	800300c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2110      	movs	r1, #16
 8003008:	430a      	orrs	r2, r1
 800300a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800300c:	f7ff fadc 	bl	80025c8 <HAL_GetTick>
 8003010:	0003      	movs	r3, r0
 8003012:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003014:	e01a      	b.n	800304c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003016:	f7ff fad7 	bl	80025c8 <HAL_GetTick>
 800301a:	0002      	movs	r2, r0
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d913      	bls.n	800304c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2204      	movs	r2, #4
 800302c:	4013      	ands	r3, r2
 800302e:	d00d      	beq.n	800304c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	2210      	movs	r2, #16
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	2201      	movs	r2, #1
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e006      	b.n	800305a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2204      	movs	r2, #4
 8003054:	4013      	ands	r3, r2
 8003056:	d1de      	bne.n	8003016 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	0002      	movs	r2, r0
 800306c:	1dfb      	adds	r3, r7, #7
 800306e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b7f      	cmp	r3, #127	; 0x7f
 8003076:	d809      	bhi.n	800308c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003078:	1dfb      	adds	r3, r7, #7
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	001a      	movs	r2, r3
 800307e:	231f      	movs	r3, #31
 8003080:	401a      	ands	r2, r3
 8003082:	4b04      	ldr	r3, [pc, #16]	; (8003094 <__NVIC_EnableIRQ+0x30>)
 8003084:	2101      	movs	r1, #1
 8003086:	4091      	lsls	r1, r2
 8003088:	000a      	movs	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
  }
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}
 8003094:	e000e100 	.word	0xe000e100

08003098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	0002      	movs	r2, r0
 80030a0:	6039      	str	r1, [r7, #0]
 80030a2:	1dfb      	adds	r3, r7, #7
 80030a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	1dfb      	adds	r3, r7, #7
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b7f      	cmp	r3, #127	; 0x7f
 80030ac:	d828      	bhi.n	8003100 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030ae:	4a2f      	ldr	r2, [pc, #188]	; (800316c <__NVIC_SetPriority+0xd4>)
 80030b0:	1dfb      	adds	r3, r7, #7
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	33c0      	adds	r3, #192	; 0xc0
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	589b      	ldr	r3, [r3, r2]
 80030be:	1dfa      	adds	r2, r7, #7
 80030c0:	7812      	ldrb	r2, [r2, #0]
 80030c2:	0011      	movs	r1, r2
 80030c4:	2203      	movs	r2, #3
 80030c6:	400a      	ands	r2, r1
 80030c8:	00d2      	lsls	r2, r2, #3
 80030ca:	21ff      	movs	r1, #255	; 0xff
 80030cc:	4091      	lsls	r1, r2
 80030ce:	000a      	movs	r2, r1
 80030d0:	43d2      	mvns	r2, r2
 80030d2:	401a      	ands	r2, r3
 80030d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	019b      	lsls	r3, r3, #6
 80030da:	22ff      	movs	r2, #255	; 0xff
 80030dc:	401a      	ands	r2, r3
 80030de:	1dfb      	adds	r3, r7, #7
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	0018      	movs	r0, r3
 80030e4:	2303      	movs	r3, #3
 80030e6:	4003      	ands	r3, r0
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030ec:	481f      	ldr	r0, [pc, #124]	; (800316c <__NVIC_SetPriority+0xd4>)
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b25b      	sxtb	r3, r3
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	430a      	orrs	r2, r1
 80030f8:	33c0      	adds	r3, #192	; 0xc0
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80030fe:	e031      	b.n	8003164 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003100:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <__NVIC_SetPriority+0xd8>)
 8003102:	1dfb      	adds	r3, r7, #7
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	0019      	movs	r1, r3
 8003108:	230f      	movs	r3, #15
 800310a:	400b      	ands	r3, r1
 800310c:	3b08      	subs	r3, #8
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	3306      	adds	r3, #6
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	18d3      	adds	r3, r2, r3
 8003116:	3304      	adds	r3, #4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	1dfa      	adds	r2, r7, #7
 800311c:	7812      	ldrb	r2, [r2, #0]
 800311e:	0011      	movs	r1, r2
 8003120:	2203      	movs	r2, #3
 8003122:	400a      	ands	r2, r1
 8003124:	00d2      	lsls	r2, r2, #3
 8003126:	21ff      	movs	r1, #255	; 0xff
 8003128:	4091      	lsls	r1, r2
 800312a:	000a      	movs	r2, r1
 800312c:	43d2      	mvns	r2, r2
 800312e:	401a      	ands	r2, r3
 8003130:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	019b      	lsls	r3, r3, #6
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	401a      	ands	r2, r3
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	0018      	movs	r0, r3
 8003140:	2303      	movs	r3, #3
 8003142:	4003      	ands	r3, r0
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003148:	4809      	ldr	r0, [pc, #36]	; (8003170 <__NVIC_SetPriority+0xd8>)
 800314a:	1dfb      	adds	r3, r7, #7
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	001c      	movs	r4, r3
 8003150:	230f      	movs	r3, #15
 8003152:	4023      	ands	r3, r4
 8003154:	3b08      	subs	r3, #8
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	430a      	orrs	r2, r1
 800315a:	3306      	adds	r3, #6
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	18c3      	adds	r3, r0, r3
 8003160:	3304      	adds	r3, #4
 8003162:	601a      	str	r2, [r3, #0]
}
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b003      	add	sp, #12
 800316a:	bd90      	pop	{r4, r7, pc}
 800316c:	e000e100 	.word	0xe000e100
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	1e5a      	subs	r2, r3, #1
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	045b      	lsls	r3, r3, #17
 8003184:	429a      	cmp	r2, r3
 8003186:	d301      	bcc.n	800318c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003188:	2301      	movs	r3, #1
 800318a:	e010      	b.n	80031ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <SysTick_Config+0x44>)
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	3a01      	subs	r2, #1
 8003192:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003194:	2301      	movs	r3, #1
 8003196:	425b      	negs	r3, r3
 8003198:	2103      	movs	r1, #3
 800319a:	0018      	movs	r0, r3
 800319c:	f7ff ff7c 	bl	8003098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <SysTick_Config+0x44>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a6:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <SysTick_Config+0x44>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	0018      	movs	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b002      	add	sp, #8
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	e000e010 	.word	0xe000e010

080031bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	210f      	movs	r1, #15
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	1c02      	adds	r2, r0, #0
 80031cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b25b      	sxtb	r3, r3
 80031d6:	0011      	movs	r1, r2
 80031d8:	0018      	movs	r0, r3
 80031da:	f7ff ff5d 	bl	8003098 <__NVIC_SetPriority>
}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b004      	add	sp, #16
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	0002      	movs	r2, r0
 80031ee:	1dfb      	adds	r3, r7, #7
 80031f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f2:	1dfb      	adds	r3, r7, #7
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7ff ff33 	bl	8003064 <__NVIC_EnableIRQ>
}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b002      	add	sp, #8
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff ffaf 	bl	8003174 <SysTick_Config>
 8003216:	0003      	movs	r3, r0
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b002      	add	sp, #8
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2221      	movs	r2, #33	; 0x21
 800322c:	5c9b      	ldrb	r3, [r3, r2]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d008      	beq.n	8003246 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2204      	movs	r2, #4
 8003238:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	2100      	movs	r1, #0
 8003240:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e020      	b.n	8003288 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	210e      	movs	r1, #14
 8003252:	438a      	bics	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	438a      	bics	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	2101      	movs	r1, #1
 8003270:	4091      	lsls	r1, r2
 8003272:	000a      	movs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2221      	movs	r2, #33	; 0x21
 800327a:	2101      	movs	r1, #1
 800327c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	2100      	movs	r1, #0
 8003284:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	210f      	movs	r1, #15
 800329a:	187b      	adds	r3, r7, r1
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2221      	movs	r2, #33	; 0x21
 80032a4:	5c9b      	ldrb	r3, [r3, r2]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d006      	beq.n	80032ba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2204      	movs	r2, #4
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e028      	b.n	800330c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	210e      	movs	r1, #14
 80032c6:	438a      	bics	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	438a      	bics	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	2101      	movs	r1, #1
 80032e4:	4091      	lsls	r1, r2
 80032e6:	000a      	movs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2221      	movs	r2, #33	; 0x21
 80032ee:	2101      	movs	r1, #1
 80032f0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	2100      	movs	r1, #0
 80032f8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	0010      	movs	r0, r2
 800330a:	4798      	blx	r3
    } 
  }
  return status;
 800330c:	230f      	movs	r3, #15
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b004      	add	sp, #16
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332a:	e155      	b.n	80035d8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2101      	movs	r1, #1
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4091      	lsls	r1, r2
 8003336:	000a      	movs	r2, r1
 8003338:	4013      	ands	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d100      	bne.n	8003344 <HAL_GPIO_Init+0x28>
 8003342:	e146      	b.n	80035d2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2203      	movs	r2, #3
 800334a:	4013      	ands	r3, r2
 800334c:	2b01      	cmp	r3, #1
 800334e:	d005      	beq.n	800335c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2203      	movs	r2, #3
 8003356:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003358:	2b02      	cmp	r3, #2
 800335a:	d130      	bne.n	80033be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	2203      	movs	r2, #3
 8003368:	409a      	lsls	r2, r3
 800336a:	0013      	movs	r3, r2
 800336c:	43da      	mvns	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	409a      	lsls	r2, r3
 800337e:	0013      	movs	r3, r2
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003392:	2201      	movs	r2, #1
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	409a      	lsls	r2, r3
 8003398:	0013      	movs	r3, r2
 800339a:	43da      	mvns	r2, r3
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	2201      	movs	r2, #1
 80033aa:	401a      	ands	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	409a      	lsls	r2, r3
 80033b0:	0013      	movs	r3, r2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2203      	movs	r2, #3
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d017      	beq.n	80033fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	2203      	movs	r2, #3
 80033d6:	409a      	lsls	r2, r3
 80033d8:	0013      	movs	r3, r2
 80033da:	43da      	mvns	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	409a      	lsls	r2, r3
 80033ec:	0013      	movs	r3, r2
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2203      	movs	r2, #3
 8003400:	4013      	ands	r3, r2
 8003402:	2b02      	cmp	r3, #2
 8003404:	d123      	bne.n	800344e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	08da      	lsrs	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3208      	adds	r2, #8
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	58d3      	ldr	r3, [r2, r3]
 8003412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2207      	movs	r2, #7
 8003418:	4013      	ands	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	220f      	movs	r2, #15
 800341e:	409a      	lsls	r2, r3
 8003420:	0013      	movs	r3, r2
 8003422:	43da      	mvns	r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2107      	movs	r1, #7
 8003432:	400b      	ands	r3, r1
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	409a      	lsls	r2, r3
 8003438:	0013      	movs	r3, r2
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	08da      	lsrs	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3208      	adds	r2, #8
 8003448:	0092      	lsls	r2, r2, #2
 800344a:	6939      	ldr	r1, [r7, #16]
 800344c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	2203      	movs	r2, #3
 800345a:	409a      	lsls	r2, r3
 800345c:	0013      	movs	r3, r2
 800345e:	43da      	mvns	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4013      	ands	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2203      	movs	r2, #3
 800346c:	401a      	ands	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	409a      	lsls	r2, r3
 8003474:	0013      	movs	r3, r2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	23c0      	movs	r3, #192	; 0xc0
 8003488:	029b      	lsls	r3, r3, #10
 800348a:	4013      	ands	r3, r2
 800348c:	d100      	bne.n	8003490 <HAL_GPIO_Init+0x174>
 800348e:	e0a0      	b.n	80035d2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003490:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_GPIO_Init+0x2d4>)
 8003492:	699a      	ldr	r2, [r3, #24]
 8003494:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <HAL_GPIO_Init+0x2d4>)
 8003496:	2101      	movs	r1, #1
 8003498:	430a      	orrs	r2, r1
 800349a:	619a      	str	r2, [r3, #24]
 800349c:	4b54      	ldr	r3, [pc, #336]	; (80035f0 <HAL_GPIO_Init+0x2d4>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2201      	movs	r2, #1
 80034a2:	4013      	ands	r3, r2
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034a8:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_GPIO_Init+0x2d8>)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	3302      	adds	r3, #2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	589b      	ldr	r3, [r3, r2]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2203      	movs	r2, #3
 80034ba:	4013      	ands	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	220f      	movs	r2, #15
 80034c0:	409a      	lsls	r2, r3
 80034c2:	0013      	movs	r3, r2
 80034c4:	43da      	mvns	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	2390      	movs	r3, #144	; 0x90
 80034d0:	05db      	lsls	r3, r3, #23
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d019      	beq.n	800350a <HAL_GPIO_Init+0x1ee>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a47      	ldr	r2, [pc, #284]	; (80035f8 <HAL_GPIO_Init+0x2dc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_GPIO_Init+0x1ea>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a46      	ldr	r2, [pc, #280]	; (80035fc <HAL_GPIO_Init+0x2e0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00d      	beq.n	8003502 <HAL_GPIO_Init+0x1e6>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a45      	ldr	r2, [pc, #276]	; (8003600 <HAL_GPIO_Init+0x2e4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <HAL_GPIO_Init+0x1e2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a44      	ldr	r2, [pc, #272]	; (8003604 <HAL_GPIO_Init+0x2e8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_GPIO_Init+0x1de>
 80034f6:	2304      	movs	r3, #4
 80034f8:	e008      	b.n	800350c <HAL_GPIO_Init+0x1f0>
 80034fa:	2305      	movs	r3, #5
 80034fc:	e006      	b.n	800350c <HAL_GPIO_Init+0x1f0>
 80034fe:	2303      	movs	r3, #3
 8003500:	e004      	b.n	800350c <HAL_GPIO_Init+0x1f0>
 8003502:	2302      	movs	r3, #2
 8003504:	e002      	b.n	800350c <HAL_GPIO_Init+0x1f0>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_GPIO_Init+0x1f0>
 800350a:	2300      	movs	r3, #0
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	2103      	movs	r1, #3
 8003510:	400a      	ands	r2, r1
 8003512:	0092      	lsls	r2, r2, #2
 8003514:	4093      	lsls	r3, r2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800351c:	4935      	ldr	r1, [pc, #212]	; (80035f4 <HAL_GPIO_Init+0x2d8>)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	3302      	adds	r3, #2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800352a:	4b37      	ldr	r3, [pc, #220]	; (8003608 <HAL_GPIO_Init+0x2ec>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	43da      	mvns	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	025b      	lsls	r3, r3, #9
 8003542:	4013      	ands	r3, r2
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800354e:	4b2e      	ldr	r3, [pc, #184]	; (8003608 <HAL_GPIO_Init+0x2ec>)
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003554:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <HAL_GPIO_Init+0x2ec>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43da      	mvns	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	029b      	lsls	r3, r3, #10
 800356c:	4013      	ands	r3, r2
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003578:	4b23      	ldr	r3, [pc, #140]	; (8003608 <HAL_GPIO_Init+0x2ec>)
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800357e:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_GPIO_Init+0x2ec>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43da      	mvns	r2, r3
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	035b      	lsls	r3, r3, #13
 8003596:	4013      	ands	r3, r2
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80035a2:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HAL_GPIO_Init+0x2ec>)
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_GPIO_Init+0x2ec>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43da      	mvns	r2, r3
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	039b      	lsls	r3, r3, #14
 80035c0:	4013      	ands	r3, r2
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <HAL_GPIO_Init+0x2ec>)
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	3301      	adds	r3, #1
 80035d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	40da      	lsrs	r2, r3
 80035e0:	1e13      	subs	r3, r2, #0
 80035e2:	d000      	beq.n	80035e6 <HAL_GPIO_Init+0x2ca>
 80035e4:	e6a2      	b.n	800332c <HAL_GPIO_Init+0x10>
  } 
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b006      	add	sp, #24
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40010000 	.word	0x40010000
 80035f8:	48000400 	.word	0x48000400
 80035fc:	48000800 	.word	0x48000800
 8003600:	48000c00 	.word	0x48000c00
 8003604:	48001000 	.word	0x48001000
 8003608:	40010400 	.word	0x40010400

0800360c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	000a      	movs	r2, r1
 8003616:	1cbb      	adds	r3, r7, #2
 8003618:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	1cba      	adds	r2, r7, #2
 8003620:	8812      	ldrh	r2, [r2, #0]
 8003622:	4013      	ands	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003626:	230f      	movs	r3, #15
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	e003      	b.n	8003638 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003630:	230f      	movs	r3, #15
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003638:	230f      	movs	r3, #15
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	781b      	ldrb	r3, [r3, #0]
  }
 800363e:	0018      	movs	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	b004      	add	sp, #16
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	0008      	movs	r0, r1
 8003650:	0011      	movs	r1, r2
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	1c02      	adds	r2, r0, #0
 8003656:	801a      	strh	r2, [r3, #0]
 8003658:	1c7b      	adds	r3, r7, #1
 800365a:	1c0a      	adds	r2, r1, #0
 800365c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800365e:	1c7b      	adds	r3, r7, #1
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d004      	beq.n	8003670 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003666:	1cbb      	adds	r3, r7, #2
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800366e:	e003      	b.n	8003678 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003670:	1cbb      	adds	r3, r7, #2
 8003672:	881a      	ldrh	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	000a      	movs	r2, r1
 800368a:	1cbb      	adds	r3, r7, #2
 800368c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003694:	1cbb      	adds	r3, r7, #2
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4013      	ands	r3, r2
 800369c:	041a      	lsls	r2, r3, #16
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	1cb9      	adds	r1, r7, #2
 80036a4:	8809      	ldrh	r1, [r1, #0]
 80036a6:	400b      	ands	r3, r1
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	619a      	str	r2, [r3, #24]
}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	0002      	movs	r2, r0
 80036c0:	1dbb      	adds	r3, r7, #6
 80036c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	1dba      	adds	r2, r7, #6
 80036ca:	8812      	ldrh	r2, [r2, #0]
 80036cc:	4013      	ands	r3, r2
 80036ce:	d008      	beq.n	80036e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80036d2:	1dba      	adds	r2, r7, #6
 80036d4:	8812      	ldrh	r2, [r2, #0]
 80036d6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036d8:	1dbb      	adds	r3, r7, #6
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	0018      	movs	r0, r3
 80036de:	f7fd f9c5 	bl	8000a6c <HAL_GPIO_EXTI_Callback>
  }
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b002      	add	sp, #8
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	40010400 	.word	0x40010400

080036f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	b08b      	sub	sp, #44	; 0x2c
 80036f4:	af06      	add	r7, sp, #24
 80036f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0ff      	b.n	8003902 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a81      	ldr	r2, [pc, #516]	; (800390c <HAL_PCD_Init+0x21c>)
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d108      	bne.n	8003720 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	23aa      	movs	r3, #170	; 0xaa
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	2100      	movs	r1, #0
 8003716:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	0018      	movs	r0, r3
 800371c:	f008 fd70 	bl	800c200 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a7a      	ldr	r2, [pc, #488]	; (800390c <HAL_PCD_Init+0x21c>)
 8003724:	2103      	movs	r1, #3
 8003726:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	0018      	movs	r0, r3
 800372e:	f004 fe0f 	bl	8008350 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003732:	230f      	movs	r3, #15
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e058      	b.n	80037ee <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800373c:	200f      	movs	r0, #15
 800373e:	183b      	adds	r3, r7, r0
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	0013      	movs	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	189b      	adds	r3, r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	18cb      	adds	r3, r1, r3
 8003750:	3301      	adds	r3, #1
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003756:	183b      	adds	r3, r7, r0
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	0013      	movs	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	189b      	adds	r3, r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	183a      	adds	r2, r7, r0
 8003768:	7812      	ldrb	r2, [r2, #0]
 800376a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800376c:	0004      	movs	r4, r0
 800376e:	183b      	adds	r3, r7, r0
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	193b      	adds	r3, r7, r4
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b298      	uxth	r0, r3
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	0013      	movs	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	189b      	adds	r3, r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	18cb      	adds	r3, r1, r3
 8003784:	3336      	adds	r3, #54	; 0x36
 8003786:	1c02      	adds	r2, r0, #0
 8003788:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800378a:	193b      	adds	r3, r7, r4
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	0013      	movs	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	189b      	adds	r3, r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	18cb      	adds	r3, r1, r3
 800379c:	3303      	adds	r3, #3
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037a2:	193b      	adds	r3, r7, r4
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	0013      	movs	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	189b      	adds	r3, r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	18cb      	adds	r3, r1, r3
 80037b2:	3338      	adds	r3, #56	; 0x38
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037b8:	193b      	adds	r3, r7, r4
 80037ba:	781a      	ldrb	r2, [r3, #0]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	0013      	movs	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	18cb      	adds	r3, r1, r3
 80037c8:	333c      	adds	r3, #60	; 0x3c
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037ce:	193b      	adds	r3, r7, r4
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	0013      	movs	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	189b      	adds	r3, r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	18cb      	adds	r3, r1, r3
 80037de:	3340      	adds	r3, #64	; 0x40
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e4:	193b      	adds	r3, r7, r4
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	193b      	adds	r3, r7, r4
 80037ea:	3201      	adds	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	210f      	movs	r1, #15
 80037f0:	187b      	adds	r3, r7, r1
 80037f2:	781a      	ldrb	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d39f      	bcc.n	800373c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e056      	b.n	80038b2 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003804:	240f      	movs	r4, #15
 8003806:	193b      	adds	r3, r7, r4
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	236a      	movs	r3, #106	; 0x6a
 800380e:	33ff      	adds	r3, #255	; 0xff
 8003810:	0019      	movs	r1, r3
 8003812:	0013      	movs	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	189b      	adds	r3, r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	18c3      	adds	r3, r0, r3
 800381c:	185b      	adds	r3, r3, r1
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003822:	193b      	adds	r3, r7, r4
 8003824:	781a      	ldrb	r2, [r3, #0]
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	23b4      	movs	r3, #180	; 0xb4
 800382a:	0059      	lsls	r1, r3, #1
 800382c:	0013      	movs	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	189b      	adds	r3, r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	18c3      	adds	r3, r0, r3
 8003836:	185b      	adds	r3, r3, r1
 8003838:	193a      	adds	r2, r7, r4
 800383a:	7812      	ldrb	r2, [r2, #0]
 800383c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800383e:	193b      	adds	r3, r7, r4
 8003840:	781a      	ldrb	r2, [r3, #0]
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	236c      	movs	r3, #108	; 0x6c
 8003846:	33ff      	adds	r3, #255	; 0xff
 8003848:	0019      	movs	r1, r3
 800384a:	0013      	movs	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	189b      	adds	r3, r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	18c3      	adds	r3, r0, r3
 8003854:	185b      	adds	r3, r3, r1
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800385a:	193b      	adds	r3, r7, r4
 800385c:	781a      	ldrb	r2, [r3, #0]
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	23bc      	movs	r3, #188	; 0xbc
 8003862:	0059      	lsls	r1, r3, #1
 8003864:	0013      	movs	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	189b      	adds	r3, r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	18c3      	adds	r3, r0, r3
 800386e:	185b      	adds	r3, r3, r1
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003874:	193b      	adds	r3, r7, r4
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	23be      	movs	r3, #190	; 0xbe
 800387c:	0059      	lsls	r1, r3, #1
 800387e:	0013      	movs	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	189b      	adds	r3, r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	18c3      	adds	r3, r0, r3
 8003888:	185b      	adds	r3, r3, r1
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800388e:	193b      	adds	r3, r7, r4
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	23c0      	movs	r3, #192	; 0xc0
 8003896:	0059      	lsls	r1, r3, #1
 8003898:	0013      	movs	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	189b      	adds	r3, r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	18c3      	adds	r3, r0, r3
 80038a2:	185b      	adds	r3, r3, r1
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a8:	193b      	adds	r3, r7, r4
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	193b      	adds	r3, r7, r4
 80038ae:	3201      	adds	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	230f      	movs	r3, #15
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d3a1      	bcc.n	8003804 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	466a      	mov	r2, sp
 80038c8:	0011      	movs	r1, r2
 80038ca:	001a      	movs	r2, r3
 80038cc:	3210      	adds	r2, #16
 80038ce:	ca70      	ldmia	r2!, {r4, r5, r6}
 80038d0:	c170      	stmia	r1!, {r4, r5, r6}
 80038d2:	ca30      	ldmia	r2!, {r4, r5}
 80038d4:	c130      	stmia	r1!, {r4, r5}
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f004 fd52 	bl	8008384 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	2100      	movs	r1, #0
 80038e6:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a08      	ldr	r2, [pc, #32]	; (800390c <HAL_PCD_Init+0x21c>)
 80038ec:	2101      	movs	r1, #1
 80038ee:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d103      	bne.n	8003900 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	0018      	movs	r0, r3
 80038fc:	f001 fd34 	bl	8005368 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	0018      	movs	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	b005      	add	sp, #20
 8003908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	000002a9 	.word	0x000002a9

08003910 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	23aa      	movs	r3, #170	; 0xaa
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	5cd3      	ldrb	r3, [r2, r3]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_PCD_Start+0x18>
 8003924:	2302      	movs	r3, #2
 8003926:	e014      	b.n	8003952 <HAL_PCD_Start+0x42>
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	23aa      	movs	r3, #170	; 0xaa
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	2101      	movs	r1, #1
 8003930:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	0018      	movs	r0, r3
 8003938:	f004 fcf4 	bl	8008324 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	0018      	movs	r0, r3
 8003942:	f006 fc4f 	bl	800a1e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	23aa      	movs	r3, #170	; 0xaa
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	2100      	movs	r1, #0
 800394e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	0018      	movs	r0, r3
 800396a:	f006 fc51 	bl	800a210 <USB_ReadInterrupts>
 800396e:	0002      	movs	r2, r0
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	401a      	ands	r2, r3
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	021b      	lsls	r3, r3, #8
 800397a:	429a      	cmp	r2, r3
 800397c:	d103      	bne.n	8003986 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	0018      	movs	r0, r3
 8003982:	f000 fbbb 	bl	80040fc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	0018      	movs	r0, r3
 800398c:	f006 fc40 	bl	800a210 <USB_ReadInterrupts>
 8003990:	0002      	movs	r2, r0
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	401a      	ands	r2, r3
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	429a      	cmp	r2, r3
 800399e:	d114      	bne.n	80039ca <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2244      	movs	r2, #68	; 0x44
 80039a6:	5a9b      	ldrh	r3, [r3, r2]
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	49a2      	ldr	r1, [pc, #648]	; (8003c38 <HAL_PCD_IRQHandler+0x2dc>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	b291      	uxth	r1, r2
 80039b4:	2244      	movs	r2, #68	; 0x44
 80039b6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f008 fcab 	bl	800c316 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2100      	movs	r1, #0
 80039c4:	0018      	movs	r0, r3
 80039c6:	f000 f945 	bl	8003c54 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f006 fc1e 	bl	800a210 <USB_ReadInterrupts>
 80039d4:	0002      	movs	r2, r0
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	01db      	lsls	r3, r3, #7
 80039da:	401a      	ands	r2, r3
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	01db      	lsls	r3, r3, #7
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d10b      	bne.n	80039fc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2244      	movs	r2, #68	; 0x44
 80039ea:	5a9b      	ldrh	r3, [r3, r2]
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4992      	ldr	r1, [pc, #584]	; (8003c3c <HAL_PCD_IRQHandler+0x2e0>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	b291      	uxth	r1, r2
 80039f8:	2244      	movs	r2, #68	; 0x44
 80039fa:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f006 fc05 	bl	800a210 <USB_ReadInterrupts>
 8003a06:	0002      	movs	r2, r0
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	019b      	lsls	r3, r3, #6
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d10b      	bne.n	8003a2e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2244      	movs	r2, #68	; 0x44
 8003a1c:	5a9b      	ldrh	r3, [r3, r2]
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4986      	ldr	r1, [pc, #536]	; (8003c40 <HAL_PCD_IRQHandler+0x2e4>)
 8003a26:	400a      	ands	r2, r1
 8003a28:	b291      	uxth	r1, r2
 8003a2a:	2244      	movs	r2, #68	; 0x44
 8003a2c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f006 fbec 	bl	800a210 <USB_ReadInterrupts>
 8003a38:	0002      	movs	r2, r0
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	015b      	lsls	r3, r3, #5
 8003a3e:	401a      	ands	r2, r3
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	015b      	lsls	r3, r3, #5
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d137      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2240      	movs	r2, #64	; 0x40
 8003a4e:	5a9b      	ldrh	r3, [r3, r2]
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2104      	movs	r1, #4
 8003a58:	438a      	bics	r2, r1
 8003a5a:	b291      	uxth	r1, r2
 8003a5c:	2240      	movs	r2, #64	; 0x40
 8003a5e:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2240      	movs	r2, #64	; 0x40
 8003a66:	5a9b      	ldrh	r3, [r3, r2]
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2108      	movs	r1, #8
 8003a70:	438a      	bics	r2, r1
 8003a72:	b291      	uxth	r1, r2
 8003a74:	2240      	movs	r2, #64	; 0x40
 8003a76:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	23b8      	movs	r3, #184	; 0xb8
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d109      	bne.n	8003a98 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	23b8      	movs	r3, #184	; 0xb8
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2100      	movs	r1, #0
 8003a92:	0018      	movs	r0, r3
 8003a94:	f001 fc92 	bl	80053bc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f008 fc7c 	bl	800c398 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2244      	movs	r2, #68	; 0x44
 8003aa6:	5a9b      	ldrh	r3, [r3, r2]
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4965      	ldr	r1, [pc, #404]	; (8003c44 <HAL_PCD_IRQHandler+0x2e8>)
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	b291      	uxth	r1, r2
 8003ab4:	2244      	movs	r2, #68	; 0x44
 8003ab6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	0018      	movs	r0, r3
 8003abe:	f006 fba7 	bl	800a210 <USB_ReadInterrupts>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	401a      	ands	r2, r3
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d127      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2240      	movs	r2, #64	; 0x40
 8003ad8:	5a9b      	ldrh	r3, [r3, r2]
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2108      	movs	r1, #8
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	b291      	uxth	r1, r2
 8003ae6:	2240      	movs	r2, #64	; 0x40
 8003ae8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2244      	movs	r2, #68	; 0x44
 8003af0:	5a9b      	ldrh	r3, [r3, r2]
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4953      	ldr	r1, [pc, #332]	; (8003c48 <HAL_PCD_IRQHandler+0x2ec>)
 8003afa:	400a      	ands	r2, r1
 8003afc:	b291      	uxth	r1, r2
 8003afe:	2244      	movs	r2, #68	; 0x44
 8003b00:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	5a9b      	ldrh	r3, [r3, r2]
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2104      	movs	r1, #4
 8003b12:	430a      	orrs	r2, r1
 8003b14:	b291      	uxth	r1, r2
 8003b16:	2240      	movs	r2, #64	; 0x40
 8003b18:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f008 fc1f 	bl	800c360 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f006 fb72 	bl	800a210 <USB_ReadInterrupts>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	2280      	movs	r2, #128	; 0x80
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b80      	cmp	r3, #128	; 0x80
 8003b34:	d145      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2244      	movs	r2, #68	; 0x44
 8003b3c:	5a9b      	ldrh	r3, [r3, r2]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2180      	movs	r1, #128	; 0x80
 8003b46:	438a      	bics	r2, r1
 8003b48:	b291      	uxth	r1, r2
 8003b4a:	2244      	movs	r2, #68	; 0x44
 8003b4c:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	23b8      	movs	r3, #184	; 0xb8
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	5cd3      	ldrb	r3, [r2, r3]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d12f      	bne.n	8003bba <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2240      	movs	r2, #64	; 0x40
 8003b60:	5a9b      	ldrh	r3, [r3, r2]
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2104      	movs	r1, #4
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	b291      	uxth	r1, r2
 8003b6e:	2240      	movs	r2, #64	; 0x40
 8003b70:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2240      	movs	r2, #64	; 0x40
 8003b78:	5a9b      	ldrh	r3, [r3, r2]
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2108      	movs	r1, #8
 8003b82:	430a      	orrs	r2, r1
 8003b84:	b291      	uxth	r1, r2
 8003b86:	2240      	movs	r2, #64	; 0x40
 8003b88:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	23b8      	movs	r3, #184	; 0xb8
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	2101      	movs	r1, #1
 8003b92:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2254      	movs	r2, #84	; 0x54
 8003b9a:	5a9b      	ldrh	r3, [r3, r2]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	223c      	movs	r2, #60	; 0x3c
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	23b9      	movs	r3, #185	; 0xb9
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f001 fc02 	bl	80053bc <HAL_PCDEx_LPM_Callback>
 8003bb8:	e003      	b.n	8003bc2 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f008 fbcf 	bl	800c360 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f006 fb22 	bl	800a210 <USB_ReadInterrupts>
 8003bcc:	0002      	movs	r2, r0
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d10f      	bne.n	8003bfc <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2244      	movs	r2, #68	; 0x44
 8003be2:	5a9b      	ldrh	r3, [r3, r2]
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4918      	ldr	r1, [pc, #96]	; (8003c4c <HAL_PCD_IRQHandler+0x2f0>)
 8003bec:	400a      	ands	r2, r1
 8003bee:	b291      	uxth	r1, r2
 8003bf0:	2244      	movs	r2, #68	; 0x44
 8003bf2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f008 fb7e 	bl	800c2f8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f006 fb05 	bl	800a210 <USB_ReadInterrupts>
 8003c06:	0002      	movs	r2, r0
 8003c08:	2380      	movs	r3, #128	; 0x80
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d10b      	bne.n	8003c2e <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2244      	movs	r2, #68	; 0x44
 8003c1c:	5a9b      	ldrh	r3, [r3, r2]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	490a      	ldr	r1, [pc, #40]	; (8003c50 <HAL_PCD_IRQHandler+0x2f4>)
 8003c26:	400a      	ands	r2, r1
 8003c28:	b291      	uxth	r1, r2
 8003c2a:	2244      	movs	r2, #68	; 0x44
 8003c2c:	5299      	strh	r1, [r3, r2]
  }
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b002      	add	sp, #8
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	fffffbff 	.word	0xfffffbff
 8003c3c:	ffffbfff 	.word	0xffffbfff
 8003c40:	ffffdfff 	.word	0xffffdfff
 8003c44:	ffffefff 	.word	0xffffefff
 8003c48:	fffff7ff 	.word	0xfffff7ff
 8003c4c:	fffffdff 	.word	0xfffffdff
 8003c50:	fffffeff 	.word	0xfffffeff

08003c54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	000a      	movs	r2, r1
 8003c5e:	1cfb      	adds	r3, r7, #3
 8003c60:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	23aa      	movs	r3, #170	; 0xaa
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	5cd3      	ldrb	r3, [r2, r3]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_PCD_SetAddress+0x1e>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e017      	b.n	8003ca2 <HAL_PCD_SetAddress+0x4e>
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	23aa      	movs	r3, #170	; 0xaa
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	2101      	movs	r1, #1
 8003c7a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	1cfa      	adds	r2, r7, #3
 8003c80:	2124      	movs	r1, #36	; 0x24
 8003c82:	7812      	ldrb	r2, [r2, #0]
 8003c84:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	1cfb      	adds	r3, r7, #3
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	0019      	movs	r1, r3
 8003c90:	0010      	movs	r0, r2
 8003c92:	f006 fa93 	bl	800a1bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	23aa      	movs	r3, #170	; 0xaa
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003caa:	b590      	push	{r4, r7, lr}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	000c      	movs	r4, r1
 8003cb4:	0010      	movs	r0, r2
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	1cfb      	adds	r3, r7, #3
 8003cba:	1c22      	adds	r2, r4, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	003b      	movs	r3, r7
 8003cc0:	1c02      	adds	r2, r0, #0
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	1cbb      	adds	r3, r7, #2
 8003cc6:	1c0a      	adds	r2, r1, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003cca:	230b      	movs	r3, #11
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cd2:	1cfb      	adds	r3, r7, #3
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b25b      	sxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	da0f      	bge.n	8003cfc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cdc:	1cfb      	adds	r3, r7, #3
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	0013      	movs	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	189b      	adds	r3, r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	18d3      	adds	r3, r2, r3
 8003cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	705a      	strb	r2, [r3, #1]
 8003cfa:	e00f      	b.n	8003d1c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cfc:	1cfb      	adds	r3, r7, #3
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2207      	movs	r2, #7
 8003d02:	401a      	ands	r2, r3
 8003d04:	0013      	movs	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	189b      	adds	r3, r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	3369      	adds	r3, #105	; 0x69
 8003d0e:	33ff      	adds	r3, #255	; 0xff
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	18d3      	adds	r3, r2, r3
 8003d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d1c:	1cfb      	adds	r3, r7, #3
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2207      	movs	r2, #7
 8003d22:	4013      	ands	r3, r2
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d2a:	003b      	movs	r3, r7
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1cba      	adds	r2, r7, #2
 8003d36:	7812      	ldrb	r2, [r2, #0]
 8003d38:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d4c:	1cbb      	adds	r3, r7, #2
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d102      	bne.n	8003d5a <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	23aa      	movs	r3, #170	; 0xaa
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	5cd3      	ldrb	r3, [r2, r3]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_PCD_EP_Open+0xc0>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e013      	b.n	8003d92 <HAL_PCD_EP_Open+0xe8>
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	23aa      	movs	r3, #170	; 0xaa
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	2101      	movs	r1, #1
 8003d72:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	0011      	movs	r1, r2
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f004 fb2d 	bl	80083dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	23aa      	movs	r3, #170	; 0xaa
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	2100      	movs	r1, #0
 8003d8a:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003d8c:	230b      	movs	r3, #11
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	781b      	ldrb	r3, [r3, #0]
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b005      	add	sp, #20
 8003d98:	bd90      	pop	{r4, r7, pc}

08003d9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	000a      	movs	r2, r1
 8003da4:	1cfb      	adds	r3, r7, #3
 8003da6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003da8:	1cfb      	adds	r3, r7, #3
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	b25b      	sxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	da0f      	bge.n	8003dd2 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db2:	1cfb      	adds	r3, r7, #3
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2207      	movs	r2, #7
 8003db8:	4013      	ands	r3, r2
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	0013      	movs	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	189b      	adds	r3, r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	18d3      	adds	r3, r2, r3
 8003dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	705a      	strb	r2, [r3, #1]
 8003dd0:	e00f      	b.n	8003df2 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dd2:	1cfb      	adds	r3, r7, #3
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2207      	movs	r2, #7
 8003dd8:	401a      	ands	r2, r3
 8003dda:	0013      	movs	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	3369      	adds	r3, #105	; 0x69
 8003de4:	33ff      	adds	r3, #255	; 0xff
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	18d3      	adds	r3, r2, r3
 8003dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003df2:	1cfb      	adds	r3, r7, #3
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2207      	movs	r2, #7
 8003df8:	4013      	ands	r3, r2
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	23aa      	movs	r3, #170	; 0xaa
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	5cd3      	ldrb	r3, [r2, r3]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_PCD_EP_Close+0x76>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e011      	b.n	8003e34 <HAL_PCD_EP_Close+0x9a>
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	23aa      	movs	r3, #170	; 0xaa
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	2101      	movs	r1, #1
 8003e18:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	0011      	movs	r1, r2
 8003e22:	0018      	movs	r0, r3
 8003e24:	f004 fe4e 	bl	8008ac4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	23aa      	movs	r3, #170	; 0xaa
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	2100      	movs	r1, #0
 8003e30:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b004      	add	sp, #16
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	200b      	movs	r0, #11
 8003e4a:	183b      	adds	r3, r7, r0
 8003e4c:	1c0a      	adds	r2, r1, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e50:	0001      	movs	r1, r0
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2207      	movs	r2, #7
 8003e58:	401a      	ands	r2, r3
 8003e5a:	0013      	movs	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	3369      	adds	r3, #105	; 0x69
 8003e64:	33ff      	adds	r3, #255	; 0xff
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	18d3      	adds	r3, r2, r3
 8003e6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2207      	movs	r2, #7
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2207      	movs	r2, #7
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d107      	bne.n	8003eac <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	0011      	movs	r1, r2
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f004 ffcd 	bl	8008e44 <USB_EPStartXfer>
 8003eaa:	e006      	b.n	8003eba <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	0011      	movs	r1, r2
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f004 ffc5 	bl	8008e44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b006      	add	sp, #24
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	000a      	movs	r2, r1
 8003ece:	1cfb      	adds	r3, r7, #3
 8003ed0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ed2:	1cfb      	adds	r3, r7, #3
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2207      	movs	r2, #7
 8003ed8:	401a      	ands	r2, r3
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	23c2      	movs	r3, #194	; 0xc2
 8003ede:	0059      	lsls	r1, r3, #1
 8003ee0:	0013      	movs	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	18c3      	adds	r3, r0, r3
 8003eea:	185b      	adds	r3, r3, r1
 8003eec:	681b      	ldr	r3, [r3, #0]
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b002      	add	sp, #8
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	200b      	movs	r0, #11
 8003f04:	183b      	adds	r3, r7, r0
 8003f06:	1c0a      	adds	r2, r1, #0
 8003f08:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f0a:	183b      	adds	r3, r7, r0
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2207      	movs	r2, #7
 8003f10:	4013      	ands	r3, r2
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	0013      	movs	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	189b      	adds	r3, r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	18d3      	adds	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2224      	movs	r2, #36	; 0x24
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2201      	movs	r2, #1
 8003f46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f48:	183b      	adds	r3, r7, r0
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2207      	movs	r2, #7
 8003f4e:	4013      	ands	r3, r2
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f56:	183b      	adds	r3, r7, r0
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2207      	movs	r2, #7
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d107      	bne.n	8003f70 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	0011      	movs	r1, r2
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f004 ff6b 	bl	8008e44 <USB_EPStartXfer>
 8003f6e:	e006      	b.n	8003f7e <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f004 ff63 	bl	8008e44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	0018      	movs	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b006      	add	sp, #24
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	000a      	movs	r2, r1
 8003f92:	1cfb      	adds	r3, r7, #3
 8003f94:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f96:	1cfb      	adds	r3, r7, #3
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2207      	movs	r2, #7
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d901      	bls.n	8003faa <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e046      	b.n	8004038 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003faa:	1cfb      	adds	r3, r7, #3
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	b25b      	sxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	da0f      	bge.n	8003fd4 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb4:	1cfb      	adds	r3, r7, #3
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2207      	movs	r2, #7
 8003fba:	4013      	ands	r3, r2
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	0013      	movs	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	18d3      	adds	r3, r2, r3
 8003fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	705a      	strb	r2, [r3, #1]
 8003fd2:	e00d      	b.n	8003ff0 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fd4:	1cfb      	adds	r3, r7, #3
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	0013      	movs	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	189b      	adds	r3, r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	3369      	adds	r3, #105	; 0x69
 8003fe2:	33ff      	adds	r3, #255	; 0xff
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	18d3      	adds	r3, r2, r3
 8003fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff6:	1cfb      	adds	r3, r7, #3
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2207      	movs	r2, #7
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	23aa      	movs	r3, #170	; 0xaa
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	5cd3      	ldrb	r3, [r2, r3]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_PCD_EP_SetStall+0x8c>
 8004010:	2302      	movs	r3, #2
 8004012:	e011      	b.n	8004038 <HAL_PCD_EP_SetStall+0xb0>
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	23aa      	movs	r3, #170	; 0xaa
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	2101      	movs	r1, #1
 800401c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f005 ffc6 	bl	8009fb8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	23aa      	movs	r3, #170	; 0xaa
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	2100      	movs	r1, #0
 8004034:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	0018      	movs	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	b004      	add	sp, #16
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	000a      	movs	r2, r1
 800404a:	1cfb      	adds	r3, r7, #3
 800404c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800404e:	1cfb      	adds	r3, r7, #3
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	220f      	movs	r2, #15
 8004054:	401a      	ands	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	429a      	cmp	r2, r3
 800405c:	d901      	bls.n	8004062 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e048      	b.n	80040f4 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004062:	1cfb      	adds	r3, r7, #3
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b25b      	sxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	da0f      	bge.n	800408c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800406c:	1cfb      	adds	r3, r7, #3
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2207      	movs	r2, #7
 8004072:	4013      	ands	r3, r2
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	0013      	movs	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	189b      	adds	r3, r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	18d3      	adds	r3, r2, r3
 8004082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	705a      	strb	r2, [r3, #1]
 800408a:	e00f      	b.n	80040ac <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800408c:	1cfb      	adds	r3, r7, #3
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2207      	movs	r2, #7
 8004092:	401a      	ands	r2, r3
 8004094:	0013      	movs	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	189b      	adds	r3, r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	3369      	adds	r3, #105	; 0x69
 800409e:	33ff      	adds	r3, #255	; 0xff
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	18d3      	adds	r3, r2, r3
 80040a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b2:	1cfb      	adds	r3, r7, #3
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2207      	movs	r2, #7
 80040b8:	4013      	ands	r3, r2
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	23aa      	movs	r3, #170	; 0xaa
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	5cd3      	ldrb	r3, [r2, r3]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_PCD_EP_ClrStall+0x90>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e011      	b.n	80040f4 <HAL_PCD_EP_ClrStall+0xb4>
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	23aa      	movs	r3, #170	; 0xaa
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	2101      	movs	r1, #1
 80040d8:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	0011      	movs	r1, r2
 80040e2:	0018      	movs	r0, r3
 80040e4:	f005 ffb8 	bl	800a058 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	23aa      	movs	r3, #170	; 0xaa
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	2100      	movs	r1, #0
 80040f0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}

080040fc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80040fc:	b5b0      	push	{r4, r5, r7, lr}
 80040fe:	b096      	sub	sp, #88	; 0x58
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004104:	f000 fbd8 	bl	80048b8 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	2056      	movs	r0, #86	; 0x56
 800410e:	183b      	adds	r3, r7, r0
 8004110:	2144      	movs	r1, #68	; 0x44
 8004112:	5a52      	ldrh	r2, [r2, r1]
 8004114:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004116:	183b      	adds	r3, r7, r0
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	2455      	movs	r4, #85	; 0x55
 800411e:	193b      	adds	r3, r7, r4
 8004120:	210f      	movs	r1, #15
 8004122:	400a      	ands	r2, r1
 8004124:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004126:	193b      	adds	r3, r7, r4
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d000      	beq.n	8004130 <PCD_EP_ISR_Handler+0x34>
 800412e:	e179      	b.n	8004424 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004130:	183b      	adds	r3, r7, r0
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	2210      	movs	r2, #16
 8004136:	4013      	ands	r3, r2
 8004138:	d154      	bne.n	80041e4 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29a      	uxth	r2, r3
 8004142:	200e      	movs	r0, #14
 8004144:	183b      	adds	r3, r7, r0
 8004146:	49af      	ldr	r1, [pc, #700]	; (8004404 <PCD_EP_ISR_Handler+0x308>)
 8004148:	400a      	ands	r2, r1
 800414a:	801a      	strh	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	183a      	adds	r2, r7, r0
 8004152:	8812      	ldrh	r2, [r2, #0]
 8004154:	49ac      	ldr	r1, [pc, #688]	; (8004408 <PCD_EP_ISR_Handler+0x30c>)
 8004156:	430a      	orrs	r2, r1
 8004158:	b292      	uxth	r2, r2
 800415a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3328      	adds	r3, #40	; 0x28
 8004160:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2250      	movs	r2, #80	; 0x50
 8004168:	5a9b      	ldrh	r3, [r3, r2]
 800416a:	b29b      	uxth	r3, r3
 800416c:	001a      	movs	r2, r3
 800416e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	18d2      	adds	r2, r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	18d3      	adds	r3, r2, r3
 800417c:	4aa3      	ldr	r2, [pc, #652]	; (800440c <PCD_EP_ISR_Handler+0x310>)
 800417e:	4694      	mov	ip, r2
 8004180:	4463      	add	r3, ip
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	059b      	lsls	r3, r3, #22
 8004186:	0d9a      	lsrs	r2, r3, #22
 8004188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800418c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	18d2      	adds	r2, r2, r3
 8004196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004198:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2100      	movs	r1, #0
 800419e:	0018      	movs	r0, r3
 80041a0:	f008 f88c 	bl	800c2bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2224      	movs	r2, #36	; 0x24
 80041a8:	5c9b      	ldrb	r3, [r3, r2]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <PCD_EP_ISR_Handler+0xb8>
 80041b0:	f000 fb82 	bl	80048b8 <PCD_EP_ISR_Handler+0x7bc>
 80041b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <PCD_EP_ISR_Handler+0xc4>
 80041bc:	f000 fb7c 	bl	80048b8 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2224      	movs	r2, #36	; 0x24
 80041c4:	5c9b      	ldrb	r3, [r3, r2]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2280      	movs	r2, #128	; 0x80
 80041ca:	4252      	negs	r2, r2
 80041cc:	4313      	orrs	r3, r2
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	b291      	uxth	r1, r2
 80041d6:	224c      	movs	r2, #76	; 0x4c
 80041d8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2224      	movs	r2, #36	; 0x24
 80041de:	2100      	movs	r1, #0
 80041e0:	5499      	strb	r1, [r3, r2]
 80041e2:	e369      	b.n	80048b8 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3369      	adds	r3, #105	; 0x69
 80041e8:	33ff      	adds	r3, #255	; 0xff
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2152      	movs	r1, #82	; 0x52
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	8812      	ldrh	r2, [r2, #0]
 80041f6:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	881a      	ldrh	r2, [r3, #0]
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	4013      	ands	r3, r2
 8004202:	d037      	beq.n	8004274 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2250      	movs	r2, #80	; 0x50
 800420a:	5a9b      	ldrh	r3, [r3, r2]
 800420c:	b29b      	uxth	r3, r3
 800420e:	001a      	movs	r2, r3
 8004210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	18d2      	adds	r2, r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	18d3      	adds	r3, r2, r3
 800421e:	4a7c      	ldr	r2, [pc, #496]	; (8004410 <PCD_EP_ISR_Handler+0x314>)
 8004220:	4694      	mov	ip, r2
 8004222:	4463      	add	r3, ip
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	059b      	lsls	r3, r3, #22
 8004228:	0d9a      	lsrs	r2, r3, #22
 800422a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	22ac      	movs	r2, #172	; 0xac
 8004236:	0092      	lsls	r2, r2, #2
 8004238:	1899      	adds	r1, r3, r2
 800423a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800423e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004240:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004242:	b29b      	uxth	r3, r3
 8004244:	f006 f836 	bl	800a2b4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29a      	uxth	r2, r3
 8004250:	2010      	movs	r0, #16
 8004252:	183b      	adds	r3, r7, r0
 8004254:	496f      	ldr	r1, [pc, #444]	; (8004414 <PCD_EP_ISR_Handler+0x318>)
 8004256:	400a      	ands	r2, r1
 8004258:	801a      	strh	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	183a      	adds	r2, r7, r0
 8004260:	8812      	ldrh	r2, [r2, #0]
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	430a      	orrs	r2, r1
 8004266:	b292      	uxth	r2, r2
 8004268:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	0018      	movs	r0, r3
 800426e:	f007 ffef 	bl	800c250 <HAL_PCD_SetupStageCallback>
 8004272:	e321      	b.n	80048b8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004274:	2352      	movs	r3, #82	; 0x52
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	2200      	movs	r2, #0
 800427a:	5e9b      	ldrsh	r3, [r3, r2]
 800427c:	2b00      	cmp	r3, #0
 800427e:	db00      	blt.n	8004282 <PCD_EP_ISR_Handler+0x186>
 8004280:	e31a      	b.n	80048b8 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29a      	uxth	r2, r3
 800428a:	201e      	movs	r0, #30
 800428c:	183b      	adds	r3, r7, r0
 800428e:	4961      	ldr	r1, [pc, #388]	; (8004414 <PCD_EP_ISR_Handler+0x318>)
 8004290:	400a      	ands	r2, r1
 8004292:	801a      	strh	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	183a      	adds	r2, r7, r0
 800429a:	8812      	ldrh	r2, [r2, #0]
 800429c:	2180      	movs	r1, #128	; 0x80
 800429e:	430a      	orrs	r2, r1
 80042a0:	b292      	uxth	r2, r2
 80042a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2250      	movs	r2, #80	; 0x50
 80042aa:	5a9b      	ldrh	r3, [r3, r2]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	001a      	movs	r2, r3
 80042b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	18d2      	adds	r2, r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	18d3      	adds	r3, r2, r3
 80042be:	4a54      	ldr	r2, [pc, #336]	; (8004410 <PCD_EP_ISR_Handler+0x314>)
 80042c0:	4694      	mov	ip, r2
 80042c2:	4463      	add	r3, ip
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	059b      	lsls	r3, r3, #22
 80042c8:	0d9a      	lsrs	r2, r3, #22
 80042ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80042ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01a      	beq.n	800430c <PCD_EP_ISR_Handler+0x210>
 80042d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e4:	6959      	ldr	r1, [r3, #20]
 80042e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80042ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f005 ffe0 	bl	800a2b4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80042f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	18d2      	adds	r2, r2, r3
 80042fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004300:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2100      	movs	r1, #0
 8004306:	0018      	movs	r0, r3
 8004308:	f007 ffb7 	bl	800c27a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	001a      	movs	r2, r3
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	4013      	ands	r3, r2
 800431c:	d000      	beq.n	8004320 <PCD_EP_ISR_Handler+0x224>
 800431e:	e2cb      	b.n	80048b8 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2250      	movs	r2, #80	; 0x50
 800432c:	5a9b      	ldrh	r3, [r3, r2]
 800432e:	b29b      	uxth	r3, r3
 8004330:	001a      	movs	r2, r3
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	189b      	adds	r3, r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	4a35      	ldr	r2, [pc, #212]	; (8004410 <PCD_EP_ISR_Handler+0x314>)
 800433c:	4694      	mov	ip, r2
 800433e:	4463      	add	r3, ip
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d110      	bne.n	800436c <PCD_EP_ISR_Handler+0x270>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	4a31      	ldr	r2, [pc, #196]	; (8004418 <PCD_EP_ISR_Handler+0x31c>)
 8004352:	4013      	ands	r3, r2
 8004354:	b29a      	uxth	r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	4a29      	ldr	r2, [pc, #164]	; (8004408 <PCD_EP_ISR_Handler+0x30c>)
 8004362:	4313      	orrs	r3, r2
 8004364:	b29a      	uxth	r2, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	e02b      	b.n	80043c4 <PCD_EP_ISR_Handler+0x2c8>
 800436c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b3e      	cmp	r3, #62	; 0x3e
 8004372:	d812      	bhi.n	800439a <PCD_EP_ISR_Handler+0x29e>
 8004374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	647b      	str	r3, [r7, #68]	; 0x44
 800437c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2201      	movs	r2, #1
 8004382:	4013      	ands	r3, r2
 8004384:	d002      	beq.n	800438c <PCD_EP_ISR_Handler+0x290>
 8004386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004388:	3301      	adds	r3, #1
 800438a:	647b      	str	r3, [r7, #68]	; 0x44
 800438c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800438e:	b29b      	uxth	r3, r3
 8004390:	029b      	lsls	r3, r3, #10
 8004392:	b29a      	uxth	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	e014      	b.n	80043c4 <PCD_EP_ISR_Handler+0x2c8>
 800439a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	647b      	str	r3, [r7, #68]	; 0x44
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	221f      	movs	r2, #31
 80043a8:	4013      	ands	r3, r2
 80043aa:	d102      	bne.n	80043b2 <PCD_EP_ISR_Handler+0x2b6>
 80043ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ae:	3b01      	subs	r3, #1
 80043b0:	647b      	str	r3, [r7, #68]	; 0x44
 80043b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	029b      	lsls	r3, r3, #10
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	4a13      	ldr	r2, [pc, #76]	; (8004408 <PCD_EP_ISR_Handler+0x30c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	b29a      	uxth	r2, r3
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	2012      	movs	r0, #18
 80043ce:	183b      	adds	r3, r7, r0
 80043d0:	4912      	ldr	r1, [pc, #72]	; (800441c <PCD_EP_ISR_Handler+0x320>)
 80043d2:	400a      	ands	r2, r1
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	183b      	adds	r3, r7, r0
 80043d8:	183a      	adds	r2, r7, r0
 80043da:	8812      	ldrh	r2, [r2, #0]
 80043dc:	2180      	movs	r1, #128	; 0x80
 80043de:	0149      	lsls	r1, r1, #5
 80043e0:	404a      	eors	r2, r1
 80043e2:	801a      	strh	r2, [r3, #0]
 80043e4:	183b      	adds	r3, r7, r0
 80043e6:	183a      	adds	r2, r7, r0
 80043e8:	8812      	ldrh	r2, [r2, #0]
 80043ea:	2180      	movs	r1, #128	; 0x80
 80043ec:	0189      	lsls	r1, r1, #6
 80043ee:	404a      	eors	r2, r1
 80043f0:	801a      	strh	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	183a      	adds	r2, r7, r0
 80043f8:	8812      	ldrh	r2, [r2, #0]
 80043fa:	4909      	ldr	r1, [pc, #36]	; (8004420 <PCD_EP_ISR_Handler+0x324>)
 80043fc:	430a      	orrs	r2, r1
 80043fe:	b292      	uxth	r2, r2
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	e259      	b.n	80048b8 <PCD_EP_ISR_Handler+0x7bc>
 8004404:	ffff8f0f 	.word	0xffff8f0f
 8004408:	ffff8000 	.word	0xffff8000
 800440c:	00000402 	.word	0x00000402
 8004410:	00000406 	.word	0x00000406
 8004414:	00000f8f 	.word	0x00000f8f
 8004418:	ffff83ff 	.word	0xffff83ff
 800441c:	ffffbf8f 	.word	0xffffbf8f
 8004420:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	001a      	movs	r2, r3
 800442a:	2055      	movs	r0, #85	; 0x55
 800442c:	183b      	adds	r3, r7, r0
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	18d2      	adds	r2, r2, r3
 8004434:	2152      	movs	r1, #82	; 0x52
 8004436:	187b      	adds	r3, r7, r1
 8004438:	8812      	ldrh	r2, [r2, #0]
 800443a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800443c:	187b      	adds	r3, r7, r1
 800443e:	2200      	movs	r2, #0
 8004440:	5e9b      	ldrsh	r3, [r3, r2]
 8004442:	2b00      	cmp	r3, #0
 8004444:	db00      	blt.n	8004448 <PCD_EP_ISR_Handler+0x34c>
 8004446:	e0fa      	b.n	800463e <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	001a      	movs	r2, r3
 800444e:	183b      	adds	r3, r7, r0
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	18d3      	adds	r3, r2, r3
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	b29a      	uxth	r2, r3
 800445a:	2450      	movs	r4, #80	; 0x50
 800445c:	193b      	adds	r3, r7, r4
 800445e:	49cf      	ldr	r1, [pc, #828]	; (800479c <PCD_EP_ISR_Handler+0x6a0>)
 8004460:	400a      	ands	r2, r1
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	001a      	movs	r2, r3
 800446a:	183b      	adds	r3, r7, r0
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	18d3      	adds	r3, r2, r3
 8004472:	193a      	adds	r2, r7, r4
 8004474:	8812      	ldrh	r2, [r2, #0]
 8004476:	2180      	movs	r1, #128	; 0x80
 8004478:	430a      	orrs	r2, r1
 800447a:	b292      	uxth	r2, r2
 800447c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800447e:	183b      	adds	r3, r7, r0
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	0013      	movs	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	189b      	adds	r3, r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	3369      	adds	r3, #105	; 0x69
 800448c:	33ff      	adds	r3, #255	; 0xff
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	18d3      	adds	r3, r2, r3
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004496:	7b1b      	ldrb	r3, [r3, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d125      	bne.n	80044e8 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2250      	movs	r2, #80	; 0x50
 80044a2:	5a9b      	ldrh	r3, [r3, r2]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	001a      	movs	r2, r3
 80044a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	18d2      	adds	r2, r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	18d3      	adds	r3, r2, r3
 80044b6:	4aba      	ldr	r2, [pc, #744]	; (80047a0 <PCD_EP_ISR_Handler+0x6a4>)
 80044b8:	4694      	mov	ip, r2
 80044ba:	4463      	add	r3, ip
 80044bc:	881a      	ldrh	r2, [r3, #0]
 80044be:	2448      	movs	r4, #72	; 0x48
 80044c0:	193b      	adds	r3, r7, r4
 80044c2:	0592      	lsls	r2, r2, #22
 80044c4:	0d92      	lsrs	r2, r2, #22
 80044c6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80044c8:	193b      	adds	r3, r7, r4
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d100      	bne.n	80044d2 <PCD_EP_ISR_Handler+0x3d6>
 80044d0:	e08d      	b.n	80045ee <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d8:	6959      	ldr	r1, [r3, #20]
 80044da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044dc:	88da      	ldrh	r2, [r3, #6]
 80044de:	193b      	adds	r3, r7, r4
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	f005 fee7 	bl	800a2b4 <USB_ReadPMA>
 80044e6:	e082      	b.n	80045ee <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80044e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ea:	78db      	ldrb	r3, [r3, #3]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d10c      	bne.n	800450a <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80044f0:	2348      	movs	r3, #72	; 0x48
 80044f2:	18fc      	adds	r4, r7, r3
 80044f4:	2352      	movs	r3, #82	; 0x52
 80044f6:	18fb      	adds	r3, r7, r3
 80044f8:	881a      	ldrh	r2, [r3, #0]
 80044fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	0018      	movs	r0, r3
 8004500:	f000 f9ee 	bl	80048e0 <HAL_PCD_EP_DB_Receive>
 8004504:	0003      	movs	r3, r0
 8004506:	8023      	strh	r3, [r4, #0]
 8004508:	e071      	b.n	80045ee <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	001a      	movs	r2, r3
 8004510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	18d3      	adds	r3, r2, r3
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29a      	uxth	r2, r3
 800451c:	204a      	movs	r0, #74	; 0x4a
 800451e:	183b      	adds	r3, r7, r0
 8004520:	49a0      	ldr	r1, [pc, #640]	; (80047a4 <PCD_EP_ISR_Handler+0x6a8>)
 8004522:	400a      	ands	r2, r1
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	001a      	movs	r2, r3
 800452c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	18d3      	adds	r3, r2, r3
 8004534:	183a      	adds	r2, r7, r0
 8004536:	8812      	ldrh	r2, [r2, #0]
 8004538:	499b      	ldr	r1, [pc, #620]	; (80047a8 <PCD_EP_ISR_Handler+0x6ac>)
 800453a:	430a      	orrs	r2, r1
 800453c:	b292      	uxth	r2, r2
 800453e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	001a      	movs	r2, r3
 8004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	18d3      	adds	r3, r2, r3
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	001a      	movs	r2, r3
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	01db      	lsls	r3, r3, #7
 8004558:	4013      	ands	r3, r2
 800455a:	d024      	beq.n	80045a6 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2250      	movs	r2, #80	; 0x50
 8004562:	5a9b      	ldrh	r3, [r3, r2]
 8004564:	b29b      	uxth	r3, r3
 8004566:	001a      	movs	r2, r3
 8004568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	18d2      	adds	r2, r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	18d3      	adds	r3, r2, r3
 8004576:	4a8d      	ldr	r2, [pc, #564]	; (80047ac <PCD_EP_ISR_Handler+0x6b0>)
 8004578:	4694      	mov	ip, r2
 800457a:	4463      	add	r3, ip
 800457c:	881a      	ldrh	r2, [r3, #0]
 800457e:	2448      	movs	r4, #72	; 0x48
 8004580:	193b      	adds	r3, r7, r4
 8004582:	0592      	lsls	r2, r2, #22
 8004584:	0d92      	lsrs	r2, r2, #22
 8004586:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004588:	193b      	adds	r3, r7, r4
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02e      	beq.n	80045ee <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004596:	6959      	ldr	r1, [r3, #20]
 8004598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459a:	891a      	ldrh	r2, [r3, #8]
 800459c:	193b      	adds	r3, r7, r4
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	f005 fe88 	bl	800a2b4 <USB_ReadPMA>
 80045a4:	e023      	b.n	80045ee <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2250      	movs	r2, #80	; 0x50
 80045ac:	5a9b      	ldrh	r3, [r3, r2]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	001a      	movs	r2, r3
 80045b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	18d2      	adds	r2, r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	18d3      	adds	r3, r2, r3
 80045c0:	4a77      	ldr	r2, [pc, #476]	; (80047a0 <PCD_EP_ISR_Handler+0x6a4>)
 80045c2:	4694      	mov	ip, r2
 80045c4:	4463      	add	r3, ip
 80045c6:	881a      	ldrh	r2, [r3, #0]
 80045c8:	2448      	movs	r4, #72	; 0x48
 80045ca:	193b      	adds	r3, r7, r4
 80045cc:	0592      	lsls	r2, r2, #22
 80045ce:	0d92      	lsrs	r2, r2, #22
 80045d0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80045d2:	193b      	adds	r3, r7, r4
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e0:	6959      	ldr	r1, [r3, #20]
 80045e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e4:	895a      	ldrh	r2, [r3, #10]
 80045e6:	193b      	adds	r3, r7, r4
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	f005 fe63 	bl	800a2b4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80045ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	2148      	movs	r1, #72	; 0x48
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	18d2      	adds	r2, r2, r3
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80045fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	187b      	adds	r3, r7, r1
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	18d2      	adds	r2, r2, r3
 8004608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800460c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <PCD_EP_ISR_Handler+0x524>
 8004614:	187b      	adds	r3, r7, r1
 8004616:	881a      	ldrh	r2, [r3, #0]
 8004618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	429a      	cmp	r2, r3
 800461e:	d207      	bcs.n	8004630 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0011      	movs	r1, r2
 8004628:	0018      	movs	r0, r3
 800462a:	f007 fe26 	bl	800c27a <HAL_PCD_DataOutStageCallback>
 800462e:	e006      	b.n	800463e <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004636:	0011      	movs	r1, r2
 8004638:	0018      	movs	r0, r3
 800463a:	f004 fc03 	bl	8008e44 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800463e:	2452      	movs	r4, #82	; 0x52
 8004640:	193b      	adds	r3, r7, r4
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	2280      	movs	r2, #128	; 0x80
 8004646:	4013      	ands	r3, r2
 8004648:	d100      	bne.n	800464c <PCD_EP_ISR_Handler+0x550>
 800464a:	e135      	b.n	80048b8 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 800464c:	2055      	movs	r0, #85	; 0x55
 800464e:	183b      	adds	r3, r7, r0
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	0013      	movs	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	189b      	adds	r3, r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	18d3      	adds	r3, r2, r3
 8004660:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	001a      	movs	r2, r3
 8004668:	183b      	adds	r3, r7, r0
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	18d3      	adds	r3, r2, r3
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29a      	uxth	r2, r3
 8004674:	2542      	movs	r5, #66	; 0x42
 8004676:	197b      	adds	r3, r7, r5
 8004678:	494d      	ldr	r1, [pc, #308]	; (80047b0 <PCD_EP_ISR_Handler+0x6b4>)
 800467a:	400a      	ands	r2, r1
 800467c:	801a      	strh	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	001a      	movs	r2, r3
 8004684:	183b      	adds	r3, r7, r0
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	18d3      	adds	r3, r2, r3
 800468c:	197a      	adds	r2, r7, r5
 800468e:	8812      	ldrh	r2, [r2, #0]
 8004690:	4948      	ldr	r1, [pc, #288]	; (80047b4 <PCD_EP_ISR_Handler+0x6b8>)
 8004692:	430a      	orrs	r2, r1
 8004694:	b292      	uxth	r2, r2
 8004696:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8004698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469a:	78db      	ldrb	r3, [r3, #3]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d100      	bne.n	80046a2 <PCD_EP_ISR_Handler+0x5a6>
 80046a0:	e0ad      	b.n	80047fe <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80046a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a4:	2200      	movs	r2, #0
 80046a6:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80046a8:	193b      	adds	r3, r7, r4
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	2240      	movs	r2, #64	; 0x40
 80046ae:	4013      	ands	r3, r2
 80046b0:	d046      	beq.n	8004740 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d125      	bne.n	8004706 <PCD_EP_ISR_Handler+0x60a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2250      	movs	r2, #80	; 0x50
 80046c6:	5a9b      	ldrh	r3, [r3, r2]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	001a      	movs	r2, r3
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	189b      	adds	r3, r3, r2
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	00da      	lsls	r2, r3, #3
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	18d3      	adds	r3, r2, r3
 80046dc:	4a33      	ldr	r2, [pc, #204]	; (80047ac <PCD_EP_ISR_Handler+0x6b0>)
 80046de:	4694      	mov	ip, r2
 80046e0:	4463      	add	r3, ip
 80046e2:	623b      	str	r3, [r7, #32]
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	4a33      	ldr	r2, [pc, #204]	; (80047b8 <PCD_EP_ISR_Handler+0x6bc>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	801a      	strh	r2, [r3, #0]
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	4a2e      	ldr	r2, [pc, #184]	; (80047b4 <PCD_EP_ISR_Handler+0x6b8>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	b29a      	uxth	r2, r3
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	e073      	b.n	80047ee <PCD_EP_ISR_Handler+0x6f2>
 8004706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d16f      	bne.n	80047ee <PCD_EP_ISR_Handler+0x6f2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2250      	movs	r2, #80	; 0x50
 800471a:	5a9b      	ldrh	r3, [r3, r2]
 800471c:	b29b      	uxth	r3, r3
 800471e:	001a      	movs	r2, r3
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	189b      	adds	r3, r3, r2
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	00da      	lsls	r2, r3, #3
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	18d3      	adds	r3, r2, r3
 8004730:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <PCD_EP_ISR_Handler+0x6b0>)
 8004732:	4694      	mov	ip, r2
 8004734:	4463      	add	r3, ip
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	2200      	movs	r2, #0
 800473c:	801a      	strh	r2, [r3, #0]
 800473e:	e056      	b.n	80047ee <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d136      	bne.n	80047bc <PCD_EP_ISR_Handler+0x6c0>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	637b      	str	r3, [r7, #52]	; 0x34
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2250      	movs	r2, #80	; 0x50
 800475a:	5a9b      	ldrh	r3, [r3, r2]
 800475c:	b29b      	uxth	r3, r3
 800475e:	001a      	movs	r2, r3
 8004760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004762:	189b      	adds	r3, r3, r2
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
 8004766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	00da      	lsls	r2, r3, #3
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	18d3      	adds	r3, r2, r3
 8004770:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <PCD_EP_ISR_Handler+0x6a4>)
 8004772:	4694      	mov	ip, r2
 8004774:	4463      	add	r3, ip
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	4a0e      	ldr	r2, [pc, #56]	; (80047b8 <PCD_EP_ISR_Handler+0x6bc>)
 8004780:	4013      	ands	r3, r2
 8004782:	b29a      	uxth	r2, r3
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	801a      	strh	r2, [r3, #0]
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29b      	uxth	r3, r3
 800478e:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <PCD_EP_ISR_Handler+0x6b8>)
 8004790:	4313      	orrs	r3, r2
 8004792:	b29a      	uxth	r2, r3
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	e029      	b.n	80047ee <PCD_EP_ISR_Handler+0x6f2>
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	00000f8f 	.word	0x00000f8f
 80047a0:	00000406 	.word	0x00000406
 80047a4:	ffff8f8f 	.word	0xffff8f8f
 80047a8:	ffff80c0 	.word	0xffff80c0
 80047ac:	00000402 	.word	0x00000402
 80047b0:	ffff8f0f 	.word	0xffff8f0f
 80047b4:	ffff8000 	.word	0xffff8000
 80047b8:	ffff83ff 	.word	0xffff83ff
 80047bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d114      	bne.n	80047ee <PCD_EP_ISR_Handler+0x6f2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2250      	movs	r2, #80	; 0x50
 80047ca:	5a9b      	ldrh	r3, [r3, r2]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	001a      	movs	r2, r3
 80047d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d2:	189b      	adds	r3, r3, r2
 80047d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	00da      	lsls	r2, r3, #3
 80047dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047de:	18d3      	adds	r3, r2, r3
 80047e0:	4a3d      	ldr	r2, [pc, #244]	; (80048d8 <PCD_EP_ISR_Handler+0x7dc>)
 80047e2:	4694      	mov	ip, r2
 80047e4:	4463      	add	r3, ip
 80047e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	2200      	movs	r2, #0
 80047ec:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0011      	movs	r1, r2
 80047f6:	0018      	movs	r0, r3
 80047f8:	f007 fd60 	bl	800c2bc <HAL_PCD_DataInStageCallback>
 80047fc:	e05c      	b.n	80048b8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80047fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004800:	78db      	ldrb	r3, [r3, #3]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d150      	bne.n	80048a8 <PCD_EP_ISR_Handler+0x7ac>
 8004806:	2352      	movs	r3, #82	; 0x52
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	881a      	ldrh	r2, [r3, #0]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4013      	ands	r3, r2
 8004812:	d149      	bne.n	80048a8 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2250      	movs	r2, #80	; 0x50
 800481a:	5a9b      	ldrh	r3, [r3, r2]
 800481c:	b29b      	uxth	r3, r3
 800481e:	001a      	movs	r2, r3
 8004820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	18d2      	adds	r2, r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	18d3      	adds	r3, r2, r3
 800482e:	4a2b      	ldr	r2, [pc, #172]	; (80048dc <PCD_EP_ISR_Handler+0x7e0>)
 8004830:	4694      	mov	ip, r2
 8004832:	4463      	add	r3, ip
 8004834:	881a      	ldrh	r2, [r3, #0]
 8004836:	2140      	movs	r1, #64	; 0x40
 8004838:	187b      	adds	r3, r7, r1
 800483a:	0592      	lsls	r2, r2, #22
 800483c:	0d92      	lsrs	r2, r2, #22
 800483e:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	187b      	adds	r3, r7, r1
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d907      	bls.n	800485c <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 800484c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	187b      	adds	r3, r7, r1
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	1ad2      	subs	r2, r2, r3
 8004856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004858:	619a      	str	r2, [r3, #24]
 800485a:	e002      	b.n	8004862 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 800485c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485e:	2200      	movs	r2, #0
 8004860:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d107      	bne.n	800487a <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0011      	movs	r1, r2
 8004872:	0018      	movs	r0, r3
 8004874:	f007 fd22 	bl	800c2bc <HAL_PCD_DataInStageCallback>
 8004878:	e01e      	b.n	80048b8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800487a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	2140      	movs	r1, #64	; 0x40
 8004880:	187b      	adds	r3, r7, r1
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	18d2      	adds	r2, r2, r3
 8004886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004888:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800488a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	187b      	adds	r3, r7, r1
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	18d2      	adds	r2, r2, r3
 8004894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004896:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800489e:	0011      	movs	r1, r2
 80048a0:	0018      	movs	r0, r3
 80048a2:	f004 facf 	bl	8008e44 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80048a6:	e007      	b.n	80048b8 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80048a8:	2352      	movs	r3, #82	; 0x52
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	881a      	ldrh	r2, [r3, #0]
 80048ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 f930 	bl	8004b18 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2244      	movs	r2, #68	; 0x44
 80048be:	5a9b      	ldrh	r3, [r3, r2]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	b21b      	sxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	da01      	bge.n	80048cc <PCD_EP_ISR_Handler+0x7d0>
 80048c8:	f7ff fc1e 	bl	8004108 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	0018      	movs	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b016      	add	sp, #88	; 0x58
 80048d4:	bdb0      	pop	{r4, r5, r7, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	00000406 	.word	0x00000406
 80048dc:	00000402 	.word	0x00000402

080048e0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048e0:	b590      	push	{r4, r7, lr}
 80048e2:	b089      	sub	sp, #36	; 0x24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	1dbb      	adds	r3, r7, #6
 80048ec:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048ee:	1dbb      	adds	r3, r7, #6
 80048f0:	881a      	ldrh	r2, [r3, #0]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	01db      	lsls	r3, r3, #7
 80048f6:	4013      	ands	r3, r2
 80048f8:	d100      	bne.n	80048fc <HAL_PCD_EP_DB_Receive+0x1c>
 80048fa:	e07d      	b.n	80049f8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2250      	movs	r2, #80	; 0x50
 8004902:	5a9b      	ldrh	r3, [r3, r2]
 8004904:	b29b      	uxth	r3, r3
 8004906:	001a      	movs	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	18d2      	adds	r2, r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	18d3      	adds	r3, r2, r3
 8004916:	4a7a      	ldr	r2, [pc, #488]	; (8004b00 <HAL_PCD_EP_DB_Receive+0x220>)
 8004918:	4694      	mov	ip, r2
 800491a:	4463      	add	r3, ip
 800491c:	881a      	ldrh	r2, [r3, #0]
 800491e:	211a      	movs	r1, #26
 8004920:	187b      	adds	r3, r7, r1
 8004922:	0592      	lsls	r2, r2, #22
 8004924:	0d92      	lsrs	r2, r2, #22
 8004926:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	699a      	ldr	r2, [r3, #24]
 800492c:	187b      	adds	r3, r7, r1
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d307      	bcc.n	8004944 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	187b      	adds	r3, r7, r1
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	1ad2      	subs	r2, r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	619a      	str	r2, [r3, #24]
 8004942:	e002      	b.n	800494a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2200      	movs	r2, #0
 8004948:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d121      	bne.n	8004996 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	001a      	movs	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	18d3      	adds	r3, r2, r3
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29a      	uxth	r2, r3
 8004964:	2018      	movs	r0, #24
 8004966:	183b      	adds	r3, r7, r0
 8004968:	4966      	ldr	r1, [pc, #408]	; (8004b04 <HAL_PCD_EP_DB_Receive+0x224>)
 800496a:	400a      	ands	r2, r1
 800496c:	801a      	strh	r2, [r3, #0]
 800496e:	183b      	adds	r3, r7, r0
 8004970:	183a      	adds	r2, r7, r0
 8004972:	8812      	ldrh	r2, [r2, #0]
 8004974:	2180      	movs	r1, #128	; 0x80
 8004976:	0189      	lsls	r1, r1, #6
 8004978:	404a      	eors	r2, r1
 800497a:	801a      	strh	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	001a      	movs	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	18d3      	adds	r3, r2, r3
 800498a:	183a      	adds	r2, r7, r0
 800498c:	8812      	ldrh	r2, [r2, #0]
 800498e:	495e      	ldr	r1, [pc, #376]	; (8004b08 <HAL_PCD_EP_DB_Receive+0x228>)
 8004990:	430a      	orrs	r2, r1
 8004992:	b292      	uxth	r2, r2
 8004994:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004996:	1dbb      	adds	r3, r7, #6
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	2240      	movs	r2, #64	; 0x40
 800499c:	4013      	ands	r3, r2
 800499e:	d01a      	beq.n	80049d6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	001a      	movs	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	18d3      	adds	r3, r2, r3
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	2016      	movs	r0, #22
 80049b4:	183b      	adds	r3, r7, r0
 80049b6:	4955      	ldr	r1, [pc, #340]	; (8004b0c <HAL_PCD_EP_DB_Receive+0x22c>)
 80049b8:	400a      	ands	r2, r1
 80049ba:	801a      	strh	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	001a      	movs	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	18d3      	adds	r3, r2, r3
 80049ca:	183a      	adds	r2, r7, r0
 80049cc:	8812      	ldrh	r2, [r2, #0]
 80049ce:	4950      	ldr	r1, [pc, #320]	; (8004b10 <HAL_PCD_EP_DB_Receive+0x230>)
 80049d0:	430a      	orrs	r2, r1
 80049d2:	b292      	uxth	r2, r2
 80049d4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80049d6:	241a      	movs	r4, #26
 80049d8:	193b      	adds	r3, r7, r4
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d100      	bne.n	80049e2 <HAL_PCD_EP_DB_Receive+0x102>
 80049e0:	e086      	b.n	8004af0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	6959      	ldr	r1, [r3, #20]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	891a      	ldrh	r2, [r3, #8]
 80049ee:	193b      	adds	r3, r7, r4
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	f005 fc5f 	bl	800a2b4 <USB_ReadPMA>
 80049f6:	e07b      	b.n	8004af0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2250      	movs	r2, #80	; 0x50
 80049fe:	5a9b      	ldrh	r3, [r3, r2]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	001a      	movs	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	18d2      	adds	r2, r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	18d3      	adds	r3, r2, r3
 8004a12:	4a40      	ldr	r2, [pc, #256]	; (8004b14 <HAL_PCD_EP_DB_Receive+0x234>)
 8004a14:	4694      	mov	ip, r2
 8004a16:	4463      	add	r3, ip
 8004a18:	881a      	ldrh	r2, [r3, #0]
 8004a1a:	211a      	movs	r1, #26
 8004a1c:	187b      	adds	r3, r7, r1
 8004a1e:	0592      	lsls	r2, r2, #22
 8004a20:	0d92      	lsrs	r2, r2, #22
 8004a22:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	699a      	ldr	r2, [r3, #24]
 8004a28:	187b      	adds	r3, r7, r1
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d307      	bcc.n	8004a40 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	699a      	ldr	r2, [r3, #24]
 8004a34:	187b      	adds	r3, r7, r1
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	1ad2      	subs	r2, r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	619a      	str	r2, [r3, #24]
 8004a3e:	e002      	b.n	8004a46 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2200      	movs	r2, #0
 8004a44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d121      	bne.n	8004a92 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	001a      	movs	r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	18d3      	adds	r3, r2, r3
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	201e      	movs	r0, #30
 8004a62:	183b      	adds	r3, r7, r0
 8004a64:	4927      	ldr	r1, [pc, #156]	; (8004b04 <HAL_PCD_EP_DB_Receive+0x224>)
 8004a66:	400a      	ands	r2, r1
 8004a68:	801a      	strh	r2, [r3, #0]
 8004a6a:	183b      	adds	r3, r7, r0
 8004a6c:	183a      	adds	r2, r7, r0
 8004a6e:	8812      	ldrh	r2, [r2, #0]
 8004a70:	2180      	movs	r1, #128	; 0x80
 8004a72:	0189      	lsls	r1, r1, #6
 8004a74:	404a      	eors	r2, r1
 8004a76:	801a      	strh	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	001a      	movs	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	18d3      	adds	r3, r2, r3
 8004a86:	183a      	adds	r2, r7, r0
 8004a88:	8812      	ldrh	r2, [r2, #0]
 8004a8a:	491f      	ldr	r1, [pc, #124]	; (8004b08 <HAL_PCD_EP_DB_Receive+0x228>)
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	b292      	uxth	r2, r2
 8004a90:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004a92:	1dbb      	adds	r3, r7, #6
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	2240      	movs	r2, #64	; 0x40
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d11a      	bne.n	8004ad2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	001a      	movs	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	18d3      	adds	r3, r2, r3
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	201c      	movs	r0, #28
 8004ab0:	183b      	adds	r3, r7, r0
 8004ab2:	4916      	ldr	r1, [pc, #88]	; (8004b0c <HAL_PCD_EP_DB_Receive+0x22c>)
 8004ab4:	400a      	ands	r2, r1
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	001a      	movs	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	18d3      	adds	r3, r2, r3
 8004ac6:	183a      	adds	r2, r7, r0
 8004ac8:	8812      	ldrh	r2, [r2, #0]
 8004aca:	4911      	ldr	r1, [pc, #68]	; (8004b10 <HAL_PCD_EP_DB_Receive+0x230>)
 8004acc:	430a      	orrs	r2, r1
 8004ace:	b292      	uxth	r2, r2
 8004ad0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004ad2:	241a      	movs	r4, #26
 8004ad4:	193b      	adds	r3, r7, r4
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6959      	ldr	r1, [r3, #20]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	895a      	ldrh	r2, [r3, #10]
 8004ae8:	193b      	adds	r3, r7, r4
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	f005 fbe2 	bl	800a2b4 <USB_ReadPMA>
    }
  }

  return count;
 8004af0:	231a      	movs	r3, #26
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	881b      	ldrh	r3, [r3, #0]
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b009      	add	sp, #36	; 0x24
 8004afc:	bd90      	pop	{r4, r7, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	00000402 	.word	0x00000402
 8004b04:	ffffbf8f 	.word	0xffffbf8f
 8004b08:	ffff8080 	.word	0xffff8080
 8004b0c:	ffff8f8f 	.word	0xffff8f8f
 8004b10:	ffff80c0 	.word	0xffff80c0
 8004b14:	00000406 	.word	0x00000406

08004b18 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b0a2      	sub	sp, #136	; 0x88
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	1dbb      	adds	r3, r7, #6
 8004b24:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b26:	1dbb      	adds	r3, r7, #6
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	2240      	movs	r2, #64	; 0x40
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d100      	bne.n	8004b32 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004b30:	e1c8      	b.n	8004ec4 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2250      	movs	r2, #80	; 0x50
 8004b38:	5a9b      	ldrh	r3, [r3, r2]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	001a      	movs	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	18d2      	adds	r2, r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	18d3      	adds	r3, r2, r3
 8004b4c:	4ad7      	ldr	r2, [pc, #860]	; (8004eac <HAL_PCD_EP_DB_Transmit+0x394>)
 8004b4e:	4694      	mov	ip, r2
 8004b50:	4463      	add	r3, ip
 8004b52:	881a      	ldrh	r2, [r3, #0]
 8004b54:	214e      	movs	r1, #78	; 0x4e
 8004b56:	187b      	adds	r3, r7, r1
 8004b58:	0592      	lsls	r2, r2, #22
 8004b5a:	0d92      	lsrs	r2, r2, #22
 8004b5c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	187b      	adds	r3, r7, r1
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d907      	bls.n	8004b7a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	187b      	adds	r3, r7, r1
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	1ad2      	subs	r2, r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	619a      	str	r2, [r3, #24]
 8004b78:	e002      	b.n	8004b80 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d000      	beq.n	8004b8a <HAL_PCD_EP_DB_Transmit+0x72>
 8004b88:	e0b5      	b.n	8004cf6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d125      	bne.n	8004bde <HAL_PCD_EP_DB_Transmit+0xc6>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2250      	movs	r2, #80	; 0x50
 8004b9e:	5a9b      	ldrh	r3, [r3, r2]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	001a      	movs	r2, r3
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	189b      	adds	r3, r3, r2
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	00da      	lsls	r2, r3, #3
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	18d3      	adds	r3, r2, r3
 8004bb4:	4abd      	ldr	r2, [pc, #756]	; (8004eac <HAL_PCD_EP_DB_Transmit+0x394>)
 8004bb6:	4694      	mov	ip, r2
 8004bb8:	4463      	add	r3, ip
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	4abb      	ldr	r2, [pc, #748]	; (8004eb0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	801a      	strh	r2, [r3, #0]
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	4ab8      	ldr	r2, [pc, #736]	; (8004eb4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	801a      	strh	r2, [r3, #0]
 8004bdc:	e01b      	b.n	8004c16 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d117      	bne.n	8004c16 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	633b      	str	r3, [r7, #48]	; 0x30
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2250      	movs	r2, #80	; 0x50
 8004bf2:	5a9b      	ldrh	r3, [r3, r2]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	00da      	lsls	r2, r3, #3
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	18d3      	adds	r3, r2, r3
 8004c08:	4aa8      	ldr	r2, [pc, #672]	; (8004eac <HAL_PCD_EP_DB_Transmit+0x394>)
 8004c0a:	4694      	mov	ip, r2
 8004c0c:	4463      	add	r3, ip
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	2200      	movs	r2, #0
 8004c14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	623b      	str	r3, [r7, #32]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d125      	bne.n	8004c70 <HAL_PCD_EP_DB_Transmit+0x158>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2250      	movs	r2, #80	; 0x50
 8004c30:	5a9b      	ldrh	r3, [r3, r2]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	001a      	movs	r2, r3
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	189b      	adds	r3, r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	00da      	lsls	r2, r3, #3
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	18d3      	adds	r3, r2, r3
 8004c46:	4a9c      	ldr	r2, [pc, #624]	; (8004eb8 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004c48:	4694      	mov	ip, r2
 8004c4a:	4463      	add	r3, ip
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	4a96      	ldr	r2, [pc, #600]	; (8004eb0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	801a      	strh	r2, [r3, #0]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4a93      	ldr	r2, [pc, #588]	; (8004eb4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	e018      	b.n	8004ca2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d114      	bne.n	8004ca2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2250      	movs	r2, #80	; 0x50
 8004c7e:	5a9b      	ldrh	r3, [r3, r2]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	001a      	movs	r2, r3
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	623b      	str	r3, [r7, #32]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	00da      	lsls	r2, r3, #3
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	18d3      	adds	r3, r2, r3
 8004c94:	4a88      	ldr	r2, [pc, #544]	; (8004eb8 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004c96:	4694      	mov	ip, r2
 8004c98:	4463      	add	r3, ip
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781a      	ldrb	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	0011      	movs	r1, r2
 8004caa:	0018      	movs	r0, r3
 8004cac:	f007 fb06 	bl	800c2bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cb0:	1dbb      	adds	r3, r7, #6
 8004cb2:	881a      	ldrh	r2, [r3, #0]
 8004cb4:	2380      	movs	r3, #128	; 0x80
 8004cb6:	01db      	lsls	r3, r3, #7
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d100      	bne.n	8004cbe <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004cbc:	e2d4      	b.n	8005268 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	18d3      	adds	r3, r2, r3
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	2012      	movs	r0, #18
 8004cd2:	183b      	adds	r3, r7, r0
 8004cd4:	4979      	ldr	r1, [pc, #484]	; (8004ebc <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004cd6:	400a      	ands	r2, r1
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	001a      	movs	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	18d3      	adds	r3, r2, r3
 8004ce8:	183a      	adds	r2, r7, r0
 8004cea:	8812      	ldrh	r2, [r2, #0]
 8004cec:	4974      	ldr	r1, [pc, #464]	; (8004ec0 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	b292      	uxth	r2, r2
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	e2b8      	b.n	8005268 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cf6:	1dbb      	adds	r3, r7, #6
 8004cf8:	881a      	ldrh	r2, [r3, #0]
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	01db      	lsls	r3, r3, #7
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d01a      	beq.n	8004d38 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	001a      	movs	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	18d3      	adds	r3, r2, r3
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	2044      	movs	r0, #68	; 0x44
 8004d16:	183b      	adds	r3, r7, r0
 8004d18:	4968      	ldr	r1, [pc, #416]	; (8004ebc <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004d1a:	400a      	ands	r2, r1
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	001a      	movs	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	18d3      	adds	r3, r2, r3
 8004d2c:	183a      	adds	r2, r7, r0
 8004d2e:	8812      	ldrh	r2, [r2, #0]
 8004d30:	4963      	ldr	r1, [pc, #396]	; (8004ec0 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004d32:	430a      	orrs	r2, r1
 8004d34:	b292      	uxth	r2, r2
 8004d36:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2224      	movs	r2, #36	; 0x24
 8004d3c:	5c9b      	ldrb	r3, [r3, r2]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d000      	beq.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004d42:	e291      	b.n	8005268 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	214e      	movs	r1, #78	; 0x4e
 8004d4a:	187b      	adds	r3, r7, r1
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	18d2      	adds	r2, r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	187b      	adds	r3, r7, r1
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	18d2      	adds	r2, r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6a1a      	ldr	r2, [r3, #32]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d309      	bcc.n	8004d82 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6a1a      	ldr	r2, [r3, #32]
 8004d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7a:	1ad2      	subs	r2, r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	621a      	str	r2, [r3, #32]
 8004d80:	e016      	b.n	8004db0 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d108      	bne.n	8004d9c <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8004d8a:	234e      	movs	r3, #78	; 0x4e
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2224      	movs	r2, #36	; 0x24
 8004d96:	2100      	movs	r1, #0
 8004d98:	5499      	strb	r1, [r3, r2]
 8004d9a:	e009      	b.n	8004db0 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2224      	movs	r2, #36	; 0x24
 8004da0:	2100      	movs	r1, #0
 8004da2:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2200      	movs	r2, #0
 8004dae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d150      	bne.n	8004e5a <HAL_PCD_EP_DB_Transmit+0x342>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2250      	movs	r2, #80	; 0x50
 8004dc4:	5a9b      	ldrh	r3, [r3, r2]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	001a      	movs	r2, r3
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	189b      	adds	r3, r3, r2
 8004dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	00da      	lsls	r2, r3, #3
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	18d3      	adds	r3, r2, r3
 8004dda:	4a34      	ldr	r2, [pc, #208]	; (8004eac <HAL_PCD_EP_DB_Transmit+0x394>)
 8004ddc:	4694      	mov	ip, r2
 8004dde:	4463      	add	r3, ip
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
 8004de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d110      	bne.n	8004e0a <HAL_PCD_EP_DB_Transmit+0x2f2>
 8004de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	4a30      	ldr	r2, [pc, #192]	; (8004eb0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	e044      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e0e:	d810      	bhi.n	8004e32 <HAL_PCD_EP_DB_Transmit+0x31a>
 8004e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d002      	beq.n	8004e24 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e20:	3301      	adds	r3, #1
 8004e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	029b      	lsls	r3, r3, #10
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	e030      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e3a:	221f      	movs	r2, #31
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d102      	bne.n	8004e46 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e42:	3b01      	subs	r3, #1
 8004e44:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	029b      	lsls	r3, r3, #10
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	801a      	strh	r2, [r3, #0]
 8004e58:	e01c      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d118      	bne.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	643b      	str	r3, [r7, #64]	; 0x40
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2250      	movs	r2, #80	; 0x50
 8004e6e:	5a9b      	ldrh	r3, [r3, r2]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	001a      	movs	r2, r3
 8004e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e76:	189b      	adds	r3, r3, r2
 8004e78:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	00da      	lsls	r2, r3, #3
 8004e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e82:	18d3      	adds	r3, r2, r3
 8004e84:	4a09      	ldr	r2, [pc, #36]	; (8004eac <HAL_PCD_EP_DB_Transmit+0x394>)
 8004e86:	4694      	mov	ip, r2
 8004e88:	4463      	add	r3, ip
 8004e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e92:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	6959      	ldr	r1, [r3, #20]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	891a      	ldrh	r2, [r3, #8]
 8004ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f005 f9c2 	bl	800a22c <USB_WritePMA>
 8004ea8:	e1de      	b.n	8005268 <HAL_PCD_EP_DB_Transmit+0x750>
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	00000402 	.word	0x00000402
 8004eb0:	ffff83ff 	.word	0xffff83ff
 8004eb4:	ffff8000 	.word	0xffff8000
 8004eb8:	00000406 	.word	0x00000406
 8004ebc:	ffff8f8f 	.word	0xffff8f8f
 8004ec0:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2250      	movs	r2, #80	; 0x50
 8004eca:	5a9b      	ldrh	r3, [r3, r2]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	001a      	movs	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	18d2      	adds	r2, r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	18d3      	adds	r3, r2, r3
 8004ede:	4aca      	ldr	r2, [pc, #808]	; (8005208 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004ee0:	4694      	mov	ip, r2
 8004ee2:	4463      	add	r3, ip
 8004ee4:	881a      	ldrh	r2, [r3, #0]
 8004ee6:	214e      	movs	r1, #78	; 0x4e
 8004ee8:	187b      	adds	r3, r7, r1
 8004eea:	0592      	lsls	r2, r2, #22
 8004eec:	0d92      	lsrs	r2, r2, #22
 8004eee:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	699a      	ldr	r2, [r3, #24]
 8004ef4:	187b      	adds	r3, r7, r1
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d307      	bcc.n	8004f0c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	1ad2      	subs	r2, r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	619a      	str	r2, [r3, #24]
 8004f0a:	e002      	b.n	8004f12 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d000      	beq.n	8004f1c <HAL_PCD_EP_DB_Transmit+0x404>
 8004f1a:	e0c0      	b.n	800509e <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	785b      	ldrb	r3, [r3, #1]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d125      	bne.n	8004f70 <HAL_PCD_EP_DB_Transmit+0x458>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2250      	movs	r2, #80	; 0x50
 8004f30:	5a9b      	ldrh	r3, [r3, r2]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	001a      	movs	r2, r3
 8004f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f38:	189b      	adds	r3, r3, r2
 8004f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	00da      	lsls	r2, r3, #3
 8004f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f44:	18d3      	adds	r3, r2, r3
 8004f46:	4ab1      	ldr	r2, [pc, #708]	; (800520c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004f48:	4694      	mov	ip, r2
 8004f4a:	4463      	add	r3, ip
 8004f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	4aae      	ldr	r2, [pc, #696]	; (8005210 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f5c:	801a      	strh	r2, [r3, #0]
 8004f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	4aab      	ldr	r2, [pc, #684]	; (8005214 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f6c:	801a      	strh	r2, [r3, #0]
 8004f6e:	e01b      	b.n	8004fa8 <HAL_PCD_EP_DB_Transmit+0x490>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d117      	bne.n	8004fa8 <HAL_PCD_EP_DB_Transmit+0x490>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	677b      	str	r3, [r7, #116]	; 0x74
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2250      	movs	r2, #80	; 0x50
 8004f84:	5a9b      	ldrh	r3, [r3, r2]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	001a      	movs	r2, r3
 8004f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8c:	189b      	adds	r3, r3, r2
 8004f8e:	677b      	str	r3, [r7, #116]	; 0x74
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	00da      	lsls	r2, r3, #3
 8004f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f98:	18d3      	adds	r3, r2, r3
 8004f9a:	4a9c      	ldr	r2, [pc, #624]	; (800520c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004f9c:	4694      	mov	ip, r2
 8004f9e:	4463      	add	r3, ip
 8004fa0:	673b      	str	r3, [r7, #112]	; 0x70
 8004fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	785b      	ldrb	r3, [r3, #1]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d130      	bne.n	8005018 <HAL_PCD_EP_DB_Transmit+0x500>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2180      	movs	r1, #128	; 0x80
 8004fbc:	187a      	adds	r2, r7, r1
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2250      	movs	r2, #80	; 0x50
 8004fc6:	5a9b      	ldrh	r3, [r3, r2]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	001a      	movs	r2, r3
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	189b      	adds	r3, r3, r2
 8004fd2:	187a      	adds	r2, r7, r1
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	00da      	lsls	r2, r3, #3
 8004fdc:	187b      	adds	r3, r7, r1
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	18d3      	adds	r3, r2, r3
 8004fe2:	4a89      	ldr	r2, [pc, #548]	; (8005208 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004fe4:	4694      	mov	ip, r2
 8004fe6:	4463      	add	r3, ip
 8004fe8:	2184      	movs	r1, #132	; 0x84
 8004fea:	187a      	adds	r2, r7, r1
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	187b      	adds	r3, r7, r1
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	4a86      	ldr	r2, [pc, #536]	; (8005210 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	187b      	adds	r3, r7, r1
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	187b      	adds	r3, r7, r1
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	4a82      	ldr	r2, [pc, #520]	; (8005214 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	b29a      	uxth	r2, r3
 8005010:	187b      	adds	r3, r7, r1
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	801a      	strh	r2, [r3, #0]
 8005016:	e018      	b.n	800504a <HAL_PCD_EP_DB_Transmit+0x532>
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d114      	bne.n	800504a <HAL_PCD_EP_DB_Transmit+0x532>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2250      	movs	r2, #80	; 0x50
 8005026:	5a9b      	ldrh	r3, [r3, r2]
 8005028:	b29b      	uxth	r3, r3
 800502a:	001a      	movs	r2, r3
 800502c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800502e:	189b      	adds	r3, r3, r2
 8005030:	67bb      	str	r3, [r7, #120]	; 0x78
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	00da      	lsls	r2, r3, #3
 8005038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800503a:	18d3      	adds	r3, r2, r3
 800503c:	4a72      	ldr	r2, [pc, #456]	; (8005208 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800503e:	4694      	mov	ip, r2
 8005040:	4463      	add	r3, ip
 8005042:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005044:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005046:	2200      	movs	r2, #0
 8005048:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781a      	ldrb	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	0011      	movs	r1, r2
 8005052:	0018      	movs	r0, r3
 8005054:	f007 f932 	bl	800c2bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005058:	1dbb      	adds	r3, r7, #6
 800505a:	881a      	ldrh	r2, [r3, #0]
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	01db      	lsls	r3, r3, #7
 8005060:	4013      	ands	r3, r2
 8005062:	d000      	beq.n	8005066 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005064:	e100      	b.n	8005268 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	001a      	movs	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	18d3      	adds	r3, r2, r3
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29a      	uxth	r2, r3
 8005078:	2046      	movs	r0, #70	; 0x46
 800507a:	183b      	adds	r3, r7, r0
 800507c:	4966      	ldr	r1, [pc, #408]	; (8005218 <HAL_PCD_EP_DB_Transmit+0x700>)
 800507e:	400a      	ands	r2, r1
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	001a      	movs	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	18d3      	adds	r3, r2, r3
 8005090:	183a      	adds	r2, r7, r0
 8005092:	8812      	ldrh	r2, [r2, #0]
 8005094:	4961      	ldr	r1, [pc, #388]	; (800521c <HAL_PCD_EP_DB_Transmit+0x704>)
 8005096:	430a      	orrs	r2, r1
 8005098:	b292      	uxth	r2, r2
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	e0e4      	b.n	8005268 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800509e:	1dbb      	adds	r3, r7, #6
 80050a0:	881a      	ldrh	r2, [r3, #0]
 80050a2:	2380      	movs	r3, #128	; 0x80
 80050a4:	01db      	lsls	r3, r3, #7
 80050a6:	4013      	ands	r3, r2
 80050a8:	d11a      	bne.n	80050e0 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	001a      	movs	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	18d3      	adds	r3, r2, r3
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	204c      	movs	r0, #76	; 0x4c
 80050be:	183b      	adds	r3, r7, r0
 80050c0:	4955      	ldr	r1, [pc, #340]	; (8005218 <HAL_PCD_EP_DB_Transmit+0x700>)
 80050c2:	400a      	ands	r2, r1
 80050c4:	801a      	strh	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	001a      	movs	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	18d3      	adds	r3, r2, r3
 80050d4:	183a      	adds	r2, r7, r0
 80050d6:	8812      	ldrh	r2, [r2, #0]
 80050d8:	4950      	ldr	r1, [pc, #320]	; (800521c <HAL_PCD_EP_DB_Transmit+0x704>)
 80050da:	430a      	orrs	r2, r1
 80050dc:	b292      	uxth	r2, r2
 80050de:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2224      	movs	r2, #36	; 0x24
 80050e4:	5c9b      	ldrb	r3, [r3, r2]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d000      	beq.n	80050ec <HAL_PCD_EP_DB_Transmit+0x5d4>
 80050ea:	e0bd      	b.n	8005268 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	214e      	movs	r1, #78	; 0x4e
 80050f2:	187b      	adds	r3, r7, r1
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	18d2      	adds	r2, r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	187b      	adds	r3, r7, r1
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	18d2      	adds	r2, r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	6a1a      	ldr	r2, [r3, #32]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d309      	bcc.n	800512a <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	6a1a      	ldr	r2, [r3, #32]
 8005120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005122:	1ad2      	subs	r2, r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	621a      	str	r2, [r3, #32]
 8005128:	e016      	b.n	8005158 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d108      	bne.n	8005144 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8005132:	234e      	movs	r3, #78	; 0x4e
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2224      	movs	r2, #36	; 0x24
 800513e:	2100      	movs	r1, #0
 8005140:	5499      	strb	r1, [r3, r2]
 8005142:	e009      	b.n	8005158 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2224      	movs	r2, #36	; 0x24
 8005154:	2100      	movs	r1, #0
 8005156:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	667b      	str	r3, [r7, #100]	; 0x64
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d15c      	bne.n	8005220 <HAL_PCD_EP_DB_Transmit+0x708>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2250      	movs	r2, #80	; 0x50
 8005172:	5a9b      	ldrh	r3, [r3, r2]
 8005174:	b29b      	uxth	r3, r3
 8005176:	001a      	movs	r2, r3
 8005178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517a:	189b      	adds	r3, r3, r2
 800517c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	00da      	lsls	r2, r3, #3
 8005184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005186:	18d3      	adds	r3, r2, r3
 8005188:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800518a:	4694      	mov	ip, r2
 800518c:	4463      	add	r3, ip
 800518e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005192:	2b00      	cmp	r3, #0
 8005194:	d110      	bne.n	80051b8 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8005196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800519e:	4013      	ands	r3, r2
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051a4:	801a      	strh	r2, [r3, #0]
 80051a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051b4:	801a      	strh	r2, [r3, #0]
 80051b6:	e04d      	b.n	8005254 <HAL_PCD_EP_DB_Transmit+0x73c>
 80051b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ba:	2b3e      	cmp	r3, #62	; 0x3e
 80051bc:	d810      	bhi.n	80051e0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80051be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	657b      	str	r3, [r7, #84]	; 0x54
 80051c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c6:	2201      	movs	r2, #1
 80051c8:	4013      	ands	r3, r2
 80051ca:	d002      	beq.n	80051d2 <HAL_PCD_EP_DB_Transmit+0x6ba>
 80051cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ce:	3301      	adds	r3, #1
 80051d0:	657b      	str	r3, [r7, #84]	; 0x54
 80051d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	029b      	lsls	r3, r3, #10
 80051d8:	b29a      	uxth	r2, r3
 80051da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	e039      	b.n	8005254 <HAL_PCD_EP_DB_Transmit+0x73c>
 80051e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	657b      	str	r3, [r7, #84]	; 0x54
 80051e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e8:	221f      	movs	r2, #31
 80051ea:	4013      	ands	r3, r2
 80051ec:	d102      	bne.n	80051f4 <HAL_PCD_EP_DB_Transmit+0x6dc>
 80051ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f0:	3b01      	subs	r3, #1
 80051f2:	657b      	str	r3, [r7, #84]	; 0x54
 80051f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	029b      	lsls	r3, r3, #10
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	4a05      	ldr	r2, [pc, #20]	; (8005214 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	b29a      	uxth	r2, r3
 8005202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005204:	801a      	strh	r2, [r3, #0]
 8005206:	e025      	b.n	8005254 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005208:	00000406 	.word	0x00000406
 800520c:	00000402 	.word	0x00000402
 8005210:	ffff83ff 	.word	0xffff83ff
 8005214:	ffff8000 	.word	0xffff8000
 8005218:	ffff8f8f 	.word	0xffff8f8f
 800521c:	ffffc080 	.word	0xffffc080
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	785b      	ldrb	r3, [r3, #1]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d115      	bne.n	8005254 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2250      	movs	r2, #80	; 0x50
 800522e:	5a9b      	ldrh	r3, [r3, r2]
 8005230:	b29b      	uxth	r3, r3
 8005232:	001a      	movs	r2, r3
 8005234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005236:	189b      	adds	r3, r3, r2
 8005238:	667b      	str	r3, [r7, #100]	; 0x64
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	00da      	lsls	r2, r3, #3
 8005240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005242:	18d3      	adds	r3, r2, r3
 8005244:	4a1e      	ldr	r2, [pc, #120]	; (80052c0 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8005246:	4694      	mov	ip, r2
 8005248:	4463      	add	r3, ip
 800524a:	663b      	str	r3, [r7, #96]	; 0x60
 800524c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800524e:	b29a      	uxth	r2, r3
 8005250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005252:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6959      	ldr	r1, [r3, #20]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	895a      	ldrh	r2, [r3, #10]
 8005260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005262:	b29b      	uxth	r3, r3
 8005264:	f004 ffe2 	bl	800a22c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	001a      	movs	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	18d3      	adds	r3, r2, r3
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29a      	uxth	r2, r3
 800527a:	2010      	movs	r0, #16
 800527c:	183b      	adds	r3, r7, r0
 800527e:	4911      	ldr	r1, [pc, #68]	; (80052c4 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8005280:	400a      	ands	r2, r1
 8005282:	801a      	strh	r2, [r3, #0]
 8005284:	183b      	adds	r3, r7, r0
 8005286:	183a      	adds	r2, r7, r0
 8005288:	8812      	ldrh	r2, [r2, #0]
 800528a:	2110      	movs	r1, #16
 800528c:	404a      	eors	r2, r1
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	183b      	adds	r3, r7, r0
 8005292:	183a      	adds	r2, r7, r0
 8005294:	8812      	ldrh	r2, [r2, #0]
 8005296:	2120      	movs	r1, #32
 8005298:	404a      	eors	r2, r1
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	001a      	movs	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	18d3      	adds	r3, r2, r3
 80052aa:	183a      	adds	r2, r7, r0
 80052ac:	8812      	ldrh	r2, [r2, #0]
 80052ae:	4906      	ldr	r1, [pc, #24]	; (80052c8 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80052b0:	430a      	orrs	r2, r1
 80052b2:	b292      	uxth	r2, r2
 80052b4:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b022      	add	sp, #136	; 0x88
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	00000406 	.word	0x00000406
 80052c4:	ffff8fbf 	.word	0xffff8fbf
 80052c8:	ffff8080 	.word	0xffff8080

080052cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80052cc:	b590      	push	{r4, r7, lr}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	0008      	movs	r0, r1
 80052d6:	0011      	movs	r1, r2
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	240a      	movs	r4, #10
 80052dc:	193b      	adds	r3, r7, r4
 80052de:	1c02      	adds	r2, r0, #0
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	2308      	movs	r3, #8
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	1c0a      	adds	r2, r1, #0
 80052e8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80052ea:	0021      	movs	r1, r4
 80052ec:	187b      	adds	r3, r7, r1
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	4013      	ands	r3, r2
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00c      	beq.n	8005314 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052fa:	187b      	adds	r3, r7, r1
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	2207      	movs	r2, #7
 8005300:	4013      	ands	r3, r2
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	0013      	movs	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	189b      	adds	r3, r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	18d3      	adds	r3, r2, r3
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e00b      	b.n	800532c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005314:	230a      	movs	r3, #10
 8005316:	18fb      	adds	r3, r7, r3
 8005318:	881a      	ldrh	r2, [r3, #0]
 800531a:	0013      	movs	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	189b      	adds	r3, r3, r2
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	3369      	adds	r3, #105	; 0x69
 8005324:	33ff      	adds	r3, #255	; 0xff
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	18d3      	adds	r3, r2, r3
 800532a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800532c:	2308      	movs	r3, #8
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d107      	bne.n	8005346 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2200      	movs	r2, #0
 800533a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	b29a      	uxth	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	80da      	strh	r2, [r3, #6]
 8005344:	e00b      	b.n	800535e <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2201      	movs	r2, #1
 800534a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	b29a      	uxth	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	b29a      	uxth	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	0018      	movs	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	b007      	add	sp, #28
 8005366:	bd90      	pop	{r4, r7, pc}

08005368 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	23ba      	movs	r3, #186	; 0xba
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	2101      	movs	r1, #1
 800537e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	23b8      	movs	r3, #184	; 0xb8
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	2100      	movs	r1, #0
 8005388:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2254      	movs	r2, #84	; 0x54
 800538e:	5a9b      	ldrh	r3, [r3, r2]
 8005390:	b29b      	uxth	r3, r3
 8005392:	2201      	movs	r2, #1
 8005394:	4313      	orrs	r3, r2
 8005396:	b299      	uxth	r1, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2254      	movs	r2, #84	; 0x54
 800539c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2254      	movs	r2, #84	; 0x54
 80053a2:	5a9b      	ldrh	r3, [r3, r2]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2202      	movs	r2, #2
 80053a8:	4313      	orrs	r3, r2
 80053aa:	b299      	uxth	r1, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2254      	movs	r2, #84	; 0x54
 80053b0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	0018      	movs	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b004      	add	sp, #16
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	000a      	movs	r2, r1
 80053c6:	1cfb      	adds	r3, r7, #3
 80053c8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b002      	add	sp, #8
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f000 fb76 	bl	8005ad4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2201      	movs	r2, #1
 80053ee:	4013      	ands	r3, r2
 80053f0:	d100      	bne.n	80053f4 <HAL_RCC_OscConfig+0x20>
 80053f2:	e08e      	b.n	8005512 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80053f4:	4bc5      	ldr	r3, [pc, #788]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	220c      	movs	r2, #12
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d00e      	beq.n	800541e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005400:	4bc2      	ldr	r3, [pc, #776]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	220c      	movs	r2, #12
 8005406:	4013      	ands	r3, r2
 8005408:	2b08      	cmp	r3, #8
 800540a:	d117      	bne.n	800543c <HAL_RCC_OscConfig+0x68>
 800540c:	4bbf      	ldr	r3, [pc, #764]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	23c0      	movs	r3, #192	; 0xc0
 8005412:	025b      	lsls	r3, r3, #9
 8005414:	401a      	ands	r2, r3
 8005416:	2380      	movs	r3, #128	; 0x80
 8005418:	025b      	lsls	r3, r3, #9
 800541a:	429a      	cmp	r2, r3
 800541c:	d10e      	bne.n	800543c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800541e:	4bbb      	ldr	r3, [pc, #748]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	2380      	movs	r3, #128	; 0x80
 8005424:	029b      	lsls	r3, r3, #10
 8005426:	4013      	ands	r3, r2
 8005428:	d100      	bne.n	800542c <HAL_RCC_OscConfig+0x58>
 800542a:	e071      	b.n	8005510 <HAL_RCC_OscConfig+0x13c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d000      	beq.n	8005436 <HAL_RCC_OscConfig+0x62>
 8005434:	e06c      	b.n	8005510 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f000 fb4c 	bl	8005ad4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d107      	bne.n	8005454 <HAL_RCC_OscConfig+0x80>
 8005444:	4bb1      	ldr	r3, [pc, #708]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	4bb0      	ldr	r3, [pc, #704]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800544a:	2180      	movs	r1, #128	; 0x80
 800544c:	0249      	lsls	r1, r1, #9
 800544e:	430a      	orrs	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e02f      	b.n	80054b4 <HAL_RCC_OscConfig+0xe0>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10c      	bne.n	8005476 <HAL_RCC_OscConfig+0xa2>
 800545c:	4bab      	ldr	r3, [pc, #684]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4baa      	ldr	r3, [pc, #680]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005462:	49ab      	ldr	r1, [pc, #684]	; (8005710 <HAL_RCC_OscConfig+0x33c>)
 8005464:	400a      	ands	r2, r1
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	4ba8      	ldr	r3, [pc, #672]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4ba7      	ldr	r3, [pc, #668]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800546e:	49a9      	ldr	r1, [pc, #676]	; (8005714 <HAL_RCC_OscConfig+0x340>)
 8005470:	400a      	ands	r2, r1
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	e01e      	b.n	80054b4 <HAL_RCC_OscConfig+0xe0>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b05      	cmp	r3, #5
 800547c:	d10e      	bne.n	800549c <HAL_RCC_OscConfig+0xc8>
 800547e:	4ba3      	ldr	r3, [pc, #652]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4ba2      	ldr	r3, [pc, #648]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005484:	2180      	movs	r1, #128	; 0x80
 8005486:	02c9      	lsls	r1, r1, #11
 8005488:	430a      	orrs	r2, r1
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	4b9f      	ldr	r3, [pc, #636]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	4b9e      	ldr	r3, [pc, #632]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005492:	2180      	movs	r1, #128	; 0x80
 8005494:	0249      	lsls	r1, r1, #9
 8005496:	430a      	orrs	r2, r1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e00b      	b.n	80054b4 <HAL_RCC_OscConfig+0xe0>
 800549c:	4b9b      	ldr	r3, [pc, #620]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b9a      	ldr	r3, [pc, #616]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80054a2:	499b      	ldr	r1, [pc, #620]	; (8005710 <HAL_RCC_OscConfig+0x33c>)
 80054a4:	400a      	ands	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	4b98      	ldr	r3, [pc, #608]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	4b97      	ldr	r3, [pc, #604]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80054ae:	4999      	ldr	r1, [pc, #612]	; (8005714 <HAL_RCC_OscConfig+0x340>)
 80054b0:	400a      	ands	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d014      	beq.n	80054e6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7fd f884 	bl	80025c8 <HAL_GetTick>
 80054c0:	0003      	movs	r3, r0
 80054c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c6:	f7fd f87f 	bl	80025c8 <HAL_GetTick>
 80054ca:	0002      	movs	r2, r0
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b64      	cmp	r3, #100	; 0x64
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e2fd      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d8:	4b8c      	ldr	r3, [pc, #560]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	4013      	ands	r3, r2
 80054e2:	d0f0      	beq.n	80054c6 <HAL_RCC_OscConfig+0xf2>
 80054e4:	e015      	b.n	8005512 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e6:	f7fd f86f 	bl	80025c8 <HAL_GetTick>
 80054ea:	0003      	movs	r3, r0
 80054ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054f0:	f7fd f86a 	bl	80025c8 <HAL_GetTick>
 80054f4:	0002      	movs	r2, r0
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b64      	cmp	r3, #100	; 0x64
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e2e8      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005502:	4b82      	ldr	r3, [pc, #520]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	2380      	movs	r3, #128	; 0x80
 8005508:	029b      	lsls	r3, r3, #10
 800550a:	4013      	ands	r3, r2
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x11c>
 800550e:	e000      	b.n	8005512 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005510:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2202      	movs	r2, #2
 8005518:	4013      	ands	r3, r2
 800551a:	d100      	bne.n	800551e <HAL_RCC_OscConfig+0x14a>
 800551c:	e06c      	b.n	80055f8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800551e:	4b7b      	ldr	r3, [pc, #492]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	220c      	movs	r2, #12
 8005524:	4013      	ands	r3, r2
 8005526:	d00e      	beq.n	8005546 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005528:	4b78      	ldr	r3, [pc, #480]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	220c      	movs	r2, #12
 800552e:	4013      	ands	r3, r2
 8005530:	2b08      	cmp	r3, #8
 8005532:	d11f      	bne.n	8005574 <HAL_RCC_OscConfig+0x1a0>
 8005534:	4b75      	ldr	r3, [pc, #468]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	23c0      	movs	r3, #192	; 0xc0
 800553a:	025b      	lsls	r3, r3, #9
 800553c:	401a      	ands	r2, r3
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	429a      	cmp	r2, r3
 8005544:	d116      	bne.n	8005574 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005546:	4b71      	ldr	r3, [pc, #452]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2202      	movs	r2, #2
 800554c:	4013      	ands	r3, r2
 800554e:	d005      	beq.n	800555c <HAL_RCC_OscConfig+0x188>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d001      	beq.n	800555c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e2bb      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800555c:	4b6b      	ldr	r3, [pc, #428]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	22f8      	movs	r2, #248	; 0xf8
 8005562:	4393      	bics	r3, r2
 8005564:	0019      	movs	r1, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	00da      	lsls	r2, r3, #3
 800556c:	4b67      	ldr	r3, [pc, #412]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800556e:	430a      	orrs	r2, r1
 8005570:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005572:	e041      	b.n	80055f8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d024      	beq.n	80055c6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800557c:	4b63      	ldr	r3, [pc, #396]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b62      	ldr	r3, [pc, #392]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005582:	2101      	movs	r1, #1
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005588:	f7fd f81e 	bl	80025c8 <HAL_GetTick>
 800558c:	0003      	movs	r3, r0
 800558e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005592:	f7fd f819 	bl	80025c8 <HAL_GetTick>
 8005596:	0002      	movs	r2, r0
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e297      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a4:	4b59      	ldr	r3, [pc, #356]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2202      	movs	r2, #2
 80055aa:	4013      	ands	r3, r2
 80055ac:	d0f1      	beq.n	8005592 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ae:	4b57      	ldr	r3, [pc, #348]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	22f8      	movs	r2, #248	; 0xf8
 80055b4:	4393      	bics	r3, r2
 80055b6:	0019      	movs	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	00da      	lsls	r2, r3, #3
 80055be:	4b53      	ldr	r3, [pc, #332]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80055c0:	430a      	orrs	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e018      	b.n	80055f8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055c6:	4b51      	ldr	r3, [pc, #324]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b50      	ldr	r3, [pc, #320]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80055cc:	2101      	movs	r1, #1
 80055ce:	438a      	bics	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d2:	f7fc fff9 	bl	80025c8 <HAL_GetTick>
 80055d6:	0003      	movs	r3, r0
 80055d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055dc:	f7fc fff4 	bl	80025c8 <HAL_GetTick>
 80055e0:	0002      	movs	r2, r0
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e272      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ee:	4b47      	ldr	r3, [pc, #284]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2202      	movs	r2, #2
 80055f4:	4013      	ands	r3, r2
 80055f6:	d1f1      	bne.n	80055dc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2208      	movs	r2, #8
 80055fe:	4013      	ands	r3, r2
 8005600:	d036      	beq.n	8005670 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d019      	beq.n	800563e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800560a:	4b40      	ldr	r3, [pc, #256]	; (800570c <HAL_RCC_OscConfig+0x338>)
 800560c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800560e:	4b3f      	ldr	r3, [pc, #252]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005610:	2101      	movs	r1, #1
 8005612:	430a      	orrs	r2, r1
 8005614:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005616:	f7fc ffd7 	bl	80025c8 <HAL_GetTick>
 800561a:	0003      	movs	r3, r0
 800561c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005620:	f7fc ffd2 	bl	80025c8 <HAL_GetTick>
 8005624:	0002      	movs	r2, r0
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e250      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005632:	4b36      	ldr	r3, [pc, #216]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	2202      	movs	r2, #2
 8005638:	4013      	ands	r3, r2
 800563a:	d0f1      	beq.n	8005620 <HAL_RCC_OscConfig+0x24c>
 800563c:	e018      	b.n	8005670 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800563e:	4b33      	ldr	r3, [pc, #204]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005642:	4b32      	ldr	r3, [pc, #200]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005644:	2101      	movs	r1, #1
 8005646:	438a      	bics	r2, r1
 8005648:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564a:	f7fc ffbd 	bl	80025c8 <HAL_GetTick>
 800564e:	0003      	movs	r3, r0
 8005650:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005654:	f7fc ffb8 	bl	80025c8 <HAL_GetTick>
 8005658:	0002      	movs	r2, r0
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e236      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	2202      	movs	r2, #2
 800566c:	4013      	ands	r3, r2
 800566e:	d1f1      	bne.n	8005654 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2204      	movs	r2, #4
 8005676:	4013      	ands	r3, r2
 8005678:	d100      	bne.n	800567c <HAL_RCC_OscConfig+0x2a8>
 800567a:	e0b5      	b.n	80057e8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567c:	201f      	movs	r0, #31
 800567e:	183b      	adds	r3, r7, r0
 8005680:	2200      	movs	r2, #0
 8005682:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005684:	4b21      	ldr	r3, [pc, #132]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	2380      	movs	r3, #128	; 0x80
 800568a:	055b      	lsls	r3, r3, #21
 800568c:	4013      	ands	r3, r2
 800568e:	d110      	bne.n	80056b2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005690:	4b1e      	ldr	r3, [pc, #120]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	4b1d      	ldr	r3, [pc, #116]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	0549      	lsls	r1, r1, #21
 800569a:	430a      	orrs	r2, r1
 800569c:	61da      	str	r2, [r3, #28]
 800569e:	4b1b      	ldr	r3, [pc, #108]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	055b      	lsls	r3, r3, #21
 80056a6:	4013      	ands	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056ac:	183b      	adds	r3, r7, r0
 80056ae:	2201      	movs	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b2:	4b19      	ldr	r3, [pc, #100]	; (8005718 <HAL_RCC_OscConfig+0x344>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4013      	ands	r3, r2
 80056bc:	d11a      	bne.n	80056f4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056be:	4b16      	ldr	r3, [pc, #88]	; (8005718 <HAL_RCC_OscConfig+0x344>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <HAL_RCC_OscConfig+0x344>)
 80056c4:	2180      	movs	r1, #128	; 0x80
 80056c6:	0049      	lsls	r1, r1, #1
 80056c8:	430a      	orrs	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056cc:	f7fc ff7c 	bl	80025c8 <HAL_GetTick>
 80056d0:	0003      	movs	r3, r0
 80056d2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d6:	f7fc ff77 	bl	80025c8 <HAL_GetTick>
 80056da:	0002      	movs	r2, r0
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b64      	cmp	r3, #100	; 0x64
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e1f5      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e8:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <HAL_RCC_OscConfig+0x344>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	4013      	ands	r3, r2
 80056f2:	d0f0      	beq.n	80056d6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d10f      	bne.n	800571c <HAL_RCC_OscConfig+0x348>
 80056fc:	4b03      	ldr	r3, [pc, #12]	; (800570c <HAL_RCC_OscConfig+0x338>)
 80056fe:	6a1a      	ldr	r2, [r3, #32]
 8005700:	4b02      	ldr	r3, [pc, #8]	; (800570c <HAL_RCC_OscConfig+0x338>)
 8005702:	2101      	movs	r1, #1
 8005704:	430a      	orrs	r2, r1
 8005706:	621a      	str	r2, [r3, #32]
 8005708:	e036      	b.n	8005778 <HAL_RCC_OscConfig+0x3a4>
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	40021000 	.word	0x40021000
 8005710:	fffeffff 	.word	0xfffeffff
 8005714:	fffbffff 	.word	0xfffbffff
 8005718:	40007000 	.word	0x40007000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10c      	bne.n	800573e <HAL_RCC_OscConfig+0x36a>
 8005724:	4bca      	ldr	r3, [pc, #808]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005726:	6a1a      	ldr	r2, [r3, #32]
 8005728:	4bc9      	ldr	r3, [pc, #804]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800572a:	2101      	movs	r1, #1
 800572c:	438a      	bics	r2, r1
 800572e:	621a      	str	r2, [r3, #32]
 8005730:	4bc7      	ldr	r3, [pc, #796]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	4bc6      	ldr	r3, [pc, #792]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005736:	2104      	movs	r1, #4
 8005738:	438a      	bics	r2, r1
 800573a:	621a      	str	r2, [r3, #32]
 800573c:	e01c      	b.n	8005778 <HAL_RCC_OscConfig+0x3a4>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b05      	cmp	r3, #5
 8005744:	d10c      	bne.n	8005760 <HAL_RCC_OscConfig+0x38c>
 8005746:	4bc2      	ldr	r3, [pc, #776]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005748:	6a1a      	ldr	r2, [r3, #32]
 800574a:	4bc1      	ldr	r3, [pc, #772]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800574c:	2104      	movs	r1, #4
 800574e:	430a      	orrs	r2, r1
 8005750:	621a      	str	r2, [r3, #32]
 8005752:	4bbf      	ldr	r3, [pc, #764]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005754:	6a1a      	ldr	r2, [r3, #32]
 8005756:	4bbe      	ldr	r3, [pc, #760]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005758:	2101      	movs	r1, #1
 800575a:	430a      	orrs	r2, r1
 800575c:	621a      	str	r2, [r3, #32]
 800575e:	e00b      	b.n	8005778 <HAL_RCC_OscConfig+0x3a4>
 8005760:	4bbb      	ldr	r3, [pc, #748]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	4bba      	ldr	r3, [pc, #744]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005766:	2101      	movs	r1, #1
 8005768:	438a      	bics	r2, r1
 800576a:	621a      	str	r2, [r3, #32]
 800576c:	4bb8      	ldr	r3, [pc, #736]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800576e:	6a1a      	ldr	r2, [r3, #32]
 8005770:	4bb7      	ldr	r3, [pc, #732]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005772:	2104      	movs	r1, #4
 8005774:	438a      	bics	r2, r1
 8005776:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d014      	beq.n	80057aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005780:	f7fc ff22 	bl	80025c8 <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005788:	e009      	b.n	800579e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800578a:	f7fc ff1d 	bl	80025c8 <HAL_GetTick>
 800578e:	0002      	movs	r2, r0
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	4aaf      	ldr	r2, [pc, #700]	; (8005a54 <HAL_RCC_OscConfig+0x680>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e19a      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800579e:	4bac      	ldr	r3, [pc, #688]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	2202      	movs	r2, #2
 80057a4:	4013      	ands	r3, r2
 80057a6:	d0f0      	beq.n	800578a <HAL_RCC_OscConfig+0x3b6>
 80057a8:	e013      	b.n	80057d2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057aa:	f7fc ff0d 	bl	80025c8 <HAL_GetTick>
 80057ae:	0003      	movs	r3, r0
 80057b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b2:	e009      	b.n	80057c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b4:	f7fc ff08 	bl	80025c8 <HAL_GetTick>
 80057b8:	0002      	movs	r2, r0
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	4aa5      	ldr	r2, [pc, #660]	; (8005a54 <HAL_RCC_OscConfig+0x680>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e185      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c8:	4ba1      	ldr	r3, [pc, #644]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	2202      	movs	r2, #2
 80057ce:	4013      	ands	r3, r2
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057d2:	231f      	movs	r3, #31
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d105      	bne.n	80057e8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057dc:	4b9c      	ldr	r3, [pc, #624]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	4b9b      	ldr	r3, [pc, #620]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80057e2:	499d      	ldr	r1, [pc, #628]	; (8005a58 <HAL_RCC_OscConfig+0x684>)
 80057e4:	400a      	ands	r2, r1
 80057e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2210      	movs	r2, #16
 80057ee:	4013      	ands	r3, r2
 80057f0:	d063      	beq.n	80058ba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d12a      	bne.n	8005850 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80057fa:	4b95      	ldr	r3, [pc, #596]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80057fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057fe:	4b94      	ldr	r3, [pc, #592]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005800:	2104      	movs	r1, #4
 8005802:	430a      	orrs	r2, r1
 8005804:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005806:	4b92      	ldr	r3, [pc, #584]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800580a:	4b91      	ldr	r3, [pc, #580]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800580c:	2101      	movs	r1, #1
 800580e:	430a      	orrs	r2, r1
 8005810:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005812:	f7fc fed9 	bl	80025c8 <HAL_GetTick>
 8005816:	0003      	movs	r3, r0
 8005818:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800581c:	f7fc fed4 	bl	80025c8 <HAL_GetTick>
 8005820:	0002      	movs	r2, r0
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e152      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800582e:	4b88      	ldr	r3, [pc, #544]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	2202      	movs	r2, #2
 8005834:	4013      	ands	r3, r2
 8005836:	d0f1      	beq.n	800581c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005838:	4b85      	ldr	r3, [pc, #532]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800583a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583c:	22f8      	movs	r2, #248	; 0xf8
 800583e:	4393      	bics	r3, r2
 8005840:	0019      	movs	r1, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	00da      	lsls	r2, r3, #3
 8005848:	4b81      	ldr	r3, [pc, #516]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800584a:	430a      	orrs	r2, r1
 800584c:	635a      	str	r2, [r3, #52]	; 0x34
 800584e:	e034      	b.n	80058ba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	3305      	adds	r3, #5
 8005856:	d111      	bne.n	800587c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005858:	4b7d      	ldr	r3, [pc, #500]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800585a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800585c:	4b7c      	ldr	r3, [pc, #496]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800585e:	2104      	movs	r1, #4
 8005860:	438a      	bics	r2, r1
 8005862:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005864:	4b7a      	ldr	r3, [pc, #488]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	22f8      	movs	r2, #248	; 0xf8
 800586a:	4393      	bics	r3, r2
 800586c:	0019      	movs	r1, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	00da      	lsls	r2, r3, #3
 8005874:	4b76      	ldr	r3, [pc, #472]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005876:	430a      	orrs	r2, r1
 8005878:	635a      	str	r2, [r3, #52]	; 0x34
 800587a:	e01e      	b.n	80058ba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800587c:	4b74      	ldr	r3, [pc, #464]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800587e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005880:	4b73      	ldr	r3, [pc, #460]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005882:	2104      	movs	r1, #4
 8005884:	430a      	orrs	r2, r1
 8005886:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005888:	4b71      	ldr	r3, [pc, #452]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800588a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800588c:	4b70      	ldr	r3, [pc, #448]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800588e:	2101      	movs	r1, #1
 8005890:	438a      	bics	r2, r1
 8005892:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005894:	f7fc fe98 	bl	80025c8 <HAL_GetTick>
 8005898:	0003      	movs	r3, r0
 800589a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800589c:	e008      	b.n	80058b0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800589e:	f7fc fe93 	bl	80025c8 <HAL_GetTick>
 80058a2:	0002      	movs	r2, r0
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e111      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80058b0:	4b67      	ldr	r3, [pc, #412]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	2202      	movs	r2, #2
 80058b6:	4013      	ands	r3, r2
 80058b8:	d1f1      	bne.n	800589e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2220      	movs	r2, #32
 80058c0:	4013      	ands	r3, r2
 80058c2:	d05c      	beq.n	800597e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80058c4:	4b62      	ldr	r3, [pc, #392]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	220c      	movs	r2, #12
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b0c      	cmp	r3, #12
 80058ce:	d00e      	beq.n	80058ee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80058d0:	4b5f      	ldr	r3, [pc, #380]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	220c      	movs	r2, #12
 80058d6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d114      	bne.n	8005906 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80058dc:	4b5c      	ldr	r3, [pc, #368]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	23c0      	movs	r3, #192	; 0xc0
 80058e2:	025b      	lsls	r3, r3, #9
 80058e4:	401a      	ands	r2, r3
 80058e6:	23c0      	movs	r3, #192	; 0xc0
 80058e8:	025b      	lsls	r3, r3, #9
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d10b      	bne.n	8005906 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80058ee:	4b58      	ldr	r3, [pc, #352]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80058f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f2:	2380      	movs	r3, #128	; 0x80
 80058f4:	025b      	lsls	r3, r3, #9
 80058f6:	4013      	ands	r3, r2
 80058f8:	d040      	beq.n	800597c <HAL_RCC_OscConfig+0x5a8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d03c      	beq.n	800597c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e0e6      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01b      	beq.n	8005946 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800590e:	4b50      	ldr	r3, [pc, #320]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005912:	4b4f      	ldr	r3, [pc, #316]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005914:	2180      	movs	r1, #128	; 0x80
 8005916:	0249      	lsls	r1, r1, #9
 8005918:	430a      	orrs	r2, r1
 800591a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591c:	f7fc fe54 	bl	80025c8 <HAL_GetTick>
 8005920:	0003      	movs	r3, r0
 8005922:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005926:	f7fc fe4f 	bl	80025c8 <HAL_GetTick>
 800592a:	0002      	movs	r2, r0
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e0cd      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005938:	4b45      	ldr	r3, [pc, #276]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800593a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800593c:	2380      	movs	r3, #128	; 0x80
 800593e:	025b      	lsls	r3, r3, #9
 8005940:	4013      	ands	r3, r2
 8005942:	d0f0      	beq.n	8005926 <HAL_RCC_OscConfig+0x552>
 8005944:	e01b      	b.n	800597e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005946:	4b42      	ldr	r3, [pc, #264]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800594a:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800594c:	4943      	ldr	r1, [pc, #268]	; (8005a5c <HAL_RCC_OscConfig+0x688>)
 800594e:	400a      	ands	r2, r1
 8005950:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005952:	f7fc fe39 	bl	80025c8 <HAL_GetTick>
 8005956:	0003      	movs	r3, r0
 8005958:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800595c:	f7fc fe34 	bl	80025c8 <HAL_GetTick>
 8005960:	0002      	movs	r2, r0
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e0b2      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800596e:	4b38      	ldr	r3, [pc, #224]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005972:	2380      	movs	r3, #128	; 0x80
 8005974:	025b      	lsls	r3, r3, #9
 8005976:	4013      	ands	r3, r2
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0x588>
 800597a:	e000      	b.n	800597e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800597c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	2b00      	cmp	r3, #0
 8005984:	d100      	bne.n	8005988 <HAL_RCC_OscConfig+0x5b4>
 8005986:	e0a4      	b.n	8005ad2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005988:	4b31      	ldr	r3, [pc, #196]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	220c      	movs	r2, #12
 800598e:	4013      	ands	r3, r2
 8005990:	2b08      	cmp	r3, #8
 8005992:	d100      	bne.n	8005996 <HAL_RCC_OscConfig+0x5c2>
 8005994:	e078      	b.n	8005a88 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	2b02      	cmp	r3, #2
 800599c:	d14c      	bne.n	8005a38 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599e:	4b2c      	ldr	r3, [pc, #176]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b2b      	ldr	r3, [pc, #172]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80059a4:	492e      	ldr	r1, [pc, #184]	; (8005a60 <HAL_RCC_OscConfig+0x68c>)
 80059a6:	400a      	ands	r2, r1
 80059a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059aa:	f7fc fe0d 	bl	80025c8 <HAL_GetTick>
 80059ae:	0003      	movs	r3, r0
 80059b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b4:	f7fc fe08 	bl	80025c8 <HAL_GetTick>
 80059b8:	0002      	movs	r2, r0
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e086      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059c6:	4b22      	ldr	r3, [pc, #136]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	2380      	movs	r3, #128	; 0x80
 80059cc:	049b      	lsls	r3, r3, #18
 80059ce:	4013      	ands	r3, r2
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059d2:	4b1f      	ldr	r3, [pc, #124]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	220f      	movs	r2, #15
 80059d8:	4393      	bics	r3, r2
 80059da:	0019      	movs	r1, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80059e2:	430a      	orrs	r2, r1
 80059e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <HAL_RCC_OscConfig+0x690>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	0019      	movs	r1, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	431a      	orrs	r2, r3
 80059fa:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 80059fc:	430a      	orrs	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a00:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b12      	ldr	r3, [pc, #72]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005a06:	2180      	movs	r1, #128	; 0x80
 8005a08:	0449      	lsls	r1, r1, #17
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0e:	f7fc fddb 	bl	80025c8 <HAL_GetTick>
 8005a12:	0003      	movs	r3, r0
 8005a14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a18:	f7fc fdd6 	bl	80025c8 <HAL_GetTick>
 8005a1c:	0002      	movs	r2, r0
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e054      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a2a:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	2380      	movs	r3, #128	; 0x80
 8005a30:	049b      	lsls	r3, r3, #18
 8005a32:	4013      	ands	r3, r2
 8005a34:	d0f0      	beq.n	8005a18 <HAL_RCC_OscConfig+0x644>
 8005a36:	e04c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <HAL_RCC_OscConfig+0x67c>)
 8005a3e:	4908      	ldr	r1, [pc, #32]	; (8005a60 <HAL_RCC_OscConfig+0x68c>)
 8005a40:	400a      	ands	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a44:	f7fc fdc0 	bl	80025c8 <HAL_GetTick>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a4c:	e015      	b.n	8005a7a <HAL_RCC_OscConfig+0x6a6>
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	40021000 	.word	0x40021000
 8005a54:	00001388 	.word	0x00001388
 8005a58:	efffffff 	.word	0xefffffff
 8005a5c:	fffeffff 	.word	0xfffeffff
 8005a60:	feffffff 	.word	0xfeffffff
 8005a64:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a68:	f7fc fdae 	bl	80025c8 <HAL_GetTick>
 8005a6c:	0002      	movs	r2, r0
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e02c      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a7a:	4b18      	ldr	r3, [pc, #96]	; (8005adc <HAL_RCC_OscConfig+0x708>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	049b      	lsls	r3, r3, #18
 8005a82:	4013      	ands	r3, r2
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCC_OscConfig+0x694>
 8005a86:	e024      	b.n	8005ad2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e01f      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005a94:	4b11      	ldr	r3, [pc, #68]	; (8005adc <HAL_RCC_OscConfig+0x708>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_RCC_OscConfig+0x708>)
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	23c0      	movs	r3, #192	; 0xc0
 8005aa4:	025b      	lsls	r3, r3, #9
 8005aa6:	401a      	ands	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d10e      	bne.n	8005ace <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	220f      	movs	r2, #15
 8005ab4:	401a      	ands	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d107      	bne.n	8005ace <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	23f0      	movs	r3, #240	; 0xf0
 8005ac2:	039b      	lsls	r3, r3, #14
 8005ac4:	401a      	ands	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d001      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b008      	add	sp, #32
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40021000 	.word	0x40021000

08005ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0bf      	b.n	8005c74 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005af4:	4b61      	ldr	r3, [pc, #388]	; (8005c7c <HAL_RCC_ClockConfig+0x19c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2201      	movs	r2, #1
 8005afa:	4013      	ands	r3, r2
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d911      	bls.n	8005b26 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b5e      	ldr	r3, [pc, #376]	; (8005c7c <HAL_RCC_ClockConfig+0x19c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2201      	movs	r2, #1
 8005b08:	4393      	bics	r3, r2
 8005b0a:	0019      	movs	r1, r3
 8005b0c:	4b5b      	ldr	r3, [pc, #364]	; (8005c7c <HAL_RCC_ClockConfig+0x19c>)
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b14:	4b59      	ldr	r3, [pc, #356]	; (8005c7c <HAL_RCC_ClockConfig+0x19c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d001      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e0a6      	b.n	8005c74 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d015      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2204      	movs	r2, #4
 8005b36:	4013      	ands	r3, r2
 8005b38:	d006      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005b3a:	4b51      	ldr	r3, [pc, #324]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	4b50      	ldr	r3, [pc, #320]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005b40:	21e0      	movs	r1, #224	; 0xe0
 8005b42:	00c9      	lsls	r1, r1, #3
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b48:	4b4d      	ldr	r3, [pc, #308]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	22f0      	movs	r2, #240	; 0xf0
 8005b4e:	4393      	bics	r3, r2
 8005b50:	0019      	movs	r1, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	4b4a      	ldr	r3, [pc, #296]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2201      	movs	r2, #1
 8005b62:	4013      	ands	r3, r2
 8005b64:	d04c      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d107      	bne.n	8005b7e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b6e:	4b44      	ldr	r3, [pc, #272]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	029b      	lsls	r3, r3, #10
 8005b76:	4013      	ands	r3, r2
 8005b78:	d120      	bne.n	8005bbc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e07a      	b.n	8005c74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d107      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b86:	4b3e      	ldr	r3, [pc, #248]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	2380      	movs	r3, #128	; 0x80
 8005b8c:	049b      	lsls	r3, r3, #18
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d114      	bne.n	8005bbc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e06e      	b.n	8005c74 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d107      	bne.n	8005bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005b9e:	4b38      	ldr	r3, [pc, #224]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba2:	2380      	movs	r3, #128	; 0x80
 8005ba4:	025b      	lsls	r3, r3, #9
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d108      	bne.n	8005bbc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e062      	b.n	8005c74 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bae:	4b34      	ldr	r3, [pc, #208]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e05b      	b.n	8005c74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bbc:	4b30      	ldr	r3, [pc, #192]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	4393      	bics	r3, r2
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	4b2d      	ldr	r3, [pc, #180]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bd0:	f7fc fcfa 	bl	80025c8 <HAL_GetTick>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd8:	e009      	b.n	8005bee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bda:	f7fc fcf5 	bl	80025c8 <HAL_GetTick>
 8005bde:	0002      	movs	r2, r0
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	4a27      	ldr	r2, [pc, #156]	; (8005c84 <HAL_RCC_ClockConfig+0x1a4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e042      	b.n	8005c74 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bee:	4b24      	ldr	r3, [pc, #144]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	220c      	movs	r2, #12
 8005bf4:	401a      	ands	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1ec      	bne.n	8005bda <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c00:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <HAL_RCC_ClockConfig+0x19c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2201      	movs	r2, #1
 8005c06:	4013      	ands	r3, r2
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d211      	bcs.n	8005c32 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0e:	4b1b      	ldr	r3, [pc, #108]	; (8005c7c <HAL_RCC_ClockConfig+0x19c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2201      	movs	r2, #1
 8005c14:	4393      	bics	r3, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <HAL_RCC_ClockConfig+0x19c>)
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c20:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <HAL_RCC_ClockConfig+0x19c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2201      	movs	r2, #1
 8005c26:	4013      	ands	r3, r2
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d001      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e020      	b.n	8005c74 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2204      	movs	r2, #4
 8005c38:	4013      	ands	r3, r2
 8005c3a:	d009      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4a11      	ldr	r2, [pc, #68]	; (8005c88 <HAL_RCC_ClockConfig+0x1a8>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	0019      	movs	r1, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c50:	f000 f820 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005c54:	0001      	movs	r1, r0
 8005c56:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <HAL_RCC_ClockConfig+0x1a0>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	220f      	movs	r2, #15
 8005c5e:	4013      	ands	r3, r2
 8005c60:	4a0a      	ldr	r2, [pc, #40]	; (8005c8c <HAL_RCC_ClockConfig+0x1ac>)
 8005c62:	5cd3      	ldrb	r3, [r2, r3]
 8005c64:	000a      	movs	r2, r1
 8005c66:	40da      	lsrs	r2, r3
 8005c68:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <HAL_RCC_ClockConfig+0x1b0>)
 8005c6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005c6c:	2003      	movs	r0, #3
 8005c6e:	f7fc fc65 	bl	800253c <HAL_InitTick>
  
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	0018      	movs	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	b004      	add	sp, #16
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40022000 	.word	0x40022000
 8005c80:	40021000 	.word	0x40021000
 8005c84:	00001388 	.word	0x00001388
 8005c88:	fffff8ff 	.word	0xfffff8ff
 8005c8c:	0800d2c4 	.word	0x0800d2c4
 8005c90:	20000000 	.word	0x20000000

08005c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c94:	b590      	push	{r4, r7, lr}
 8005c96:	b08f      	sub	sp, #60	; 0x3c
 8005c98:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005c9a:	2314      	movs	r3, #20
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	4a38      	ldr	r2, [pc, #224]	; (8005d80 <HAL_RCC_GetSysClockFreq+0xec>)
 8005ca0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ca2:	c313      	stmia	r3!, {r0, r1, r4}
 8005ca4:	6812      	ldr	r2, [r2, #0]
 8005ca6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005ca8:	1d3b      	adds	r3, r7, #4
 8005caa:	4a36      	ldr	r2, [pc, #216]	; (8005d84 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005cac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005cae:	c313      	stmia	r3!, {r0, r1, r4}
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cb8:	2300      	movs	r3, #0
 8005cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005cc8:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	220c      	movs	r2, #12
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b0c      	cmp	r3, #12
 8005cd6:	d047      	beq.n	8005d68 <HAL_RCC_GetSysClockFreq+0xd4>
 8005cd8:	d849      	bhi.n	8005d6e <HAL_RCC_GetSysClockFreq+0xda>
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d002      	beq.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x50>
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d003      	beq.n	8005cea <HAL_RCC_GetSysClockFreq+0x56>
 8005ce2:	e044      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ce4:	4b29      	ldr	r3, [pc, #164]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ce6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ce8:	e044      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	0c9b      	lsrs	r3, r3, #18
 8005cee:	220f      	movs	r2, #15
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	2214      	movs	r2, #20
 8005cf4:	18ba      	adds	r2, r7, r2
 8005cf6:	5cd3      	ldrb	r3, [r2, r3]
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005cfa:	4b23      	ldr	r3, [pc, #140]	; (8005d88 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	220f      	movs	r2, #15
 8005d00:	4013      	ands	r3, r2
 8005d02:	1d3a      	adds	r2, r7, #4
 8005d04:	5cd3      	ldrb	r3, [r2, r3]
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d0a:	23c0      	movs	r3, #192	; 0xc0
 8005d0c:	025b      	lsls	r3, r3, #9
 8005d0e:	401a      	ands	r2, r3
 8005d10:	2380      	movs	r3, #128	; 0x80
 8005d12:	025b      	lsls	r3, r3, #9
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d109      	bne.n	8005d2c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d1a:	481c      	ldr	r0, [pc, #112]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d1c:	f7fa fa06 	bl	800012c <__udivsi3>
 8005d20:	0003      	movs	r3, r0
 8005d22:	001a      	movs	r2, r3
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	4353      	muls	r3, r2
 8005d28:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2a:	e01a      	b.n	8005d62 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2e:	23c0      	movs	r3, #192	; 0xc0
 8005d30:	025b      	lsls	r3, r3, #9
 8005d32:	401a      	ands	r2, r3
 8005d34:	23c0      	movs	r3, #192	; 0xc0
 8005d36:	025b      	lsls	r3, r3, #9
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d109      	bne.n	8005d50 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d3e:	4814      	ldr	r0, [pc, #80]	; (8005d90 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d40:	f7fa f9f4 	bl	800012c <__udivsi3>
 8005d44:	0003      	movs	r3, r0
 8005d46:	001a      	movs	r2, r3
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	4353      	muls	r3, r2
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d52:	4810      	ldr	r0, [pc, #64]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d54:	f7fa f9ea 	bl	800012c <__udivsi3>
 8005d58:	0003      	movs	r3, r0
 8005d5a:	001a      	movs	r2, r3
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	4353      	muls	r3, r2
 8005d60:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d66:	e005      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005d68:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d6c:	e002      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d6e:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x100>)
 8005d70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d72:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005d76:	0018      	movs	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b00f      	add	sp, #60	; 0x3c
 8005d7c:	bd90      	pop	{r4, r7, pc}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	0800d1e8 	.word	0x0800d1e8
 8005d84:	0800d1f8 	.word	0x0800d1f8
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	00f42400 	.word	0x00f42400
 8005d90:	02dc6c00 	.word	0x02dc6c00
 8005d94:	007a1200 	.word	0x007a1200

08005d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d9c:	4b02      	ldr	r3, [pc, #8]	; (8005da8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
}
 8005da0:	0018      	movs	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	20000000 	.word	0x20000000

08005dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005db0:	f7ff fff2 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005db4:	0001      	movs	r1, r0
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	0a1b      	lsrs	r3, r3, #8
 8005dbc:	2207      	movs	r2, #7
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	4a04      	ldr	r2, [pc, #16]	; (8005dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dc2:	5cd3      	ldrb	r3, [r2, r3]
 8005dc4:	40d9      	lsrs	r1, r3
 8005dc6:	000b      	movs	r3, r1
}    
 8005dc8:	0018      	movs	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	0800d2d4 	.word	0x0800d2d4

08005dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	025b      	lsls	r3, r3, #9
 8005df0:	4013      	ands	r3, r2
 8005df2:	d100      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005df4:	e08e      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005df6:	2017      	movs	r0, #23
 8005df8:	183b      	adds	r3, r7, r0
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dfe:	4b6e      	ldr	r3, [pc, #440]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e00:	69da      	ldr	r2, [r3, #28]
 8005e02:	2380      	movs	r3, #128	; 0x80
 8005e04:	055b      	lsls	r3, r3, #21
 8005e06:	4013      	ands	r3, r2
 8005e08:	d110      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e0a:	4b6b      	ldr	r3, [pc, #428]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e0c:	69da      	ldr	r2, [r3, #28]
 8005e0e:	4b6a      	ldr	r3, [pc, #424]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e10:	2180      	movs	r1, #128	; 0x80
 8005e12:	0549      	lsls	r1, r1, #21
 8005e14:	430a      	orrs	r2, r1
 8005e16:	61da      	str	r2, [r3, #28]
 8005e18:	4b67      	ldr	r3, [pc, #412]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	2380      	movs	r3, #128	; 0x80
 8005e1e:	055b      	lsls	r3, r3, #21
 8005e20:	4013      	ands	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]
 8005e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e26:	183b      	adds	r3, r7, r0
 8005e28:	2201      	movs	r2, #1
 8005e2a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2c:	4b63      	ldr	r3, [pc, #396]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	2380      	movs	r3, #128	; 0x80
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	4013      	ands	r3, r2
 8005e36:	d11a      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e38:	4b60      	ldr	r3, [pc, #384]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	4b5f      	ldr	r3, [pc, #380]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005e3e:	2180      	movs	r1, #128	; 0x80
 8005e40:	0049      	lsls	r1, r1, #1
 8005e42:	430a      	orrs	r2, r1
 8005e44:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e46:	f7fc fbbf 	bl	80025c8 <HAL_GetTick>
 8005e4a:	0003      	movs	r3, r0
 8005e4c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e4e:	e008      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e50:	f7fc fbba 	bl	80025c8 <HAL_GetTick>
 8005e54:	0002      	movs	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	; 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e0a6      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e62:	4b56      	ldr	r3, [pc, #344]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	2380      	movs	r3, #128	; 0x80
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e6e:	4b52      	ldr	r3, [pc, #328]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e70:	6a1a      	ldr	r2, [r3, #32]
 8005e72:	23c0      	movs	r3, #192	; 0xc0
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4013      	ands	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d034      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	23c0      	movs	r3, #192	; 0xc0
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4013      	ands	r3, r2
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d02c      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e90:	4b49      	ldr	r3, [pc, #292]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	4a4a      	ldr	r2, [pc, #296]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e9a:	4b47      	ldr	r3, [pc, #284]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005e9c:	6a1a      	ldr	r2, [r3, #32]
 8005e9e:	4b46      	ldr	r3, [pc, #280]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ea0:	2180      	movs	r1, #128	; 0x80
 8005ea2:	0249      	lsls	r1, r1, #9
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ea8:	4b43      	ldr	r3, [pc, #268]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005eaa:	6a1a      	ldr	r2, [r3, #32]
 8005eac:	4b42      	ldr	r3, [pc, #264]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005eae:	4945      	ldr	r1, [pc, #276]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005eb0:	400a      	ands	r2, r1
 8005eb2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005eb4:	4b40      	ldr	r3, [pc, #256]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d013      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec2:	f7fc fb81 	bl	80025c8 <HAL_GetTick>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eca:	e009      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ecc:	f7fc fb7c 	bl	80025c8 <HAL_GetTick>
 8005ed0:	0002      	movs	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	4a3c      	ldr	r2, [pc, #240]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e067      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee0:	4b35      	ldr	r3, [pc, #212]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d0f0      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eea:	4b33      	ldr	r3, [pc, #204]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	4a34      	ldr	r2, [pc, #208]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	4b2f      	ldr	r3, [pc, #188]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005efa:	430a      	orrs	r2, r1
 8005efc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005efe:	2317      	movs	r3, #23
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d105      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f08:	4b2b      	ldr	r3, [pc, #172]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f0a:	69da      	ldr	r2, [r3, #28]
 8005f0c:	4b2a      	ldr	r3, [pc, #168]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f0e:	492f      	ldr	r1, [pc, #188]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005f10:	400a      	ands	r2, r1
 8005f12:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f1e:	4b26      	ldr	r3, [pc, #152]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	2203      	movs	r2, #3
 8005f24:	4393      	bics	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	4b22      	ldr	r3, [pc, #136]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2202      	movs	r2, #2
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f3c:	4b1e      	ldr	r3, [pc, #120]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	4a23      	ldr	r2, [pc, #140]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	0019      	movs	r1, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2220      	movs	r2, #32
 8005f56:	4013      	ands	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f5a:	4b17      	ldr	r3, [pc, #92]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	2210      	movs	r2, #16
 8005f60:	4393      	bics	r3, r2
 8005f62:	0019      	movs	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	4b13      	ldr	r3, [pc, #76]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	029b      	lsls	r3, r3, #10
 8005f76:	4013      	ands	r3, r2
 8005f78:	d009      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f7a:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	2280      	movs	r2, #128	; 0x80
 8005f80:	4393      	bics	r3, r2
 8005f82:	0019      	movs	r1, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699a      	ldr	r2, [r3, #24]
 8005f88:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	4013      	ands	r3, r2
 8005f98:	d009      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f9a:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	2240      	movs	r2, #64	; 0x40
 8005fa0:	4393      	bics	r3, r2
 8005fa2:	0019      	movs	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005faa:	430a      	orrs	r2, r1
 8005fac:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b006      	add	sp, #24
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	40007000 	.word	0x40007000
 8005fc0:	fffffcff 	.word	0xfffffcff
 8005fc4:	fffeffff 	.word	0xfffeffff
 8005fc8:	00001388 	.word	0x00001388
 8005fcc:	efffffff 	.word	0xefffffff
 8005fd0:	fffcffff 	.word	0xfffcffff

08005fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e0a8      	b.n	8006138 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	2382      	movs	r3, #130	; 0x82
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d009      	beq.n	800600e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	61da      	str	r2, [r3, #28]
 8006000:	e005      	b.n	800600e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	225d      	movs	r2, #93	; 0x5d
 8006018:	5c9b      	ldrb	r3, [r3, r2]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d107      	bne.n	8006030 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	225c      	movs	r2, #92	; 0x5c
 8006024:	2100      	movs	r1, #0
 8006026:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	0018      	movs	r0, r3
 800602c:	f7fb fe7a 	bl	8001d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	225d      	movs	r2, #93	; 0x5d
 8006034:	2102      	movs	r1, #2
 8006036:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2140      	movs	r1, #64	; 0x40
 8006044:	438a      	bics	r2, r1
 8006046:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	23e0      	movs	r3, #224	; 0xe0
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	429a      	cmp	r2, r3
 8006052:	d902      	bls.n	800605a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e002      	b.n	8006060 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800605a:	2380      	movs	r3, #128	; 0x80
 800605c:	015b      	lsls	r3, r3, #5
 800605e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	23f0      	movs	r3, #240	; 0xf0
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	429a      	cmp	r2, r3
 800606a:	d008      	beq.n	800607e <HAL_SPI_Init+0xaa>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	23e0      	movs	r3, #224	; 0xe0
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	429a      	cmp	r2, r3
 8006076:	d002      	beq.n	800607e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	2382      	movs	r3, #130	; 0x82
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	401a      	ands	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6899      	ldr	r1, [r3, #8]
 800608c:	2384      	movs	r3, #132	; 0x84
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	400b      	ands	r3, r1
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	2102      	movs	r1, #2
 800609a:	400b      	ands	r3, r1
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	2101      	movs	r1, #1
 80060a4:	400b      	ands	r3, r1
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6999      	ldr	r1, [r3, #24]
 80060ac:	2380      	movs	r3, #128	; 0x80
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	400b      	ands	r3, r1
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	2138      	movs	r1, #56	; 0x38
 80060ba:	400b      	ands	r3, r1
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	400b      	ands	r3, r1
 80060c6:	431a      	orrs	r2, r3
 80060c8:	0011      	movs	r1, r2
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ce:	2380      	movs	r3, #128	; 0x80
 80060d0:	019b      	lsls	r3, r3, #6
 80060d2:	401a      	ands	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	0c1b      	lsrs	r3, r3, #16
 80060e2:	2204      	movs	r2, #4
 80060e4:	401a      	ands	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	2110      	movs	r1, #16
 80060ec:	400b      	ands	r3, r1
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f4:	2108      	movs	r1, #8
 80060f6:	400b      	ands	r3, r1
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68d9      	ldr	r1, [r3, #12]
 80060fe:	23f0      	movs	r3, #240	; 0xf0
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	400b      	ands	r3, r1
 8006104:	431a      	orrs	r2, r3
 8006106:	0011      	movs	r1, r2
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	015b      	lsls	r3, r3, #5
 800610e:	401a      	ands	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4907      	ldr	r1, [pc, #28]	; (8006140 <HAL_SPI_Init+0x16c>)
 8006124:	400a      	ands	r2, r1
 8006126:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	225d      	movs	r2, #93	; 0x5d
 8006132:	2101      	movs	r1, #1
 8006134:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	0018      	movs	r0, r3
 800613a:	46bd      	mov	sp, r7
 800613c:	b004      	add	sp, #16
 800613e:	bd80      	pop	{r7, pc}
 8006140:	fffff7ff 	.word	0xfffff7ff

08006144 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	1dbb      	adds	r3, r7, #6
 8006152:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006154:	231f      	movs	r3, #31
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	2200      	movs	r2, #0
 800615a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	225c      	movs	r2, #92	; 0x5c
 8006160:	5c9b      	ldrb	r3, [r3, r2]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <HAL_SPI_Transmit+0x26>
 8006166:	2302      	movs	r3, #2
 8006168:	e140      	b.n	80063ec <HAL_SPI_Transmit+0x2a8>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	225c      	movs	r2, #92	; 0x5c
 800616e:	2101      	movs	r1, #1
 8006170:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006172:	f7fc fa29 	bl	80025c8 <HAL_GetTick>
 8006176:	0003      	movs	r3, r0
 8006178:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800617a:	2316      	movs	r3, #22
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	1dba      	adds	r2, r7, #6
 8006180:	8812      	ldrh	r2, [r2, #0]
 8006182:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	225d      	movs	r2, #93	; 0x5d
 8006188:	5c9b      	ldrb	r3, [r3, r2]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	d004      	beq.n	800619a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006190:	231f      	movs	r3, #31
 8006192:	18fb      	adds	r3, r7, r3
 8006194:	2202      	movs	r2, #2
 8006196:	701a      	strb	r2, [r3, #0]
    goto error;
 8006198:	e11d      	b.n	80063d6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <HAL_SPI_Transmit+0x64>
 80061a0:	1dbb      	adds	r3, r7, #6
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80061a8:	231f      	movs	r3, #31
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80061b0:	e111      	b.n	80063d6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	225d      	movs	r2, #93	; 0x5d
 80061b6:	2103      	movs	r1, #3
 80061b8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1dba      	adds	r2, r7, #6
 80061ca:	8812      	ldrh	r2, [r2, #0]
 80061cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1dba      	adds	r2, r7, #6
 80061d2:	8812      	ldrh	r2, [r2, #0]
 80061d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2244      	movs	r2, #68	; 0x44
 80061e0:	2100      	movs	r1, #0
 80061e2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2246      	movs	r2, #70	; 0x46
 80061e8:	2100      	movs	r1, #0
 80061ea:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	2380      	movs	r3, #128	; 0x80
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	429a      	cmp	r2, r3
 8006202:	d110      	bne.n	8006226 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2140      	movs	r1, #64	; 0x40
 8006210:	438a      	bics	r2, r1
 8006212:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2180      	movs	r1, #128	; 0x80
 8006220:	01c9      	lsls	r1, r1, #7
 8006222:	430a      	orrs	r2, r1
 8006224:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2240      	movs	r2, #64	; 0x40
 800622e:	4013      	ands	r3, r2
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	d007      	beq.n	8006244 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2140      	movs	r1, #64	; 0x40
 8006240:	430a      	orrs	r2, r1
 8006242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	23e0      	movs	r3, #224	; 0xe0
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	429a      	cmp	r2, r3
 800624e:	d94e      	bls.n	80062ee <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d004      	beq.n	8006262 <HAL_SPI_Transmit+0x11e>
 8006258:	2316      	movs	r3, #22
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d13f      	bne.n	80062e2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	881a      	ldrh	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	1c9a      	adds	r2, r3, #2
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006286:	e02c      	b.n	80062e2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2202      	movs	r2, #2
 8006290:	4013      	ands	r3, r2
 8006292:	2b02      	cmp	r3, #2
 8006294:	d112      	bne.n	80062bc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	881a      	ldrh	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	1c9a      	adds	r2, r3, #2
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062ba:	e012      	b.n	80062e2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062bc:	f7fc f984 	bl	80025c8 <HAL_GetTick>
 80062c0:	0002      	movs	r2, r0
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d802      	bhi.n	80062d2 <HAL_SPI_Transmit+0x18e>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	3301      	adds	r3, #1
 80062d0:	d102      	bne.n	80062d8 <HAL_SPI_Transmit+0x194>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80062d8:	231f      	movs	r3, #31
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	2203      	movs	r2, #3
 80062de:	701a      	strb	r2, [r3, #0]
          goto error;
 80062e0:	e079      	b.n	80063d6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1cd      	bne.n	8006288 <HAL_SPI_Transmit+0x144>
 80062ec:	e04f      	b.n	800638e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d004      	beq.n	8006300 <HAL_SPI_Transmit+0x1bc>
 80062f6:	2316      	movs	r3, #22
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d141      	bne.n	8006384 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	7812      	ldrb	r2, [r2, #0]
 800630c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006326:	e02d      	b.n	8006384 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2202      	movs	r2, #2
 8006330:	4013      	ands	r3, r2
 8006332:	2b02      	cmp	r3, #2
 8006334:	d113      	bne.n	800635e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800635c:	e012      	b.n	8006384 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800635e:	f7fc f933 	bl	80025c8 <HAL_GetTick>
 8006362:	0002      	movs	r2, r0
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d802      	bhi.n	8006374 <HAL_SPI_Transmit+0x230>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	d102      	bne.n	800637a <HAL_SPI_Transmit+0x236>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d104      	bne.n	8006384 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800637a:	231f      	movs	r3, #31
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	2203      	movs	r2, #3
 8006380:	701a      	strb	r2, [r3, #0]
          goto error;
 8006382:	e028      	b.n	80063d6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1cc      	bne.n	8006328 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	0018      	movs	r0, r3
 8006396:	f000 fb2f 	bl	80069f8 <SPI_EndRxTxTransaction>
 800639a:	1e03      	subs	r3, r0, #0
 800639c:	d002      	beq.n	80063a4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063ac:	2300      	movs	r3, #0
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80063ca:	231f      	movs	r3, #31
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	2201      	movs	r2, #1
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	e000      	b.n	80063d6 <HAL_SPI_Transmit+0x292>
  }

error:
 80063d4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	225d      	movs	r2, #93	; 0x5d
 80063da:	2101      	movs	r1, #1
 80063dc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	225c      	movs	r2, #92	; 0x5c
 80063e2:	2100      	movs	r1, #0
 80063e4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80063e6:	231f      	movs	r3, #31
 80063e8:	18fb      	adds	r3, r7, r3
 80063ea:	781b      	ldrb	r3, [r3, #0]
}
 80063ec:	0018      	movs	r0, r3
 80063ee:	46bd      	mov	sp, r7
 80063f0:	b008      	add	sp, #32
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	001a      	movs	r2, r3
 8006402:	1cbb      	adds	r3, r7, #2
 8006404:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006406:	2301      	movs	r3, #1
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800640a:	2323      	movs	r3, #35	; 0x23
 800640c:	18fb      	adds	r3, r7, r3
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	225c      	movs	r2, #92	; 0x5c
 8006416:	5c9b      	ldrb	r3, [r3, r2]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_SPI_TransmitReceive+0x2c>
 800641c:	2302      	movs	r3, #2
 800641e:	e1b5      	b.n	800678c <HAL_SPI_TransmitReceive+0x398>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	225c      	movs	r2, #92	; 0x5c
 8006424:	2101      	movs	r1, #1
 8006426:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006428:	f7fc f8ce 	bl	80025c8 <HAL_GetTick>
 800642c:	0003      	movs	r3, r0
 800642e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006430:	201b      	movs	r0, #27
 8006432:	183b      	adds	r3, r7, r0
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	215d      	movs	r1, #93	; 0x5d
 8006438:	5c52      	ldrb	r2, [r2, r1]
 800643a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006442:	2312      	movs	r3, #18
 8006444:	18fb      	adds	r3, r7, r3
 8006446:	1cba      	adds	r2, r7, #2
 8006448:	8812      	ldrh	r2, [r2, #0]
 800644a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800644c:	183b      	adds	r3, r7, r0
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d011      	beq.n	8006478 <HAL_SPI_TransmitReceive+0x84>
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	2382      	movs	r3, #130	; 0x82
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	429a      	cmp	r2, r3
 800645c:	d107      	bne.n	800646e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d103      	bne.n	800646e <HAL_SPI_TransmitReceive+0x7a>
 8006466:	183b      	adds	r3, r7, r0
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b04      	cmp	r3, #4
 800646c:	d004      	beq.n	8006478 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800646e:	2323      	movs	r3, #35	; 0x23
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	2202      	movs	r2, #2
 8006474:	701a      	strb	r2, [r3, #0]
    goto error;
 8006476:	e17e      	b.n	8006776 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d006      	beq.n	800648c <HAL_SPI_TransmitReceive+0x98>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_SPI_TransmitReceive+0x98>
 8006484:	1cbb      	adds	r3, r7, #2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800648c:	2323      	movs	r3, #35	; 0x23
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	2201      	movs	r2, #1
 8006492:	701a      	strb	r2, [r3, #0]
    goto error;
 8006494:	e16f      	b.n	8006776 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	225d      	movs	r2, #93	; 0x5d
 800649a:	5c9b      	ldrb	r3, [r3, r2]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d003      	beq.n	80064aa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	225d      	movs	r2, #93	; 0x5d
 80064a6:	2105      	movs	r1, #5
 80064a8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	1cba      	adds	r2, r7, #2
 80064ba:	2146      	movs	r1, #70	; 0x46
 80064bc:	8812      	ldrh	r2, [r2, #0]
 80064be:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	1cba      	adds	r2, r7, #2
 80064c4:	2144      	movs	r1, #68	; 0x44
 80064c6:	8812      	ldrh	r2, [r2, #0]
 80064c8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1cba      	adds	r2, r7, #2
 80064d4:	8812      	ldrh	r2, [r2, #0]
 80064d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	1cba      	adds	r2, r7, #2
 80064dc:	8812      	ldrh	r2, [r2, #0]
 80064de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	23e0      	movs	r3, #224	; 0xe0
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d908      	bls.n	800650a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	49a4      	ldr	r1, [pc, #656]	; (8006794 <HAL_SPI_TransmitReceive+0x3a0>)
 8006504:	400a      	ands	r2, r1
 8006506:	605a      	str	r2, [r3, #4]
 8006508:	e008      	b.n	800651c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2180      	movs	r1, #128	; 0x80
 8006516:	0149      	lsls	r1, r1, #5
 8006518:	430a      	orrs	r2, r1
 800651a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2240      	movs	r2, #64	; 0x40
 8006524:	4013      	ands	r3, r2
 8006526:	2b40      	cmp	r3, #64	; 0x40
 8006528:	d007      	beq.n	800653a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2140      	movs	r1, #64	; 0x40
 8006536:	430a      	orrs	r2, r1
 8006538:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	23e0      	movs	r3, #224	; 0xe0
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	429a      	cmp	r2, r3
 8006544:	d800      	bhi.n	8006548 <HAL_SPI_TransmitReceive+0x154>
 8006546:	e07f      	b.n	8006648 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <HAL_SPI_TransmitReceive+0x168>
 8006550:	2312      	movs	r3, #18
 8006552:	18fb      	adds	r3, r7, r3
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d000      	beq.n	800655c <HAL_SPI_TransmitReceive+0x168>
 800655a:	e069      	b.n	8006630 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	881a      	ldrh	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	1c9a      	adds	r2, r3, #2
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006580:	e056      	b.n	8006630 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2202      	movs	r2, #2
 800658a:	4013      	ands	r3, r2
 800658c:	2b02      	cmp	r3, #2
 800658e:	d11b      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x1d4>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d016      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x1d4>
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	2b01      	cmp	r3, #1
 800659e:	d113      	bne.n	80065c8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	881a      	ldrh	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	1c9a      	adds	r2, r3, #2
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2201      	movs	r2, #1
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d11c      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x21c>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2246      	movs	r2, #70	; 0x46
 80065da:	5a9b      	ldrh	r3, [r3, r2]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d016      	beq.n	8006610 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	b292      	uxth	r2, r2
 80065ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f4:	1c9a      	adds	r2, r3, #2
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2246      	movs	r2, #70	; 0x46
 80065fe:	5a9b      	ldrh	r3, [r3, r2]
 8006600:	b29b      	uxth	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	b299      	uxth	r1, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2246      	movs	r2, #70	; 0x46
 800660a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800660c:	2301      	movs	r3, #1
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006610:	f7fb ffda 	bl	80025c8 <HAL_GetTick>
 8006614:	0002      	movs	r2, r0
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661c:	429a      	cmp	r2, r3
 800661e:	d807      	bhi.n	8006630 <HAL_SPI_TransmitReceive+0x23c>
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	3301      	adds	r3, #1
 8006624:	d004      	beq.n	8006630 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006626:	2323      	movs	r3, #35	; 0x23
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	2203      	movs	r2, #3
 800662c:	701a      	strb	r2, [r3, #0]
        goto error;
 800662e:	e0a2      	b.n	8006776 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1a3      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x18e>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2246      	movs	r2, #70	; 0x46
 800663e:	5a9b      	ldrh	r3, [r3, r2]
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d19d      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x18e>
 8006646:	e085      	b.n	8006754 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <HAL_SPI_TransmitReceive+0x268>
 8006650:	2312      	movs	r3, #18
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d000      	beq.n	800665c <HAL_SPI_TransmitReceive+0x268>
 800665a:	e070      	b.n	800673e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	330c      	adds	r3, #12
 8006666:	7812      	ldrb	r2, [r2, #0]
 8006668:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b01      	subs	r3, #1
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006682:	e05c      	b.n	800673e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2202      	movs	r2, #2
 800668c:	4013      	ands	r3, r2
 800668e:	2b02      	cmp	r3, #2
 8006690:	d11c      	bne.n	80066cc <HAL_SPI_TransmitReceive+0x2d8>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006696:	b29b      	uxth	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d017      	beq.n	80066cc <HAL_SPI_TransmitReceive+0x2d8>
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d114      	bne.n	80066cc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	330c      	adds	r3, #12
 80066ac:	7812      	ldrb	r2, [r2, #0]
 80066ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2201      	movs	r2, #1
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d11e      	bne.n	8006718 <HAL_SPI_TransmitReceive+0x324>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2246      	movs	r2, #70	; 0x46
 80066de:	5a9b      	ldrh	r3, [r3, r2]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d018      	beq.n	8006718 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	330c      	adds	r3, #12
 80066ec:	001a      	movs	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2246      	movs	r2, #70	; 0x46
 8006706:	5a9b      	ldrh	r3, [r3, r2]
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b299      	uxth	r1, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2246      	movs	r2, #70	; 0x46
 8006712:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006714:	2301      	movs	r3, #1
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006718:	f7fb ff56 	bl	80025c8 <HAL_GetTick>
 800671c:	0002      	movs	r2, r0
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006724:	429a      	cmp	r2, r3
 8006726:	d802      	bhi.n	800672e <HAL_SPI_TransmitReceive+0x33a>
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	3301      	adds	r3, #1
 800672c:	d102      	bne.n	8006734 <HAL_SPI_TransmitReceive+0x340>
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006734:	2323      	movs	r3, #35	; 0x23
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	2203      	movs	r2, #3
 800673a:	701a      	strb	r2, [r3, #0]
        goto error;
 800673c:	e01b      	b.n	8006776 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d19d      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x290>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2246      	movs	r2, #70	; 0x46
 800674c:	5a9b      	ldrh	r3, [r3, r2]
 800674e:	b29b      	uxth	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d197      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	0018      	movs	r0, r3
 800675c:	f000 f94c 	bl	80069f8 <SPI_EndRxTxTransaction>
 8006760:	1e03      	subs	r3, r0, #0
 8006762:	d007      	beq.n	8006774 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006764:	2323      	movs	r3, #35	; 0x23
 8006766:	18fb      	adds	r3, r7, r3
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2220      	movs	r2, #32
 8006770:	661a      	str	r2, [r3, #96]	; 0x60
 8006772:	e000      	b.n	8006776 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006774:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	225d      	movs	r2, #93	; 0x5d
 800677a:	2101      	movs	r1, #1
 800677c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	225c      	movs	r2, #92	; 0x5c
 8006782:	2100      	movs	r1, #0
 8006784:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006786:	2323      	movs	r3, #35	; 0x23
 8006788:	18fb      	adds	r3, r7, r3
 800678a:	781b      	ldrb	r3, [r3, #0]
}
 800678c:	0018      	movs	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	b00a      	add	sp, #40	; 0x28
 8006792:	bd80      	pop	{r7, pc}
 8006794:	ffffefff 	.word	0xffffefff

08006798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	1dfb      	adds	r3, r7, #7
 80067a6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067a8:	f7fb ff0e 	bl	80025c8 <HAL_GetTick>
 80067ac:	0002      	movs	r2, r0
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	18d3      	adds	r3, r2, r3
 80067b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067b8:	f7fb ff06 	bl	80025c8 <HAL_GetTick>
 80067bc:	0003      	movs	r3, r0
 80067be:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067c0:	4b3a      	ldr	r3, [pc, #232]	; (80068ac <SPI_WaitFlagStateUntilTimeout+0x114>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	015b      	lsls	r3, r3, #5
 80067c6:	0d1b      	lsrs	r3, r3, #20
 80067c8:	69fa      	ldr	r2, [r7, #28]
 80067ca:	4353      	muls	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ce:	e058      	b.n	8006882 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	d055      	beq.n	8006882 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067d6:	f7fb fef7 	bl	80025c8 <HAL_GetTick>
 80067da:	0002      	movs	r2, r0
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	69fa      	ldr	r2, [r7, #28]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d902      	bls.n	80067ec <SPI_WaitFlagStateUntilTimeout+0x54>
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d142      	bne.n	8006872 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	21e0      	movs	r1, #224	; 0xe0
 80067f8:	438a      	bics	r2, r1
 80067fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	2382      	movs	r3, #130	; 0x82
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	429a      	cmp	r2, r3
 8006806:	d113      	bne.n	8006830 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	2380      	movs	r3, #128	; 0x80
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	429a      	cmp	r2, r3
 8006812:	d005      	beq.n	8006820 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	2380      	movs	r3, #128	; 0x80
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	429a      	cmp	r2, r3
 800681e:	d107      	bne.n	8006830 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2140      	movs	r1, #64	; 0x40
 800682c:	438a      	bics	r2, r1
 800682e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006834:	2380      	movs	r3, #128	; 0x80
 8006836:	019b      	lsls	r3, r3, #6
 8006838:	429a      	cmp	r2, r3
 800683a:	d110      	bne.n	800685e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	491a      	ldr	r1, [pc, #104]	; (80068b0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006848:	400a      	ands	r2, r1
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2180      	movs	r1, #128	; 0x80
 8006858:	0189      	lsls	r1, r1, #6
 800685a:	430a      	orrs	r2, r1
 800685c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	225d      	movs	r2, #93	; 0x5d
 8006862:	2101      	movs	r1, #1
 8006864:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	225c      	movs	r2, #92	; 0x5c
 800686a:	2100      	movs	r1, #0
 800686c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e017      	b.n	80068a2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	3b01      	subs	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	4013      	ands	r3, r2
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	425a      	negs	r2, r3
 8006892:	4153      	adcs	r3, r2
 8006894:	b2db      	uxtb	r3, r3
 8006896:	001a      	movs	r2, r3
 8006898:	1dfb      	adds	r3, r7, #7
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d197      	bne.n	80067d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	0018      	movs	r0, r3
 80068a4:	46bd      	mov	sp, r7
 80068a6:	b008      	add	sp, #32
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	20000000 	.word	0x20000000
 80068b0:	ffffdfff 	.word	0xffffdfff

080068b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	; 0x28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068c2:	2317      	movs	r3, #23
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80068ca:	f7fb fe7d 	bl	80025c8 <HAL_GetTick>
 80068ce:	0002      	movs	r2, r0
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	1a9b      	subs	r3, r3, r2
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	18d3      	adds	r3, r2, r3
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80068da:	f7fb fe75 	bl	80025c8 <HAL_GetTick>
 80068de:	0003      	movs	r3, r0
 80068e0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	330c      	adds	r3, #12
 80068e8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068ea:	4b41      	ldr	r3, [pc, #260]	; (80069f0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	0013      	movs	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	189b      	adds	r3, r3, r2
 80068f4:	00da      	lsls	r2, r3, #3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	0d1b      	lsrs	r3, r3, #20
 80068fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fc:	4353      	muls	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006900:	e068      	b.n	80069d4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	23c0      	movs	r3, #192	; 0xc0
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	429a      	cmp	r2, r3
 800690a:	d10a      	bne.n	8006922 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d107      	bne.n	8006922 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	b2da      	uxtb	r2, r3
 8006918:	2117      	movs	r1, #23
 800691a:	187b      	adds	r3, r7, r1
 800691c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800691e:	187b      	adds	r3, r7, r1
 8006920:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	d055      	beq.n	80069d4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006928:	f7fb fe4e 	bl	80025c8 <HAL_GetTick>
 800692c:	0002      	movs	r2, r0
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006934:	429a      	cmp	r2, r3
 8006936:	d902      	bls.n	800693e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	2b00      	cmp	r3, #0
 800693c:	d142      	bne.n	80069c4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	21e0      	movs	r1, #224	; 0xe0
 800694a:	438a      	bics	r2, r1
 800694c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	2382      	movs	r3, #130	; 0x82
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	429a      	cmp	r2, r3
 8006958:	d113      	bne.n	8006982 <SPI_WaitFifoStateUntilTimeout+0xce>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	2380      	movs	r3, #128	; 0x80
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	429a      	cmp	r2, r3
 8006964:	d005      	beq.n	8006972 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	2380      	movs	r3, #128	; 0x80
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	429a      	cmp	r2, r3
 8006970:	d107      	bne.n	8006982 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2140      	movs	r1, #64	; 0x40
 800697e:	438a      	bics	r2, r1
 8006980:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006986:	2380      	movs	r3, #128	; 0x80
 8006988:	019b      	lsls	r3, r3, #6
 800698a:	429a      	cmp	r2, r3
 800698c:	d110      	bne.n	80069b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4916      	ldr	r1, [pc, #88]	; (80069f4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800699a:	400a      	ands	r2, r1
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2180      	movs	r1, #128	; 0x80
 80069aa:	0189      	lsls	r1, r1, #6
 80069ac:	430a      	orrs	r2, r1
 80069ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	225d      	movs	r2, #93	; 0x5d
 80069b4:	2101      	movs	r1, #1
 80069b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	225c      	movs	r2, #92	; 0x5c
 80069bc:	2100      	movs	r1, #0
 80069be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e010      	b.n	80069e6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	4013      	ands	r3, r2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d18e      	bne.n	8006902 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	0018      	movs	r0, r3
 80069e8:	46bd      	mov	sp, r7
 80069ea:	b00a      	add	sp, #40	; 0x28
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	46c0      	nop			; (mov r8, r8)
 80069f0:	20000000 	.word	0x20000000
 80069f4:	ffffdfff 	.word	0xffffdfff

080069f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	23c0      	movs	r3, #192	; 0xc0
 8006a08:	0159      	lsls	r1, r3, #5
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	0013      	movs	r3, r2
 8006a12:	2200      	movs	r2, #0
 8006a14:	f7ff ff4e 	bl	80068b4 <SPI_WaitFifoStateUntilTimeout>
 8006a18:	1e03      	subs	r3, r0, #0
 8006a1a:	d007      	beq.n	8006a2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a20:	2220      	movs	r2, #32
 8006a22:	431a      	orrs	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e027      	b.n	8006a7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	0013      	movs	r3, r2
 8006a36:	2200      	movs	r2, #0
 8006a38:	2180      	movs	r1, #128	; 0x80
 8006a3a:	f7ff fead 	bl	8006798 <SPI_WaitFlagStateUntilTimeout>
 8006a3e:	1e03      	subs	r3, r0, #0
 8006a40:	d007      	beq.n	8006a52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a46:	2220      	movs	r2, #32
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e014      	b.n	8006a7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	23c0      	movs	r3, #192	; 0xc0
 8006a56:	00d9      	lsls	r1, r3, #3
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	0013      	movs	r3, r2
 8006a60:	2200      	movs	r2, #0
 8006a62:	f7ff ff27 	bl	80068b4 <SPI_WaitFifoStateUntilTimeout>
 8006a66:	1e03      	subs	r3, r0, #0
 8006a68:	d007      	beq.n	8006a7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a6e:	2220      	movs	r2, #32
 8006a70:	431a      	orrs	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e000      	b.n	8006a7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	b004      	add	sp, #16
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e042      	b.n	8006b1c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	223d      	movs	r2, #61	; 0x3d
 8006a9a:	5c9b      	ldrb	r3, [r3, r2]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d107      	bne.n	8006ab2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	223c      	movs	r2, #60	; 0x3c
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7fb f987 	bl	8001dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	223d      	movs	r2, #61	; 0x3d
 8006ab6:	2102      	movs	r1, #2
 8006ab8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	0019      	movs	r1, r3
 8006ac4:	0010      	movs	r0, r2
 8006ac6:	f000 fa65 	bl	8006f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2246      	movs	r2, #70	; 0x46
 8006ace:	2101      	movs	r1, #1
 8006ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	223e      	movs	r2, #62	; 0x3e
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	5499      	strb	r1, [r3, r2]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	223f      	movs	r2, #63	; 0x3f
 8006ade:	2101      	movs	r1, #1
 8006ae0:	5499      	strb	r1, [r3, r2]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2240      	movs	r2, #64	; 0x40
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	5499      	strb	r1, [r3, r2]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2241      	movs	r2, #65	; 0x41
 8006aee:	2101      	movs	r1, #1
 8006af0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2242      	movs	r2, #66	; 0x42
 8006af6:	2101      	movs	r1, #1
 8006af8:	5499      	strb	r1, [r3, r2]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2243      	movs	r2, #67	; 0x43
 8006afe:	2101      	movs	r1, #1
 8006b00:	5499      	strb	r1, [r3, r2]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2244      	movs	r2, #68	; 0x44
 8006b06:	2101      	movs	r1, #1
 8006b08:	5499      	strb	r1, [r3, r2]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2245      	movs	r2, #69	; 0x45
 8006b0e:	2101      	movs	r1, #1
 8006b10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	223d      	movs	r2, #61	; 0x3d
 8006b16:	2101      	movs	r1, #1
 8006b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	b002      	add	sp, #8
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	223d      	movs	r2, #61	; 0x3d
 8006b30:	5c9b      	ldrb	r3, [r3, r2]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d001      	beq.n	8006b3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e03b      	b.n	8006bb4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	223d      	movs	r2, #61	; 0x3d
 8006b40:	2102      	movs	r1, #2
 8006b42:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2101      	movs	r1, #1
 8006b50:	430a      	orrs	r2, r1
 8006b52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <HAL_TIM_Base_Start_IT+0x98>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00f      	beq.n	8006b7e <HAL_TIM_Base_Start_IT+0x5a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	2380      	movs	r3, #128	; 0x80
 8006b64:	05db      	lsls	r3, r3, #23
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d009      	beq.n	8006b7e <HAL_TIM_Base_Start_IT+0x5a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a14      	ldr	r2, [pc, #80]	; (8006bc0 <HAL_TIM_Base_Start_IT+0x9c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d004      	beq.n	8006b7e <HAL_TIM_Base_Start_IT+0x5a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d111      	bne.n	8006ba2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	2207      	movs	r2, #7
 8006b86:	4013      	ands	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b06      	cmp	r3, #6
 8006b8e:	d010      	beq.n	8006bb2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba0:	e007      	b.n	8006bb2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2101      	movs	r1, #1
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b004      	add	sp, #16
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40012c00 	.word	0x40012c00
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40014000 	.word	0x40014000

08006bc8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e042      	b.n	8006c60 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	223d      	movs	r2, #61	; 0x3d
 8006bde:	5c9b      	ldrb	r3, [r3, r2]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d107      	bne.n	8006bf6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	223c      	movs	r2, #60	; 0x3c
 8006bea:	2100      	movs	r1, #0
 8006bec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f000 f839 	bl	8006c68 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	223d      	movs	r2, #61	; 0x3d
 8006bfa:	2102      	movs	r1, #2
 8006bfc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3304      	adds	r3, #4
 8006c06:	0019      	movs	r1, r3
 8006c08:	0010      	movs	r0, r2
 8006c0a:	f000 f9c3 	bl	8006f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2246      	movs	r2, #70	; 0x46
 8006c12:	2101      	movs	r1, #1
 8006c14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	223e      	movs	r2, #62	; 0x3e
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	5499      	strb	r1, [r3, r2]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	223f      	movs	r2, #63	; 0x3f
 8006c22:	2101      	movs	r1, #1
 8006c24:	5499      	strb	r1, [r3, r2]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2240      	movs	r2, #64	; 0x40
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	5499      	strb	r1, [r3, r2]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2241      	movs	r2, #65	; 0x41
 8006c32:	2101      	movs	r1, #1
 8006c34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2242      	movs	r2, #66	; 0x42
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	5499      	strb	r1, [r3, r2]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2243      	movs	r2, #67	; 0x43
 8006c42:	2101      	movs	r1, #1
 8006c44:	5499      	strb	r1, [r3, r2]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2244      	movs	r2, #68	; 0x44
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	5499      	strb	r1, [r3, r2]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2245      	movs	r2, #69	; 0x45
 8006c52:	2101      	movs	r1, #1
 8006c54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	223d      	movs	r2, #61	; 0x3d
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	0018      	movs	r0, r3
 8006c62:	46bd      	mov	sp, r7
 8006c64:	b002      	add	sp, #8
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006c70:	46c0      	nop			; (mov r8, r8)
 8006c72:	46bd      	mov	sp, r7
 8006c74:	b002      	add	sp, #8
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2202      	movs	r2, #2
 8006c88:	4013      	ands	r3, r2
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d124      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2202      	movs	r2, #2
 8006c96:	4013      	ands	r3, r2
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d11d      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	4252      	negs	r2, r2
 8006ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d004      	beq.n	8006cc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f000 f952 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006cc0:	e007      	b.n	8006cd2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f000 f945 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f000 f951 	bl	8006f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	2204      	movs	r2, #4
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d125      	bne.n	8006d32 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2204      	movs	r2, #4
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d11e      	bne.n	8006d32 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2205      	movs	r2, #5
 8006cfa:	4252      	negs	r2, r2
 8006cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	23c0      	movs	r3, #192	; 0xc0
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4013      	ands	r3, r2
 8006d10:	d004      	beq.n	8006d1c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	0018      	movs	r0, r3
 8006d16:	f000 f925 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006d1a:	e007      	b.n	8006d2c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f000 f918 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	0018      	movs	r0, r3
 8006d28:	f000 f924 	bl	8006f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2208      	movs	r2, #8
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d124      	bne.n	8006d8a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	2208      	movs	r2, #8
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d11d      	bne.n	8006d8a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2209      	movs	r2, #9
 8006d54:	4252      	negs	r2, r2
 8006d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	2203      	movs	r2, #3
 8006d66:	4013      	ands	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f000 f8f9 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006d72:	e007      	b.n	8006d84 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	0018      	movs	r0, r3
 8006d78:	f000 f8ec 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f000 f8f8 	bl	8006f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	2210      	movs	r2, #16
 8006d92:	4013      	ands	r3, r2
 8006d94:	2b10      	cmp	r3, #16
 8006d96:	d125      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	2210      	movs	r2, #16
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d11e      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2211      	movs	r2, #17
 8006dac:	4252      	negs	r2, r2
 8006dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2208      	movs	r2, #8
 8006db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	23c0      	movs	r3, #192	; 0xc0
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	d004      	beq.n	8006dce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f000 f8cc 	bl	8006f64 <HAL_TIM_IC_CaptureCallback>
 8006dcc:	e007      	b.n	8006dde <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f000 f8bf 	bl	8006f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f000 f8cb 	bl	8006f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2201      	movs	r2, #1
 8006dec:	4013      	ands	r3, r2
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d10f      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d108      	bne.n	8006e12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2202      	movs	r2, #2
 8006e06:	4252      	negs	r2, r2
 8006e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7f9 fe4f 	bl	8000ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	2280      	movs	r2, #128	; 0x80
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b80      	cmp	r3, #128	; 0x80
 8006e1e:	d10f      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	2280      	movs	r2, #128	; 0x80
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2b80      	cmp	r3, #128	; 0x80
 8006e2c:	d108      	bne.n	8006e40 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2281      	movs	r2, #129	; 0x81
 8006e34:	4252      	negs	r2, r2
 8006e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f000 fb2e 	bl	800749c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	2240      	movs	r2, #64	; 0x40
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b40      	cmp	r3, #64	; 0x40
 8006e4c:	d10f      	bne.n	8006e6e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	2240      	movs	r2, #64	; 0x40
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b40      	cmp	r3, #64	; 0x40
 8006e5a:	d108      	bne.n	8006e6e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2241      	movs	r2, #65	; 0x41
 8006e62:	4252      	negs	r2, r2
 8006e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f000 f88b 	bl	8006f84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2220      	movs	r2, #32
 8006e76:	4013      	ands	r3, r2
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d10f      	bne.n	8006e9c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	2220      	movs	r2, #32
 8006e84:	4013      	ands	r3, r2
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d108      	bne.n	8006e9c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2221      	movs	r2, #33	; 0x21
 8006e90:	4252      	negs	r2, r2
 8006e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	0018      	movs	r0, r3
 8006e98:	f000 faf8 	bl	800748c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e9c:	46c0      	nop			; (mov r8, r8)
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b002      	add	sp, #8
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb0:	2317      	movs	r3, #23
 8006eb2:	18fb      	adds	r3, r7, r3
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	223c      	movs	r2, #60	; 0x3c
 8006ebc:	5c9b      	ldrb	r3, [r3, r2]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_TIM_OC_ConfigChannel+0x22>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e042      	b.n	8006f4c <HAL_TIM_OC_ConfigChannel+0xa8>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	223c      	movs	r2, #60	; 0x3c
 8006eca:	2101      	movs	r1, #1
 8006ecc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b0c      	cmp	r3, #12
 8006ed2:	d027      	beq.n	8006f24 <HAL_TIM_OC_ConfigChannel+0x80>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b0c      	cmp	r3, #12
 8006ed8:	d82c      	bhi.n	8006f34 <HAL_TIM_OC_ConfigChannel+0x90>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d019      	beq.n	8006f14 <HAL_TIM_OC_ConfigChannel+0x70>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d826      	bhi.n	8006f34 <HAL_TIM_OC_ConfigChannel+0x90>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <HAL_TIM_OC_ConfigChannel+0x50>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d008      	beq.n	8006f04 <HAL_TIM_OC_ConfigChannel+0x60>
 8006ef2:	e01f      	b.n	8006f34 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	0011      	movs	r1, r2
 8006efc:	0018      	movs	r0, r3
 8006efe:	f000 f8c9 	bl	8007094 <TIM_OC1_SetConfig>
      break;
 8006f02:	e01c      	b.n	8006f3e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	0011      	movs	r1, r2
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	f000 f949 	bl	80071a4 <TIM_OC2_SetConfig>
      break;
 8006f12:	e014      	b.n	8006f3e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	0011      	movs	r1, r2
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f000 f9c5 	bl	80072ac <TIM_OC3_SetConfig>
      break;
 8006f22:	e00c      	b.n	8006f3e <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	0011      	movs	r1, r2
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	f000 fa43 	bl	80073b8 <TIM_OC4_SetConfig>
      break;
 8006f32:	e004      	b.n	8006f3e <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006f34:	2317      	movs	r3, #23
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	2201      	movs	r2, #1
 8006f3a:	701a      	strb	r2, [r3, #0]
      break;
 8006f3c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	223c      	movs	r2, #60	; 0x3c
 8006f42:	2100      	movs	r1, #0
 8006f44:	5499      	strb	r1, [r3, r2]

  return status;
 8006f46:	2317      	movs	r3, #23
 8006f48:	18fb      	adds	r3, r7, r3
 8006f4a:	781b      	ldrb	r3, [r3, #0]
}
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b006      	add	sp, #24
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f5c:	46c0      	nop			; (mov r8, r8)
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	b002      	add	sp, #8
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f6c:	46c0      	nop			; (mov r8, r8)
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b002      	add	sp, #8
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	b002      	add	sp, #8
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f8c:	46c0      	nop			; (mov r8, r8)
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b002      	add	sp, #8
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a34      	ldr	r2, [pc, #208]	; (8007078 <TIM_Base_SetConfig+0xe4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d008      	beq.n	8006fbe <TIM_Base_SetConfig+0x2a>
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	2380      	movs	r3, #128	; 0x80
 8006fb0:	05db      	lsls	r3, r3, #23
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d003      	beq.n	8006fbe <TIM_Base_SetConfig+0x2a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a30      	ldr	r2, [pc, #192]	; (800707c <TIM_Base_SetConfig+0xe8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d108      	bne.n	8006fd0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2270      	movs	r2, #112	; 0x70
 8006fc2:	4393      	bics	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a29      	ldr	r2, [pc, #164]	; (8007078 <TIM_Base_SetConfig+0xe4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d018      	beq.n	800700a <TIM_Base_SetConfig+0x76>
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	2380      	movs	r3, #128	; 0x80
 8006fdc:	05db      	lsls	r3, r3, #23
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d013      	beq.n	800700a <TIM_Base_SetConfig+0x76>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a25      	ldr	r2, [pc, #148]	; (800707c <TIM_Base_SetConfig+0xe8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00f      	beq.n	800700a <TIM_Base_SetConfig+0x76>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a24      	ldr	r2, [pc, #144]	; (8007080 <TIM_Base_SetConfig+0xec>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00b      	beq.n	800700a <TIM_Base_SetConfig+0x76>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a23      	ldr	r2, [pc, #140]	; (8007084 <TIM_Base_SetConfig+0xf0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d007      	beq.n	800700a <TIM_Base_SetConfig+0x76>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a22      	ldr	r2, [pc, #136]	; (8007088 <TIM_Base_SetConfig+0xf4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d003      	beq.n	800700a <TIM_Base_SetConfig+0x76>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a21      	ldr	r2, [pc, #132]	; (800708c <TIM_Base_SetConfig+0xf8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d108      	bne.n	800701c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4a20      	ldr	r2, [pc, #128]	; (8007090 <TIM_Base_SetConfig+0xfc>)
 800700e:	4013      	ands	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	4393      	bics	r3, r2
 8007022:	001a      	movs	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a0c      	ldr	r2, [pc, #48]	; (8007078 <TIM_Base_SetConfig+0xe4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00b      	beq.n	8007062 <TIM_Base_SetConfig+0xce>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a0d      	ldr	r2, [pc, #52]	; (8007084 <TIM_Base_SetConfig+0xf0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d007      	beq.n	8007062 <TIM_Base_SetConfig+0xce>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a0c      	ldr	r2, [pc, #48]	; (8007088 <TIM_Base_SetConfig+0xf4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_Base_SetConfig+0xce>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a0b      	ldr	r2, [pc, #44]	; (800708c <TIM_Base_SetConfig+0xf8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d103      	bne.n	800706a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	615a      	str	r2, [r3, #20]
}
 8007070:	46c0      	nop			; (mov r8, r8)
 8007072:	46bd      	mov	sp, r7
 8007074:	b004      	add	sp, #16
 8007076:	bd80      	pop	{r7, pc}
 8007078:	40012c00 	.word	0x40012c00
 800707c:	40000400 	.word	0x40000400
 8007080:	40002000 	.word	0x40002000
 8007084:	40014000 	.word	0x40014000
 8007088:	40014400 	.word	0x40014400
 800708c:	40014800 	.word	0x40014800
 8007090:	fffffcff 	.word	0xfffffcff

08007094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	2201      	movs	r2, #1
 80070a4:	4393      	bics	r3, r2
 80070a6:	001a      	movs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2270      	movs	r2, #112	; 0x70
 80070c2:	4393      	bics	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2203      	movs	r2, #3
 80070ca:	4393      	bics	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2202      	movs	r2, #2
 80070dc:	4393      	bics	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a27      	ldr	r2, [pc, #156]	; (800718c <TIM_OC1_SetConfig+0xf8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00b      	beq.n	800710a <TIM_OC1_SetConfig+0x76>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a26      	ldr	r2, [pc, #152]	; (8007190 <TIM_OC1_SetConfig+0xfc>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d007      	beq.n	800710a <TIM_OC1_SetConfig+0x76>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a25      	ldr	r2, [pc, #148]	; (8007194 <TIM_OC1_SetConfig+0x100>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d003      	beq.n	800710a <TIM_OC1_SetConfig+0x76>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a24      	ldr	r2, [pc, #144]	; (8007198 <TIM_OC1_SetConfig+0x104>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d10c      	bne.n	8007124 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2208      	movs	r2, #8
 800710e:	4393      	bics	r3, r2
 8007110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2204      	movs	r2, #4
 8007120:	4393      	bics	r3, r2
 8007122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a19      	ldr	r2, [pc, #100]	; (800718c <TIM_OC1_SetConfig+0xf8>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00b      	beq.n	8007144 <TIM_OC1_SetConfig+0xb0>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a18      	ldr	r2, [pc, #96]	; (8007190 <TIM_OC1_SetConfig+0xfc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d007      	beq.n	8007144 <TIM_OC1_SetConfig+0xb0>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a17      	ldr	r2, [pc, #92]	; (8007194 <TIM_OC1_SetConfig+0x100>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_OC1_SetConfig+0xb0>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a16      	ldr	r2, [pc, #88]	; (8007198 <TIM_OC1_SetConfig+0x104>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d111      	bne.n	8007168 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	4a15      	ldr	r2, [pc, #84]	; (800719c <TIM_OC1_SetConfig+0x108>)
 8007148:	4013      	ands	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	4a14      	ldr	r2, [pc, #80]	; (80071a0 <TIM_OC1_SetConfig+0x10c>)
 8007150:	4013      	ands	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4313      	orrs	r3, r2
 8007166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	46bd      	mov	sp, r7
 8007186:	b006      	add	sp, #24
 8007188:	bd80      	pop	{r7, pc}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	40012c00 	.word	0x40012c00
 8007190:	40014000 	.word	0x40014000
 8007194:	40014400 	.word	0x40014400
 8007198:	40014800 	.word	0x40014800
 800719c:	fffffeff 	.word	0xfffffeff
 80071a0:	fffffdff 	.word	0xfffffdff

080071a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	2210      	movs	r2, #16
 80071b4:	4393      	bics	r3, r2
 80071b6:	001a      	movs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4a2e      	ldr	r2, [pc, #184]	; (800728c <TIM_OC2_SetConfig+0xe8>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4a2d      	ldr	r2, [pc, #180]	; (8007290 <TIM_OC2_SetConfig+0xec>)
 80071da:	4013      	ands	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	021b      	lsls	r3, r3, #8
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2220      	movs	r2, #32
 80071ee:	4393      	bics	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a24      	ldr	r2, [pc, #144]	; (8007294 <TIM_OC2_SetConfig+0xf0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d10d      	bne.n	8007222 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2280      	movs	r2, #128	; 0x80
 800720a:	4393      	bics	r3, r2
 800720c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2240      	movs	r2, #64	; 0x40
 800721e:	4393      	bics	r3, r2
 8007220:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a1b      	ldr	r2, [pc, #108]	; (8007294 <TIM_OC2_SetConfig+0xf0>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00b      	beq.n	8007242 <TIM_OC2_SetConfig+0x9e>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a1a      	ldr	r2, [pc, #104]	; (8007298 <TIM_OC2_SetConfig+0xf4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d007      	beq.n	8007242 <TIM_OC2_SetConfig+0x9e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a19      	ldr	r2, [pc, #100]	; (800729c <TIM_OC2_SetConfig+0xf8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d003      	beq.n	8007242 <TIM_OC2_SetConfig+0x9e>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a18      	ldr	r2, [pc, #96]	; (80072a0 <TIM_OC2_SetConfig+0xfc>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d113      	bne.n	800726a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	4a17      	ldr	r2, [pc, #92]	; (80072a4 <TIM_OC2_SetConfig+0x100>)
 8007246:	4013      	ands	r3, r2
 8007248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	4a16      	ldr	r2, [pc, #88]	; (80072a8 <TIM_OC2_SetConfig+0x104>)
 800724e:	4013      	ands	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4313      	orrs	r3, r2
 8007268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	621a      	str	r2, [r3, #32]
}
 8007284:	46c0      	nop			; (mov r8, r8)
 8007286:	46bd      	mov	sp, r7
 8007288:	b006      	add	sp, #24
 800728a:	bd80      	pop	{r7, pc}
 800728c:	ffff8fff 	.word	0xffff8fff
 8007290:	fffffcff 	.word	0xfffffcff
 8007294:	40012c00 	.word	0x40012c00
 8007298:	40014000 	.word	0x40014000
 800729c:	40014400 	.word	0x40014400
 80072a0:	40014800 	.word	0x40014800
 80072a4:	fffffbff 	.word	0xfffffbff
 80072a8:	fffff7ff 	.word	0xfffff7ff

080072ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	4a35      	ldr	r2, [pc, #212]	; (8007390 <TIM_OC3_SetConfig+0xe4>)
 80072bc:	401a      	ands	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2270      	movs	r2, #112	; 0x70
 80072d8:	4393      	bics	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2203      	movs	r2, #3
 80072e0:	4393      	bics	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	4a28      	ldr	r2, [pc, #160]	; (8007394 <TIM_OC3_SetConfig+0xe8>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	021b      	lsls	r3, r3, #8
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a24      	ldr	r2, [pc, #144]	; (8007398 <TIM_OC3_SetConfig+0xec>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d10d      	bne.n	8007326 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	4a23      	ldr	r2, [pc, #140]	; (800739c <TIM_OC3_SetConfig+0xf0>)
 800730e:	4013      	ands	r3, r2
 8007310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	4a1f      	ldr	r2, [pc, #124]	; (80073a0 <TIM_OC3_SetConfig+0xf4>)
 8007322:	4013      	ands	r3, r2
 8007324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a1b      	ldr	r2, [pc, #108]	; (8007398 <TIM_OC3_SetConfig+0xec>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d00b      	beq.n	8007346 <TIM_OC3_SetConfig+0x9a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a1c      	ldr	r2, [pc, #112]	; (80073a4 <TIM_OC3_SetConfig+0xf8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d007      	beq.n	8007346 <TIM_OC3_SetConfig+0x9a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a1b      	ldr	r2, [pc, #108]	; (80073a8 <TIM_OC3_SetConfig+0xfc>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d003      	beq.n	8007346 <TIM_OC3_SetConfig+0x9a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a1a      	ldr	r2, [pc, #104]	; (80073ac <TIM_OC3_SetConfig+0x100>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d113      	bne.n	800736e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4a19      	ldr	r2, [pc, #100]	; (80073b0 <TIM_OC3_SetConfig+0x104>)
 800734a:	4013      	ands	r3, r2
 800734c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <TIM_OC3_SetConfig+0x108>)
 8007352:	4013      	ands	r3, r2
 8007354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	621a      	str	r2, [r3, #32]
}
 8007388:	46c0      	nop			; (mov r8, r8)
 800738a:	46bd      	mov	sp, r7
 800738c:	b006      	add	sp, #24
 800738e:	bd80      	pop	{r7, pc}
 8007390:	fffffeff 	.word	0xfffffeff
 8007394:	fffffdff 	.word	0xfffffdff
 8007398:	40012c00 	.word	0x40012c00
 800739c:	fffff7ff 	.word	0xfffff7ff
 80073a0:	fffffbff 	.word	0xfffffbff
 80073a4:	40014000 	.word	0x40014000
 80073a8:	40014400 	.word	0x40014400
 80073ac:	40014800 	.word	0x40014800
 80073b0:	ffffefff 	.word	0xffffefff
 80073b4:	ffffdfff 	.word	0xffffdfff

080073b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	4a28      	ldr	r2, [pc, #160]	; (8007468 <TIM_OC4_SetConfig+0xb0>)
 80073c8:	401a      	ands	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4a22      	ldr	r2, [pc, #136]	; (800746c <TIM_OC4_SetConfig+0xb4>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a21      	ldr	r2, [pc, #132]	; (8007470 <TIM_OC4_SetConfig+0xb8>)
 80073ec:	4013      	ands	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	021b      	lsls	r3, r3, #8
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	4a1d      	ldr	r2, [pc, #116]	; (8007474 <TIM_OC4_SetConfig+0xbc>)
 8007400:	4013      	ands	r3, r2
 8007402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	031b      	lsls	r3, r3, #12
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	4313      	orrs	r3, r2
 800740e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a19      	ldr	r2, [pc, #100]	; (8007478 <TIM_OC4_SetConfig+0xc0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00b      	beq.n	8007430 <TIM_OC4_SetConfig+0x78>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a18      	ldr	r2, [pc, #96]	; (800747c <TIM_OC4_SetConfig+0xc4>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d007      	beq.n	8007430 <TIM_OC4_SetConfig+0x78>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a17      	ldr	r2, [pc, #92]	; (8007480 <TIM_OC4_SetConfig+0xc8>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d003      	beq.n	8007430 <TIM_OC4_SetConfig+0x78>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a16      	ldr	r2, [pc, #88]	; (8007484 <TIM_OC4_SetConfig+0xcc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d109      	bne.n	8007444 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	4a15      	ldr	r2, [pc, #84]	; (8007488 <TIM_OC4_SetConfig+0xd0>)
 8007434:	4013      	ands	r3, r2
 8007436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	019b      	lsls	r3, r3, #6
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4313      	orrs	r3, r2
 8007442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	621a      	str	r2, [r3, #32]
}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	46bd      	mov	sp, r7
 8007462:	b006      	add	sp, #24
 8007464:	bd80      	pop	{r7, pc}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	ffffefff 	.word	0xffffefff
 800746c:	ffff8fff 	.word	0xffff8fff
 8007470:	fffffcff 	.word	0xfffffcff
 8007474:	ffffdfff 	.word	0xffffdfff
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40014000 	.word	0x40014000
 8007480:	40014400 	.word	0x40014400
 8007484:	40014800 	.word	0x40014800
 8007488:	ffffbfff 	.word	0xffffbfff

0800748c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007494:	46c0      	nop			; (mov r8, r8)
 8007496:	46bd      	mov	sp, r7
 8007498:	b002      	add	sp, #8
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074a4:	46c0      	nop			; (mov r8, r8)
 80074a6:	46bd      	mov	sp, r7
 80074a8:	b002      	add	sp, #8
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e044      	b.n	8007548 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d107      	bne.n	80074d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2274      	movs	r2, #116	; 0x74
 80074ca:	2100      	movs	r1, #0
 80074cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	0018      	movs	r0, r3
 80074d2:	f7fa fc9d 	bl	8001e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2224      	movs	r2, #36	; 0x24
 80074da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2101      	movs	r1, #1
 80074e8:	438a      	bics	r2, r1
 80074ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	0018      	movs	r0, r3
 80074f0:	f000 fb24 	bl	8007b3c <UART_SetConfig>
 80074f4:	0003      	movs	r3, r0
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d101      	bne.n	80074fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e024      	b.n	8007548 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	0018      	movs	r0, r3
 800750a:	f000 fc9f 	bl	8007e4c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	490d      	ldr	r1, [pc, #52]	; (8007550 <HAL_UART_Init+0xa4>)
 800751a:	400a      	ands	r2, r1
 800751c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	212a      	movs	r1, #42	; 0x2a
 800752a:	438a      	bics	r2, r1
 800752c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2101      	movs	r1, #1
 800753a:	430a      	orrs	r2, r1
 800753c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	0018      	movs	r0, r3
 8007542:	f000 fd37 	bl	8007fb4 <UART_CheckIdleState>
 8007546:	0003      	movs	r3, r0
}
 8007548:	0018      	movs	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	b002      	add	sp, #8
 800754e:	bd80      	pop	{r7, pc}
 8007550:	ffffb7ff 	.word	0xffffb7ff

08007554 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007554:	b590      	push	{r4, r7, lr}
 8007556:	b0ab      	sub	sp, #172	; 0xac
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	22a4      	movs	r2, #164	; 0xa4
 8007564:	18b9      	adds	r1, r7, r2
 8007566:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	20a0      	movs	r0, #160	; 0xa0
 8007570:	1839      	adds	r1, r7, r0
 8007572:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	219c      	movs	r1, #156	; 0x9c
 800757c:	1879      	adds	r1, r7, r1
 800757e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007580:	0011      	movs	r1, r2
 8007582:	18bb      	adds	r3, r7, r2
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a99      	ldr	r2, [pc, #612]	; (80077ec <HAL_UART_IRQHandler+0x298>)
 8007588:	4013      	ands	r3, r2
 800758a:	2298      	movs	r2, #152	; 0x98
 800758c:	18bc      	adds	r4, r7, r2
 800758e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007590:	18bb      	adds	r3, r7, r2
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d114      	bne.n	80075c2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007598:	187b      	adds	r3, r7, r1
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2220      	movs	r2, #32
 800759e:	4013      	ands	r3, r2
 80075a0:	d00f      	beq.n	80075c2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075a2:	183b      	adds	r3, r7, r0
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2220      	movs	r2, #32
 80075a8:	4013      	ands	r3, r2
 80075aa:	d00a      	beq.n	80075c2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d100      	bne.n	80075b6 <HAL_UART_IRQHandler+0x62>
 80075b4:	e296      	b.n	8007ae4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	0010      	movs	r0, r2
 80075be:	4798      	blx	r3
      }
      return;
 80075c0:	e290      	b.n	8007ae4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075c2:	2398      	movs	r3, #152	; 0x98
 80075c4:	18fb      	adds	r3, r7, r3
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d100      	bne.n	80075ce <HAL_UART_IRQHandler+0x7a>
 80075cc:	e114      	b.n	80077f8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075ce:	239c      	movs	r3, #156	; 0x9c
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2201      	movs	r2, #1
 80075d6:	4013      	ands	r3, r2
 80075d8:	d106      	bne.n	80075e8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075da:	23a0      	movs	r3, #160	; 0xa0
 80075dc:	18fb      	adds	r3, r7, r3
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a83      	ldr	r2, [pc, #524]	; (80077f0 <HAL_UART_IRQHandler+0x29c>)
 80075e2:	4013      	ands	r3, r2
 80075e4:	d100      	bne.n	80075e8 <HAL_UART_IRQHandler+0x94>
 80075e6:	e107      	b.n	80077f8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075e8:	23a4      	movs	r3, #164	; 0xa4
 80075ea:	18fb      	adds	r3, r7, r3
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2201      	movs	r2, #1
 80075f0:	4013      	ands	r3, r2
 80075f2:	d012      	beq.n	800761a <HAL_UART_IRQHandler+0xc6>
 80075f4:	23a0      	movs	r3, #160	; 0xa0
 80075f6:	18fb      	adds	r3, r7, r3
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	2380      	movs	r3, #128	; 0x80
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	4013      	ands	r3, r2
 8007600:	d00b      	beq.n	800761a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2201      	movs	r2, #1
 8007608:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2280      	movs	r2, #128	; 0x80
 800760e:	589b      	ldr	r3, [r3, r2]
 8007610:	2201      	movs	r2, #1
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2180      	movs	r1, #128	; 0x80
 8007618:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800761a:	23a4      	movs	r3, #164	; 0xa4
 800761c:	18fb      	adds	r3, r7, r3
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2202      	movs	r2, #2
 8007622:	4013      	ands	r3, r2
 8007624:	d011      	beq.n	800764a <HAL_UART_IRQHandler+0xf6>
 8007626:	239c      	movs	r3, #156	; 0x9c
 8007628:	18fb      	adds	r3, r7, r3
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2201      	movs	r2, #1
 800762e:	4013      	ands	r3, r2
 8007630:	d00b      	beq.n	800764a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2202      	movs	r2, #2
 8007638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2280      	movs	r2, #128	; 0x80
 800763e:	589b      	ldr	r3, [r3, r2]
 8007640:	2204      	movs	r2, #4
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2180      	movs	r1, #128	; 0x80
 8007648:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800764a:	23a4      	movs	r3, #164	; 0xa4
 800764c:	18fb      	adds	r3, r7, r3
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2204      	movs	r2, #4
 8007652:	4013      	ands	r3, r2
 8007654:	d011      	beq.n	800767a <HAL_UART_IRQHandler+0x126>
 8007656:	239c      	movs	r3, #156	; 0x9c
 8007658:	18fb      	adds	r3, r7, r3
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2201      	movs	r2, #1
 800765e:	4013      	ands	r3, r2
 8007660:	d00b      	beq.n	800767a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2204      	movs	r2, #4
 8007668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2280      	movs	r2, #128	; 0x80
 800766e:	589b      	ldr	r3, [r3, r2]
 8007670:	2202      	movs	r2, #2
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2180      	movs	r1, #128	; 0x80
 8007678:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800767a:	23a4      	movs	r3, #164	; 0xa4
 800767c:	18fb      	adds	r3, r7, r3
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2208      	movs	r2, #8
 8007682:	4013      	ands	r3, r2
 8007684:	d017      	beq.n	80076b6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007686:	23a0      	movs	r3, #160	; 0xa0
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2220      	movs	r2, #32
 800768e:	4013      	ands	r3, r2
 8007690:	d105      	bne.n	800769e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007692:	239c      	movs	r3, #156	; 0x9c
 8007694:	18fb      	adds	r3, r7, r3
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2201      	movs	r2, #1
 800769a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800769c:	d00b      	beq.n	80076b6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2208      	movs	r2, #8
 80076a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2280      	movs	r2, #128	; 0x80
 80076aa:	589b      	ldr	r3, [r3, r2]
 80076ac:	2208      	movs	r2, #8
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2180      	movs	r1, #128	; 0x80
 80076b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076b6:	23a4      	movs	r3, #164	; 0xa4
 80076b8:	18fb      	adds	r3, r7, r3
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	2380      	movs	r3, #128	; 0x80
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	4013      	ands	r3, r2
 80076c2:	d013      	beq.n	80076ec <HAL_UART_IRQHandler+0x198>
 80076c4:	23a0      	movs	r3, #160	; 0xa0
 80076c6:	18fb      	adds	r3, r7, r3
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	2380      	movs	r3, #128	; 0x80
 80076cc:	04db      	lsls	r3, r3, #19
 80076ce:	4013      	ands	r3, r2
 80076d0:	d00c      	beq.n	80076ec <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2280      	movs	r2, #128	; 0x80
 80076d8:	0112      	lsls	r2, r2, #4
 80076da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2280      	movs	r2, #128	; 0x80
 80076e0:	589b      	ldr	r3, [r3, r2]
 80076e2:	2220      	movs	r2, #32
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2180      	movs	r1, #128	; 0x80
 80076ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2280      	movs	r2, #128	; 0x80
 80076f0:	589b      	ldr	r3, [r3, r2]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d100      	bne.n	80076f8 <HAL_UART_IRQHandler+0x1a4>
 80076f6:	e1f7      	b.n	8007ae8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076f8:	23a4      	movs	r3, #164	; 0xa4
 80076fa:	18fb      	adds	r3, r7, r3
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2220      	movs	r2, #32
 8007700:	4013      	ands	r3, r2
 8007702:	d00e      	beq.n	8007722 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007704:	23a0      	movs	r3, #160	; 0xa0
 8007706:	18fb      	adds	r3, r7, r3
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2220      	movs	r2, #32
 800770c:	4013      	ands	r3, r2
 800770e:	d008      	beq.n	8007722 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007714:	2b00      	cmp	r3, #0
 8007716:	d004      	beq.n	8007722 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	0010      	movs	r0, r2
 8007720:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2280      	movs	r2, #128	; 0x80
 8007726:	589b      	ldr	r3, [r3, r2]
 8007728:	2194      	movs	r1, #148	; 0x94
 800772a:	187a      	adds	r2, r7, r1
 800772c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	2240      	movs	r2, #64	; 0x40
 8007736:	4013      	ands	r3, r2
 8007738:	2b40      	cmp	r3, #64	; 0x40
 800773a:	d004      	beq.n	8007746 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800773c:	187b      	adds	r3, r7, r1
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2228      	movs	r2, #40	; 0x28
 8007742:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007744:	d047      	beq.n	80077d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	0018      	movs	r0, r3
 800774a:	f000 fd3f 	bl	80081cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	2240      	movs	r2, #64	; 0x40
 8007756:	4013      	ands	r3, r2
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d137      	bne.n	80077cc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800775c:	f3ef 8310 	mrs	r3, PRIMASK
 8007760:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007764:	2090      	movs	r0, #144	; 0x90
 8007766:	183a      	adds	r2, r7, r0
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	2301      	movs	r3, #1
 800776c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800776e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007770:	f383 8810 	msr	PRIMASK, r3
}
 8007774:	46c0      	nop			; (mov r8, r8)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2140      	movs	r1, #64	; 0x40
 8007782:	438a      	bics	r2, r1
 8007784:	609a      	str	r2, [r3, #8]
 8007786:	183b      	adds	r3, r7, r0
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800778c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800778e:	f383 8810 	msr	PRIMASK, r3
}
 8007792:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007798:	2b00      	cmp	r3, #0
 800779a:	d012      	beq.n	80077c2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a0:	4a14      	ldr	r2, [pc, #80]	; (80077f4 <HAL_UART_IRQHandler+0x2a0>)
 80077a2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a8:	0018      	movs	r0, r3
 80077aa:	f7fb fd71 	bl	8003290 <HAL_DMA_Abort_IT>
 80077ae:	1e03      	subs	r3, r0, #0
 80077b0:	d01a      	beq.n	80077e8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077bc:	0018      	movs	r0, r3
 80077be:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c0:	e012      	b.n	80077e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	0018      	movs	r0, r3
 80077c6:	f000 f9a5 	bl	8007b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ca:	e00d      	b.n	80077e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	0018      	movs	r0, r3
 80077d0:	f000 f9a0 	bl	8007b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d4:	e008      	b.n	80077e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	0018      	movs	r0, r3
 80077da:	f000 f99b 	bl	8007b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2280      	movs	r2, #128	; 0x80
 80077e2:	2100      	movs	r1, #0
 80077e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80077e6:	e17f      	b.n	8007ae8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e8:	46c0      	nop			; (mov r8, r8)
    return;
 80077ea:	e17d      	b.n	8007ae8 <HAL_UART_IRQHandler+0x594>
 80077ec:	0000080f 	.word	0x0000080f
 80077f0:	04000120 	.word	0x04000120
 80077f4:	08008291 	.word	0x08008291

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d000      	beq.n	8007802 <HAL_UART_IRQHandler+0x2ae>
 8007800:	e131      	b.n	8007a66 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007802:	23a4      	movs	r3, #164	; 0xa4
 8007804:	18fb      	adds	r3, r7, r3
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2210      	movs	r2, #16
 800780a:	4013      	ands	r3, r2
 800780c:	d100      	bne.n	8007810 <HAL_UART_IRQHandler+0x2bc>
 800780e:	e12a      	b.n	8007a66 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007810:	23a0      	movs	r3, #160	; 0xa0
 8007812:	18fb      	adds	r3, r7, r3
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2210      	movs	r2, #16
 8007818:	4013      	ands	r3, r2
 800781a:	d100      	bne.n	800781e <HAL_UART_IRQHandler+0x2ca>
 800781c:	e123      	b.n	8007a66 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2210      	movs	r2, #16
 8007824:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2240      	movs	r2, #64	; 0x40
 800782e:	4013      	ands	r3, r2
 8007830:	2b40      	cmp	r3, #64	; 0x40
 8007832:	d000      	beq.n	8007836 <HAL_UART_IRQHandler+0x2e2>
 8007834:	e09b      	b.n	800796e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	217e      	movs	r1, #126	; 0x7e
 8007840:	187b      	adds	r3, r7, r1
 8007842:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007844:	187b      	adds	r3, r7, r1
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d100      	bne.n	800784e <HAL_UART_IRQHandler+0x2fa>
 800784c:	e14e      	b.n	8007aec <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2258      	movs	r2, #88	; 0x58
 8007852:	5a9b      	ldrh	r3, [r3, r2]
 8007854:	187a      	adds	r2, r7, r1
 8007856:	8812      	ldrh	r2, [r2, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	d300      	bcc.n	800785e <HAL_UART_IRQHandler+0x30a>
 800785c:	e146      	b.n	8007aec <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	187a      	adds	r2, r7, r1
 8007862:	215a      	movs	r1, #90	; 0x5a
 8007864:	8812      	ldrh	r2, [r2, #0]
 8007866:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	2b20      	cmp	r3, #32
 8007870:	d06e      	beq.n	8007950 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007872:	f3ef 8310 	mrs	r3, PRIMASK
 8007876:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800787a:	67bb      	str	r3, [r7, #120]	; 0x78
 800787c:	2301      	movs	r3, #1
 800787e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007882:	f383 8810 	msr	PRIMASK, r3
}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	499a      	ldr	r1, [pc, #616]	; (8007afc <HAL_UART_IRQHandler+0x5a8>)
 8007894:	400a      	ands	r2, r1
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800789a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	f383 8810 	msr	PRIMASK, r3
}
 80078a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078a4:	f3ef 8310 	mrs	r3, PRIMASK
 80078a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80078aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ac:	677b      	str	r3, [r7, #116]	; 0x74
 80078ae:	2301      	movs	r3, #1
 80078b0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b4:	f383 8810 	msr	PRIMASK, r3
}
 80078b8:	46c0      	nop			; (mov r8, r8)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2101      	movs	r1, #1
 80078c6:	438a      	bics	r2, r1
 80078c8:	609a      	str	r2, [r3, #8]
 80078ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078cc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078d0:	f383 8810 	msr	PRIMASK, r3
}
 80078d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d6:	f3ef 8310 	mrs	r3, PRIMASK
 80078da:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80078dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078de:	673b      	str	r3, [r7, #112]	; 0x70
 80078e0:	2301      	movs	r3, #1
 80078e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e6:	f383 8810 	msr	PRIMASK, r3
}
 80078ea:	46c0      	nop			; (mov r8, r8)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2140      	movs	r1, #64	; 0x40
 80078f8:	438a      	bics	r2, r1
 80078fa:	609a      	str	r2, [r3, #8]
 80078fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078fe:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007902:	f383 8810 	msr	PRIMASK, r3
}
 8007906:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007914:	f3ef 8310 	mrs	r3, PRIMASK
 8007918:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800791a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800791c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800791e:	2301      	movs	r3, #1
 8007920:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007924:	f383 8810 	msr	PRIMASK, r3
}
 8007928:	46c0      	nop			; (mov r8, r8)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2110      	movs	r1, #16
 8007936:	438a      	bics	r2, r1
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800793e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007940:	f383 8810 	msr	PRIMASK, r3
}
 8007944:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794a:	0018      	movs	r0, r3
 800794c:	f7fb fc68 	bl	8003220 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2258      	movs	r2, #88	; 0x58
 8007954:	5a9a      	ldrh	r2, [r3, r2]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	215a      	movs	r1, #90	; 0x5a
 800795a:	5a5b      	ldrh	r3, [r3, r1]
 800795c:	b29b      	uxth	r3, r3
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	b29a      	uxth	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	0011      	movs	r1, r2
 8007966:	0018      	movs	r0, r3
 8007968:	f000 f8dc 	bl	8007b24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800796c:	e0be      	b.n	8007aec <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2258      	movs	r2, #88	; 0x58
 8007972:	5a99      	ldrh	r1, [r3, r2]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	225a      	movs	r2, #90	; 0x5a
 8007978:	5a9b      	ldrh	r3, [r3, r2]
 800797a:	b29a      	uxth	r2, r3
 800797c:	208e      	movs	r0, #142	; 0x8e
 800797e:	183b      	adds	r3, r7, r0
 8007980:	1a8a      	subs	r2, r1, r2
 8007982:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	225a      	movs	r2, #90	; 0x5a
 8007988:	5a9b      	ldrh	r3, [r3, r2]
 800798a:	b29b      	uxth	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d100      	bne.n	8007992 <HAL_UART_IRQHandler+0x43e>
 8007990:	e0ae      	b.n	8007af0 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8007992:	183b      	adds	r3, r7, r0
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d100      	bne.n	800799c <HAL_UART_IRQHandler+0x448>
 800799a:	e0a9      	b.n	8007af0 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800799c:	f3ef 8310 	mrs	r3, PRIMASK
 80079a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80079a2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079a4:	2488      	movs	r4, #136	; 0x88
 80079a6:	193a      	adds	r2, r7, r4
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	2301      	movs	r3, #1
 80079ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f383 8810 	msr	PRIMASK, r3
}
 80079b4:	46c0      	nop			; (mov r8, r8)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	494f      	ldr	r1, [pc, #316]	; (8007b00 <HAL_UART_IRQHandler+0x5ac>)
 80079c2:	400a      	ands	r2, r1
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	193b      	adds	r3, r7, r4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f383 8810 	msr	PRIMASK, r3
}
 80079d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079d4:	f3ef 8310 	mrs	r3, PRIMASK
 80079d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80079da:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079dc:	2484      	movs	r4, #132	; 0x84
 80079de:	193a      	adds	r2, r7, r4
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	2301      	movs	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	f383 8810 	msr	PRIMASK, r3
}
 80079ec:	46c0      	nop			; (mov r8, r8)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2101      	movs	r1, #1
 80079fa:	438a      	bics	r2, r1
 80079fc:	609a      	str	r2, [r3, #8]
 80079fe:	193b      	adds	r3, r7, r4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	f383 8810 	msr	PRIMASK, r3
}
 8007a0a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a26:	2480      	movs	r4, #128	; 0x80
 8007a28:	193a      	adds	r2, r7, r4
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	f383 8810 	msr	PRIMASK, r3
}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2110      	movs	r1, #16
 8007a44:	438a      	bics	r2, r1
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	193b      	adds	r3, r7, r4
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	f383 8810 	msr	PRIMASK, r3
}
 8007a54:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a56:	183b      	adds	r3, r7, r0
 8007a58:	881a      	ldrh	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	0011      	movs	r1, r2
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f000 f860 	bl	8007b24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a64:	e044      	b.n	8007af0 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a66:	23a4      	movs	r3, #164	; 0xa4
 8007a68:	18fb      	adds	r3, r7, r3
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	2380      	movs	r3, #128	; 0x80
 8007a6e:	035b      	lsls	r3, r3, #13
 8007a70:	4013      	ands	r3, r2
 8007a72:	d010      	beq.n	8007a96 <HAL_UART_IRQHandler+0x542>
 8007a74:	239c      	movs	r3, #156	; 0x9c
 8007a76:	18fb      	adds	r3, r7, r3
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	2380      	movs	r3, #128	; 0x80
 8007a7c:	03db      	lsls	r3, r3, #15
 8007a7e:	4013      	ands	r3, r2
 8007a80:	d009      	beq.n	8007a96 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2280      	movs	r2, #128	; 0x80
 8007a88:	0352      	lsls	r2, r2, #13
 8007a8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f000 fc40 	bl	8008314 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a94:	e02f      	b.n	8007af6 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a96:	23a4      	movs	r3, #164	; 0xa4
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2280      	movs	r2, #128	; 0x80
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	d00f      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007aa2:	23a0      	movs	r3, #160	; 0xa0
 8007aa4:	18fb      	adds	r3, r7, r3
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2280      	movs	r2, #128	; 0x80
 8007aaa:	4013      	ands	r3, r2
 8007aac:	d009      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01e      	beq.n	8007af4 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	0010      	movs	r0, r2
 8007abe:	4798      	blx	r3
    }
    return;
 8007ac0:	e018      	b.n	8007af4 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ac2:	23a4      	movs	r3, #164	; 0xa4
 8007ac4:	18fb      	adds	r3, r7, r3
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2240      	movs	r2, #64	; 0x40
 8007aca:	4013      	ands	r3, r2
 8007acc:	d013      	beq.n	8007af6 <HAL_UART_IRQHandler+0x5a2>
 8007ace:	23a0      	movs	r3, #160	; 0xa0
 8007ad0:	18fb      	adds	r3, r7, r3
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2240      	movs	r2, #64	; 0x40
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	d00d      	beq.n	8007af6 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	0018      	movs	r0, r3
 8007ade:	f000 fbee 	bl	80082be <UART_EndTransmit_IT>
    return;
 8007ae2:	e008      	b.n	8007af6 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007ae4:	46c0      	nop			; (mov r8, r8)
 8007ae6:	e006      	b.n	8007af6 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007ae8:	46c0      	nop			; (mov r8, r8)
 8007aea:	e004      	b.n	8007af6 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007aec:	46c0      	nop			; (mov r8, r8)
 8007aee:	e002      	b.n	8007af6 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007af0:	46c0      	nop			; (mov r8, r8)
 8007af2:	e000      	b.n	8007af6 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007af4:	46c0      	nop			; (mov r8, r8)
  }

}
 8007af6:	46bd      	mov	sp, r7
 8007af8:	b02b      	add	sp, #172	; 0xac
 8007afa:	bd90      	pop	{r4, r7, pc}
 8007afc:	fffffeff 	.word	0xfffffeff
 8007b00:	fffffedf 	.word	0xfffffedf

08007b04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b0c:	46c0      	nop			; (mov r8, r8)
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	b002      	add	sp, #8
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b1c:	46c0      	nop			; (mov r8, r8)
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	b002      	add	sp, #8
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	000a      	movs	r2, r1
 8007b2e:	1cbb      	adds	r3, r7, #2
 8007b30:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	46bd      	mov	sp, r7
 8007b36:	b002      	add	sp, #8
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b44:	231e      	movs	r3, #30
 8007b46:	18fb      	adds	r3, r7, r3
 8007b48:	2200      	movs	r2, #0
 8007b4a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4aaf      	ldr	r2, [pc, #700]	; (8007e28 <UART_SetConfig+0x2ec>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	0019      	movs	r1, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4aaa      	ldr	r2, [pc, #680]	; (8007e2c <UART_SetConfig+0x2f0>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	0019      	movs	r1, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68da      	ldr	r2, [r3, #12]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	4aa1      	ldr	r2, [pc, #644]	; (8007e30 <UART_SetConfig+0x2f4>)
 8007baa:	4013      	ands	r3, r2
 8007bac:	0019      	movs	r1, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a9d      	ldr	r2, [pc, #628]	; (8007e34 <UART_SetConfig+0x2f8>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d127      	bne.n	8007c12 <UART_SetConfig+0xd6>
 8007bc2:	4b9d      	ldr	r3, [pc, #628]	; (8007e38 <UART_SetConfig+0x2fc>)
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc6:	2203      	movs	r2, #3
 8007bc8:	4013      	ands	r3, r2
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d00d      	beq.n	8007bea <UART_SetConfig+0xae>
 8007bce:	d81b      	bhi.n	8007c08 <UART_SetConfig+0xcc>
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d014      	beq.n	8007bfe <UART_SetConfig+0xc2>
 8007bd4:	d818      	bhi.n	8007c08 <UART_SetConfig+0xcc>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <UART_SetConfig+0xa4>
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d00a      	beq.n	8007bf4 <UART_SetConfig+0xb8>
 8007bde:	e013      	b.n	8007c08 <UART_SetConfig+0xcc>
 8007be0:	231f      	movs	r3, #31
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	e065      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007bea:	231f      	movs	r3, #31
 8007bec:	18fb      	adds	r3, r7, r3
 8007bee:	2202      	movs	r2, #2
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	e060      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007bf4:	231f      	movs	r3, #31
 8007bf6:	18fb      	adds	r3, r7, r3
 8007bf8:	2204      	movs	r2, #4
 8007bfa:	701a      	strb	r2, [r3, #0]
 8007bfc:	e05b      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007bfe:	231f      	movs	r3, #31
 8007c00:	18fb      	adds	r3, r7, r3
 8007c02:	2208      	movs	r2, #8
 8007c04:	701a      	strb	r2, [r3, #0]
 8007c06:	e056      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007c08:	231f      	movs	r3, #31
 8007c0a:	18fb      	adds	r3, r7, r3
 8007c0c:	2210      	movs	r2, #16
 8007c0e:	701a      	strb	r2, [r3, #0]
 8007c10:	e051      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a89      	ldr	r2, [pc, #548]	; (8007e3c <UART_SetConfig+0x300>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d134      	bne.n	8007c86 <UART_SetConfig+0x14a>
 8007c1c:	4b86      	ldr	r3, [pc, #536]	; (8007e38 <UART_SetConfig+0x2fc>)
 8007c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c20:	23c0      	movs	r3, #192	; 0xc0
 8007c22:	029b      	lsls	r3, r3, #10
 8007c24:	4013      	ands	r3, r2
 8007c26:	22c0      	movs	r2, #192	; 0xc0
 8007c28:	0292      	lsls	r2, r2, #10
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d017      	beq.n	8007c5e <UART_SetConfig+0x122>
 8007c2e:	22c0      	movs	r2, #192	; 0xc0
 8007c30:	0292      	lsls	r2, r2, #10
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d822      	bhi.n	8007c7c <UART_SetConfig+0x140>
 8007c36:	2280      	movs	r2, #128	; 0x80
 8007c38:	0292      	lsls	r2, r2, #10
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d019      	beq.n	8007c72 <UART_SetConfig+0x136>
 8007c3e:	2280      	movs	r2, #128	; 0x80
 8007c40:	0292      	lsls	r2, r2, #10
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d81a      	bhi.n	8007c7c <UART_SetConfig+0x140>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d004      	beq.n	8007c54 <UART_SetConfig+0x118>
 8007c4a:	2280      	movs	r2, #128	; 0x80
 8007c4c:	0252      	lsls	r2, r2, #9
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00a      	beq.n	8007c68 <UART_SetConfig+0x12c>
 8007c52:	e013      	b.n	8007c7c <UART_SetConfig+0x140>
 8007c54:	231f      	movs	r3, #31
 8007c56:	18fb      	adds	r3, r7, r3
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
 8007c5c:	e02b      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007c5e:	231f      	movs	r3, #31
 8007c60:	18fb      	adds	r3, r7, r3
 8007c62:	2202      	movs	r2, #2
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	e026      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007c68:	231f      	movs	r3, #31
 8007c6a:	18fb      	adds	r3, r7, r3
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	701a      	strb	r2, [r3, #0]
 8007c70:	e021      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007c72:	231f      	movs	r3, #31
 8007c74:	18fb      	adds	r3, r7, r3
 8007c76:	2208      	movs	r2, #8
 8007c78:	701a      	strb	r2, [r3, #0]
 8007c7a:	e01c      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007c7c:	231f      	movs	r3, #31
 8007c7e:	18fb      	adds	r3, r7, r3
 8007c80:	2210      	movs	r2, #16
 8007c82:	701a      	strb	r2, [r3, #0]
 8007c84:	e017      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a6d      	ldr	r2, [pc, #436]	; (8007e40 <UART_SetConfig+0x304>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d104      	bne.n	8007c9a <UART_SetConfig+0x15e>
 8007c90:	231f      	movs	r3, #31
 8007c92:	18fb      	adds	r3, r7, r3
 8007c94:	2200      	movs	r2, #0
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	e00d      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a69      	ldr	r2, [pc, #420]	; (8007e44 <UART_SetConfig+0x308>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d104      	bne.n	8007cae <UART_SetConfig+0x172>
 8007ca4:	231f      	movs	r3, #31
 8007ca6:	18fb      	adds	r3, r7, r3
 8007ca8:	2200      	movs	r2, #0
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	e003      	b.n	8007cb6 <UART_SetConfig+0x17a>
 8007cae:	231f      	movs	r3, #31
 8007cb0:	18fb      	adds	r3, r7, r3
 8007cb2:	2210      	movs	r2, #16
 8007cb4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	69da      	ldr	r2, [r3, #28]
 8007cba:	2380      	movs	r3, #128	; 0x80
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d15d      	bne.n	8007d7e <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8007cc2:	231f      	movs	r3, #31
 8007cc4:	18fb      	adds	r3, r7, r3
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d015      	beq.n	8007cf8 <UART_SetConfig+0x1bc>
 8007ccc:	dc18      	bgt.n	8007d00 <UART_SetConfig+0x1c4>
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d00d      	beq.n	8007cee <UART_SetConfig+0x1b2>
 8007cd2:	dc15      	bgt.n	8007d00 <UART_SetConfig+0x1c4>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <UART_SetConfig+0x1a2>
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d005      	beq.n	8007ce8 <UART_SetConfig+0x1ac>
 8007cdc:	e010      	b.n	8007d00 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cde:	f7fe f865 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8007ce2:	0003      	movs	r3, r0
 8007ce4:	61bb      	str	r3, [r7, #24]
        break;
 8007ce6:	e012      	b.n	8007d0e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce8:	4b57      	ldr	r3, [pc, #348]	; (8007e48 <UART_SetConfig+0x30c>)
 8007cea:	61bb      	str	r3, [r7, #24]
        break;
 8007cec:	e00f      	b.n	8007d0e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cee:	f7fd ffd1 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8007cf2:	0003      	movs	r3, r0
 8007cf4:	61bb      	str	r3, [r7, #24]
        break;
 8007cf6:	e00a      	b.n	8007d0e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	61bb      	str	r3, [r7, #24]
        break;
 8007cfe:	e006      	b.n	8007d0e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d04:	231e      	movs	r3, #30
 8007d06:	18fb      	adds	r3, r7, r3
 8007d08:	2201      	movs	r2, #1
 8007d0a:	701a      	strb	r2, [r3, #0]
        break;
 8007d0c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d100      	bne.n	8007d16 <UART_SetConfig+0x1da>
 8007d14:	e07b      	b.n	8007e0e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	005a      	lsls	r2, r3, #1
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	18d2      	adds	r2, r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	0019      	movs	r1, r3
 8007d28:	0010      	movs	r0, r2
 8007d2a:	f7f8 f9ff 	bl	800012c <__udivsi3>
 8007d2e:	0003      	movs	r3, r0
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	2b0f      	cmp	r3, #15
 8007d38:	d91c      	bls.n	8007d74 <UART_SetConfig+0x238>
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	2380      	movs	r3, #128	; 0x80
 8007d3e:	025b      	lsls	r3, r3, #9
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d217      	bcs.n	8007d74 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	200e      	movs	r0, #14
 8007d4a:	183b      	adds	r3, r7, r0
 8007d4c:	210f      	movs	r1, #15
 8007d4e:	438a      	bics	r2, r1
 8007d50:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	2207      	movs	r2, #7
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	b299      	uxth	r1, r3
 8007d5e:	183b      	adds	r3, r7, r0
 8007d60:	183a      	adds	r2, r7, r0
 8007d62:	8812      	ldrh	r2, [r2, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	183a      	adds	r2, r7, r0
 8007d6e:	8812      	ldrh	r2, [r2, #0]
 8007d70:	60da      	str	r2, [r3, #12]
 8007d72:	e04c      	b.n	8007e0e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007d74:	231e      	movs	r3, #30
 8007d76:	18fb      	adds	r3, r7, r3
 8007d78:	2201      	movs	r2, #1
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	e047      	b.n	8007e0e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d7e:	231f      	movs	r3, #31
 8007d80:	18fb      	adds	r3, r7, r3
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b08      	cmp	r3, #8
 8007d86:	d015      	beq.n	8007db4 <UART_SetConfig+0x278>
 8007d88:	dc18      	bgt.n	8007dbc <UART_SetConfig+0x280>
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d00d      	beq.n	8007daa <UART_SetConfig+0x26e>
 8007d8e:	dc15      	bgt.n	8007dbc <UART_SetConfig+0x280>
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <UART_SetConfig+0x25e>
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d005      	beq.n	8007da4 <UART_SetConfig+0x268>
 8007d98:	e010      	b.n	8007dbc <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d9a:	f7fe f807 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8007d9e:	0003      	movs	r3, r0
 8007da0:	61bb      	str	r3, [r7, #24]
        break;
 8007da2:	e012      	b.n	8007dca <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007da4:	4b28      	ldr	r3, [pc, #160]	; (8007e48 <UART_SetConfig+0x30c>)
 8007da6:	61bb      	str	r3, [r7, #24]
        break;
 8007da8:	e00f      	b.n	8007dca <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007daa:	f7fd ff73 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8007dae:	0003      	movs	r3, r0
 8007db0:	61bb      	str	r3, [r7, #24]
        break;
 8007db2:	e00a      	b.n	8007dca <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007db4:	2380      	movs	r3, #128	; 0x80
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	61bb      	str	r3, [r7, #24]
        break;
 8007dba:	e006      	b.n	8007dca <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007dc0:	231e      	movs	r3, #30
 8007dc2:	18fb      	adds	r3, r7, r3
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	701a      	strb	r2, [r3, #0]
        break;
 8007dc8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01e      	beq.n	8007e0e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	085a      	lsrs	r2, r3, #1
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	18d2      	adds	r2, r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	0019      	movs	r1, r3
 8007de0:	0010      	movs	r0, r2
 8007de2:	f7f8 f9a3 	bl	800012c <__udivsi3>
 8007de6:	0003      	movs	r3, r0
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	2b0f      	cmp	r3, #15
 8007df0:	d909      	bls.n	8007e06 <UART_SetConfig+0x2ca>
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	2380      	movs	r3, #128	; 0x80
 8007df6:	025b      	lsls	r3, r3, #9
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d204      	bcs.n	8007e06 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	60da      	str	r2, [r3, #12]
 8007e04:	e003      	b.n	8007e0e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007e06:	231e      	movs	r3, #30
 8007e08:	18fb      	adds	r3, r7, r3
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007e1a:	231e      	movs	r3, #30
 8007e1c:	18fb      	adds	r3, r7, r3
 8007e1e:	781b      	ldrb	r3, [r3, #0]
}
 8007e20:	0018      	movs	r0, r3
 8007e22:	46bd      	mov	sp, r7
 8007e24:	b008      	add	sp, #32
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	efff69f3 	.word	0xefff69f3
 8007e2c:	ffffcfff 	.word	0xffffcfff
 8007e30:	fffff4ff 	.word	0xfffff4ff
 8007e34:	40013800 	.word	0x40013800
 8007e38:	40021000 	.word	0x40021000
 8007e3c:	40004400 	.word	0x40004400
 8007e40:	40004800 	.word	0x40004800
 8007e44:	40004c00 	.word	0x40004c00
 8007e48:	007a1200 	.word	0x007a1200

08007e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	2201      	movs	r2, #1
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	d00b      	beq.n	8007e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	4a4a      	ldr	r2, [pc, #296]	; (8007f90 <UART_AdvFeatureConfig+0x144>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	0019      	movs	r1, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	d00b      	beq.n	8007e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	4a43      	ldr	r2, [pc, #268]	; (8007f94 <UART_AdvFeatureConfig+0x148>)
 8007e88:	4013      	ands	r3, r2
 8007e8a:	0019      	movs	r1, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	d00b      	beq.n	8007eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	4a3b      	ldr	r2, [pc, #236]	; (8007f98 <UART_AdvFeatureConfig+0x14c>)
 8007eaa:	4013      	ands	r3, r2
 8007eac:	0019      	movs	r1, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	d00b      	beq.n	8007edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	4a34      	ldr	r2, [pc, #208]	; (8007f9c <UART_AdvFeatureConfig+0x150>)
 8007ecc:	4013      	ands	r3, r2
 8007ece:	0019      	movs	r1, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	2210      	movs	r2, #16
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	d00b      	beq.n	8007efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	4a2c      	ldr	r2, [pc, #176]	; (8007fa0 <UART_AdvFeatureConfig+0x154>)
 8007eee:	4013      	ands	r3, r2
 8007ef0:	0019      	movs	r1, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	2220      	movs	r2, #32
 8007f04:	4013      	ands	r3, r2
 8007f06:	d00b      	beq.n	8007f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	4a25      	ldr	r2, [pc, #148]	; (8007fa4 <UART_AdvFeatureConfig+0x158>)
 8007f10:	4013      	ands	r3, r2
 8007f12:	0019      	movs	r1, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	2240      	movs	r2, #64	; 0x40
 8007f26:	4013      	ands	r3, r2
 8007f28:	d01d      	beq.n	8007f66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	4a1d      	ldr	r2, [pc, #116]	; (8007fa8 <UART_AdvFeatureConfig+0x15c>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	0019      	movs	r1, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f46:	2380      	movs	r3, #128	; 0x80
 8007f48:	035b      	lsls	r3, r3, #13
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d10b      	bne.n	8007f66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	4a15      	ldr	r2, [pc, #84]	; (8007fac <UART_AdvFeatureConfig+0x160>)
 8007f56:	4013      	ands	r3, r2
 8007f58:	0019      	movs	r1, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	2280      	movs	r2, #128	; 0x80
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	d00b      	beq.n	8007f88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	4a0e      	ldr	r2, [pc, #56]	; (8007fb0 <UART_AdvFeatureConfig+0x164>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	0019      	movs	r1, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	605a      	str	r2, [r3, #4]
  }
}
 8007f88:	46c0      	nop			; (mov r8, r8)
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	b002      	add	sp, #8
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	fffdffff 	.word	0xfffdffff
 8007f94:	fffeffff 	.word	0xfffeffff
 8007f98:	fffbffff 	.word	0xfffbffff
 8007f9c:	ffff7fff 	.word	0xffff7fff
 8007fa0:	ffffefff 	.word	0xffffefff
 8007fa4:	ffffdfff 	.word	0xffffdfff
 8007fa8:	ffefffff 	.word	0xffefffff
 8007fac:	ff9fffff 	.word	0xff9fffff
 8007fb0:	fff7ffff 	.word	0xfff7ffff

08007fb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af02      	add	r7, sp, #8
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2280      	movs	r2, #128	; 0x80
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fc4:	f7fa fb00 	bl	80025c8 <HAL_GetTick>
 8007fc8:	0003      	movs	r3, r0
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2208      	movs	r2, #8
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d10c      	bne.n	8007ff4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2280      	movs	r2, #128	; 0x80
 8007fde:	0391      	lsls	r1, r2, #14
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4a17      	ldr	r2, [pc, #92]	; (8008040 <UART_CheckIdleState+0x8c>)
 8007fe4:	9200      	str	r2, [sp, #0]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f000 f82c 	bl	8008044 <UART_WaitOnFlagUntilTimeout>
 8007fec:	1e03      	subs	r3, r0, #0
 8007fee:	d001      	beq.n	8007ff4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e021      	b.n	8008038 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2204      	movs	r2, #4
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d10c      	bne.n	800801c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2280      	movs	r2, #128	; 0x80
 8008006:	03d1      	lsls	r1, r2, #15
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	4a0d      	ldr	r2, [pc, #52]	; (8008040 <UART_CheckIdleState+0x8c>)
 800800c:	9200      	str	r2, [sp, #0]
 800800e:	2200      	movs	r2, #0
 8008010:	f000 f818 	bl	8008044 <UART_WaitOnFlagUntilTimeout>
 8008014:	1e03      	subs	r3, r0, #0
 8008016:	d001      	beq.n	800801c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e00d      	b.n	8008038 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2274      	movs	r2, #116	; 0x74
 8008032:	2100      	movs	r1, #0
 8008034:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	0018      	movs	r0, r3
 800803a:	46bd      	mov	sp, r7
 800803c:	b004      	add	sp, #16
 800803e:	bd80      	pop	{r7, pc}
 8008040:	01ffffff 	.word	0x01ffffff

08008044 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b094      	sub	sp, #80	; 0x50
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	1dfb      	adds	r3, r7, #7
 8008052:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008054:	e0a3      	b.n	800819e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008058:	3301      	adds	r3, #1
 800805a:	d100      	bne.n	800805e <UART_WaitOnFlagUntilTimeout+0x1a>
 800805c:	e09f      	b.n	800819e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800805e:	f7fa fab3 	bl	80025c8 <HAL_GetTick>
 8008062:	0002      	movs	r2, r0
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800806a:	429a      	cmp	r2, r3
 800806c:	d302      	bcc.n	8008074 <UART_WaitOnFlagUntilTimeout+0x30>
 800806e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008070:	2b00      	cmp	r3, #0
 8008072:	d13d      	bne.n	80080f0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008074:	f3ef 8310 	mrs	r3, PRIMASK
 8008078:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800807c:	647b      	str	r3, [r7, #68]	; 0x44
 800807e:	2301      	movs	r3, #1
 8008080:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008084:	f383 8810 	msr	PRIMASK, r3
}
 8008088:	46c0      	nop			; (mov r8, r8)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	494c      	ldr	r1, [pc, #304]	; (80081c8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008096:	400a      	ands	r2, r1
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800809c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	f383 8810 	msr	PRIMASK, r3
}
 80080a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080a6:	f3ef 8310 	mrs	r3, PRIMASK
 80080aa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80080ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ae:	643b      	str	r3, [r7, #64]	; 0x40
 80080b0:	2301      	movs	r3, #1
 80080b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	f383 8810 	msr	PRIMASK, r3
}
 80080ba:	46c0      	nop			; (mov r8, r8)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2101      	movs	r1, #1
 80080c8:	438a      	bics	r2, r1
 80080ca:	609a      	str	r2, [r3, #8]
 80080cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d2:	f383 8810 	msr	PRIMASK, r3
}
 80080d6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2220      	movs	r2, #32
 80080dc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2220      	movs	r2, #32
 80080e2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2274      	movs	r2, #116	; 0x74
 80080e8:	2100      	movs	r1, #0
 80080ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e067      	b.n	80081c0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2204      	movs	r2, #4
 80080f8:	4013      	ands	r3, r2
 80080fa:	d050      	beq.n	800819e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69da      	ldr	r2, [r3, #28]
 8008102:	2380      	movs	r3, #128	; 0x80
 8008104:	011b      	lsls	r3, r3, #4
 8008106:	401a      	ands	r2, r3
 8008108:	2380      	movs	r3, #128	; 0x80
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	429a      	cmp	r2, r3
 800810e:	d146      	bne.n	800819e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2280      	movs	r2, #128	; 0x80
 8008116:	0112      	lsls	r2, r2, #4
 8008118:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800811a:	f3ef 8310 	mrs	r3, PRIMASK
 800811e:	613b      	str	r3, [r7, #16]
  return(result);
 8008120:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008124:	2301      	movs	r3, #1
 8008126:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f383 8810 	msr	PRIMASK, r3
}
 800812e:	46c0      	nop			; (mov r8, r8)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4923      	ldr	r1, [pc, #140]	; (80081c8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800813c:	400a      	ands	r2, r1
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008142:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	f383 8810 	msr	PRIMASK, r3
}
 800814a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800814c:	f3ef 8310 	mrs	r3, PRIMASK
 8008150:	61fb      	str	r3, [r7, #28]
  return(result);
 8008152:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008154:	64bb      	str	r3, [r7, #72]	; 0x48
 8008156:	2301      	movs	r3, #1
 8008158:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	f383 8810 	msr	PRIMASK, r3
}
 8008160:	46c0      	nop			; (mov r8, r8)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2101      	movs	r1, #1
 800816e:	438a      	bics	r2, r1
 8008170:	609a      	str	r2, [r3, #8]
 8008172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008174:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	f383 8810 	msr	PRIMASK, r3
}
 800817c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2220      	movs	r2, #32
 8008182:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2220      	movs	r2, #32
 8008188:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2280      	movs	r2, #128	; 0x80
 800818e:	2120      	movs	r1, #32
 8008190:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2274      	movs	r2, #116	; 0x74
 8008196:	2100      	movs	r1, #0
 8008198:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e010      	b.n	80081c0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	4013      	ands	r3, r2
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	425a      	negs	r2, r3
 80081ae:	4153      	adcs	r3, r2
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	001a      	movs	r2, r3
 80081b4:	1dfb      	adds	r3, r7, #7
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d100      	bne.n	80081be <UART_WaitOnFlagUntilTimeout+0x17a>
 80081bc:	e74b      	b.n	8008056 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	0018      	movs	r0, r3
 80081c2:	46bd      	mov	sp, r7
 80081c4:	b014      	add	sp, #80	; 0x50
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	fffffe5f 	.word	0xfffffe5f

080081cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08e      	sub	sp, #56	; 0x38
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081d4:	f3ef 8310 	mrs	r3, PRIMASK
 80081d8:	617b      	str	r3, [r7, #20]
  return(result);
 80081da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081dc:	637b      	str	r3, [r7, #52]	; 0x34
 80081de:	2301      	movs	r3, #1
 80081e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	f383 8810 	msr	PRIMASK, r3
}
 80081e8:	46c0      	nop			; (mov r8, r8)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4925      	ldr	r1, [pc, #148]	; (800828c <UART_EndRxTransfer+0xc0>)
 80081f6:	400a      	ands	r2, r1
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f383 8810 	msr	PRIMASK, r3
}
 8008204:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008206:	f3ef 8310 	mrs	r3, PRIMASK
 800820a:	623b      	str	r3, [r7, #32]
  return(result);
 800820c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820e:	633b      	str	r3, [r7, #48]	; 0x30
 8008210:	2301      	movs	r3, #1
 8008212:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	f383 8810 	msr	PRIMASK, r3
}
 800821a:	46c0      	nop			; (mov r8, r8)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689a      	ldr	r2, [r3, #8]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2101      	movs	r1, #1
 8008228:	438a      	bics	r2, r1
 800822a:	609a      	str	r2, [r3, #8]
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	f383 8810 	msr	PRIMASK, r3
}
 8008236:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800823c:	2b01      	cmp	r3, #1
 800823e:	d118      	bne.n	8008272 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008240:	f3ef 8310 	mrs	r3, PRIMASK
 8008244:	60bb      	str	r3, [r7, #8]
  return(result);
 8008246:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800824a:	2301      	movs	r3, #1
 800824c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f383 8810 	msr	PRIMASK, r3
}
 8008254:	46c0      	nop			; (mov r8, r8)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2110      	movs	r1, #16
 8008262:	438a      	bics	r2, r1
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f383 8810 	msr	PRIMASK, r3
}
 8008270:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2220      	movs	r2, #32
 8008276:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008284:	46c0      	nop			; (mov r8, r8)
 8008286:	46bd      	mov	sp, r7
 8008288:	b00e      	add	sp, #56	; 0x38
 800828a:	bd80      	pop	{r7, pc}
 800828c:	fffffedf 	.word	0xfffffedf

08008290 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	225a      	movs	r2, #90	; 0x5a
 80082a2:	2100      	movs	r1, #0
 80082a4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2252      	movs	r2, #82	; 0x52
 80082aa:	2100      	movs	r1, #0
 80082ac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	0018      	movs	r0, r3
 80082b2:	f7ff fc2f 	bl	8007b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	46bd      	mov	sp, r7
 80082ba:	b004      	add	sp, #16
 80082bc:	bd80      	pop	{r7, pc}

080082be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b086      	sub	sp, #24
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c6:	f3ef 8310 	mrs	r3, PRIMASK
 80082ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80082cc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	2301      	movs	r3, #1
 80082d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f383 8810 	msr	PRIMASK, r3
}
 80082da:	46c0      	nop			; (mov r8, r8)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2140      	movs	r1, #64	; 0x40
 80082e8:	438a      	bics	r2, r1
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f383 8810 	msr	PRIMASK, r3
}
 80082f6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2220      	movs	r2, #32
 80082fc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	0018      	movs	r0, r3
 8008308:	f7ff fbfc 	bl	8007b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800830c:	46c0      	nop			; (mov r8, r8)
 800830e:	46bd      	mov	sp, r7
 8008310:	b006      	add	sp, #24
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800831c:	46c0      	nop			; (mov r8, r8)
 800831e:	46bd      	mov	sp, r7
 8008320:	b002      	add	sp, #8
 8008322:	bd80      	pop	{r7, pc}

08008324 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2244      	movs	r2, #68	; 0x44
 8008330:	2100      	movs	r1, #0
 8008332:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <USB_EnableGlobalInt+0x28>)
 8008336:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	b299      	uxth	r1, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2240      	movs	r2, #64	; 0x40
 8008340:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	0018      	movs	r0, r3
 8008346:	46bd      	mov	sp, r7
 8008348:	b004      	add	sp, #16
 800834a:	bd80      	pop	{r7, pc}
 800834c:	0000bf80 	.word	0x0000bf80

08008350 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008358:	4b09      	ldr	r3, [pc, #36]	; (8008380 <USB_DisableGlobalInt+0x30>)
 800835a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2240      	movs	r2, #64	; 0x40
 8008360:	5a9b      	ldrh	r3, [r3, r2]
 8008362:	b29b      	uxth	r3, r3
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	b292      	uxth	r2, r2
 8008368:	43d2      	mvns	r2, r2
 800836a:	b292      	uxth	r2, r2
 800836c:	4013      	ands	r3, r2
 800836e:	b299      	uxth	r1, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2240      	movs	r2, #64	; 0x40
 8008374:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	0018      	movs	r0, r3
 800837a:	46bd      	mov	sp, r7
 800837c:	b004      	add	sp, #16
 800837e:	bd80      	pop	{r7, pc}
 8008380:	0000bf80 	.word	0x0000bf80

08008384 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008384:	b084      	sub	sp, #16
 8008386:	b590      	push	{r4, r7, lr}
 8008388:	46c6      	mov	lr, r8
 800838a:	b500      	push	{lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	2004      	movs	r0, #4
 8008394:	2410      	movs	r4, #16
 8008396:	46a4      	mov	ip, r4
 8008398:	2408      	movs	r4, #8
 800839a:	46a0      	mov	r8, r4
 800839c:	44b8      	add	r8, r7
 800839e:	44c4      	add	ip, r8
 80083a0:	4460      	add	r0, ip
 80083a2:	6001      	str	r1, [r0, #0]
 80083a4:	6042      	str	r2, [r0, #4]
 80083a6:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2240      	movs	r2, #64	; 0x40
 80083ac:	2101      	movs	r1, #1
 80083ae:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2240      	movs	r2, #64	; 0x40
 80083b4:	2100      	movs	r1, #0
 80083b6:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2244      	movs	r2, #68	; 0x44
 80083bc:	2100      	movs	r1, #0
 80083be:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2250      	movs	r2, #80	; 0x50
 80083c4:	2100      	movs	r1, #0
 80083c6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	0018      	movs	r0, r3
 80083cc:	46bd      	mov	sp, r7
 80083ce:	b002      	add	sp, #8
 80083d0:	bc80      	pop	{r7}
 80083d2:	46b8      	mov	r8, r7
 80083d4:	bc90      	pop	{r4, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	b004      	add	sp, #16
 80083da:	4718      	bx	r3

080083dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b09c      	sub	sp, #112	; 0x70
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80083e6:	236f      	movs	r3, #111	; 0x6f
 80083e8:	18fb      	adds	r3, r7, r3
 80083ea:	2200      	movs	r2, #0
 80083ec:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	18d3      	adds	r3, r2, r3
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	236c      	movs	r3, #108	; 0x6c
 80083fe:	18fb      	adds	r3, r7, r3
 8008400:	49cf      	ldr	r1, [pc, #828]	; (8008740 <USB_ActivateEndpoint+0x364>)
 8008402:	400a      	ands	r2, r1
 8008404:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	78db      	ldrb	r3, [r3, #3]
 800840a:	2b03      	cmp	r3, #3
 800840c:	d017      	beq.n	800843e <USB_ActivateEndpoint+0x62>
 800840e:	dc28      	bgt.n	8008462 <USB_ActivateEndpoint+0x86>
 8008410:	2b02      	cmp	r3, #2
 8008412:	d00e      	beq.n	8008432 <USB_ActivateEndpoint+0x56>
 8008414:	dc25      	bgt.n	8008462 <USB_ActivateEndpoint+0x86>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <USB_ActivateEndpoint+0x44>
 800841a:	2b01      	cmp	r3, #1
 800841c:	d018      	beq.n	8008450 <USB_ActivateEndpoint+0x74>
 800841e:	e020      	b.n	8008462 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008420:	226c      	movs	r2, #108	; 0x6c
 8008422:	18bb      	adds	r3, r7, r2
 8008424:	18ba      	adds	r2, r7, r2
 8008426:	8812      	ldrh	r2, [r2, #0]
 8008428:	2180      	movs	r1, #128	; 0x80
 800842a:	0089      	lsls	r1, r1, #2
 800842c:	430a      	orrs	r2, r1
 800842e:	801a      	strh	r2, [r3, #0]
      break;
 8008430:	e01c      	b.n	800846c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8008432:	226c      	movs	r2, #108	; 0x6c
 8008434:	18bb      	adds	r3, r7, r2
 8008436:	18ba      	adds	r2, r7, r2
 8008438:	8812      	ldrh	r2, [r2, #0]
 800843a:	801a      	strh	r2, [r3, #0]
      break;
 800843c:	e016      	b.n	800846c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800843e:	226c      	movs	r2, #108	; 0x6c
 8008440:	18bb      	adds	r3, r7, r2
 8008442:	18ba      	adds	r2, r7, r2
 8008444:	8812      	ldrh	r2, [r2, #0]
 8008446:	21c0      	movs	r1, #192	; 0xc0
 8008448:	00c9      	lsls	r1, r1, #3
 800844a:	430a      	orrs	r2, r1
 800844c:	801a      	strh	r2, [r3, #0]
      break;
 800844e:	e00d      	b.n	800846c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008450:	226c      	movs	r2, #108	; 0x6c
 8008452:	18bb      	adds	r3, r7, r2
 8008454:	18ba      	adds	r2, r7, r2
 8008456:	8812      	ldrh	r2, [r2, #0]
 8008458:	2180      	movs	r1, #128	; 0x80
 800845a:	00c9      	lsls	r1, r1, #3
 800845c:	430a      	orrs	r2, r1
 800845e:	801a      	strh	r2, [r3, #0]
      break;
 8008460:	e004      	b.n	800846c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8008462:	236f      	movs	r3, #111	; 0x6f
 8008464:	18fb      	adds	r3, r7, r3
 8008466:	2201      	movs	r2, #1
 8008468:	701a      	strb	r2, [r3, #0]
      break;
 800846a:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	18d3      	adds	r3, r2, r3
 8008476:	226c      	movs	r2, #108	; 0x6c
 8008478:	18ba      	adds	r2, r7, r2
 800847a:	8812      	ldrh	r2, [r2, #0]
 800847c:	49b1      	ldr	r1, [pc, #708]	; (8008744 <USB_ActivateEndpoint+0x368>)
 800847e:	430a      	orrs	r2, r1
 8008480:	b292      	uxth	r2, r2
 8008482:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	18d3      	adds	r3, r2, r3
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	b21b      	sxth	r3, r3
 8008494:	4aac      	ldr	r2, [pc, #688]	; (8008748 <USB_ActivateEndpoint+0x36c>)
 8008496:	4013      	ands	r3, r2
 8008498:	b21a      	sxth	r2, r3
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b21b      	sxth	r3, r3
 80084a0:	4313      	orrs	r3, r2
 80084a2:	b21a      	sxth	r2, r3
 80084a4:	2166      	movs	r1, #102	; 0x66
 80084a6:	187b      	adds	r3, r7, r1
 80084a8:	801a      	strh	r2, [r3, #0]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	18d3      	adds	r3, r2, r3
 80084b4:	187a      	adds	r2, r7, r1
 80084b6:	8812      	ldrh	r2, [r2, #0]
 80084b8:	49a2      	ldr	r1, [pc, #648]	; (8008744 <USB_ActivateEndpoint+0x368>)
 80084ba:	430a      	orrs	r2, r1
 80084bc:	b292      	uxth	r2, r2
 80084be:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	7b1b      	ldrb	r3, [r3, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d000      	beq.n	80084ca <USB_ActivateEndpoint+0xee>
 80084c8:	e150      	b.n	800876c <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d100      	bne.n	80084d4 <USB_ActivateEndpoint+0xf8>
 80084d2:	e07a      	b.n	80085ca <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	61bb      	str	r3, [r7, #24]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2250      	movs	r2, #80	; 0x50
 80084dc:	5a9b      	ldrh	r3, [r3, r2]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	001a      	movs	r2, r3
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	189b      	adds	r3, r3, r2
 80084e6:	61bb      	str	r3, [r7, #24]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	00da      	lsls	r2, r3, #3
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	18d3      	adds	r3, r2, r3
 80084f2:	2280      	movs	r2, #128	; 0x80
 80084f4:	00d2      	lsls	r2, r2, #3
 80084f6:	4694      	mov	ip, r2
 80084f8:	4463      	add	r3, ip
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	88db      	ldrh	r3, [r3, #6]
 8008500:	085b      	lsrs	r3, r3, #1
 8008502:	b29b      	uxth	r3, r3
 8008504:	18db      	adds	r3, r3, r3
 8008506:	b29a      	uxth	r2, r3
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	18d2      	adds	r2, r2, r3
 8008516:	2112      	movs	r1, #18
 8008518:	187b      	adds	r3, r7, r1
 800851a:	8812      	ldrh	r2, [r2, #0]
 800851c:	801a      	strh	r2, [r3, #0]
 800851e:	187b      	adds	r3, r7, r1
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	2240      	movs	r2, #64	; 0x40
 8008524:	4013      	ands	r3, r2
 8008526:	d016      	beq.n	8008556 <USB_ActivateEndpoint+0x17a>
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	18d3      	adds	r3, r2, r3
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29a      	uxth	r2, r3
 8008536:	2010      	movs	r0, #16
 8008538:	183b      	adds	r3, r7, r0
 800853a:	4983      	ldr	r1, [pc, #524]	; (8008748 <USB_ActivateEndpoint+0x36c>)
 800853c:	400a      	ands	r2, r1
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	18d3      	adds	r3, r2, r3
 800854a:	183a      	adds	r2, r7, r0
 800854c:	8812      	ldrh	r2, [r2, #0]
 800854e:	497f      	ldr	r1, [pc, #508]	; (800874c <USB_ActivateEndpoint+0x370>)
 8008550:	430a      	orrs	r2, r1
 8008552:	b292      	uxth	r2, r2
 8008554:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	78db      	ldrb	r3, [r3, #3]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d01d      	beq.n	800859a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	18d3      	adds	r3, r2, r3
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	b29a      	uxth	r2, r3
 800856c:	200c      	movs	r0, #12
 800856e:	183b      	adds	r3, r7, r0
 8008570:	4977      	ldr	r1, [pc, #476]	; (8008750 <USB_ActivateEndpoint+0x374>)
 8008572:	400a      	ands	r2, r1
 8008574:	801a      	strh	r2, [r3, #0]
 8008576:	183b      	adds	r3, r7, r0
 8008578:	183a      	adds	r2, r7, r0
 800857a:	8812      	ldrh	r2, [r2, #0]
 800857c:	2120      	movs	r1, #32
 800857e:	404a      	eors	r2, r1
 8008580:	801a      	strh	r2, [r3, #0]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	18d3      	adds	r3, r2, r3
 800858c:	183a      	adds	r2, r7, r0
 800858e:	8812      	ldrh	r2, [r2, #0]
 8008590:	496c      	ldr	r1, [pc, #432]	; (8008744 <USB_ActivateEndpoint+0x368>)
 8008592:	430a      	orrs	r2, r1
 8008594:	b292      	uxth	r2, r2
 8008596:	801a      	strh	r2, [r3, #0]
 8008598:	e27a      	b.n	8008a90 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	18d3      	adds	r3, r2, r3
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	200e      	movs	r0, #14
 80085aa:	183b      	adds	r3, r7, r0
 80085ac:	4968      	ldr	r1, [pc, #416]	; (8008750 <USB_ActivateEndpoint+0x374>)
 80085ae:	400a      	ands	r2, r1
 80085b0:	801a      	strh	r2, [r3, #0]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	18d3      	adds	r3, r2, r3
 80085bc:	183a      	adds	r2, r7, r0
 80085be:	8812      	ldrh	r2, [r2, #0]
 80085c0:	4960      	ldr	r1, [pc, #384]	; (8008744 <USB_ActivateEndpoint+0x368>)
 80085c2:	430a      	orrs	r2, r1
 80085c4:	b292      	uxth	r2, r2
 80085c6:	801a      	strh	r2, [r3, #0]
 80085c8:	e262      	b.n	8008a90 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	633b      	str	r3, [r7, #48]	; 0x30
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2250      	movs	r2, #80	; 0x50
 80085d2:	5a9b      	ldrh	r3, [r3, r2]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	001a      	movs	r2, r3
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	189b      	adds	r3, r3, r2
 80085dc:	633b      	str	r3, [r7, #48]	; 0x30
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	00da      	lsls	r2, r3, #3
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	18d3      	adds	r3, r2, r3
 80085e8:	4a5a      	ldr	r2, [pc, #360]	; (8008754 <USB_ActivateEndpoint+0x378>)
 80085ea:	4694      	mov	ip, r2
 80085ec:	4463      	add	r3, ip
 80085ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	88db      	ldrh	r3, [r3, #6]
 80085f4:	085b      	lsrs	r3, r3, #1
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	18db      	adds	r3, r3, r3
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	62bb      	str	r3, [r7, #40]	; 0x28
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2250      	movs	r2, #80	; 0x50
 8008608:	5a9b      	ldrh	r3, [r3, r2]
 800860a:	b29b      	uxth	r3, r3
 800860c:	001a      	movs	r2, r3
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	189b      	adds	r3, r3, r2
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	00da      	lsls	r2, r3, #3
 800861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861c:	18d3      	adds	r3, r2, r3
 800861e:	4a4e      	ldr	r2, [pc, #312]	; (8008758 <USB_ActivateEndpoint+0x37c>)
 8008620:	4694      	mov	ip, r2
 8008622:	4463      	add	r3, ip
 8008624:	627b      	str	r3, [r7, #36]	; 0x24
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d110      	bne.n	8008650 <USB_ActivateEndpoint+0x274>
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b29b      	uxth	r3, r3
 8008634:	4a49      	ldr	r2, [pc, #292]	; (800875c <USB_ActivateEndpoint+0x380>)
 8008636:	4013      	ands	r3, r2
 8008638:	b29a      	uxth	r2, r3
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	4a46      	ldr	r2, [pc, #280]	; (8008760 <USB_ActivateEndpoint+0x384>)
 8008646:	4313      	orrs	r3, r2
 8008648:	b29a      	uxth	r2, r3
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	801a      	strh	r2, [r3, #0]
 800864e:	e02b      	b.n	80086a8 <USB_ActivateEndpoint+0x2cc>
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b3e      	cmp	r3, #62	; 0x3e
 8008656:	d812      	bhi.n	800867e <USB_ActivateEndpoint+0x2a2>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	085b      	lsrs	r3, r3, #1
 800865e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	2201      	movs	r2, #1
 8008666:	4013      	ands	r3, r2
 8008668:	d002      	beq.n	8008670 <USB_ActivateEndpoint+0x294>
 800866a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800866c:	3301      	adds	r3, #1
 800866e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008672:	b29b      	uxth	r3, r3
 8008674:	029b      	lsls	r3, r3, #10
 8008676:	b29a      	uxth	r2, r3
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	801a      	strh	r2, [r3, #0]
 800867c:	e014      	b.n	80086a8 <USB_ActivateEndpoint+0x2cc>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	095b      	lsrs	r3, r3, #5
 8008684:	66bb      	str	r3, [r7, #104]	; 0x68
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	221f      	movs	r2, #31
 800868c:	4013      	ands	r3, r2
 800868e:	d102      	bne.n	8008696 <USB_ActivateEndpoint+0x2ba>
 8008690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008692:	3b01      	subs	r3, #1
 8008694:	66bb      	str	r3, [r7, #104]	; 0x68
 8008696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008698:	b29b      	uxth	r3, r3
 800869a:	029b      	lsls	r3, r3, #10
 800869c:	b29b      	uxth	r3, r3
 800869e:	4a30      	ldr	r2, [pc, #192]	; (8008760 <USB_ActivateEndpoint+0x384>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	18d2      	adds	r2, r2, r3
 80086b2:	2122      	movs	r1, #34	; 0x22
 80086b4:	187b      	adds	r3, r7, r1
 80086b6:	8812      	ldrh	r2, [r2, #0]
 80086b8:	801a      	strh	r2, [r3, #0]
 80086ba:	187b      	adds	r3, r7, r1
 80086bc:	881a      	ldrh	r2, [r3, #0]
 80086be:	2380      	movs	r3, #128	; 0x80
 80086c0:	01db      	lsls	r3, r3, #7
 80086c2:	4013      	ands	r3, r2
 80086c4:	d016      	beq.n	80086f4 <USB_ActivateEndpoint+0x318>
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	18d3      	adds	r3, r2, r3
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	2020      	movs	r0, #32
 80086d6:	183b      	adds	r3, r7, r0
 80086d8:	491b      	ldr	r1, [pc, #108]	; (8008748 <USB_ActivateEndpoint+0x36c>)
 80086da:	400a      	ands	r2, r1
 80086dc:	801a      	strh	r2, [r3, #0]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	18d3      	adds	r3, r2, r3
 80086e8:	183a      	adds	r2, r7, r0
 80086ea:	8812      	ldrh	r2, [r2, #0]
 80086ec:	491d      	ldr	r1, [pc, #116]	; (8008764 <USB_ActivateEndpoint+0x388>)
 80086ee:	430a      	orrs	r2, r1
 80086f0:	b292      	uxth	r2, r2
 80086f2:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	18d3      	adds	r3, r2, r3
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	b29a      	uxth	r2, r3
 8008702:	201e      	movs	r0, #30
 8008704:	183b      	adds	r3, r7, r0
 8008706:	4918      	ldr	r1, [pc, #96]	; (8008768 <USB_ActivateEndpoint+0x38c>)
 8008708:	400a      	ands	r2, r1
 800870a:	801a      	strh	r2, [r3, #0]
 800870c:	183b      	adds	r3, r7, r0
 800870e:	183a      	adds	r2, r7, r0
 8008710:	8812      	ldrh	r2, [r2, #0]
 8008712:	2180      	movs	r1, #128	; 0x80
 8008714:	0149      	lsls	r1, r1, #5
 8008716:	404a      	eors	r2, r1
 8008718:	801a      	strh	r2, [r3, #0]
 800871a:	183b      	adds	r3, r7, r0
 800871c:	183a      	adds	r2, r7, r0
 800871e:	8812      	ldrh	r2, [r2, #0]
 8008720:	2180      	movs	r1, #128	; 0x80
 8008722:	0189      	lsls	r1, r1, #6
 8008724:	404a      	eors	r2, r1
 8008726:	801a      	strh	r2, [r3, #0]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	18d3      	adds	r3, r2, r3
 8008732:	183a      	adds	r2, r7, r0
 8008734:	8812      	ldrh	r2, [r2, #0]
 8008736:	4903      	ldr	r1, [pc, #12]	; (8008744 <USB_ActivateEndpoint+0x368>)
 8008738:	430a      	orrs	r2, r1
 800873a:	b292      	uxth	r2, r2
 800873c:	801a      	strh	r2, [r3, #0]
 800873e:	e1a7      	b.n	8008a90 <USB_ActivateEndpoint+0x6b4>
 8008740:	ffff898f 	.word	0xffff898f
 8008744:	ffff8080 	.word	0xffff8080
 8008748:	ffff8f8f 	.word	0xffff8f8f
 800874c:	ffff80c0 	.word	0xffff80c0
 8008750:	ffff8fbf 	.word	0xffff8fbf
 8008754:	00000404 	.word	0x00000404
 8008758:	00000406 	.word	0x00000406
 800875c:	ffff83ff 	.word	0xffff83ff
 8008760:	ffff8000 	.word	0xffff8000
 8008764:	ffffc080 	.word	0xffffc080
 8008768:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	78db      	ldrb	r3, [r3, #3]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d117      	bne.n	80087a4 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	18d3      	adds	r3, r2, r3
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	b29a      	uxth	r2, r3
 8008782:	2062      	movs	r0, #98	; 0x62
 8008784:	183b      	adds	r3, r7, r0
 8008786:	49c6      	ldr	r1, [pc, #792]	; (8008aa0 <USB_ActivateEndpoint+0x6c4>)
 8008788:	400a      	ands	r2, r1
 800878a:	801a      	strh	r2, [r3, #0]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	18d3      	adds	r3, r2, r3
 8008796:	183a      	adds	r2, r7, r0
 8008798:	8812      	ldrh	r2, [r2, #0]
 800879a:	49c2      	ldr	r1, [pc, #776]	; (8008aa4 <USB_ActivateEndpoint+0x6c8>)
 800879c:	430a      	orrs	r2, r1
 800879e:	b292      	uxth	r2, r2
 80087a0:	801a      	strh	r2, [r3, #0]
 80087a2:	e016      	b.n	80087d2 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	18d3      	adds	r3, r2, r3
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	2064      	movs	r0, #100	; 0x64
 80087b4:	183b      	adds	r3, r7, r0
 80087b6:	49bc      	ldr	r1, [pc, #752]	; (8008aa8 <USB_ActivateEndpoint+0x6cc>)
 80087b8:	400a      	ands	r2, r1
 80087ba:	801a      	strh	r2, [r3, #0]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	18d3      	adds	r3, r2, r3
 80087c6:	183a      	adds	r2, r7, r0
 80087c8:	8812      	ldrh	r2, [r2, #0]
 80087ca:	49b8      	ldr	r1, [pc, #736]	; (8008aac <USB_ActivateEndpoint+0x6d0>)
 80087cc:	430a      	orrs	r2, r1
 80087ce:	b292      	uxth	r2, r2
 80087d0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2250      	movs	r2, #80	; 0x50
 80087da:	5a9b      	ldrh	r3, [r3, r2]
 80087dc:	b29b      	uxth	r3, r3
 80087de:	001a      	movs	r2, r3
 80087e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087e2:	189b      	adds	r3, r3, r2
 80087e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	00da      	lsls	r2, r3, #3
 80087ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ee:	18d3      	adds	r3, r2, r3
 80087f0:	2280      	movs	r2, #128	; 0x80
 80087f2:	00d2      	lsls	r2, r2, #3
 80087f4:	4694      	mov	ip, r2
 80087f6:	4463      	add	r3, ip
 80087f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	891b      	ldrh	r3, [r3, #8]
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	b29b      	uxth	r3, r3
 8008802:	18db      	adds	r3, r3, r3
 8008804:	b29a      	uxth	r2, r3
 8008806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008808:	801a      	strh	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	657b      	str	r3, [r7, #84]	; 0x54
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2250      	movs	r2, #80	; 0x50
 8008812:	5a9b      	ldrh	r3, [r3, r2]
 8008814:	b29b      	uxth	r3, r3
 8008816:	001a      	movs	r2, r3
 8008818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800881a:	189b      	adds	r3, r3, r2
 800881c:	657b      	str	r3, [r7, #84]	; 0x54
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	00da      	lsls	r2, r3, #3
 8008824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008826:	18d3      	adds	r3, r2, r3
 8008828:	4aa1      	ldr	r2, [pc, #644]	; (8008ab0 <USB_ActivateEndpoint+0x6d4>)
 800882a:	4694      	mov	ip, r2
 800882c:	4463      	add	r3, ip
 800882e:	653b      	str	r3, [r7, #80]	; 0x50
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	895b      	ldrh	r3, [r3, #10]
 8008834:	085b      	lsrs	r3, r3, #1
 8008836:	b29b      	uxth	r3, r3
 8008838:	18db      	adds	r3, r3, r3
 800883a:	b29a      	uxth	r2, r3
 800883c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800883e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	785b      	ldrb	r3, [r3, #1]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d000      	beq.n	800884a <USB_ActivateEndpoint+0x46e>
 8008848:	e087      	b.n	800895a <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	18d2      	adds	r2, r2, r3
 8008854:	2140      	movs	r1, #64	; 0x40
 8008856:	187b      	adds	r3, r7, r1
 8008858:	8812      	ldrh	r2, [r2, #0]
 800885a:	801a      	strh	r2, [r3, #0]
 800885c:	187b      	adds	r3, r7, r1
 800885e:	881a      	ldrh	r2, [r3, #0]
 8008860:	2380      	movs	r3, #128	; 0x80
 8008862:	01db      	lsls	r3, r3, #7
 8008864:	4013      	ands	r3, r2
 8008866:	d016      	beq.n	8008896 <USB_ActivateEndpoint+0x4ba>
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	18d3      	adds	r3, r2, r3
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29a      	uxth	r2, r3
 8008876:	203e      	movs	r0, #62	; 0x3e
 8008878:	183b      	adds	r3, r7, r0
 800887a:	4989      	ldr	r1, [pc, #548]	; (8008aa0 <USB_ActivateEndpoint+0x6c4>)
 800887c:	400a      	ands	r2, r1
 800887e:	801a      	strh	r2, [r3, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	18d3      	adds	r3, r2, r3
 800888a:	183a      	adds	r2, r7, r0
 800888c:	8812      	ldrh	r2, [r2, #0]
 800888e:	4989      	ldr	r1, [pc, #548]	; (8008ab4 <USB_ActivateEndpoint+0x6d8>)
 8008890:	430a      	orrs	r2, r1
 8008892:	b292      	uxth	r2, r2
 8008894:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	18d2      	adds	r2, r2, r3
 80088a0:	213c      	movs	r1, #60	; 0x3c
 80088a2:	187b      	adds	r3, r7, r1
 80088a4:	8812      	ldrh	r2, [r2, #0]
 80088a6:	801a      	strh	r2, [r3, #0]
 80088a8:	187b      	adds	r3, r7, r1
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	2240      	movs	r2, #64	; 0x40
 80088ae:	4013      	ands	r3, r2
 80088b0:	d016      	beq.n	80088e0 <USB_ActivateEndpoint+0x504>
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	18d3      	adds	r3, r2, r3
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	b29a      	uxth	r2, r3
 80088c0:	203a      	movs	r0, #58	; 0x3a
 80088c2:	183b      	adds	r3, r7, r0
 80088c4:	4976      	ldr	r1, [pc, #472]	; (8008aa0 <USB_ActivateEndpoint+0x6c4>)
 80088c6:	400a      	ands	r2, r1
 80088c8:	801a      	strh	r2, [r3, #0]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	18d3      	adds	r3, r2, r3
 80088d4:	183a      	adds	r2, r7, r0
 80088d6:	8812      	ldrh	r2, [r2, #0]
 80088d8:	4977      	ldr	r1, [pc, #476]	; (8008ab8 <USB_ActivateEndpoint+0x6dc>)
 80088da:	430a      	orrs	r2, r1
 80088dc:	b292      	uxth	r2, r2
 80088de:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	18d3      	adds	r3, r2, r3
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	2038      	movs	r0, #56	; 0x38
 80088f0:	183b      	adds	r3, r7, r0
 80088f2:	4972      	ldr	r1, [pc, #456]	; (8008abc <USB_ActivateEndpoint+0x6e0>)
 80088f4:	400a      	ands	r2, r1
 80088f6:	801a      	strh	r2, [r3, #0]
 80088f8:	183b      	adds	r3, r7, r0
 80088fa:	183a      	adds	r2, r7, r0
 80088fc:	8812      	ldrh	r2, [r2, #0]
 80088fe:	2180      	movs	r1, #128	; 0x80
 8008900:	0149      	lsls	r1, r1, #5
 8008902:	404a      	eors	r2, r1
 8008904:	801a      	strh	r2, [r3, #0]
 8008906:	183b      	adds	r3, r7, r0
 8008908:	183a      	adds	r2, r7, r0
 800890a:	8812      	ldrh	r2, [r2, #0]
 800890c:	2180      	movs	r1, #128	; 0x80
 800890e:	0189      	lsls	r1, r1, #6
 8008910:	404a      	eors	r2, r1
 8008912:	801a      	strh	r2, [r3, #0]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	18d3      	adds	r3, r2, r3
 800891e:	183a      	adds	r2, r7, r0
 8008920:	8812      	ldrh	r2, [r2, #0]
 8008922:	4962      	ldr	r1, [pc, #392]	; (8008aac <USB_ActivateEndpoint+0x6d0>)
 8008924:	430a      	orrs	r2, r1
 8008926:	b292      	uxth	r2, r2
 8008928:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	18d3      	adds	r3, r2, r3
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29a      	uxth	r2, r3
 8008938:	2036      	movs	r0, #54	; 0x36
 800893a:	183b      	adds	r3, r7, r0
 800893c:	4960      	ldr	r1, [pc, #384]	; (8008ac0 <USB_ActivateEndpoint+0x6e4>)
 800893e:	400a      	ands	r2, r1
 8008940:	801a      	strh	r2, [r3, #0]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	18d3      	adds	r3, r2, r3
 800894c:	183a      	adds	r2, r7, r0
 800894e:	8812      	ldrh	r2, [r2, #0]
 8008950:	4956      	ldr	r1, [pc, #344]	; (8008aac <USB_ActivateEndpoint+0x6d0>)
 8008952:	430a      	orrs	r2, r1
 8008954:	b292      	uxth	r2, r2
 8008956:	801a      	strh	r2, [r3, #0]
 8008958:	e09a      	b.n	8008a90 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	18d2      	adds	r2, r2, r3
 8008964:	214e      	movs	r1, #78	; 0x4e
 8008966:	187b      	adds	r3, r7, r1
 8008968:	8812      	ldrh	r2, [r2, #0]
 800896a:	801a      	strh	r2, [r3, #0]
 800896c:	187b      	adds	r3, r7, r1
 800896e:	881a      	ldrh	r2, [r3, #0]
 8008970:	2380      	movs	r3, #128	; 0x80
 8008972:	01db      	lsls	r3, r3, #7
 8008974:	4013      	ands	r3, r2
 8008976:	d016      	beq.n	80089a6 <USB_ActivateEndpoint+0x5ca>
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	18d3      	adds	r3, r2, r3
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	b29a      	uxth	r2, r3
 8008986:	204c      	movs	r0, #76	; 0x4c
 8008988:	183b      	adds	r3, r7, r0
 800898a:	4945      	ldr	r1, [pc, #276]	; (8008aa0 <USB_ActivateEndpoint+0x6c4>)
 800898c:	400a      	ands	r2, r1
 800898e:	801a      	strh	r2, [r3, #0]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	18d3      	adds	r3, r2, r3
 800899a:	183a      	adds	r2, r7, r0
 800899c:	8812      	ldrh	r2, [r2, #0]
 800899e:	4945      	ldr	r1, [pc, #276]	; (8008ab4 <USB_ActivateEndpoint+0x6d8>)
 80089a0:	430a      	orrs	r2, r1
 80089a2:	b292      	uxth	r2, r2
 80089a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	18d2      	adds	r2, r2, r3
 80089b0:	214a      	movs	r1, #74	; 0x4a
 80089b2:	187b      	adds	r3, r7, r1
 80089b4:	8812      	ldrh	r2, [r2, #0]
 80089b6:	801a      	strh	r2, [r3, #0]
 80089b8:	187b      	adds	r3, r7, r1
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	2240      	movs	r2, #64	; 0x40
 80089be:	4013      	ands	r3, r2
 80089c0:	d016      	beq.n	80089f0 <USB_ActivateEndpoint+0x614>
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	18d3      	adds	r3, r2, r3
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	2048      	movs	r0, #72	; 0x48
 80089d2:	183b      	adds	r3, r7, r0
 80089d4:	4932      	ldr	r1, [pc, #200]	; (8008aa0 <USB_ActivateEndpoint+0x6c4>)
 80089d6:	400a      	ands	r2, r1
 80089d8:	801a      	strh	r2, [r3, #0]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	18d3      	adds	r3, r2, r3
 80089e4:	183a      	adds	r2, r7, r0
 80089e6:	8812      	ldrh	r2, [r2, #0]
 80089e8:	4933      	ldr	r1, [pc, #204]	; (8008ab8 <USB_ActivateEndpoint+0x6dc>)
 80089ea:	430a      	orrs	r2, r1
 80089ec:	b292      	uxth	r2, r2
 80089ee:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	78db      	ldrb	r3, [r3, #3]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d01d      	beq.n	8008a34 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	18d3      	adds	r3, r2, r3
 8008a02:	881b      	ldrh	r3, [r3, #0]
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	2044      	movs	r0, #68	; 0x44
 8008a08:	183b      	adds	r3, r7, r0
 8008a0a:	492d      	ldr	r1, [pc, #180]	; (8008ac0 <USB_ActivateEndpoint+0x6e4>)
 8008a0c:	400a      	ands	r2, r1
 8008a0e:	801a      	strh	r2, [r3, #0]
 8008a10:	183b      	adds	r3, r7, r0
 8008a12:	183a      	adds	r2, r7, r0
 8008a14:	8812      	ldrh	r2, [r2, #0]
 8008a16:	2120      	movs	r1, #32
 8008a18:	404a      	eors	r2, r1
 8008a1a:	801a      	strh	r2, [r3, #0]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	18d3      	adds	r3, r2, r3
 8008a26:	183a      	adds	r2, r7, r0
 8008a28:	8812      	ldrh	r2, [r2, #0]
 8008a2a:	4920      	ldr	r1, [pc, #128]	; (8008aac <USB_ActivateEndpoint+0x6d0>)
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	b292      	uxth	r2, r2
 8008a30:	801a      	strh	r2, [r3, #0]
 8008a32:	e016      	b.n	8008a62 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	18d3      	adds	r3, r2, r3
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	2046      	movs	r0, #70	; 0x46
 8008a44:	183b      	adds	r3, r7, r0
 8008a46:	491e      	ldr	r1, [pc, #120]	; (8008ac0 <USB_ActivateEndpoint+0x6e4>)
 8008a48:	400a      	ands	r2, r1
 8008a4a:	801a      	strh	r2, [r3, #0]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	18d3      	adds	r3, r2, r3
 8008a56:	183a      	adds	r2, r7, r0
 8008a58:	8812      	ldrh	r2, [r2, #0]
 8008a5a:	4914      	ldr	r1, [pc, #80]	; (8008aac <USB_ActivateEndpoint+0x6d0>)
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	18d3      	adds	r3, r2, r3
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	2042      	movs	r0, #66	; 0x42
 8008a72:	183b      	adds	r3, r7, r0
 8008a74:	4911      	ldr	r1, [pc, #68]	; (8008abc <USB_ActivateEndpoint+0x6e0>)
 8008a76:	400a      	ands	r2, r1
 8008a78:	801a      	strh	r2, [r3, #0]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	18d3      	adds	r3, r2, r3
 8008a84:	183a      	adds	r2, r7, r0
 8008a86:	8812      	ldrh	r2, [r2, #0]
 8008a88:	4908      	ldr	r1, [pc, #32]	; (8008aac <USB_ActivateEndpoint+0x6d0>)
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	b292      	uxth	r2, r2
 8008a8e:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8008a90:	236f      	movs	r3, #111	; 0x6f
 8008a92:	18fb      	adds	r3, r7, r3
 8008a94:	781b      	ldrb	r3, [r3, #0]
}
 8008a96:	0018      	movs	r0, r3
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	b01c      	add	sp, #112	; 0x70
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	ffff8f8f 	.word	0xffff8f8f
 8008aa4:	ffff8180 	.word	0xffff8180
 8008aa8:	ffff8e8f 	.word	0xffff8e8f
 8008aac:	ffff8080 	.word	0xffff8080
 8008ab0:	00000404 	.word	0x00000404
 8008ab4:	ffffc080 	.word	0xffffc080
 8008ab8:	ffff80c0 	.word	0xffff80c0
 8008abc:	ffffbf8f 	.word	0xffffbf8f
 8008ac0:	ffff8fbf 	.word	0xffff8fbf

08008ac4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08c      	sub	sp, #48	; 0x30
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	7b1b      	ldrb	r3, [r3, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d000      	beq.n	8008ad8 <USB_DeactivateEndpoint+0x14>
 8008ad6:	e07e      	b.n	8008bd6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	785b      	ldrb	r3, [r3, #1]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d03c      	beq.n	8008b5a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	18d2      	adds	r2, r2, r3
 8008aea:	210c      	movs	r1, #12
 8008aec:	187b      	adds	r3, r7, r1
 8008aee:	8812      	ldrh	r2, [r2, #0]
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	187b      	adds	r3, r7, r1
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	2240      	movs	r2, #64	; 0x40
 8008af8:	4013      	ands	r3, r2
 8008afa:	d016      	beq.n	8008b2a <USB_DeactivateEndpoint+0x66>
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	18d3      	adds	r3, r2, r3
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	200a      	movs	r0, #10
 8008b0c:	183b      	adds	r3, r7, r0
 8008b0e:	49c7      	ldr	r1, [pc, #796]	; (8008e2c <USB_DeactivateEndpoint+0x368>)
 8008b10:	400a      	ands	r2, r1
 8008b12:	801a      	strh	r2, [r3, #0]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	18d3      	adds	r3, r2, r3
 8008b1e:	183a      	adds	r2, r7, r0
 8008b20:	8812      	ldrh	r2, [r2, #0]
 8008b22:	49c3      	ldr	r1, [pc, #780]	; (8008e30 <USB_DeactivateEndpoint+0x36c>)
 8008b24:	430a      	orrs	r2, r1
 8008b26:	b292      	uxth	r2, r2
 8008b28:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	18d3      	adds	r3, r2, r3
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	2008      	movs	r0, #8
 8008b3a:	183b      	adds	r3, r7, r0
 8008b3c:	49bd      	ldr	r1, [pc, #756]	; (8008e34 <USB_DeactivateEndpoint+0x370>)
 8008b3e:	400a      	ands	r2, r1
 8008b40:	801a      	strh	r2, [r3, #0]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	18d3      	adds	r3, r2, r3
 8008b4c:	183a      	adds	r2, r7, r0
 8008b4e:	8812      	ldrh	r2, [r2, #0]
 8008b50:	49b9      	ldr	r1, [pc, #740]	; (8008e38 <USB_DeactivateEndpoint+0x374>)
 8008b52:	430a      	orrs	r2, r1
 8008b54:	b292      	uxth	r2, r2
 8008b56:	801a      	strh	r2, [r3, #0]
 8008b58:	e163      	b.n	8008e22 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	18d2      	adds	r2, r2, r3
 8008b64:	2112      	movs	r1, #18
 8008b66:	187b      	adds	r3, r7, r1
 8008b68:	8812      	ldrh	r2, [r2, #0]
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	187b      	adds	r3, r7, r1
 8008b6e:	881a      	ldrh	r2, [r3, #0]
 8008b70:	2380      	movs	r3, #128	; 0x80
 8008b72:	01db      	lsls	r3, r3, #7
 8008b74:	4013      	ands	r3, r2
 8008b76:	d016      	beq.n	8008ba6 <USB_DeactivateEndpoint+0xe2>
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	18d3      	adds	r3, r2, r3
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	2010      	movs	r0, #16
 8008b88:	183b      	adds	r3, r7, r0
 8008b8a:	49a8      	ldr	r1, [pc, #672]	; (8008e2c <USB_DeactivateEndpoint+0x368>)
 8008b8c:	400a      	ands	r2, r1
 8008b8e:	801a      	strh	r2, [r3, #0]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	18d3      	adds	r3, r2, r3
 8008b9a:	183a      	adds	r2, r7, r0
 8008b9c:	8812      	ldrh	r2, [r2, #0]
 8008b9e:	49a7      	ldr	r1, [pc, #668]	; (8008e3c <USB_DeactivateEndpoint+0x378>)
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	b292      	uxth	r2, r2
 8008ba4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	18d3      	adds	r3, r2, r3
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	200e      	movs	r0, #14
 8008bb6:	183b      	adds	r3, r7, r0
 8008bb8:	49a1      	ldr	r1, [pc, #644]	; (8008e40 <USB_DeactivateEndpoint+0x37c>)
 8008bba:	400a      	ands	r2, r1
 8008bbc:	801a      	strh	r2, [r3, #0]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	18d3      	adds	r3, r2, r3
 8008bc8:	183a      	adds	r2, r7, r0
 8008bca:	8812      	ldrh	r2, [r2, #0]
 8008bcc:	499a      	ldr	r1, [pc, #616]	; (8008e38 <USB_DeactivateEndpoint+0x374>)
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	b292      	uxth	r2, r2
 8008bd2:	801a      	strh	r2, [r3, #0]
 8008bd4:	e125      	b.n	8008e22 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	785b      	ldrb	r3, [r3, #1]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d000      	beq.n	8008be0 <USB_DeactivateEndpoint+0x11c>
 8008bde:	e090      	b.n	8008d02 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	18d2      	adds	r2, r2, r3
 8008bea:	2120      	movs	r1, #32
 8008bec:	187b      	adds	r3, r7, r1
 8008bee:	8812      	ldrh	r2, [r2, #0]
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	187b      	adds	r3, r7, r1
 8008bf4:	881a      	ldrh	r2, [r3, #0]
 8008bf6:	2380      	movs	r3, #128	; 0x80
 8008bf8:	01db      	lsls	r3, r3, #7
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	d016      	beq.n	8008c2c <USB_DeactivateEndpoint+0x168>
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	18d3      	adds	r3, r2, r3
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	201e      	movs	r0, #30
 8008c0e:	183b      	adds	r3, r7, r0
 8008c10:	4986      	ldr	r1, [pc, #536]	; (8008e2c <USB_DeactivateEndpoint+0x368>)
 8008c12:	400a      	ands	r2, r1
 8008c14:	801a      	strh	r2, [r3, #0]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	18d3      	adds	r3, r2, r3
 8008c20:	183a      	adds	r2, r7, r0
 8008c22:	8812      	ldrh	r2, [r2, #0]
 8008c24:	4985      	ldr	r1, [pc, #532]	; (8008e3c <USB_DeactivateEndpoint+0x378>)
 8008c26:	430a      	orrs	r2, r1
 8008c28:	b292      	uxth	r2, r2
 8008c2a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	18d2      	adds	r2, r2, r3
 8008c36:	211c      	movs	r1, #28
 8008c38:	187b      	adds	r3, r7, r1
 8008c3a:	8812      	ldrh	r2, [r2, #0]
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	187b      	adds	r3, r7, r1
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	2240      	movs	r2, #64	; 0x40
 8008c44:	4013      	ands	r3, r2
 8008c46:	d016      	beq.n	8008c76 <USB_DeactivateEndpoint+0x1b2>
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	18d3      	adds	r3, r2, r3
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	201a      	movs	r0, #26
 8008c58:	183b      	adds	r3, r7, r0
 8008c5a:	4974      	ldr	r1, [pc, #464]	; (8008e2c <USB_DeactivateEndpoint+0x368>)
 8008c5c:	400a      	ands	r2, r1
 8008c5e:	801a      	strh	r2, [r3, #0]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	18d3      	adds	r3, r2, r3
 8008c6a:	183a      	adds	r2, r7, r0
 8008c6c:	8812      	ldrh	r2, [r2, #0]
 8008c6e:	4970      	ldr	r1, [pc, #448]	; (8008e30 <USB_DeactivateEndpoint+0x36c>)
 8008c70:	430a      	orrs	r2, r1
 8008c72:	b292      	uxth	r2, r2
 8008c74:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	18d3      	adds	r3, r2, r3
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	2018      	movs	r0, #24
 8008c86:	183b      	adds	r3, r7, r0
 8008c88:	4968      	ldr	r1, [pc, #416]	; (8008e2c <USB_DeactivateEndpoint+0x368>)
 8008c8a:	400a      	ands	r2, r1
 8008c8c:	801a      	strh	r2, [r3, #0]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	18d3      	adds	r3, r2, r3
 8008c98:	183a      	adds	r2, r7, r0
 8008c9a:	8812      	ldrh	r2, [r2, #0]
 8008c9c:	4964      	ldr	r1, [pc, #400]	; (8008e30 <USB_DeactivateEndpoint+0x36c>)
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	b292      	uxth	r2, r2
 8008ca2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	18d3      	adds	r3, r2, r3
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	2016      	movs	r0, #22
 8008cb4:	183b      	adds	r3, r7, r0
 8008cb6:	4962      	ldr	r1, [pc, #392]	; (8008e40 <USB_DeactivateEndpoint+0x37c>)
 8008cb8:	400a      	ands	r2, r1
 8008cba:	801a      	strh	r2, [r3, #0]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	18d3      	adds	r3, r2, r3
 8008cc6:	183a      	adds	r2, r7, r0
 8008cc8:	8812      	ldrh	r2, [r2, #0]
 8008cca:	495b      	ldr	r1, [pc, #364]	; (8008e38 <USB_DeactivateEndpoint+0x374>)
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	b292      	uxth	r2, r2
 8008cd0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	18d3      	adds	r3, r2, r3
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	2014      	movs	r0, #20
 8008ce2:	183b      	adds	r3, r7, r0
 8008ce4:	4953      	ldr	r1, [pc, #332]	; (8008e34 <USB_DeactivateEndpoint+0x370>)
 8008ce6:	400a      	ands	r2, r1
 8008ce8:	801a      	strh	r2, [r3, #0]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	18d3      	adds	r3, r2, r3
 8008cf4:	183a      	adds	r2, r7, r0
 8008cf6:	8812      	ldrh	r2, [r2, #0]
 8008cf8:	494f      	ldr	r1, [pc, #316]	; (8008e38 <USB_DeactivateEndpoint+0x374>)
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	b292      	uxth	r2, r2
 8008cfe:	801a      	strh	r2, [r3, #0]
 8008d00:	e08f      	b.n	8008e22 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	18d2      	adds	r2, r2, r3
 8008d0c:	212e      	movs	r1, #46	; 0x2e
 8008d0e:	187b      	adds	r3, r7, r1
 8008d10:	8812      	ldrh	r2, [r2, #0]
 8008d12:	801a      	strh	r2, [r3, #0]
 8008d14:	187b      	adds	r3, r7, r1
 8008d16:	881a      	ldrh	r2, [r3, #0]
 8008d18:	2380      	movs	r3, #128	; 0x80
 8008d1a:	01db      	lsls	r3, r3, #7
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	d016      	beq.n	8008d4e <USB_DeactivateEndpoint+0x28a>
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	18d3      	adds	r3, r2, r3
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	202c      	movs	r0, #44	; 0x2c
 8008d30:	183b      	adds	r3, r7, r0
 8008d32:	493e      	ldr	r1, [pc, #248]	; (8008e2c <USB_DeactivateEndpoint+0x368>)
 8008d34:	400a      	ands	r2, r1
 8008d36:	801a      	strh	r2, [r3, #0]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	18d3      	adds	r3, r2, r3
 8008d42:	183a      	adds	r2, r7, r0
 8008d44:	8812      	ldrh	r2, [r2, #0]
 8008d46:	493d      	ldr	r1, [pc, #244]	; (8008e3c <USB_DeactivateEndpoint+0x378>)
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	b292      	uxth	r2, r2
 8008d4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	18d2      	adds	r2, r2, r3
 8008d58:	212a      	movs	r1, #42	; 0x2a
 8008d5a:	187b      	adds	r3, r7, r1
 8008d5c:	8812      	ldrh	r2, [r2, #0]
 8008d5e:	801a      	strh	r2, [r3, #0]
 8008d60:	187b      	adds	r3, r7, r1
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	2240      	movs	r2, #64	; 0x40
 8008d66:	4013      	ands	r3, r2
 8008d68:	d016      	beq.n	8008d98 <USB_DeactivateEndpoint+0x2d4>
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	18d3      	adds	r3, r2, r3
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	2028      	movs	r0, #40	; 0x28
 8008d7a:	183b      	adds	r3, r7, r0
 8008d7c:	492b      	ldr	r1, [pc, #172]	; (8008e2c <USB_DeactivateEndpoint+0x368>)
 8008d7e:	400a      	ands	r2, r1
 8008d80:	801a      	strh	r2, [r3, #0]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	18d3      	adds	r3, r2, r3
 8008d8c:	183a      	adds	r2, r7, r0
 8008d8e:	8812      	ldrh	r2, [r2, #0]
 8008d90:	4927      	ldr	r1, [pc, #156]	; (8008e30 <USB_DeactivateEndpoint+0x36c>)
 8008d92:	430a      	orrs	r2, r1
 8008d94:	b292      	uxth	r2, r2
 8008d96:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	18d3      	adds	r3, r2, r3
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	2026      	movs	r0, #38	; 0x26
 8008da8:	183b      	adds	r3, r7, r0
 8008daa:	4920      	ldr	r1, [pc, #128]	; (8008e2c <USB_DeactivateEndpoint+0x368>)
 8008dac:	400a      	ands	r2, r1
 8008dae:	801a      	strh	r2, [r3, #0]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	18d3      	adds	r3, r2, r3
 8008dba:	183a      	adds	r2, r7, r0
 8008dbc:	8812      	ldrh	r2, [r2, #0]
 8008dbe:	491f      	ldr	r1, [pc, #124]	; (8008e3c <USB_DeactivateEndpoint+0x378>)
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	b292      	uxth	r2, r2
 8008dc4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	18d3      	adds	r3, r2, r3
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	2024      	movs	r0, #36	; 0x24
 8008dd6:	183b      	adds	r3, r7, r0
 8008dd8:	4916      	ldr	r1, [pc, #88]	; (8008e34 <USB_DeactivateEndpoint+0x370>)
 8008dda:	400a      	ands	r2, r1
 8008ddc:	801a      	strh	r2, [r3, #0]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	18d3      	adds	r3, r2, r3
 8008de8:	183a      	adds	r2, r7, r0
 8008dea:	8812      	ldrh	r2, [r2, #0]
 8008dec:	4912      	ldr	r1, [pc, #72]	; (8008e38 <USB_DeactivateEndpoint+0x374>)
 8008dee:	430a      	orrs	r2, r1
 8008df0:	b292      	uxth	r2, r2
 8008df2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	18d3      	adds	r3, r2, r3
 8008dfe:	881b      	ldrh	r3, [r3, #0]
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	2022      	movs	r0, #34	; 0x22
 8008e04:	183b      	adds	r3, r7, r0
 8008e06:	490e      	ldr	r1, [pc, #56]	; (8008e40 <USB_DeactivateEndpoint+0x37c>)
 8008e08:	400a      	ands	r2, r1
 8008e0a:	801a      	strh	r2, [r3, #0]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	18d3      	adds	r3, r2, r3
 8008e16:	183a      	adds	r2, r7, r0
 8008e18:	8812      	ldrh	r2, [r2, #0]
 8008e1a:	4907      	ldr	r1, [pc, #28]	; (8008e38 <USB_DeactivateEndpoint+0x374>)
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	b292      	uxth	r2, r2
 8008e20:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	0018      	movs	r0, r3
 8008e26:	46bd      	mov	sp, r7
 8008e28:	b00c      	add	sp, #48	; 0x30
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	ffff8f8f 	.word	0xffff8f8f
 8008e30:	ffff80c0 	.word	0xffff80c0
 8008e34:	ffff8fbf 	.word	0xffff8fbf
 8008e38:	ffff8080 	.word	0xffff8080
 8008e3c:	ffffc080 	.word	0xffffc080
 8008e40:	ffffbf8f 	.word	0xffffbf8f

08008e44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e44:	b590      	push	{r4, r7, lr}
 8008e46:	b0c3      	sub	sp, #268	; 0x10c
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	785b      	ldrb	r3, [r3, #1]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d001      	beq.n	8008e5a <USB_EPStartXfer+0x16>
 8008e56:	f000 fcef 	bl	8009838 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	699a      	ldr	r2, [r3, #24]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d905      	bls.n	8008e72 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	1d7a      	adds	r2, r7, #5
 8008e6c:	32ff      	adds	r2, #255	; 0xff
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	e004      	b.n	8008e7c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	1d7a      	adds	r2, r7, #5
 8008e78:	32ff      	adds	r2, #255	; 0xff
 8008e7a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	7b1b      	ldrb	r3, [r3, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d125      	bne.n	8008ed0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	6959      	ldr	r1, [r3, #20]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	88da      	ldrh	r2, [r3, #6]
 8008e8c:	1d7b      	adds	r3, r7, #5
 8008e8e:	33ff      	adds	r3, #255	; 0xff
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 f9c9 	bl	800a22c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	613b      	str	r3, [r7, #16]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2250      	movs	r2, #80	; 0x50
 8008ea2:	5a9b      	ldrh	r3, [r3, r2]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	001a      	movs	r2, r3
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	189b      	adds	r3, r3, r2
 8008eac:	613b      	str	r3, [r7, #16]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	00da      	lsls	r2, r3, #3
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	18d3      	adds	r3, r2, r3
 8008eb8:	4acc      	ldr	r2, [pc, #816]	; (80091ec <USB_EPStartXfer+0x3a8>)
 8008eba:	4694      	mov	ip, r2
 8008ebc:	4463      	add	r3, ip
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	1d7b      	adds	r3, r7, #5
 8008ec2:	33ff      	adds	r3, #255	; 0xff
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	801a      	strh	r2, [r3, #0]
 8008ecc:	f000 fc8f 	bl	80097ee <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	78db      	ldrb	r3, [r3, #3]
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d000      	beq.n	8008eda <USB_EPStartXfer+0x96>
 8008ed8:	e33a      	b.n	8009550 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	6a1a      	ldr	r2, [r3, #32]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d800      	bhi.n	8008ee8 <USB_EPStartXfer+0xa4>
 8008ee6:	e2df      	b.n	80094a8 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	18d3      	adds	r3, r2, r3
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	2056      	movs	r0, #86	; 0x56
 8008ef8:	183b      	adds	r3, r7, r0
 8008efa:	49bd      	ldr	r1, [pc, #756]	; (80091f0 <USB_EPStartXfer+0x3ac>)
 8008efc:	400a      	ands	r2, r1
 8008efe:	801a      	strh	r2, [r3, #0]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	18d3      	adds	r3, r2, r3
 8008f0a:	183a      	adds	r2, r7, r0
 8008f0c:	8812      	ldrh	r2, [r2, #0]
 8008f0e:	49b9      	ldr	r1, [pc, #740]	; (80091f4 <USB_EPStartXfer+0x3b0>)
 8008f10:	430a      	orrs	r2, r1
 8008f12:	b292      	uxth	r2, r2
 8008f14:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	6a1a      	ldr	r2, [r3, #32]
 8008f1a:	1d7b      	adds	r3, r7, #5
 8008f1c:	33ff      	adds	r3, #255	; 0xff
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	1ad2      	subs	r2, r2, r3
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	18d3      	adds	r3, r2, r3
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	001a      	movs	r2, r3
 8008f36:	2340      	movs	r3, #64	; 0x40
 8008f38:	4013      	ands	r3, r2
 8008f3a:	d100      	bne.n	8008f3e <USB_EPStartXfer+0xfa>
 8008f3c:	e162      	b.n	8009204 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	633b      	str	r3, [r7, #48]	; 0x30
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	785b      	ldrb	r3, [r3, #1]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d16a      	bne.n	8009020 <USB_EPStartXfer+0x1dc>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2250      	movs	r2, #80	; 0x50
 8008f52:	5a9b      	ldrh	r3, [r3, r2]
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	001a      	movs	r2, r3
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	189b      	adds	r3, r3, r2
 8008f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	00da      	lsls	r2, r3, #3
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	18d3      	adds	r3, r2, r3
 8008f68:	4aa3      	ldr	r2, [pc, #652]	; (80091f8 <USB_EPStartXfer+0x3b4>)
 8008f6a:	4694      	mov	ip, r2
 8008f6c:	4463      	add	r3, ip
 8008f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f70:	1d7b      	adds	r3, r7, #5
 8008f72:	33ff      	adds	r3, #255	; 0xff
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d110      	bne.n	8008f9c <USB_EPStartXfer+0x158>
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	4a9e      	ldr	r2, [pc, #632]	; (80091fc <USB_EPStartXfer+0x3b8>)
 8008f82:	4013      	ands	r3, r2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	801a      	strh	r2, [r3, #0]
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	4a9b      	ldr	r2, [pc, #620]	; (8009200 <USB_EPStartXfer+0x3bc>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	801a      	strh	r2, [r3, #0]
 8008f9a:	e05c      	b.n	8009056 <USB_EPStartXfer+0x212>
 8008f9c:	1d7b      	adds	r3, r7, #5
 8008f9e:	33ff      	adds	r3, #255	; 0xff
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8008fa4:	d81c      	bhi.n	8008fe0 <USB_EPStartXfer+0x19c>
 8008fa6:	1d7b      	adds	r3, r7, #5
 8008fa8:	33ff      	adds	r3, #255	; 0xff
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	085b      	lsrs	r3, r3, #1
 8008fae:	1c7a      	adds	r2, r7, #1
 8008fb0:	32ff      	adds	r2, #255	; 0xff
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	1d7b      	adds	r3, r7, #5
 8008fb6:	33ff      	adds	r3, #255	; 0xff
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	d006      	beq.n	8008fce <USB_EPStartXfer+0x18a>
 8008fc0:	1c7b      	adds	r3, r7, #1
 8008fc2:	33ff      	adds	r3, #255	; 0xff
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	1c7a      	adds	r2, r7, #1
 8008fca:	32ff      	adds	r2, #255	; 0xff
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	1c7b      	adds	r3, r7, #1
 8008fd0:	33ff      	adds	r3, #255	; 0xff
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	029b      	lsls	r3, r3, #10
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	801a      	strh	r2, [r3, #0]
 8008fde:	e03a      	b.n	8009056 <USB_EPStartXfer+0x212>
 8008fe0:	1d7b      	adds	r3, r7, #5
 8008fe2:	33ff      	adds	r3, #255	; 0xff
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	095b      	lsrs	r3, r3, #5
 8008fe8:	1c7a      	adds	r2, r7, #1
 8008fea:	32ff      	adds	r2, #255	; 0xff
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	1d7b      	adds	r3, r7, #5
 8008ff0:	33ff      	adds	r3, #255	; 0xff
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	221f      	movs	r2, #31
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	d106      	bne.n	8009008 <USB_EPStartXfer+0x1c4>
 8008ffa:	1c7b      	adds	r3, r7, #1
 8008ffc:	33ff      	adds	r3, #255	; 0xff
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3b01      	subs	r3, #1
 8009002:	1c7a      	adds	r2, r7, #1
 8009004:	32ff      	adds	r2, #255	; 0xff
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	1c7b      	adds	r3, r7, #1
 800900a:	33ff      	adds	r3, #255	; 0xff
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	b29b      	uxth	r3, r3
 8009010:	029b      	lsls	r3, r3, #10
 8009012:	b29b      	uxth	r3, r3
 8009014:	4a7a      	ldr	r2, [pc, #488]	; (8009200 <USB_EPStartXfer+0x3bc>)
 8009016:	4313      	orrs	r3, r2
 8009018:	b29a      	uxth	r2, r3
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	801a      	strh	r2, [r3, #0]
 800901e:	e01a      	b.n	8009056 <USB_EPStartXfer+0x212>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	785b      	ldrb	r3, [r3, #1]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d116      	bne.n	8009056 <USB_EPStartXfer+0x212>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2250      	movs	r2, #80	; 0x50
 800902c:	5a9b      	ldrh	r3, [r3, r2]
 800902e:	b29b      	uxth	r3, r3
 8009030:	001a      	movs	r2, r3
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	189b      	adds	r3, r3, r2
 8009036:	633b      	str	r3, [r7, #48]	; 0x30
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	00da      	lsls	r2, r3, #3
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	18d3      	adds	r3, r2, r3
 8009042:	4a6d      	ldr	r2, [pc, #436]	; (80091f8 <USB_EPStartXfer+0x3b4>)
 8009044:	4694      	mov	ip, r2
 8009046:	4463      	add	r3, ip
 8009048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800904a:	1d7b      	adds	r3, r7, #5
 800904c:	33ff      	adds	r3, #255	; 0xff
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	b29a      	uxth	r2, r3
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009056:	2076      	movs	r0, #118	; 0x76
 8009058:	183b      	adds	r3, r7, r0
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	8952      	ldrh	r2, [r2, #10]
 800905e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	6959      	ldr	r1, [r3, #20]
 8009064:	1d7b      	adds	r3, r7, #5
 8009066:	33ff      	adds	r3, #255	; 0xff
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	b29c      	uxth	r4, r3
 800906c:	183b      	adds	r3, r7, r0
 800906e:	881a      	ldrh	r2, [r3, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	0023      	movs	r3, r4
 8009074:	f001 f8da 	bl	800a22c <USB_WritePMA>
            ep->xfer_buff += len;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	695a      	ldr	r2, [r3, #20]
 800907c:	1d7b      	adds	r3, r7, #5
 800907e:	33ff      	adds	r3, #255	; 0xff
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	18d2      	adds	r2, r2, r3
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	6a1a      	ldr	r2, [r3, #32]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	429a      	cmp	r2, r3
 8009092:	d908      	bls.n	80090a6 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	6a1a      	ldr	r2, [r3, #32]
 8009098:	1d7b      	adds	r3, r7, #5
 800909a:	33ff      	adds	r3, #255	; 0xff
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	621a      	str	r2, [r3, #32]
 80090a4:	e007      	b.n	80090b6 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	1d7a      	adds	r2, r7, #5
 80090ac:	32ff      	adds	r2, #255	; 0xff
 80090ae:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2200      	movs	r2, #0
 80090b4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	785b      	ldrb	r3, [r3, #1]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d166      	bne.n	800918c <USB_EPStartXfer+0x348>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	61bb      	str	r3, [r7, #24]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2250      	movs	r2, #80	; 0x50
 80090c6:	5a9b      	ldrh	r3, [r3, r2]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	001a      	movs	r2, r3
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	189b      	adds	r3, r3, r2
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	00da      	lsls	r2, r3, #3
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	18d3      	adds	r3, r2, r3
 80090dc:	4a43      	ldr	r2, [pc, #268]	; (80091ec <USB_EPStartXfer+0x3a8>)
 80090de:	4694      	mov	ip, r2
 80090e0:	4463      	add	r3, ip
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	1d7b      	adds	r3, r7, #5
 80090e6:	33ff      	adds	r3, #255	; 0xff
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d110      	bne.n	8009110 <USB_EPStartXfer+0x2cc>
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	4a41      	ldr	r2, [pc, #260]	; (80091fc <USB_EPStartXfer+0x3b8>)
 80090f6:	4013      	ands	r3, r2
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	801a      	strh	r2, [r3, #0]
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	b29b      	uxth	r3, r3
 8009104:	4a3e      	ldr	r2, [pc, #248]	; (8009200 <USB_EPStartXfer+0x3bc>)
 8009106:	4313      	orrs	r3, r2
 8009108:	b29a      	uxth	r2, r3
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	801a      	strh	r2, [r3, #0]
 800910e:	e05a      	b.n	80091c6 <USB_EPStartXfer+0x382>
 8009110:	1d7b      	adds	r3, r7, #5
 8009112:	33ff      	adds	r3, #255	; 0xff
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b3e      	cmp	r3, #62	; 0x3e
 8009118:	d81a      	bhi.n	8009150 <USB_EPStartXfer+0x30c>
 800911a:	1d7b      	adds	r3, r7, #5
 800911c:	33ff      	adds	r3, #255	; 0xff
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	085b      	lsrs	r3, r3, #1
 8009122:	21fc      	movs	r1, #252	; 0xfc
 8009124:	187a      	adds	r2, r7, r1
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	1d7b      	adds	r3, r7, #5
 800912a:	33ff      	adds	r3, #255	; 0xff
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2201      	movs	r2, #1
 8009130:	4013      	ands	r3, r2
 8009132:	d004      	beq.n	800913e <USB_EPStartXfer+0x2fa>
 8009134:	187b      	adds	r3, r7, r1
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3301      	adds	r3, #1
 800913a:	187a      	adds	r2, r7, r1
 800913c:	6013      	str	r3, [r2, #0]
 800913e:	23fc      	movs	r3, #252	; 0xfc
 8009140:	18fb      	adds	r3, r7, r3
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	b29b      	uxth	r3, r3
 8009146:	029b      	lsls	r3, r3, #10
 8009148:	b29a      	uxth	r2, r3
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	801a      	strh	r2, [r3, #0]
 800914e:	e03a      	b.n	80091c6 <USB_EPStartXfer+0x382>
 8009150:	1d7b      	adds	r3, r7, #5
 8009152:	33ff      	adds	r3, #255	; 0xff
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	095b      	lsrs	r3, r3, #5
 8009158:	21fc      	movs	r1, #252	; 0xfc
 800915a:	187a      	adds	r2, r7, r1
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	1d7b      	adds	r3, r7, #5
 8009160:	33ff      	adds	r3, #255	; 0xff
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	221f      	movs	r2, #31
 8009166:	4013      	ands	r3, r2
 8009168:	d104      	bne.n	8009174 <USB_EPStartXfer+0x330>
 800916a:	187b      	adds	r3, r7, r1
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3b01      	subs	r3, #1
 8009170:	187a      	adds	r2, r7, r1
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	23fc      	movs	r3, #252	; 0xfc
 8009176:	18fb      	adds	r3, r7, r3
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	b29b      	uxth	r3, r3
 800917c:	029b      	lsls	r3, r3, #10
 800917e:	b29b      	uxth	r3, r3
 8009180:	4a1f      	ldr	r2, [pc, #124]	; (8009200 <USB_EPStartXfer+0x3bc>)
 8009182:	4313      	orrs	r3, r2
 8009184:	b29a      	uxth	r2, r3
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	801a      	strh	r2, [r3, #0]
 800918a:	e01c      	b.n	80091c6 <USB_EPStartXfer+0x382>
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	785b      	ldrb	r3, [r3, #1]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d118      	bne.n	80091c6 <USB_EPStartXfer+0x382>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	623b      	str	r3, [r7, #32]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2250      	movs	r2, #80	; 0x50
 800919c:	5a9b      	ldrh	r3, [r3, r2]
 800919e:	b29b      	uxth	r3, r3
 80091a0:	001a      	movs	r2, r3
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	189b      	adds	r3, r3, r2
 80091a6:	623b      	str	r3, [r7, #32]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	00da      	lsls	r2, r3, #3
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	18d3      	adds	r3, r2, r3
 80091b2:	4a0e      	ldr	r2, [pc, #56]	; (80091ec <USB_EPStartXfer+0x3a8>)
 80091b4:	4694      	mov	ip, r2
 80091b6:	4463      	add	r3, ip
 80091b8:	61fb      	str	r3, [r7, #28]
 80091ba:	1d7b      	adds	r3, r7, #5
 80091bc:	33ff      	adds	r3, #255	; 0xff
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80091c6:	2076      	movs	r0, #118	; 0x76
 80091c8:	183b      	adds	r3, r7, r0
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	8912      	ldrh	r2, [r2, #8]
 80091ce:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	6959      	ldr	r1, [r3, #20]
 80091d4:	1d7b      	adds	r3, r7, #5
 80091d6:	33ff      	adds	r3, #255	; 0xff
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	b29c      	uxth	r4, r3
 80091dc:	183b      	adds	r3, r7, r0
 80091de:	881a      	ldrh	r2, [r3, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	0023      	movs	r3, r4
 80091e4:	f001 f822 	bl	800a22c <USB_WritePMA>
 80091e8:	e301      	b.n	80097ee <USB_EPStartXfer+0x9aa>
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	00000402 	.word	0x00000402
 80091f0:	ffff8f8f 	.word	0xffff8f8f
 80091f4:	ffff8180 	.word	0xffff8180
 80091f8:	00000406 	.word	0x00000406
 80091fc:	ffff83ff 	.word	0xffff83ff
 8009200:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	785b      	ldrb	r3, [r3, #1]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d166      	bne.n	80092da <USB_EPStartXfer+0x496>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2250      	movs	r2, #80	; 0x50
 8009214:	5a9b      	ldrh	r3, [r3, r2]
 8009216:	b29b      	uxth	r3, r3
 8009218:	001a      	movs	r2, r3
 800921a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800921c:	189b      	adds	r3, r3, r2
 800921e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	00da      	lsls	r2, r3, #3
 8009226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009228:	18d3      	adds	r3, r2, r3
 800922a:	4ac3      	ldr	r2, [pc, #780]	; (8009538 <USB_EPStartXfer+0x6f4>)
 800922c:	4694      	mov	ip, r2
 800922e:	4463      	add	r3, ip
 8009230:	647b      	str	r3, [r7, #68]	; 0x44
 8009232:	1d7b      	adds	r3, r7, #5
 8009234:	33ff      	adds	r3, #255	; 0xff
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d110      	bne.n	800925e <USB_EPStartXfer+0x41a>
 800923c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	4abe      	ldr	r2, [pc, #760]	; (800953c <USB_EPStartXfer+0x6f8>)
 8009244:	4013      	ands	r3, r2
 8009246:	b29a      	uxth	r2, r3
 8009248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924a:	801a      	strh	r2, [r3, #0]
 800924c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	b29b      	uxth	r3, r3
 8009252:	4abb      	ldr	r2, [pc, #748]	; (8009540 <USB_EPStartXfer+0x6fc>)
 8009254:	4313      	orrs	r3, r2
 8009256:	b29a      	uxth	r2, r3
 8009258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800925a:	801a      	strh	r2, [r3, #0]
 800925c:	e05a      	b.n	8009314 <USB_EPStartXfer+0x4d0>
 800925e:	1d7b      	adds	r3, r7, #5
 8009260:	33ff      	adds	r3, #255	; 0xff
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b3e      	cmp	r3, #62	; 0x3e
 8009266:	d81a      	bhi.n	800929e <USB_EPStartXfer+0x45a>
 8009268:	1d7b      	adds	r3, r7, #5
 800926a:	33ff      	adds	r3, #255	; 0xff
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	085b      	lsrs	r3, r3, #1
 8009270:	21f8      	movs	r1, #248	; 0xf8
 8009272:	187a      	adds	r2, r7, r1
 8009274:	6013      	str	r3, [r2, #0]
 8009276:	1d7b      	adds	r3, r7, #5
 8009278:	33ff      	adds	r3, #255	; 0xff
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2201      	movs	r2, #1
 800927e:	4013      	ands	r3, r2
 8009280:	d004      	beq.n	800928c <USB_EPStartXfer+0x448>
 8009282:	187b      	adds	r3, r7, r1
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3301      	adds	r3, #1
 8009288:	187a      	adds	r2, r7, r1
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	23f8      	movs	r3, #248	; 0xf8
 800928e:	18fb      	adds	r3, r7, r3
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	b29b      	uxth	r3, r3
 8009294:	029b      	lsls	r3, r3, #10
 8009296:	b29a      	uxth	r2, r3
 8009298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800929a:	801a      	strh	r2, [r3, #0]
 800929c:	e03a      	b.n	8009314 <USB_EPStartXfer+0x4d0>
 800929e:	1d7b      	adds	r3, r7, #5
 80092a0:	33ff      	adds	r3, #255	; 0xff
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	095b      	lsrs	r3, r3, #5
 80092a6:	21f8      	movs	r1, #248	; 0xf8
 80092a8:	187a      	adds	r2, r7, r1
 80092aa:	6013      	str	r3, [r2, #0]
 80092ac:	1d7b      	adds	r3, r7, #5
 80092ae:	33ff      	adds	r3, #255	; 0xff
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	221f      	movs	r2, #31
 80092b4:	4013      	ands	r3, r2
 80092b6:	d104      	bne.n	80092c2 <USB_EPStartXfer+0x47e>
 80092b8:	187b      	adds	r3, r7, r1
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3b01      	subs	r3, #1
 80092be:	187a      	adds	r2, r7, r1
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	23f8      	movs	r3, #248	; 0xf8
 80092c4:	18fb      	adds	r3, r7, r3
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	029b      	lsls	r3, r3, #10
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	4a9c      	ldr	r2, [pc, #624]	; (8009540 <USB_EPStartXfer+0x6fc>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092d6:	801a      	strh	r2, [r3, #0]
 80092d8:	e01c      	b.n	8009314 <USB_EPStartXfer+0x4d0>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	785b      	ldrb	r3, [r3, #1]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d118      	bne.n	8009314 <USB_EPStartXfer+0x4d0>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	653b      	str	r3, [r7, #80]	; 0x50
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2250      	movs	r2, #80	; 0x50
 80092ea:	5a9b      	ldrh	r3, [r3, r2]
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	001a      	movs	r2, r3
 80092f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092f2:	189b      	adds	r3, r3, r2
 80092f4:	653b      	str	r3, [r7, #80]	; 0x50
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	00da      	lsls	r2, r3, #3
 80092fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092fe:	18d3      	adds	r3, r2, r3
 8009300:	4a8d      	ldr	r2, [pc, #564]	; (8009538 <USB_EPStartXfer+0x6f4>)
 8009302:	4694      	mov	ip, r2
 8009304:	4463      	add	r3, ip
 8009306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009308:	1d7b      	adds	r3, r7, #5
 800930a:	33ff      	adds	r3, #255	; 0xff
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	b29a      	uxth	r2, r3
 8009310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009312:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009314:	2076      	movs	r0, #118	; 0x76
 8009316:	183b      	adds	r3, r7, r0
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	8912      	ldrh	r2, [r2, #8]
 800931c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	6959      	ldr	r1, [r3, #20]
 8009322:	1d7b      	adds	r3, r7, #5
 8009324:	33ff      	adds	r3, #255	; 0xff
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	b29c      	uxth	r4, r3
 800932a:	183b      	adds	r3, r7, r0
 800932c:	881a      	ldrh	r2, [r3, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	0023      	movs	r3, r4
 8009332:	f000 ff7b 	bl	800a22c <USB_WritePMA>
            ep->xfer_buff += len;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	695a      	ldr	r2, [r3, #20]
 800933a:	1d7b      	adds	r3, r7, #5
 800933c:	33ff      	adds	r3, #255	; 0xff
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	18d2      	adds	r2, r2, r3
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	6a1a      	ldr	r2, [r3, #32]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	429a      	cmp	r2, r3
 8009350:	d908      	bls.n	8009364 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	6a1a      	ldr	r2, [r3, #32]
 8009356:	1d7b      	adds	r3, r7, #5
 8009358:	33ff      	adds	r3, #255	; 0xff
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	1ad2      	subs	r2, r2, r3
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	621a      	str	r2, [r3, #32]
 8009362:	e007      	b.n	8009374 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	1d7a      	adds	r2, r7, #5
 800936a:	32ff      	adds	r2, #255	; 0xff
 800936c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2200      	movs	r2, #0
 8009372:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	643b      	str	r3, [r7, #64]	; 0x40
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d166      	bne.n	800944e <USB_EPStartXfer+0x60a>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	63bb      	str	r3, [r7, #56]	; 0x38
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2250      	movs	r2, #80	; 0x50
 8009388:	5a9b      	ldrh	r3, [r3, r2]
 800938a:	b29b      	uxth	r3, r3
 800938c:	001a      	movs	r2, r3
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	189b      	adds	r3, r3, r2
 8009392:	63bb      	str	r3, [r7, #56]	; 0x38
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	00da      	lsls	r2, r3, #3
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	18d3      	adds	r3, r2, r3
 800939e:	4a69      	ldr	r2, [pc, #420]	; (8009544 <USB_EPStartXfer+0x700>)
 80093a0:	4694      	mov	ip, r2
 80093a2:	4463      	add	r3, ip
 80093a4:	637b      	str	r3, [r7, #52]	; 0x34
 80093a6:	1d7b      	adds	r3, r7, #5
 80093a8:	33ff      	adds	r3, #255	; 0xff
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d110      	bne.n	80093d2 <USB_EPStartXfer+0x58e>
 80093b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4a61      	ldr	r2, [pc, #388]	; (800953c <USB_EPStartXfer+0x6f8>)
 80093b8:	4013      	ands	r3, r2
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093be:	801a      	strh	r2, [r3, #0]
 80093c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	4a5e      	ldr	r2, [pc, #376]	; (8009540 <USB_EPStartXfer+0x6fc>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ce:	801a      	strh	r2, [r3, #0]
 80093d0:	e058      	b.n	8009484 <USB_EPStartXfer+0x640>
 80093d2:	1d7b      	adds	r3, r7, #5
 80093d4:	33ff      	adds	r3, #255	; 0xff
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b3e      	cmp	r3, #62	; 0x3e
 80093da:	d81a      	bhi.n	8009412 <USB_EPStartXfer+0x5ce>
 80093dc:	1d7b      	adds	r3, r7, #5
 80093de:	33ff      	adds	r3, #255	; 0xff
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	085b      	lsrs	r3, r3, #1
 80093e4:	21f4      	movs	r1, #244	; 0xf4
 80093e6:	187a      	adds	r2, r7, r1
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	1d7b      	adds	r3, r7, #5
 80093ec:	33ff      	adds	r3, #255	; 0xff
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2201      	movs	r2, #1
 80093f2:	4013      	ands	r3, r2
 80093f4:	d004      	beq.n	8009400 <USB_EPStartXfer+0x5bc>
 80093f6:	187b      	adds	r3, r7, r1
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	187a      	adds	r2, r7, r1
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	23f4      	movs	r3, #244	; 0xf4
 8009402:	18fb      	adds	r3, r7, r3
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
 8009408:	029b      	lsls	r3, r3, #10
 800940a:	b29a      	uxth	r2, r3
 800940c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	e038      	b.n	8009484 <USB_EPStartXfer+0x640>
 8009412:	1d7b      	adds	r3, r7, #5
 8009414:	33ff      	adds	r3, #255	; 0xff
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	095b      	lsrs	r3, r3, #5
 800941a:	21f4      	movs	r1, #244	; 0xf4
 800941c:	187a      	adds	r2, r7, r1
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	1d7b      	adds	r3, r7, #5
 8009422:	33ff      	adds	r3, #255	; 0xff
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	221f      	movs	r2, #31
 8009428:	4013      	ands	r3, r2
 800942a:	d104      	bne.n	8009436 <USB_EPStartXfer+0x5f2>
 800942c:	187b      	adds	r3, r7, r1
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3b01      	subs	r3, #1
 8009432:	187a      	adds	r2, r7, r1
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	23f4      	movs	r3, #244	; 0xf4
 8009438:	18fb      	adds	r3, r7, r3
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	b29b      	uxth	r3, r3
 800943e:	029b      	lsls	r3, r3, #10
 8009440:	b29b      	uxth	r3, r3
 8009442:	4a3f      	ldr	r2, [pc, #252]	; (8009540 <USB_EPStartXfer+0x6fc>)
 8009444:	4313      	orrs	r3, r2
 8009446:	b29a      	uxth	r2, r3
 8009448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944a:	801a      	strh	r2, [r3, #0]
 800944c:	e01a      	b.n	8009484 <USB_EPStartXfer+0x640>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	785b      	ldrb	r3, [r3, #1]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d116      	bne.n	8009484 <USB_EPStartXfer+0x640>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2250      	movs	r2, #80	; 0x50
 800945a:	5a9b      	ldrh	r3, [r3, r2]
 800945c:	b29b      	uxth	r3, r3
 800945e:	001a      	movs	r2, r3
 8009460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009462:	189b      	adds	r3, r3, r2
 8009464:	643b      	str	r3, [r7, #64]	; 0x40
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	00da      	lsls	r2, r3, #3
 800946c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946e:	18d3      	adds	r3, r2, r3
 8009470:	4a34      	ldr	r2, [pc, #208]	; (8009544 <USB_EPStartXfer+0x700>)
 8009472:	4694      	mov	ip, r2
 8009474:	4463      	add	r3, ip
 8009476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009478:	1d7b      	adds	r3, r7, #5
 800947a:	33ff      	adds	r3, #255	; 0xff
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	b29a      	uxth	r2, r3
 8009480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009482:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009484:	2076      	movs	r0, #118	; 0x76
 8009486:	183b      	adds	r3, r7, r0
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	8952      	ldrh	r2, [r2, #10]
 800948c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6959      	ldr	r1, [r3, #20]
 8009492:	1d7b      	adds	r3, r7, #5
 8009494:	33ff      	adds	r3, #255	; 0xff
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	b29c      	uxth	r4, r3
 800949a:	183b      	adds	r3, r7, r0
 800949c:	881a      	ldrh	r2, [r3, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	0023      	movs	r3, r4
 80094a2:	f000 fec3 	bl	800a22c <USB_WritePMA>
 80094a6:	e1a2      	b.n	80097ee <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	6a1b      	ldr	r3, [r3, #32]
 80094ac:	1d7a      	adds	r2, r7, #5
 80094ae:	32ff      	adds	r2, #255	; 0xff
 80094b0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	18d3      	adds	r3, r2, r3
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	b29a      	uxth	r2, r3
 80094c0:	2062      	movs	r0, #98	; 0x62
 80094c2:	183b      	adds	r3, r7, r0
 80094c4:	4920      	ldr	r1, [pc, #128]	; (8009548 <USB_EPStartXfer+0x704>)
 80094c6:	400a      	ands	r2, r1
 80094c8:	801a      	strh	r2, [r3, #0]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	18d3      	adds	r3, r2, r3
 80094d4:	183a      	adds	r2, r7, r0
 80094d6:	8812      	ldrh	r2, [r2, #0]
 80094d8:	491c      	ldr	r1, [pc, #112]	; (800954c <USB_EPStartXfer+0x708>)
 80094da:	430a      	orrs	r2, r1
 80094dc:	b292      	uxth	r2, r2
 80094de:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2250      	movs	r2, #80	; 0x50
 80094e8:	5a9b      	ldrh	r3, [r3, r2]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	001a      	movs	r2, r3
 80094ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094f0:	189b      	adds	r3, r3, r2
 80094f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	00da      	lsls	r2, r3, #3
 80094fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094fc:	18d3      	adds	r3, r2, r3
 80094fe:	4a0e      	ldr	r2, [pc, #56]	; (8009538 <USB_EPStartXfer+0x6f4>)
 8009500:	4694      	mov	ip, r2
 8009502:	4463      	add	r3, ip
 8009504:	65bb      	str	r3, [r7, #88]	; 0x58
 8009506:	1d7b      	adds	r3, r7, #5
 8009508:	33ff      	adds	r3, #255	; 0xff
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	b29a      	uxth	r2, r3
 800950e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009510:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009512:	2076      	movs	r0, #118	; 0x76
 8009514:	183b      	adds	r3, r7, r0
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	8912      	ldrh	r2, [r2, #8]
 800951a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	6959      	ldr	r1, [r3, #20]
 8009520:	1d7b      	adds	r3, r7, #5
 8009522:	33ff      	adds	r3, #255	; 0xff
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	b29c      	uxth	r4, r3
 8009528:	183b      	adds	r3, r7, r0
 800952a:	881a      	ldrh	r2, [r3, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	0023      	movs	r3, r4
 8009530:	f000 fe7c 	bl	800a22c <USB_WritePMA>
 8009534:	e15b      	b.n	80097ee <USB_EPStartXfer+0x9aa>
 8009536:	46c0      	nop			; (mov r8, r8)
 8009538:	00000402 	.word	0x00000402
 800953c:	ffff83ff 	.word	0xffff83ff
 8009540:	ffff8000 	.word	0xffff8000
 8009544:	00000406 	.word	0x00000406
 8009548:	ffff8e8f 	.word	0xffff8e8f
 800954c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	6a1a      	ldr	r2, [r3, #32]
 8009554:	1d7b      	adds	r3, r7, #5
 8009556:	33ff      	adds	r3, #255	; 0xff
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	1ad2      	subs	r2, r2, r3
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	18d3      	adds	r3, r2, r3
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	b29b      	uxth	r3, r3
 800956e:	001a      	movs	r2, r3
 8009570:	2340      	movs	r3, #64	; 0x40
 8009572:	4013      	ands	r3, r2
 8009574:	d100      	bne.n	8009578 <USB_EPStartXfer+0x734>
 8009576:	e099      	b.n	80096ac <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	673b      	str	r3, [r7, #112]	; 0x70
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	785b      	ldrb	r3, [r3, #1]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d166      	bne.n	8009652 <USB_EPStartXfer+0x80e>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	66bb      	str	r3, [r7, #104]	; 0x68
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2250      	movs	r2, #80	; 0x50
 800958c:	5a9b      	ldrh	r3, [r3, r2]
 800958e:	b29b      	uxth	r3, r3
 8009590:	001a      	movs	r2, r3
 8009592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009594:	189b      	adds	r3, r3, r2
 8009596:	66bb      	str	r3, [r7, #104]	; 0x68
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	00da      	lsls	r2, r3, #3
 800959e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095a0:	18d3      	adds	r3, r2, r3
 80095a2:	4ad0      	ldr	r2, [pc, #832]	; (80098e4 <USB_EPStartXfer+0xaa0>)
 80095a4:	4694      	mov	ip, r2
 80095a6:	4463      	add	r3, ip
 80095a8:	667b      	str	r3, [r7, #100]	; 0x64
 80095aa:	1d7b      	adds	r3, r7, #5
 80095ac:	33ff      	adds	r3, #255	; 0xff
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d110      	bne.n	80095d6 <USB_EPStartXfer+0x792>
 80095b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	4acb      	ldr	r2, [pc, #812]	; (80098e8 <USB_EPStartXfer+0xaa4>)
 80095bc:	4013      	ands	r3, r2
 80095be:	b29a      	uxth	r2, r3
 80095c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095c2:	801a      	strh	r2, [r3, #0]
 80095c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	4ac8      	ldr	r2, [pc, #800]	; (80098ec <USB_EPStartXfer+0xaa8>)
 80095cc:	4313      	orrs	r3, r2
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095d2:	801a      	strh	r2, [r3, #0]
 80095d4:	e058      	b.n	8009688 <USB_EPStartXfer+0x844>
 80095d6:	1d7b      	adds	r3, r7, #5
 80095d8:	33ff      	adds	r3, #255	; 0xff
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b3e      	cmp	r3, #62	; 0x3e
 80095de:	d81a      	bhi.n	8009616 <USB_EPStartXfer+0x7d2>
 80095e0:	1d7b      	adds	r3, r7, #5
 80095e2:	33ff      	adds	r3, #255	; 0xff
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	085b      	lsrs	r3, r3, #1
 80095e8:	21f0      	movs	r1, #240	; 0xf0
 80095ea:	187a      	adds	r2, r7, r1
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	1d7b      	adds	r3, r7, #5
 80095f0:	33ff      	adds	r3, #255	; 0xff
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2201      	movs	r2, #1
 80095f6:	4013      	ands	r3, r2
 80095f8:	d004      	beq.n	8009604 <USB_EPStartXfer+0x7c0>
 80095fa:	187b      	adds	r3, r7, r1
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3301      	adds	r3, #1
 8009600:	187a      	adds	r2, r7, r1
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	23f0      	movs	r3, #240	; 0xf0
 8009606:	18fb      	adds	r3, r7, r3
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	b29b      	uxth	r3, r3
 800960c:	029b      	lsls	r3, r3, #10
 800960e:	b29a      	uxth	r2, r3
 8009610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009612:	801a      	strh	r2, [r3, #0]
 8009614:	e038      	b.n	8009688 <USB_EPStartXfer+0x844>
 8009616:	1d7b      	adds	r3, r7, #5
 8009618:	33ff      	adds	r3, #255	; 0xff
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	095b      	lsrs	r3, r3, #5
 800961e:	21f0      	movs	r1, #240	; 0xf0
 8009620:	187a      	adds	r2, r7, r1
 8009622:	6013      	str	r3, [r2, #0]
 8009624:	1d7b      	adds	r3, r7, #5
 8009626:	33ff      	adds	r3, #255	; 0xff
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	221f      	movs	r2, #31
 800962c:	4013      	ands	r3, r2
 800962e:	d104      	bne.n	800963a <USB_EPStartXfer+0x7f6>
 8009630:	187b      	adds	r3, r7, r1
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3b01      	subs	r3, #1
 8009636:	187a      	adds	r2, r7, r1
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	23f0      	movs	r3, #240	; 0xf0
 800963c:	18fb      	adds	r3, r7, r3
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	b29b      	uxth	r3, r3
 8009642:	029b      	lsls	r3, r3, #10
 8009644:	b29b      	uxth	r3, r3
 8009646:	4aa9      	ldr	r2, [pc, #676]	; (80098ec <USB_EPStartXfer+0xaa8>)
 8009648:	4313      	orrs	r3, r2
 800964a:	b29a      	uxth	r2, r3
 800964c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800964e:	801a      	strh	r2, [r3, #0]
 8009650:	e01a      	b.n	8009688 <USB_EPStartXfer+0x844>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	785b      	ldrb	r3, [r3, #1]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d116      	bne.n	8009688 <USB_EPStartXfer+0x844>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2250      	movs	r2, #80	; 0x50
 800965e:	5a9b      	ldrh	r3, [r3, r2]
 8009660:	b29b      	uxth	r3, r3
 8009662:	001a      	movs	r2, r3
 8009664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009666:	189b      	adds	r3, r3, r2
 8009668:	673b      	str	r3, [r7, #112]	; 0x70
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	00da      	lsls	r2, r3, #3
 8009670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009672:	18d3      	adds	r3, r2, r3
 8009674:	4a9b      	ldr	r2, [pc, #620]	; (80098e4 <USB_EPStartXfer+0xaa0>)
 8009676:	4694      	mov	ip, r2
 8009678:	4463      	add	r3, ip
 800967a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800967c:	1d7b      	adds	r3, r7, #5
 800967e:	33ff      	adds	r3, #255	; 0xff
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	b29a      	uxth	r2, r3
 8009684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009686:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009688:	2076      	movs	r0, #118	; 0x76
 800968a:	183b      	adds	r3, r7, r0
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	8952      	ldrh	r2, [r2, #10]
 8009690:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	6959      	ldr	r1, [r3, #20]
 8009696:	1d7b      	adds	r3, r7, #5
 8009698:	33ff      	adds	r3, #255	; 0xff
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	b29c      	uxth	r4, r3
 800969e:	183b      	adds	r3, r7, r0
 80096a0:	881a      	ldrh	r2, [r3, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	0023      	movs	r3, r4
 80096a6:	f000 fdc1 	bl	800a22c <USB_WritePMA>
 80096aa:	e0a0      	b.n	80097ee <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	785b      	ldrb	r3, [r3, #1]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d166      	bne.n	8009782 <USB_EPStartXfer+0x93e>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2250      	movs	r2, #80	; 0x50
 80096bc:	5a9b      	ldrh	r3, [r3, r2]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	001a      	movs	r2, r3
 80096c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096c4:	189b      	adds	r3, r3, r2
 80096c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	00da      	lsls	r2, r3, #3
 80096ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096d0:	18d3      	adds	r3, r2, r3
 80096d2:	4a87      	ldr	r2, [pc, #540]	; (80098f0 <USB_EPStartXfer+0xaac>)
 80096d4:	4694      	mov	ip, r2
 80096d6:	4463      	add	r3, ip
 80096d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80096da:	1d7b      	adds	r3, r7, #5
 80096dc:	33ff      	adds	r3, #255	; 0xff
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d110      	bne.n	8009706 <USB_EPStartXfer+0x8c2>
 80096e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	4a7f      	ldr	r2, [pc, #508]	; (80098e8 <USB_EPStartXfer+0xaa4>)
 80096ec:	4013      	ands	r3, r2
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f2:	801a      	strh	r2, [r3, #0]
 80096f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4a7c      	ldr	r2, [pc, #496]	; (80098ec <USB_EPStartXfer+0xaa8>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	b29a      	uxth	r2, r3
 8009700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009702:	801a      	strh	r2, [r3, #0]
 8009704:	e062      	b.n	80097cc <USB_EPStartXfer+0x988>
 8009706:	1d7b      	adds	r3, r7, #5
 8009708:	33ff      	adds	r3, #255	; 0xff
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b3e      	cmp	r3, #62	; 0x3e
 800970e:	d81a      	bhi.n	8009746 <USB_EPStartXfer+0x902>
 8009710:	1d7b      	adds	r3, r7, #5
 8009712:	33ff      	adds	r3, #255	; 0xff
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	085b      	lsrs	r3, r3, #1
 8009718:	21ec      	movs	r1, #236	; 0xec
 800971a:	187a      	adds	r2, r7, r1
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	1d7b      	adds	r3, r7, #5
 8009720:	33ff      	adds	r3, #255	; 0xff
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2201      	movs	r2, #1
 8009726:	4013      	ands	r3, r2
 8009728:	d004      	beq.n	8009734 <USB_EPStartXfer+0x8f0>
 800972a:	187b      	adds	r3, r7, r1
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	3301      	adds	r3, #1
 8009730:	187a      	adds	r2, r7, r1
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	23ec      	movs	r3, #236	; 0xec
 8009736:	18fb      	adds	r3, r7, r3
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	b29b      	uxth	r3, r3
 800973c:	029b      	lsls	r3, r3, #10
 800973e:	b29a      	uxth	r2, r3
 8009740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009742:	801a      	strh	r2, [r3, #0]
 8009744:	e042      	b.n	80097cc <USB_EPStartXfer+0x988>
 8009746:	1d7b      	adds	r3, r7, #5
 8009748:	33ff      	adds	r3, #255	; 0xff
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	095b      	lsrs	r3, r3, #5
 800974e:	21ec      	movs	r1, #236	; 0xec
 8009750:	187a      	adds	r2, r7, r1
 8009752:	6013      	str	r3, [r2, #0]
 8009754:	1d7b      	adds	r3, r7, #5
 8009756:	33ff      	adds	r3, #255	; 0xff
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	221f      	movs	r2, #31
 800975c:	4013      	ands	r3, r2
 800975e:	d104      	bne.n	800976a <USB_EPStartXfer+0x926>
 8009760:	187b      	adds	r3, r7, r1
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3b01      	subs	r3, #1
 8009766:	187a      	adds	r2, r7, r1
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	23ec      	movs	r3, #236	; 0xec
 800976c:	18fb      	adds	r3, r7, r3
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	b29b      	uxth	r3, r3
 8009772:	029b      	lsls	r3, r3, #10
 8009774:	b29b      	uxth	r3, r3
 8009776:	4a5d      	ldr	r2, [pc, #372]	; (80098ec <USB_EPStartXfer+0xaa8>)
 8009778:	4313      	orrs	r3, r2
 800977a:	b29a      	uxth	r2, r3
 800977c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800977e:	801a      	strh	r2, [r3, #0]
 8009780:	e024      	b.n	80097cc <USB_EPStartXfer+0x988>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	785b      	ldrb	r3, [r3, #1]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d120      	bne.n	80097cc <USB_EPStartXfer+0x988>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2184      	movs	r1, #132	; 0x84
 800978e:	187a      	adds	r2, r7, r1
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2250      	movs	r2, #80	; 0x50
 8009796:	5a9b      	ldrh	r3, [r3, r2]
 8009798:	b29b      	uxth	r3, r3
 800979a:	001a      	movs	r2, r3
 800979c:	187b      	adds	r3, r7, r1
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	189b      	adds	r3, r3, r2
 80097a2:	187a      	adds	r2, r7, r1
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	00da      	lsls	r2, r3, #3
 80097ac:	187b      	adds	r3, r7, r1
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	18d3      	adds	r3, r2, r3
 80097b2:	4a4f      	ldr	r2, [pc, #316]	; (80098f0 <USB_EPStartXfer+0xaac>)
 80097b4:	4694      	mov	ip, r2
 80097b6:	4463      	add	r3, ip
 80097b8:	2180      	movs	r1, #128	; 0x80
 80097ba:	187a      	adds	r2, r7, r1
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	1d7b      	adds	r3, r7, #5
 80097c0:	33ff      	adds	r3, #255	; 0xff
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	187b      	adds	r3, r7, r1
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80097cc:	2076      	movs	r0, #118	; 0x76
 80097ce:	183b      	adds	r3, r7, r0
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	8912      	ldrh	r2, [r2, #8]
 80097d4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	6959      	ldr	r1, [r3, #20]
 80097da:	1d7b      	adds	r3, r7, #5
 80097dc:	33ff      	adds	r3, #255	; 0xff
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	b29c      	uxth	r4, r3
 80097e2:	183b      	adds	r3, r7, r0
 80097e4:	881a      	ldrh	r2, [r3, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	0023      	movs	r3, r4
 80097ea:	f000 fd1f 	bl	800a22c <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	18d3      	adds	r3, r2, r3
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	200a      	movs	r0, #10
 80097fe:	183b      	adds	r3, r7, r0
 8009800:	493c      	ldr	r1, [pc, #240]	; (80098f4 <USB_EPStartXfer+0xab0>)
 8009802:	400a      	ands	r2, r1
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	183b      	adds	r3, r7, r0
 8009808:	183a      	adds	r2, r7, r0
 800980a:	8812      	ldrh	r2, [r2, #0]
 800980c:	2110      	movs	r1, #16
 800980e:	404a      	eors	r2, r1
 8009810:	801a      	strh	r2, [r3, #0]
 8009812:	183b      	adds	r3, r7, r0
 8009814:	183a      	adds	r2, r7, r0
 8009816:	8812      	ldrh	r2, [r2, #0]
 8009818:	2120      	movs	r1, #32
 800981a:	404a      	eors	r2, r1
 800981c:	801a      	strh	r2, [r3, #0]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	18d3      	adds	r3, r2, r3
 8009828:	183a      	adds	r2, r7, r0
 800982a:	8812      	ldrh	r2, [r2, #0]
 800982c:	4932      	ldr	r1, [pc, #200]	; (80098f8 <USB_EPStartXfer+0xab4>)
 800982e:	430a      	orrs	r2, r1
 8009830:	b292      	uxth	r2, r2
 8009832:	801a      	strh	r2, [r3, #0]
 8009834:	f000 fbaf 	bl	8009f96 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	7b1b      	ldrb	r3, [r3, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d000      	beq.n	8009842 <USB_EPStartXfer+0x9fe>
 8009840:	e09e      	b.n	8009980 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	699a      	ldr	r2, [r3, #24]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	429a      	cmp	r2, r3
 800984c:	d90d      	bls.n	800986a <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	1d7a      	adds	r2, r7, #5
 8009854:	32ff      	adds	r2, #255	; 0xff
 8009856:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	699a      	ldr	r2, [r3, #24]
 800985c:	1d7b      	adds	r3, r7, #5
 800985e:	33ff      	adds	r3, #255	; 0xff
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	1ad2      	subs	r2, r2, r3
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	619a      	str	r2, [r3, #24]
 8009868:	e007      	b.n	800987a <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	1d7a      	adds	r2, r7, #5
 8009870:	32ff      	adds	r2, #255	; 0xff
 8009872:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2200      	movs	r2, #0
 8009878:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2190      	movs	r1, #144	; 0x90
 800987e:	187a      	adds	r2, r7, r1
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2250      	movs	r2, #80	; 0x50
 8009886:	5a9b      	ldrh	r3, [r3, r2]
 8009888:	b29b      	uxth	r3, r3
 800988a:	001a      	movs	r2, r3
 800988c:	187b      	adds	r3, r7, r1
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	189b      	adds	r3, r3, r2
 8009892:	187a      	adds	r2, r7, r1
 8009894:	6013      	str	r3, [r2, #0]
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	00da      	lsls	r2, r3, #3
 800989c:	187b      	adds	r3, r7, r1
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	18d3      	adds	r3, r2, r3
 80098a2:	4a10      	ldr	r2, [pc, #64]	; (80098e4 <USB_EPStartXfer+0xaa0>)
 80098a4:	4694      	mov	ip, r2
 80098a6:	4463      	add	r3, ip
 80098a8:	218c      	movs	r1, #140	; 0x8c
 80098aa:	187a      	adds	r2, r7, r1
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	1d7b      	adds	r3, r7, #5
 80098b0:	33ff      	adds	r3, #255	; 0xff
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d121      	bne.n	80098fc <USB_EPStartXfer+0xab8>
 80098b8:	187b      	adds	r3, r7, r1
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	4a09      	ldr	r2, [pc, #36]	; (80098e8 <USB_EPStartXfer+0xaa4>)
 80098c2:	4013      	ands	r3, r2
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	187b      	adds	r3, r7, r1
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	187b      	adds	r3, r7, r1
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	4a05      	ldr	r2, [pc, #20]	; (80098ec <USB_EPStartXfer+0xaa8>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	b29a      	uxth	r2, r3
 80098da:	187b      	adds	r3, r7, r1
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	801a      	strh	r2, [r3, #0]
 80098e0:	e334      	b.n	8009f4c <USB_EPStartXfer+0x1108>
 80098e2:	46c0      	nop			; (mov r8, r8)
 80098e4:	00000406 	.word	0x00000406
 80098e8:	ffff83ff 	.word	0xffff83ff
 80098ec:	ffff8000 	.word	0xffff8000
 80098f0:	00000402 	.word	0x00000402
 80098f4:	ffff8fbf 	.word	0xffff8fbf
 80098f8:	ffff8080 	.word	0xffff8080
 80098fc:	1d7b      	adds	r3, r7, #5
 80098fe:	33ff      	adds	r3, #255	; 0xff
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b3e      	cmp	r3, #62	; 0x3e
 8009904:	d81c      	bhi.n	8009940 <USB_EPStartXfer+0xafc>
 8009906:	1d7b      	adds	r3, r7, #5
 8009908:	33ff      	adds	r3, #255	; 0xff
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	085b      	lsrs	r3, r3, #1
 800990e:	21e8      	movs	r1, #232	; 0xe8
 8009910:	187a      	adds	r2, r7, r1
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	1d7b      	adds	r3, r7, #5
 8009916:	33ff      	adds	r3, #255	; 0xff
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2201      	movs	r2, #1
 800991c:	4013      	ands	r3, r2
 800991e:	d004      	beq.n	800992a <USB_EPStartXfer+0xae6>
 8009920:	187b      	adds	r3, r7, r1
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3301      	adds	r3, #1
 8009926:	187a      	adds	r2, r7, r1
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	23e8      	movs	r3, #232	; 0xe8
 800992c:	18fb      	adds	r3, r7, r3
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	b29b      	uxth	r3, r3
 8009932:	029b      	lsls	r3, r3, #10
 8009934:	b29a      	uxth	r2, r3
 8009936:	238c      	movs	r3, #140	; 0x8c
 8009938:	18fb      	adds	r3, r7, r3
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	801a      	strh	r2, [r3, #0]
 800993e:	e305      	b.n	8009f4c <USB_EPStartXfer+0x1108>
 8009940:	1d7b      	adds	r3, r7, #5
 8009942:	33ff      	adds	r3, #255	; 0xff
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	095b      	lsrs	r3, r3, #5
 8009948:	21e8      	movs	r1, #232	; 0xe8
 800994a:	187a      	adds	r2, r7, r1
 800994c:	6013      	str	r3, [r2, #0]
 800994e:	1d7b      	adds	r3, r7, #5
 8009950:	33ff      	adds	r3, #255	; 0xff
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	221f      	movs	r2, #31
 8009956:	4013      	ands	r3, r2
 8009958:	d104      	bne.n	8009964 <USB_EPStartXfer+0xb20>
 800995a:	187b      	adds	r3, r7, r1
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3b01      	subs	r3, #1
 8009960:	187a      	adds	r2, r7, r1
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	23e8      	movs	r3, #232	; 0xe8
 8009966:	18fb      	adds	r3, r7, r3
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	b29b      	uxth	r3, r3
 800996c:	029b      	lsls	r3, r3, #10
 800996e:	b29b      	uxth	r3, r3
 8009970:	4aca      	ldr	r2, [pc, #808]	; (8009c9c <USB_EPStartXfer+0xe58>)
 8009972:	4313      	orrs	r3, r2
 8009974:	b29a      	uxth	r2, r3
 8009976:	238c      	movs	r3, #140	; 0x8c
 8009978:	18fb      	adds	r3, r7, r3
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	801a      	strh	r2, [r3, #0]
 800997e:	e2e5      	b.n	8009f4c <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	78db      	ldrb	r3, [r3, #3]
 8009984:	2b02      	cmp	r3, #2
 8009986:	d000      	beq.n	800998a <USB_EPStartXfer+0xb46>
 8009988:	e16f      	b.n	8009c6a <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	785b      	ldrb	r3, [r3, #1]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d16f      	bne.n	8009a72 <USB_EPStartXfer+0xc2e>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	21ac      	movs	r1, #172	; 0xac
 8009996:	187a      	adds	r2, r7, r1
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2250      	movs	r2, #80	; 0x50
 800999e:	5a9b      	ldrh	r3, [r3, r2]
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	001a      	movs	r2, r3
 80099a4:	187b      	adds	r3, r7, r1
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	189b      	adds	r3, r3, r2
 80099aa:	187a      	adds	r2, r7, r1
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	00da      	lsls	r2, r3, #3
 80099b4:	187b      	adds	r3, r7, r1
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	18d3      	adds	r3, r2, r3
 80099ba:	4ab9      	ldr	r2, [pc, #740]	; (8009ca0 <USB_EPStartXfer+0xe5c>)
 80099bc:	4694      	mov	ip, r2
 80099be:	4463      	add	r3, ip
 80099c0:	21a8      	movs	r1, #168	; 0xa8
 80099c2:	187a      	adds	r2, r7, r1
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d114      	bne.n	80099f8 <USB_EPStartXfer+0xbb4>
 80099ce:	187b      	adds	r3, r7, r1
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	4ab3      	ldr	r2, [pc, #716]	; (8009ca4 <USB_EPStartXfer+0xe60>)
 80099d8:	4013      	ands	r3, r2
 80099da:	b29a      	uxth	r2, r3
 80099dc:	187b      	adds	r3, r7, r1
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	801a      	strh	r2, [r3, #0]
 80099e2:	187b      	adds	r3, r7, r1
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	4aac      	ldr	r2, [pc, #688]	; (8009c9c <USB_EPStartXfer+0xe58>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	187b      	adds	r3, r7, r1
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	801a      	strh	r2, [r3, #0]
 80099f6:	e060      	b.n	8009aba <USB_EPStartXfer+0xc76>
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b3e      	cmp	r3, #62	; 0x3e
 80099fe:	d81a      	bhi.n	8009a36 <USB_EPStartXfer+0xbf2>
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	085b      	lsrs	r3, r3, #1
 8009a06:	21e4      	movs	r1, #228	; 0xe4
 8009a08:	187a      	adds	r2, r7, r1
 8009a0a:	6013      	str	r3, [r2, #0]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	2201      	movs	r2, #1
 8009a12:	4013      	ands	r3, r2
 8009a14:	d004      	beq.n	8009a20 <USB_EPStartXfer+0xbdc>
 8009a16:	187b      	adds	r3, r7, r1
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	187a      	adds	r2, r7, r1
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	23e4      	movs	r3, #228	; 0xe4
 8009a22:	18fb      	adds	r3, r7, r3
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	029b      	lsls	r3, r3, #10
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	23a8      	movs	r3, #168	; 0xa8
 8009a2e:	18fb      	adds	r3, r7, r3
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	801a      	strh	r2, [r3, #0]
 8009a34:	e041      	b.n	8009aba <USB_EPStartXfer+0xc76>
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	095b      	lsrs	r3, r3, #5
 8009a3c:	21e4      	movs	r1, #228	; 0xe4
 8009a3e:	187a      	adds	r2, r7, r1
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	221f      	movs	r2, #31
 8009a48:	4013      	ands	r3, r2
 8009a4a:	d104      	bne.n	8009a56 <USB_EPStartXfer+0xc12>
 8009a4c:	187b      	adds	r3, r7, r1
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3b01      	subs	r3, #1
 8009a52:	187a      	adds	r2, r7, r1
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	23e4      	movs	r3, #228	; 0xe4
 8009a58:	18fb      	adds	r3, r7, r3
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	029b      	lsls	r3, r3, #10
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	4a8e      	ldr	r2, [pc, #568]	; (8009c9c <USB_EPStartXfer+0xe58>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	23a8      	movs	r3, #168	; 0xa8
 8009a6a:	18fb      	adds	r3, r7, r3
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	801a      	strh	r2, [r3, #0]
 8009a70:	e023      	b.n	8009aba <USB_EPStartXfer+0xc76>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d11f      	bne.n	8009aba <USB_EPStartXfer+0xc76>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	21b4      	movs	r1, #180	; 0xb4
 8009a7e:	187a      	adds	r2, r7, r1
 8009a80:	6013      	str	r3, [r2, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2250      	movs	r2, #80	; 0x50
 8009a86:	5a9b      	ldrh	r3, [r3, r2]
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	001a      	movs	r2, r3
 8009a8c:	187b      	adds	r3, r7, r1
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	189b      	adds	r3, r3, r2
 8009a92:	187a      	adds	r2, r7, r1
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	00da      	lsls	r2, r3, #3
 8009a9c:	187b      	adds	r3, r7, r1
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	18d3      	adds	r3, r2, r3
 8009aa2:	4a7f      	ldr	r2, [pc, #508]	; (8009ca0 <USB_EPStartXfer+0xe5c>)
 8009aa4:	4694      	mov	ip, r2
 8009aa6:	4463      	add	r3, ip
 8009aa8:	21b0      	movs	r1, #176	; 0xb0
 8009aaa:	187a      	adds	r2, r7, r1
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	187b      	adds	r3, r7, r1
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	801a      	strh	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	22a4      	movs	r2, #164	; 0xa4
 8009abe:	18ba      	adds	r2, r7, r2
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	785b      	ldrb	r3, [r3, #1]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d16f      	bne.n	8009baa <USB_EPStartXfer+0xd66>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	219c      	movs	r1, #156	; 0x9c
 8009ace:	187a      	adds	r2, r7, r1
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2250      	movs	r2, #80	; 0x50
 8009ad6:	5a9b      	ldrh	r3, [r3, r2]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	001a      	movs	r2, r3
 8009adc:	187b      	adds	r3, r7, r1
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	189b      	adds	r3, r3, r2
 8009ae2:	187a      	adds	r2, r7, r1
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	00da      	lsls	r2, r3, #3
 8009aec:	187b      	adds	r3, r7, r1
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	18d3      	adds	r3, r2, r3
 8009af2:	4a6d      	ldr	r2, [pc, #436]	; (8009ca8 <USB_EPStartXfer+0xe64>)
 8009af4:	4694      	mov	ip, r2
 8009af6:	4463      	add	r3, ip
 8009af8:	2198      	movs	r1, #152	; 0x98
 8009afa:	187a      	adds	r2, r7, r1
 8009afc:	6013      	str	r3, [r2, #0]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d114      	bne.n	8009b30 <USB_EPStartXfer+0xcec>
 8009b06:	187b      	adds	r3, r7, r1
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	881b      	ldrh	r3, [r3, #0]
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	4a65      	ldr	r2, [pc, #404]	; (8009ca4 <USB_EPStartXfer+0xe60>)
 8009b10:	4013      	ands	r3, r2
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	187b      	adds	r3, r7, r1
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	801a      	strh	r2, [r3, #0]
 8009b1a:	187b      	adds	r3, r7, r1
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	881b      	ldrh	r3, [r3, #0]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	4a5e      	ldr	r2, [pc, #376]	; (8009c9c <USB_EPStartXfer+0xe58>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	187b      	adds	r3, r7, r1
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	801a      	strh	r2, [r3, #0]
 8009b2e:	e05d      	b.n	8009bec <USB_EPStartXfer+0xda8>
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	2b3e      	cmp	r3, #62	; 0x3e
 8009b36:	d81a      	bhi.n	8009b6e <USB_EPStartXfer+0xd2a>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	085b      	lsrs	r3, r3, #1
 8009b3e:	21e0      	movs	r1, #224	; 0xe0
 8009b40:	187a      	adds	r2, r7, r1
 8009b42:	6013      	str	r3, [r2, #0]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	d004      	beq.n	8009b58 <USB_EPStartXfer+0xd14>
 8009b4e:	187b      	adds	r3, r7, r1
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3301      	adds	r3, #1
 8009b54:	187a      	adds	r2, r7, r1
 8009b56:	6013      	str	r3, [r2, #0]
 8009b58:	23e0      	movs	r3, #224	; 0xe0
 8009b5a:	18fb      	adds	r3, r7, r3
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	029b      	lsls	r3, r3, #10
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	2398      	movs	r3, #152	; 0x98
 8009b66:	18fb      	adds	r3, r7, r3
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	801a      	strh	r2, [r3, #0]
 8009b6c:	e03e      	b.n	8009bec <USB_EPStartXfer+0xda8>
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	095b      	lsrs	r3, r3, #5
 8009b74:	21e0      	movs	r1, #224	; 0xe0
 8009b76:	187a      	adds	r2, r7, r1
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	221f      	movs	r2, #31
 8009b80:	4013      	ands	r3, r2
 8009b82:	d104      	bne.n	8009b8e <USB_EPStartXfer+0xd4a>
 8009b84:	187b      	adds	r3, r7, r1
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	187a      	adds	r2, r7, r1
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	23e0      	movs	r3, #224	; 0xe0
 8009b90:	18fb      	adds	r3, r7, r3
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	029b      	lsls	r3, r3, #10
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	4a40      	ldr	r2, [pc, #256]	; (8009c9c <USB_EPStartXfer+0xe58>)
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	2398      	movs	r3, #152	; 0x98
 8009ba2:	18fb      	adds	r3, r7, r3
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	801a      	strh	r2, [r3, #0]
 8009ba8:	e020      	b.n	8009bec <USB_EPStartXfer+0xda8>
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	785b      	ldrb	r3, [r3, #1]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d11c      	bne.n	8009bec <USB_EPStartXfer+0xda8>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2250      	movs	r2, #80	; 0x50
 8009bb6:	5a9b      	ldrh	r3, [r3, r2]
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	001a      	movs	r2, r3
 8009bbc:	21a4      	movs	r1, #164	; 0xa4
 8009bbe:	187b      	adds	r3, r7, r1
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	189b      	adds	r3, r3, r2
 8009bc4:	187a      	adds	r2, r7, r1
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	00da      	lsls	r2, r3, #3
 8009bce:	187b      	adds	r3, r7, r1
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	18d3      	adds	r3, r2, r3
 8009bd4:	4a34      	ldr	r2, [pc, #208]	; (8009ca8 <USB_EPStartXfer+0xe64>)
 8009bd6:	4694      	mov	ip, r2
 8009bd8:	4463      	add	r3, ip
 8009bda:	21a0      	movs	r1, #160	; 0xa0
 8009bdc:	187a      	adds	r2, r7, r1
 8009bde:	6013      	str	r3, [r2, #0]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	187b      	adds	r3, r7, r1
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d100      	bne.n	8009bf6 <USB_EPStartXfer+0xdb2>
 8009bf4:	e1aa      	b.n	8009f4c <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	18d2      	adds	r2, r2, r3
 8009c00:	2196      	movs	r1, #150	; 0x96
 8009c02:	187b      	adds	r3, r7, r1
 8009c04:	8812      	ldrh	r2, [r2, #0]
 8009c06:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c08:	187b      	adds	r3, r7, r1
 8009c0a:	881a      	ldrh	r2, [r3, #0]
 8009c0c:	2380      	movs	r3, #128	; 0x80
 8009c0e:	01db      	lsls	r3, r3, #7
 8009c10:	4013      	ands	r3, r2
 8009c12:	d004      	beq.n	8009c1e <USB_EPStartXfer+0xdda>
 8009c14:	187b      	adds	r3, r7, r1
 8009c16:	881b      	ldrh	r3, [r3, #0]
 8009c18:	2240      	movs	r2, #64	; 0x40
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	d10d      	bne.n	8009c3a <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c1e:	2196      	movs	r1, #150	; 0x96
 8009c20:	187b      	adds	r3, r7, r1
 8009c22:	881a      	ldrh	r2, [r3, #0]
 8009c24:	2380      	movs	r3, #128	; 0x80
 8009c26:	01db      	lsls	r3, r3, #7
 8009c28:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009c2a:	d000      	beq.n	8009c2e <USB_EPStartXfer+0xdea>
 8009c2c:	e18e      	b.n	8009f4c <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009c2e:	187b      	adds	r3, r7, r1
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	2240      	movs	r2, #64	; 0x40
 8009c34:	4013      	ands	r3, r2
 8009c36:	d000      	beq.n	8009c3a <USB_EPStartXfer+0xdf6>
 8009c38:	e188      	b.n	8009f4c <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	18d3      	adds	r3, r2, r3
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	2094      	movs	r0, #148	; 0x94
 8009c4a:	183b      	adds	r3, r7, r0
 8009c4c:	4917      	ldr	r1, [pc, #92]	; (8009cac <USB_EPStartXfer+0xe68>)
 8009c4e:	400a      	ands	r2, r1
 8009c50:	801a      	strh	r2, [r3, #0]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	18d3      	adds	r3, r2, r3
 8009c5c:	183a      	adds	r2, r7, r0
 8009c5e:	8812      	ldrh	r2, [r2, #0]
 8009c60:	4913      	ldr	r1, [pc, #76]	; (8009cb0 <USB_EPStartXfer+0xe6c>)
 8009c62:	430a      	orrs	r2, r1
 8009c64:	b292      	uxth	r2, r2
 8009c66:	801a      	strh	r2, [r3, #0]
 8009c68:	e170      	b.n	8009f4c <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	78db      	ldrb	r3, [r3, #3]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d000      	beq.n	8009c74 <USB_EPStartXfer+0xe30>
 8009c72:	e169      	b.n	8009f48 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	699a      	ldr	r2, [r3, #24]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d919      	bls.n	8009cb4 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	1d7a      	adds	r2, r7, #5
 8009c86:	32ff      	adds	r2, #255	; 0xff
 8009c88:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	699a      	ldr	r2, [r3, #24]
 8009c8e:	1d7b      	adds	r3, r7, #5
 8009c90:	33ff      	adds	r3, #255	; 0xff
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	1ad2      	subs	r2, r2, r3
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	619a      	str	r2, [r3, #24]
 8009c9a:	e013      	b.n	8009cc4 <USB_EPStartXfer+0xe80>
 8009c9c:	ffff8000 	.word	0xffff8000
 8009ca0:	00000402 	.word	0x00000402
 8009ca4:	ffff83ff 	.word	0xffff83ff
 8009ca8:	00000406 	.word	0x00000406
 8009cac:	ffff8f8f 	.word	0xffff8f8f
 8009cb0:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	1d7a      	adds	r2, r7, #5
 8009cba:	32ff      	adds	r2, #255	; 0xff
 8009cbc:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	785b      	ldrb	r3, [r3, #1]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d000      	beq.n	8009cce <USB_EPStartXfer+0xe8a>
 8009ccc:	e075      	b.n	8009dba <USB_EPStartXfer+0xf76>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	21cc      	movs	r1, #204	; 0xcc
 8009cd2:	187a      	adds	r2, r7, r1
 8009cd4:	6013      	str	r3, [r2, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2250      	movs	r2, #80	; 0x50
 8009cda:	5a9b      	ldrh	r3, [r3, r2]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	001a      	movs	r2, r3
 8009ce0:	187b      	adds	r3, r7, r1
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	189b      	adds	r3, r3, r2
 8009ce6:	187a      	adds	r2, r7, r1
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	00da      	lsls	r2, r3, #3
 8009cf0:	187b      	adds	r3, r7, r1
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	18d3      	adds	r3, r2, r3
 8009cf6:	4aaa      	ldr	r2, [pc, #680]	; (8009fa0 <USB_EPStartXfer+0x115c>)
 8009cf8:	4694      	mov	ip, r2
 8009cfa:	4463      	add	r3, ip
 8009cfc:	21c8      	movs	r1, #200	; 0xc8
 8009cfe:	187a      	adds	r2, r7, r1
 8009d00:	6013      	str	r3, [r2, #0]
 8009d02:	1d7b      	adds	r3, r7, #5
 8009d04:	33ff      	adds	r3, #255	; 0xff
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d114      	bne.n	8009d36 <USB_EPStartXfer+0xef2>
 8009d0c:	187b      	adds	r3, r7, r1
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	4aa3      	ldr	r2, [pc, #652]	; (8009fa4 <USB_EPStartXfer+0x1160>)
 8009d16:	4013      	ands	r3, r2
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	187b      	adds	r3, r7, r1
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	187b      	adds	r3, r7, r1
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	4a9f      	ldr	r2, [pc, #636]	; (8009fa8 <USB_EPStartXfer+0x1164>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	187b      	adds	r3, r7, r1
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	801a      	strh	r2, [r3, #0]
 8009d34:	e066      	b.n	8009e04 <USB_EPStartXfer+0xfc0>
 8009d36:	1d7b      	adds	r3, r7, #5
 8009d38:	33ff      	adds	r3, #255	; 0xff
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b3e      	cmp	r3, #62	; 0x3e
 8009d3e:	d81c      	bhi.n	8009d7a <USB_EPStartXfer+0xf36>
 8009d40:	1d7b      	adds	r3, r7, #5
 8009d42:	33ff      	adds	r3, #255	; 0xff
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	085b      	lsrs	r3, r3, #1
 8009d48:	21dc      	movs	r1, #220	; 0xdc
 8009d4a:	187a      	adds	r2, r7, r1
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	1d7b      	adds	r3, r7, #5
 8009d50:	33ff      	adds	r3, #255	; 0xff
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2201      	movs	r2, #1
 8009d56:	4013      	ands	r3, r2
 8009d58:	d004      	beq.n	8009d64 <USB_EPStartXfer+0xf20>
 8009d5a:	187b      	adds	r3, r7, r1
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	187a      	adds	r2, r7, r1
 8009d62:	6013      	str	r3, [r2, #0]
 8009d64:	23dc      	movs	r3, #220	; 0xdc
 8009d66:	18fb      	adds	r3, r7, r3
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	029b      	lsls	r3, r3, #10
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	23c8      	movs	r3, #200	; 0xc8
 8009d72:	18fb      	adds	r3, r7, r3
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	801a      	strh	r2, [r3, #0]
 8009d78:	e044      	b.n	8009e04 <USB_EPStartXfer+0xfc0>
 8009d7a:	1d7b      	adds	r3, r7, #5
 8009d7c:	33ff      	adds	r3, #255	; 0xff
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	095b      	lsrs	r3, r3, #5
 8009d82:	21dc      	movs	r1, #220	; 0xdc
 8009d84:	187a      	adds	r2, r7, r1
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	1d7b      	adds	r3, r7, #5
 8009d8a:	33ff      	adds	r3, #255	; 0xff
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	221f      	movs	r2, #31
 8009d90:	4013      	ands	r3, r2
 8009d92:	d104      	bne.n	8009d9e <USB_EPStartXfer+0xf5a>
 8009d94:	187b      	adds	r3, r7, r1
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	187a      	adds	r2, r7, r1
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	23dc      	movs	r3, #220	; 0xdc
 8009da0:	18fb      	adds	r3, r7, r3
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	029b      	lsls	r3, r3, #10
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	4a7f      	ldr	r2, [pc, #508]	; (8009fa8 <USB_EPStartXfer+0x1164>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	23c8      	movs	r3, #200	; 0xc8
 8009db2:	18fb      	adds	r3, r7, r3
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	801a      	strh	r2, [r3, #0]
 8009db8:	e024      	b.n	8009e04 <USB_EPStartXfer+0xfc0>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d120      	bne.n	8009e04 <USB_EPStartXfer+0xfc0>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	21d4      	movs	r1, #212	; 0xd4
 8009dc6:	187a      	adds	r2, r7, r1
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2250      	movs	r2, #80	; 0x50
 8009dce:	5a9b      	ldrh	r3, [r3, r2]
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	001a      	movs	r2, r3
 8009dd4:	187b      	adds	r3, r7, r1
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	189b      	adds	r3, r3, r2
 8009dda:	187a      	adds	r2, r7, r1
 8009ddc:	6013      	str	r3, [r2, #0]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	00da      	lsls	r2, r3, #3
 8009de4:	187b      	adds	r3, r7, r1
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	18d3      	adds	r3, r2, r3
 8009dea:	4a6d      	ldr	r2, [pc, #436]	; (8009fa0 <USB_EPStartXfer+0x115c>)
 8009dec:	4694      	mov	ip, r2
 8009dee:	4463      	add	r3, ip
 8009df0:	21d0      	movs	r1, #208	; 0xd0
 8009df2:	187a      	adds	r2, r7, r1
 8009df4:	6013      	str	r3, [r2, #0]
 8009df6:	1d7b      	adds	r3, r7, #5
 8009df8:	33ff      	adds	r3, #255	; 0xff
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	187b      	adds	r3, r7, r1
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	801a      	strh	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	22c4      	movs	r2, #196	; 0xc4
 8009e08:	18ba      	adds	r2, r7, r2
 8009e0a:	6013      	str	r3, [r2, #0]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	785b      	ldrb	r3, [r3, #1]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d000      	beq.n	8009e16 <USB_EPStartXfer+0xfd2>
 8009e14:	e075      	b.n	8009f02 <USB_EPStartXfer+0x10be>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	21bc      	movs	r1, #188	; 0xbc
 8009e1a:	187a      	adds	r2, r7, r1
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2250      	movs	r2, #80	; 0x50
 8009e22:	5a9b      	ldrh	r3, [r3, r2]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	001a      	movs	r2, r3
 8009e28:	187b      	adds	r3, r7, r1
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	189b      	adds	r3, r3, r2
 8009e2e:	187a      	adds	r2, r7, r1
 8009e30:	6013      	str	r3, [r2, #0]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	00da      	lsls	r2, r3, #3
 8009e38:	187b      	adds	r3, r7, r1
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	18d3      	adds	r3, r2, r3
 8009e3e:	4a5b      	ldr	r2, [pc, #364]	; (8009fac <USB_EPStartXfer+0x1168>)
 8009e40:	4694      	mov	ip, r2
 8009e42:	4463      	add	r3, ip
 8009e44:	21b8      	movs	r1, #184	; 0xb8
 8009e46:	187a      	adds	r2, r7, r1
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	1d7b      	adds	r3, r7, #5
 8009e4c:	33ff      	adds	r3, #255	; 0xff
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d114      	bne.n	8009e7e <USB_EPStartXfer+0x103a>
 8009e54:	187b      	adds	r3, r7, r1
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	4a51      	ldr	r2, [pc, #324]	; (8009fa4 <USB_EPStartXfer+0x1160>)
 8009e5e:	4013      	ands	r3, r2
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	187b      	adds	r3, r7, r1
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	801a      	strh	r2, [r3, #0]
 8009e68:	187b      	adds	r3, r7, r1
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	4a4d      	ldr	r2, [pc, #308]	; (8009fa8 <USB_EPStartXfer+0x1164>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	187b      	adds	r3, r7, r1
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	801a      	strh	r2, [r3, #0]
 8009e7c:	e066      	b.n	8009f4c <USB_EPStartXfer+0x1108>
 8009e7e:	1d7b      	adds	r3, r7, #5
 8009e80:	33ff      	adds	r3, #255	; 0xff
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b3e      	cmp	r3, #62	; 0x3e
 8009e86:	d81c      	bhi.n	8009ec2 <USB_EPStartXfer+0x107e>
 8009e88:	1d7b      	adds	r3, r7, #5
 8009e8a:	33ff      	adds	r3, #255	; 0xff
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	085b      	lsrs	r3, r3, #1
 8009e90:	21d8      	movs	r1, #216	; 0xd8
 8009e92:	187a      	adds	r2, r7, r1
 8009e94:	6013      	str	r3, [r2, #0]
 8009e96:	1d7b      	adds	r3, r7, #5
 8009e98:	33ff      	adds	r3, #255	; 0xff
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	d004      	beq.n	8009eac <USB_EPStartXfer+0x1068>
 8009ea2:	187b      	adds	r3, r7, r1
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	187a      	adds	r2, r7, r1
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	23d8      	movs	r3, #216	; 0xd8
 8009eae:	18fb      	adds	r3, r7, r3
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	029b      	lsls	r3, r3, #10
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	23b8      	movs	r3, #184	; 0xb8
 8009eba:	18fb      	adds	r3, r7, r3
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	801a      	strh	r2, [r3, #0]
 8009ec0:	e044      	b.n	8009f4c <USB_EPStartXfer+0x1108>
 8009ec2:	1d7b      	adds	r3, r7, #5
 8009ec4:	33ff      	adds	r3, #255	; 0xff
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	095b      	lsrs	r3, r3, #5
 8009eca:	21d8      	movs	r1, #216	; 0xd8
 8009ecc:	187a      	adds	r2, r7, r1
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	1d7b      	adds	r3, r7, #5
 8009ed2:	33ff      	adds	r3, #255	; 0xff
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	221f      	movs	r2, #31
 8009ed8:	4013      	ands	r3, r2
 8009eda:	d104      	bne.n	8009ee6 <USB_EPStartXfer+0x10a2>
 8009edc:	187b      	adds	r3, r7, r1
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	187a      	adds	r2, r7, r1
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	23d8      	movs	r3, #216	; 0xd8
 8009ee8:	18fb      	adds	r3, r7, r3
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	029b      	lsls	r3, r3, #10
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	4a2d      	ldr	r2, [pc, #180]	; (8009fa8 <USB_EPStartXfer+0x1164>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	23b8      	movs	r3, #184	; 0xb8
 8009efa:	18fb      	adds	r3, r7, r3
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	801a      	strh	r2, [r3, #0]
 8009f00:	e024      	b.n	8009f4c <USB_EPStartXfer+0x1108>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	785b      	ldrb	r3, [r3, #1]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d120      	bne.n	8009f4c <USB_EPStartXfer+0x1108>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2250      	movs	r2, #80	; 0x50
 8009f0e:	5a9b      	ldrh	r3, [r3, r2]
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	001a      	movs	r2, r3
 8009f14:	21c4      	movs	r1, #196	; 0xc4
 8009f16:	187b      	adds	r3, r7, r1
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	189b      	adds	r3, r3, r2
 8009f1c:	187a      	adds	r2, r7, r1
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	00da      	lsls	r2, r3, #3
 8009f26:	187b      	adds	r3, r7, r1
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	18d3      	adds	r3, r2, r3
 8009f2c:	4a1f      	ldr	r2, [pc, #124]	; (8009fac <USB_EPStartXfer+0x1168>)
 8009f2e:	4694      	mov	ip, r2
 8009f30:	4463      	add	r3, ip
 8009f32:	21c0      	movs	r1, #192	; 0xc0
 8009f34:	187a      	adds	r2, r7, r1
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	1d7b      	adds	r3, r7, #5
 8009f3a:	33ff      	adds	r3, #255	; 0xff
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	187b      	adds	r3, r7, r1
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	801a      	strh	r2, [r3, #0]
 8009f46:	e001      	b.n	8009f4c <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e025      	b.n	8009f98 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	18d3      	adds	r3, r2, r3
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	208a      	movs	r0, #138	; 0x8a
 8009f5c:	183b      	adds	r3, r7, r0
 8009f5e:	4914      	ldr	r1, [pc, #80]	; (8009fb0 <USB_EPStartXfer+0x116c>)
 8009f60:	400a      	ands	r2, r1
 8009f62:	801a      	strh	r2, [r3, #0]
 8009f64:	183b      	adds	r3, r7, r0
 8009f66:	183a      	adds	r2, r7, r0
 8009f68:	8812      	ldrh	r2, [r2, #0]
 8009f6a:	2180      	movs	r1, #128	; 0x80
 8009f6c:	0149      	lsls	r1, r1, #5
 8009f6e:	404a      	eors	r2, r1
 8009f70:	801a      	strh	r2, [r3, #0]
 8009f72:	183b      	adds	r3, r7, r0
 8009f74:	183a      	adds	r2, r7, r0
 8009f76:	8812      	ldrh	r2, [r2, #0]
 8009f78:	2180      	movs	r1, #128	; 0x80
 8009f7a:	0189      	lsls	r1, r1, #6
 8009f7c:	404a      	eors	r2, r1
 8009f7e:	801a      	strh	r2, [r3, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	18d3      	adds	r3, r2, r3
 8009f8a:	183a      	adds	r2, r7, r0
 8009f8c:	8812      	ldrh	r2, [r2, #0]
 8009f8e:	4909      	ldr	r1, [pc, #36]	; (8009fb4 <USB_EPStartXfer+0x1170>)
 8009f90:	430a      	orrs	r2, r1
 8009f92:	b292      	uxth	r2, r2
 8009f94:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	0018      	movs	r0, r3
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	b043      	add	sp, #268	; 0x10c
 8009f9e:	bd90      	pop	{r4, r7, pc}
 8009fa0:	00000402 	.word	0x00000402
 8009fa4:	ffff83ff 	.word	0xffff83ff
 8009fa8:	ffff8000 	.word	0xffff8000
 8009fac:	00000406 	.word	0x00000406
 8009fb0:	ffffbf8f 	.word	0xffffbf8f
 8009fb4:	ffff8080 	.word	0xffff8080

08009fb8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	785b      	ldrb	r3, [r3, #1]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d01d      	beq.n	800a006 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	18d3      	adds	r3, r2, r3
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	200c      	movs	r0, #12
 8009fda:	183b      	adds	r3, r7, r0
 8009fdc:	491b      	ldr	r1, [pc, #108]	; (800a04c <USB_EPSetStall+0x94>)
 8009fde:	400a      	ands	r2, r1
 8009fe0:	801a      	strh	r2, [r3, #0]
 8009fe2:	183b      	adds	r3, r7, r0
 8009fe4:	183a      	adds	r2, r7, r0
 8009fe6:	8812      	ldrh	r2, [r2, #0]
 8009fe8:	2110      	movs	r1, #16
 8009fea:	404a      	eors	r2, r1
 8009fec:	801a      	strh	r2, [r3, #0]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	18d3      	adds	r3, r2, r3
 8009ff8:	183a      	adds	r2, r7, r0
 8009ffa:	8812      	ldrh	r2, [r2, #0]
 8009ffc:	4914      	ldr	r1, [pc, #80]	; (800a050 <USB_EPSetStall+0x98>)
 8009ffe:	430a      	orrs	r2, r1
 800a000:	b292      	uxth	r2, r2
 800a002:	801a      	strh	r2, [r3, #0]
 800a004:	e01d      	b.n	800a042 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	18d3      	adds	r3, r2, r3
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	b29a      	uxth	r2, r3
 800a014:	200e      	movs	r0, #14
 800a016:	183b      	adds	r3, r7, r0
 800a018:	490e      	ldr	r1, [pc, #56]	; (800a054 <USB_EPSetStall+0x9c>)
 800a01a:	400a      	ands	r2, r1
 800a01c:	801a      	strh	r2, [r3, #0]
 800a01e:	183b      	adds	r3, r7, r0
 800a020:	183a      	adds	r2, r7, r0
 800a022:	8812      	ldrh	r2, [r2, #0]
 800a024:	2180      	movs	r1, #128	; 0x80
 800a026:	0149      	lsls	r1, r1, #5
 800a028:	404a      	eors	r2, r1
 800a02a:	801a      	strh	r2, [r3, #0]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	18d3      	adds	r3, r2, r3
 800a036:	183a      	adds	r2, r7, r0
 800a038:	8812      	ldrh	r2, [r2, #0]
 800a03a:	4905      	ldr	r1, [pc, #20]	; (800a050 <USB_EPSetStall+0x98>)
 800a03c:	430a      	orrs	r2, r1
 800a03e:	b292      	uxth	r2, r2
 800a040:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	0018      	movs	r0, r3
 800a046:	46bd      	mov	sp, r7
 800a048:	b004      	add	sp, #16
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	ffff8fbf 	.word	0xffff8fbf
 800a050:	ffff8080 	.word	0xffff8080
 800a054:	ffffbf8f 	.word	0xffffbf8f

0800a058 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	7b1b      	ldrb	r3, [r3, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d000      	beq.n	800a06c <USB_EPClearStall+0x14>
 800a06a:	e095      	b.n	800a198 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	785b      	ldrb	r3, [r3, #1]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d046      	beq.n	800a102 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	18d2      	adds	r2, r2, r3
 800a07e:	2110      	movs	r1, #16
 800a080:	187b      	adds	r3, r7, r1
 800a082:	8812      	ldrh	r2, [r2, #0]
 800a084:	801a      	strh	r2, [r3, #0]
 800a086:	187b      	adds	r3, r7, r1
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	2240      	movs	r2, #64	; 0x40
 800a08c:	4013      	ands	r3, r2
 800a08e:	d016      	beq.n	800a0be <USB_EPClearStall+0x66>
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	18d3      	adds	r3, r2, r3
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	200e      	movs	r0, #14
 800a0a0:	183b      	adds	r3, r7, r0
 800a0a2:	4940      	ldr	r1, [pc, #256]	; (800a1a4 <USB_EPClearStall+0x14c>)
 800a0a4:	400a      	ands	r2, r1
 800a0a6:	801a      	strh	r2, [r3, #0]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	18d3      	adds	r3, r2, r3
 800a0b2:	183a      	adds	r2, r7, r0
 800a0b4:	8812      	ldrh	r2, [r2, #0]
 800a0b6:	493c      	ldr	r1, [pc, #240]	; (800a1a8 <USB_EPClearStall+0x150>)
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	b292      	uxth	r2, r2
 800a0bc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	78db      	ldrb	r3, [r3, #3]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d068      	beq.n	800a198 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	18d3      	adds	r3, r2, r3
 800a0d0:	881b      	ldrh	r3, [r3, #0]
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	200c      	movs	r0, #12
 800a0d6:	183b      	adds	r3, r7, r0
 800a0d8:	4934      	ldr	r1, [pc, #208]	; (800a1ac <USB_EPClearStall+0x154>)
 800a0da:	400a      	ands	r2, r1
 800a0dc:	801a      	strh	r2, [r3, #0]
 800a0de:	183b      	adds	r3, r7, r0
 800a0e0:	183a      	adds	r2, r7, r0
 800a0e2:	8812      	ldrh	r2, [r2, #0]
 800a0e4:	2120      	movs	r1, #32
 800a0e6:	404a      	eors	r2, r1
 800a0e8:	801a      	strh	r2, [r3, #0]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	18d3      	adds	r3, r2, r3
 800a0f4:	183a      	adds	r2, r7, r0
 800a0f6:	8812      	ldrh	r2, [r2, #0]
 800a0f8:	492d      	ldr	r1, [pc, #180]	; (800a1b0 <USB_EPClearStall+0x158>)
 800a0fa:	430a      	orrs	r2, r1
 800a0fc:	b292      	uxth	r2, r2
 800a0fe:	801a      	strh	r2, [r3, #0]
 800a100:	e04a      	b.n	800a198 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	18d2      	adds	r2, r2, r3
 800a10c:	2116      	movs	r1, #22
 800a10e:	187b      	adds	r3, r7, r1
 800a110:	8812      	ldrh	r2, [r2, #0]
 800a112:	801a      	strh	r2, [r3, #0]
 800a114:	187b      	adds	r3, r7, r1
 800a116:	881a      	ldrh	r2, [r3, #0]
 800a118:	2380      	movs	r3, #128	; 0x80
 800a11a:	01db      	lsls	r3, r3, #7
 800a11c:	4013      	ands	r3, r2
 800a11e:	d016      	beq.n	800a14e <USB_EPClearStall+0xf6>
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	18d3      	adds	r3, r2, r3
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	2014      	movs	r0, #20
 800a130:	183b      	adds	r3, r7, r0
 800a132:	491c      	ldr	r1, [pc, #112]	; (800a1a4 <USB_EPClearStall+0x14c>)
 800a134:	400a      	ands	r2, r1
 800a136:	801a      	strh	r2, [r3, #0]
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	18d3      	adds	r3, r2, r3
 800a142:	183a      	adds	r2, r7, r0
 800a144:	8812      	ldrh	r2, [r2, #0]
 800a146:	491b      	ldr	r1, [pc, #108]	; (800a1b4 <USB_EPClearStall+0x15c>)
 800a148:	430a      	orrs	r2, r1
 800a14a:	b292      	uxth	r2, r2
 800a14c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	18d3      	adds	r3, r2, r3
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	2012      	movs	r0, #18
 800a15e:	183b      	adds	r3, r7, r0
 800a160:	4915      	ldr	r1, [pc, #84]	; (800a1b8 <USB_EPClearStall+0x160>)
 800a162:	400a      	ands	r2, r1
 800a164:	801a      	strh	r2, [r3, #0]
 800a166:	183b      	adds	r3, r7, r0
 800a168:	183a      	adds	r2, r7, r0
 800a16a:	8812      	ldrh	r2, [r2, #0]
 800a16c:	2180      	movs	r1, #128	; 0x80
 800a16e:	0149      	lsls	r1, r1, #5
 800a170:	404a      	eors	r2, r1
 800a172:	801a      	strh	r2, [r3, #0]
 800a174:	183b      	adds	r3, r7, r0
 800a176:	183a      	adds	r2, r7, r0
 800a178:	8812      	ldrh	r2, [r2, #0]
 800a17a:	2180      	movs	r1, #128	; 0x80
 800a17c:	0189      	lsls	r1, r1, #6
 800a17e:	404a      	eors	r2, r1
 800a180:	801a      	strh	r2, [r3, #0]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	18d3      	adds	r3, r2, r3
 800a18c:	183a      	adds	r2, r7, r0
 800a18e:	8812      	ldrh	r2, [r2, #0]
 800a190:	4907      	ldr	r1, [pc, #28]	; (800a1b0 <USB_EPClearStall+0x158>)
 800a192:	430a      	orrs	r2, r1
 800a194:	b292      	uxth	r2, r2
 800a196:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	0018      	movs	r0, r3
 800a19c:	46bd      	mov	sp, r7
 800a19e:	b006      	add	sp, #24
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	46c0      	nop			; (mov r8, r8)
 800a1a4:	ffff8f8f 	.word	0xffff8f8f
 800a1a8:	ffff80c0 	.word	0xffff80c0
 800a1ac:	ffff8fbf 	.word	0xffff8fbf
 800a1b0:	ffff8080 	.word	0xffff8080
 800a1b4:	ffffc080 	.word	0xffffc080
 800a1b8:	ffffbf8f 	.word	0xffffbf8f

0800a1bc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	000a      	movs	r2, r1
 800a1c6:	1cfb      	adds	r3, r7, #3
 800a1c8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a1ca:	1cfb      	adds	r3, r7, #3
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d103      	bne.n	800a1da <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	224c      	movs	r2, #76	; 0x4c
 800a1d6:	2180      	movs	r1, #128	; 0x80
 800a1d8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	0018      	movs	r0, r3
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	b002      	add	sp, #8
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2258      	movs	r2, #88	; 0x58
 800a1f0:	5a9b      	ldrh	r3, [r3, r2]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	4a05      	ldr	r2, [pc, #20]	; (800a20c <USB_DevConnect+0x28>)
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	b299      	uxth	r1, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2258      	movs	r2, #88	; 0x58
 800a1fe:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	0018      	movs	r0, r3
 800a204:	46bd      	mov	sp, r7
 800a206:	b002      	add	sp, #8
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	46c0      	nop			; (mov r8, r8)
 800a20c:	ffff8000 	.word	0xffff8000

0800a210 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2244      	movs	r2, #68	; 0x44
 800a21c:	5a9b      	ldrh	r3, [r3, r2]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a222:	68fb      	ldr	r3, [r7, #12]
}
 800a224:	0018      	movs	r0, r3
 800a226:	46bd      	mov	sp, r7
 800a228:	b004      	add	sp, #16
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b08c      	sub	sp, #48	; 0x30
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	0019      	movs	r1, r3
 800a238:	1dbb      	adds	r3, r7, #6
 800a23a:	801a      	strh	r2, [r3, #0]
 800a23c:	1d3b      	adds	r3, r7, #4
 800a23e:	1c0a      	adds	r2, r1, #0
 800a240:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a242:	1d3b      	adds	r3, r7, #4
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	3301      	adds	r3, #1
 800a248:	085b      	lsrs	r3, r3, #1
 800a24a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a254:	1dbb      	adds	r3, r7, #6
 800a256:	881a      	ldrh	r2, [r3, #0]
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	18d3      	adds	r3, r2, r3
 800a25c:	2280      	movs	r2, #128	; 0x80
 800a25e:	00d2      	lsls	r2, r2, #3
 800a260:	4694      	mov	ip, r2
 800a262:	4463      	add	r3, ip
 800a264:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a26a:	e01b      	b.n	800a2a4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	3301      	adds	r3, #1
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	021b      	lsls	r3, r3, #8
 800a280:	b29b      	uxth	r3, r3
 800a282:	001a      	movs	r2, r3
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	4313      	orrs	r3, r2
 800a288:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a290:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a294:	3302      	adds	r3, #2
 800a296:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	3301      	adds	r3, #1
 800a29c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1e0      	bne.n	800a26c <USB_WritePMA+0x40>
  }
}
 800a2aa:	46c0      	nop			; (mov r8, r8)
 800a2ac:	46c0      	nop			; (mov r8, r8)
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	b00c      	add	sp, #48	; 0x30
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08a      	sub	sp, #40	; 0x28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	0019      	movs	r1, r3
 800a2c0:	1dbb      	adds	r3, r7, #6
 800a2c2:	801a      	strh	r2, [r3, #0]
 800a2c4:	1d3b      	adds	r3, r7, #4
 800a2c6:	1c0a      	adds	r2, r1, #0
 800a2c8:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a2ca:	1d3b      	adds	r3, r7, #4
 800a2cc:	881b      	ldrh	r3, [r3, #0]
 800a2ce:	085b      	lsrs	r3, r3, #1
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a2dc:	1dbb      	adds	r3, r7, #6
 800a2de:	881a      	ldrh	r2, [r3, #0]
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	18d3      	adds	r3, r2, r3
 800a2e4:	2280      	movs	r2, #128	; 0x80
 800a2e6:	00d2      	lsls	r2, r2, #3
 800a2e8:	4694      	mov	ip, r2
 800a2ea:	4463      	add	r3, ip
 800a2ec:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2f2:	e018      	b.n	800a326 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a2f4:	6a3b      	ldr	r3, [r7, #32]
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a2fc:	6a3b      	ldr	r3, [r7, #32]
 800a2fe:	3302      	adds	r3, #2
 800a300:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	b2da      	uxtb	r2, r3
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	3301      	adds	r3, #1
 800a30e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	0a1b      	lsrs	r3, r3, #8
 800a314:	b2da      	uxtb	r2, r3
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	3301      	adds	r3, #1
 800a31e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	3b01      	subs	r3, #1
 800a324:	627b      	str	r3, [r7, #36]	; 0x24
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1e3      	bne.n	800a2f4 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a32c:	1d3b      	adds	r3, r7, #4
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	2201      	movs	r2, #1
 800a332:	4013      	ands	r3, r2
 800a334:	b29b      	uxth	r3, r3
 800a336:	2b00      	cmp	r3, #0
 800a338:	d007      	beq.n	800a34a <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	b2da      	uxtb	r2, r3
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	701a      	strb	r2, [r3, #0]
  }
}
 800a34a:	46c0      	nop			; (mov r8, r8)
 800a34c:	46bd      	mov	sp, r7
 800a34e:	b00a      	add	sp, #40	; 0x28
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	000a      	movs	r2, r1
 800a35c:	1cfb      	adds	r3, r7, #3
 800a35e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a360:	230f      	movs	r3, #15
 800a362:	18fb      	adds	r3, r7, r3
 800a364:	2200      	movs	r2, #0
 800a366:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	7c1b      	ldrb	r3, [r3, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d116      	bne.n	800a39e <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a370:	2380      	movs	r3, #128	; 0x80
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	2202      	movs	r2, #2
 800a378:	2181      	movs	r1, #129	; 0x81
 800a37a:	f002 f8b4 	bl	800c4e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a384:	2380      	movs	r3, #128	; 0x80
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	2202      	movs	r2, #2
 800a38c:	2101      	movs	r1, #1
 800a38e:	f002 f8aa 	bl	800c4e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	23b6      	movs	r3, #182	; 0xb6
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	2101      	movs	r1, #1
 800a39a:	50d1      	str	r1, [r2, r3]
 800a39c:	e013      	b.n	800a3c6 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	2340      	movs	r3, #64	; 0x40
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	2181      	movs	r1, #129	; 0x81
 800a3a6:	f002 f89e 	bl	800c4e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	2340      	movs	r3, #64	; 0x40
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	f002 f895 	bl	800c4e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	23b6      	movs	r3, #182	; 0xb6
 800a3c0:	005b      	lsls	r3, r3, #1
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	2182      	movs	r1, #130	; 0x82
 800a3ce:	f002 f88a 	bl	800c4e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a3d8:	2387      	movs	r3, #135	; 0x87
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	0018      	movs	r0, r3
 800a3de:	f002 fa1b 	bl	800c818 <USBD_static_malloc>
 800a3e2:	0001      	movs	r1, r0
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	23ae      	movs	r3, #174	; 0xae
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	23ae      	movs	r3, #174	; 0xae
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	58d3      	ldr	r3, [r2, r3]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d104      	bne.n	800a402 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800a3f8:	230f      	movs	r3, #15
 800a3fa:	18fb      	adds	r3, r7, r3
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	701a      	strb	r2, [r3, #0]
 800a400:	e02c      	b.n	800a45c <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	23ae      	movs	r3, #174	; 0xae
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	58d3      	ldr	r3, [r2, r3]
 800a40a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	23af      	movs	r3, #175	; 0xaf
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	58d3      	ldr	r3, [r2, r3]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	2385      	movs	r3, #133	; 0x85
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	2100      	movs	r1, #0
 800a420:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	2386      	movs	r3, #134	; 0x86
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	2100      	movs	r1, #0
 800a42a:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	7c1b      	ldrb	r3, [r3, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	2381      	movs	r3, #129	; 0x81
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	58d2      	ldr	r2, [r2, r3]
 800a43c:	2380      	movs	r3, #128	; 0x80
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	2101      	movs	r1, #1
 800a444:	f002 f99a 	bl	800c77c <USBD_LL_PrepareReceive>
 800a448:	e008      	b.n	800a45c <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	2381      	movs	r3, #129	; 0x81
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	58d2      	ldr	r2, [r2, r3]
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	2340      	movs	r3, #64	; 0x40
 800a456:	2101      	movs	r1, #1
 800a458:	f002 f990 	bl	800c77c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a45c:	230f      	movs	r3, #15
 800a45e:	18fb      	adds	r3, r7, r3
 800a460:	781b      	ldrb	r3, [r3, #0]
}
 800a462:	0018      	movs	r0, r3
 800a464:	46bd      	mov	sp, r7
 800a466:	b004      	add	sp, #16
 800a468:	bd80      	pop	{r7, pc}

0800a46a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	000a      	movs	r2, r1
 800a474:	1cfb      	adds	r3, r7, #3
 800a476:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a478:	230f      	movs	r3, #15
 800a47a:	18fb      	adds	r3, r7, r3
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2181      	movs	r1, #129	; 0x81
 800a484:	0018      	movs	r0, r3
 800a486:	f002 f865 	bl	800c554 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2101      	movs	r1, #1
 800a494:	0018      	movs	r0, r3
 800a496:	f002 f85d 	bl	800c554 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	23b6      	movs	r3, #182	; 0xb6
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2182      	movs	r1, #130	; 0x82
 800a4a8:	0018      	movs	r0, r3
 800a4aa:	f002 f853 	bl	800c554 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	23ae      	movs	r3, #174	; 0xae
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	58d3      	ldr	r3, [r2, r3]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d011      	beq.n	800a4e4 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	23af      	movs	r3, #175	; 0xaf
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	58d3      	ldr	r3, [r2, r3]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	23ae      	movs	r3, #174	; 0xae
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	58d3      	ldr	r3, [r2, r3]
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f002 f9ab 	bl	800c830 <USBD_static_free>
    pdev->pClassData = NULL;
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	23ae      	movs	r3, #174	; 0xae
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800a4e4:	230f      	movs	r3, #15
 800a4e6:	18fb      	adds	r3, r7, r3
 800a4e8:	781b      	ldrb	r3, [r3, #0]
}
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	b004      	add	sp, #16
 800a4f0:	bd80      	pop	{r7, pc}
	...

0800a4f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	23ae      	movs	r3, #174	; 0xae
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	58d3      	ldr	r3, [r2, r3]
 800a506:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a508:	230f      	movs	r3, #15
 800a50a:	18fb      	adds	r3, r7, r3
 800a50c:	2200      	movs	r2, #0
 800a50e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800a510:	230c      	movs	r3, #12
 800a512:	18fb      	adds	r3, r7, r3
 800a514:	2200      	movs	r2, #0
 800a516:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800a518:	2317      	movs	r3, #23
 800a51a:	18fb      	adds	r3, r7, r3
 800a51c:	2200      	movs	r2, #0
 800a51e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	001a      	movs	r2, r3
 800a526:	2360      	movs	r3, #96	; 0x60
 800a528:	4013      	ands	r3, r2
 800a52a:	d03d      	beq.n	800a5a8 <USBD_CDC_Setup+0xb4>
 800a52c:	2b20      	cmp	r3, #32
 800a52e:	d000      	beq.n	800a532 <USBD_CDC_Setup+0x3e>
 800a530:	e094      	b.n	800a65c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	88db      	ldrh	r3, [r3, #6]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d02b      	beq.n	800a592 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	b25b      	sxtb	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	da12      	bge.n	800a56a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	23af      	movs	r3, #175	; 0xaf
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	58d3      	ldr	r3, [r2, r3]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a552:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a554:	683a      	ldr	r2, [r7, #0]
 800a556:	88d2      	ldrh	r2, [r2, #6]
 800a558:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a55a:	6939      	ldr	r1, [r7, #16]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	88da      	ldrh	r2, [r3, #6]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	0018      	movs	r0, r3
 800a564:	f001 fbb2 	bl	800bccc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a568:	e083      	b.n	800a672 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	7859      	ldrb	r1, [r3, #1]
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	2380      	movs	r3, #128	; 0x80
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	88db      	ldrh	r3, [r3, #6]
 800a57a:	b2d9      	uxtb	r1, r3
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	4a40      	ldr	r2, [pc, #256]	; (800a680 <USBD_CDC_Setup+0x18c>)
 800a580:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a582:	6939      	ldr	r1, [r7, #16]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	88da      	ldrh	r2, [r3, #6]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	0018      	movs	r0, r3
 800a58c:	f001 fbd1 	bl	800bd32 <USBD_CtlPrepareRx>
      break;
 800a590:	e06f      	b.n	800a672 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	23af      	movs	r3, #175	; 0xaf
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	58d3      	ldr	r3, [r2, r3]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	683a      	ldr	r2, [r7, #0]
 800a59e:	7850      	ldrb	r0, [r2, #1]
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	4798      	blx	r3
      break;
 800a5a6:	e064      	b.n	800a672 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	785b      	ldrb	r3, [r3, #1]
 800a5ac:	2b0b      	cmp	r3, #11
 800a5ae:	d037      	beq.n	800a620 <USBD_CDC_Setup+0x12c>
 800a5b0:	dc47      	bgt.n	800a642 <USBD_CDC_Setup+0x14e>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d002      	beq.n	800a5bc <USBD_CDC_Setup+0xc8>
 800a5b6:	2b0a      	cmp	r3, #10
 800a5b8:	d019      	beq.n	800a5ee <USBD_CDC_Setup+0xfa>
 800a5ba:	e042      	b.n	800a642 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	23a7      	movs	r3, #167	; 0xa7
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	5cd3      	ldrb	r3, [r2, r3]
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d107      	bne.n	800a5d8 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a5c8:	230c      	movs	r3, #12
 800a5ca:	18f9      	adds	r1, r7, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	0018      	movs	r0, r3
 800a5d2:	f001 fb7b 	bl	800bccc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5d6:	e040      	b.n	800a65a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	0011      	movs	r1, r2
 800a5de:	0018      	movs	r0, r3
 800a5e0:	f001 faf6 	bl	800bbd0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a5e4:	2317      	movs	r3, #23
 800a5e6:	18fb      	adds	r3, r7, r3
 800a5e8:	2202      	movs	r2, #2
 800a5ea:	701a      	strb	r2, [r3, #0]
          break;
 800a5ec:	e035      	b.n	800a65a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	23a7      	movs	r3, #167	; 0xa7
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	5cd3      	ldrb	r3, [r2, r3]
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d107      	bne.n	800a60a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a5fa:	230f      	movs	r3, #15
 800a5fc:	18f9      	adds	r1, r7, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2201      	movs	r2, #1
 800a602:	0018      	movs	r0, r3
 800a604:	f001 fb62 	bl	800bccc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a608:	e027      	b.n	800a65a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	0011      	movs	r1, r2
 800a610:	0018      	movs	r0, r3
 800a612:	f001 fadd 	bl	800bbd0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a616:	2317      	movs	r3, #23
 800a618:	18fb      	adds	r3, r7, r3
 800a61a:	2202      	movs	r2, #2
 800a61c:	701a      	strb	r2, [r3, #0]
          break;
 800a61e:	e01c      	b.n	800a65a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	23a7      	movs	r3, #167	; 0xa7
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	5cd3      	ldrb	r3, [r2, r3]
 800a628:	2b03      	cmp	r3, #3
 800a62a:	d015      	beq.n	800a658 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	0011      	movs	r1, r2
 800a632:	0018      	movs	r0, r3
 800a634:	f001 facc 	bl	800bbd0 <USBD_CtlError>
            ret = USBD_FAIL;
 800a638:	2317      	movs	r3, #23
 800a63a:	18fb      	adds	r3, r7, r3
 800a63c:	2202      	movs	r2, #2
 800a63e:	701a      	strb	r2, [r3, #0]
          }
          break;
 800a640:	e00a      	b.n	800a658 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	0011      	movs	r1, r2
 800a648:	0018      	movs	r0, r3
 800a64a:	f001 fac1 	bl	800bbd0 <USBD_CtlError>
          ret = USBD_FAIL;
 800a64e:	2317      	movs	r3, #23
 800a650:	18fb      	adds	r3, r7, r3
 800a652:	2202      	movs	r2, #2
 800a654:	701a      	strb	r2, [r3, #0]
          break;
 800a656:	e000      	b.n	800a65a <USBD_CDC_Setup+0x166>
          break;
 800a658:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a65a:	e00a      	b.n	800a672 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	0011      	movs	r1, r2
 800a662:	0018      	movs	r0, r3
 800a664:	f001 fab4 	bl	800bbd0 <USBD_CtlError>
      ret = USBD_FAIL;
 800a668:	2317      	movs	r3, #23
 800a66a:	18fb      	adds	r3, r7, r3
 800a66c:	2202      	movs	r2, #2
 800a66e:	701a      	strb	r2, [r3, #0]
      break;
 800a670:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a672:	2317      	movs	r3, #23
 800a674:	18fb      	adds	r3, r7, r3
 800a676:	781b      	ldrb	r3, [r3, #0]
}
 800a678:	0018      	movs	r0, r3
 800a67a:	46bd      	mov	sp, r7
 800a67c:	b006      	add	sp, #24
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	00000201 	.word	0x00000201

0800a684 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	000a      	movs	r2, r1
 800a68e:	1cfb      	adds	r3, r7, #3
 800a690:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	23ae      	movs	r3, #174	; 0xae
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	58d3      	ldr	r3, [r2, r3]
 800a69a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	23b0      	movs	r3, #176	; 0xb0
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	58d3      	ldr	r3, [r2, r3]
 800a6a4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	23ae      	movs	r3, #174	; 0xae
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	58d3      	ldr	r3, [r2, r3]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d03e      	beq.n	800a730 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a6b2:	1cfb      	adds	r3, r7, #3
 800a6b4:	781a      	ldrb	r2, [r3, #0]
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	0013      	movs	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	189b      	adds	r3, r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	18cb      	adds	r3, r1, r3
 800a6c2:	331c      	adds	r3, #28
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d02b      	beq.n	800a722 <USBD_CDC_DataIn+0x9e>
 800a6ca:	1cfb      	adds	r3, r7, #3
 800a6cc:	781a      	ldrb	r2, [r3, #0]
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	0013      	movs	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	189b      	adds	r3, r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	18cb      	adds	r3, r1, r3
 800a6da:	331c      	adds	r3, #28
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	1cfb      	adds	r3, r7, #3
 800a6e0:	781a      	ldrb	r2, [r3, #0]
 800a6e2:	68b9      	ldr	r1, [r7, #8]
 800a6e4:	0013      	movs	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	189b      	adds	r3, r3, r2
 800a6ea:	00db      	lsls	r3, r3, #3
 800a6ec:	18cb      	adds	r3, r1, r3
 800a6ee:	3338      	adds	r3, #56	; 0x38
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	0019      	movs	r1, r3
 800a6f4:	f7f5 fda0 	bl	8000238 <__aeabi_uidivmod>
 800a6f8:	1e0b      	subs	r3, r1, #0
 800a6fa:	d112      	bne.n	800a722 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a6fc:	1cfb      	adds	r3, r7, #3
 800a6fe:	781a      	ldrb	r2, [r3, #0]
 800a700:	6879      	ldr	r1, [r7, #4]
 800a702:	0013      	movs	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	189b      	adds	r3, r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	18cb      	adds	r3, r1, r3
 800a70c:	331c      	adds	r3, #28
 800a70e:	2200      	movs	r2, #0
 800a710:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a712:	1cfb      	adds	r3, r7, #3
 800a714:	7819      	ldrb	r1, [r3, #0]
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	2300      	movs	r3, #0
 800a71a:	2200      	movs	r2, #0
 800a71c:	f001 fff7 	bl	800c70e <USBD_LL_Transmit>
 800a720:	e004      	b.n	800a72c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	2385      	movs	r3, #133	; 0x85
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	2100      	movs	r1, #0
 800a72a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800a72c:	2300      	movs	r3, #0
 800a72e:	e000      	b.n	800a732 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800a730:	2302      	movs	r3, #2
  }
}
 800a732:	0018      	movs	r0, r3
 800a734:	46bd      	mov	sp, r7
 800a736:	b004      	add	sp, #16
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	000a      	movs	r2, r1
 800a744:	1cfb      	adds	r3, r7, #3
 800a746:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	23ae      	movs	r3, #174	; 0xae
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	58d3      	ldr	r3, [r2, r3]
 800a750:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a752:	1cfb      	adds	r3, r7, #3
 800a754:	781a      	ldrb	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	0011      	movs	r1, r2
 800a75a:	0018      	movs	r0, r3
 800a75c:	f002 f845 	bl	800c7ea <USBD_LL_GetRxDataSize>
 800a760:	0001      	movs	r1, r0
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	2383      	movs	r3, #131	; 0x83
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	23ae      	movs	r3, #174	; 0xae
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	58d3      	ldr	r3, [r2, r3]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d011      	beq.n	800a79a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	23af      	movs	r3, #175	; 0xaf
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	58d3      	ldr	r3, [r2, r3]
 800a77e:	68da      	ldr	r2, [r3, #12]
 800a780:	68f9      	ldr	r1, [r7, #12]
 800a782:	2381      	movs	r3, #129	; 0x81
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	58c8      	ldr	r0, [r1, r3]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2183      	movs	r1, #131	; 0x83
 800a78c:	0089      	lsls	r1, r1, #2
 800a78e:	468c      	mov	ip, r1
 800a790:	4463      	add	r3, ip
 800a792:	0019      	movs	r1, r3
 800a794:	4790      	blx	r2

    return USBD_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	e000      	b.n	800a79c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800a79a:	2302      	movs	r3, #2
  }
}
 800a79c:	0018      	movs	r0, r3
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	b004      	add	sp, #16
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a7a4:	b590      	push	{r4, r7, lr}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	23ae      	movs	r3, #174	; 0xae
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	58d3      	ldr	r3, [r2, r3]
 800a7b4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	23af      	movs	r3, #175	; 0xaf
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	58d3      	ldr	r3, [r2, r3]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d019      	beq.n	800a7f6 <USBD_CDC_EP0_RxReady+0x52>
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	2380      	movs	r3, #128	; 0x80
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	5cd3      	ldrb	r3, [r2, r3]
 800a7ca:	2bff      	cmp	r3, #255	; 0xff
 800a7cc:	d013      	beq.n	800a7f6 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	23af      	movs	r3, #175	; 0xaf
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	58d3      	ldr	r3, [r2, r3]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	68f9      	ldr	r1, [r7, #12]
 800a7da:	2280      	movs	r2, #128	; 0x80
 800a7dc:	0092      	lsls	r2, r2, #2
 800a7de:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800a7e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	4c06      	ldr	r4, [pc, #24]	; (800a800 <USBD_CDC_EP0_RxReady+0x5c>)
 800a7e6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a7e8:	b292      	uxth	r2, r2
 800a7ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	2380      	movs	r3, #128	; 0x80
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	21ff      	movs	r1, #255	; 0xff
 800a7f4:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	0018      	movs	r0, r3
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	b005      	add	sp, #20
 800a7fe:	bd90      	pop	{r4, r7, pc}
 800a800:	00000201 	.word	0x00000201

0800a804 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2243      	movs	r2, #67	; 0x43
 800a810:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a812:	4b02      	ldr	r3, [pc, #8]	; (800a81c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800a814:	0018      	movs	r0, r3
 800a816:	46bd      	mov	sp, r7
 800a818:	b002      	add	sp, #8
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20000094 	.word	0x20000094

0800a820 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2243      	movs	r2, #67	; 0x43
 800a82c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a82e:	4b02      	ldr	r3, [pc, #8]	; (800a838 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800a830:	0018      	movs	r0, r3
 800a832:	46bd      	mov	sp, r7
 800a834:	b002      	add	sp, #8
 800a836:	bd80      	pop	{r7, pc}
 800a838:	20000050 	.word	0x20000050

0800a83c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2243      	movs	r2, #67	; 0x43
 800a848:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a84a:	4b02      	ldr	r3, [pc, #8]	; (800a854 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800a84c:	0018      	movs	r0, r3
 800a84e:	46bd      	mov	sp, r7
 800a850:	b002      	add	sp, #8
 800a852:	bd80      	pop	{r7, pc}
 800a854:	200000d8 	.word	0x200000d8

0800a858 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	220a      	movs	r2, #10
 800a864:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a866:	4b02      	ldr	r3, [pc, #8]	; (800a870 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800a868:	0018      	movs	r0, r3
 800a86a:	46bd      	mov	sp, r7
 800a86c:	b002      	add	sp, #8
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	2000000c 	.word	0x2000000c

0800a874 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a87e:	200f      	movs	r0, #15
 800a880:	183b      	adds	r3, r7, r0
 800a882:	2202      	movs	r2, #2
 800a884:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d007      	beq.n	800a89c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	23af      	movs	r3, #175	; 0xaf
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800a896:	183b      	adds	r3, r7, r0
 800a898:	2200      	movs	r2, #0
 800a89a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a89c:	230f      	movs	r3, #15
 800a89e:	18fb      	adds	r3, r7, r3
 800a8a0:	781b      	ldrb	r3, [r3, #0]
}
 800a8a2:	0018      	movs	r0, r3
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	b004      	add	sp, #16
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b086      	sub	sp, #24
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	1dbb      	adds	r3, r7, #6
 800a8b6:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	23ae      	movs	r3, #174	; 0xae
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	58d3      	ldr	r3, [r2, r3]
 800a8c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	2382      	movs	r3, #130	; 0x82
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	68b9      	ldr	r1, [r7, #8]
 800a8ca:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800a8cc:	1dbb      	adds	r3, r7, #6
 800a8ce:	8819      	ldrh	r1, [r3, #0]
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	2384      	movs	r3, #132	; 0x84
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	0018      	movs	r0, r3
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	b006      	add	sp, #24
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b084      	sub	sp, #16
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	23ae      	movs	r3, #174	; 0xae
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	58d3      	ldr	r3, [r2, r3]
 800a8f4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	2381      	movs	r3, #129	; 0x81
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	6839      	ldr	r1, [r7, #0]
 800a8fe:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	0018      	movs	r0, r3
 800a904:	46bd      	mov	sp, r7
 800a906:	b004      	add	sp, #16
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	23ae      	movs	r3, #174	; 0xae
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	58d3      	ldr	r3, [r2, r3]
 800a91a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	23ae      	movs	r3, #174	; 0xae
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	58d3      	ldr	r3, [r2, r3]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d022      	beq.n	800a96e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	2385      	movs	r3, #133	; 0x85
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	58d3      	ldr	r3, [r2, r3]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d11a      	bne.n	800a96a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	2385      	movs	r3, #133	; 0x85
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	2101      	movs	r1, #1
 800a93c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	2384      	movs	r3, #132	; 0x84
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	58d2      	ldr	r2, [r2, r3]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	2382      	movs	r3, #130	; 0x82
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	2384      	movs	r3, #132	; 0x84
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	000a      	movs	r2, r1
 800a960:	2181      	movs	r1, #129	; 0x81
 800a962:	f001 fed4 	bl	800c70e <USBD_LL_Transmit>

      return USBD_OK;
 800a966:	2300      	movs	r3, #0
 800a968:	e002      	b.n	800a970 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800a96e:	2302      	movs	r3, #2
  }
}
 800a970:	0018      	movs	r0, r3
 800a972:	46bd      	mov	sp, r7
 800a974:	b004      	add	sp, #16
 800a976:	bd80      	pop	{r7, pc}

0800a978 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	23ae      	movs	r3, #174	; 0xae
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	58d3      	ldr	r3, [r2, r3]
 800a988:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	23ae      	movs	r3, #174	; 0xae
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	58d3      	ldr	r3, [r2, r3]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d019      	beq.n	800a9ca <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	7c1b      	ldrb	r3, [r3, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	2381      	movs	r3, #129	; 0x81
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	58d2      	ldr	r2, [r2, r3]
 800a9a6:	2380      	movs	r3, #128	; 0x80
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	f001 fee5 	bl	800c77c <USBD_LL_PrepareReceive>
 800a9b2:	e008      	b.n	800a9c6 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	2381      	movs	r3, #129	; 0x81
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	58d2      	ldr	r2, [r2, r3]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	2340      	movs	r3, #64	; 0x40
 800a9c0:	2101      	movs	r1, #1
 800a9c2:	f001 fedb 	bl	800c77c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e000      	b.n	800a9cc <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800a9ca:	2302      	movs	r3, #2
  }
}
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	b004      	add	sp, #16
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	1dfb      	adds	r3, r7, #7
 800a9e0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e020      	b.n	800aa2e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	23ad      	movs	r3, #173	; 0xad
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	58d3      	ldr	r3, [r2, r3]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d004      	beq.n	800aa02 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	23ad      	movs	r3, #173	; 0xad
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	2100      	movs	r1, #0
 800aa00:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d004      	beq.n	800aa12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	23ac      	movs	r3, #172	; 0xac
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	68b9      	ldr	r1, [r7, #8]
 800aa10:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	23a7      	movs	r3, #167	; 0xa7
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	2101      	movs	r1, #1
 800aa1a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	1dfa      	adds	r2, r7, #7
 800aa20:	7812      	ldrb	r2, [r2, #0]
 800aa22:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	0018      	movs	r0, r3
 800aa28:	f001 fcd4 	bl	800c3d4 <USBD_LL_Init>

  return USBD_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	0018      	movs	r0, r3
 800aa30:	46bd      	mov	sp, r7
 800aa32:	b004      	add	sp, #16
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b084      	sub	sp, #16
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800aa40:	200f      	movs	r0, #15
 800aa42:	183b      	adds	r3, r7, r0
 800aa44:	2200      	movs	r2, #0
 800aa46:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d008      	beq.n	800aa60 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	23ad      	movs	r3, #173	; 0xad
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	6839      	ldr	r1, [r7, #0]
 800aa56:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800aa58:	183b      	adds	r3, r7, r0
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	701a      	strb	r2, [r3, #0]
 800aa5e:	e003      	b.n	800aa68 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aa60:	230f      	movs	r3, #15
 800aa62:	18fb      	adds	r3, r7, r3
 800aa64:	2202      	movs	r2, #2
 800aa66:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800aa68:	230f      	movs	r3, #15
 800aa6a:	18fb      	adds	r3, r7, r3
 800aa6c:	781b      	ldrb	r3, [r3, #0]
}
 800aa6e:	0018      	movs	r0, r3
 800aa70:	46bd      	mov	sp, r7
 800aa72:	b004      	add	sp, #16
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	0018      	movs	r0, r3
 800aa82:	f001 fd0b 	bl	800c49c <USBD_LL_Start>

  return USBD_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	0018      	movs	r0, r3
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	b002      	add	sp, #8
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	0018      	movs	r0, r3
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	b002      	add	sp, #8
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aaa2:	b590      	push	{r4, r7, lr}
 800aaa4:	b085      	sub	sp, #20
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	000a      	movs	r2, r1
 800aaac:	1cfb      	adds	r3, r7, #3
 800aaae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aab0:	240f      	movs	r4, #15
 800aab2:	193b      	adds	r3, r7, r4
 800aab4:	2202      	movs	r2, #2
 800aab6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	23ad      	movs	r3, #173	; 0xad
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	58d3      	ldr	r3, [r2, r3]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00e      	beq.n	800aae2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	23ad      	movs	r3, #173	; 0xad
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	58d3      	ldr	r3, [r2, r3]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	1cfa      	adds	r2, r7, #3
 800aad0:	7811      	ldrb	r1, [r2, #0]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	0010      	movs	r0, r2
 800aad6:	4798      	blx	r3
 800aad8:	1e03      	subs	r3, r0, #0
 800aada:	d102      	bne.n	800aae2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800aadc:	193b      	adds	r3, r7, r4
 800aade:	2200      	movs	r2, #0
 800aae0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800aae2:	230f      	movs	r3, #15
 800aae4:	18fb      	adds	r3, r7, r3
 800aae6:	781b      	ldrb	r3, [r3, #0]
}
 800aae8:	0018      	movs	r0, r3
 800aaea:	46bd      	mov	sp, r7
 800aaec:	b005      	add	sp, #20
 800aaee:	bd90      	pop	{r4, r7, pc}

0800aaf0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	000a      	movs	r2, r1
 800aafa:	1cfb      	adds	r3, r7, #3
 800aafc:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	23ad      	movs	r3, #173	; 0xad
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	58d3      	ldr	r3, [r2, r3]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	1cfa      	adds	r2, r7, #3
 800ab0a:	7811      	ldrb	r1, [r2, #0]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	0010      	movs	r0, r2
 800ab10:	4798      	blx	r3

  return USBD_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	0018      	movs	r0, r3
 800ab16:	46bd      	mov	sp, r7
 800ab18:	b002      	add	sp, #8
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	22aa      	movs	r2, #170	; 0xaa
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	4694      	mov	ip, r2
 800ab2e:	4463      	add	r3, ip
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	0011      	movs	r1, r2
 800ab34:	0018      	movs	r0, r3
 800ab36:	f001 f810 	bl	800bb5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	23a5      	movs	r3, #165	; 0xa5
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	2101      	movs	r1, #1
 800ab42:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a23      	ldr	r2, [pc, #140]	; (800abd4 <USBD_LL_SetupStage+0xb8>)
 800ab48:	5a9b      	ldrh	r3, [r3, r2]
 800ab4a:	0019      	movs	r1, r3
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	23a6      	movs	r3, #166	; 0xa6
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	23aa      	movs	r3, #170	; 0xaa
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	5cd3      	ldrb	r3, [r2, r3]
 800ab5c:	001a      	movs	r2, r3
 800ab5e:	231f      	movs	r3, #31
 800ab60:	4013      	ands	r3, r2
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d019      	beq.n	800ab9a <USBD_LL_SetupStage+0x7e>
 800ab66:	d822      	bhi.n	800abae <USBD_LL_SetupStage+0x92>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <USBD_LL_SetupStage+0x56>
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d00a      	beq.n	800ab86 <USBD_LL_SetupStage+0x6a>
 800ab70:	e01d      	b.n	800abae <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	22aa      	movs	r2, #170	; 0xaa
 800ab76:	0092      	lsls	r2, r2, #2
 800ab78:	189a      	adds	r2, r3, r2
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	0011      	movs	r1, r2
 800ab7e:	0018      	movs	r0, r3
 800ab80:	f000 fa10 	bl	800afa4 <USBD_StdDevReq>
      break;
 800ab84:	e020      	b.n	800abc8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	22aa      	movs	r2, #170	; 0xaa
 800ab8a:	0092      	lsls	r2, r2, #2
 800ab8c:	189a      	adds	r2, r3, r2
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	0011      	movs	r1, r2
 800ab92:	0018      	movs	r0, r3
 800ab94:	f000 fa78 	bl	800b088 <USBD_StdItfReq>
      break;
 800ab98:	e016      	b.n	800abc8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	22aa      	movs	r2, #170	; 0xaa
 800ab9e:	0092      	lsls	r2, r2, #2
 800aba0:	189a      	adds	r2, r3, r2
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	0011      	movs	r1, r2
 800aba6:	0018      	movs	r0, r3
 800aba8:	f000 fac5 	bl	800b136 <USBD_StdEPReq>
      break;
 800abac:	e00c      	b.n	800abc8 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	23aa      	movs	r3, #170	; 0xaa
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	5cd3      	ldrb	r3, [r2, r3]
 800abb6:	227f      	movs	r2, #127	; 0x7f
 800abb8:	4393      	bics	r3, r2
 800abba:	b2da      	uxtb	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	0011      	movs	r1, r2
 800abc0:	0018      	movs	r0, r3
 800abc2:	f001 fcf2 	bl	800c5aa <USBD_LL_StallEP>
      break;
 800abc6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	0018      	movs	r0, r3
 800abcc:	46bd      	mov	sp, r7
 800abce:	b002      	add	sp, #8
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	46c0      	nop			; (mov r8, r8)
 800abd4:	000002ae 	.word	0x000002ae

0800abd8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	607a      	str	r2, [r7, #4]
 800abe2:	200b      	movs	r0, #11
 800abe4:	183b      	adds	r3, r7, r0
 800abe6:	1c0a      	adds	r2, r1, #0
 800abe8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800abea:	183b      	adds	r3, r7, r0
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d154      	bne.n	800ac9c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3355      	adds	r3, #85	; 0x55
 800abf6:	33ff      	adds	r3, #255	; 0xff
 800abf8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	23a5      	movs	r3, #165	; 0xa5
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	58d3      	ldr	r3, [r2, r3]
 800ac02:	2b03      	cmp	r3, #3
 800ac04:	d139      	bne.n	800ac7a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	68da      	ldr	r2, [r3, #12]
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d919      	bls.n	800ac46 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	68da      	ldr	r2, [r3, #12]
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	1ad2      	subs	r2, r2, r3
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	68da      	ldr	r2, [r3, #12]
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d203      	bcs.n	800ac34 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	e002      	b.n	800ac3a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	6879      	ldr	r1, [r7, #4]
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	001a      	movs	r2, r3
 800ac40:	f001 f89b 	bl	800bd7a <USBD_CtlContinueRx>
 800ac44:	e045      	b.n	800acd2 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	23ad      	movs	r3, #173	; 0xad
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	58d3      	ldr	r3, [r2, r3]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00d      	beq.n	800ac70 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	23a7      	movs	r3, #167	; 0xa7
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d107      	bne.n	800ac70 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	23ad      	movs	r3, #173	; 0xad
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	58d3      	ldr	r3, [r2, r3]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	0010      	movs	r0, r2
 800ac6e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	0018      	movs	r0, r3
 800ac74:	f001 f894 	bl	800bda0 <USBD_CtlSendStatus>
 800ac78:	e02b      	b.n	800acd2 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	23a5      	movs	r3, #165	; 0xa5
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	58d3      	ldr	r3, [r2, r3]
 800ac82:	2b05      	cmp	r3, #5
 800ac84:	d125      	bne.n	800acd2 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	23a5      	movs	r3, #165	; 0xa5
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2100      	movs	r1, #0
 800ac94:	0018      	movs	r0, r3
 800ac96:	f001 fc88 	bl	800c5aa <USBD_LL_StallEP>
 800ac9a:	e01a      	b.n	800acd2 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	23ad      	movs	r3, #173	; 0xad
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	58d3      	ldr	r3, [r2, r3]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d011      	beq.n	800acce <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	23a7      	movs	r3, #167	; 0xa7
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800acb2:	2b03      	cmp	r3, #3
 800acb4:	d10b      	bne.n	800acce <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	23ad      	movs	r3, #173	; 0xad
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	58d3      	ldr	r3, [r2, r3]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	220b      	movs	r2, #11
 800acc2:	18ba      	adds	r2, r7, r2
 800acc4:	7811      	ldrb	r1, [r2, #0]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	0010      	movs	r0, r2
 800acca:	4798      	blx	r3
 800accc:	e001      	b.n	800acd2 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800acce:	2302      	movs	r3, #2
 800acd0:	e000      	b.n	800acd4 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	0018      	movs	r0, r3
 800acd6:	46bd      	mov	sp, r7
 800acd8:	b006      	add	sp, #24
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	607a      	str	r2, [r7, #4]
 800ace6:	200b      	movs	r0, #11
 800ace8:	183b      	adds	r3, r7, r0
 800acea:	1c0a      	adds	r2, r1, #0
 800acec:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800acee:	183b      	adds	r3, r7, r0
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d000      	beq.n	800acf8 <USBD_LL_DataInStage+0x1c>
 800acf6:	e08e      	b.n	800ae16 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	3314      	adds	r3, #20
 800acfc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	23a5      	movs	r3, #165	; 0xa5
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	58d3      	ldr	r3, [r2, r3]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d164      	bne.n	800add4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	68da      	ldr	r2, [r3, #12]
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d915      	bls.n	800ad42 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	68da      	ldr	r2, [r3, #12]
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	1ad2      	subs	r2, r2, r3
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	6879      	ldr	r1, [r7, #4]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	0018      	movs	r0, r3
 800ad30:	f000 ffec 	bl	800bd0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	2300      	movs	r3, #0
 800ad38:	2200      	movs	r2, #0
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	f001 fd1e 	bl	800c77c <USBD_LL_PrepareReceive>
 800ad40:	e059      	b.n	800adf6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	689a      	ldr	r2, [r3, #8]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	0019      	movs	r1, r3
 800ad4c:	0010      	movs	r0, r2
 800ad4e:	f7f5 fa73 	bl	8000238 <__aeabi_uidivmod>
 800ad52:	1e0b      	subs	r3, r1, #0
 800ad54:	d11f      	bne.n	800ad96 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	689a      	ldr	r2, [r3, #8]
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d319      	bcc.n	800ad96 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	689a      	ldr	r2, [r3, #8]
 800ad66:	68f9      	ldr	r1, [r7, #12]
 800ad68:	23a6      	movs	r3, #166	; 0xa6
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d211      	bcs.n	800ad96 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	2100      	movs	r1, #0
 800ad78:	0018      	movs	r0, r3
 800ad7a:	f000 ffc7 	bl	800bd0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	23a6      	movs	r3, #166	; 0xa6
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	2100      	movs	r1, #0
 800ad86:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	2100      	movs	r1, #0
 800ad90:	f001 fcf4 	bl	800c77c <USBD_LL_PrepareReceive>
 800ad94:	e02f      	b.n	800adf6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	23ad      	movs	r3, #173	; 0xad
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	58d3      	ldr	r3, [r2, r3]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00d      	beq.n	800adc0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	23a7      	movs	r3, #167	; 0xa7
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800adac:	2b03      	cmp	r3, #3
 800adae:	d107      	bne.n	800adc0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	23ad      	movs	r3, #173	; 0xad
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	58d3      	ldr	r3, [r2, r3]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	0010      	movs	r0, r2
 800adbe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2180      	movs	r1, #128	; 0x80
 800adc4:	0018      	movs	r0, r3
 800adc6:	f001 fbf0 	bl	800c5aa <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	0018      	movs	r0, r3
 800adce:	f000 fffb 	bl	800bdc8 <USBD_CtlReceiveStatus>
 800add2:	e010      	b.n	800adf6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	23a5      	movs	r3, #165	; 0xa5
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	58d3      	ldr	r3, [r2, r3]
 800addc:	2b04      	cmp	r3, #4
 800adde:	d005      	beq.n	800adec <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	23a5      	movs	r3, #165	; 0xa5
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d104      	bne.n	800adf6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2180      	movs	r1, #128	; 0x80
 800adf0:	0018      	movs	r0, r3
 800adf2:	f001 fbda 	bl	800c5aa <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	23a8      	movs	r3, #168	; 0xa8
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	5cd3      	ldrb	r3, [r2, r3]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d124      	bne.n	800ae4c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	0018      	movs	r0, r3
 800ae06:	f7ff fe43 	bl	800aa90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	23a8      	movs	r3, #168	; 0xa8
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	2100      	movs	r1, #0
 800ae12:	54d1      	strb	r1, [r2, r3]
 800ae14:	e01a      	b.n	800ae4c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	23ad      	movs	r3, #173	; 0xad
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	58d3      	ldr	r3, [r2, r3]
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d011      	beq.n	800ae48 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	23a7      	movs	r3, #167	; 0xa7
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae2c:	2b03      	cmp	r3, #3
 800ae2e:	d10b      	bne.n	800ae48 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	23ad      	movs	r3, #173	; 0xad
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	58d3      	ldr	r3, [r2, r3]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	220b      	movs	r2, #11
 800ae3c:	18ba      	adds	r2, r7, r2
 800ae3e:	7811      	ldrb	r1, [r2, #0]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	0010      	movs	r0, r2
 800ae44:	4798      	blx	r3
 800ae46:	e001      	b.n	800ae4c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ae48:	2302      	movs	r3, #2
 800ae4a:	e000      	b.n	800ae4e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	0018      	movs	r0, r3
 800ae50:	46bd      	mov	sp, r7
 800ae52:	b006      	add	sp, #24
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b082      	sub	sp, #8
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	2340      	movs	r3, #64	; 0x40
 800ae62:	2200      	movs	r2, #0
 800ae64:	2100      	movs	r1, #0
 800ae66:	f001 fb3e 	bl	800c4e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	23ac      	movs	r3, #172	; 0xac
 800ae6e:	005b      	lsls	r3, r3, #1
 800ae70:	2101      	movs	r1, #1
 800ae72:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	23b2      	movs	r3, #178	; 0xb2
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	2140      	movs	r1, #64	; 0x40
 800ae7c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	2340      	movs	r3, #64	; 0x40
 800ae82:	2200      	movs	r2, #0
 800ae84:	2180      	movs	r1, #128	; 0x80
 800ae86:	f001 fb2e 	bl	800c4e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2240      	movs	r2, #64	; 0x40
 800ae94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	23a7      	movs	r3, #167	; 0xa7
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	23a5      	movs	r3, #165	; 0xa5
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	2100      	movs	r1, #0
 800aea8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	23a9      	movs	r3, #169	; 0xa9
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	23ae      	movs	r3, #174	; 0xae
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	58d3      	ldr	r3, [r2, r3]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00a      	beq.n	800aedc <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	23ad      	movs	r3, #173	; 0xad
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	58d3      	ldr	r3, [r2, r3]
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	b2d9      	uxtb	r1, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	0018      	movs	r0, r3
 800aeda:	4790      	blx	r2
  }

  return USBD_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	0018      	movs	r0, r3
 800aee0:	46bd      	mov	sp, r7
 800aee2:	b002      	add	sp, #8
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	000a      	movs	r2, r1
 800aef0:	1cfb      	adds	r3, r7, #3
 800aef2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	1cfa      	adds	r2, r7, #3
 800aef8:	7812      	ldrb	r2, [r2, #0]
 800aefa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	0018      	movs	r0, r3
 800af00:	46bd      	mov	sp, r7
 800af02:	b002      	add	sp, #8
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	23a7      	movs	r3, #167	; 0xa7
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	5cd1      	ldrb	r1, [r2, r3]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a06      	ldr	r2, [pc, #24]	; (800af34 <USBD_LL_Suspend+0x2c>)
 800af1c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	23a7      	movs	r3, #167	; 0xa7
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	2104      	movs	r1, #4
 800af26:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	0018      	movs	r0, r3
 800af2c:	46bd      	mov	sp, r7
 800af2e:	b002      	add	sp, #8
 800af30:	bd80      	pop	{r7, pc}
 800af32:	46c0      	nop			; (mov r8, r8)
 800af34:	0000029d 	.word	0x0000029d

0800af38 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	23a7      	movs	r3, #167	; 0xa7
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	5cd3      	ldrb	r3, [r2, r3]
 800af48:	2b04      	cmp	r3, #4
 800af4a:	d106      	bne.n	800af5a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a05      	ldr	r2, [pc, #20]	; (800af64 <USBD_LL_Resume+0x2c>)
 800af50:	5c99      	ldrb	r1, [r3, r2]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	23a7      	movs	r3, #167	; 0xa7
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	0018      	movs	r0, r3
 800af5e:	46bd      	mov	sp, r7
 800af60:	b002      	add	sp, #8
 800af62:	bd80      	pop	{r7, pc}
 800af64:	0000029d 	.word	0x0000029d

0800af68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	23a7      	movs	r3, #167	; 0xa7
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	5cd3      	ldrb	r3, [r2, r3]
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d10e      	bne.n	800af9a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	23ad      	movs	r3, #173	; 0xad
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	58d3      	ldr	r3, [r2, r3]
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d007      	beq.n	800af9a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	23ad      	movs	r3, #173	; 0xad
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	58d3      	ldr	r3, [r2, r3]
 800af92:	69db      	ldr	r3, [r3, #28]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	0010      	movs	r0, r2
 800af98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	0018      	movs	r0, r3
 800af9e:	46bd      	mov	sp, r7
 800afa0:	b002      	add	sp, #8
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afae:	230f      	movs	r3, #15
 800afb0:	18fb      	adds	r3, r7, r3
 800afb2:	2200      	movs	r2, #0
 800afb4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	001a      	movs	r2, r3
 800afbc:	2360      	movs	r3, #96	; 0x60
 800afbe:	4013      	ands	r3, r2
 800afc0:	2b40      	cmp	r3, #64	; 0x40
 800afc2:	d004      	beq.n	800afce <USBD_StdDevReq+0x2a>
 800afc4:	d84f      	bhi.n	800b066 <USBD_StdDevReq+0xc2>
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00b      	beq.n	800afe2 <USBD_StdDevReq+0x3e>
 800afca:	2b20      	cmp	r3, #32
 800afcc:	d14b      	bne.n	800b066 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	23ad      	movs	r3, #173	; 0xad
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	58d3      	ldr	r3, [r2, r3]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	0010      	movs	r0, r2
 800afde:	4798      	blx	r3
      break;
 800afe0:	e048      	b.n	800b074 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	785b      	ldrb	r3, [r3, #1]
 800afe6:	2b09      	cmp	r3, #9
 800afe8:	d835      	bhi.n	800b056 <USBD_StdDevReq+0xb2>
 800afea:	009a      	lsls	r2, r3, #2
 800afec:	4b25      	ldr	r3, [pc, #148]	; (800b084 <USBD_StdDevReq+0xe0>)
 800afee:	18d3      	adds	r3, r2, r3
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	0011      	movs	r1, r2
 800affa:	0018      	movs	r0, r3
 800affc:	f000 fa52 	bl	800b4a4 <USBD_GetDescriptor>
          break;
 800b000:	e030      	b.n	800b064 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	0011      	movs	r1, r2
 800b008:	0018      	movs	r0, r3
 800b00a:	f000 fbfd 	bl	800b808 <USBD_SetAddress>
          break;
 800b00e:	e029      	b.n	800b064 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	0011      	movs	r1, r2
 800b016:	0018      	movs	r0, r3
 800b018:	f000 fc4a 	bl	800b8b0 <USBD_SetConfig>
          break;
 800b01c:	e022      	b.n	800b064 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	0011      	movs	r1, r2
 800b024:	0018      	movs	r0, r3
 800b026:	f000 fce7 	bl	800b9f8 <USBD_GetConfig>
          break;
 800b02a:	e01b      	b.n	800b064 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	0011      	movs	r1, r2
 800b032:	0018      	movs	r0, r3
 800b034:	f000 fd1b 	bl	800ba6e <USBD_GetStatus>
          break;
 800b038:	e014      	b.n	800b064 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	0011      	movs	r1, r2
 800b040:	0018      	movs	r0, r3
 800b042:	f000 fd4e 	bl	800bae2 <USBD_SetFeature>
          break;
 800b046:	e00d      	b.n	800b064 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	0011      	movs	r1, r2
 800b04e:	0018      	movs	r0, r3
 800b050:	f000 fd5d 	bl	800bb0e <USBD_ClrFeature>
          break;
 800b054:	e006      	b.n	800b064 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	0011      	movs	r1, r2
 800b05c:	0018      	movs	r0, r3
 800b05e:	f000 fdb7 	bl	800bbd0 <USBD_CtlError>
          break;
 800b062:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b064:	e006      	b.n	800b074 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	0011      	movs	r1, r2
 800b06c:	0018      	movs	r0, r3
 800b06e:	f000 fdaf 	bl	800bbd0 <USBD_CtlError>
      break;
 800b072:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b074:	230f      	movs	r3, #15
 800b076:	18fb      	adds	r3, r7, r3
 800b078:	781b      	ldrb	r3, [r3, #0]
}
 800b07a:	0018      	movs	r0, r3
 800b07c:	46bd      	mov	sp, r7
 800b07e:	b004      	add	sp, #16
 800b080:	bd80      	pop	{r7, pc}
 800b082:	46c0      	nop			; (mov r8, r8)
 800b084:	0800d2f8 	.word	0x0800d2f8

0800b088 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b088:	b5b0      	push	{r4, r5, r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b092:	230f      	movs	r3, #15
 800b094:	18fb      	adds	r3, r7, r3
 800b096:	2200      	movs	r2, #0
 800b098:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	001a      	movs	r2, r3
 800b0a0:	2360      	movs	r3, #96	; 0x60
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	2b40      	cmp	r3, #64	; 0x40
 800b0a6:	d004      	beq.n	800b0b2 <USBD_StdItfReq+0x2a>
 800b0a8:	d839      	bhi.n	800b11e <USBD_StdItfReq+0x96>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <USBD_StdItfReq+0x2a>
 800b0ae:	2b20      	cmp	r3, #32
 800b0b0:	d135      	bne.n	800b11e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	23a7      	movs	r3, #167	; 0xa7
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	5cd3      	ldrb	r3, [r2, r3]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d825      	bhi.n	800b10c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	889b      	ldrh	r3, [r3, #4]
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d819      	bhi.n	800b0fe <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	23ad      	movs	r3, #173	; 0xad
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	58d3      	ldr	r3, [r2, r3]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	250f      	movs	r5, #15
 800b0d6:	197c      	adds	r4, r7, r5
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	0010      	movs	r0, r2
 800b0de:	4798      	blx	r3
 800b0e0:	0003      	movs	r3, r0
 800b0e2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	88db      	ldrh	r3, [r3, #6]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d116      	bne.n	800b11a <USBD_StdItfReq+0x92>
 800b0ec:	197b      	adds	r3, r7, r5
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d112      	bne.n	800b11a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	0018      	movs	r0, r3
 800b0f8:	f000 fe52 	bl	800bda0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b0fc:	e00d      	b.n	800b11a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	0011      	movs	r1, r2
 800b104:	0018      	movs	r0, r3
 800b106:	f000 fd63 	bl	800bbd0 <USBD_CtlError>
          break;
 800b10a:	e006      	b.n	800b11a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	0011      	movs	r1, r2
 800b112:	0018      	movs	r0, r3
 800b114:	f000 fd5c 	bl	800bbd0 <USBD_CtlError>
          break;
 800b118:	e000      	b.n	800b11c <USBD_StdItfReq+0x94>
          break;
 800b11a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b11c:	e006      	b.n	800b12c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	0011      	movs	r1, r2
 800b124:	0018      	movs	r0, r3
 800b126:	f000 fd53 	bl	800bbd0 <USBD_CtlError>
      break;
 800b12a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	0018      	movs	r0, r3
 800b130:	46bd      	mov	sp, r7
 800b132:	b004      	add	sp, #16
 800b134:	bdb0      	pop	{r4, r5, r7, pc}

0800b136 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b136:	b5b0      	push	{r4, r5, r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b140:	230f      	movs	r3, #15
 800b142:	18fb      	adds	r3, r7, r3
 800b144:	2200      	movs	r2, #0
 800b146:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	889a      	ldrh	r2, [r3, #4]
 800b14c:	230e      	movs	r3, #14
 800b14e:	18fb      	adds	r3, r7, r3
 800b150:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	001a      	movs	r2, r3
 800b158:	2360      	movs	r3, #96	; 0x60
 800b15a:	4013      	ands	r3, r2
 800b15c:	2b40      	cmp	r3, #64	; 0x40
 800b15e:	d006      	beq.n	800b16e <USBD_StdEPReq+0x38>
 800b160:	d900      	bls.n	800b164 <USBD_StdEPReq+0x2e>
 800b162:	e190      	b.n	800b486 <USBD_StdEPReq+0x350>
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00c      	beq.n	800b182 <USBD_StdEPReq+0x4c>
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d000      	beq.n	800b16e <USBD_StdEPReq+0x38>
 800b16c:	e18b      	b.n	800b486 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	23ad      	movs	r3, #173	; 0xad
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	58d3      	ldr	r3, [r2, r3]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	6839      	ldr	r1, [r7, #0]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	0010      	movs	r0, r2
 800b17e:	4798      	blx	r3
      break;
 800b180:	e188      	b.n	800b494 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	001a      	movs	r2, r3
 800b188:	2360      	movs	r3, #96	; 0x60
 800b18a:	4013      	ands	r3, r2
 800b18c:	2b20      	cmp	r3, #32
 800b18e:	d10f      	bne.n	800b1b0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	23ad      	movs	r3, #173	; 0xad
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	58d3      	ldr	r3, [r2, r3]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	250f      	movs	r5, #15
 800b19c:	197c      	adds	r4, r7, r5
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	0010      	movs	r0, r2
 800b1a4:	4798      	blx	r3
 800b1a6:	0003      	movs	r3, r0
 800b1a8:	7023      	strb	r3, [r4, #0]

        return ret;
 800b1aa:	197b      	adds	r3, r7, r5
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	e174      	b.n	800b49a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	785b      	ldrb	r3, [r3, #1]
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d007      	beq.n	800b1c8 <USBD_StdEPReq+0x92>
 800b1b8:	dd00      	ble.n	800b1bc <USBD_StdEPReq+0x86>
 800b1ba:	e15c      	b.n	800b476 <USBD_StdEPReq+0x340>
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d100      	bne.n	800b1c2 <USBD_StdEPReq+0x8c>
 800b1c0:	e092      	b.n	800b2e8 <USBD_StdEPReq+0x1b2>
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d04b      	beq.n	800b25e <USBD_StdEPReq+0x128>
 800b1c6:	e156      	b.n	800b476 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	23a7      	movs	r3, #167	; 0xa7
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	5cd3      	ldrb	r3, [r2, r3]
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d002      	beq.n	800b1da <USBD_StdEPReq+0xa4>
 800b1d4:	2b03      	cmp	r3, #3
 800b1d6:	d01d      	beq.n	800b214 <USBD_StdEPReq+0xde>
 800b1d8:	e039      	b.n	800b24e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1da:	220e      	movs	r2, #14
 800b1dc:	18bb      	adds	r3, r7, r2
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d010      	beq.n	800b206 <USBD_StdEPReq+0xd0>
 800b1e4:	18bb      	adds	r3, r7, r2
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	2b80      	cmp	r3, #128	; 0x80
 800b1ea:	d00c      	beq.n	800b206 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b1ec:	18bb      	adds	r3, r7, r2
 800b1ee:	781a      	ldrb	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	0011      	movs	r1, r2
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f001 f9d8 	bl	800c5aa <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2180      	movs	r1, #128	; 0x80
 800b1fe:	0018      	movs	r0, r3
 800b200:	f001 f9d3 	bl	800c5aa <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b204:	e02a      	b.n	800b25c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	0011      	movs	r1, r2
 800b20c:	0018      	movs	r0, r3
 800b20e:	f000 fcdf 	bl	800bbd0 <USBD_CtlError>
              break;
 800b212:	e023      	b.n	800b25c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	885b      	ldrh	r3, [r3, #2]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d113      	bne.n	800b244 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b21c:	220e      	movs	r2, #14
 800b21e:	18bb      	adds	r3, r7, r2
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00e      	beq.n	800b244 <USBD_StdEPReq+0x10e>
 800b226:	18bb      	adds	r3, r7, r2
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b80      	cmp	r3, #128	; 0x80
 800b22c:	d00a      	beq.n	800b244 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	88db      	ldrh	r3, [r3, #6]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d106      	bne.n	800b244 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b236:	18bb      	adds	r3, r7, r2
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	0011      	movs	r1, r2
 800b23e:	0018      	movs	r0, r3
 800b240:	f001 f9b3 	bl	800c5aa <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	0018      	movs	r0, r3
 800b248:	f000 fdaa 	bl	800bda0 <USBD_CtlSendStatus>

              break;
 800b24c:	e006      	b.n	800b25c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	0011      	movs	r1, r2
 800b254:	0018      	movs	r0, r3
 800b256:	f000 fcbb 	bl	800bbd0 <USBD_CtlError>
              break;
 800b25a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b25c:	e112      	b.n	800b484 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	23a7      	movs	r3, #167	; 0xa7
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	5cd3      	ldrb	r3, [r2, r3]
 800b266:	2b02      	cmp	r3, #2
 800b268:	d002      	beq.n	800b270 <USBD_StdEPReq+0x13a>
 800b26a:	2b03      	cmp	r3, #3
 800b26c:	d01d      	beq.n	800b2aa <USBD_StdEPReq+0x174>
 800b26e:	e032      	b.n	800b2d6 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b270:	220e      	movs	r2, #14
 800b272:	18bb      	adds	r3, r7, r2
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d010      	beq.n	800b29c <USBD_StdEPReq+0x166>
 800b27a:	18bb      	adds	r3, r7, r2
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	2b80      	cmp	r3, #128	; 0x80
 800b280:	d00c      	beq.n	800b29c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b282:	18bb      	adds	r3, r7, r2
 800b284:	781a      	ldrb	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	0011      	movs	r1, r2
 800b28a:	0018      	movs	r0, r3
 800b28c:	f001 f98d 	bl	800c5aa <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2180      	movs	r1, #128	; 0x80
 800b294:	0018      	movs	r0, r3
 800b296:	f001 f988 	bl	800c5aa <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b29a:	e024      	b.n	800b2e6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	0011      	movs	r1, r2
 800b2a2:	0018      	movs	r0, r3
 800b2a4:	f000 fc94 	bl	800bbd0 <USBD_CtlError>
              break;
 800b2a8:	e01d      	b.n	800b2e6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	885b      	ldrh	r3, [r3, #2]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d118      	bne.n	800b2e4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b2b2:	210e      	movs	r1, #14
 800b2b4:	187b      	adds	r3, r7, r1
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	227f      	movs	r2, #127	; 0x7f
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	d006      	beq.n	800b2cc <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b2be:	187b      	adds	r3, r7, r1
 800b2c0:	781a      	ldrb	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	0011      	movs	r1, r2
 800b2c6:	0018      	movs	r0, r3
 800b2c8:	f001 f99a 	bl	800c600 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	0018      	movs	r0, r3
 800b2d0:	f000 fd66 	bl	800bda0 <USBD_CtlSendStatus>
              }
              break;
 800b2d4:	e006      	b.n	800b2e4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b2d6:	683a      	ldr	r2, [r7, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	0011      	movs	r1, r2
 800b2dc:	0018      	movs	r0, r3
 800b2de:	f000 fc77 	bl	800bbd0 <USBD_CtlError>
              break;
 800b2e2:	e000      	b.n	800b2e6 <USBD_StdEPReq+0x1b0>
              break;
 800b2e4:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b2e6:	e0cd      	b.n	800b484 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	23a7      	movs	r3, #167	; 0xa7
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	5cd3      	ldrb	r3, [r2, r3]
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d002      	beq.n	800b2fa <USBD_StdEPReq+0x1c4>
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d03c      	beq.n	800b372 <USBD_StdEPReq+0x23c>
 800b2f8:	e0b5      	b.n	800b466 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2fa:	220e      	movs	r2, #14
 800b2fc:	18bb      	adds	r3, r7, r2
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00a      	beq.n	800b31a <USBD_StdEPReq+0x1e4>
 800b304:	18bb      	adds	r3, r7, r2
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	2b80      	cmp	r3, #128	; 0x80
 800b30a:	d006      	beq.n	800b31a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	0011      	movs	r1, r2
 800b312:	0018      	movs	r0, r3
 800b314:	f000 fc5c 	bl	800bbd0 <USBD_CtlError>
                break;
 800b318:	e0ac      	b.n	800b474 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b31a:	220e      	movs	r2, #14
 800b31c:	18bb      	adds	r3, r7, r2
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	b25b      	sxtb	r3, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	da0c      	bge.n	800b340 <USBD_StdEPReq+0x20a>
 800b326:	18bb      	adds	r3, r7, r2
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	227f      	movs	r2, #127	; 0x7f
 800b32c:	401a      	ands	r2, r3
 800b32e:	0013      	movs	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	189b      	adds	r3, r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	3310      	adds	r3, #16
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	18d3      	adds	r3, r2, r3
 800b33c:	3304      	adds	r3, #4
 800b33e:	e00d      	b.n	800b35c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b340:	230e      	movs	r3, #14
 800b342:	18fb      	adds	r3, r7, r3
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	227f      	movs	r2, #127	; 0x7f
 800b348:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b34a:	0013      	movs	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	189b      	adds	r3, r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	3351      	adds	r3, #81	; 0x51
 800b354:	33ff      	adds	r3, #255	; 0xff
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	18d3      	adds	r3, r2, r3
 800b35a:	3304      	adds	r3, #4
 800b35c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2200      	movs	r2, #0
 800b362:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b364:	68b9      	ldr	r1, [r7, #8]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2202      	movs	r2, #2
 800b36a:	0018      	movs	r0, r3
 800b36c:	f000 fcae 	bl	800bccc <USBD_CtlSendData>
              break;
 800b370:	e080      	b.n	800b474 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b372:	220e      	movs	r2, #14
 800b374:	18bb      	adds	r3, r7, r2
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	b25b      	sxtb	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	da14      	bge.n	800b3a8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b37e:	18bb      	adds	r3, r7, r2
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	220f      	movs	r2, #15
 800b384:	401a      	ands	r2, r3
 800b386:	6879      	ldr	r1, [r7, #4]
 800b388:	0013      	movs	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	189b      	adds	r3, r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	18cb      	adds	r3, r1, r3
 800b392:	3318      	adds	r3, #24
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d11e      	bne.n	800b3d8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	0011      	movs	r1, r2
 800b3a0:	0018      	movs	r0, r3
 800b3a2:	f000 fc15 	bl	800bbd0 <USBD_CtlError>
                  break;
 800b3a6:	e065      	b.n	800b474 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b3a8:	230e      	movs	r3, #14
 800b3aa:	18fb      	adds	r3, r7, r3
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	220f      	movs	r2, #15
 800b3b0:	401a      	ands	r2, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	23ac      	movs	r3, #172	; 0xac
 800b3b6:	0059      	lsls	r1, r3, #1
 800b3b8:	0013      	movs	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	189b      	adds	r3, r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	18c3      	adds	r3, r0, r3
 800b3c2:	185b      	adds	r3, r3, r1
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d106      	bne.n	800b3d8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	0011      	movs	r1, r2
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	f000 fbfd 	bl	800bbd0 <USBD_CtlError>
                  break;
 800b3d6:	e04d      	b.n	800b474 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3d8:	220e      	movs	r2, #14
 800b3da:	18bb      	adds	r3, r7, r2
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	b25b      	sxtb	r3, r3
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	da0c      	bge.n	800b3fe <USBD_StdEPReq+0x2c8>
 800b3e4:	18bb      	adds	r3, r7, r2
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	227f      	movs	r2, #127	; 0x7f
 800b3ea:	401a      	ands	r2, r3
 800b3ec:	0013      	movs	r3, r2
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	189b      	adds	r3, r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	3310      	adds	r3, #16
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	18d3      	adds	r3, r2, r3
 800b3fa:	3304      	adds	r3, #4
 800b3fc:	e00d      	b.n	800b41a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3fe:	230e      	movs	r3, #14
 800b400:	18fb      	adds	r3, r7, r3
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	227f      	movs	r2, #127	; 0x7f
 800b406:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b408:	0013      	movs	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	189b      	adds	r3, r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	3351      	adds	r3, #81	; 0x51
 800b412:	33ff      	adds	r3, #255	; 0xff
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	18d3      	adds	r3, r2, r3
 800b418:	3304      	adds	r3, #4
 800b41a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b41c:	220e      	movs	r2, #14
 800b41e:	18bb      	adds	r3, r7, r2
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d003      	beq.n	800b42e <USBD_StdEPReq+0x2f8>
 800b426:	18bb      	adds	r3, r7, r2
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	2b80      	cmp	r3, #128	; 0x80
 800b42c:	d103      	bne.n	800b436 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	2200      	movs	r2, #0
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	e010      	b.n	800b458 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b436:	230e      	movs	r3, #14
 800b438:	18fb      	adds	r3, r7, r3
 800b43a:	781a      	ldrb	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	0011      	movs	r1, r2
 800b440:	0018      	movs	r0, r3
 800b442:	f001 f908 	bl	800c656 <USBD_LL_IsStallEP>
 800b446:	1e03      	subs	r3, r0, #0
 800b448:	d003      	beq.n	800b452 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2201      	movs	r2, #1
 800b44e:	601a      	str	r2, [r3, #0]
 800b450:	e002      	b.n	800b458 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b458:	68b9      	ldr	r1, [r7, #8]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2202      	movs	r2, #2
 800b45e:	0018      	movs	r0, r3
 800b460:	f000 fc34 	bl	800bccc <USBD_CtlSendData>
              break;
 800b464:	e006      	b.n	800b474 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	0011      	movs	r1, r2
 800b46c:	0018      	movs	r0, r3
 800b46e:	f000 fbaf 	bl	800bbd0 <USBD_CtlError>
              break;
 800b472:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b474:	e006      	b.n	800b484 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	0011      	movs	r1, r2
 800b47c:	0018      	movs	r0, r3
 800b47e:	f000 fba7 	bl	800bbd0 <USBD_CtlError>
          break;
 800b482:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b484:	e006      	b.n	800b494 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	0011      	movs	r1, r2
 800b48c:	0018      	movs	r0, r3
 800b48e:	f000 fb9f 	bl	800bbd0 <USBD_CtlError>
      break;
 800b492:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b494:	230f      	movs	r3, #15
 800b496:	18fb      	adds	r3, r7, r3
 800b498:	781b      	ldrb	r3, [r3, #0]
}
 800b49a:	0018      	movs	r0, r3
 800b49c:	46bd      	mov	sp, r7
 800b49e:	b004      	add	sp, #16
 800b4a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b4a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4ae:	2308      	movs	r3, #8
 800b4b0:	18fb      	adds	r3, r7, r3
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b4ba:	230b      	movs	r3, #11
 800b4bc:	18fb      	adds	r3, r7, r3
 800b4be:	2200      	movs	r2, #0
 800b4c0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	885b      	ldrh	r3, [r3, #2]
 800b4c6:	0a1b      	lsrs	r3, r3, #8
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	2b07      	cmp	r3, #7
 800b4cc:	d900      	bls.n	800b4d0 <USBD_GetDescriptor+0x2c>
 800b4ce:	e159      	b.n	800b784 <USBD_GetDescriptor+0x2e0>
 800b4d0:	009a      	lsls	r2, r3, #2
 800b4d2:	4bcb      	ldr	r3, [pc, #812]	; (800b800 <USBD_GetDescriptor+0x35c>)
 800b4d4:	18d3      	adds	r3, r2, r3
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	23ac      	movs	r3, #172	; 0xac
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	58d3      	ldr	r3, [r2, r3]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	7c12      	ldrb	r2, [r2, #16]
 800b4e8:	2108      	movs	r1, #8
 800b4ea:	1879      	adds	r1, r7, r1
 800b4ec:	0010      	movs	r0, r2
 800b4ee:	4798      	blx	r3
 800b4f0:	0003      	movs	r3, r0
 800b4f2:	60fb      	str	r3, [r7, #12]
      break;
 800b4f4:	e153      	b.n	800b79e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	7c1b      	ldrb	r3, [r3, #16]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10f      	bne.n	800b51e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	23ad      	movs	r3, #173	; 0xad
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	58d3      	ldr	r3, [r2, r3]
 800b506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b508:	2208      	movs	r2, #8
 800b50a:	18ba      	adds	r2, r7, r2
 800b50c:	0010      	movs	r0, r2
 800b50e:	4798      	blx	r3
 800b510:	0003      	movs	r3, r0
 800b512:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	3301      	adds	r3, #1
 800b518:	2202      	movs	r2, #2
 800b51a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b51c:	e13f      	b.n	800b79e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	23ad      	movs	r3, #173	; 0xad
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	58d3      	ldr	r3, [r2, r3]
 800b526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b528:	2208      	movs	r2, #8
 800b52a:	18ba      	adds	r2, r7, r2
 800b52c:	0010      	movs	r0, r2
 800b52e:	4798      	blx	r3
 800b530:	0003      	movs	r3, r0
 800b532:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3301      	adds	r3, #1
 800b538:	2202      	movs	r2, #2
 800b53a:	701a      	strb	r2, [r3, #0]
      break;
 800b53c:	e12f      	b.n	800b79e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	885b      	ldrh	r3, [r3, #2]
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b05      	cmp	r3, #5
 800b546:	d900      	bls.n	800b54a <USBD_GetDescriptor+0xa6>
 800b548:	e0d0      	b.n	800b6ec <USBD_GetDescriptor+0x248>
 800b54a:	009a      	lsls	r2, r3, #2
 800b54c:	4bad      	ldr	r3, [pc, #692]	; (800b804 <USBD_GetDescriptor+0x360>)
 800b54e:	18d3      	adds	r3, r2, r3
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	23ac      	movs	r3, #172	; 0xac
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	58d3      	ldr	r3, [r2, r3]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00d      	beq.n	800b57e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	23ac      	movs	r3, #172	; 0xac
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	58d3      	ldr	r3, [r2, r3]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	7c12      	ldrb	r2, [r2, #16]
 800b570:	2108      	movs	r1, #8
 800b572:	1879      	adds	r1, r7, r1
 800b574:	0010      	movs	r0, r2
 800b576:	4798      	blx	r3
 800b578:	0003      	movs	r3, r0
 800b57a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b57c:	e0c3      	b.n	800b706 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	0011      	movs	r1, r2
 800b584:	0018      	movs	r0, r3
 800b586:	f000 fb23 	bl	800bbd0 <USBD_CtlError>
            err++;
 800b58a:	210b      	movs	r1, #11
 800b58c:	187b      	adds	r3, r7, r1
 800b58e:	781a      	ldrb	r2, [r3, #0]
 800b590:	187b      	adds	r3, r7, r1
 800b592:	3201      	adds	r2, #1
 800b594:	701a      	strb	r2, [r3, #0]
          break;
 800b596:	e0b6      	b.n	800b706 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	23ac      	movs	r3, #172	; 0xac
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	58d3      	ldr	r3, [r2, r3]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00d      	beq.n	800b5c2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	23ac      	movs	r3, #172	; 0xac
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	58d3      	ldr	r3, [r2, r3]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	7c12      	ldrb	r2, [r2, #16]
 800b5b4:	2108      	movs	r1, #8
 800b5b6:	1879      	adds	r1, r7, r1
 800b5b8:	0010      	movs	r0, r2
 800b5ba:	4798      	blx	r3
 800b5bc:	0003      	movs	r3, r0
 800b5be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5c0:	e0a1      	b.n	800b706 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	0011      	movs	r1, r2
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	f000 fb01 	bl	800bbd0 <USBD_CtlError>
            err++;
 800b5ce:	210b      	movs	r1, #11
 800b5d0:	187b      	adds	r3, r7, r1
 800b5d2:	781a      	ldrb	r2, [r3, #0]
 800b5d4:	187b      	adds	r3, r7, r1
 800b5d6:	3201      	adds	r2, #1
 800b5d8:	701a      	strb	r2, [r3, #0]
          break;
 800b5da:	e094      	b.n	800b706 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	23ac      	movs	r3, #172	; 0xac
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	58d3      	ldr	r3, [r2, r3]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00d      	beq.n	800b606 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	23ac      	movs	r3, #172	; 0xac
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	58d3      	ldr	r3, [r2, r3]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	7c12      	ldrb	r2, [r2, #16]
 800b5f8:	2108      	movs	r1, #8
 800b5fa:	1879      	adds	r1, r7, r1
 800b5fc:	0010      	movs	r0, r2
 800b5fe:	4798      	blx	r3
 800b600:	0003      	movs	r3, r0
 800b602:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b604:	e07f      	b.n	800b706 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	0011      	movs	r1, r2
 800b60c:	0018      	movs	r0, r3
 800b60e:	f000 fadf 	bl	800bbd0 <USBD_CtlError>
            err++;
 800b612:	210b      	movs	r1, #11
 800b614:	187b      	adds	r3, r7, r1
 800b616:	781a      	ldrb	r2, [r3, #0]
 800b618:	187b      	adds	r3, r7, r1
 800b61a:	3201      	adds	r2, #1
 800b61c:	701a      	strb	r2, [r3, #0]
          break;
 800b61e:	e072      	b.n	800b706 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	23ac      	movs	r3, #172	; 0xac
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	58d3      	ldr	r3, [r2, r3]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00d      	beq.n	800b64a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	23ac      	movs	r3, #172	; 0xac
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	58d3      	ldr	r3, [r2, r3]
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	7c12      	ldrb	r2, [r2, #16]
 800b63c:	2108      	movs	r1, #8
 800b63e:	1879      	adds	r1, r7, r1
 800b640:	0010      	movs	r0, r2
 800b642:	4798      	blx	r3
 800b644:	0003      	movs	r3, r0
 800b646:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b648:	e05d      	b.n	800b706 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	0011      	movs	r1, r2
 800b650:	0018      	movs	r0, r3
 800b652:	f000 fabd 	bl	800bbd0 <USBD_CtlError>
            err++;
 800b656:	210b      	movs	r1, #11
 800b658:	187b      	adds	r3, r7, r1
 800b65a:	781a      	ldrb	r2, [r3, #0]
 800b65c:	187b      	adds	r3, r7, r1
 800b65e:	3201      	adds	r2, #1
 800b660:	701a      	strb	r2, [r3, #0]
          break;
 800b662:	e050      	b.n	800b706 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	23ac      	movs	r3, #172	; 0xac
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	58d3      	ldr	r3, [r2, r3]
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00d      	beq.n	800b68e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	23ac      	movs	r3, #172	; 0xac
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	58d3      	ldr	r3, [r2, r3]
 800b67a:	695b      	ldr	r3, [r3, #20]
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	7c12      	ldrb	r2, [r2, #16]
 800b680:	2108      	movs	r1, #8
 800b682:	1879      	adds	r1, r7, r1
 800b684:	0010      	movs	r0, r2
 800b686:	4798      	blx	r3
 800b688:	0003      	movs	r3, r0
 800b68a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b68c:	e03b      	b.n	800b706 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	0011      	movs	r1, r2
 800b694:	0018      	movs	r0, r3
 800b696:	f000 fa9b 	bl	800bbd0 <USBD_CtlError>
            err++;
 800b69a:	210b      	movs	r1, #11
 800b69c:	187b      	adds	r3, r7, r1
 800b69e:	781a      	ldrb	r2, [r3, #0]
 800b6a0:	187b      	adds	r3, r7, r1
 800b6a2:	3201      	adds	r2, #1
 800b6a4:	701a      	strb	r2, [r3, #0]
          break;
 800b6a6:	e02e      	b.n	800b706 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	23ac      	movs	r3, #172	; 0xac
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	58d3      	ldr	r3, [r2, r3]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00d      	beq.n	800b6d2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	23ac      	movs	r3, #172	; 0xac
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	58d3      	ldr	r3, [r2, r3]
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	7c12      	ldrb	r2, [r2, #16]
 800b6c4:	2108      	movs	r1, #8
 800b6c6:	1879      	adds	r1, r7, r1
 800b6c8:	0010      	movs	r0, r2
 800b6ca:	4798      	blx	r3
 800b6cc:	0003      	movs	r3, r0
 800b6ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6d0:	e019      	b.n	800b706 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	0011      	movs	r1, r2
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f000 fa79 	bl	800bbd0 <USBD_CtlError>
            err++;
 800b6de:	210b      	movs	r1, #11
 800b6e0:	187b      	adds	r3, r7, r1
 800b6e2:	781a      	ldrb	r2, [r3, #0]
 800b6e4:	187b      	adds	r3, r7, r1
 800b6e6:	3201      	adds	r2, #1
 800b6e8:	701a      	strb	r2, [r3, #0]
          break;
 800b6ea:	e00c      	b.n	800b706 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	0011      	movs	r1, r2
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	f000 fa6c 	bl	800bbd0 <USBD_CtlError>
          err++;
 800b6f8:	210b      	movs	r1, #11
 800b6fa:	187b      	adds	r3, r7, r1
 800b6fc:	781a      	ldrb	r2, [r3, #0]
 800b6fe:	187b      	adds	r3, r7, r1
 800b700:	3201      	adds	r2, #1
 800b702:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800b704:	e04b      	b.n	800b79e <USBD_GetDescriptor+0x2fa>
 800b706:	e04a      	b.n	800b79e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	7c1b      	ldrb	r3, [r3, #16]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10b      	bne.n	800b728 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	23ad      	movs	r3, #173	; 0xad
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	58d3      	ldr	r3, [r2, r3]
 800b718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b71a:	2208      	movs	r2, #8
 800b71c:	18ba      	adds	r2, r7, r2
 800b71e:	0010      	movs	r0, r2
 800b720:	4798      	blx	r3
 800b722:	0003      	movs	r3, r0
 800b724:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b726:	e03a      	b.n	800b79e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	0011      	movs	r1, r2
 800b72e:	0018      	movs	r0, r3
 800b730:	f000 fa4e 	bl	800bbd0 <USBD_CtlError>
        err++;
 800b734:	210b      	movs	r1, #11
 800b736:	187b      	adds	r3, r7, r1
 800b738:	781a      	ldrb	r2, [r3, #0]
 800b73a:	187b      	adds	r3, r7, r1
 800b73c:	3201      	adds	r2, #1
 800b73e:	701a      	strb	r2, [r3, #0]
      break;
 800b740:	e02d      	b.n	800b79e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	7c1b      	ldrb	r3, [r3, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10f      	bne.n	800b76a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	23ad      	movs	r3, #173	; 0xad
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	58d3      	ldr	r3, [r2, r3]
 800b752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b754:	2208      	movs	r2, #8
 800b756:	18ba      	adds	r2, r7, r2
 800b758:	0010      	movs	r0, r2
 800b75a:	4798      	blx	r3
 800b75c:	0003      	movs	r3, r0
 800b75e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	3301      	adds	r3, #1
 800b764:	2207      	movs	r2, #7
 800b766:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b768:	e019      	b.n	800b79e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	0011      	movs	r1, r2
 800b770:	0018      	movs	r0, r3
 800b772:	f000 fa2d 	bl	800bbd0 <USBD_CtlError>
        err++;
 800b776:	210b      	movs	r1, #11
 800b778:	187b      	adds	r3, r7, r1
 800b77a:	781a      	ldrb	r2, [r3, #0]
 800b77c:	187b      	adds	r3, r7, r1
 800b77e:	3201      	adds	r2, #1
 800b780:	701a      	strb	r2, [r3, #0]
      break;
 800b782:	e00c      	b.n	800b79e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	0011      	movs	r1, r2
 800b78a:	0018      	movs	r0, r3
 800b78c:	f000 fa20 	bl	800bbd0 <USBD_CtlError>
      err++;
 800b790:	210b      	movs	r1, #11
 800b792:	187b      	adds	r3, r7, r1
 800b794:	781a      	ldrb	r2, [r3, #0]
 800b796:	187b      	adds	r3, r7, r1
 800b798:	3201      	adds	r2, #1
 800b79a:	701a      	strb	r2, [r3, #0]
      break;
 800b79c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800b79e:	230b      	movs	r3, #11
 800b7a0:	18fb      	adds	r3, r7, r3
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d127      	bne.n	800b7f8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b7a8:	2108      	movs	r1, #8
 800b7aa:	187b      	adds	r3, r7, r1
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d019      	beq.n	800b7e6 <USBD_GetDescriptor+0x342>
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	88db      	ldrh	r3, [r3, #6]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d015      	beq.n	800b7e6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	88da      	ldrh	r2, [r3, #6]
 800b7be:	187b      	adds	r3, r7, r1
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	1c18      	adds	r0, r3, #0
 800b7c4:	1c11      	adds	r1, r2, #0
 800b7c6:	b28a      	uxth	r2, r1
 800b7c8:	b283      	uxth	r3, r0
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d900      	bls.n	800b7d0 <USBD_GetDescriptor+0x32c>
 800b7ce:	1c01      	adds	r1, r0, #0
 800b7d0:	b28a      	uxth	r2, r1
 800b7d2:	2108      	movs	r1, #8
 800b7d4:	187b      	adds	r3, r7, r1
 800b7d6:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b7d8:	187b      	adds	r3, r7, r1
 800b7da:	881a      	ldrh	r2, [r3, #0]
 800b7dc:	68f9      	ldr	r1, [r7, #12]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	0018      	movs	r0, r3
 800b7e2:	f000 fa73 	bl	800bccc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	88db      	ldrh	r3, [r3, #6]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d105      	bne.n	800b7fa <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	0018      	movs	r0, r3
 800b7f2:	f000 fad5 	bl	800bda0 <USBD_CtlSendStatus>
 800b7f6:	e000      	b.n	800b7fa <USBD_GetDescriptor+0x356>
    return;
 800b7f8:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	b004      	add	sp, #16
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	0800d320 	.word	0x0800d320
 800b804:	0800d340 	.word	0x0800d340

0800b808 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b808:	b590      	push	{r4, r7, lr}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	889b      	ldrh	r3, [r3, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d13d      	bne.n	800b896 <USBD_SetAddress+0x8e>
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	88db      	ldrh	r3, [r3, #6]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d139      	bne.n	800b896 <USBD_SetAddress+0x8e>
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	885b      	ldrh	r3, [r3, #2]
 800b826:	2b7f      	cmp	r3, #127	; 0x7f
 800b828:	d835      	bhi.n	800b896 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	885b      	ldrh	r3, [r3, #2]
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	230f      	movs	r3, #15
 800b832:	18fb      	adds	r3, r7, r3
 800b834:	217f      	movs	r1, #127	; 0x7f
 800b836:	400a      	ands	r2, r1
 800b838:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	23a7      	movs	r3, #167	; 0xa7
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	5cd3      	ldrb	r3, [r2, r3]
 800b842:	2b03      	cmp	r3, #3
 800b844:	d106      	bne.n	800b854 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	0011      	movs	r1, r2
 800b84c:	0018      	movs	r0, r3
 800b84e:	f000 f9bf 	bl	800bbd0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b852:	e027      	b.n	800b8a4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	240f      	movs	r4, #15
 800b858:	193a      	adds	r2, r7, r4
 800b85a:	4914      	ldr	r1, [pc, #80]	; (800b8ac <USBD_SetAddress+0xa4>)
 800b85c:	7812      	ldrb	r2, [r2, #0]
 800b85e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b860:	193b      	adds	r3, r7, r4
 800b862:	781a      	ldrb	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	0011      	movs	r1, r2
 800b868:	0018      	movs	r0, r3
 800b86a:	f000 ff25 	bl	800c6b8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	0018      	movs	r0, r3
 800b872:	f000 fa95 	bl	800bda0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b876:	193b      	adds	r3, r7, r4
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d005      	beq.n	800b88a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	23a7      	movs	r3, #167	; 0xa7
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	2102      	movs	r1, #2
 800b886:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b888:	e00c      	b.n	800b8a4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	23a7      	movs	r3, #167	; 0xa7
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	2101      	movs	r1, #1
 800b892:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b894:	e006      	b.n	800b8a4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	0011      	movs	r1, r2
 800b89c:	0018      	movs	r0, r3
 800b89e:	f000 f997 	bl	800bbd0 <USBD_CtlError>
  }
}
 800b8a2:	46c0      	nop			; (mov r8, r8)
 800b8a4:	46c0      	nop			; (mov r8, r8)
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	b005      	add	sp, #20
 800b8aa:	bd90      	pop	{r4, r7, pc}
 800b8ac:	0000029e 	.word	0x0000029e

0800b8b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	885b      	ldrh	r3, [r3, #2]
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	4b4c      	ldr	r3, [pc, #304]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b8c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b8c4:	4b4b      	ldr	r3, [pc, #300]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d906      	bls.n	800b8da <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800b8cc:	683a      	ldr	r2, [r7, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	0011      	movs	r1, r2
 800b8d2:	0018      	movs	r0, r3
 800b8d4:	f000 f97c 	bl	800bbd0 <USBD_CtlError>
 800b8d8:	e088      	b.n	800b9ec <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	23a7      	movs	r3, #167	; 0xa7
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	5cd3      	ldrb	r3, [r2, r3]
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d002      	beq.n	800b8ec <USBD_SetConfig+0x3c>
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d029      	beq.n	800b93e <USBD_SetConfig+0x8e>
 800b8ea:	e071      	b.n	800b9d0 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b8ec:	4b41      	ldr	r3, [pc, #260]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d01f      	beq.n	800b934 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800b8f4:	4b3f      	ldr	r3, [pc, #252]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	001a      	movs	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	23a7      	movs	r3, #167	; 0xa7
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	2103      	movs	r1, #3
 800b906:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b908:	4b3a      	ldr	r3, [pc, #232]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b90a:	781a      	ldrb	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	0011      	movs	r1, r2
 800b910:	0018      	movs	r0, r3
 800b912:	f7ff f8c6 	bl	800aaa2 <USBD_SetClassConfig>
 800b916:	0003      	movs	r3, r0
 800b918:	2b02      	cmp	r3, #2
 800b91a:	d106      	bne.n	800b92a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	0011      	movs	r1, r2
 800b922:	0018      	movs	r0, r3
 800b924:	f000 f954 	bl	800bbd0 <USBD_CtlError>
            return;
 800b928:	e060      	b.n	800b9ec <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	0018      	movs	r0, r3
 800b92e:	f000 fa37 	bl	800bda0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b932:	e05b      	b.n	800b9ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	0018      	movs	r0, r3
 800b938:	f000 fa32 	bl	800bda0 <USBD_CtlSendStatus>
        break;
 800b93c:	e056      	b.n	800b9ec <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b93e:	4b2d      	ldr	r3, [pc, #180]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d115      	bne.n	800b972 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	23a7      	movs	r3, #167	; 0xa7
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	2102      	movs	r1, #2
 800b94e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800b950:	4b28      	ldr	r3, [pc, #160]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	001a      	movs	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b95a:	4b26      	ldr	r3, [pc, #152]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b95c:	781a      	ldrb	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	0011      	movs	r1, r2
 800b962:	0018      	movs	r0, r3
 800b964:	f7ff f8c4 	bl	800aaf0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	0018      	movs	r0, r3
 800b96c:	f000 fa18 	bl	800bda0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b970:	e03c      	b.n	800b9ec <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800b972:	4b20      	ldr	r3, [pc, #128]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	001a      	movs	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d022      	beq.n	800b9c6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	b2da      	uxtb	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	0011      	movs	r1, r2
 800b98a:	0018      	movs	r0, r3
 800b98c:	f7ff f8b0 	bl	800aaf0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b990:	4b18      	ldr	r3, [pc, #96]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	001a      	movs	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b99a:	4b16      	ldr	r3, [pc, #88]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b99c:	781a      	ldrb	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	0011      	movs	r1, r2
 800b9a2:	0018      	movs	r0, r3
 800b9a4:	f7ff f87d 	bl	800aaa2 <USBD_SetClassConfig>
 800b9a8:	0003      	movs	r3, r0
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d106      	bne.n	800b9bc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	0011      	movs	r1, r2
 800b9b4:	0018      	movs	r0, r3
 800b9b6:	f000 f90b 	bl	800bbd0 <USBD_CtlError>
            return;
 800b9ba:	e017      	b.n	800b9ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	0018      	movs	r0, r3
 800b9c0:	f000 f9ee 	bl	800bda0 <USBD_CtlSendStatus>
        break;
 800b9c4:	e012      	b.n	800b9ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	0018      	movs	r0, r3
 800b9ca:	f000 f9e9 	bl	800bda0 <USBD_CtlSendStatus>
        break;
 800b9ce:	e00d      	b.n	800b9ec <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	0011      	movs	r1, r2
 800b9d6:	0018      	movs	r0, r3
 800b9d8:	f000 f8fa 	bl	800bbd0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <USBD_SetConfig+0x144>)
 800b9de:	781a      	ldrb	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	0011      	movs	r1, r2
 800b9e4:	0018      	movs	r0, r3
 800b9e6:	f7ff f883 	bl	800aaf0 <USBD_ClrClassConfig>
        break;
 800b9ea:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	b002      	add	sp, #8
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	46c0      	nop			; (mov r8, r8)
 800b9f4:	20000264 	.word	0x20000264

0800b9f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	88db      	ldrh	r3, [r3, #6]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d006      	beq.n	800ba18 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	0011      	movs	r1, r2
 800ba10:	0018      	movs	r0, r3
 800ba12:	f000 f8dd 	bl	800bbd0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ba16:	e026      	b.n	800ba66 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	23a7      	movs	r3, #167	; 0xa7
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	5cd3      	ldrb	r3, [r2, r3]
 800ba20:	2b02      	cmp	r3, #2
 800ba22:	dc02      	bgt.n	800ba2a <USBD_GetConfig+0x32>
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	dc03      	bgt.n	800ba30 <USBD_GetConfig+0x38>
 800ba28:	e016      	b.n	800ba58 <USBD_GetConfig+0x60>
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d00c      	beq.n	800ba48 <USBD_GetConfig+0x50>
 800ba2e:	e013      	b.n	800ba58 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	3308      	adds	r3, #8
 800ba3a:	0019      	movs	r1, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	0018      	movs	r0, r3
 800ba42:	f000 f943 	bl	800bccc <USBD_CtlSendData>
        break;
 800ba46:	e00e      	b.n	800ba66 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	1d19      	adds	r1, r3, #4
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	0018      	movs	r0, r3
 800ba52:	f000 f93b 	bl	800bccc <USBD_CtlSendData>
        break;
 800ba56:	e006      	b.n	800ba66 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	0011      	movs	r1, r2
 800ba5e:	0018      	movs	r0, r3
 800ba60:	f000 f8b6 	bl	800bbd0 <USBD_CtlError>
        break;
 800ba64:	46c0      	nop			; (mov r8, r8)
}
 800ba66:	46c0      	nop			; (mov r8, r8)
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	b002      	add	sp, #8
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b082      	sub	sp, #8
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	23a7      	movs	r3, #167	; 0xa7
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	5cd3      	ldrb	r3, [r2, r3]
 800ba80:	3b01      	subs	r3, #1
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d822      	bhi.n	800bacc <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	88db      	ldrh	r3, [r3, #6]
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d006      	beq.n	800ba9c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	0011      	movs	r1, r2
 800ba94:	0018      	movs	r0, r3
 800ba96:	f000 f89b 	bl	800bbd0 <USBD_CtlError>
        break;
 800ba9a:	e01e      	b.n	800bada <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	23a9      	movs	r3, #169	; 0xa9
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	58d3      	ldr	r3, [r2, r3]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d005      	beq.n	800baba <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	2202      	movs	r2, #2
 800bab4:	431a      	orrs	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	330c      	adds	r3, #12
 800babe:	0019      	movs	r1, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2202      	movs	r2, #2
 800bac4:	0018      	movs	r0, r3
 800bac6:	f000 f901 	bl	800bccc <USBD_CtlSendData>
      break;
 800baca:	e006      	b.n	800bada <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	0011      	movs	r1, r2
 800bad2:	0018      	movs	r0, r3
 800bad4:	f000 f87c 	bl	800bbd0 <USBD_CtlError>
      break;
 800bad8:	46c0      	nop			; (mov r8, r8)
  }
}
 800bada:	46c0      	nop			; (mov r8, r8)
 800badc:	46bd      	mov	sp, r7
 800bade:	b002      	add	sp, #8
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b082      	sub	sp, #8
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	885b      	ldrh	r3, [r3, #2]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d108      	bne.n	800bb06 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	23a9      	movs	r3, #169	; 0xa9
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	2101      	movs	r1, #1
 800bafc:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	0018      	movs	r0, r3
 800bb02:	f000 f94d 	bl	800bda0 <USBD_CtlSendStatus>
  }
}
 800bb06:	46c0      	nop			; (mov r8, r8)
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	b002      	add	sp, #8
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	23a7      	movs	r3, #167	; 0xa7
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	5cd3      	ldrb	r3, [r2, r3]
 800bb20:	3b01      	subs	r3, #1
 800bb22:	2b02      	cmp	r3, #2
 800bb24:	d80d      	bhi.n	800bb42 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	885b      	ldrh	r3, [r3, #2]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d110      	bne.n	800bb50 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	23a9      	movs	r3, #169	; 0xa9
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	2100      	movs	r1, #0
 800bb36:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	0018      	movs	r0, r3
 800bb3c:	f000 f930 	bl	800bda0 <USBD_CtlSendStatus>
      }
      break;
 800bb40:	e006      	b.n	800bb50 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	0011      	movs	r1, r2
 800bb48:	0018      	movs	r0, r3
 800bb4a:	f000 f841 	bl	800bbd0 <USBD_CtlError>
      break;
 800bb4e:	e000      	b.n	800bb52 <USBD_ClrFeature+0x44>
      break;
 800bb50:	46c0      	nop			; (mov r8, r8)
  }
}
 800bb52:	46c0      	nop			; (mov r8, r8)
 800bb54:	46bd      	mov	sp, r7
 800bb56:	b002      	add	sp, #8
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b082      	sub	sp, #8
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	781a      	ldrb	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	785a      	ldrb	r2, [r3, #1]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	3302      	adds	r3, #2
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	3303      	adds	r3, #3
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	021b      	lsls	r3, r3, #8
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	18d3      	adds	r3, r2, r3
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	3304      	adds	r3, #4
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	3305      	adds	r3, #5
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	021b      	lsls	r3, r3, #8
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	18d3      	adds	r3, r2, r3
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	3306      	adds	r3, #6
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	3307      	adds	r3, #7
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	021b      	lsls	r3, r3, #8
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	18d3      	adds	r3, r2, r3
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	80da      	strh	r2, [r3, #6]

}
 800bbc8:	46c0      	nop			; (mov r8, r8)
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	b002      	add	sp, #8
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2180      	movs	r1, #128	; 0x80
 800bbde:	0018      	movs	r0, r3
 800bbe0:	f000 fce3 	bl	800c5aa <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	0018      	movs	r0, r3
 800bbea:	f000 fcde 	bl	800c5aa <USBD_LL_StallEP>
}
 800bbee:	46c0      	nop			; (mov r8, r8)
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	b002      	add	sp, #8
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bbf6:	b590      	push	{r4, r7, lr}
 800bbf8:	b087      	sub	sp, #28
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	60b9      	str	r1, [r7, #8]
 800bc00:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc02:	2417      	movs	r4, #23
 800bc04:	193b      	adds	r3, r7, r4
 800bc06:	2200      	movs	r2, #0
 800bc08:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d03c      	beq.n	800bc8a <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	0018      	movs	r0, r3
 800bc14:	f000 f83d 	bl	800bc92 <USBD_GetLen>
 800bc18:	0003      	movs	r3, r0
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	18db      	adds	r3, r3, r3
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bc26:	193b      	adds	r3, r7, r4
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	193a      	adds	r2, r7, r4
 800bc2c:	1c59      	adds	r1, r3, #1
 800bc2e:	7011      	strb	r1, [r2, #0]
 800bc30:	001a      	movs	r2, r3
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	189b      	adds	r3, r3, r2
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	7812      	ldrb	r2, [r2, #0]
 800bc3a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bc3c:	193b      	adds	r3, r7, r4
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	193a      	adds	r2, r7, r4
 800bc42:	1c59      	adds	r1, r3, #1
 800bc44:	7011      	strb	r1, [r2, #0]
 800bc46:	001a      	movs	r2, r3
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	189b      	adds	r3, r3, r2
 800bc4c:	2203      	movs	r2, #3
 800bc4e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bc50:	e017      	b.n	800bc82 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	60fa      	str	r2, [r7, #12]
 800bc58:	2417      	movs	r4, #23
 800bc5a:	193a      	adds	r2, r7, r4
 800bc5c:	7812      	ldrb	r2, [r2, #0]
 800bc5e:	1939      	adds	r1, r7, r4
 800bc60:	1c50      	adds	r0, r2, #1
 800bc62:	7008      	strb	r0, [r1, #0]
 800bc64:	0011      	movs	r1, r2
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	1852      	adds	r2, r2, r1
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bc6e:	193b      	adds	r3, r7, r4
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	193a      	adds	r2, r7, r4
 800bc74:	1c59      	adds	r1, r3, #1
 800bc76:	7011      	strb	r1, [r2, #0]
 800bc78:	001a      	movs	r2, r3
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	189b      	adds	r3, r3, r2
 800bc7e:	2200      	movs	r2, #0
 800bc80:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1e3      	bne.n	800bc52 <USBD_GetString+0x5c>
    }
  }
}
 800bc8a:	46c0      	nop			; (mov r8, r8)
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	b007      	add	sp, #28
 800bc90:	bd90      	pop	{r4, r7, pc}

0800bc92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b084      	sub	sp, #16
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc9a:	230f      	movs	r3, #15
 800bc9c:	18fb      	adds	r3, r7, r3
 800bc9e:	2200      	movs	r2, #0
 800bca0:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800bca2:	e008      	b.n	800bcb6 <USBD_GetLen+0x24>
  {
    len++;
 800bca4:	210f      	movs	r1, #15
 800bca6:	187b      	adds	r3, r7, r1
 800bca8:	781a      	ldrb	r2, [r3, #0]
 800bcaa:	187b      	adds	r3, r7, r1
 800bcac:	3201      	adds	r2, #1
 800bcae:	701a      	strb	r2, [r3, #0]
    buf++;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1f2      	bne.n	800bca4 <USBD_GetLen+0x12>
  }

  return len;
 800bcbe:	230f      	movs	r3, #15
 800bcc0:	18fb      	adds	r3, r7, r3
 800bcc2:	781b      	ldrb	r3, [r3, #0]
}
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	b004      	add	sp, #16
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	1dbb      	adds	r3, r7, #6
 800bcd8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	23a5      	movs	r3, #165	; 0xa5
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	2102      	movs	r1, #2
 800bce2:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800bce4:	1dbb      	adds	r3, r7, #6
 800bce6:	881a      	ldrh	r2, [r3, #0]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bcec:	1dbb      	adds	r3, r7, #6
 800bcee:	881a      	ldrh	r2, [r3, #0]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bcf4:	1dbb      	adds	r3, r7, #6
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	68ba      	ldr	r2, [r7, #8]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	f000 fd06 	bl	800c70e <USBD_LL_Transmit>

  return USBD_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	0018      	movs	r0, r3
 800bd06:	46bd      	mov	sp, r7
 800bd08:	b004      	add	sp, #16
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	1dbb      	adds	r3, r7, #6
 800bd18:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd1a:	1dbb      	adds	r3, r7, #6
 800bd1c:	881b      	ldrh	r3, [r3, #0]
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	2100      	movs	r1, #0
 800bd24:	f000 fcf3 	bl	800c70e <USBD_LL_Transmit>

  return USBD_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	0018      	movs	r0, r3
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	b004      	add	sp, #16
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	1dbb      	adds	r3, r7, #6
 800bd3e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bd40:	68fa      	ldr	r2, [r7, #12]
 800bd42:	23a5      	movs	r3, #165	; 0xa5
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	2103      	movs	r1, #3
 800bd48:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800bd4a:	1dbb      	adds	r3, r7, #6
 800bd4c:	8819      	ldrh	r1, [r3, #0]
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	23ae      	movs	r3, #174	; 0xae
 800bd52:	005b      	lsls	r3, r3, #1
 800bd54:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800bd56:	1dbb      	adds	r3, r7, #6
 800bd58:	8819      	ldrh	r1, [r3, #0]
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	23b0      	movs	r3, #176	; 0xb0
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd62:	1dbb      	adds	r3, r7, #6
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	f000 fd06 	bl	800c77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	0018      	movs	r0, r3
 800bd74:	46bd      	mov	sp, r7
 800bd76:	b004      	add	sp, #16
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	60f8      	str	r0, [r7, #12]
 800bd82:	60b9      	str	r1, [r7, #8]
 800bd84:	1dbb      	adds	r3, r7, #6
 800bd86:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd88:	1dbb      	adds	r3, r7, #6
 800bd8a:	881b      	ldrh	r3, [r3, #0]
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	2100      	movs	r1, #0
 800bd92:	f000 fcf3 	bl	800c77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	0018      	movs	r0, r3
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	b004      	add	sp, #16
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	23a5      	movs	r3, #165	; 0xa5
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	2104      	movs	r1, #4
 800bdb0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2100      	movs	r1, #0
 800bdba:	f000 fca8 	bl	800c70e <USBD_LL_Transmit>

  return USBD_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	0018      	movs	r0, r3
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	b002      	add	sp, #8
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	23a5      	movs	r3, #165	; 0xa5
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	2105      	movs	r1, #5
 800bdd8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	2300      	movs	r3, #0
 800bdde:	2200      	movs	r2, #0
 800bde0:	2100      	movs	r1, #0
 800bde2:	f000 fccb 	bl	800c77c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	0018      	movs	r0, r3
 800bdea:	46bd      	mov	sp, r7
 800bdec:	b002      	add	sp, #8
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bdf4:	4914      	ldr	r1, [pc, #80]	; (800be48 <MX_USB_DEVICE_Init+0x58>)
 800bdf6:	4b15      	ldr	r3, [pc, #84]	; (800be4c <MX_USB_DEVICE_Init+0x5c>)
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	0018      	movs	r0, r3
 800bdfc:	f7fe fdea 	bl	800a9d4 <USBD_Init>
 800be00:	1e03      	subs	r3, r0, #0
 800be02:	d001      	beq.n	800be08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800be04:	f7f5 fd2c 	bl	8001860 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be08:	4a11      	ldr	r2, [pc, #68]	; (800be50 <MX_USB_DEVICE_Init+0x60>)
 800be0a:	4b10      	ldr	r3, [pc, #64]	; (800be4c <MX_USB_DEVICE_Init+0x5c>)
 800be0c:	0011      	movs	r1, r2
 800be0e:	0018      	movs	r0, r3
 800be10:	f7fe fe11 	bl	800aa36 <USBD_RegisterClass>
 800be14:	1e03      	subs	r3, r0, #0
 800be16:	d001      	beq.n	800be1c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800be18:	f7f5 fd22 	bl	8001860 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800be1c:	4a0d      	ldr	r2, [pc, #52]	; (800be54 <MX_USB_DEVICE_Init+0x64>)
 800be1e:	4b0b      	ldr	r3, [pc, #44]	; (800be4c <MX_USB_DEVICE_Init+0x5c>)
 800be20:	0011      	movs	r1, r2
 800be22:	0018      	movs	r0, r3
 800be24:	f7fe fd26 	bl	800a874 <USBD_CDC_RegisterInterface>
 800be28:	1e03      	subs	r3, r0, #0
 800be2a:	d001      	beq.n	800be30 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800be2c:	f7f5 fd18 	bl	8001860 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800be30:	4b06      	ldr	r3, [pc, #24]	; (800be4c <MX_USB_DEVICE_Init+0x5c>)
 800be32:	0018      	movs	r0, r3
 800be34:	f7fe fe1f 	bl	800aa76 <USBD_Start>
 800be38:	1e03      	subs	r3, r0, #0
 800be3a:	d001      	beq.n	800be40 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800be3c:	f7f5 fd10 	bl	8001860 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800be40:	46c0      	nop			; (mov r8, r8)
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	46c0      	nop			; (mov r8, r8)
 800be48:	2000012c 	.word	0x2000012c
 800be4c:	200006a4 	.word	0x200006a4
 800be50:	20000018 	.word	0x20000018
 800be54:	2000011c 	.word	0x2000011c

0800be58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800be5c:	4907      	ldr	r1, [pc, #28]	; (800be7c <CDC_Init_FS+0x24>)
 800be5e:	4b08      	ldr	r3, [pc, #32]	; (800be80 <CDC_Init_FS+0x28>)
 800be60:	2200      	movs	r2, #0
 800be62:	0018      	movs	r0, r3
 800be64:	f7fe fd21 	bl	800a8aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800be68:	4a06      	ldr	r2, [pc, #24]	; (800be84 <CDC_Init_FS+0x2c>)
 800be6a:	4b05      	ldr	r3, [pc, #20]	; (800be80 <CDC_Init_FS+0x28>)
 800be6c:	0011      	movs	r1, r2
 800be6e:	0018      	movs	r0, r3
 800be70:	f7fe fd37 	bl	800a8e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800be74:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800be76:	0018      	movs	r0, r3
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	20000d50 	.word	0x20000d50
 800be80:	200006a4 	.word	0x200006a4
 800be84:	20000968 	.word	0x20000968

0800be88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800be8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800be8e:	0018      	movs	r0, r3
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6039      	str	r1, [r7, #0]
 800be9c:	0011      	movs	r1, r2
 800be9e:	1dfb      	adds	r3, r7, #7
 800bea0:	1c02      	adds	r2, r0, #0
 800bea2:	701a      	strb	r2, [r3, #0]
 800bea4:	1d3b      	adds	r3, r7, #4
 800bea6:	1c0a      	adds	r2, r1, #0
 800bea8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800beaa:	1dfb      	adds	r3, r7, #7
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	2b23      	cmp	r3, #35	; 0x23
 800beb0:	d804      	bhi.n	800bebc <CDC_Control_FS+0x28>
 800beb2:	009a      	lsls	r2, r3, #2
 800beb4:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <CDC_Control_FS+0x34>)
 800beb6:	18d3      	adds	r3, r2, r3
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bebc:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800bebe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bec0:	0018      	movs	r0, r3
 800bec2:	46bd      	mov	sp, r7
 800bec4:	b002      	add	sp, #8
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	0800d358 	.word	0x0800d358

0800becc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800becc:	b590      	push	{r4, r7, lr}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800bed6:	4b18      	ldr	r3, [pc, #96]	; (800bf38 <CDC_Receive_FS+0x6c>)
 800bed8:	7a1a      	ldrb	r2, [r3, #8]
 800beda:	2101      	movs	r1, #1
 800bedc:	430a      	orrs	r2, r1
 800bede:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800bee0:	230f      	movs	r3, #15
 800bee2:	18fb      	adds	r3, r7, r3
 800bee4:	2200      	movs	r2, #0
 800bee6:	701a      	strb	r2, [r3, #0]
 800bee8:	e00f      	b.n	800bf0a <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800beea:	4b14      	ldr	r3, [pc, #80]	; (800bf3c <CDC_Receive_FS+0x70>)
 800beec:	6818      	ldr	r0, [r3, #0]
 800beee:	240f      	movs	r4, #15
 800bef0:	193b      	adds	r3, r7, r4
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	18d3      	adds	r3, r2, r3
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	0019      	movs	r1, r3
 800befc:	f7f5 fcea 	bl	80018d4 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800bf00:	193b      	adds	r3, r7, r4
 800bf02:	781a      	ldrb	r2, [r3, #0]
 800bf04:	193b      	adds	r3, r7, r4
 800bf06:	3201      	adds	r2, #1
 800bf08:	701a      	strb	r2, [r3, #0]
 800bf0a:	230f      	movs	r3, #15
 800bf0c:	18fb      	adds	r3, r7, r3
 800bf0e:	781a      	ldrb	r2, [r3, #0]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d3e8      	bcc.n	800beea <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	4b09      	ldr	r3, [pc, #36]	; (800bf40 <CDC_Receive_FS+0x74>)
 800bf1c:	0011      	movs	r1, r2
 800bf1e:	0018      	movs	r0, r3
 800bf20:	f7fe fcdf 	bl	800a8e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bf24:	4b06      	ldr	r3, [pc, #24]	; (800bf40 <CDC_Receive_FS+0x74>)
 800bf26:	0018      	movs	r0, r3
 800bf28:	f7fe fd26 	bl	800a978 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bf2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bf2e:	0018      	movs	r0, r3
 800bf30:	46bd      	mov	sp, r7
 800bf32:	b005      	add	sp, #20
 800bf34:	bd90      	pop	{r4, r7, pc}
 800bf36:	46c0      	nop			; (mov r8, r8)
 800bf38:	20000630 	.word	0x20000630
 800bf3c:	20001138 	.word	0x20001138
 800bf40:	200006a4 	.word	0x200006a4

0800bf44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bf44:	b5b0      	push	{r4, r5, r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	000a      	movs	r2, r1
 800bf4e:	1cbb      	adds	r3, r7, #2
 800bf50:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800bf52:	230f      	movs	r3, #15
 800bf54:	18fb      	adds	r3, r7, r3
 800bf56:	2200      	movs	r2, #0
 800bf58:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bf5a:	4a11      	ldr	r2, [pc, #68]	; (800bfa0 <CDC_Transmit_FS+0x5c>)
 800bf5c:	23ae      	movs	r3, #174	; 0xae
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	58d3      	ldr	r3, [r2, r3]
 800bf62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	2385      	movs	r3, #133	; 0x85
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	58d3      	ldr	r3, [r2, r3]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d001      	beq.n	800bf74 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e010      	b.n	800bf96 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bf74:	1cbb      	adds	r3, r7, #2
 800bf76:	881a      	ldrh	r2, [r3, #0]
 800bf78:	6879      	ldr	r1, [r7, #4]
 800bf7a:	4b09      	ldr	r3, [pc, #36]	; (800bfa0 <CDC_Transmit_FS+0x5c>)
 800bf7c:	0018      	movs	r0, r3
 800bf7e:	f7fe fc94 	bl	800a8aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bf82:	250f      	movs	r5, #15
 800bf84:	197c      	adds	r4, r7, r5
 800bf86:	4b06      	ldr	r3, [pc, #24]	; (800bfa0 <CDC_Transmit_FS+0x5c>)
 800bf88:	0018      	movs	r0, r3
 800bf8a:	f7fe fcbe 	bl	800a90a <USBD_CDC_TransmitPacket>
 800bf8e:	0003      	movs	r3, r0
 800bf90:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800bf92:	197b      	adds	r3, r7, r5
 800bf94:	781b      	ldrb	r3, [r3, #0]
}
 800bf96:	0018      	movs	r0, r3
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	b004      	add	sp, #16
 800bf9c:	bdb0      	pop	{r4, r5, r7, pc}
 800bf9e:	46c0      	nop			; (mov r8, r8)
 800bfa0:	200006a4 	.word	0x200006a4

0800bfa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	0002      	movs	r2, r0
 800bfac:	6039      	str	r1, [r7, #0]
 800bfae:	1dfb      	adds	r3, r7, #7
 800bfb0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2212      	movs	r2, #18
 800bfb6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bfb8:	4b02      	ldr	r3, [pc, #8]	; (800bfc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bfba:	0018      	movs	r0, r3
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	b002      	add	sp, #8
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	46c0      	nop			; (mov r8, r8)
 800bfc4:	20000148 	.word	0x20000148

0800bfc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	0002      	movs	r2, r0
 800bfd0:	6039      	str	r1, [r7, #0]
 800bfd2:	1dfb      	adds	r3, r7, #7
 800bfd4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2204      	movs	r2, #4
 800bfda:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bfdc:	4b02      	ldr	r3, [pc, #8]	; (800bfe8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bfde:	0018      	movs	r0, r3
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	b002      	add	sp, #8
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	46c0      	nop			; (mov r8, r8)
 800bfe8:	2000015c 	.word	0x2000015c

0800bfec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	0002      	movs	r2, r0
 800bff4:	6039      	str	r1, [r7, #0]
 800bff6:	1dfb      	adds	r3, r7, #7
 800bff8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800bffa:	1dfb      	adds	r3, r7, #7
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d106      	bne.n	800c010 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	4908      	ldr	r1, [pc, #32]	; (800c028 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c006:	4b09      	ldr	r3, [pc, #36]	; (800c02c <USBD_FS_ProductStrDescriptor+0x40>)
 800c008:	0018      	movs	r0, r3
 800c00a:	f7ff fdf4 	bl	800bbf6 <USBD_GetString>
 800c00e:	e005      	b.n	800c01c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	4905      	ldr	r1, [pc, #20]	; (800c028 <USBD_FS_ProductStrDescriptor+0x3c>)
 800c014:	4b05      	ldr	r3, [pc, #20]	; (800c02c <USBD_FS_ProductStrDescriptor+0x40>)
 800c016:	0018      	movs	r0, r3
 800c018:	f7ff fded 	bl	800bbf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c01c:	4b02      	ldr	r3, [pc, #8]	; (800c028 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800c01e:	0018      	movs	r0, r3
 800c020:	46bd      	mov	sp, r7
 800c022:	b002      	add	sp, #8
 800c024:	bd80      	pop	{r7, pc}
 800c026:	46c0      	nop			; (mov r8, r8)
 800c028:	2000113c 	.word	0x2000113c
 800c02c:	0800d208 	.word	0x0800d208

0800c030 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	0002      	movs	r2, r0
 800c038:	6039      	str	r1, [r7, #0]
 800c03a:	1dfb      	adds	r3, r7, #7
 800c03c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	4904      	ldr	r1, [pc, #16]	; (800c054 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c042:	4b05      	ldr	r3, [pc, #20]	; (800c058 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800c044:	0018      	movs	r0, r3
 800c046:	f7ff fdd6 	bl	800bbf6 <USBD_GetString>
  return USBD_StrDesc;
 800c04a:	4b02      	ldr	r3, [pc, #8]	; (800c054 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800c04c:	0018      	movs	r0, r3
 800c04e:	46bd      	mov	sp, r7
 800c050:	b002      	add	sp, #8
 800c052:	bd80      	pop	{r7, pc}
 800c054:	2000113c 	.word	0x2000113c
 800c058:	0800d220 	.word	0x0800d220

0800c05c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	0002      	movs	r2, r0
 800c064:	6039      	str	r1, [r7, #0]
 800c066:	1dfb      	adds	r3, r7, #7
 800c068:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	221a      	movs	r2, #26
 800c06e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c070:	f000 f84c 	bl	800c10c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c074:	4b02      	ldr	r3, [pc, #8]	; (800c080 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800c076:	0018      	movs	r0, r3
 800c078:	46bd      	mov	sp, r7
 800c07a:	b002      	add	sp, #8
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	46c0      	nop			; (mov r8, r8)
 800c080:	20000160 	.word	0x20000160

0800c084 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	0002      	movs	r2, r0
 800c08c:	6039      	str	r1, [r7, #0]
 800c08e:	1dfb      	adds	r3, r7, #7
 800c090:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800c092:	1dfb      	adds	r3, r7, #7
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d106      	bne.n	800c0a8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	4908      	ldr	r1, [pc, #32]	; (800c0c0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c09e:	4b09      	ldr	r3, [pc, #36]	; (800c0c4 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c0a0:	0018      	movs	r0, r3
 800c0a2:	f7ff fda8 	bl	800bbf6 <USBD_GetString>
 800c0a6:	e005      	b.n	800c0b4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c0a8:	683a      	ldr	r2, [r7, #0]
 800c0aa:	4905      	ldr	r1, [pc, #20]	; (800c0c0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c0ac:	4b05      	ldr	r3, [pc, #20]	; (800c0c4 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c0ae:	0018      	movs	r0, r3
 800c0b0:	f7ff fda1 	bl	800bbf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0b4:	4b02      	ldr	r3, [pc, #8]	; (800c0c0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800c0b6:	0018      	movs	r0, r3
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	b002      	add	sp, #8
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	46c0      	nop			; (mov r8, r8)
 800c0c0:	2000113c 	.word	0x2000113c
 800c0c4:	0800d234 	.word	0x0800d234

0800c0c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	0002      	movs	r2, r0
 800c0d0:	6039      	str	r1, [r7, #0]
 800c0d2:	1dfb      	adds	r3, r7, #7
 800c0d4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c0d6:	1dfb      	adds	r3, r7, #7
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c0de:	683a      	ldr	r2, [r7, #0]
 800c0e0:	4908      	ldr	r1, [pc, #32]	; (800c104 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c0e2:	4b09      	ldr	r3, [pc, #36]	; (800c108 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c0e4:	0018      	movs	r0, r3
 800c0e6:	f7ff fd86 	bl	800bbf6 <USBD_GetString>
 800c0ea:	e005      	b.n	800c0f8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	4905      	ldr	r1, [pc, #20]	; (800c104 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c0f0:	4b05      	ldr	r3, [pc, #20]	; (800c108 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	f7ff fd7f 	bl	800bbf6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0f8:	4b02      	ldr	r3, [pc, #8]	; (800c104 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800c0fa:	0018      	movs	r0, r3
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	b002      	add	sp, #8
 800c100:	bd80      	pop	{r7, pc}
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	2000113c 	.word	0x2000113c
 800c108:	0800d240 	.word	0x0800d240

0800c10c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c112:	4b10      	ldr	r3, [pc, #64]	; (800c154 <Get_SerialNum+0x48>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c118:	4b0f      	ldr	r3, [pc, #60]	; (800c158 <Get_SerialNum+0x4c>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c11e:	4b0f      	ldr	r3, [pc, #60]	; (800c15c <Get_SerialNum+0x50>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	18d3      	adds	r3, r2, r3
 800c12a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00b      	beq.n	800c14a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c132:	490b      	ldr	r1, [pc, #44]	; (800c160 <Get_SerialNum+0x54>)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2208      	movs	r2, #8
 800c138:	0018      	movs	r0, r3
 800c13a:	f000 f815 	bl	800c168 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c13e:	4909      	ldr	r1, [pc, #36]	; (800c164 <Get_SerialNum+0x58>)
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2204      	movs	r2, #4
 800c144:	0018      	movs	r0, r3
 800c146:	f000 f80f 	bl	800c168 <IntToUnicode>
  }
}
 800c14a:	46c0      	nop			; (mov r8, r8)
 800c14c:	46bd      	mov	sp, r7
 800c14e:	b004      	add	sp, #16
 800c150:	bd80      	pop	{r7, pc}
 800c152:	46c0      	nop			; (mov r8, r8)
 800c154:	1ffff7ac 	.word	0x1ffff7ac
 800c158:	1ffff7b0 	.word	0x1ffff7b0
 800c15c:	1ffff7b4 	.word	0x1ffff7b4
 800c160:	20000162 	.word	0x20000162
 800c164:	20000172 	.word	0x20000172

0800c168 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	1dfb      	adds	r3, r7, #7
 800c174:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800c176:	2117      	movs	r1, #23
 800c178:	187b      	adds	r3, r7, r1
 800c17a:	2200      	movs	r2, #0
 800c17c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800c17e:	187b      	adds	r3, r7, r1
 800c180:	2200      	movs	r2, #0
 800c182:	701a      	strb	r2, [r3, #0]
 800c184:	e02f      	b.n	800c1e6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	0f1b      	lsrs	r3, r3, #28
 800c18a:	2b09      	cmp	r3, #9
 800c18c:	d80d      	bhi.n	800c1aa <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	0f1b      	lsrs	r3, r3, #28
 800c192:	b2da      	uxtb	r2, r3
 800c194:	2317      	movs	r3, #23
 800c196:	18fb      	adds	r3, r7, r3
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	005b      	lsls	r3, r3, #1
 800c19c:	0019      	movs	r1, r3
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	185b      	adds	r3, r3, r1
 800c1a2:	3230      	adds	r2, #48	; 0x30
 800c1a4:	b2d2      	uxtb	r2, r2
 800c1a6:	701a      	strb	r2, [r3, #0]
 800c1a8:	e00c      	b.n	800c1c4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	0f1b      	lsrs	r3, r3, #28
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	2317      	movs	r3, #23
 800c1b2:	18fb      	adds	r3, r7, r3
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	005b      	lsls	r3, r3, #1
 800c1b8:	0019      	movs	r1, r3
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	185b      	adds	r3, r3, r1
 800c1be:	3237      	adds	r2, #55	; 0x37
 800c1c0:	b2d2      	uxtb	r2, r2
 800c1c2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	011b      	lsls	r3, r3, #4
 800c1c8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c1ca:	2117      	movs	r1, #23
 800c1cc:	187b      	adds	r3, r7, r1
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	005b      	lsls	r3, r3, #1
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	68ba      	ldr	r2, [r7, #8]
 800c1d6:	18d3      	adds	r3, r2, r3
 800c1d8:	2200      	movs	r2, #0
 800c1da:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c1dc:	187b      	adds	r3, r7, r1
 800c1de:	781a      	ldrb	r2, [r3, #0]
 800c1e0:	187b      	adds	r3, r7, r1
 800c1e2:	3201      	adds	r2, #1
 800c1e4:	701a      	strb	r2, [r3, #0]
 800c1e6:	2317      	movs	r3, #23
 800c1e8:	18fa      	adds	r2, r7, r3
 800c1ea:	1dfb      	adds	r3, r7, #7
 800c1ec:	7812      	ldrb	r2, [r2, #0]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d3c8      	bcc.n	800c186 <IntToUnicode+0x1e>
  }
}
 800c1f4:	46c0      	nop			; (mov r8, r8)
 800c1f6:	46c0      	nop			; (mov r8, r8)
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	b006      	add	sp, #24
 800c1fc:	bd80      	pop	{r7, pc}
	...

0800c200 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a0e      	ldr	r2, [pc, #56]	; (800c248 <HAL_PCD_MspInit+0x48>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d115      	bne.n	800c23e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c212:	4b0e      	ldr	r3, [pc, #56]	; (800c24c <HAL_PCD_MspInit+0x4c>)
 800c214:	69da      	ldr	r2, [r3, #28]
 800c216:	4b0d      	ldr	r3, [pc, #52]	; (800c24c <HAL_PCD_MspInit+0x4c>)
 800c218:	2180      	movs	r1, #128	; 0x80
 800c21a:	0409      	lsls	r1, r1, #16
 800c21c:	430a      	orrs	r2, r1
 800c21e:	61da      	str	r2, [r3, #28]
 800c220:	4b0a      	ldr	r3, [pc, #40]	; (800c24c <HAL_PCD_MspInit+0x4c>)
 800c222:	69da      	ldr	r2, [r3, #28]
 800c224:	2380      	movs	r3, #128	; 0x80
 800c226:	041b      	lsls	r3, r3, #16
 800c228:	4013      	ands	r3, r2
 800c22a:	60fb      	str	r3, [r7, #12]
 800c22c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c22e:	2200      	movs	r2, #0
 800c230:	2100      	movs	r1, #0
 800c232:	201f      	movs	r0, #31
 800c234:	f7f6 ffc2 	bl	80031bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c238:	201f      	movs	r0, #31
 800c23a:	f7f6 ffd4 	bl	80031e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c23e:	46c0      	nop			; (mov r8, r8)
 800c240:	46bd      	mov	sp, r7
 800c242:	b004      	add	sp, #16
 800c244:	bd80      	pop	{r7, pc}
 800c246:	46c0      	nop			; (mov r8, r8)
 800c248:	40005c00 	.word	0x40005c00
 800c24c:	40021000 	.word	0x40021000

0800c250 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	23bc      	movs	r3, #188	; 0xbc
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	58d2      	ldr	r2, [r2, r3]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	21ac      	movs	r1, #172	; 0xac
 800c264:	0089      	lsls	r1, r1, #2
 800c266:	468c      	mov	ip, r1
 800c268:	4463      	add	r3, ip
 800c26a:	0019      	movs	r1, r3
 800c26c:	0010      	movs	r0, r2
 800c26e:	f7fe fc55 	bl	800ab1c <USBD_LL_SetupStage>
}
 800c272:	46c0      	nop			; (mov r8, r8)
 800c274:	46bd      	mov	sp, r7
 800c276:	b002      	add	sp, #8
 800c278:	bd80      	pop	{r7, pc}

0800c27a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c27a:	b590      	push	{r4, r7, lr}
 800c27c:	b083      	sub	sp, #12
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	000a      	movs	r2, r1
 800c284:	1cfb      	adds	r3, r7, #3
 800c286:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	23bc      	movs	r3, #188	; 0xbc
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	58d4      	ldr	r4, [r2, r3]
 800c290:	1cfb      	adds	r3, r7, #3
 800c292:	781a      	ldrb	r2, [r3, #0]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	23be      	movs	r3, #190	; 0xbe
 800c298:	0059      	lsls	r1, r3, #1
 800c29a:	0013      	movs	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	189b      	adds	r3, r3, r2
 800c2a0:	00db      	lsls	r3, r3, #3
 800c2a2:	18c3      	adds	r3, r0, r3
 800c2a4:	185b      	adds	r3, r3, r1
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	1cfb      	adds	r3, r7, #3
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	0019      	movs	r1, r3
 800c2ae:	0020      	movs	r0, r4
 800c2b0:	f7fe fc92 	bl	800abd8 <USBD_LL_DataOutStage>
}
 800c2b4:	46c0      	nop			; (mov r8, r8)
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	b003      	add	sp, #12
 800c2ba:	bd90      	pop	{r4, r7, pc}

0800c2bc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	000a      	movs	r2, r1
 800c2c6:	1cfb      	adds	r3, r7, #3
 800c2c8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	23bc      	movs	r3, #188	; 0xbc
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	58d0      	ldr	r0, [r2, r3]
 800c2d2:	1cfb      	adds	r3, r7, #3
 800c2d4:	781a      	ldrb	r2, [r3, #0]
 800c2d6:	6879      	ldr	r1, [r7, #4]
 800c2d8:	0013      	movs	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	189b      	adds	r3, r3, r2
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	18cb      	adds	r3, r1, r3
 800c2e2:	333c      	adds	r3, #60	; 0x3c
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	1cfb      	adds	r3, r7, #3
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	0019      	movs	r1, r3
 800c2ec:	f7fe fcf6 	bl	800acdc <USBD_LL_DataInStage>
}
 800c2f0:	46c0      	nop			; (mov r8, r8)
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	b002      	add	sp, #8
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	23bc      	movs	r3, #188	; 0xbc
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	58d3      	ldr	r3, [r2, r3]
 800c308:	0018      	movs	r0, r3
 800c30a:	f7fe fe2d 	bl	800af68 <USBD_LL_SOF>
}
 800c30e:	46c0      	nop			; (mov r8, r8)
 800c310:	46bd      	mov	sp, r7
 800c312:	b002      	add	sp, #8
 800c314:	bd80      	pop	{r7, pc}

0800c316 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c31e:	230f      	movs	r3, #15
 800c320:	18fb      	adds	r3, r7, r3
 800c322:	2201      	movs	r2, #1
 800c324:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d001      	beq.n	800c332 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c32e:	f7f5 fa97 	bl	8001860 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	23bc      	movs	r3, #188	; 0xbc
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	58d2      	ldr	r2, [r2, r3]
 800c33a:	230f      	movs	r3, #15
 800c33c:	18fb      	adds	r3, r7, r3
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	0019      	movs	r1, r3
 800c342:	0010      	movs	r0, r2
 800c344:	f7fe fdcf 	bl	800aee6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	23bc      	movs	r3, #188	; 0xbc
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	58d3      	ldr	r3, [r2, r3]
 800c350:	0018      	movs	r0, r3
 800c352:	f7fe fd80 	bl	800ae56 <USBD_LL_Reset>
}
 800c356:	46c0      	nop			; (mov r8, r8)
 800c358:	46bd      	mov	sp, r7
 800c35a:	b004      	add	sp, #16
 800c35c:	bd80      	pop	{r7, pc}
	...

0800c360 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	23bc      	movs	r3, #188	; 0xbc
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	58d3      	ldr	r3, [r2, r3]
 800c370:	0018      	movs	r0, r3
 800c372:	f7fe fdc9 	bl	800af08 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d005      	beq.n	800c38a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <HAL_PCD_SuspendCallback+0x34>)
 800c380:	691a      	ldr	r2, [r3, #16]
 800c382:	4b04      	ldr	r3, [pc, #16]	; (800c394 <HAL_PCD_SuspendCallback+0x34>)
 800c384:	2106      	movs	r1, #6
 800c386:	430a      	orrs	r2, r1
 800c388:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c38a:	46c0      	nop			; (mov r8, r8)
 800c38c:	46bd      	mov	sp, r7
 800c38e:	b002      	add	sp, #8
 800c390:	bd80      	pop	{r7, pc}
 800c392:	46c0      	nop			; (mov r8, r8)
 800c394:	e000ed00 	.word	0xe000ed00

0800c398 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	699b      	ldr	r3, [r3, #24]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d007      	beq.n	800c3b8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3a8:	4b09      	ldr	r3, [pc, #36]	; (800c3d0 <HAL_PCD_ResumeCallback+0x38>)
 800c3aa:	691a      	ldr	r2, [r3, #16]
 800c3ac:	4b08      	ldr	r3, [pc, #32]	; (800c3d0 <HAL_PCD_ResumeCallback+0x38>)
 800c3ae:	2106      	movs	r1, #6
 800c3b0:	438a      	bics	r2, r1
 800c3b2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800c3b4:	f000 fa44 	bl	800c840 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	23bc      	movs	r3, #188	; 0xbc
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	58d3      	ldr	r3, [r2, r3]
 800c3c0:	0018      	movs	r0, r3
 800c3c2:	f7fe fdb9 	bl	800af38 <USBD_LL_Resume>
}
 800c3c6:	46c0      	nop			; (mov r8, r8)
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	b002      	add	sp, #8
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	46c0      	nop			; (mov r8, r8)
 800c3d0:	e000ed00 	.word	0xe000ed00

0800c3d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c3dc:	4a2d      	ldr	r2, [pc, #180]	; (800c494 <USBD_LL_Init+0xc0>)
 800c3de:	23bc      	movs	r3, #188	; 0xbc
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	6879      	ldr	r1, [r7, #4]
 800c3e4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	23b0      	movs	r3, #176	; 0xb0
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	4929      	ldr	r1, [pc, #164]	; (800c494 <USBD_LL_Init+0xc0>)
 800c3ee:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800c3f0:	4b28      	ldr	r3, [pc, #160]	; (800c494 <USBD_LL_Init+0xc0>)
 800c3f2:	4a29      	ldr	r2, [pc, #164]	; (800c498 <USBD_LL_Init+0xc4>)
 800c3f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c3f6:	4b27      	ldr	r3, [pc, #156]	; (800c494 <USBD_LL_Init+0xc0>)
 800c3f8:	2208      	movs	r2, #8
 800c3fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c3fc:	4b25      	ldr	r3, [pc, #148]	; (800c494 <USBD_LL_Init+0xc0>)
 800c3fe:	2202      	movs	r2, #2
 800c400:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c402:	4b24      	ldr	r3, [pc, #144]	; (800c494 <USBD_LL_Init+0xc0>)
 800c404:	2202      	movs	r2, #2
 800c406:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c408:	4b22      	ldr	r3, [pc, #136]	; (800c494 <USBD_LL_Init+0xc0>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c40e:	4b21      	ldr	r3, [pc, #132]	; (800c494 <USBD_LL_Init+0xc0>)
 800c410:	2200      	movs	r2, #0
 800c412:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c414:	4b1f      	ldr	r3, [pc, #124]	; (800c494 <USBD_LL_Init+0xc0>)
 800c416:	2200      	movs	r2, #0
 800c418:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c41a:	4b1e      	ldr	r3, [pc, #120]	; (800c494 <USBD_LL_Init+0xc0>)
 800c41c:	0018      	movs	r0, r3
 800c41e:	f7f7 f967 	bl	80036f0 <HAL_PCD_Init>
 800c422:	1e03      	subs	r3, r0, #0
 800c424:	d001      	beq.n	800c42a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800c426:	f7f5 fa1b 	bl	8001860 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	23b0      	movs	r3, #176	; 0xb0
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	58d0      	ldr	r0, [r2, r3]
 800c432:	2318      	movs	r3, #24
 800c434:	2200      	movs	r2, #0
 800c436:	2100      	movs	r1, #0
 800c438:	f7f8 ff48 	bl	80052cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	23b0      	movs	r3, #176	; 0xb0
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	58d0      	ldr	r0, [r2, r3]
 800c444:	2358      	movs	r3, #88	; 0x58
 800c446:	2200      	movs	r2, #0
 800c448:	2180      	movs	r1, #128	; 0x80
 800c44a:	f7f8 ff3f 	bl	80052cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	23b0      	movs	r3, #176	; 0xb0
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	58d0      	ldr	r0, [r2, r3]
 800c456:	23c0      	movs	r3, #192	; 0xc0
 800c458:	2200      	movs	r2, #0
 800c45a:	2181      	movs	r1, #129	; 0x81
 800c45c:	f7f8 ff36 	bl	80052cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	23b0      	movs	r3, #176	; 0xb0
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	58d0      	ldr	r0, [r2, r3]
 800c468:	2388      	movs	r3, #136	; 0x88
 800c46a:	005b      	lsls	r3, r3, #1
 800c46c:	2200      	movs	r2, #0
 800c46e:	2101      	movs	r1, #1
 800c470:	f7f8 ff2c 	bl	80052cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	23b0      	movs	r3, #176	; 0xb0
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	58d0      	ldr	r0, [r2, r3]
 800c47c:	2380      	movs	r3, #128	; 0x80
 800c47e:	005b      	lsls	r3, r3, #1
 800c480:	2200      	movs	r2, #0
 800c482:	2182      	movs	r1, #130	; 0x82
 800c484:	f7f8 ff22 	bl	80052cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	0018      	movs	r0, r3
 800c48c:	46bd      	mov	sp, r7
 800c48e:	b002      	add	sp, #8
 800c490:	bd80      	pop	{r7, pc}
 800c492:	46c0      	nop			; (mov r8, r8)
 800c494:	2000133c 	.word	0x2000133c
 800c498:	40005c00 	.word	0x40005c00

0800c49c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4a4:	210f      	movs	r1, #15
 800c4a6:	187b      	adds	r3, r7, r1
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ac:	260e      	movs	r6, #14
 800c4ae:	19bb      	adds	r3, r7, r6
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	23b0      	movs	r3, #176	; 0xb0
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	58d3      	ldr	r3, [r2, r3]
 800c4bc:	000d      	movs	r5, r1
 800c4be:	187c      	adds	r4, r7, r1
 800c4c0:	0018      	movs	r0, r3
 800c4c2:	f7f7 fa25 	bl	8003910 <HAL_PCD_Start>
 800c4c6:	0003      	movs	r3, r0
 800c4c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4ca:	19bc      	adds	r4, r7, r6
 800c4cc:	197b      	adds	r3, r7, r5
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	0018      	movs	r0, r3
 800c4d2:	f000 f9bc 	bl	800c84e <USBD_Get_USB_Status>
 800c4d6:	0003      	movs	r3, r0
 800c4d8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c4da:	19bb      	adds	r3, r7, r6
 800c4dc:	781b      	ldrb	r3, [r3, #0]
}
 800c4de:	0018      	movs	r0, r3
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	b005      	add	sp, #20
 800c4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c4e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e8:	b085      	sub	sp, #20
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
 800c4ee:	000c      	movs	r4, r1
 800c4f0:	0010      	movs	r0, r2
 800c4f2:	0019      	movs	r1, r3
 800c4f4:	1cfb      	adds	r3, r7, #3
 800c4f6:	1c22      	adds	r2, r4, #0
 800c4f8:	701a      	strb	r2, [r3, #0]
 800c4fa:	1cbb      	adds	r3, r7, #2
 800c4fc:	1c02      	adds	r2, r0, #0
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	003b      	movs	r3, r7
 800c502:	1c0a      	adds	r2, r1, #0
 800c504:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c506:	260f      	movs	r6, #15
 800c508:	19bb      	adds	r3, r7, r6
 800c50a:	2200      	movs	r2, #0
 800c50c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c50e:	250e      	movs	r5, #14
 800c510:	197b      	adds	r3, r7, r5
 800c512:	2200      	movs	r2, #0
 800c514:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	23b0      	movs	r3, #176	; 0xb0
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	58d0      	ldr	r0, [r2, r3]
 800c51e:	19bc      	adds	r4, r7, r6
 800c520:	1cbb      	adds	r3, r7, #2
 800c522:	781d      	ldrb	r5, [r3, #0]
 800c524:	003b      	movs	r3, r7
 800c526:	881a      	ldrh	r2, [r3, #0]
 800c528:	1cfb      	adds	r3, r7, #3
 800c52a:	7819      	ldrb	r1, [r3, #0]
 800c52c:	002b      	movs	r3, r5
 800c52e:	f7f7 fbbc 	bl	8003caa <HAL_PCD_EP_Open>
 800c532:	0003      	movs	r3, r0
 800c534:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c536:	250e      	movs	r5, #14
 800c538:	197c      	adds	r4, r7, r5
 800c53a:	19bb      	adds	r3, r7, r6
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	0018      	movs	r0, r3
 800c540:	f000 f985 	bl	800c84e <USBD_Get_USB_Status>
 800c544:	0003      	movs	r3, r0
 800c546:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c548:	197b      	adds	r3, r7, r5
 800c54a:	781b      	ldrb	r3, [r3, #0]
}
 800c54c:	0018      	movs	r0, r3
 800c54e:	46bd      	mov	sp, r7
 800c550:	b005      	add	sp, #20
 800c552:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c554 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	000a      	movs	r2, r1
 800c55e:	1cfb      	adds	r3, r7, #3
 800c560:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c562:	210f      	movs	r1, #15
 800c564:	187b      	adds	r3, r7, r1
 800c566:	2200      	movs	r2, #0
 800c568:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c56a:	260e      	movs	r6, #14
 800c56c:	19bb      	adds	r3, r7, r6
 800c56e:	2200      	movs	r2, #0
 800c570:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	23b0      	movs	r3, #176	; 0xb0
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	58d2      	ldr	r2, [r2, r3]
 800c57a:	000d      	movs	r5, r1
 800c57c:	187c      	adds	r4, r7, r1
 800c57e:	1cfb      	adds	r3, r7, #3
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	0019      	movs	r1, r3
 800c584:	0010      	movs	r0, r2
 800c586:	f7f7 fc08 	bl	8003d9a <HAL_PCD_EP_Close>
 800c58a:	0003      	movs	r3, r0
 800c58c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c58e:	19bc      	adds	r4, r7, r6
 800c590:	197b      	adds	r3, r7, r5
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	0018      	movs	r0, r3
 800c596:	f000 f95a 	bl	800c84e <USBD_Get_USB_Status>
 800c59a:	0003      	movs	r3, r0
 800c59c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c59e:	19bb      	adds	r3, r7, r6
 800c5a0:	781b      	ldrb	r3, [r3, #0]
}
 800c5a2:	0018      	movs	r0, r3
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	b005      	add	sp, #20
 800c5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5aa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ac:	b085      	sub	sp, #20
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	000a      	movs	r2, r1
 800c5b4:	1cfb      	adds	r3, r7, #3
 800c5b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5b8:	210f      	movs	r1, #15
 800c5ba:	187b      	adds	r3, r7, r1
 800c5bc:	2200      	movs	r2, #0
 800c5be:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5c0:	260e      	movs	r6, #14
 800c5c2:	19bb      	adds	r3, r7, r6
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	23b0      	movs	r3, #176	; 0xb0
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	58d2      	ldr	r2, [r2, r3]
 800c5d0:	000d      	movs	r5, r1
 800c5d2:	187c      	adds	r4, r7, r1
 800c5d4:	1cfb      	adds	r3, r7, #3
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	0019      	movs	r1, r3
 800c5da:	0010      	movs	r0, r2
 800c5dc:	f7f7 fcd4 	bl	8003f88 <HAL_PCD_EP_SetStall>
 800c5e0:	0003      	movs	r3, r0
 800c5e2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e4:	19bc      	adds	r4, r7, r6
 800c5e6:	197b      	adds	r3, r7, r5
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	0018      	movs	r0, r3
 800c5ec:	f000 f92f 	bl	800c84e <USBD_Get_USB_Status>
 800c5f0:	0003      	movs	r3, r0
 800c5f2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c5f4:	19bb      	adds	r3, r7, r6
 800c5f6:	781b      	ldrb	r3, [r3, #0]
}
 800c5f8:	0018      	movs	r0, r3
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	b005      	add	sp, #20
 800c5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c600 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	000a      	movs	r2, r1
 800c60a:	1cfb      	adds	r3, r7, #3
 800c60c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c60e:	210f      	movs	r1, #15
 800c610:	187b      	adds	r3, r7, r1
 800c612:	2200      	movs	r2, #0
 800c614:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c616:	260e      	movs	r6, #14
 800c618:	19bb      	adds	r3, r7, r6
 800c61a:	2200      	movs	r2, #0
 800c61c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	23b0      	movs	r3, #176	; 0xb0
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	58d2      	ldr	r2, [r2, r3]
 800c626:	000d      	movs	r5, r1
 800c628:	187c      	adds	r4, r7, r1
 800c62a:	1cfb      	adds	r3, r7, #3
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	0019      	movs	r1, r3
 800c630:	0010      	movs	r0, r2
 800c632:	f7f7 fd05 	bl	8004040 <HAL_PCD_EP_ClrStall>
 800c636:	0003      	movs	r3, r0
 800c638:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c63a:	19bc      	adds	r4, r7, r6
 800c63c:	197b      	adds	r3, r7, r5
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	0018      	movs	r0, r3
 800c642:	f000 f904 	bl	800c84e <USBD_Get_USB_Status>
 800c646:	0003      	movs	r3, r0
 800c648:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c64a:	19bb      	adds	r3, r7, r6
 800c64c:	781b      	ldrb	r3, [r3, #0]
}
 800c64e:	0018      	movs	r0, r3
 800c650:	46bd      	mov	sp, r7
 800c652:	b005      	add	sp, #20
 800c654:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c656 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b084      	sub	sp, #16
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	000a      	movs	r2, r1
 800c660:	1cfb      	adds	r3, r7, #3
 800c662:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	23b0      	movs	r3, #176	; 0xb0
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	58d3      	ldr	r3, [r2, r3]
 800c66c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c66e:	1cfb      	adds	r3, r7, #3
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	b25b      	sxtb	r3, r3
 800c674:	2b00      	cmp	r3, #0
 800c676:	da0d      	bge.n	800c694 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c678:	1cfb      	adds	r3, r7, #3
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	227f      	movs	r2, #127	; 0x7f
 800c67e:	4013      	ands	r3, r2
 800c680:	68f9      	ldr	r1, [r7, #12]
 800c682:	1c5a      	adds	r2, r3, #1
 800c684:	0013      	movs	r3, r2
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	189b      	adds	r3, r3, r2
 800c68a:	00db      	lsls	r3, r3, #3
 800c68c:	18cb      	adds	r3, r1, r3
 800c68e:	3302      	adds	r3, #2
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	e00d      	b.n	800c6b0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c694:	1cfb      	adds	r3, r7, #3
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	227f      	movs	r2, #127	; 0x7f
 800c69a:	401a      	ands	r2, r3
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	23b5      	movs	r3, #181	; 0xb5
 800c6a0:	0059      	lsls	r1, r3, #1
 800c6a2:	0013      	movs	r3, r2
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	189b      	adds	r3, r3, r2
 800c6a8:	00db      	lsls	r3, r3, #3
 800c6aa:	18c3      	adds	r3, r0, r3
 800c6ac:	185b      	adds	r3, r3, r1
 800c6ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c6b0:	0018      	movs	r0, r3
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	b004      	add	sp, #16
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	000a      	movs	r2, r1
 800c6c2:	1cfb      	adds	r3, r7, #3
 800c6c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6c6:	210f      	movs	r1, #15
 800c6c8:	187b      	adds	r3, r7, r1
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ce:	260e      	movs	r6, #14
 800c6d0:	19bb      	adds	r3, r7, r6
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	23b0      	movs	r3, #176	; 0xb0
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	58d2      	ldr	r2, [r2, r3]
 800c6de:	000d      	movs	r5, r1
 800c6e0:	187c      	adds	r4, r7, r1
 800c6e2:	1cfb      	adds	r3, r7, #3
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	0019      	movs	r1, r3
 800c6e8:	0010      	movs	r0, r2
 800c6ea:	f7f7 fab3 	bl	8003c54 <HAL_PCD_SetAddress>
 800c6ee:	0003      	movs	r3, r0
 800c6f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6f2:	19bc      	adds	r4, r7, r6
 800c6f4:	197b      	adds	r3, r7, r5
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	0018      	movs	r0, r3
 800c6fa:	f000 f8a8 	bl	800c84e <USBD_Get_USB_Status>
 800c6fe:	0003      	movs	r3, r0
 800c700:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c702:	19bb      	adds	r3, r7, r6
 800c704:	781b      	ldrb	r3, [r3, #0]
}
 800c706:	0018      	movs	r0, r3
 800c708:	46bd      	mov	sp, r7
 800c70a:	b005      	add	sp, #20
 800c70c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c70e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c70e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c710:	b087      	sub	sp, #28
 800c712:	af00      	add	r7, sp, #0
 800c714:	60f8      	str	r0, [r7, #12]
 800c716:	0008      	movs	r0, r1
 800c718:	607a      	str	r2, [r7, #4]
 800c71a:	0019      	movs	r1, r3
 800c71c:	230b      	movs	r3, #11
 800c71e:	18fb      	adds	r3, r7, r3
 800c720:	1c02      	adds	r2, r0, #0
 800c722:	701a      	strb	r2, [r3, #0]
 800c724:	2408      	movs	r4, #8
 800c726:	193b      	adds	r3, r7, r4
 800c728:	1c0a      	adds	r2, r1, #0
 800c72a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c72c:	2117      	movs	r1, #23
 800c72e:	187b      	adds	r3, r7, r1
 800c730:	2200      	movs	r2, #0
 800c732:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c734:	2516      	movs	r5, #22
 800c736:	197b      	adds	r3, r7, r5
 800c738:	2200      	movs	r2, #0
 800c73a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	23b0      	movs	r3, #176	; 0xb0
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	58d0      	ldr	r0, [r2, r3]
 800c744:	193b      	adds	r3, r7, r4
 800c746:	881d      	ldrh	r5, [r3, #0]
 800c748:	000e      	movs	r6, r1
 800c74a:	187c      	adds	r4, r7, r1
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	230b      	movs	r3, #11
 800c750:	18fb      	adds	r3, r7, r3
 800c752:	7819      	ldrb	r1, [r3, #0]
 800c754:	002b      	movs	r3, r5
 800c756:	f7f7 fbce 	bl	8003ef6 <HAL_PCD_EP_Transmit>
 800c75a:	0003      	movs	r3, r0
 800c75c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c75e:	2516      	movs	r5, #22
 800c760:	197c      	adds	r4, r7, r5
 800c762:	19bb      	adds	r3, r7, r6
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	0018      	movs	r0, r3
 800c768:	f000 f871 	bl	800c84e <USBD_Get_USB_Status>
 800c76c:	0003      	movs	r3, r0
 800c76e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c770:	197b      	adds	r3, r7, r5
 800c772:	781b      	ldrb	r3, [r3, #0]
}
 800c774:	0018      	movs	r0, r3
 800c776:	46bd      	mov	sp, r7
 800c778:	b007      	add	sp, #28
 800c77a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c77c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c77e:	b087      	sub	sp, #28
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	0008      	movs	r0, r1
 800c786:	607a      	str	r2, [r7, #4]
 800c788:	0019      	movs	r1, r3
 800c78a:	230b      	movs	r3, #11
 800c78c:	18fb      	adds	r3, r7, r3
 800c78e:	1c02      	adds	r2, r0, #0
 800c790:	701a      	strb	r2, [r3, #0]
 800c792:	2408      	movs	r4, #8
 800c794:	193b      	adds	r3, r7, r4
 800c796:	1c0a      	adds	r2, r1, #0
 800c798:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c79a:	2117      	movs	r1, #23
 800c79c:	187b      	adds	r3, r7, r1
 800c79e:	2200      	movs	r2, #0
 800c7a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7a2:	2516      	movs	r5, #22
 800c7a4:	197b      	adds	r3, r7, r5
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	23b0      	movs	r3, #176	; 0xb0
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	58d0      	ldr	r0, [r2, r3]
 800c7b2:	193b      	adds	r3, r7, r4
 800c7b4:	881d      	ldrh	r5, [r3, #0]
 800c7b6:	000e      	movs	r6, r1
 800c7b8:	187c      	adds	r4, r7, r1
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	230b      	movs	r3, #11
 800c7be:	18fb      	adds	r3, r7, r3
 800c7c0:	7819      	ldrb	r1, [r3, #0]
 800c7c2:	002b      	movs	r3, r5
 800c7c4:	f7f7 fb3a 	bl	8003e3c <HAL_PCD_EP_Receive>
 800c7c8:	0003      	movs	r3, r0
 800c7ca:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7cc:	2516      	movs	r5, #22
 800c7ce:	197c      	adds	r4, r7, r5
 800c7d0:	19bb      	adds	r3, r7, r6
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	0018      	movs	r0, r3
 800c7d6:	f000 f83a 	bl	800c84e <USBD_Get_USB_Status>
 800c7da:	0003      	movs	r3, r0
 800c7dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c7de:	197b      	adds	r3, r7, r5
 800c7e0:	781b      	ldrb	r3, [r3, #0]
}
 800c7e2:	0018      	movs	r0, r3
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	b007      	add	sp, #28
 800c7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b082      	sub	sp, #8
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	000a      	movs	r2, r1
 800c7f4:	1cfb      	adds	r3, r7, #3
 800c7f6:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	23b0      	movs	r3, #176	; 0xb0
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	58d2      	ldr	r2, [r2, r3]
 800c800:	1cfb      	adds	r3, r7, #3
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	0019      	movs	r1, r3
 800c806:	0010      	movs	r0, r2
 800c808:	f7f7 fb5c 	bl	8003ec4 <HAL_PCD_EP_GetRxCount>
 800c80c:	0003      	movs	r3, r0
}
 800c80e:	0018      	movs	r0, r3
 800c810:	46bd      	mov	sp, r7
 800c812:	b002      	add	sp, #8
 800c814:	bd80      	pop	{r7, pc}
	...

0800c818 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c820:	4b02      	ldr	r3, [pc, #8]	; (800c82c <USBD_static_malloc+0x14>)
}
 800c822:	0018      	movs	r0, r3
 800c824:	46bd      	mov	sp, r7
 800c826:	b002      	add	sp, #8
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	46c0      	nop			; (mov r8, r8)
 800c82c:	20000268 	.word	0x20000268

0800c830 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]

}
 800c838:	46c0      	nop			; (mov r8, r8)
 800c83a:	46bd      	mov	sp, r7
 800c83c:	b002      	add	sp, #8
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c844:	f7f4 f9e2 	bl	8000c0c <SystemClock_Config>
}
 800c848:	46c0      	nop			; (mov r8, r8)
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b084      	sub	sp, #16
 800c852:	af00      	add	r7, sp, #0
 800c854:	0002      	movs	r2, r0
 800c856:	1dfb      	adds	r3, r7, #7
 800c858:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c85a:	230f      	movs	r3, #15
 800c85c:	18fb      	adds	r3, r7, r3
 800c85e:	2200      	movs	r2, #0
 800c860:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800c862:	1dfb      	adds	r3, r7, #7
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	2b03      	cmp	r3, #3
 800c868:	d017      	beq.n	800c89a <USBD_Get_USB_Status+0x4c>
 800c86a:	dc1b      	bgt.n	800c8a4 <USBD_Get_USB_Status+0x56>
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d00f      	beq.n	800c890 <USBD_Get_USB_Status+0x42>
 800c870:	dc18      	bgt.n	800c8a4 <USBD_Get_USB_Status+0x56>
 800c872:	2b00      	cmp	r3, #0
 800c874:	d002      	beq.n	800c87c <USBD_Get_USB_Status+0x2e>
 800c876:	2b01      	cmp	r3, #1
 800c878:	d005      	beq.n	800c886 <USBD_Get_USB_Status+0x38>
 800c87a:	e013      	b.n	800c8a4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c87c:	230f      	movs	r3, #15
 800c87e:	18fb      	adds	r3, r7, r3
 800c880:	2200      	movs	r2, #0
 800c882:	701a      	strb	r2, [r3, #0]
    break;
 800c884:	e013      	b.n	800c8ae <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c886:	230f      	movs	r3, #15
 800c888:	18fb      	adds	r3, r7, r3
 800c88a:	2202      	movs	r2, #2
 800c88c:	701a      	strb	r2, [r3, #0]
    break;
 800c88e:	e00e      	b.n	800c8ae <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c890:	230f      	movs	r3, #15
 800c892:	18fb      	adds	r3, r7, r3
 800c894:	2201      	movs	r2, #1
 800c896:	701a      	strb	r2, [r3, #0]
    break;
 800c898:	e009      	b.n	800c8ae <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c89a:	230f      	movs	r3, #15
 800c89c:	18fb      	adds	r3, r7, r3
 800c89e:	2202      	movs	r2, #2
 800c8a0:	701a      	strb	r2, [r3, #0]
    break;
 800c8a2:	e004      	b.n	800c8ae <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800c8a4:	230f      	movs	r3, #15
 800c8a6:	18fb      	adds	r3, r7, r3
 800c8a8:	2202      	movs	r2, #2
 800c8aa:	701a      	strb	r2, [r3, #0]
    break;
 800c8ac:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800c8ae:	230f      	movs	r3, #15
 800c8b0:	18fb      	adds	r3, r7, r3
 800c8b2:	781b      	ldrb	r3, [r3, #0]
}
 800c8b4:	0018      	movs	r0, r3
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	b004      	add	sp, #16
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <__errno>:
 800c8bc:	4b01      	ldr	r3, [pc, #4]	; (800c8c4 <__errno+0x8>)
 800c8be:	6818      	ldr	r0, [r3, #0]
 800c8c0:	4770      	bx	lr
 800c8c2:	46c0      	nop			; (mov r8, r8)
 800c8c4:	2000017c 	.word	0x2000017c

0800c8c8 <__libc_init_array>:
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	2600      	movs	r6, #0
 800c8cc:	4d0c      	ldr	r5, [pc, #48]	; (800c900 <__libc_init_array+0x38>)
 800c8ce:	4c0d      	ldr	r4, [pc, #52]	; (800c904 <__libc_init_array+0x3c>)
 800c8d0:	1b64      	subs	r4, r4, r5
 800c8d2:	10a4      	asrs	r4, r4, #2
 800c8d4:	42a6      	cmp	r6, r4
 800c8d6:	d109      	bne.n	800c8ec <__libc_init_array+0x24>
 800c8d8:	2600      	movs	r6, #0
 800c8da:	f000 fc5b 	bl	800d194 <_init>
 800c8de:	4d0a      	ldr	r5, [pc, #40]	; (800c908 <__libc_init_array+0x40>)
 800c8e0:	4c0a      	ldr	r4, [pc, #40]	; (800c90c <__libc_init_array+0x44>)
 800c8e2:	1b64      	subs	r4, r4, r5
 800c8e4:	10a4      	asrs	r4, r4, #2
 800c8e6:	42a6      	cmp	r6, r4
 800c8e8:	d105      	bne.n	800c8f6 <__libc_init_array+0x2e>
 800c8ea:	bd70      	pop	{r4, r5, r6, pc}
 800c8ec:	00b3      	lsls	r3, r6, #2
 800c8ee:	58eb      	ldr	r3, [r5, r3]
 800c8f0:	4798      	blx	r3
 800c8f2:	3601      	adds	r6, #1
 800c8f4:	e7ee      	b.n	800c8d4 <__libc_init_array+0xc>
 800c8f6:	00b3      	lsls	r3, r6, #2
 800c8f8:	58eb      	ldr	r3, [r5, r3]
 800c8fa:	4798      	blx	r3
 800c8fc:	3601      	adds	r6, #1
 800c8fe:	e7f2      	b.n	800c8e6 <__libc_init_array+0x1e>
 800c900:	0800d41c 	.word	0x0800d41c
 800c904:	0800d41c 	.word	0x0800d41c
 800c908:	0800d41c 	.word	0x0800d41c
 800c90c:	0800d420 	.word	0x0800d420

0800c910 <malloc>:
 800c910:	b510      	push	{r4, lr}
 800c912:	4b03      	ldr	r3, [pc, #12]	; (800c920 <malloc+0x10>)
 800c914:	0001      	movs	r1, r0
 800c916:	6818      	ldr	r0, [r3, #0]
 800c918:	f000 f86a 	bl	800c9f0 <_malloc_r>
 800c91c:	bd10      	pop	{r4, pc}
 800c91e:	46c0      	nop			; (mov r8, r8)
 800c920:	2000017c 	.word	0x2000017c

0800c924 <free>:
 800c924:	b510      	push	{r4, lr}
 800c926:	4b03      	ldr	r3, [pc, #12]	; (800c934 <free+0x10>)
 800c928:	0001      	movs	r1, r0
 800c92a:	6818      	ldr	r0, [r3, #0]
 800c92c:	f000 f816 	bl	800c95c <_free_r>
 800c930:	bd10      	pop	{r4, pc}
 800c932:	46c0      	nop			; (mov r8, r8)
 800c934:	2000017c 	.word	0x2000017c

0800c938 <memcpy>:
 800c938:	2300      	movs	r3, #0
 800c93a:	b510      	push	{r4, lr}
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d100      	bne.n	800c942 <memcpy+0xa>
 800c940:	bd10      	pop	{r4, pc}
 800c942:	5ccc      	ldrb	r4, [r1, r3]
 800c944:	54c4      	strb	r4, [r0, r3]
 800c946:	3301      	adds	r3, #1
 800c948:	e7f8      	b.n	800c93c <memcpy+0x4>

0800c94a <memset>:
 800c94a:	0003      	movs	r3, r0
 800c94c:	1882      	adds	r2, r0, r2
 800c94e:	4293      	cmp	r3, r2
 800c950:	d100      	bne.n	800c954 <memset+0xa>
 800c952:	4770      	bx	lr
 800c954:	7019      	strb	r1, [r3, #0]
 800c956:	3301      	adds	r3, #1
 800c958:	e7f9      	b.n	800c94e <memset+0x4>
	...

0800c95c <_free_r>:
 800c95c:	b570      	push	{r4, r5, r6, lr}
 800c95e:	0005      	movs	r5, r0
 800c960:	2900      	cmp	r1, #0
 800c962:	d010      	beq.n	800c986 <_free_r+0x2a>
 800c964:	1f0c      	subs	r4, r1, #4
 800c966:	6823      	ldr	r3, [r4, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	da00      	bge.n	800c96e <_free_r+0x12>
 800c96c:	18e4      	adds	r4, r4, r3
 800c96e:	0028      	movs	r0, r5
 800c970:	f000 f8ce 	bl	800cb10 <__malloc_lock>
 800c974:	4a1d      	ldr	r2, [pc, #116]	; (800c9ec <_free_r+0x90>)
 800c976:	6813      	ldr	r3, [r2, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d105      	bne.n	800c988 <_free_r+0x2c>
 800c97c:	6063      	str	r3, [r4, #4]
 800c97e:	6014      	str	r4, [r2, #0]
 800c980:	0028      	movs	r0, r5
 800c982:	f000 f8cd 	bl	800cb20 <__malloc_unlock>
 800c986:	bd70      	pop	{r4, r5, r6, pc}
 800c988:	42a3      	cmp	r3, r4
 800c98a:	d908      	bls.n	800c99e <_free_r+0x42>
 800c98c:	6821      	ldr	r1, [r4, #0]
 800c98e:	1860      	adds	r0, r4, r1
 800c990:	4283      	cmp	r3, r0
 800c992:	d1f3      	bne.n	800c97c <_free_r+0x20>
 800c994:	6818      	ldr	r0, [r3, #0]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	1841      	adds	r1, r0, r1
 800c99a:	6021      	str	r1, [r4, #0]
 800c99c:	e7ee      	b.n	800c97c <_free_r+0x20>
 800c99e:	001a      	movs	r2, r3
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d001      	beq.n	800c9aa <_free_r+0x4e>
 800c9a6:	42a3      	cmp	r3, r4
 800c9a8:	d9f9      	bls.n	800c99e <_free_r+0x42>
 800c9aa:	6811      	ldr	r1, [r2, #0]
 800c9ac:	1850      	adds	r0, r2, r1
 800c9ae:	42a0      	cmp	r0, r4
 800c9b0:	d10b      	bne.n	800c9ca <_free_r+0x6e>
 800c9b2:	6820      	ldr	r0, [r4, #0]
 800c9b4:	1809      	adds	r1, r1, r0
 800c9b6:	1850      	adds	r0, r2, r1
 800c9b8:	6011      	str	r1, [r2, #0]
 800c9ba:	4283      	cmp	r3, r0
 800c9bc:	d1e0      	bne.n	800c980 <_free_r+0x24>
 800c9be:	6818      	ldr	r0, [r3, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	1841      	adds	r1, r0, r1
 800c9c4:	6011      	str	r1, [r2, #0]
 800c9c6:	6053      	str	r3, [r2, #4]
 800c9c8:	e7da      	b.n	800c980 <_free_r+0x24>
 800c9ca:	42a0      	cmp	r0, r4
 800c9cc:	d902      	bls.n	800c9d4 <_free_r+0x78>
 800c9ce:	230c      	movs	r3, #12
 800c9d0:	602b      	str	r3, [r5, #0]
 800c9d2:	e7d5      	b.n	800c980 <_free_r+0x24>
 800c9d4:	6821      	ldr	r1, [r4, #0]
 800c9d6:	1860      	adds	r0, r4, r1
 800c9d8:	4283      	cmp	r3, r0
 800c9da:	d103      	bne.n	800c9e4 <_free_r+0x88>
 800c9dc:	6818      	ldr	r0, [r3, #0]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	1841      	adds	r1, r0, r1
 800c9e2:	6021      	str	r1, [r4, #0]
 800c9e4:	6063      	str	r3, [r4, #4]
 800c9e6:	6054      	str	r4, [r2, #4]
 800c9e8:	e7ca      	b.n	800c980 <_free_r+0x24>
 800c9ea:	46c0      	nop			; (mov r8, r8)
 800c9ec:	20000488 	.word	0x20000488

0800c9f0 <_malloc_r>:
 800c9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f2:	2303      	movs	r3, #3
 800c9f4:	1ccd      	adds	r5, r1, #3
 800c9f6:	439d      	bics	r5, r3
 800c9f8:	3508      	adds	r5, #8
 800c9fa:	0006      	movs	r6, r0
 800c9fc:	2d0c      	cmp	r5, #12
 800c9fe:	d21f      	bcs.n	800ca40 <_malloc_r+0x50>
 800ca00:	250c      	movs	r5, #12
 800ca02:	42a9      	cmp	r1, r5
 800ca04:	d81e      	bhi.n	800ca44 <_malloc_r+0x54>
 800ca06:	0030      	movs	r0, r6
 800ca08:	f000 f882 	bl	800cb10 <__malloc_lock>
 800ca0c:	4925      	ldr	r1, [pc, #148]	; (800caa4 <_malloc_r+0xb4>)
 800ca0e:	680a      	ldr	r2, [r1, #0]
 800ca10:	0014      	movs	r4, r2
 800ca12:	2c00      	cmp	r4, #0
 800ca14:	d11a      	bne.n	800ca4c <_malloc_r+0x5c>
 800ca16:	4f24      	ldr	r7, [pc, #144]	; (800caa8 <_malloc_r+0xb8>)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d104      	bne.n	800ca28 <_malloc_r+0x38>
 800ca1e:	0021      	movs	r1, r4
 800ca20:	0030      	movs	r0, r6
 800ca22:	f000 f843 	bl	800caac <_sbrk_r>
 800ca26:	6038      	str	r0, [r7, #0]
 800ca28:	0029      	movs	r1, r5
 800ca2a:	0030      	movs	r0, r6
 800ca2c:	f000 f83e 	bl	800caac <_sbrk_r>
 800ca30:	1c43      	adds	r3, r0, #1
 800ca32:	d12b      	bne.n	800ca8c <_malloc_r+0x9c>
 800ca34:	230c      	movs	r3, #12
 800ca36:	0030      	movs	r0, r6
 800ca38:	6033      	str	r3, [r6, #0]
 800ca3a:	f000 f871 	bl	800cb20 <__malloc_unlock>
 800ca3e:	e003      	b.n	800ca48 <_malloc_r+0x58>
 800ca40:	2d00      	cmp	r5, #0
 800ca42:	dade      	bge.n	800ca02 <_malloc_r+0x12>
 800ca44:	230c      	movs	r3, #12
 800ca46:	6033      	str	r3, [r6, #0]
 800ca48:	2000      	movs	r0, #0
 800ca4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca4c:	6823      	ldr	r3, [r4, #0]
 800ca4e:	1b5b      	subs	r3, r3, r5
 800ca50:	d419      	bmi.n	800ca86 <_malloc_r+0x96>
 800ca52:	2b0b      	cmp	r3, #11
 800ca54:	d903      	bls.n	800ca5e <_malloc_r+0x6e>
 800ca56:	6023      	str	r3, [r4, #0]
 800ca58:	18e4      	adds	r4, r4, r3
 800ca5a:	6025      	str	r5, [r4, #0]
 800ca5c:	e003      	b.n	800ca66 <_malloc_r+0x76>
 800ca5e:	6863      	ldr	r3, [r4, #4]
 800ca60:	42a2      	cmp	r2, r4
 800ca62:	d10e      	bne.n	800ca82 <_malloc_r+0x92>
 800ca64:	600b      	str	r3, [r1, #0]
 800ca66:	0030      	movs	r0, r6
 800ca68:	f000 f85a 	bl	800cb20 <__malloc_unlock>
 800ca6c:	0020      	movs	r0, r4
 800ca6e:	2207      	movs	r2, #7
 800ca70:	300b      	adds	r0, #11
 800ca72:	1d23      	adds	r3, r4, #4
 800ca74:	4390      	bics	r0, r2
 800ca76:	1ac2      	subs	r2, r0, r3
 800ca78:	4298      	cmp	r0, r3
 800ca7a:	d0e6      	beq.n	800ca4a <_malloc_r+0x5a>
 800ca7c:	1a1b      	subs	r3, r3, r0
 800ca7e:	50a3      	str	r3, [r4, r2]
 800ca80:	e7e3      	b.n	800ca4a <_malloc_r+0x5a>
 800ca82:	6053      	str	r3, [r2, #4]
 800ca84:	e7ef      	b.n	800ca66 <_malloc_r+0x76>
 800ca86:	0022      	movs	r2, r4
 800ca88:	6864      	ldr	r4, [r4, #4]
 800ca8a:	e7c2      	b.n	800ca12 <_malloc_r+0x22>
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	1cc4      	adds	r4, r0, #3
 800ca90:	439c      	bics	r4, r3
 800ca92:	42a0      	cmp	r0, r4
 800ca94:	d0e1      	beq.n	800ca5a <_malloc_r+0x6a>
 800ca96:	1a21      	subs	r1, r4, r0
 800ca98:	0030      	movs	r0, r6
 800ca9a:	f000 f807 	bl	800caac <_sbrk_r>
 800ca9e:	1c43      	adds	r3, r0, #1
 800caa0:	d1db      	bne.n	800ca5a <_malloc_r+0x6a>
 800caa2:	e7c7      	b.n	800ca34 <_malloc_r+0x44>
 800caa4:	20000488 	.word	0x20000488
 800caa8:	2000048c 	.word	0x2000048c

0800caac <_sbrk_r>:
 800caac:	2300      	movs	r3, #0
 800caae:	b570      	push	{r4, r5, r6, lr}
 800cab0:	4d06      	ldr	r5, [pc, #24]	; (800cacc <_sbrk_r+0x20>)
 800cab2:	0004      	movs	r4, r0
 800cab4:	0008      	movs	r0, r1
 800cab6:	602b      	str	r3, [r5, #0]
 800cab8:	f7f5 fa56 	bl	8001f68 <_sbrk>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d103      	bne.n	800cac8 <_sbrk_r+0x1c>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d000      	beq.n	800cac8 <_sbrk_r+0x1c>
 800cac6:	6023      	str	r3, [r4, #0]
 800cac8:	bd70      	pop	{r4, r5, r6, pc}
 800caca:	46c0      	nop			; (mov r8, r8)
 800cacc:	20001630 	.word	0x20001630

0800cad0 <siprintf>:
 800cad0:	b40e      	push	{r1, r2, r3}
 800cad2:	b500      	push	{lr}
 800cad4:	490b      	ldr	r1, [pc, #44]	; (800cb04 <siprintf+0x34>)
 800cad6:	b09c      	sub	sp, #112	; 0x70
 800cad8:	ab1d      	add	r3, sp, #116	; 0x74
 800cada:	9002      	str	r0, [sp, #8]
 800cadc:	9006      	str	r0, [sp, #24]
 800cade:	9107      	str	r1, [sp, #28]
 800cae0:	9104      	str	r1, [sp, #16]
 800cae2:	4809      	ldr	r0, [pc, #36]	; (800cb08 <siprintf+0x38>)
 800cae4:	4909      	ldr	r1, [pc, #36]	; (800cb0c <siprintf+0x3c>)
 800cae6:	cb04      	ldmia	r3!, {r2}
 800cae8:	9105      	str	r1, [sp, #20]
 800caea:	6800      	ldr	r0, [r0, #0]
 800caec:	a902      	add	r1, sp, #8
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	f000 f880 	bl	800cbf4 <_svfiprintf_r>
 800caf4:	2300      	movs	r3, #0
 800caf6:	9a02      	ldr	r2, [sp, #8]
 800caf8:	7013      	strb	r3, [r2, #0]
 800cafa:	b01c      	add	sp, #112	; 0x70
 800cafc:	bc08      	pop	{r3}
 800cafe:	b003      	add	sp, #12
 800cb00:	4718      	bx	r3
 800cb02:	46c0      	nop			; (mov r8, r8)
 800cb04:	7fffffff 	.word	0x7fffffff
 800cb08:	2000017c 	.word	0x2000017c
 800cb0c:	ffff0208 	.word	0xffff0208

0800cb10 <__malloc_lock>:
 800cb10:	b510      	push	{r4, lr}
 800cb12:	4802      	ldr	r0, [pc, #8]	; (800cb1c <__malloc_lock+0xc>)
 800cb14:	f000 faf0 	bl	800d0f8 <__retarget_lock_acquire_recursive>
 800cb18:	bd10      	pop	{r4, pc}
 800cb1a:	46c0      	nop			; (mov r8, r8)
 800cb1c:	20001638 	.word	0x20001638

0800cb20 <__malloc_unlock>:
 800cb20:	b510      	push	{r4, lr}
 800cb22:	4802      	ldr	r0, [pc, #8]	; (800cb2c <__malloc_unlock+0xc>)
 800cb24:	f000 fae9 	bl	800d0fa <__retarget_lock_release_recursive>
 800cb28:	bd10      	pop	{r4, pc}
 800cb2a:	46c0      	nop			; (mov r8, r8)
 800cb2c:	20001638 	.word	0x20001638

0800cb30 <__ssputs_r>:
 800cb30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb32:	688e      	ldr	r6, [r1, #8]
 800cb34:	b085      	sub	sp, #20
 800cb36:	0007      	movs	r7, r0
 800cb38:	000c      	movs	r4, r1
 800cb3a:	9203      	str	r2, [sp, #12]
 800cb3c:	9301      	str	r3, [sp, #4]
 800cb3e:	429e      	cmp	r6, r3
 800cb40:	d83c      	bhi.n	800cbbc <__ssputs_r+0x8c>
 800cb42:	2390      	movs	r3, #144	; 0x90
 800cb44:	898a      	ldrh	r2, [r1, #12]
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	421a      	tst	r2, r3
 800cb4a:	d034      	beq.n	800cbb6 <__ssputs_r+0x86>
 800cb4c:	2503      	movs	r5, #3
 800cb4e:	6909      	ldr	r1, [r1, #16]
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	1a5b      	subs	r3, r3, r1
 800cb54:	9302      	str	r3, [sp, #8]
 800cb56:	6963      	ldr	r3, [r4, #20]
 800cb58:	9802      	ldr	r0, [sp, #8]
 800cb5a:	435d      	muls	r5, r3
 800cb5c:	0feb      	lsrs	r3, r5, #31
 800cb5e:	195d      	adds	r5, r3, r5
 800cb60:	9b01      	ldr	r3, [sp, #4]
 800cb62:	106d      	asrs	r5, r5, #1
 800cb64:	3301      	adds	r3, #1
 800cb66:	181b      	adds	r3, r3, r0
 800cb68:	42ab      	cmp	r3, r5
 800cb6a:	d900      	bls.n	800cb6e <__ssputs_r+0x3e>
 800cb6c:	001d      	movs	r5, r3
 800cb6e:	0553      	lsls	r3, r2, #21
 800cb70:	d532      	bpl.n	800cbd8 <__ssputs_r+0xa8>
 800cb72:	0029      	movs	r1, r5
 800cb74:	0038      	movs	r0, r7
 800cb76:	f7ff ff3b 	bl	800c9f0 <_malloc_r>
 800cb7a:	1e06      	subs	r6, r0, #0
 800cb7c:	d109      	bne.n	800cb92 <__ssputs_r+0x62>
 800cb7e:	230c      	movs	r3, #12
 800cb80:	603b      	str	r3, [r7, #0]
 800cb82:	2340      	movs	r3, #64	; 0x40
 800cb84:	2001      	movs	r0, #1
 800cb86:	89a2      	ldrh	r2, [r4, #12]
 800cb88:	4240      	negs	r0, r0
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	81a3      	strh	r3, [r4, #12]
 800cb8e:	b005      	add	sp, #20
 800cb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb92:	9a02      	ldr	r2, [sp, #8]
 800cb94:	6921      	ldr	r1, [r4, #16]
 800cb96:	f7ff fecf 	bl	800c938 <memcpy>
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	4a14      	ldr	r2, [pc, #80]	; (800cbf0 <__ssputs_r+0xc0>)
 800cb9e:	401a      	ands	r2, r3
 800cba0:	2380      	movs	r3, #128	; 0x80
 800cba2:	4313      	orrs	r3, r2
 800cba4:	81a3      	strh	r3, [r4, #12]
 800cba6:	9b02      	ldr	r3, [sp, #8]
 800cba8:	6126      	str	r6, [r4, #16]
 800cbaa:	18f6      	adds	r6, r6, r3
 800cbac:	6026      	str	r6, [r4, #0]
 800cbae:	6165      	str	r5, [r4, #20]
 800cbb0:	9e01      	ldr	r6, [sp, #4]
 800cbb2:	1aed      	subs	r5, r5, r3
 800cbb4:	60a5      	str	r5, [r4, #8]
 800cbb6:	9b01      	ldr	r3, [sp, #4]
 800cbb8:	429e      	cmp	r6, r3
 800cbba:	d900      	bls.n	800cbbe <__ssputs_r+0x8e>
 800cbbc:	9e01      	ldr	r6, [sp, #4]
 800cbbe:	0032      	movs	r2, r6
 800cbc0:	9903      	ldr	r1, [sp, #12]
 800cbc2:	6820      	ldr	r0, [r4, #0]
 800cbc4:	f000 faa5 	bl	800d112 <memmove>
 800cbc8:	68a3      	ldr	r3, [r4, #8]
 800cbca:	2000      	movs	r0, #0
 800cbcc:	1b9b      	subs	r3, r3, r6
 800cbce:	60a3      	str	r3, [r4, #8]
 800cbd0:	6823      	ldr	r3, [r4, #0]
 800cbd2:	199e      	adds	r6, r3, r6
 800cbd4:	6026      	str	r6, [r4, #0]
 800cbd6:	e7da      	b.n	800cb8e <__ssputs_r+0x5e>
 800cbd8:	002a      	movs	r2, r5
 800cbda:	0038      	movs	r0, r7
 800cbdc:	f000 faac 	bl	800d138 <_realloc_r>
 800cbe0:	1e06      	subs	r6, r0, #0
 800cbe2:	d1e0      	bne.n	800cba6 <__ssputs_r+0x76>
 800cbe4:	0038      	movs	r0, r7
 800cbe6:	6921      	ldr	r1, [r4, #16]
 800cbe8:	f7ff feb8 	bl	800c95c <_free_r>
 800cbec:	e7c7      	b.n	800cb7e <__ssputs_r+0x4e>
 800cbee:	46c0      	nop			; (mov r8, r8)
 800cbf0:	fffffb7f 	.word	0xfffffb7f

0800cbf4 <_svfiprintf_r>:
 800cbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf6:	b0a1      	sub	sp, #132	; 0x84
 800cbf8:	9003      	str	r0, [sp, #12]
 800cbfa:	001d      	movs	r5, r3
 800cbfc:	898b      	ldrh	r3, [r1, #12]
 800cbfe:	000f      	movs	r7, r1
 800cc00:	0016      	movs	r6, r2
 800cc02:	061b      	lsls	r3, r3, #24
 800cc04:	d511      	bpl.n	800cc2a <_svfiprintf_r+0x36>
 800cc06:	690b      	ldr	r3, [r1, #16]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10e      	bne.n	800cc2a <_svfiprintf_r+0x36>
 800cc0c:	2140      	movs	r1, #64	; 0x40
 800cc0e:	f7ff feef 	bl	800c9f0 <_malloc_r>
 800cc12:	6038      	str	r0, [r7, #0]
 800cc14:	6138      	str	r0, [r7, #16]
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d105      	bne.n	800cc26 <_svfiprintf_r+0x32>
 800cc1a:	230c      	movs	r3, #12
 800cc1c:	9a03      	ldr	r2, [sp, #12]
 800cc1e:	3801      	subs	r0, #1
 800cc20:	6013      	str	r3, [r2, #0]
 800cc22:	b021      	add	sp, #132	; 0x84
 800cc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc26:	2340      	movs	r3, #64	; 0x40
 800cc28:	617b      	str	r3, [r7, #20]
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	ac08      	add	r4, sp, #32
 800cc2e:	6163      	str	r3, [r4, #20]
 800cc30:	3320      	adds	r3, #32
 800cc32:	7663      	strb	r3, [r4, #25]
 800cc34:	3310      	adds	r3, #16
 800cc36:	76a3      	strb	r3, [r4, #26]
 800cc38:	9507      	str	r5, [sp, #28]
 800cc3a:	0035      	movs	r5, r6
 800cc3c:	782b      	ldrb	r3, [r5, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <_svfiprintf_r+0x52>
 800cc42:	2b25      	cmp	r3, #37	; 0x25
 800cc44:	d147      	bne.n	800ccd6 <_svfiprintf_r+0xe2>
 800cc46:	1bab      	subs	r3, r5, r6
 800cc48:	9305      	str	r3, [sp, #20]
 800cc4a:	42b5      	cmp	r5, r6
 800cc4c:	d00c      	beq.n	800cc68 <_svfiprintf_r+0x74>
 800cc4e:	0032      	movs	r2, r6
 800cc50:	0039      	movs	r1, r7
 800cc52:	9803      	ldr	r0, [sp, #12]
 800cc54:	f7ff ff6c 	bl	800cb30 <__ssputs_r>
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	d100      	bne.n	800cc5e <_svfiprintf_r+0x6a>
 800cc5c:	e0ae      	b.n	800cdbc <_svfiprintf_r+0x1c8>
 800cc5e:	6962      	ldr	r2, [r4, #20]
 800cc60:	9b05      	ldr	r3, [sp, #20]
 800cc62:	4694      	mov	ip, r2
 800cc64:	4463      	add	r3, ip
 800cc66:	6163      	str	r3, [r4, #20]
 800cc68:	782b      	ldrb	r3, [r5, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d100      	bne.n	800cc70 <_svfiprintf_r+0x7c>
 800cc6e:	e0a5      	b.n	800cdbc <_svfiprintf_r+0x1c8>
 800cc70:	2201      	movs	r2, #1
 800cc72:	2300      	movs	r3, #0
 800cc74:	4252      	negs	r2, r2
 800cc76:	6062      	str	r2, [r4, #4]
 800cc78:	a904      	add	r1, sp, #16
 800cc7a:	3254      	adds	r2, #84	; 0x54
 800cc7c:	1852      	adds	r2, r2, r1
 800cc7e:	1c6e      	adds	r6, r5, #1
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	60e3      	str	r3, [r4, #12]
 800cc84:	60a3      	str	r3, [r4, #8]
 800cc86:	7013      	strb	r3, [r2, #0]
 800cc88:	65a3      	str	r3, [r4, #88]	; 0x58
 800cc8a:	2205      	movs	r2, #5
 800cc8c:	7831      	ldrb	r1, [r6, #0]
 800cc8e:	4854      	ldr	r0, [pc, #336]	; (800cde0 <_svfiprintf_r+0x1ec>)
 800cc90:	f000 fa34 	bl	800d0fc <memchr>
 800cc94:	1c75      	adds	r5, r6, #1
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d11f      	bne.n	800ccda <_svfiprintf_r+0xe6>
 800cc9a:	6822      	ldr	r2, [r4, #0]
 800cc9c:	06d3      	lsls	r3, r2, #27
 800cc9e:	d504      	bpl.n	800ccaa <_svfiprintf_r+0xb6>
 800cca0:	2353      	movs	r3, #83	; 0x53
 800cca2:	a904      	add	r1, sp, #16
 800cca4:	185b      	adds	r3, r3, r1
 800cca6:	2120      	movs	r1, #32
 800cca8:	7019      	strb	r1, [r3, #0]
 800ccaa:	0713      	lsls	r3, r2, #28
 800ccac:	d504      	bpl.n	800ccb8 <_svfiprintf_r+0xc4>
 800ccae:	2353      	movs	r3, #83	; 0x53
 800ccb0:	a904      	add	r1, sp, #16
 800ccb2:	185b      	adds	r3, r3, r1
 800ccb4:	212b      	movs	r1, #43	; 0x2b
 800ccb6:	7019      	strb	r1, [r3, #0]
 800ccb8:	7833      	ldrb	r3, [r6, #0]
 800ccba:	2b2a      	cmp	r3, #42	; 0x2a
 800ccbc:	d016      	beq.n	800ccec <_svfiprintf_r+0xf8>
 800ccbe:	0035      	movs	r5, r6
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	200a      	movs	r0, #10
 800ccc4:	68e3      	ldr	r3, [r4, #12]
 800ccc6:	782a      	ldrb	r2, [r5, #0]
 800ccc8:	1c6e      	adds	r6, r5, #1
 800ccca:	3a30      	subs	r2, #48	; 0x30
 800cccc:	2a09      	cmp	r2, #9
 800ccce:	d94e      	bls.n	800cd6e <_svfiprintf_r+0x17a>
 800ccd0:	2900      	cmp	r1, #0
 800ccd2:	d111      	bne.n	800ccf8 <_svfiprintf_r+0x104>
 800ccd4:	e017      	b.n	800cd06 <_svfiprintf_r+0x112>
 800ccd6:	3501      	adds	r5, #1
 800ccd8:	e7b0      	b.n	800cc3c <_svfiprintf_r+0x48>
 800ccda:	4b41      	ldr	r3, [pc, #260]	; (800cde0 <_svfiprintf_r+0x1ec>)
 800ccdc:	6822      	ldr	r2, [r4, #0]
 800ccde:	1ac0      	subs	r0, r0, r3
 800cce0:	2301      	movs	r3, #1
 800cce2:	4083      	lsls	r3, r0
 800cce4:	4313      	orrs	r3, r2
 800cce6:	002e      	movs	r6, r5
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	e7ce      	b.n	800cc8a <_svfiprintf_r+0x96>
 800ccec:	9b07      	ldr	r3, [sp, #28]
 800ccee:	1d19      	adds	r1, r3, #4
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	9107      	str	r1, [sp, #28]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	db01      	blt.n	800ccfc <_svfiprintf_r+0x108>
 800ccf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccfa:	e004      	b.n	800cd06 <_svfiprintf_r+0x112>
 800ccfc:	425b      	negs	r3, r3
 800ccfe:	60e3      	str	r3, [r4, #12]
 800cd00:	2302      	movs	r3, #2
 800cd02:	4313      	orrs	r3, r2
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	782b      	ldrb	r3, [r5, #0]
 800cd08:	2b2e      	cmp	r3, #46	; 0x2e
 800cd0a:	d10a      	bne.n	800cd22 <_svfiprintf_r+0x12e>
 800cd0c:	786b      	ldrb	r3, [r5, #1]
 800cd0e:	2b2a      	cmp	r3, #42	; 0x2a
 800cd10:	d135      	bne.n	800cd7e <_svfiprintf_r+0x18a>
 800cd12:	9b07      	ldr	r3, [sp, #28]
 800cd14:	3502      	adds	r5, #2
 800cd16:	1d1a      	adds	r2, r3, #4
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	9207      	str	r2, [sp, #28]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	db2b      	blt.n	800cd78 <_svfiprintf_r+0x184>
 800cd20:	9309      	str	r3, [sp, #36]	; 0x24
 800cd22:	4e30      	ldr	r6, [pc, #192]	; (800cde4 <_svfiprintf_r+0x1f0>)
 800cd24:	2203      	movs	r2, #3
 800cd26:	0030      	movs	r0, r6
 800cd28:	7829      	ldrb	r1, [r5, #0]
 800cd2a:	f000 f9e7 	bl	800d0fc <memchr>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d006      	beq.n	800cd40 <_svfiprintf_r+0x14c>
 800cd32:	2340      	movs	r3, #64	; 0x40
 800cd34:	1b80      	subs	r0, r0, r6
 800cd36:	4083      	lsls	r3, r0
 800cd38:	6822      	ldr	r2, [r4, #0]
 800cd3a:	3501      	adds	r5, #1
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	6023      	str	r3, [r4, #0]
 800cd40:	7829      	ldrb	r1, [r5, #0]
 800cd42:	2206      	movs	r2, #6
 800cd44:	4828      	ldr	r0, [pc, #160]	; (800cde8 <_svfiprintf_r+0x1f4>)
 800cd46:	1c6e      	adds	r6, r5, #1
 800cd48:	7621      	strb	r1, [r4, #24]
 800cd4a:	f000 f9d7 	bl	800d0fc <memchr>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d03c      	beq.n	800cdcc <_svfiprintf_r+0x1d8>
 800cd52:	4b26      	ldr	r3, [pc, #152]	; (800cdec <_svfiprintf_r+0x1f8>)
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d125      	bne.n	800cda4 <_svfiprintf_r+0x1b0>
 800cd58:	2207      	movs	r2, #7
 800cd5a:	9b07      	ldr	r3, [sp, #28]
 800cd5c:	3307      	adds	r3, #7
 800cd5e:	4393      	bics	r3, r2
 800cd60:	3308      	adds	r3, #8
 800cd62:	9307      	str	r3, [sp, #28]
 800cd64:	6963      	ldr	r3, [r4, #20]
 800cd66:	9a04      	ldr	r2, [sp, #16]
 800cd68:	189b      	adds	r3, r3, r2
 800cd6a:	6163      	str	r3, [r4, #20]
 800cd6c:	e765      	b.n	800cc3a <_svfiprintf_r+0x46>
 800cd6e:	4343      	muls	r3, r0
 800cd70:	0035      	movs	r5, r6
 800cd72:	2101      	movs	r1, #1
 800cd74:	189b      	adds	r3, r3, r2
 800cd76:	e7a6      	b.n	800ccc6 <_svfiprintf_r+0xd2>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	425b      	negs	r3, r3
 800cd7c:	e7d0      	b.n	800cd20 <_svfiprintf_r+0x12c>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	200a      	movs	r0, #10
 800cd82:	001a      	movs	r2, r3
 800cd84:	3501      	adds	r5, #1
 800cd86:	6063      	str	r3, [r4, #4]
 800cd88:	7829      	ldrb	r1, [r5, #0]
 800cd8a:	1c6e      	adds	r6, r5, #1
 800cd8c:	3930      	subs	r1, #48	; 0x30
 800cd8e:	2909      	cmp	r1, #9
 800cd90:	d903      	bls.n	800cd9a <_svfiprintf_r+0x1a6>
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d0c5      	beq.n	800cd22 <_svfiprintf_r+0x12e>
 800cd96:	9209      	str	r2, [sp, #36]	; 0x24
 800cd98:	e7c3      	b.n	800cd22 <_svfiprintf_r+0x12e>
 800cd9a:	4342      	muls	r2, r0
 800cd9c:	0035      	movs	r5, r6
 800cd9e:	2301      	movs	r3, #1
 800cda0:	1852      	adds	r2, r2, r1
 800cda2:	e7f1      	b.n	800cd88 <_svfiprintf_r+0x194>
 800cda4:	ab07      	add	r3, sp, #28
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	003a      	movs	r2, r7
 800cdaa:	0021      	movs	r1, r4
 800cdac:	4b10      	ldr	r3, [pc, #64]	; (800cdf0 <_svfiprintf_r+0x1fc>)
 800cdae:	9803      	ldr	r0, [sp, #12]
 800cdb0:	e000      	b.n	800cdb4 <_svfiprintf_r+0x1c0>
 800cdb2:	bf00      	nop
 800cdb4:	9004      	str	r0, [sp, #16]
 800cdb6:	9b04      	ldr	r3, [sp, #16]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	d1d3      	bne.n	800cd64 <_svfiprintf_r+0x170>
 800cdbc:	89bb      	ldrh	r3, [r7, #12]
 800cdbe:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cdc0:	065b      	lsls	r3, r3, #25
 800cdc2:	d400      	bmi.n	800cdc6 <_svfiprintf_r+0x1d2>
 800cdc4:	e72d      	b.n	800cc22 <_svfiprintf_r+0x2e>
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	4240      	negs	r0, r0
 800cdca:	e72a      	b.n	800cc22 <_svfiprintf_r+0x2e>
 800cdcc:	ab07      	add	r3, sp, #28
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	003a      	movs	r2, r7
 800cdd2:	0021      	movs	r1, r4
 800cdd4:	4b06      	ldr	r3, [pc, #24]	; (800cdf0 <_svfiprintf_r+0x1fc>)
 800cdd6:	9803      	ldr	r0, [sp, #12]
 800cdd8:	f000 f87c 	bl	800ced4 <_printf_i>
 800cddc:	e7ea      	b.n	800cdb4 <_svfiprintf_r+0x1c0>
 800cdde:	46c0      	nop			; (mov r8, r8)
 800cde0:	0800d3e8 	.word	0x0800d3e8
 800cde4:	0800d3ee 	.word	0x0800d3ee
 800cde8:	0800d3f2 	.word	0x0800d3f2
 800cdec:	00000000 	.word	0x00000000
 800cdf0:	0800cb31 	.word	0x0800cb31

0800cdf4 <_printf_common>:
 800cdf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdf6:	0015      	movs	r5, r2
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	688a      	ldr	r2, [r1, #8]
 800cdfc:	690b      	ldr	r3, [r1, #16]
 800cdfe:	000c      	movs	r4, r1
 800ce00:	9000      	str	r0, [sp, #0]
 800ce02:	4293      	cmp	r3, r2
 800ce04:	da00      	bge.n	800ce08 <_printf_common+0x14>
 800ce06:	0013      	movs	r3, r2
 800ce08:	0022      	movs	r2, r4
 800ce0a:	602b      	str	r3, [r5, #0]
 800ce0c:	3243      	adds	r2, #67	; 0x43
 800ce0e:	7812      	ldrb	r2, [r2, #0]
 800ce10:	2a00      	cmp	r2, #0
 800ce12:	d001      	beq.n	800ce18 <_printf_common+0x24>
 800ce14:	3301      	adds	r3, #1
 800ce16:	602b      	str	r3, [r5, #0]
 800ce18:	6823      	ldr	r3, [r4, #0]
 800ce1a:	069b      	lsls	r3, r3, #26
 800ce1c:	d502      	bpl.n	800ce24 <_printf_common+0x30>
 800ce1e:	682b      	ldr	r3, [r5, #0]
 800ce20:	3302      	adds	r3, #2
 800ce22:	602b      	str	r3, [r5, #0]
 800ce24:	6822      	ldr	r2, [r4, #0]
 800ce26:	2306      	movs	r3, #6
 800ce28:	0017      	movs	r7, r2
 800ce2a:	401f      	ands	r7, r3
 800ce2c:	421a      	tst	r2, r3
 800ce2e:	d027      	beq.n	800ce80 <_printf_common+0x8c>
 800ce30:	0023      	movs	r3, r4
 800ce32:	3343      	adds	r3, #67	; 0x43
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	1e5a      	subs	r2, r3, #1
 800ce38:	4193      	sbcs	r3, r2
 800ce3a:	6822      	ldr	r2, [r4, #0]
 800ce3c:	0692      	lsls	r2, r2, #26
 800ce3e:	d430      	bmi.n	800cea2 <_printf_common+0xae>
 800ce40:	0022      	movs	r2, r4
 800ce42:	9901      	ldr	r1, [sp, #4]
 800ce44:	9800      	ldr	r0, [sp, #0]
 800ce46:	9e08      	ldr	r6, [sp, #32]
 800ce48:	3243      	adds	r2, #67	; 0x43
 800ce4a:	47b0      	blx	r6
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	d025      	beq.n	800ce9c <_printf_common+0xa8>
 800ce50:	2306      	movs	r3, #6
 800ce52:	6820      	ldr	r0, [r4, #0]
 800ce54:	682a      	ldr	r2, [r5, #0]
 800ce56:	68e1      	ldr	r1, [r4, #12]
 800ce58:	2500      	movs	r5, #0
 800ce5a:	4003      	ands	r3, r0
 800ce5c:	2b04      	cmp	r3, #4
 800ce5e:	d103      	bne.n	800ce68 <_printf_common+0x74>
 800ce60:	1a8d      	subs	r5, r1, r2
 800ce62:	43eb      	mvns	r3, r5
 800ce64:	17db      	asrs	r3, r3, #31
 800ce66:	401d      	ands	r5, r3
 800ce68:	68a3      	ldr	r3, [r4, #8]
 800ce6a:	6922      	ldr	r2, [r4, #16]
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	dd01      	ble.n	800ce74 <_printf_common+0x80>
 800ce70:	1a9b      	subs	r3, r3, r2
 800ce72:	18ed      	adds	r5, r5, r3
 800ce74:	2700      	movs	r7, #0
 800ce76:	42bd      	cmp	r5, r7
 800ce78:	d120      	bne.n	800cebc <_printf_common+0xc8>
 800ce7a:	2000      	movs	r0, #0
 800ce7c:	e010      	b.n	800cea0 <_printf_common+0xac>
 800ce7e:	3701      	adds	r7, #1
 800ce80:	68e3      	ldr	r3, [r4, #12]
 800ce82:	682a      	ldr	r2, [r5, #0]
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	42bb      	cmp	r3, r7
 800ce88:	ddd2      	ble.n	800ce30 <_printf_common+0x3c>
 800ce8a:	0022      	movs	r2, r4
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	9901      	ldr	r1, [sp, #4]
 800ce90:	9800      	ldr	r0, [sp, #0]
 800ce92:	9e08      	ldr	r6, [sp, #32]
 800ce94:	3219      	adds	r2, #25
 800ce96:	47b0      	blx	r6
 800ce98:	1c43      	adds	r3, r0, #1
 800ce9a:	d1f0      	bne.n	800ce7e <_printf_common+0x8a>
 800ce9c:	2001      	movs	r0, #1
 800ce9e:	4240      	negs	r0, r0
 800cea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cea2:	2030      	movs	r0, #48	; 0x30
 800cea4:	18e1      	adds	r1, r4, r3
 800cea6:	3143      	adds	r1, #67	; 0x43
 800cea8:	7008      	strb	r0, [r1, #0]
 800ceaa:	0021      	movs	r1, r4
 800ceac:	1c5a      	adds	r2, r3, #1
 800ceae:	3145      	adds	r1, #69	; 0x45
 800ceb0:	7809      	ldrb	r1, [r1, #0]
 800ceb2:	18a2      	adds	r2, r4, r2
 800ceb4:	3243      	adds	r2, #67	; 0x43
 800ceb6:	3302      	adds	r3, #2
 800ceb8:	7011      	strb	r1, [r2, #0]
 800ceba:	e7c1      	b.n	800ce40 <_printf_common+0x4c>
 800cebc:	0022      	movs	r2, r4
 800cebe:	2301      	movs	r3, #1
 800cec0:	9901      	ldr	r1, [sp, #4]
 800cec2:	9800      	ldr	r0, [sp, #0]
 800cec4:	9e08      	ldr	r6, [sp, #32]
 800cec6:	321a      	adds	r2, #26
 800cec8:	47b0      	blx	r6
 800ceca:	1c43      	adds	r3, r0, #1
 800cecc:	d0e6      	beq.n	800ce9c <_printf_common+0xa8>
 800cece:	3701      	adds	r7, #1
 800ced0:	e7d1      	b.n	800ce76 <_printf_common+0x82>
	...

0800ced4 <_printf_i>:
 800ced4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ced6:	b08b      	sub	sp, #44	; 0x2c
 800ced8:	9206      	str	r2, [sp, #24]
 800ceda:	000a      	movs	r2, r1
 800cedc:	3243      	adds	r2, #67	; 0x43
 800cede:	9307      	str	r3, [sp, #28]
 800cee0:	9005      	str	r0, [sp, #20]
 800cee2:	9204      	str	r2, [sp, #16]
 800cee4:	7e0a      	ldrb	r2, [r1, #24]
 800cee6:	000c      	movs	r4, r1
 800cee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ceea:	2a78      	cmp	r2, #120	; 0x78
 800ceec:	d806      	bhi.n	800cefc <_printf_i+0x28>
 800ceee:	2a62      	cmp	r2, #98	; 0x62
 800cef0:	d808      	bhi.n	800cf04 <_printf_i+0x30>
 800cef2:	2a00      	cmp	r2, #0
 800cef4:	d100      	bne.n	800cef8 <_printf_i+0x24>
 800cef6:	e0c0      	b.n	800d07a <_printf_i+0x1a6>
 800cef8:	2a58      	cmp	r2, #88	; 0x58
 800cefa:	d052      	beq.n	800cfa2 <_printf_i+0xce>
 800cefc:	0026      	movs	r6, r4
 800cefe:	3642      	adds	r6, #66	; 0x42
 800cf00:	7032      	strb	r2, [r6, #0]
 800cf02:	e022      	b.n	800cf4a <_printf_i+0x76>
 800cf04:	0010      	movs	r0, r2
 800cf06:	3863      	subs	r0, #99	; 0x63
 800cf08:	2815      	cmp	r0, #21
 800cf0a:	d8f7      	bhi.n	800cefc <_printf_i+0x28>
 800cf0c:	f7f3 f904 	bl	8000118 <__gnu_thumb1_case_shi>
 800cf10:	001f0016 	.word	0x001f0016
 800cf14:	fff6fff6 	.word	0xfff6fff6
 800cf18:	fff6fff6 	.word	0xfff6fff6
 800cf1c:	fff6001f 	.word	0xfff6001f
 800cf20:	fff6fff6 	.word	0xfff6fff6
 800cf24:	00a8fff6 	.word	0x00a8fff6
 800cf28:	009a0036 	.word	0x009a0036
 800cf2c:	fff6fff6 	.word	0xfff6fff6
 800cf30:	fff600b9 	.word	0xfff600b9
 800cf34:	fff60036 	.word	0xfff60036
 800cf38:	009efff6 	.word	0x009efff6
 800cf3c:	0026      	movs	r6, r4
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	3642      	adds	r6, #66	; 0x42
 800cf42:	1d11      	adds	r1, r2, #4
 800cf44:	6019      	str	r1, [r3, #0]
 800cf46:	6813      	ldr	r3, [r2, #0]
 800cf48:	7033      	strb	r3, [r6, #0]
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e0a7      	b.n	800d09e <_printf_i+0x1ca>
 800cf4e:	6808      	ldr	r0, [r1, #0]
 800cf50:	6819      	ldr	r1, [r3, #0]
 800cf52:	1d0a      	adds	r2, r1, #4
 800cf54:	0605      	lsls	r5, r0, #24
 800cf56:	d50b      	bpl.n	800cf70 <_printf_i+0x9c>
 800cf58:	680d      	ldr	r5, [r1, #0]
 800cf5a:	601a      	str	r2, [r3, #0]
 800cf5c:	2d00      	cmp	r5, #0
 800cf5e:	da03      	bge.n	800cf68 <_printf_i+0x94>
 800cf60:	232d      	movs	r3, #45	; 0x2d
 800cf62:	9a04      	ldr	r2, [sp, #16]
 800cf64:	426d      	negs	r5, r5
 800cf66:	7013      	strb	r3, [r2, #0]
 800cf68:	4b61      	ldr	r3, [pc, #388]	; (800d0f0 <_printf_i+0x21c>)
 800cf6a:	270a      	movs	r7, #10
 800cf6c:	9303      	str	r3, [sp, #12]
 800cf6e:	e032      	b.n	800cfd6 <_printf_i+0x102>
 800cf70:	680d      	ldr	r5, [r1, #0]
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	0641      	lsls	r1, r0, #25
 800cf76:	d5f1      	bpl.n	800cf5c <_printf_i+0x88>
 800cf78:	b22d      	sxth	r5, r5
 800cf7a:	e7ef      	b.n	800cf5c <_printf_i+0x88>
 800cf7c:	680d      	ldr	r5, [r1, #0]
 800cf7e:	6819      	ldr	r1, [r3, #0]
 800cf80:	1d08      	adds	r0, r1, #4
 800cf82:	6018      	str	r0, [r3, #0]
 800cf84:	062e      	lsls	r6, r5, #24
 800cf86:	d501      	bpl.n	800cf8c <_printf_i+0xb8>
 800cf88:	680d      	ldr	r5, [r1, #0]
 800cf8a:	e003      	b.n	800cf94 <_printf_i+0xc0>
 800cf8c:	066d      	lsls	r5, r5, #25
 800cf8e:	d5fb      	bpl.n	800cf88 <_printf_i+0xb4>
 800cf90:	680d      	ldr	r5, [r1, #0]
 800cf92:	b2ad      	uxth	r5, r5
 800cf94:	4b56      	ldr	r3, [pc, #344]	; (800d0f0 <_printf_i+0x21c>)
 800cf96:	270a      	movs	r7, #10
 800cf98:	9303      	str	r3, [sp, #12]
 800cf9a:	2a6f      	cmp	r2, #111	; 0x6f
 800cf9c:	d117      	bne.n	800cfce <_printf_i+0xfa>
 800cf9e:	2708      	movs	r7, #8
 800cfa0:	e015      	b.n	800cfce <_printf_i+0xfa>
 800cfa2:	3145      	adds	r1, #69	; 0x45
 800cfa4:	700a      	strb	r2, [r1, #0]
 800cfa6:	4a52      	ldr	r2, [pc, #328]	; (800d0f0 <_printf_i+0x21c>)
 800cfa8:	9203      	str	r2, [sp, #12]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	6821      	ldr	r1, [r4, #0]
 800cfae:	ca20      	ldmia	r2!, {r5}
 800cfb0:	601a      	str	r2, [r3, #0]
 800cfb2:	0608      	lsls	r0, r1, #24
 800cfb4:	d550      	bpl.n	800d058 <_printf_i+0x184>
 800cfb6:	07cb      	lsls	r3, r1, #31
 800cfb8:	d502      	bpl.n	800cfc0 <_printf_i+0xec>
 800cfba:	2320      	movs	r3, #32
 800cfbc:	4319      	orrs	r1, r3
 800cfbe:	6021      	str	r1, [r4, #0]
 800cfc0:	2710      	movs	r7, #16
 800cfc2:	2d00      	cmp	r5, #0
 800cfc4:	d103      	bne.n	800cfce <_printf_i+0xfa>
 800cfc6:	2320      	movs	r3, #32
 800cfc8:	6822      	ldr	r2, [r4, #0]
 800cfca:	439a      	bics	r2, r3
 800cfcc:	6022      	str	r2, [r4, #0]
 800cfce:	0023      	movs	r3, r4
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	3343      	adds	r3, #67	; 0x43
 800cfd4:	701a      	strb	r2, [r3, #0]
 800cfd6:	6863      	ldr	r3, [r4, #4]
 800cfd8:	60a3      	str	r3, [r4, #8]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	db03      	blt.n	800cfe6 <_printf_i+0x112>
 800cfde:	2204      	movs	r2, #4
 800cfe0:	6821      	ldr	r1, [r4, #0]
 800cfe2:	4391      	bics	r1, r2
 800cfe4:	6021      	str	r1, [r4, #0]
 800cfe6:	2d00      	cmp	r5, #0
 800cfe8:	d102      	bne.n	800cff0 <_printf_i+0x11c>
 800cfea:	9e04      	ldr	r6, [sp, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00c      	beq.n	800d00a <_printf_i+0x136>
 800cff0:	9e04      	ldr	r6, [sp, #16]
 800cff2:	0028      	movs	r0, r5
 800cff4:	0039      	movs	r1, r7
 800cff6:	f7f3 f91f 	bl	8000238 <__aeabi_uidivmod>
 800cffa:	9b03      	ldr	r3, [sp, #12]
 800cffc:	3e01      	subs	r6, #1
 800cffe:	5c5b      	ldrb	r3, [r3, r1]
 800d000:	7033      	strb	r3, [r6, #0]
 800d002:	002b      	movs	r3, r5
 800d004:	0005      	movs	r5, r0
 800d006:	429f      	cmp	r7, r3
 800d008:	d9f3      	bls.n	800cff2 <_printf_i+0x11e>
 800d00a:	2f08      	cmp	r7, #8
 800d00c:	d109      	bne.n	800d022 <_printf_i+0x14e>
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	07db      	lsls	r3, r3, #31
 800d012:	d506      	bpl.n	800d022 <_printf_i+0x14e>
 800d014:	6863      	ldr	r3, [r4, #4]
 800d016:	6922      	ldr	r2, [r4, #16]
 800d018:	4293      	cmp	r3, r2
 800d01a:	dc02      	bgt.n	800d022 <_printf_i+0x14e>
 800d01c:	2330      	movs	r3, #48	; 0x30
 800d01e:	3e01      	subs	r6, #1
 800d020:	7033      	strb	r3, [r6, #0]
 800d022:	9b04      	ldr	r3, [sp, #16]
 800d024:	1b9b      	subs	r3, r3, r6
 800d026:	6123      	str	r3, [r4, #16]
 800d028:	9b07      	ldr	r3, [sp, #28]
 800d02a:	0021      	movs	r1, r4
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	9805      	ldr	r0, [sp, #20]
 800d030:	9b06      	ldr	r3, [sp, #24]
 800d032:	aa09      	add	r2, sp, #36	; 0x24
 800d034:	f7ff fede 	bl	800cdf4 <_printf_common>
 800d038:	1c43      	adds	r3, r0, #1
 800d03a:	d135      	bne.n	800d0a8 <_printf_i+0x1d4>
 800d03c:	2001      	movs	r0, #1
 800d03e:	4240      	negs	r0, r0
 800d040:	b00b      	add	sp, #44	; 0x2c
 800d042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d044:	2220      	movs	r2, #32
 800d046:	6809      	ldr	r1, [r1, #0]
 800d048:	430a      	orrs	r2, r1
 800d04a:	6022      	str	r2, [r4, #0]
 800d04c:	0022      	movs	r2, r4
 800d04e:	2178      	movs	r1, #120	; 0x78
 800d050:	3245      	adds	r2, #69	; 0x45
 800d052:	7011      	strb	r1, [r2, #0]
 800d054:	4a27      	ldr	r2, [pc, #156]	; (800d0f4 <_printf_i+0x220>)
 800d056:	e7a7      	b.n	800cfa8 <_printf_i+0xd4>
 800d058:	0648      	lsls	r0, r1, #25
 800d05a:	d5ac      	bpl.n	800cfb6 <_printf_i+0xe2>
 800d05c:	b2ad      	uxth	r5, r5
 800d05e:	e7aa      	b.n	800cfb6 <_printf_i+0xe2>
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	680d      	ldr	r5, [r1, #0]
 800d064:	1d10      	adds	r0, r2, #4
 800d066:	6949      	ldr	r1, [r1, #20]
 800d068:	6018      	str	r0, [r3, #0]
 800d06a:	6813      	ldr	r3, [r2, #0]
 800d06c:	062e      	lsls	r6, r5, #24
 800d06e:	d501      	bpl.n	800d074 <_printf_i+0x1a0>
 800d070:	6019      	str	r1, [r3, #0]
 800d072:	e002      	b.n	800d07a <_printf_i+0x1a6>
 800d074:	066d      	lsls	r5, r5, #25
 800d076:	d5fb      	bpl.n	800d070 <_printf_i+0x19c>
 800d078:	8019      	strh	r1, [r3, #0]
 800d07a:	2300      	movs	r3, #0
 800d07c:	9e04      	ldr	r6, [sp, #16]
 800d07e:	6123      	str	r3, [r4, #16]
 800d080:	e7d2      	b.n	800d028 <_printf_i+0x154>
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	1d11      	adds	r1, r2, #4
 800d086:	6019      	str	r1, [r3, #0]
 800d088:	6816      	ldr	r6, [r2, #0]
 800d08a:	2100      	movs	r1, #0
 800d08c:	0030      	movs	r0, r6
 800d08e:	6862      	ldr	r2, [r4, #4]
 800d090:	f000 f834 	bl	800d0fc <memchr>
 800d094:	2800      	cmp	r0, #0
 800d096:	d001      	beq.n	800d09c <_printf_i+0x1c8>
 800d098:	1b80      	subs	r0, r0, r6
 800d09a:	6060      	str	r0, [r4, #4]
 800d09c:	6863      	ldr	r3, [r4, #4]
 800d09e:	6123      	str	r3, [r4, #16]
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	9a04      	ldr	r2, [sp, #16]
 800d0a4:	7013      	strb	r3, [r2, #0]
 800d0a6:	e7bf      	b.n	800d028 <_printf_i+0x154>
 800d0a8:	6923      	ldr	r3, [r4, #16]
 800d0aa:	0032      	movs	r2, r6
 800d0ac:	9906      	ldr	r1, [sp, #24]
 800d0ae:	9805      	ldr	r0, [sp, #20]
 800d0b0:	9d07      	ldr	r5, [sp, #28]
 800d0b2:	47a8      	blx	r5
 800d0b4:	1c43      	adds	r3, r0, #1
 800d0b6:	d0c1      	beq.n	800d03c <_printf_i+0x168>
 800d0b8:	6823      	ldr	r3, [r4, #0]
 800d0ba:	079b      	lsls	r3, r3, #30
 800d0bc:	d415      	bmi.n	800d0ea <_printf_i+0x216>
 800d0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0c0:	68e0      	ldr	r0, [r4, #12]
 800d0c2:	4298      	cmp	r0, r3
 800d0c4:	dabc      	bge.n	800d040 <_printf_i+0x16c>
 800d0c6:	0018      	movs	r0, r3
 800d0c8:	e7ba      	b.n	800d040 <_printf_i+0x16c>
 800d0ca:	0022      	movs	r2, r4
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	9906      	ldr	r1, [sp, #24]
 800d0d0:	9805      	ldr	r0, [sp, #20]
 800d0d2:	9e07      	ldr	r6, [sp, #28]
 800d0d4:	3219      	adds	r2, #25
 800d0d6:	47b0      	blx	r6
 800d0d8:	1c43      	adds	r3, r0, #1
 800d0da:	d0af      	beq.n	800d03c <_printf_i+0x168>
 800d0dc:	3501      	adds	r5, #1
 800d0de:	68e3      	ldr	r3, [r4, #12]
 800d0e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0e2:	1a9b      	subs	r3, r3, r2
 800d0e4:	42ab      	cmp	r3, r5
 800d0e6:	dcf0      	bgt.n	800d0ca <_printf_i+0x1f6>
 800d0e8:	e7e9      	b.n	800d0be <_printf_i+0x1ea>
 800d0ea:	2500      	movs	r5, #0
 800d0ec:	e7f7      	b.n	800d0de <_printf_i+0x20a>
 800d0ee:	46c0      	nop			; (mov r8, r8)
 800d0f0:	0800d3f9 	.word	0x0800d3f9
 800d0f4:	0800d40a 	.word	0x0800d40a

0800d0f8 <__retarget_lock_acquire_recursive>:
 800d0f8:	4770      	bx	lr

0800d0fa <__retarget_lock_release_recursive>:
 800d0fa:	4770      	bx	lr

0800d0fc <memchr>:
 800d0fc:	b2c9      	uxtb	r1, r1
 800d0fe:	1882      	adds	r2, r0, r2
 800d100:	4290      	cmp	r0, r2
 800d102:	d101      	bne.n	800d108 <memchr+0xc>
 800d104:	2000      	movs	r0, #0
 800d106:	4770      	bx	lr
 800d108:	7803      	ldrb	r3, [r0, #0]
 800d10a:	428b      	cmp	r3, r1
 800d10c:	d0fb      	beq.n	800d106 <memchr+0xa>
 800d10e:	3001      	adds	r0, #1
 800d110:	e7f6      	b.n	800d100 <memchr+0x4>

0800d112 <memmove>:
 800d112:	b510      	push	{r4, lr}
 800d114:	4288      	cmp	r0, r1
 800d116:	d902      	bls.n	800d11e <memmove+0xc>
 800d118:	188b      	adds	r3, r1, r2
 800d11a:	4298      	cmp	r0, r3
 800d11c:	d303      	bcc.n	800d126 <memmove+0x14>
 800d11e:	2300      	movs	r3, #0
 800d120:	e007      	b.n	800d132 <memmove+0x20>
 800d122:	5c8b      	ldrb	r3, [r1, r2]
 800d124:	5483      	strb	r3, [r0, r2]
 800d126:	3a01      	subs	r2, #1
 800d128:	d2fb      	bcs.n	800d122 <memmove+0x10>
 800d12a:	bd10      	pop	{r4, pc}
 800d12c:	5ccc      	ldrb	r4, [r1, r3]
 800d12e:	54c4      	strb	r4, [r0, r3]
 800d130:	3301      	adds	r3, #1
 800d132:	429a      	cmp	r2, r3
 800d134:	d1fa      	bne.n	800d12c <memmove+0x1a>
 800d136:	e7f8      	b.n	800d12a <memmove+0x18>

0800d138 <_realloc_r>:
 800d138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13a:	0007      	movs	r7, r0
 800d13c:	000d      	movs	r5, r1
 800d13e:	0016      	movs	r6, r2
 800d140:	2900      	cmp	r1, #0
 800d142:	d105      	bne.n	800d150 <_realloc_r+0x18>
 800d144:	0011      	movs	r1, r2
 800d146:	f7ff fc53 	bl	800c9f0 <_malloc_r>
 800d14a:	0004      	movs	r4, r0
 800d14c:	0020      	movs	r0, r4
 800d14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d150:	2a00      	cmp	r2, #0
 800d152:	d103      	bne.n	800d15c <_realloc_r+0x24>
 800d154:	f7ff fc02 	bl	800c95c <_free_r>
 800d158:	0034      	movs	r4, r6
 800d15a:	e7f7      	b.n	800d14c <_realloc_r+0x14>
 800d15c:	f000 f812 	bl	800d184 <_malloc_usable_size_r>
 800d160:	002c      	movs	r4, r5
 800d162:	42b0      	cmp	r0, r6
 800d164:	d2f2      	bcs.n	800d14c <_realloc_r+0x14>
 800d166:	0031      	movs	r1, r6
 800d168:	0038      	movs	r0, r7
 800d16a:	f7ff fc41 	bl	800c9f0 <_malloc_r>
 800d16e:	1e04      	subs	r4, r0, #0
 800d170:	d0ec      	beq.n	800d14c <_realloc_r+0x14>
 800d172:	0029      	movs	r1, r5
 800d174:	0032      	movs	r2, r6
 800d176:	f7ff fbdf 	bl	800c938 <memcpy>
 800d17a:	0029      	movs	r1, r5
 800d17c:	0038      	movs	r0, r7
 800d17e:	f7ff fbed 	bl	800c95c <_free_r>
 800d182:	e7e3      	b.n	800d14c <_realloc_r+0x14>

0800d184 <_malloc_usable_size_r>:
 800d184:	1f0b      	subs	r3, r1, #4
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	1f18      	subs	r0, r3, #4
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	da01      	bge.n	800d192 <_malloc_usable_size_r+0xe>
 800d18e:	580b      	ldr	r3, [r1, r0]
 800d190:	18c0      	adds	r0, r0, r3
 800d192:	4770      	bx	lr

0800d194 <_init>:
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d196:	46c0      	nop			; (mov r8, r8)
 800d198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19a:	bc08      	pop	{r3}
 800d19c:	469e      	mov	lr, r3
 800d19e:	4770      	bx	lr

0800d1a0 <_fini>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	46c0      	nop			; (mov r8, r8)
 800d1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a6:	bc08      	pop	{r3}
 800d1a8:	469e      	mov	lr, r3
 800d1aa:	4770      	bx	lr
