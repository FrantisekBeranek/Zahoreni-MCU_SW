
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  0800e094  0800e094  0001e094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3f0  0800e3f0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e3f0  0800e3f0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e3f0  0800e3f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3f0  0800e3f0  0001e3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3f4  0800e3f4  0001e3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e3f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013fc  200001e0  0800e5d8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  0800e5d8  000215dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e65a  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004911  00000000  00000000  0003e862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001780  00000000  00000000  00043178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  000448f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202ab  00000000  00000000  00045e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b45  00000000  00000000  0006613b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4641  00000000  00000000  00086c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b2c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005760  00000000  00000000  0012b314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e07c 	.word	0x0800e07c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800e07c 	.word	0x0800e07c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b0ab      	sub	sp, #172	; 0xac
 800041c:	af00      	add	r7, sp, #0
	//___Ošetření plného bufferu___//
	if(USB_Rx_Buffer->status == BUFFER_FULL)
 800041e:	4bdf      	ldr	r3, [pc, #892]	; (800079c <comHandler+0x384>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	7d1b      	ldrb	r3, [r3, #20]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d109      	bne.n	800043c <comHandler+0x24>
	{
		flags.data_received = 0;
 8000428:	4bdd      	ldr	r3, [pc, #884]	; (80007a0 <comHandler+0x388>)
 800042a:	7a1a      	ldrb	r2, [r3, #8]
 800042c:	2101      	movs	r1, #1
 800042e:	438a      	bics	r2, r1
 8000430:	721a      	strb	r2, [r3, #8]
		clearBuffer(USB_Rx_Buffer);
 8000432:	4bda      	ldr	r3, [pc, #872]	; (800079c <comHandler+0x384>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	0018      	movs	r0, r3
 8000438:	f002 f8e0 	bl	80025fc <clearBuffer>
	}

	//___Příjem dat___//
	if(flags.data_received)
 800043c:	4bd8      	ldr	r3, [pc, #864]	; (80007a0 <comHandler+0x388>)
 800043e:	7a1b      	ldrb	r3, [r3, #8]
 8000440:	2201      	movs	r2, #1
 8000442:	4013      	ands	r3, r2
 8000444:	b2db      	uxtb	r3, r3
 8000446:	2b00      	cmp	r3, #0
 8000448:	d100      	bne.n	800044c <comHandler+0x34>
 800044a:	e111      	b.n	8000670 <comHandler+0x258>
	{
		int start = 0;	//flag o nalezení počátku paketu
 800044c:	2300      	movs	r3, #0
 800044e:	2294      	movs	r2, #148	; 0x94
 8000450:	18ba      	adds	r2, r7, r2
 8000452:	6013      	str	r3, [r2, #0]

		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000454:	2300      	movs	r3, #0
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	2118      	movs	r1, #24
 800045a:	1852      	adds	r2, r2, r1
 800045c:	19d2      	adds	r2, r2, r7
 800045e:	6013      	str	r3, [r2, #0]
 8000460:	e05e      	b.n	8000520 <comHandler+0x108>
		{
			//Přečti znaky na pozici i a i+1
			char tmp1, tmp2;
			at(USB_Rx_Buffer, i, &tmp1);
 8000462:	4bce      	ldr	r3, [pc, #824]	; (800079c <comHandler+0x384>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2467      	movs	r4, #103	; 0x67
 8000468:	2218      	movs	r2, #24
 800046a:	18a2      	adds	r2, r4, r2
 800046c:	19d2      	adds	r2, r2, r7
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	2018      	movs	r0, #24
 8000472:	1809      	adds	r1, r1, r0
 8000474:	19c8      	adds	r0, r1, r7
 8000476:	6801      	ldr	r1, [r0, #0]
 8000478:	0018      	movs	r0, r3
 800047a:	f002 f967 	bl	800274c <at>
			at(USB_Rx_Buffer, i+1, &tmp2);
 800047e:	4bc7      	ldr	r3, [pc, #796]	; (800079c <comHandler+0x384>)
 8000480:	6818      	ldr	r0, [r3, #0]
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	2318      	movs	r3, #24
 8000486:	18cb      	adds	r3, r1, r3
 8000488:	19db      	adds	r3, r3, r7
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3301      	adds	r3, #1
 800048e:	2266      	movs	r2, #102	; 0x66
 8000490:	2118      	movs	r1, #24
 8000492:	1852      	adds	r2, r2, r1
 8000494:	19d2      	adds	r2, r2, r7
 8000496:	0019      	movs	r1, r3
 8000498:	f002 f958 	bl	800274c <at>

			if(tmp1 == '>' && tmp1 == '>')	//začátek paketu
 800049c:	2318      	movs	r3, #24
 800049e:	18e3      	adds	r3, r4, r3
 80004a0:	19db      	adds	r3, r3, r7
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b3e      	cmp	r3, #62	; 0x3e
 80004a6:	d131      	bne.n	800050c <comHandler+0xf4>
 80004a8:	2318      	movs	r3, #24
 80004aa:	18e3      	adds	r3, r4, r3
 80004ac:	19db      	adds	r3, r3, r7
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b3e      	cmp	r3, #62	; 0x3e
 80004b2:	d12b      	bne.n	800050c <comHandler+0xf4>
			{
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004b4:	2300      	movs	r3, #0
 80004b6:	2284      	movs	r2, #132	; 0x84
 80004b8:	2118      	movs	r1, #24
 80004ba:	1852      	adds	r2, r2, r1
 80004bc:	19d2      	adds	r2, r2, r7
 80004be:	6013      	str	r3, [r2, #0]
 80004c0:	e013      	b.n	80004ea <comHandler+0xd2>
				{
					char tmp;
					pop(USB_Rx_Buffer, &tmp);
 80004c2:	4bb6      	ldr	r3, [pc, #728]	; (800079c <comHandler+0x384>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2265      	movs	r2, #101	; 0x65
 80004c8:	2118      	movs	r1, #24
 80004ca:	1852      	adds	r2, r2, r1
 80004cc:	19d2      	adds	r2, r2, r7
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 f908 	bl	80026e6 <pop>
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004d6:	2284      	movs	r2, #132	; 0x84
 80004d8:	2318      	movs	r3, #24
 80004da:	18d3      	adds	r3, r2, r3
 80004dc:	19db      	adds	r3, r3, r7
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	2118      	movs	r1, #24
 80004e4:	1852      	adds	r2, r2, r1
 80004e6:	19d2      	adds	r2, r2, r7
 80004e8:	6013      	str	r3, [r2, #0]
 80004ea:	2384      	movs	r3, #132	; 0x84
 80004ec:	2218      	movs	r2, #24
 80004ee:	189b      	adds	r3, r3, r2
 80004f0:	19db      	adds	r3, r3, r7
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	2118      	movs	r1, #24
 80004f8:	185b      	adds	r3, r3, r1
 80004fa:	19db      	adds	r3, r3, r7
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	429a      	cmp	r2, r3
 8000500:	dbdf      	blt.n	80004c2 <comHandler+0xaa>
				}
				start = 1;	//nastav flag o nalezení počátku
 8000502:	2301      	movs	r3, #1
 8000504:	2294      	movs	r2, #148	; 0x94
 8000506:	18ba      	adds	r2, r7, r2
 8000508:	6013      	str	r3, [r2, #0]
 800050a:	e013      	b.n	8000534 <comHandler+0x11c>
		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	2318      	movs	r3, #24
 8000510:	18d3      	adds	r3, r2, r3
 8000512:	19db      	adds	r3, r3, r7
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	2118      	movs	r1, #24
 800051a:	1852      	adds	r2, r2, r1
 800051c:	19d2      	adds	r2, r2, r7
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4b9e      	ldr	r3, [pc, #632]	; (800079c <comHandler+0x384>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	2118      	movs	r1, #24
 800052a:	1852      	adds	r2, r2, r1
 800052c:	19d2      	adds	r2, r2, r7
 800052e:	6812      	ldr	r2, [r2, #0]
 8000530:	429a      	cmp	r2, r3
 8000532:	db96      	blt.n	8000462 <comHandler+0x4a>
				break;
			}
		}

		if(start)	//počátek byl nalezen
 8000534:	2394      	movs	r3, #148	; 0x94
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d100      	bne.n	8000540 <comHandler+0x128>
 800053e:	e092      	b.n	8000666 <comHandler+0x24e>
		{
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000540:	2300      	movs	r3, #0
 8000542:	2288      	movs	r2, #136	; 0x88
 8000544:	2118      	movs	r1, #24
 8000546:	1852      	adds	r2, r2, r1
 8000548:	19d2      	adds	r2, r2, r7
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	e080      	b.n	8000650 <comHandler+0x238>
			{
				//Přečti znaky na pozici i a i+1
				char tmp1, tmp2;
				at(USB_Rx_Buffer, i, &tmp1);
 800054e:	4b93      	ldr	r3, [pc, #588]	; (800079c <comHandler+0x384>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2464      	movs	r4, #100	; 0x64
 8000554:	2218      	movs	r2, #24
 8000556:	18a2      	adds	r2, r4, r2
 8000558:	19d2      	adds	r2, r2, r7
 800055a:	2188      	movs	r1, #136	; 0x88
 800055c:	2018      	movs	r0, #24
 800055e:	1809      	adds	r1, r1, r0
 8000560:	19c8      	adds	r0, r1, r7
 8000562:	6801      	ldr	r1, [r0, #0]
 8000564:	0018      	movs	r0, r3
 8000566:	f002 f8f1 	bl	800274c <at>
				at(USB_Rx_Buffer, i+1, &tmp2);
 800056a:	4b8c      	ldr	r3, [pc, #560]	; (800079c <comHandler+0x384>)
 800056c:	6818      	ldr	r0, [r3, #0]
 800056e:	2188      	movs	r1, #136	; 0x88
 8000570:	2318      	movs	r3, #24
 8000572:	18cb      	adds	r3, r1, r3
 8000574:	19db      	adds	r3, r3, r7
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	2263      	movs	r2, #99	; 0x63
 800057c:	2118      	movs	r1, #24
 800057e:	1852      	adds	r2, r2, r1
 8000580:	19d2      	adds	r2, r2, r7
 8000582:	0019      	movs	r1, r3
 8000584:	f002 f8e2 	bl	800274c <at>

				if(tmp1 == '<' && tmp1 == '<')	//konec paketu
 8000588:	2318      	movs	r3, #24
 800058a:	18e3      	adds	r3, r4, r3
 800058c:	19db      	adds	r3, r3, r7
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b3c      	cmp	r3, #60	; 0x3c
 8000592:	d153      	bne.n	800063c <comHandler+0x224>
 8000594:	2318      	movs	r3, #24
 8000596:	18e3      	adds	r3, r4, r3
 8000598:	19db      	adds	r3, r3, r7
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b3c      	cmp	r3, #60	; 0x3c
 800059e:	d14d      	bne.n	800063c <comHandler+0x224>
				{
					uint8_t* tmp = (uint8_t*)malloc((i+2)*sizeof(uint8_t));
 80005a0:	2188      	movs	r1, #136	; 0x88
 80005a2:	2318      	movs	r3, #24
 80005a4:	18cb      	adds	r3, r1, r3
 80005a6:	19db      	adds	r3, r3, r7
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	3302      	adds	r3, #2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f00d f8df 	bl	800d770 <malloc>
 80005b2:	0003      	movs	r3, r0
 80005b4:	228c      	movs	r2, #140	; 0x8c
 80005b6:	18ba      	adds	r2, r7, r2
 80005b8:	6013      	str	r3, [r2, #0]
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 80005ba:	2300      	movs	r3, #0
 80005bc:	228c      	movs	r2, #140	; 0x8c
 80005be:	2118      	movs	r1, #24
 80005c0:	1852      	adds	r2, r2, r1
 80005c2:	19d2      	adds	r2, r2, r7
 80005c4:	6013      	str	r3, [r2, #0]
 80005c6:	e017      	b.n	80005f8 <comHandler+0x1e0>
					{
						pop(USB_Rx_Buffer, &tmp[y]);
 80005c8:	4b74      	ldr	r3, [pc, #464]	; (800079c <comHandler+0x384>)
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	248c      	movs	r4, #140	; 0x8c
 80005ce:	2318      	movs	r3, #24
 80005d0:	18e3      	adds	r3, r4, r3
 80005d2:	19db      	adds	r3, r3, r7
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	228c      	movs	r2, #140	; 0x8c
 80005d8:	18ba      	adds	r2, r7, r2
 80005da:	6812      	ldr	r2, [r2, #0]
 80005dc:	18d3      	adds	r3, r2, r3
 80005de:	0019      	movs	r1, r3
 80005e0:	f002 f881 	bl	80026e6 <pop>
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 80005e4:	0022      	movs	r2, r4
 80005e6:	2318      	movs	r3, #24
 80005e8:	18d3      	adds	r3, r2, r3
 80005ea:	19db      	adds	r3, r3, r7
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2118      	movs	r1, #24
 80005f2:	1852      	adds	r2, r2, r1
 80005f4:	19d2      	adds	r2, r2, r7
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	2188      	movs	r1, #136	; 0x88
 80005fa:	2318      	movs	r3, #24
 80005fc:	18cb      	adds	r3, r1, r3
 80005fe:	19db      	adds	r3, r3, r7
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	228c      	movs	r2, #140	; 0x8c
 8000606:	2018      	movs	r0, #24
 8000608:	1812      	adds	r2, r2, r0
 800060a:	19d2      	adds	r2, r2, r7
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	429a      	cmp	r2, r3
 8000610:	ddda      	ble.n	80005c8 <comHandler+0x1b0>
					}

					decodePaket(tmp, i+2);
 8000612:	2318      	movs	r3, #24
 8000614:	18cb      	adds	r3, r1, r3
 8000616:	19db      	adds	r3, r3, r7
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	3302      	adds	r3, #2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	238c      	movs	r3, #140	; 0x8c
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fb15 	bl	8000c58 <decodePaket>
					free(tmp);
 800062e:	238c      	movs	r3, #140	; 0x8c
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	0018      	movs	r0, r3
 8000636:	f00d f8a5 	bl	800d784 <free>
					break;
 800063a:	e014      	b.n	8000666 <comHandler+0x24e>
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 800063c:	2288      	movs	r2, #136	; 0x88
 800063e:	2318      	movs	r3, #24
 8000640:	18d3      	adds	r3, r2, r3
 8000642:	19db      	adds	r3, r3, r7
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	2118      	movs	r1, #24
 800064a:	1852      	adds	r2, r2, r1
 800064c:	19d2      	adds	r2, r2, r7
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b52      	ldr	r3, [pc, #328]	; (800079c <comHandler+0x384>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	2288      	movs	r2, #136	; 0x88
 8000658:	2118      	movs	r1, #24
 800065a:	1852      	adds	r2, r2, r1
 800065c:	19d2      	adds	r2, r2, r7
 800065e:	6812      	ldr	r2, [r2, #0]
 8000660:	429a      	cmp	r2, r3
 8000662:	da00      	bge.n	8000666 <comHandler+0x24e>
 8000664:	e773      	b.n	800054e <comHandler+0x136>
				}
			}
		}

		flags.data_received = 0;
 8000666:	4b4e      	ldr	r3, [pc, #312]	; (80007a0 <comHandler+0x388>)
 8000668:	7a1a      	ldrb	r2, [r3, #8]
 800066a:	2101      	movs	r1, #1
 800066c:	438a      	bics	r2, r1
 800066e:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)	//Pokud test pokročil...
 8000670:	4b4b      	ldr	r3, [pc, #300]	; (80007a0 <comHandler+0x388>)
 8000672:	7e1b      	ldrb	r3, [r3, #24]
 8000674:	2202      	movs	r2, #2
 8000676:	4013      	ands	r3, r2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d04f      	beq.n	800071e <comHandler+0x306>
	{
		//...zjisti v jaké je fázi...
		char testPhaseChr;
		switch(currentPhase())
 800067e:	f002 fb7f 	bl	8002d80 <currentPhase>
 8000682:	0003      	movs	r3, r0
 8000684:	2b06      	cmp	r3, #6
 8000686:	d82e      	bhi.n	80006e6 <comHandler+0x2ce>
 8000688:	009a      	lsls	r2, r3, #2
 800068a:	4b46      	ldr	r3, [pc, #280]	; (80007a4 <comHandler+0x38c>)
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 8000692:	2362      	movs	r3, #98	; 0x62
 8000694:	2218      	movs	r2, #24
 8000696:	189b      	adds	r3, r3, r2
 8000698:	19db      	adds	r3, r3, r7
 800069a:	2273      	movs	r2, #115	; 0x73
 800069c:	701a      	strb	r2, [r3, #0]
			break;
 800069e:	e029      	b.n	80006f4 <comHandler+0x2dc>
		case START_DONE:
			testPhaseChr = 's';
 80006a0:	2362      	movs	r3, #98	; 0x62
 80006a2:	2218      	movs	r2, #24
 80006a4:	189b      	adds	r3, r3, r2
 80006a6:	19db      	adds	r3, r3, r7
 80006a8:	2273      	movs	r2, #115	; 0x73
 80006aa:	701a      	strb	r2, [r3, #0]
			break;
 80006ac:	e022      	b.n	80006f4 <comHandler+0x2dc>
		case MAIN_TEST:
			testPhaseChr = 'm';
 80006ae:	2362      	movs	r3, #98	; 0x62
 80006b0:	2218      	movs	r2, #24
 80006b2:	189b      	adds	r3, r3, r2
 80006b4:	19db      	adds	r3, r3, r7
 80006b6:	226d      	movs	r2, #109	; 0x6d
 80006b8:	701a      	strb	r2, [r3, #0]
			break;
 80006ba:	e01b      	b.n	80006f4 <comHandler+0x2dc>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 80006bc:	2362      	movs	r3, #98	; 0x62
 80006be:	2218      	movs	r2, #24
 80006c0:	189b      	adds	r3, r3, r2
 80006c2:	19db      	adds	r3, r3, r7
 80006c4:	226d      	movs	r2, #109	; 0x6d
 80006c6:	701a      	strb	r2, [r3, #0]
			break;
 80006c8:	e014      	b.n	80006f4 <comHandler+0x2dc>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 80006ca:	2362      	movs	r3, #98	; 0x62
 80006cc:	2218      	movs	r2, #24
 80006ce:	189b      	adds	r3, r3, r2
 80006d0:	19db      	adds	r3, r3, r7
 80006d2:	2262      	movs	r2, #98	; 0x62
 80006d4:	701a      	strb	r2, [r3, #0]
			break;
 80006d6:	e00d      	b.n	80006f4 <comHandler+0x2dc>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 80006d8:	2362      	movs	r3, #98	; 0x62
 80006da:	2218      	movs	r2, #24
 80006dc:	189b      	adds	r3, r3, r2
 80006de:	19db      	adds	r3, r3, r7
 80006e0:	224d      	movs	r2, #77	; 0x4d
 80006e2:	701a      	strb	r2, [r3, #0]
			break;
 80006e4:	e006      	b.n	80006f4 <comHandler+0x2dc>
		default:
			testPhaseChr = 'e';
 80006e6:	2362      	movs	r3, #98	; 0x62
 80006e8:	2218      	movs	r2, #24
 80006ea:	189b      	adds	r3, r3, r2
 80006ec:	19db      	adds	r3, r3, r7
 80006ee:	2265      	movs	r2, #101	; 0x65
 80006f0:	701a      	strb	r2, [r3, #0]
			break;
 80006f2:	46c0      	nop			; (mov r8, r8)
		}

		//...a upozorni na to PC
		Paket paket;
		fillPaket(&paket, TEST_PHASE_PAKET, &testPhaseChr, 1);
 80006f4:	2362      	movs	r3, #98	; 0x62
 80006f6:	2218      	movs	r2, #24
 80006f8:	189b      	adds	r3, r3, r2
 80006fa:	19da      	adds	r2, r3, r7
 80006fc:	2454      	movs	r4, #84	; 0x54
 80006fe:	2318      	movs	r3, #24
 8000700:	18e3      	adds	r3, r4, r3
 8000702:	19d8      	adds	r0, r3, r7
 8000704:	2301      	movs	r3, #1
 8000706:	2104      	movs	r1, #4
 8000708:	f000 f9aa 	bl	8000a60 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <comHandler+0x390>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2218      	movs	r2, #24
 8000712:	18a2      	adds	r2, r4, r2
 8000714:	19d2      	adds	r2, r2, r7
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f000 f9e1 	bl	8000ae0 <pushPaket>
	}

	if(flags.meas.measComplete)	//Jsou připravena data k odeslání
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <comHandler+0x388>)
 8000720:	7d1b      	ldrb	r3, [r3, #20]
 8000722:	2202      	movs	r2, #2
 8000724:	4013      	ands	r3, r2
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d056      	beq.n	80007da <comHandler+0x3c2>
	{
		if(!flags.meas.calibMeas)
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <comHandler+0x388>)
 800072e:	7d1b      	ldrb	r3, [r3, #20]
 8000730:	2240      	movs	r2, #64	; 0x40
 8000732:	4013      	ands	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d117      	bne.n	800076a <comHandler+0x352>
		{
			//Nejde o kalibrační data -> pošli číslo dat
			Paket paket;
			fillPaket(&paket, TEST_NUM_PAKET, &testNum, 1);
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <comHandler+0x394>)
 800073c:	243c      	movs	r4, #60	; 0x3c
 800073e:	2318      	movs	r3, #24
 8000740:	18e3      	adds	r3, r4, r3
 8000742:	19d8      	adds	r0, r3, r7
 8000744:	2301      	movs	r3, #1
 8000746:	2103      	movs	r1, #3
 8000748:	f000 f98a 	bl	8000a60 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <comHandler+0x390>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2218      	movs	r2, #24
 8000752:	18a2      	adds	r2, r4, r2
 8000754:	19d2      	adds	r2, r2, r7
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f000 f9c1 	bl	8000ae0 <pushPaket>
			testNum++;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <comHandler+0x394>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <comHandler+0x394>)
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	e004      	b.n	8000774 <comHandler+0x35c>
		}
		else
		{
			flags.meas.calibMeas = 0;
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <comHandler+0x388>)
 800076c:	7d1a      	ldrb	r2, [r3, #20]
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	438a      	bics	r2, r1
 8000772:	751a      	strb	r2, [r3, #20]
		}

		//___Připrav a odešli paket___//
		makeByteArray();
 8000774:	f000 f948 	bl	8000a08 <makeByteArray>
		Paket paket;
		if(flags.meas.onlyBattery)
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <comHandler+0x388>)
 800077a:	7d1b      	ldrb	r3, [r3, #20]
 800077c:	2220      	movs	r2, #32
 800077e:	4013      	ands	r3, r2
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d016      	beq.n	80007b4 <comHandler+0x39c>
		{
			fillPaket(&paket, DATA_BAT_PAKET, data+12, BAT_DATA_PAKET_LENGHT);
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <comHandler+0x398>)
 8000788:	2348      	movs	r3, #72	; 0x48
 800078a:	2118      	movs	r1, #24
 800078c:	185b      	adds	r3, r3, r1
 800078e:	19d8      	adds	r0, r3, r7
 8000790:	2302      	movs	r3, #2
 8000792:	2102      	movs	r1, #2
 8000794:	f000 f964 	bl	8000a60 <fillPaket>
 8000798:	e015      	b.n	80007c6 <comHandler+0x3ae>
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000eb4 	.word	0x20000eb4
 80007a0:	200003d0 	.word	0x200003d0
 80007a4:	0800e1bc 	.word	0x0800e1bc
 80007a8:	200001fc 	.word	0x200001fc
 80007ac:	20000410 	.word	0x20000410
 80007b0:	2000020c 	.word	0x2000020c
		}
		else
		{
			fillPaket(&paket, DATA_PAKET, data, DATA_PAKET_LENGHT);
 80007b4:	4a90      	ldr	r2, [pc, #576]	; (80009f8 <comHandler+0x5e0>)
 80007b6:	2348      	movs	r3, #72	; 0x48
 80007b8:	2118      	movs	r1, #24
 80007ba:	185b      	adds	r3, r3, r1
 80007bc:	19d8      	adds	r0, r3, r7
 80007be:	230e      	movs	r3, #14
 80007c0:	2101      	movs	r1, #1
 80007c2:	f000 f94d 	bl	8000a60 <fillPaket>
		}
		pushPaket(USB_Tx_Buffer, &paket);
 80007c6:	4b8d      	ldr	r3, [pc, #564]	; (80009fc <comHandler+0x5e4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2248      	movs	r2, #72	; 0x48
 80007cc:	2118      	movs	r1, #24
 80007ce:	1852      	adds	r2, r2, r1
 80007d0:	19d2      	adds	r2, r2, r7
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 f983 	bl	8000ae0 <pushPaket>
	}

#ifdef __APP_COMPATIBILITY__
	//___Odesílání refresh zprávy___//
	if(flags.time.sec)
 80007da:	4b89      	ldr	r3, [pc, #548]	; (8000a00 <comHandler+0x5e8>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2202      	movs	r2, #2
 80007e0:	4013      	ands	r3, r2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d011      	beq.n	800080c <comHandler+0x3f4>
	{
		Paket paket;
		fillPaket(&paket, REFRESH_PAKET, NULL, 0);
 80007e8:	2430      	movs	r4, #48	; 0x30
 80007ea:	2318      	movs	r3, #24
 80007ec:	18e3      	adds	r3, r4, r3
 80007ee:	19d8      	adds	r0, r3, r7
 80007f0:	2300      	movs	r3, #0
 80007f2:	2200      	movs	r2, #0
 80007f4:	2106      	movs	r1, #6
 80007f6:	f000 f933 	bl	8000a60 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 80007fa:	4b80      	ldr	r3, [pc, #512]	; (80009fc <comHandler+0x5e4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2218      	movs	r2, #24
 8000800:	18a2      	adds	r2, r4, r2
 8000802:	19d2      	adds	r2, r2, r7
 8000804:	0011      	movs	r1, r2
 8000806:	0018      	movs	r0, r3
 8000808:	f000 f96a 	bl	8000ae0 <pushPaket>
	}
#endif

	//___Upozornění o stavu topení___//
	switch(flags.heaterState)
 800080c:	4b7c      	ldr	r3, [pc, #496]	; (8000a00 <comHandler+0x5e8>)
 800080e:	7e1b      	ldrb	r3, [r3, #24]
 8000810:	069b      	lsls	r3, r3, #26
 8000812:	0f9b      	lsrs	r3, r3, #30
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b01      	cmp	r3, #1
 8000818:	d021      	beq.n	800085e <comHandler+0x446>
 800081a:	2b02      	cmp	r3, #2
 800081c:	d13f      	bne.n	800089e <comHandler+0x486>
	{
		Paket paket;
		uint8_t data;
	case HEATER_ERR :
		data = 0;
 800081e:	2123      	movs	r1, #35	; 0x23
 8000820:	2318      	movs	r3, #24
 8000822:	18cb      	adds	r3, r1, r3
 8000824:	19db      	adds	r3, r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, HEATER_PAKET, &data, 1);
 800082a:	2318      	movs	r3, #24
 800082c:	18cb      	adds	r3, r1, r3
 800082e:	19da      	adds	r2, r3, r7
 8000830:	2424      	movs	r4, #36	; 0x24
 8000832:	2318      	movs	r3, #24
 8000834:	18e3      	adds	r3, r4, r3
 8000836:	19d8      	adds	r0, r3, r7
 8000838:	2301      	movs	r3, #1
 800083a:	2107      	movs	r1, #7
 800083c:	f000 f910 	bl	8000a60 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000840:	4b6e      	ldr	r3, [pc, #440]	; (80009fc <comHandler+0x5e4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2218      	movs	r2, #24
 8000846:	18a2      	adds	r2, r4, r2
 8000848:	19d2      	adds	r2, r2, r7
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f000 f947 	bl	8000ae0 <pushPaket>
		flags.heaterState = 0;
 8000852:	4b6b      	ldr	r3, [pc, #428]	; (8000a00 <comHandler+0x5e8>)
 8000854:	7e1a      	ldrb	r2, [r3, #24]
 8000856:	2130      	movs	r1, #48	; 0x30
 8000858:	438a      	bics	r2, r1
 800085a:	761a      	strb	r2, [r3, #24]
		break;
 800085c:	e020      	b.n	80008a0 <comHandler+0x488>
	case HEATER_OK:
		data = 1;
 800085e:	2123      	movs	r1, #35	; 0x23
 8000860:	2318      	movs	r3, #24
 8000862:	18cb      	adds	r3, r1, r3
 8000864:	19db      	adds	r3, r3, r7
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, HEATER_PAKET, &data, 1);
 800086a:	2318      	movs	r3, #24
 800086c:	18cb      	adds	r3, r1, r3
 800086e:	19da      	adds	r2, r3, r7
 8000870:	2424      	movs	r4, #36	; 0x24
 8000872:	2318      	movs	r3, #24
 8000874:	18e3      	adds	r3, r4, r3
 8000876:	19d8      	adds	r0, r3, r7
 8000878:	2301      	movs	r3, #1
 800087a:	2107      	movs	r1, #7
 800087c:	f000 f8f0 	bl	8000a60 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000880:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <comHandler+0x5e4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2218      	movs	r2, #24
 8000886:	18a2      	adds	r2, r4, r2
 8000888:	19d2      	adds	r2, r2, r7
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f000 f927 	bl	8000ae0 <pushPaket>
		flags.heaterState = 0;
 8000892:	4b5b      	ldr	r3, [pc, #364]	; (8000a00 <comHandler+0x5e8>)
 8000894:	7e1a      	ldrb	r2, [r3, #24]
 8000896:	2130      	movs	r1, #48	; 0x30
 8000898:	438a      	bics	r2, r1
 800089a:	761a      	strb	r2, [r3, #24]
		break;
 800089c:	e000      	b.n	80008a0 <comHandler+0x488>
	default:	//0 => neprobehl test topeni
		break;
 800089e:	46c0      	nop			; (mov r8, r8)
	}

	if(flags.buttons.butt0_ver)
 80008a0:	4b57      	ldr	r3, [pc, #348]	; (8000a00 <comHandler+0x5e8>)
 80008a2:	791b      	ldrb	r3, [r3, #4]
 80008a4:	2202      	movs	r2, #2
 80008a6:	4013      	ands	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d011      	beq.n	80008d2 <comHandler+0x4ba>
	{
		Paket paket;
		fillPaket(&paket, CANCEL_FROM_USER_PAKET, NULL, 0);
 80008ae:	2414      	movs	r4, #20
 80008b0:	2318      	movs	r3, #24
 80008b2:	18e3      	adds	r3, r4, r3
 80008b4:	19d8      	adds	r0, r3, r7
 80008b6:	2300      	movs	r3, #0
 80008b8:	2200      	movs	r2, #0
 80008ba:	2108      	movs	r1, #8
 80008bc:	f000 f8d0 	bl	8000a60 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 80008c0:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <comHandler+0x5e4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2218      	movs	r2, #24
 80008c6:	18a2      	adds	r2, r4, r2
 80008c8:	19d2      	adds	r2, r2, r7
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 f907 	bl	8000ae0 <pushPaket>
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 80008d2:	4b4a      	ldr	r3, [pc, #296]	; (80009fc <comHandler+0x5e4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	7d1b      	ldrb	r3, [r3, #20]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d11c      	bne.n	8000916 <comHandler+0x4fe>
	{
		flags.ui.shortBeep = 1;
 80008dc:	4b48      	ldr	r3, [pc, #288]	; (8000a00 <comHandler+0x5e8>)
 80008de:	7c1a      	ldrb	r2, [r3, #16]
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	741a      	strb	r2, [r3, #16]
		char msg[] = {"Buffer full\n"};
 80008e6:	231c      	movs	r3, #28
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	4a46      	ldr	r2, [pc, #280]	; (8000a04 <comHandler+0x5ec>)
 80008ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008ee:	c313      	stmia	r3!, {r0, r1, r4}
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 80008f4:	231c      	movs	r3, #28
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff fc05 	bl	8000108 <strlen>
 80008fe:	0002      	movs	r2, r0
 8000900:	231c      	movs	r3, #28
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f00c fa4c 	bl	800cda4 <CDC_Transmit_FS>
		clearBuffer(USB_Tx_Buffer);
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <comHandler+0x5e4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fe73 	bl	80025fc <clearBuffer>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 8000916:	4b39      	ldr	r3, [pc, #228]	; (80009fc <comHandler+0x5e4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d066      	beq.n	80009ee <comHandler+0x5d6>
	{
 8000920:	466b      	mov	r3, sp
 8000922:	001c      	movs	r4, r3
		int size = USB_Tx_Buffer->filled;
 8000924:	4b35      	ldr	r3, [pc, #212]	; (80009fc <comHandler+0x5e4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2288      	movs	r2, #136	; 0x88
 800092c:	18ba      	adds	r2, r7, r2
 800092e:	6013      	str	r3, [r2, #0]
		char tmpStr[size];
 8000930:	2388      	movs	r3, #136	; 0x88
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	1e5a      	subs	r2, r3, #1
 8000938:	2184      	movs	r1, #132	; 0x84
 800093a:	1879      	adds	r1, r7, r1
 800093c:	600a      	str	r2, [r1, #0]
 800093e:	001a      	movs	r2, r3
 8000940:	0015      	movs	r5, r2
 8000942:	2200      	movs	r2, #0
 8000944:	0016      	movs	r6, r2
 8000946:	0028      	movs	r0, r5
 8000948:	0031      	movs	r1, r6
 800094a:	0002      	movs	r2, r0
 800094c:	0f52      	lsrs	r2, r2, #29
 800094e:	000d      	movs	r5, r1
 8000950:	00ed      	lsls	r5, r5, #3
 8000952:	617d      	str	r5, [r7, #20]
 8000954:	697d      	ldr	r5, [r7, #20]
 8000956:	4315      	orrs	r5, r2
 8000958:	617d      	str	r5, [r7, #20]
 800095a:	0002      	movs	r2, r0
 800095c:	00d2      	lsls	r2, r2, #3
 800095e:	613a      	str	r2, [r7, #16]
 8000960:	001a      	movs	r2, r3
 8000962:	603a      	str	r2, [r7, #0]
 8000964:	2200      	movs	r2, #0
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	6838      	ldr	r0, [r7, #0]
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	0002      	movs	r2, r0
 800096e:	0f52      	lsrs	r2, r2, #29
 8000970:	000d      	movs	r5, r1
 8000972:	00ed      	lsls	r5, r5, #3
 8000974:	60fd      	str	r5, [r7, #12]
 8000976:	68fd      	ldr	r5, [r7, #12]
 8000978:	4315      	orrs	r5, r2
 800097a:	60fd      	str	r5, [r7, #12]
 800097c:	0002      	movs	r2, r0
 800097e:	00d2      	lsls	r2, r2, #3
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	3307      	adds	r3, #7
 8000984:	08db      	lsrs	r3, r3, #3
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	466a      	mov	r2, sp
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	469d      	mov	sp, r3
 800098e:	466b      	mov	r3, sp
 8000990:	3300      	adds	r3, #0
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	18ba      	adds	r2, r7, r2
 8000996:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < size; i++)
 8000998:	2300      	movs	r3, #0
 800099a:	2290      	movs	r2, #144	; 0x90
 800099c:	18ba      	adds	r2, r7, r2
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	e012      	b.n	80009c8 <comHandler+0x5b0>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <comHandler+0x5e4>)
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	2390      	movs	r3, #144	; 0x90
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	18d3      	adds	r3, r2, r3
 80009b4:	0019      	movs	r1, r3
 80009b6:	f001 fe96 	bl	80026e6 <pop>
		for(int i = 0; i < size; i++)
 80009ba:	2390      	movs	r3, #144	; 0x90
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	2290      	movs	r2, #144	; 0x90
 80009c4:	18ba      	adds	r2, r7, r2
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	2390      	movs	r3, #144	; 0x90
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	2388      	movs	r3, #136	; 0x88
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbe4      	blt.n	80009a2 <comHandler+0x58a>
		}
		CDC_Transmit_FS(tmpStr, size);
 80009d8:	2388      	movs	r3, #136	; 0x88
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	0011      	movs	r1, r2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f00c f9dc 	bl	800cda4 <CDC_Transmit_FS>
 80009ec:	46a5      	mov	sp, r4
	}

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b02b      	add	sp, #172	; 0xac
 80009f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000200 	.word	0x20000200
 80009fc:	200001fc 	.word	0x200001fc
 8000a00:	200003d0 	.word	0x200003d0
 8000a04:	0800e094 	.word	0x0800e094

08000a08 <makeByteArray>:

//_____Zpracuje ADC_Results do pole data_____//
static void makeByteArray()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	e018      	b.n	8000a46 <makeByteArray+0x3e>
	{
		data[2*i] = MaskByte(ADC_Results[2*i], 1);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	005a      	lsls	r2, r3, #1
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <makeByteArray+0x50>)
 8000a1a:	0092      	lsls	r2, r2, #2
 8000a1c:	58d3      	ldr	r3, [r2, r3]
 8000a1e:	0a1a      	lsrs	r2, r3, #8
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	b2d1      	uxtb	r1, r2
 8000a26:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <makeByteArray+0x54>)
 8000a28:	54d1      	strb	r1, [r2, r3]
		data[2*i+1] = MaskByte(ADC_Results[2*i], 0);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	005a      	lsls	r2, r3, #1
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <makeByteArray+0x50>)
 8000a30:	0092      	lsls	r2, r2, #2
 8000a32:	58d2      	ldr	r2, [r2, r3]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b2d1      	uxtb	r1, r2
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <makeByteArray+0x54>)
 8000a3e:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 7; i++)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3301      	adds	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b06      	cmp	r3, #6
 8000a4a:	dde3      	ble.n	8000a14 <makeByteArray+0xc>
	}
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	20000380 	.word	0x20000380
 8000a5c:	20000200 	.word	0x20000200

08000a60 <fillPaket>:

//_____Vytvoří strukturu Paket z dat v argumentech_____//
static void fillPaket(Paket* paket, outPaketType type, uint8_t* data, uint8_t dataLength)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	0008      	movs	r0, r1
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	240b      	movs	r4, #11
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	1c02      	adds	r2, r0, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	200a      	movs	r0, #10
 8000a78:	183b      	adds	r3, r7, r0
 8000a7a:	1c0a      	adds	r2, r1, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	paket->type = type;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	0021      	movs	r1, r4
 8000a82:	187a      	adds	r2, r7, r1
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	701a      	strb	r2, [r3, #0]
	paket->data = data;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]
	paket->dataLength = dataLength;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	183a      	adds	r2, r7, r0
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	721a      	strb	r2, [r3, #8]
	uint8_t CA = type;
 8000a96:	2317      	movs	r3, #23
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	187a      	adds	r2, r7, r1
 8000a9c:	7812      	ldrb	r2, [r2, #0]
 8000a9e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	e00c      	b.n	8000ac0 <fillPaket+0x60>
		CA += data[i];
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	7819      	ldrb	r1, [r3, #0]
 8000aae:	2217      	movs	r2, #23
 8000ab0:	18bb      	adds	r3, r7, r2
 8000ab2:	18ba      	adds	r2, r7, r2
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	188a      	adds	r2, r1, r2
 8000ab8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	3301      	adds	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbec      	blt.n	8000aa6 <fillPaket+0x46>
	paket->CA_value = CA;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2217      	movs	r2, #23
 8000ad0:	18ba      	adds	r2, r7, r2
 8000ad2:	7812      	ldrb	r2, [r2, #0]
 8000ad4:	725a      	strb	r2, [r3, #9]
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b007      	add	sp, #28
 8000adc:	bd90      	pop	{r4, r7, pc}
	...

08000ae0 <pushPaket>:

//_____Vloží do bufferu řetězec odpovídající sestavenému paketu_____//
static void pushPaket(RING_BUFFER* buffer, Paket* paket)
{
 8000ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae2:	46c6      	mov	lr, r8
 8000ae4:	b500      	push	{lr}
 8000ae6:	b096      	sub	sp, #88	; 0x58
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000aec:	63b9      	str	r1, [r7, #56]	; 0x38
 8000aee:	466b      	mov	r3, sp
 8000af0:	4698      	mov	r8, r3
	uint8_t msg[paket->dataLength + 2];
 8000af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000af4:	7a1b      	ldrb	r3, [r3, #8]
 8000af6:	1c9a      	adds	r2, r3, #2
 8000af8:	1e53      	subs	r3, r2, #1
 8000afa:	657b      	str	r3, [r7, #84]	; 0x54
 8000afc:	0013      	movs	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	69b8      	ldr	r0, [r7, #24]
 8000b06:	69f9      	ldr	r1, [r7, #28]
 8000b08:	0003      	movs	r3, r0
 8000b0a:	0f5b      	lsrs	r3, r3, #29
 8000b0c:	000e      	movs	r6, r1
 8000b0e:	00f5      	lsls	r5, r6, #3
 8000b10:	431d      	orrs	r5, r3
 8000b12:	0003      	movs	r3, r0
 8000b14:	00dc      	lsls	r4, r3, #3
 8000b16:	0013      	movs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	6938      	ldr	r0, [r7, #16]
 8000b20:	6979      	ldr	r1, [r7, #20]
 8000b22:	0003      	movs	r3, r0
 8000b24:	0f5b      	lsrs	r3, r3, #29
 8000b26:	000c      	movs	r4, r1
 8000b28:	00e4      	lsls	r4, r4, #3
 8000b2a:	637c      	str	r4, [r7, #52]	; 0x34
 8000b2c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000b2e:	431c      	orrs	r4, r3
 8000b30:	637c      	str	r4, [r7, #52]	; 0x34
 8000b32:	0003      	movs	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
 8000b38:	0013      	movs	r3, r2
 8000b3a:	3307      	adds	r3, #7
 8000b3c:	08db      	lsrs	r3, r3, #3
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	466a      	mov	r2, sp
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	469d      	mov	sp, r3
 8000b46:	466b      	mov	r3, sp
 8000b48:	3300      	adds	r3, #0
 8000b4a:	653b      	str	r3, [r7, #80]	; 0x50
	msg[0] = paket->type;
 8000b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b52:	701a      	strb	r2, [r3, #0]
	memcpy(msg+1, paket->data, paket->dataLength);
 8000b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b56:	1c58      	adds	r0, r3, #1
 8000b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b5a:	6859      	ldr	r1, [r3, #4]
 8000b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b5e:	7a1b      	ldrb	r3, [r3, #8]
 8000b60:	001a      	movs	r2, r3
 8000b62:	f00c fe19 	bl	800d798 <memcpy>
	msg[paket->dataLength+1] = paket->CA_value;
 8000b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b68:	7a1b      	ldrb	r3, [r3, #8]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b6e:	7a51      	ldrb	r1, [r2, #9]
 8000b70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b72:	54d1      	strb	r1, [r2, r3]
	//msg[paket->dataLength+2] = 0U;

	uint8_t str[] = {">>"};
 8000b74:	200c      	movs	r0, #12
 8000b76:	2638      	movs	r6, #56	; 0x38
 8000b78:	1983      	adds	r3, r0, r6
 8000b7a:	19db      	adds	r3, r3, r7
 8000b7c:	4a34      	ldr	r2, [pc, #208]	; (8000c50 <pushPaket+0x170>)
 8000b7e:	8811      	ldrh	r1, [r2, #0]
 8000b80:	8019      	strh	r1, [r3, #0]
 8000b82:	7892      	ldrb	r2, [r2, #2]
 8000b84:	709a      	strb	r2, [r3, #2]
	uint8_t end[] = {"<<\n"};
 8000b86:	2508      	movs	r5, #8
 8000b88:	19ab      	adds	r3, r5, r6
 8000b8a:	19db      	adds	r3, r3, r7
 8000b8c:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <pushPaket+0x174>)
 8000b8e:	601a      	str	r2, [r3, #0]

	uint8_t toSend[6+paket->dataLength + 2];
 8000b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b92:	7a1b      	ldrb	r3, [r3, #8]
 8000b94:	3308      	adds	r3, #8
 8000b96:	001c      	movs	r4, r3
 8000b98:	1e63      	subs	r3, r4, #1
 8000b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b9c:	0023      	movs	r3, r4
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	000b      	movs	r3, r1
 8000baa:	0f5b      	lsrs	r3, r3, #29
 8000bac:	0016      	movs	r6, r2
 8000bae:	00f6      	lsls	r6, r6, #3
 8000bb0:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000bb2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8000bb4:	431e      	orrs	r6, r3
 8000bb6:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000bb8:	000b      	movs	r3, r1
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bbe:	0023      	movs	r3, r4
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	6839      	ldr	r1, [r7, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	000b      	movs	r3, r1
 8000bcc:	0f5b      	lsrs	r3, r3, #29
 8000bce:	0016      	movs	r6, r2
 8000bd0:	00f6      	lsls	r6, r6, #3
 8000bd2:	627e      	str	r6, [r7, #36]	; 0x24
 8000bd4:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000bd6:	431e      	orrs	r6, r3
 8000bd8:	627e      	str	r6, [r7, #36]	; 0x24
 8000bda:	000b      	movs	r3, r1
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	623b      	str	r3, [r7, #32]
 8000be0:	0023      	movs	r3, r4
 8000be2:	3307      	adds	r3, #7
 8000be4:	08db      	lsrs	r3, r3, #3
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	466a      	mov	r2, sp
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	469d      	mov	sp, r3
 8000bee:	466b      	mov	r3, sp
 8000bf0:	3300      	adds	r3, #0
 8000bf2:	64bb      	str	r3, [r7, #72]	; 0x48
	//sprintf(toSend, "%s%s%s\n", str, msg, end);	//pro testNum = 0 se vytiskne jen paket->type, jelikož sprintf pak narazí na nulu
	memcpy(toSend, str, 2);
 8000bf4:	2638      	movs	r6, #56	; 0x38
 8000bf6:	1983      	adds	r3, r0, r6
 8000bf8:	19d9      	adds	r1, r3, r7
 8000bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f00c fdca 	bl	800d798 <memcpy>
	memcpy(toSend+2, msg, paket->dataLength + 2);
 8000c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c06:	1c98      	adds	r0, r3, #2
 8000c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c0a:	7a1b      	ldrb	r3, [r3, #8]
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	001a      	movs	r2, r3
 8000c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c12:	0019      	movs	r1, r3
 8000c14:	f00c fdc0 	bl	800d798 <memcpy>
	memcpy(toSend+2+paket->dataLength + 2, end, 4);
 8000c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c1a:	7a1b      	ldrb	r3, [r3, #8]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c20:	18d2      	adds	r2, r2, r3
 8000c22:	19ab      	adds	r3, r5, r6
 8000c24:	19db      	adds	r3, r3, r7
 8000c26:	0010      	movs	r0, r2
 8000c28:	0019      	movs	r1, r3
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	f00c fdb3 	bl	800d798 <memcpy>
	pushStr(buffer, toSend, sizeof(toSend)-1);
 8000c32:	0023      	movs	r3, r4
 8000c34:	3b01      	subs	r3, #1
 8000c36:	001a      	movs	r2, r3
 8000c38:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f001 fd2a 	bl	8002696 <pushStr>
 8000c42:	46c5      	mov	sp, r8
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b016      	add	sp, #88	; 0x58
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	46b8      	mov	r8, r7
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c50:	0800e0a4 	.word	0x0800e0a4
 8000c54:	000a3c3c 	.word	0x000a3c3c

08000c58 <decodePaket>:

//_____Příchozí řetězec přepracuje do struktury typu paket (pokud to lze)_____//
static uint8_t decodePaket(/*Paket* paket,*/ uint8_t* data, uint8_t dataLenght)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	000a      	movs	r2, r1
 8000c62:	1cfb      	adds	r3, r7, #3
 8000c64:	701a      	strb	r2, [r3, #0]
	int sum = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	e00a      	b.n	8000c86 <decodePaket+0x2e>
	{
		sum += data[i];
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	18d3      	adds	r3, r2, r3
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	001a      	movs	r2, r3
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	189b      	adds	r3, r3, r2
 8000c7e:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	3301      	adds	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	1cfb      	adds	r3, r7, #3
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	3b03      	subs	r3, #3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dbee      	blt.n	8000c70 <decodePaket+0x18>
	}
	if(sum == data[dataLenght - 3])	//kontorlní součet odpovídá
 8000c92:	1cfb      	adds	r3, r7, #3
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	3b03      	subs	r3, #3
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	18d3      	adds	r3, r2, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d000      	beq.n	8000ca8 <decodePaket+0x50>
 8000ca6:	e06a      	b.n	8000d7e <decodePaket+0x126>
	{
		switch(data[2])	//Na třetím místě je instrukce
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3302      	adds	r3, #2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	3b61      	subs	r3, #97	; 0x61
 8000cb0:	2b12      	cmp	r3, #18
 8000cb2:	d85e      	bhi.n	8000d72 <decodePaket+0x11a>
 8000cb4:	009a      	lsls	r2, r3, #2
 8000cb6:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <decodePaket+0x144>)
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	469f      	mov	pc, r3
		{
		case 's': ;
			//___Start testu___//
			if(dataLenght == 7)
 8000cbe:	1cfb      	adds	r3, r7, #3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b07      	cmp	r3, #7
 8000cc4:	d15d      	bne.n	8000d82 <decodePaket+0x12a>
			{
				flags.instructions.startRequest = 1;
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <decodePaket+0x148>)
 8000cc8:	7b1a      	ldrb	r2, [r3, #12]
 8000cca:	2101      	movs	r1, #1
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	731a      	strb	r2, [r3, #12]
				supplyToTest = data[3];
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	78da      	ldrb	r2, [r3, #3]
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <decodePaket+0x14c>)
 8000cd6:	701a      	strb	r2, [r3, #0]
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				//Na pozici data je ukazatel na testovaný zdroj
			}
			break;
 8000cd8:	e053      	b.n	8000d82 <decodePaket+0x12a>

		case'c': ;
			//___Ukončení___//
		if(dataLenght == 7)
 8000cda:	1cfb      	adds	r3, r7, #3
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b07      	cmp	r3, #7
 8000ce0:	d151      	bne.n	8000d86 <decodePaket+0x12e>
		{
			flags.instructions.stopRequest = 1;
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <decodePaket+0x148>)
 8000ce4:	7b1a      	ldrb	r2, [r3, #12]
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Ukonceni\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000cec:	e04b      	b.n	8000d86 <decodePaket+0x12e>

		case'p': ;
			//___Pauza___//
		if(dataLenght == 7)
 8000cee:	1cfb      	adds	r3, r7, #3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d149      	bne.n	8000d8a <decodePaket+0x132>
		{
			flags.instructions.pauseRequest = 1;
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <decodePaket+0x148>)
 8000cf8:	7b1a      	ldrb	r2, [r3, #12]
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Pauza\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000d00:	e043      	b.n	8000d8a <decodePaket+0x132>

		case'k': ;
			//___Kalibrace___//
		if(dataLenght == 7)
 8000d02:	1cfb      	adds	r3, r7, #3
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b07      	cmp	r3, #7
 8000d08:	d141      	bne.n	8000d8e <decodePaket+0x136>
		{
			if(data[3] == 0)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3303      	adds	r3, #3
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d105      	bne.n	8000d20 <decodePaket+0xc8>
				flags.instructions.calibRequest = 1;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <decodePaket+0x148>)
 8000d16:	7b1a      	ldrb	r2, [r3, #12]
 8000d18:	2108      	movs	r1, #8
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Kalibrace\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000d1e:	e036      	b.n	8000d8e <decodePaket+0x136>
			else if(data[3] == 1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3303      	adds	r3, #3
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d131      	bne.n	8000d8e <decodePaket+0x136>
				flags.instructions.calibDone = 1;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <decodePaket+0x148>)
 8000d2c:	7b1a      	ldrb	r2, [r3, #12]
 8000d2e:	2110      	movs	r1, #16
 8000d30:	430a      	orrs	r2, r1
 8000d32:	731a      	strb	r2, [r3, #12]
			break;
 8000d34:	e02b      	b.n	8000d8e <decodePaket+0x136>

		case 'a' : ;
			//___Navázání komunikace___//
		if(dataLenght == 7)
 8000d36:	1cfb      	adds	r3, r7, #3
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b07      	cmp	r3, #7
 8000d3c:	d119      	bne.n	8000d72 <decodePaket+0x11a>
		{
			uint8_t data = regCount;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <decodePaket+0x150>)
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	2117      	movs	r1, #23
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	701a      	strb	r2, [r3, #0]
			Paket paket;
			fillPaket(&paket, ACK_PAKET, &data, 1);
 8000d48:	187a      	adds	r2, r7, r1
 8000d4a:	2408      	movs	r4, #8
 8000d4c:	1938      	adds	r0, r7, r4
 8000d4e:	2301      	movs	r3, #1
 8000d50:	2105      	movs	r1, #5
 8000d52:	f7ff fe85 	bl	8000a60 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <decodePaket+0x154>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	193a      	adds	r2, r7, r4
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff febe 	bl	8000ae0 <pushPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <decodePaket+0x154>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	193a      	adds	r2, r7, r4
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff feb7 	bl	8000ae0 <pushPaket>
		}

		default: ;
			//___Neplatný příkaz___//
			flags.instructions.unknownInst = 1;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <decodePaket+0x148>)
 8000d74:	7b1a      	ldrb	r2, [r3, #12]
 8000d76:	2120      	movs	r1, #32
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
			sprintf(txt, "Neplatna instrukce\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			break;
 8000d7c:	e008      	b.n	8000d90 <decodePaket+0x138>
		}
	}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	e006      	b.n	8000d90 <decodePaket+0x138>
			break;
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	e004      	b.n	8000d90 <decodePaket+0x138>
			break;
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	e002      	b.n	8000d90 <decodePaket+0x138>
			break;
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	e000      	b.n	8000d90 <decodePaket+0x138>
			break;
 8000d8e:	46c0      	nop			; (mov r8, r8)
	return 1;
 8000d90:	2301      	movs	r3, #1
}
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b009      	add	sp, #36	; 0x24
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	0800e1d8 	.word	0x0800e1d8
 8000da0:	200003d0 	.word	0x200003d0
 8000da4:	200003ee 	.word	0x200003ee
 8000da8:	20000404 	.word	0x20000404
 8000dac:	200001fc 	.word	0x200001fc

08000db0 <setColour>:
static BACKLIGHT colour;

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colourToSet)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	0002      	movs	r2, r0
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	701a      	strb	r2, [r3, #0]
	switch(colourToSet)
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d033      	beq.n	8000e2c <setColour+0x7c>
 8000dc4:	dc49      	bgt.n	8000e5a <setColour+0xaa>
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <setColour+0x20>
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d017      	beq.n	8000dfe <setColour+0x4e>
 8000dce:	e044      	b.n	8000e5a <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4830      	ldr	r0, [pc, #192]	; (8000e98 <setColour+0xe8>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	0019      	movs	r1, r3
 8000dda:	f003 fb68 	bl	80044ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	0219      	lsls	r1, r3, #8
 8000de2:	2390      	movs	r3, #144	; 0x90
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	2200      	movs	r2, #0
 8000de8:	0018      	movs	r0, r3
 8000dea:	f003 fb60 	bl	80044ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4829      	ldr	r0, [pc, #164]	; (8000e98 <setColour+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	0019      	movs	r1, r3
 8000df8:	f003 fb59 	bl	80044ae <HAL_GPIO_WritePin>
		break;
 8000dfc:	e044      	b.n	8000e88 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4825      	ldr	r0, [pc, #148]	; (8000e98 <setColour+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	0019      	movs	r1, r3
 8000e08:	f003 fb51 	bl	80044ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	0219      	lsls	r1, r3, #8
 8000e10:	2390      	movs	r3, #144	; 0x90
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	2200      	movs	r2, #0
 8000e16:	0018      	movs	r0, r3
 8000e18:	f003 fb49 	bl	80044ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	481d      	ldr	r0, [pc, #116]	; (8000e98 <setColour+0xe8>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	0019      	movs	r1, r3
 8000e26:	f003 fb42 	bl	80044ae <HAL_GPIO_WritePin>
		break;
 8000e2a:	e02d      	b.n	8000e88 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4819      	ldr	r0, [pc, #100]	; (8000e98 <setColour+0xe8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	0019      	movs	r1, r3
 8000e36:	f003 fb3a 	bl	80044ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	0219      	lsls	r1, r3, #8
 8000e3e:	2390      	movs	r3, #144	; 0x90
 8000e40:	05db      	lsls	r3, r3, #23
 8000e42:	2201      	movs	r2, #1
 8000e44:	0018      	movs	r0, r3
 8000e46:	f003 fb32 	bl	80044ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <setColour+0xe8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	0019      	movs	r1, r3
 8000e54:	f003 fb2b 	bl	80044ae <HAL_GPIO_WritePin>
		break;
 8000e58:	e016      	b.n	8000e88 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	480e      	ldr	r0, [pc, #56]	; (8000e98 <setColour+0xe8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	0019      	movs	r1, r3
 8000e64:	f003 fb23 	bl	80044ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	0219      	lsls	r1, r3, #8
 8000e6c:	2390      	movs	r3, #144	; 0x90
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	2200      	movs	r2, #0
 8000e72:	0018      	movs	r0, r3
 8000e74:	f003 fb1b 	bl	80044ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <setColour+0xe8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	0019      	movs	r1, r3
 8000e82:	f003 fb14 	bl	80044ae <HAL_GPIO_WritePin>
		break;
 8000e86:	46c0      	nop			; (mov r8, r8)
	}

	colour = colourToSet;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <setColour+0xec>)
 8000e8a:	1dfa      	adds	r2, r7, #7
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	2000020e 	.word	0x2000020e

08000ea0 <sendByte>:

//_____Pošle byte dat_____//
//-> argumenty: char - posílaný byte, Start_byte definuje zda jde o instrukci nebo data
// !!! Pracuje v blokujícím módu !!!
static DISP_STATE sendByte(char byte, START_BYTE type)
{
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	1dbb      	adds	r3, r7, #6
 8000eae:	1c0a      	adds	r2, r1, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
		{
			return SPI_ERR;
		}
	}*/
	uint8_t buffer[3];
	switch(type)
 8000eb2:	1dbb      	adds	r3, r7, #6
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d002      	beq.n	8000ec0 <sendByte+0x20>
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d005      	beq.n	8000eca <sendByte+0x2a>
 8000ebe:	e009      	b.n	8000ed4 <sendByte+0x34>
	{
		case INSTRUCTION:
			buffer[0] = 0xF8;
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	22f8      	movs	r2, #248	; 0xf8
 8000ec6:	701a      	strb	r2, [r3, #0]
			break;
 8000ec8:	e006      	b.n	8000ed8 <sendByte+0x38>
		case DATA:
			buffer[0] = 0xFA;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	22fa      	movs	r2, #250	; 0xfa
 8000ed0:	701a      	strb	r2, [r3, #0]
			break;
 8000ed2:	e001      	b.n	8000ed8 <sendByte+0x38>
		default:	//neošetřené možnosti
			return SPI_ERR;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e074      	b.n	8000fc2 <sendByte+0x122>
			break;
	}
	uint8_t tmp1 = 0U, tmp2 = 0U;
 8000ed8:	230f      	movs	r3, #15
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	230e      	movs	r3, #14
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000ee8:	230d      	movs	r3, #13
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e03a      	b.n	8000f68 <sendByte+0xc8>
	{
		if(MaskBit(byte, i))
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	210d      	movs	r1, #13
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	411a      	asrs	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	2201      	movs	r2, #1
 8000f02:	4013      	ands	r3, r2
 8000f04:	d00f      	beq.n	8000f26 <sendByte+0x86>
		{
			SetBit(tmp1, (7-i));
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2201      	movs	r2, #1
 8000f10:	409a      	lsls	r2, r3
 8000f12:	0013      	movs	r3, r2
 8000f14:	b25a      	sxtb	r2, r3
 8000f16:	210f      	movs	r1, #15
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	701a      	strb	r2, [r3, #0]
		}
		if(MaskBit(byte, (i+4)))
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781a      	ldrb	r2, [r3, #0]
 8000f2a:	210d      	movs	r1, #13
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	3304      	adds	r3, #4
 8000f32:	411a      	asrs	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d00f      	beq.n	8000f5c <sendByte+0xbc>
		{
			SetBit(tmp2, (7-i));
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2207      	movs	r2, #7
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2201      	movs	r2, #1
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	b25a      	sxtb	r2, r3
 8000f4c:	210e      	movs	r1, #14
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b25a      	sxtb	r2, r3
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000f5c:	210d      	movs	r1, #13
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	3201      	adds	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	230d      	movs	r3, #13
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d9bf      	bls.n	8000ef2 <sendByte+0x52>
		}
	}
	buffer[1] = tmp1;
 8000f72:	2508      	movs	r5, #8
 8000f74:	197b      	adds	r3, r7, r5
 8000f76:	220f      	movs	r2, #15
 8000f78:	18ba      	adds	r2, r7, r2
 8000f7a:	7812      	ldrb	r2, [r2, #0]
 8000f7c:	705a      	strb	r2, [r3, #1]
	buffer[2] = tmp2;
 8000f7e:	197b      	adds	r3, r7, r5
 8000f80:	220e      	movs	r2, #14
 8000f82:	18ba      	adds	r2, r7, r2
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	709a      	strb	r2, [r3, #2]

	DISP_CS_ON;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <sendByte+0x12c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f003 fa8d 	bl	80044ae <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, buffer, 3, 100);
 8000f94:	260c      	movs	r6, #12
 8000f96:	19bc      	adds	r4, r7, r6
 8000f98:	1979      	adds	r1, r7, r5
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <sendByte+0x130>)
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	f006 f804 	bl	8006fac <HAL_SPI_Transmit>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	7023      	strb	r3, [r4, #0]
	DISP_CS_OFF;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <sendByte+0x12c>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	2140      	movs	r1, #64	; 0x40
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f003 fa7d 	bl	80044ae <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	if(ret == HAL_OK)
 8000fb4:	19bb      	adds	r3, r7, r6
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <sendByte+0x120>
		return DISP_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e000      	b.n	8000fc2 <sendByte+0x122>
	else
		return SPI_ERR;
 8000fc0:	2302      	movs	r3, #2
}
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b005      	add	sp, #20
 8000fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	20000250 	.word	0x20000250

08000fd4 <dispInit>:
}

//_____Provede reset displeje a defaultní nastavení_____//
// !!! Pracuje v blokujícím módu !!!
void dispInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	//_____Reset displeje po startu_____//
	HAL_Delay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f002 fa33 	bl	8003444 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_RESET);
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <dispInit+0x7c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f003 fa62 	bl	80044ae <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fea:	2014      	movs	r0, #20
 8000fec:	f002 fa2a 	bl	8003444 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_SET);
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <dispInit+0x7c>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f003 fa59 	bl	80044ae <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000ffc:	2005      	movs	r0, #5
 8000ffe:	f002 fa21 	bl	8003444 <HAL_Delay>

	//_____Nastavit parametry_____//
	sendByte(0x31, INSTRUCTION);	//Function set
 8001002:	2101      	movs	r1, #1
 8001004:	2031      	movs	r0, #49	; 0x31
 8001006:	f7ff ff4b 	bl	8000ea0 <sendByte>
	sendByte(0x01, INSTRUCTION);	//Clear display
 800100a:	2101      	movs	r1, #1
 800100c:	2001      	movs	r0, #1
 800100e:	f7ff ff47 	bl	8000ea0 <sendByte>
	sendByte(0x13, INSTRUCTION);	//Oscilator
 8001012:	2101      	movs	r1, #1
 8001014:	2013      	movs	r0, #19
 8001016:	f7ff ff43 	bl	8000ea0 <sendByte>
	sendByte(0x70, INSTRUCTION);	//Contrast
 800101a:	2101      	movs	r1, #1
 800101c:	2070      	movs	r0, #112	; 0x70
 800101e:	f7ff ff3f 	bl	8000ea0 <sendByte>
	sendByte(0x5C, INSTRUCTION);	//Power/Icon/Contrast
 8001022:	2101      	movs	r1, #1
 8001024:	205c      	movs	r0, #92	; 0x5c
 8001026:	f7ff ff3b 	bl	8000ea0 <sendByte>
	sendByte(0x6B, INSTRUCTION);	//Follower control
 800102a:	2101      	movs	r1, #1
 800102c:	206b      	movs	r0, #107	; 0x6b
 800102e:	f7ff ff37 	bl	8000ea0 <sendByte>
	sendByte(0x0F, INSTRUCTION);	//Display on
 8001032:	2101      	movs	r1, #1
 8001034:	200f      	movs	r0, #15
 8001036:	f7ff ff33 	bl	8000ea0 <sendByte>
	sendByte(0x38, INSTRUCTION);	//Function set RE = 0
 800103a:	2101      	movs	r1, #1
 800103c:	2038      	movs	r0, #56	; 0x38
 800103e:	f7ff ff2f 	bl	8000ea0 <sendByte>

	//_____Zapnout podsvícení_____//
	setColour(BACKLIGHT_WHITE);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff feb4 	bl	8000db0 <setColour>
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	48000400 	.word	0x48000400

08001054 <setCursor>:
//_____Nastaví kurzor_____//
//pozice počítána od nuly//
//-> argumenty: řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE setCursor(uint8_t row, uint8_t col)
{
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	0002      	movs	r2, r0
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	1dbb      	adds	r3, r7, #6
 8001062:	1c0a      	adds	r2, r1, #0
 8001064:	701a      	strb	r2, [r3, #0]
	uint8_t addres = 0x80;	//DDRAM adresa
 8001066:	230f      	movs	r3, #15
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	701a      	strb	r2, [r3, #0]
	if(row > 3 || col > 15)	//displej 4x16
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d803      	bhi.n	800107e <setCursor+0x2a>
 8001076:	1dbb      	adds	r3, r7, #6
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b0f      	cmp	r3, #15
 800107c:	d901      	bls.n	8001082 <setCursor+0x2e>
		return DISP_ERR;
 800107e:	2304      	movs	r3, #4
 8001080:	e01c      	b.n	80010bc <setCursor+0x68>
	addres += row*0x20;
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	015b      	lsls	r3, r3, #5
 8001088:	b2d9      	uxtb	r1, r3
 800108a:	200f      	movs	r0, #15
 800108c:	183b      	adds	r3, r7, r0
 800108e:	183a      	adds	r2, r7, r0
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	188a      	adds	r2, r1, r2
 8001094:	701a      	strb	r2, [r3, #0]
	addres += col;
 8001096:	183b      	adds	r3, r7, r0
 8001098:	1839      	adds	r1, r7, r0
 800109a:	1dba      	adds	r2, r7, #6
 800109c:	7809      	ldrb	r1, [r1, #0]
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	188a      	adds	r2, r1, r2
 80010a2:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(5);
	DISP_STATE ret = sendByte(addres, INSTRUCTION);
 80010a4:	250e      	movs	r5, #14
 80010a6:	197c      	adds	r4, r7, r5
 80010a8:	183b      	adds	r3, r7, r0
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	0018      	movs	r0, r3
 80010b0:	f7ff fef6 	bl	8000ea0 <sendByte>
 80010b4:	0003      	movs	r3, r0
 80010b6:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(5);
	return ret;
 80010b8:	197b      	adds	r3, r7, r5
 80010ba:	781b      	ldrb	r3, [r3, #0]
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b004      	add	sp, #16
 80010c2:	bdb0      	pop	{r4, r5, r7, pc}

080010c4 <writeChar>:

//_____Zapiš znak na dané souřadnice_____//
//-> argumenty: znak k zobrazení, řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeChar(char character, uint8_t row, uint8_t col)
{
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	0004      	movs	r4, r0
 80010cc:	0008      	movs	r0, r1
 80010ce:	0011      	movs	r1, r2
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	1c22      	adds	r2, r4, #0
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	1dbb      	adds	r3, r7, #6
 80010d8:	1c02      	adds	r2, r0, #0
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	1d7b      	adds	r3, r7, #5
 80010de:	1c0a      	adds	r2, r1, #0
 80010e0:	701a      	strb	r2, [r3, #0]
	DISP_STATE ret = setCursor(row, col);
 80010e2:	250f      	movs	r5, #15
 80010e4:	197c      	adds	r4, r7, r5
 80010e6:	1d7b      	adds	r3, r7, #5
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	1dbb      	adds	r3, r7, #6
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	0011      	movs	r1, r2
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff ffaf 	bl	8001054 <setCursor>
 80010f6:	0003      	movs	r3, r0
 80010f8:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(5);
	if(ret == DISP_OK)
 80010fa:	197b      	adds	r3, r7, r5
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10b      	bne.n	800111a <writeChar+0x56>
	{
		//doplnit úpravu dat podle převodní tabulky displeje
		ret = sendByte(character, DATA);
 8001102:	197c      	adds	r4, r7, r5
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2102      	movs	r1, #2
 800110a:	0018      	movs	r0, r3
 800110c:	f7ff fec8 	bl	8000ea0 <sendByte>
 8001110:	0003      	movs	r3, r0
 8001112:	7023      	strb	r3, [r4, #0]
		//HAL_Delay(5);
		return ret;
 8001114:	197b      	adds	r3, r7, r5
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	e002      	b.n	8001120 <writeChar+0x5c>
	}
	else
		return ret;
 800111a:	230f      	movs	r3, #15
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	781b      	ldrb	r3, [r3, #0]
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b004      	add	sp, #16
 8001126:	bdb0      	pop	{r4, r5, r7, pc}

08001128 <writeRow>:
//_____Zapiš řetězec na daný řádek_____//
//znaky přečnívající znaky budou smazány//
//-> argumenty: pole znaků, délka řetězce, řádek, zarovnání
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeRow(char* string, uint8_t lenght, uint8_t row, ALIGN align)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	000c      	movs	r4, r1
 8001132:	0010      	movs	r0, r2
 8001134:	0019      	movs	r1, r3
 8001136:	1cfb      	adds	r3, r7, #3
 8001138:	1c22      	adds	r2, r4, #0
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	1cbb      	adds	r3, r7, #2
 800113e:	1c02      	adds	r2, r0, #0
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	1c7b      	adds	r3, r7, #1
 8001144:	1c0a      	adds	r2, r1, #0
 8001146:	701a      	strb	r2, [r3, #0]
	if(lenght > 16)	//neplatná délka řetězce
 8001148:	1cfb      	adds	r3, r7, #3
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b10      	cmp	r3, #16
 800114e:	d901      	bls.n	8001154 <writeRow+0x2c>
		return DISP_ERR;
 8001150:	2304      	movs	r3, #4
 8001152:	e080      	b.n	8001256 <writeRow+0x12e>
	uint8_t col;
	char newString[16];
	for(uint8_t i = 0; i < 16; i++)
 8001154:	231e      	movs	r3, #30
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e00b      	b.n	8001176 <writeRow+0x4e>
	{
		newString[i] = ' ';
 800115e:	201e      	movs	r0, #30
 8001160:	183b      	adds	r3, r7, r0
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	220c      	movs	r2, #12
 8001166:	18ba      	adds	r2, r7, r2
 8001168:	2120      	movs	r1, #32
 800116a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 800116c:	183b      	adds	r3, r7, r0
 800116e:	781a      	ldrb	r2, [r3, #0]
 8001170:	183b      	adds	r3, r7, r0
 8001172:	3201      	adds	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	231e      	movs	r3, #30
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d9ee      	bls.n	800115e <writeRow+0x36>
	}
	switch(align)
 8001180:	1c7b      	adds	r3, r7, #1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d012      	beq.n	80011ae <writeRow+0x86>
 8001188:	dc1e      	bgt.n	80011c8 <writeRow+0xa0>
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <writeRow+0x6c>
 800118e:	2b01      	cmp	r3, #1
 8001190:	d005      	beq.n	800119e <writeRow+0x76>
 8001192:	e019      	b.n	80011c8 <writeRow+0xa0>
	{
		case LEFT:	//zarovnání doleva
			col = 0;
 8001194:	231f      	movs	r3, #31
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
			break;
 800119c:	e019      	b.n	80011d2 <writeRow+0xaa>
		case RIGHT:
			col = 15 - lenght;
 800119e:	231f      	movs	r3, #31
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	1cfa      	adds	r2, r7, #3
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	210f      	movs	r1, #15
 80011a8:	1a8a      	subs	r2, r1, r2
 80011aa:	701a      	strb	r2, [r3, #0]
			break;
 80011ac:	e011      	b.n	80011d2 <writeRow+0xaa>
		case CENTER:
			col = (15 - lenght)/2 + 1;
 80011ae:	1cfb      	adds	r3, r7, #3
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	220f      	movs	r2, #15
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	d500      	bpl.n	80011ba <writeRow+0x92>
 80011b8:	3301      	adds	r3, #1
 80011ba:	105b      	asrs	r3, r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	231f      	movs	r3, #31
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	3201      	adds	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
			break;
 80011c6:	e004      	b.n	80011d2 <writeRow+0xaa>
		default:
			col = 0;
 80011c8:	231f      	movs	r3, #31
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
			break;
 80011d0:	46c0      	nop			; (mov r8, r8)
	}
	for(uint8_t i = 0; i < lenght; i++)
 80011d2:	231d      	movs	r3, #29
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	e013      	b.n	8001204 <writeRow+0xdc>
	{
		newString[col + i] = string[i];
 80011dc:	201d      	movs	r0, #29
 80011de:	183b      	adds	r3, r7, r0
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	18d2      	adds	r2, r2, r3
 80011e6:	231f      	movs	r3, #31
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	7819      	ldrb	r1, [r3, #0]
 80011ec:	183b      	adds	r3, r7, r0
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	18cb      	adds	r3, r1, r3
 80011f2:	7811      	ldrb	r1, [r2, #0]
 80011f4:	220c      	movs	r2, #12
 80011f6:	18ba      	adds	r2, r7, r2
 80011f8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < lenght; i++)
 80011fa:	183b      	adds	r3, r7, r0
 80011fc:	781a      	ldrb	r2, [r3, #0]
 80011fe:	183b      	adds	r3, r7, r0
 8001200:	3201      	adds	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	231d      	movs	r3, #29
 8001206:	18fa      	adds	r2, r7, r3
 8001208:	1cfb      	adds	r3, r7, #3
 800120a:	7812      	ldrb	r2, [r2, #0]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d3e4      	bcc.n	80011dc <writeRow+0xb4>
	}
	for(uint8_t i = 0; i < 16; i++)
 8001212:	231c      	movs	r3, #28
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	e016      	b.n	800124a <writeRow+0x122>
	{
		if(writeChar(newString[i], row, i) != DISP_OK)
 800121c:	211c      	movs	r1, #28
 800121e:	187b      	adds	r3, r7, r1
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	220c      	movs	r2, #12
 8001224:	18ba      	adds	r2, r7, r2
 8001226:	5cd0      	ldrb	r0, [r2, r3]
 8001228:	187b      	adds	r3, r7, r1
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	1cbb      	adds	r3, r7, #2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	0019      	movs	r1, r3
 8001232:	f7ff ff47 	bl	80010c4 <writeChar>
 8001236:	1e03      	subs	r3, r0, #0
 8001238:	d001      	beq.n	800123e <writeRow+0x116>
					return SPI_ERR;
 800123a:	2302      	movs	r3, #2
 800123c:	e00b      	b.n	8001256 <writeRow+0x12e>
	for(uint8_t i = 0; i < 16; i++)
 800123e:	211c      	movs	r1, #28
 8001240:	187b      	adds	r3, r7, r1
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	187b      	adds	r3, r7, r1
 8001246:	3201      	adds	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	231c      	movs	r3, #28
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d9e3      	bls.n	800121c <writeRow+0xf4>
	}
	return DISP_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b009      	add	sp, #36	; 0x24
 800125c:	bd90      	pop	{r4, r7, pc}
	...

08001260 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	0002      	movs	r2, r0
 8001268:	1dbb      	adds	r3, r7, #6
 800126a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 800126c:	1dbb      	adds	r3, r7, #6
 800126e:	881a      	ldrh	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	429a      	cmp	r2, r3
 8001276:	d104      	bne.n	8001282 <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800127a:	791a      	ldrb	r2, [r3, #4]
 800127c:	2101      	movs	r1, #1
 800127e:	430a      	orrs	r2, r1
 8001280:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 8001282:	1dbb      	adds	r3, r7, #6
 8001284:	881a      	ldrh	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	429a      	cmp	r2, r3
 800128c:	d104      	bne.n	8001298 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <HAL_GPIO_EXTI_Callback+0x40>)
 8001290:	791a      	ldrb	r2, [r3, #4]
 8001292:	2104      	movs	r1, #4
 8001294:	430a      	orrs	r2, r1
 8001296:	711a      	strb	r2, [r3, #4]
	}
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200003d0 	.word	0x200003d0

080012a4 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d110      	bne.n	80012d6 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		//Krátké pípnutí signalizuje vykonávání hlavní smy�?ky programu
		//delší než deset ms
		if(flags.time.ten_ms == 1)
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	07db      	lsls	r3, r3, #31
 80012ba:	0fdb      	lsrs	r3, r3, #31
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d104      	bne.n	80012cc <HAL_TIM_PeriodElapsedCallback+0x28>
			flags.ui.shortBeep = 1;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012c4:	7c1a      	ldrb	r2, [r3, #16]
 80012c6:	2101      	movs	r1, #1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	741a      	strb	r2, [r3, #16]
		flags.time.ten_ms = 1;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	2101      	movs	r1, #1
 80012d2:	430a      	orrs	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
	}
}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	200002b4 	.word	0x200002b4
 80012e4:	200003d0 	.word	0x200003d0

080012e8 <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	0018      	movs	r0, r3
 80012f4:	f002 fa7c 	bl	80037f0 <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <HAL_ADC_ConvCpltCallback+0x24>)
 80012fa:	7d1a      	ldrb	r2, [r3, #20]
 80012fc:	2104      	movs	r1, #4
 80012fe:	430a      	orrs	r2, r1
 8001300:	751a      	strb	r2, [r3, #20]
}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b002      	add	sp, #8
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	200003d0 	.word	0x200003d0

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f002 f831 	bl	800337c <HAL_Init>
  /* USER CODE BEGIN Init */

  //__Buffery___//
  //dispBuffer = createBuffer(100);
  //regBuffer = createBuffer(100);
  USB_Rx_Buffer = createBuffer(500);
 800131a:	23fa      	movs	r3, #250	; 0xfa
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	0018      	movs	r0, r3
 8001320:	f001 f937 	bl	8002592 <createBuffer>
 8001324:	0002      	movs	r2, r0
 8001326:	4b75      	ldr	r3, [pc, #468]	; (80014fc <main+0x1ec>)
 8001328:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 800132a:	23fa      	movs	r3, #250	; 0xfa
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	0018      	movs	r0, r3
 8001330:	f001 f92f 	bl	8002592 <createBuffer>
 8001334:	0002      	movs	r2, r0
 8001336:	4b72      	ldr	r3, [pc, #456]	; (8001500 <main+0x1f0>)
 8001338:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800133a:	f000 f8f9 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133e:	f000 fb43 	bl	80019c8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001342:	f00b fc85 	bl	800cc50 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 8001346:	f000 f95f 	bl	8001608 <MX_ADC_Init>
  MX_SPI1_Init();
 800134a:	f000 fa7b 	bl	8001844 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800134e:	f000 fb0b 	bl	8001968 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8001352:	f000 fabd 	bl	80018d0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  dispInit();
 8001356:	f7ff fe3d 	bl	8000fd4 <dispInit>
  char line1[] = "Zahoreni";
 800135a:	200c      	movs	r0, #12
 800135c:	183b      	adds	r3, r7, r0
 800135e:	4a69      	ldr	r2, [pc, #420]	; (8001504 <main+0x1f4>)
 8001360:	ca12      	ldmia	r2!, {r1, r4}
 8001362:	c312      	stmia	r3!, {r1, r4}
 8001364:	7812      	ldrb	r2, [r2, #0]
 8001366:	701a      	strb	r2, [r3, #0]
  char line2[] = "zdroju";
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4a67      	ldr	r2, [pc, #412]	; (8001508 <main+0x1f8>)
 800136c:	6811      	ldr	r1, [r2, #0]
 800136e:	6019      	str	r1, [r3, #0]
 8001370:	8891      	ldrh	r1, [r2, #4]
 8001372:	8099      	strh	r1, [r3, #4]
 8001374:	7992      	ldrb	r2, [r2, #6]
 8001376:	719a      	strb	r2, [r3, #6]
  writeRow(line1, 8, 1, CENTER);
 8001378:	1838      	adds	r0, r7, r0
 800137a:	2302      	movs	r3, #2
 800137c:	2201      	movs	r2, #1
 800137e:	2108      	movs	r1, #8
 8001380:	f7ff fed2 	bl	8001128 <writeRow>
  writeRow(line2, 6, 2, CENTER);
 8001384:	1d38      	adds	r0, r7, #4
 8001386:	2302      	movs	r3, #2
 8001388:	2202      	movs	r2, #2
 800138a:	2106      	movs	r1, #6
 800138c:	f7ff fecc 	bl	8001128 <writeRow>

  LOAD_MIN_OFF;
 8001390:	4b5e      	ldr	r3, [pc, #376]	; (800150c <main+0x1fc>)
 8001392:	2200      	movs	r2, #0
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0018      	movs	r0, r3
 8001398:	f003 f889 	bl	80044ae <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 800139c:	4b5b      	ldr	r3, [pc, #364]	; (800150c <main+0x1fc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	2140      	movs	r1, #64	; 0x40
 80013a2:	0018      	movs	r0, r3
 80013a4:	f003 f883 	bl	80044ae <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 80013a8:	f001 fa44 	bl	8002834 <regInit>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d004      	beq.n	80013ba <main+0xaa>
  {
	  flags.conErr = 1;
 80013b0:	4b57      	ldr	r3, [pc, #348]	; (8001510 <main+0x200>)
 80013b2:	7e1a      	ldrb	r2, [r3, #24]
 80013b4:	2140      	movs	r1, #64	; 0x40
 80013b6:	430a      	orrs	r2, r1
 80013b8:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80013ba:	4b56      	ldr	r3, [pc, #344]	; (8001514 <main+0x204>)
 80013bc:	0018      	movs	r0, r3
 80013be:	f006 fae5 	bl	800798c <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 80013c2:	4b53      	ldr	r3, [pc, #332]	; (8001510 <main+0x200>)
 80013c4:	7c1a      	ldrb	r2, [r3, #16]
 80013c6:	2102      	movs	r1, #2
 80013c8:	430a      	orrs	r2, r1
 80013ca:	741a      	strb	r2, [r3, #16]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t savedSec;

	  if(flags.time.ten_ms)	// 10 ms
 80013cc:	4b50      	ldr	r3, [pc, #320]	; (8001510 <main+0x200>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	07db      	lsls	r3, r3, #31
 80013d2:	0fdb      	lsrs	r3, r3, #31
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f8      	beq.n	80013cc <main+0xbc>
	  {
		  clkHandler();
 80013da:	f000 fbf3 	bl	8001bc4 <clkHandler>
		  buttonDebounce();
 80013de:	f000 fc6f 	bl	8001cc0 <buttonDebounce>
		  comHandler();
 80013e2:	f7ff f819 	bl	8000418 <comHandler>
		  if(flags.instructions.calibRequest)
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <main+0x200>)
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	071b      	lsls	r3, r3, #28
 80013ec:	0fdb      	lsrs	r3, r3, #31
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d02e      	beq.n	8001452 <main+0x142>
		  {
				sourceInTesting = &regValues[0];
 80013f4:	4b48      	ldr	r3, [pc, #288]	; (8001518 <main+0x208>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b48      	ldr	r3, [pc, #288]	; (800151c <main+0x20c>)
 80013fa:	601a      	str	r2, [r3, #0]

				for(int i = 0; i < regCount; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	e008      	b.n	8001414 <main+0x104>
				{
					regValues[i] = 0;
 8001402:	4b45      	ldr	r3, [pc, #276]	; (8001518 <main+0x208>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	18d3      	adds	r3, r2, r3
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < regCount; i++)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	4b42      	ldr	r3, [pc, #264]	; (8001520 <main+0x210>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	001a      	movs	r2, r3
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4293      	cmp	r3, r2
 800141e:	dbf0      	blt.n	8001402 <main+0xf2>
				}
				RELAY_ON(*sourceInTesting);	//připojit relé
 8001420:	4b3e      	ldr	r3, [pc, #248]	; (800151c <main+0x20c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	4b3d      	ldr	r3, [pc, #244]	; (800151c <main+0x20c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2102      	movs	r1, #2
 800142c:	430a      	orrs	r2, r1
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]

				sendData();	//poslat konfiguraci shift registrům
 8001432:	f001 fa5b 	bl	80028ec <sendData>

				savedSec = sysTime[SYSTIME_SEC];
 8001436:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <main+0x214>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <main+0x218>)
 800143c:	601a      	str	r2, [r3, #0]

				flags.instructions.calibRequest = 0;
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <main+0x200>)
 8001440:	7b1a      	ldrb	r2, [r3, #12]
 8001442:	2108      	movs	r1, #8
 8001444:	438a      	bics	r2, r1
 8001446:	731a      	strb	r2, [r3, #12]
				flags.calibRunning = 1;
 8001448:	4b31      	ldr	r3, [pc, #196]	; (8001510 <main+0x200>)
 800144a:	7e1a      	ldrb	r2, [r3, #24]
 800144c:	2108      	movs	r1, #8
 800144e:	430a      	orrs	r2, r1
 8001450:	761a      	strb	r2, [r3, #24]


		  }
		  if(flags.calibRunning)
 8001452:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <main+0x200>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	071b      	lsls	r3, r3, #28
 8001458:	0fdb      	lsrs	r3, r3, #31
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d043      	beq.n	80014e8 <main+0x1d8>
		  {
			  static uint8_t lock = 0;
			  if((sysTime[SYSTIME_SEC] >= savedSec + 3) & !lock)
 8001460:	4b30      	ldr	r3, [pc, #192]	; (8001524 <main+0x214>)
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <main+0x218>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1cda      	adds	r2, r3, #3
 800146a:	2300      	movs	r3, #0
 800146c:	4291      	cmp	r1, r2
 800146e:	415b      	adcs	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4a2e      	ldr	r2, [pc, #184]	; (800152c <main+0x21c>)
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	4251      	negs	r1, r2
 8001478:	414a      	adcs	r2, r1
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	4013      	ands	r3, r2
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00c      	beq.n	800149e <main+0x18e>
				{
					flags.meas.measRequest = 1;
 8001484:	4b22      	ldr	r3, [pc, #136]	; (8001510 <main+0x200>)
 8001486:	7d1a      	ldrb	r2, [r3, #20]
 8001488:	2101      	movs	r1, #1
 800148a:	430a      	orrs	r2, r1
 800148c:	751a      	strb	r2, [r3, #20]
					flags.meas.calibMeas = 1;
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <main+0x200>)
 8001490:	7d1a      	ldrb	r2, [r3, #20]
 8001492:	2140      	movs	r1, #64	; 0x40
 8001494:	430a      	orrs	r2, r1
 8001496:	751a      	strb	r2, [r3, #20]
					lock = 1;
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <main+0x21c>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
				}
				if(flags.instructions.calibDone)
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <main+0x200>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	06db      	lsls	r3, r3, #27
 80014a4:	0fdb      	lsrs	r3, r3, #31
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d01d      	beq.n	80014e8 <main+0x1d8>
				{
					for(int i = 0; i < regCount; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	e008      	b.n	80014c4 <main+0x1b4>
					{
						regValues[i] = 0;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <main+0x208>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	18d3      	adds	r3, r2, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < regCount; i++)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <main+0x210>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	001a      	movs	r2, r3
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4293      	cmp	r3, r2
 80014ce:	dbf0      	blt.n	80014b2 <main+0x1a2>
					}

					sendData();	//poslat konfiguraci shift registrům
 80014d0:	f001 fa0c 	bl	80028ec <sendData>
					flags.calibRunning = 0;
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <main+0x200>)
 80014d6:	7e1a      	ldrb	r2, [r3, #24]
 80014d8:	2108      	movs	r1, #8
 80014da:	438a      	bics	r2, r1
 80014dc:	761a      	strb	r2, [r3, #24]
					flags.instructions.calibDone = 0;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <main+0x200>)
 80014e0:	7b1a      	ldrb	r2, [r3, #12]
 80014e2:	2110      	movs	r1, #16
 80014e4:	438a      	bics	r2, r1
 80014e6:	731a      	strb	r2, [r3, #12]
				}
		  }
		  dispHandler();
 80014e8:	f000 fc72 	bl	8001dd0 <dispHandler>
		  UI_Handler();
 80014ec:	f000 fe4c 	bl	8002188 <UI_Handler>
		  testHandler();
 80014f0:	f001 fc50 	bl	8002d94 <testHandler>
		  measHandler();
 80014f4:	f000 ff96 	bl	8002424 <measHandler>
  {
 80014f8:	e768      	b.n	80013cc <main+0xbc>
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	20000eb4 	.word	0x20000eb4
 8001500:	200001fc 	.word	0x200001fc
 8001504:	0800e0a8 	.word	0x0800e0a8
 8001508:	0800e0b4 	.word	0x0800e0b4
 800150c:	48000800 	.word	0x48000800
 8001510:	200003d0 	.word	0x200003d0
 8001514:	200002b4 	.word	0x200002b4
 8001518:	20000400 	.word	0x20000400
 800151c:	20000414 	.word	0x20000414
 8001520:	20000404 	.word	0x20000404
 8001524:	200003c0 	.word	0x200003c0
 8001528:	200003f0 	.word	0x200003f0
 800152c:	200003f4 	.word	0x200003f4

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b099      	sub	sp, #100	; 0x64
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	242c      	movs	r4, #44	; 0x2c
 8001538:	193b      	adds	r3, r7, r4
 800153a:	0018      	movs	r0, r3
 800153c:	2334      	movs	r3, #52	; 0x34
 800153e:	001a      	movs	r2, r3
 8001540:	2100      	movs	r1, #0
 8001542:	f00c f932 	bl	800d7aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001546:	231c      	movs	r3, #28
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	0018      	movs	r0, r3
 800154c:	2310      	movs	r3, #16
 800154e:	001a      	movs	r2, r3
 8001550:	2100      	movs	r1, #0
 8001552:	f00c f92a 	bl	800d7aa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001556:	003b      	movs	r3, r7
 8001558:	0018      	movs	r0, r3
 800155a:	231c      	movs	r3, #28
 800155c:	001a      	movs	r2, r3
 800155e:	2100      	movs	r1, #0
 8001560:	f00c f923 	bl	800d7aa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001564:	0021      	movs	r1, r4
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2232      	movs	r2, #50	; 0x32
 800156a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2201      	movs	r2, #1
 8001570:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2201      	movs	r2, #1
 8001576:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2201      	movs	r2, #1
 800157c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2210      	movs	r2, #16
 8001582:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2210      	movs	r2, #16
 8001588:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2202      	movs	r2, #2
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	0212      	lsls	r2, r2, #8
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001598:	187b      	adds	r3, r7, r1
 800159a:	2200      	movs	r2, #0
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	0018      	movs	r0, r3
 80015a8:	f004 fe48 	bl	800623c <HAL_RCC_OscConfig>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80015b0:	f000 ffea 	bl	8002588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b4:	211c      	movs	r1, #28
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	2202      	movs	r2, #2
 80015c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2100      	movs	r1, #0
 80015d2:	0018      	movs	r0, r3
 80015d4:	f005 f9b8 	bl	8006948 <HAL_RCC_ClockConfig>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015dc:	f000 ffd4 	bl	8002588 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015e0:	003b      	movs	r3, r7
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	0292      	lsls	r2, r2, #10
 80015e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80015e8:	003b      	movs	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ee:	003b      	movs	r3, r7
 80015f0:	0018      	movs	r0, r3
 80015f2:	f005 fb25 	bl	8006c40 <HAL_RCCEx_PeriphCLKConfig>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0xce>
  {
    Error_Handler();
 80015fa:	f000 ffc5 	bl	8002588 <Error_Handler>
  }
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b019      	add	sp, #100	; 0x64
 8001604:	bd90      	pop	{r4, r7, pc}
	...

08001608 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	0018      	movs	r0, r3
 8001612:	230c      	movs	r3, #12
 8001614:	001a      	movs	r2, r3
 8001616:	2100      	movs	r1, #0
 8001618:	f00c f8c7 	bl	800d7aa <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800161c:	4b87      	ldr	r3, [pc, #540]	; (800183c <MX_ADC_Init+0x234>)
 800161e:	4a88      	ldr	r2, [pc, #544]	; (8001840 <MX_ADC_Init+0x238>)
 8001620:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001622:	4b86      	ldr	r3, [pc, #536]	; (800183c <MX_ADC_Init+0x234>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001628:	4b84      	ldr	r3, [pc, #528]	; (800183c <MX_ADC_Init+0x234>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800162e:	4b83      	ldr	r3, [pc, #524]	; (800183c <MX_ADC_Init+0x234>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001634:	4b81      	ldr	r3, [pc, #516]	; (800183c <MX_ADC_Init+0x234>)
 8001636:	2201      	movs	r2, #1
 8001638:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800163a:	4b80      	ldr	r3, [pc, #512]	; (800183c <MX_ADC_Init+0x234>)
 800163c:	2204      	movs	r2, #4
 800163e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001640:	4b7e      	ldr	r3, [pc, #504]	; (800183c <MX_ADC_Init+0x234>)
 8001642:	2200      	movs	r2, #0
 8001644:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001646:	4b7d      	ldr	r3, [pc, #500]	; (800183c <MX_ADC_Init+0x234>)
 8001648:	2200      	movs	r2, #0
 800164a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800164c:	4b7b      	ldr	r3, [pc, #492]	; (800183c <MX_ADC_Init+0x234>)
 800164e:	2200      	movs	r2, #0
 8001650:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001652:	4b7a      	ldr	r3, [pc, #488]	; (800183c <MX_ADC_Init+0x234>)
 8001654:	2200      	movs	r2, #0
 8001656:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001658:	4b78      	ldr	r3, [pc, #480]	; (800183c <MX_ADC_Init+0x234>)
 800165a:	22c2      	movs	r2, #194	; 0xc2
 800165c:	32ff      	adds	r2, #255	; 0xff
 800165e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001660:	4b76      	ldr	r3, [pc, #472]	; (800183c <MX_ADC_Init+0x234>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001666:	4b75      	ldr	r3, [pc, #468]	; (800183c <MX_ADC_Init+0x234>)
 8001668:	2224      	movs	r2, #36	; 0x24
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800166e:	4b73      	ldr	r3, [pc, #460]	; (800183c <MX_ADC_Init+0x234>)
 8001670:	2201      	movs	r2, #1
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001674:	4b71      	ldr	r3, [pc, #452]	; (800183c <MX_ADC_Init+0x234>)
 8001676:	0018      	movs	r0, r3
 8001678:	f001 ff08 	bl	800348c <HAL_ADC_Init>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d001      	beq.n	8001684 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001680:	f000 ff82 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0152      	lsls	r2, r2, #5
 8001690:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2205      	movs	r2, #5
 8001696:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001698:	1d3a      	adds	r2, r7, #4
 800169a:	4b68      	ldr	r3, [pc, #416]	; (800183c <MX_ADC_Init+0x234>)
 800169c:	0011      	movs	r1, r2
 800169e:	0018      	movs	r0, r3
 80016a0:	f002 f9c4 	bl	8003a2c <HAL_ADC_ConfigChannel>
 80016a4:	1e03      	subs	r3, r0, #0
 80016a6:	d001      	beq.n	80016ac <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80016a8:	f000 ff6e 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016b2:	1d3a      	adds	r2, r7, #4
 80016b4:	4b61      	ldr	r3, [pc, #388]	; (800183c <MX_ADC_Init+0x234>)
 80016b6:	0011      	movs	r1, r2
 80016b8:	0018      	movs	r0, r3
 80016ba:	f002 f9b7 	bl	8003a2c <HAL_ADC_ConfigChannel>
 80016be:	1e03      	subs	r3, r0, #0
 80016c0:	d001      	beq.n	80016c6 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80016c2:	f000 ff61 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2202      	movs	r2, #2
 80016ca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016cc:	1d3a      	adds	r2, r7, #4
 80016ce:	4b5b      	ldr	r3, [pc, #364]	; (800183c <MX_ADC_Init+0x234>)
 80016d0:	0011      	movs	r1, r2
 80016d2:	0018      	movs	r0, r3
 80016d4:	f002 f9aa 	bl	8003a2c <HAL_ADC_ConfigChannel>
 80016d8:	1e03      	subs	r3, r0, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80016dc:	f000 ff54 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2203      	movs	r2, #3
 80016e4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016e6:	1d3a      	adds	r2, r7, #4
 80016e8:	4b54      	ldr	r3, [pc, #336]	; (800183c <MX_ADC_Init+0x234>)
 80016ea:	0011      	movs	r1, r2
 80016ec:	0018      	movs	r0, r3
 80016ee:	f002 f99d 	bl	8003a2c <HAL_ADC_ConfigChannel>
 80016f2:	1e03      	subs	r3, r0, #0
 80016f4:	d001      	beq.n	80016fa <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80016f6:	f000 ff47 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2204      	movs	r2, #4
 80016fe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001700:	1d3a      	adds	r2, r7, #4
 8001702:	4b4e      	ldr	r3, [pc, #312]	; (800183c <MX_ADC_Init+0x234>)
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f002 f990 	bl	8003a2c <HAL_ADC_ConfigChannel>
 800170c:	1e03      	subs	r3, r0, #0
 800170e:	d001      	beq.n	8001714 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8001710:	f000 ff3a 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2205      	movs	r2, #5
 8001718:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800171a:	1d3a      	adds	r2, r7, #4
 800171c:	4b47      	ldr	r3, [pc, #284]	; (800183c <MX_ADC_Init+0x234>)
 800171e:	0011      	movs	r1, r2
 8001720:	0018      	movs	r0, r3
 8001722:	f002 f983 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800172a:	f000 ff2d 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2206      	movs	r2, #6
 8001732:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001734:	1d3a      	adds	r2, r7, #4
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <MX_ADC_Init+0x234>)
 8001738:	0011      	movs	r1, r2
 800173a:	0018      	movs	r0, r3
 800173c:	f002 f976 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d001      	beq.n	8001748 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8001744:	f000 ff20 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2207      	movs	r2, #7
 800174c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800174e:	1d3a      	adds	r2, r7, #4
 8001750:	4b3a      	ldr	r3, [pc, #232]	; (800183c <MX_ADC_Init+0x234>)
 8001752:	0011      	movs	r1, r2
 8001754:	0018      	movs	r0, r3
 8001756:	f002 f969 	bl	8003a2c <HAL_ADC_ConfigChannel>
 800175a:	1e03      	subs	r3, r0, #0
 800175c:	d001      	beq.n	8001762 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 800175e:	f000 ff13 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2208      	movs	r2, #8
 8001766:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001768:	1d3a      	adds	r2, r7, #4
 800176a:	4b34      	ldr	r3, [pc, #208]	; (800183c <MX_ADC_Init+0x234>)
 800176c:	0011      	movs	r1, r2
 800176e:	0018      	movs	r0, r3
 8001770:	f002 f95c 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8001774:	1e03      	subs	r3, r0, #0
 8001776:	d001      	beq.n	800177c <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8001778:	f000 ff06 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2209      	movs	r2, #9
 8001780:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001782:	1d3a      	adds	r2, r7, #4
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <MX_ADC_Init+0x234>)
 8001786:	0011      	movs	r1, r2
 8001788:	0018      	movs	r0, r3
 800178a:	f002 f94f 	bl	8003a2c <HAL_ADC_ConfigChannel>
 800178e:	1e03      	subs	r3, r0, #0
 8001790:	d001      	beq.n	8001796 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 8001792:	f000 fef9 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	220a      	movs	r2, #10
 800179a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800179c:	1d3a      	adds	r2, r7, #4
 800179e:	4b27      	ldr	r3, [pc, #156]	; (800183c <MX_ADC_Init+0x234>)
 80017a0:	0011      	movs	r1, r2
 80017a2:	0018      	movs	r0, r3
 80017a4:	f002 f942 	bl	8003a2c <HAL_ADC_ConfigChannel>
 80017a8:	1e03      	subs	r3, r0, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 80017ac:	f000 feec 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	220b      	movs	r2, #11
 80017b4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017b6:	1d3a      	adds	r2, r7, #4
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <MX_ADC_Init+0x234>)
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f002 f935 	bl	8003a2c <HAL_ADC_ConfigChannel>
 80017c2:	1e03      	subs	r3, r0, #0
 80017c4:	d001      	beq.n	80017ca <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 80017c6:	f000 fedf 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	220c      	movs	r2, #12
 80017ce:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017d0:	1d3a      	adds	r2, r7, #4
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_ADC_Init+0x234>)
 80017d4:	0011      	movs	r1, r2
 80017d6:	0018      	movs	r0, r3
 80017d8:	f002 f928 	bl	8003a2c <HAL_ADC_ConfigChannel>
 80017dc:	1e03      	subs	r3, r0, #0
 80017de:	d001      	beq.n	80017e4 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 80017e0:	f000 fed2 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	220d      	movs	r2, #13
 80017e8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017ea:	1d3a      	adds	r2, r7, #4
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_ADC_Init+0x234>)
 80017ee:	0011      	movs	r1, r2
 80017f0:	0018      	movs	r0, r3
 80017f2:	f002 f91b 	bl	8003a2c <HAL_ADC_ConfigChannel>
 80017f6:	1e03      	subs	r3, r0, #0
 80017f8:	d001      	beq.n	80017fe <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 80017fa:	f000 fec5 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	220e      	movs	r2, #14
 8001802:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001804:	1d3a      	adds	r2, r7, #4
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <MX_ADC_Init+0x234>)
 8001808:	0011      	movs	r1, r2
 800180a:	0018      	movs	r0, r3
 800180c:	f002 f90e 	bl	8003a2c <HAL_ADC_ConfigChannel>
 8001810:	1e03      	subs	r3, r0, #0
 8001812:	d001      	beq.n	8001818 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 8001814:	f000 feb8 	bl	8002588 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	220f      	movs	r2, #15
 800181c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800181e:	1d3a      	adds	r2, r7, #4
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_ADC_Init+0x234>)
 8001822:	0011      	movs	r1, r2
 8001824:	0018      	movs	r0, r3
 8001826:	f002 f901 	bl	8003a2c <HAL_ADC_ConfigChannel>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d001      	beq.n	8001832 <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 800182e:	f000 feab 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	b004      	add	sp, #16
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	20000210 	.word	0x20000210
 8001840:	40012400 	.word	0x40012400

08001844 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <MX_SPI1_Init+0x80>)
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <MX_SPI1_Init+0x84>)
 800184c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <MX_SPI1_Init+0x80>)
 8001850:	2282      	movs	r2, #130	; 0x82
 8001852:	0052      	lsls	r2, r2, #1
 8001854:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <MX_SPI1_Init+0x80>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <MX_SPI1_Init+0x80>)
 800185e:	22e0      	movs	r2, #224	; 0xe0
 8001860:	00d2      	lsls	r2, r2, #3
 8001862:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_SPI1_Init+0x80>)
 8001866:	2202      	movs	r2, #2
 8001868:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_SPI1_Init+0x80>)
 800186c:	2201      	movs	r2, #1
 800186e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_SPI1_Init+0x80>)
 8001872:	2280      	movs	r2, #128	; 0x80
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_SPI1_Init+0x80>)
 800187a:	2230      	movs	r2, #48	; 0x30
 800187c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_SPI1_Init+0x80>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_SPI1_Init+0x80>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_SPI1_Init+0x80>)
 800188c:	2200      	movs	r2, #0
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_SPI1_Init+0x80>)
 8001892:	2207      	movs	r2, #7
 8001894:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_SPI1_Init+0x80>)
 8001898:	2200      	movs	r2, #0
 800189a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_SPI1_Init+0x80>)
 800189e:	2200      	movs	r2, #0
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_SPI1_Init+0x80>)
 80018a4:	0018      	movs	r0, r3
 80018a6:	f005 fac9 	bl	8006e3c <HAL_SPI_Init>
 80018aa:	1e03      	subs	r3, r0, #0
 80018ac:	d001      	beq.n	80018b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018ae:	f000 fe6b 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_SPI1_Init+0x88>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	2140      	movs	r1, #64	; 0x40
 80018b8:	0018      	movs	r0, r3
 80018ba:	f002 fdf8 	bl	80044ae <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000250 	.word	0x20000250
 80018c8:	40013000 	.word	0x40013000
 80018cc:	48000400 	.word	0x48000400

080018d0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	0018      	movs	r0, r3
 80018da:	231c      	movs	r3, #28
 80018dc:	001a      	movs	r2, r3
 80018de:	2100      	movs	r1, #0
 80018e0:	f00b ff63 	bl	800d7aa <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_TIM14_Init+0x8c>)
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <MX_TIM14_Init+0x90>)
 80018e8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <MX_TIM14_Init+0x8c>)
 80018ec:	220f      	movs	r2, #15
 80018ee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_TIM14_Init+0x8c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <MX_TIM14_Init+0x8c>)
 80018f8:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <MX_TIM14_Init+0x94>)
 80018fa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <MX_TIM14_Init+0x8c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <MX_TIM14_Init+0x8c>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <MX_TIM14_Init+0x8c>)
 800190a:	0018      	movs	r0, r3
 800190c:	f005 ffee 	bl	80078ec <HAL_TIM_Base_Init>
 8001910:	1e03      	subs	r3, r0, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001914:	f000 fe38 	bl	8002588 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <MX_TIM14_Init+0x8c>)
 800191a:	0018      	movs	r0, r3
 800191c:	f006 f888 	bl	8007a30 <HAL_TIM_OC_Init>
 8001920:	1e03      	subs	r3, r0, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001924:	f000 fe30 	bl	8002588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001940:	1d39      	adds	r1, r7, #4
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_TIM14_Init+0x8c>)
 8001944:	2200      	movs	r2, #0
 8001946:	0018      	movs	r0, r3
 8001948:	f006 f9e0 	bl	8007d0c <HAL_TIM_OC_ConfigChannel>
 800194c:	1e03      	subs	r3, r0, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001950:	f000 fe1a 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b008      	add	sp, #32
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200002b4 	.word	0x200002b4
 8001960:	40002000 	.word	0x40002000
 8001964:	0000270f 	.word	0x0000270f

08001968 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_USART3_UART_Init+0x58>)
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <MX_USART3_UART_Init+0x5c>)
 8001970:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <MX_USART3_UART_Init+0x58>)
 8001974:	2296      	movs	r2, #150	; 0x96
 8001976:	0212      	lsls	r2, r2, #8
 8001978:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_USART3_UART_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_USART3_UART_Init+0x58>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_USART3_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_USART3_UART_Init+0x58>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MX_USART3_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_USART3_UART_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_USART3_UART_Init+0x58>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_USART3_UART_Init+0x58>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <MX_USART3_UART_Init+0x58>)
 80019ac:	0018      	movs	r0, r3
 80019ae:	f006 fcb1 	bl	8008314 <HAL_UART_Init>
 80019b2:	1e03      	subs	r3, r0, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019b6:	f000 fde7 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200002fc 	.word	0x200002fc
 80019c4:	40004800 	.word	0x40004800

080019c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b08b      	sub	sp, #44	; 0x2c
 80019cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ce:	2414      	movs	r4, #20
 80019d0:	193b      	adds	r3, r7, r4
 80019d2:	0018      	movs	r0, r3
 80019d4:	2314      	movs	r3, #20
 80019d6:	001a      	movs	r2, r3
 80019d8:	2100      	movs	r1, #0
 80019da:	f00b fee6 	bl	800d7aa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019de:	4b74      	ldr	r3, [pc, #464]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	4b73      	ldr	r3, [pc, #460]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	03c9      	lsls	r1, r1, #15
 80019e8:	430a      	orrs	r2, r1
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	03db      	lsls	r3, r3, #15
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	4b6c      	ldr	r3, [pc, #432]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	0309      	lsls	r1, r1, #12
 8001a04:	430a      	orrs	r2, r1
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	4b69      	ldr	r3, [pc, #420]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	031b      	lsls	r3, r3, #12
 8001a10:	4013      	ands	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	0289      	lsls	r1, r1, #10
 8001a20:	430a      	orrs	r2, r1
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	029b      	lsls	r3, r3, #10
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	4b5e      	ldr	r3, [pc, #376]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	02c9      	lsls	r1, r1, #11
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	615a      	str	r2, [r3, #20]
 8001a40:	4b5b      	ldr	r3, [pc, #364]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	02db      	lsls	r3, r3, #11
 8001a48:	4013      	ands	r3, r2
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4e:	4b58      	ldr	r3, [pc, #352]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	4b57      	ldr	r3, [pc, #348]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0349      	lsls	r1, r1, #13
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	615a      	str	r2, [r3, #20]
 8001a5c:	4b54      	ldr	r3, [pc, #336]	; (8001bb0 <MX_GPIO_Init+0x1e8>)
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	035b      	lsls	r3, r3, #13
 8001a64:	4013      	ands	r3, r2
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|SR_CLR_Pin|SR_RCLK_Pin|SR_OE_Pin
 8001a6a:	4952      	ldr	r1, [pc, #328]	; (8001bb4 <MX_GPIO_Init+0x1ec>)
 8001a6c:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <MX_GPIO_Init+0x1f0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	0018      	movs	r0, r3
 8001a72:	f002 fd1c 	bl	80044ae <HAL_GPIO_WritePin>
                          |DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin|BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001a76:	239e      	movs	r3, #158	; 0x9e
 8001a78:	015b      	lsls	r3, r3, #5
 8001a7a:	4850      	ldr	r0, [pc, #320]	; (8001bbc <MX_GPIO_Init+0x1f4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	0019      	movs	r1, r3
 8001a80:	f002 fd15 	bl	80044ae <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	0219      	lsls	r1, r3, #8
 8001a88:	2390      	movs	r3, #144	; 0x90
 8001a8a:	05db      	lsls	r3, r3, #23
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f002 fd0d 	bl	80044ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin SR_CLR_Pin SR_RCLK_Pin SR_OE_Pin
                           DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|SR_CLR_Pin|SR_RCLK_Pin|SR_OE_Pin
 8001a94:	193b      	adds	r3, r7, r4
 8001a96:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <MX_GPIO_Init+0x1ec>)
 8001a98:	601a      	str	r2, [r3, #0]
                          |DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin|BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	193b      	adds	r3, r7, r4
 8001aae:	4a42      	ldr	r2, [pc, #264]	; (8001bb8 <MX_GPIO_Init+0x1f0>)
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	0010      	movs	r0, r2
 8001ab4:	f002 fb66 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEATER_STATE_Pin */
  GPIO_InitStruct.Pin = HEATER_STATE_Pin;
 8001ab8:	0021      	movs	r1, r4
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	0152      	lsls	r2, r2, #5
 8001ac0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac2:	000c      	movs	r4, r1
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HEATER_STATE_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	4a39      	ldr	r2, [pc, #228]	; (8001bb8 <MX_GPIO_Init+0x1f0>)
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	0010      	movs	r0, r2
 8001ad8:	f002 fb54 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001adc:	0021      	movs	r1, r4
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	229e      	movs	r2, #158	; 0x9e
 8001ae2:	0152      	lsls	r2, r2, #5
 8001ae4:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	000c      	movs	r4, r1
 8001ae8:	193b      	adds	r3, r7, r4
 8001aea:	2201      	movs	r2, #1
 8001aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	193b      	adds	r3, r7, r4
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	4a2f      	ldr	r2, [pc, #188]	; (8001bbc <MX_GPIO_Init+0x1f4>)
 8001afe:	0019      	movs	r1, r3
 8001b00:	0010      	movs	r0, r2
 8001b02:	f002 fb3f 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8001b06:	193b      	adds	r3, r7, r4
 8001b08:	22c0      	movs	r2, #192	; 0xc0
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b0e:	193b      	adds	r3, r7, r4
 8001b10:	2288      	movs	r2, #136	; 0x88
 8001b12:	0352      	lsls	r2, r2, #13
 8001b14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b16:	193b      	adds	r3, r7, r4
 8001b18:	2202      	movs	r2, #2
 8001b1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	193a      	adds	r2, r7, r4
 8001b1e:	2390      	movs	r3, #144	; 0x90
 8001b20:	05db      	lsls	r3, r3, #23
 8001b22:	0011      	movs	r1, r2
 8001b24:	0018      	movs	r0, r3
 8001b26:	f002 fb2d 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b2a:	193b      	adds	r3, r7, r4
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	00d2      	lsls	r2, r2, #3
 8001b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	193b      	adds	r3, r7, r4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	193a      	adds	r2, r7, r4
 8001b40:	2390      	movs	r3, #144	; 0x90
 8001b42:	05db      	lsls	r3, r3, #23
 8001b44:	0011      	movs	r1, r2
 8001b46:	0018      	movs	r0, r3
 8001b48:	f002 fb1c 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8001b4c:	0021      	movs	r1, r4
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	0212      	lsls	r2, r2, #8
 8001b54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	000c      	movs	r4, r1
 8001b58:	193b      	adds	r3, r7, r4
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	193b      	adds	r3, r7, r4
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	193b      	adds	r3, r7, r4
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	193a      	adds	r2, r7, r4
 8001b6c:	2390      	movs	r3, #144	; 0x90
 8001b6e:	05db      	lsls	r3, r3, #23
 8001b70:	0011      	movs	r1, r2
 8001b72:	0018      	movs	r0, r3
 8001b74:	f002 fb06 	bl	8004184 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8001b78:	193b      	adds	r3, r7, r4
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7e:	193b      	adds	r3, r7, r4
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	193b      	adds	r3, r7, r4
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	193b      	adds	r3, r7, r4
 8001b8c:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <MX_GPIO_Init+0x1f8>)
 8001b8e:	0019      	movs	r1, r3
 8001b90:	0010      	movs	r0, r2
 8001b92:	f002 faf7 	bl	8004184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2007      	movs	r0, #7
 8001b9c:	f002 fa42 	bl	8004024 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001ba0:	2007      	movs	r0, #7
 8001ba2:	f002 fa54 	bl	800404e <HAL_NVIC_EnableIRQ>

}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b00b      	add	sp, #44	; 0x2c
 8001bac:	bd90      	pop	{r4, r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	0000e3c4 	.word	0x0000e3c4
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	48000800 	.word	0x48000800
 8001bc0:	48000c00 	.word	0x48000c00

08001bc4 <clkHandler>:

/* USER CODE BEGIN 4 */

//_____Hodiny_____//
 void clkHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	//___nulování všech flagů___//
	flags.time.ten_ms = 0;
 8001bc8:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <clkHandler+0xf4>)
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	438a      	bics	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <clkHandler+0xf4>)
 8001bd4:	781a      	ldrb	r2, [r3, #0]
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	438a      	bics	r2, r1
 8001bda:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <clkHandler+0xf4>)
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	2104      	movs	r1, #4
 8001be2:	438a      	bics	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <clkHandler+0xf4>)
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	2108      	movs	r1, #8
 8001bec:	438a      	bics	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]

	sysTime[SYSTIME_TEN_MS]++;	//uplynulo dalších 10 ms
 8001bf0:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <clkHandler+0xf8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <clkHandler+0xf8>)
 8001bf8:	601a      	str	r2, [r3, #0]

#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 8001bfa:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <clkHandler+0xf8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2164      	movs	r1, #100	; 0x64
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7fe fb19 	bl	8000238 <__aeabi_uidivmod>
 8001c06:	1e0b      	subs	r3, r1, #0
 8001c08:	d109      	bne.n	8001c1e <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 8001c0a:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <clkHandler+0xf8>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <clkHandler+0xf8>)
 8001c12:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <clkHandler+0xf4>)
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	2102      	movs	r1, #2
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)	//Uplynula 1 s
 8001c1e:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <clkHandler+0xf4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	079b      	lsls	r3, r3, #30
 8001c24:	0fdb      	lsrs	r3, r3, #31
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d042      	beq.n	8001cb2 <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <clkHandler+0xf8>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	213c      	movs	r1, #60	; 0x3c
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7fe fb00 	bl	8000238 <__aeabi_uidivmod>
 8001c38:	1e0b      	subs	r3, r1, #0
 8001c3a:	d110      	bne.n	8001c5e <clkHandler+0x9a>
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <clkHandler+0xf8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00c      	beq.n	8001c5e <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <clkHandler+0xf8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <clkHandler+0xf8>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <clkHandler+0xf8>)
 8001c52:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <clkHandler+0xf4>)
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	2104      	movs	r1, #4
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)	//Uplynula 1 min
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <clkHandler+0xf4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	075b      	lsls	r3, r3, #29
 8001c64:	0fdb      	lsrs	r3, r3, #31
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d022      	beq.n	8001cb2 <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <clkHandler+0xf8>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	213c      	movs	r1, #60	; 0x3c
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7fe fae0 	bl	8000238 <__aeabi_uidivmod>
 8001c78:	1e0b      	subs	r3, r1, #0
 8001c7a:	d11a      	bne.n	8001cb2 <clkHandler+0xee>
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <clkHandler+0xf8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d016      	beq.n	8001cb2 <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <clkHandler+0xf8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <clkHandler+0xf8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <clkHandler+0xf8>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <clkHandler+0xf8>)
 8001c98:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <clkHandler+0xf4>)
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	2108      	movs	r1, #8
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <clkHandler+0xf8>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b16      	cmp	r3, #22
 8001caa:	d902      	bls.n	8001cb2 <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <clkHandler+0xf8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli �?as
	}
#endif
}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200003d0 	.word	0x200003d0
 8001cbc:	200003c0 	.word	0x200003c0

08001cc0 <buttonDebounce>:

//_____Debounce tla�?ítek_____//
 void buttonDebounce(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	//___nulování flagů___//
	flags.buttons.butt0_ver = 0;
 8001cc4:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <buttonDebounce+0x104>)
 8001cc6:	791a      	ldrb	r2, [r3, #4]
 8001cc8:	2102      	movs	r1, #2
 8001cca:	438a      	bics	r2, r1
 8001ccc:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <buttonDebounce+0x104>)
 8001cd0:	791a      	ldrb	r2, [r3, #4]
 8001cd2:	2108      	movs	r1, #8
 8001cd4:	438a      	bics	r2, r1
 8001cd6:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)	//interrupt tla�?ítka 0
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <buttonDebounce+0x104>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	07db      	lsls	r3, r3, #31
 8001cde:	0fdb      	lsrs	r3, r3, #31
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d031      	beq.n	8001d4a <buttonDebounce+0x8a>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	009a      	lsls	r2, r3, #2
 8001cea:	2390      	movs	r3, #144	; 0x90
 8001cec:	05db      	lsls	r3, r3, #23
 8001cee:	0011      	movs	r1, r2
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f002 fbbf 	bl	8004474 <HAL_GPIO_ReadPin>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d107      	bne.n	8001d0c <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <buttonDebounce+0x108>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <buttonDebounce+0x108>)
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e007      	b.n	8001d1c <buttonDebounce+0x5c>
		}
		else	//pin tla�?ítka na Low -> šlo o zákmit
		{
			button0_Debounce = 0;
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <buttonDebounce+0x108>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8001d12:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <buttonDebounce+0x104>)
 8001d14:	791a      	ldrb	r2, [r3, #4]
 8001d16:	2101      	movs	r1, #1
 8001d18:	438a      	bics	r2, r1
 8001d1a:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)	//pin tla�?ítka na High 5*10 ms -> ustálený stisk
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <buttonDebounce+0x108>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d911      	bls.n	8001d4a <buttonDebounce+0x8a>
		{
			flags.buttons.butt0_ver = 1;
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <buttonDebounce+0x104>)
 8001d28:	791a      	ldrb	r2, [r3, #4]
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <buttonDebounce+0x104>)
 8001d32:	791a      	ldrb	r2, [r3, #4]
 8001d34:	2101      	movs	r1, #1
 8001d36:	438a      	bics	r2, r1
 8001d38:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <buttonDebounce+0x108>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <buttonDebounce+0x104>)
 8001d42:	7c1a      	ldrb	r2, [r3, #16]
 8001d44:	2120      	movs	r1, #32
 8001d46:	430a      	orrs	r2, r1
 8001d48:	741a      	strb	r2, [r3, #16]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)	//interrupt tla�?ítka 1
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <buttonDebounce+0x104>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	075b      	lsls	r3, r3, #29
 8001d50:	0fdb      	lsrs	r3, r3, #31
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d031      	beq.n	8001dbc <buttonDebounce+0xfc>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	005a      	lsls	r2, r3, #1
 8001d5c:	2390      	movs	r3, #144	; 0x90
 8001d5e:	05db      	lsls	r3, r3, #23
 8001d60:	0011      	movs	r1, r2
 8001d62:	0018      	movs	r0, r3
 8001d64:	f002 fb86 	bl	8004474 <HAL_GPIO_ReadPin>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d107      	bne.n	8001d7e <buttonDebounce+0xbe>
		{
			button1_Debounce++;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <buttonDebounce+0x10c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <buttonDebounce+0x10c>)
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	e007      	b.n	8001d8e <buttonDebounce+0xce>
		}
		else	//pin tla�?ítka na Low -> šlo o zákmit
		{
			button1_Debounce = 0;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <buttonDebounce+0x10c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <buttonDebounce+0x104>)
 8001d86:	791a      	ldrb	r2, [r3, #4]
 8001d88:	2104      	movs	r1, #4
 8001d8a:	438a      	bics	r2, r1
 8001d8c:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)	//pin tla�?ítka na High 5*10 ms -> ustálený stisk
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <buttonDebounce+0x10c>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d911      	bls.n	8001dbc <buttonDebounce+0xfc>
		{
			flags.buttons.butt1_ver = 1;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <buttonDebounce+0x104>)
 8001d9a:	791a      	ldrb	r2, [r3, #4]
 8001d9c:	2108      	movs	r1, #8
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <buttonDebounce+0x104>)
 8001da4:	791a      	ldrb	r2, [r3, #4]
 8001da6:	2104      	movs	r1, #4
 8001da8:	438a      	bics	r2, r1
 8001daa:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <buttonDebounce+0x10c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <buttonDebounce+0x104>)
 8001db4:	7c1a      	ldrb	r2, [r3, #16]
 8001db6:	2120      	movs	r1, #32
 8001db8:	430a      	orrs	r2, r1
 8001dba:	741a      	strb	r2, [r3, #16]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	200003d0 	.word	0x200003d0
 8001dc8:	200003ec 	.word	0x200003ec
 8001dcc:	200003ed 	.word	0x200003ed

08001dd0 <dispHandler>:

//_____Obsluha výtisků textu na displej_____//
 void dispHandler()
{
 8001dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd2:	b0bd      	sub	sp, #244	; 0xf4
 8001dd4:	af02      	add	r7, sp, #8
	char emptyString[] = "                ";
 8001dd6:	25cc      	movs	r5, #204	; 0xcc
 8001dd8:	197b      	adds	r3, r7, r5
 8001dda:	4ada      	ldr	r2, [pc, #872]	; (8002144 <dispHandler+0x374>)
 8001ddc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dde:	c313      	stmia	r3!, {r0, r1, r4}
 8001de0:	6811      	ldr	r1, [r2, #0]
 8001de2:	6019      	str	r1, [r3, #0]
 8001de4:	7912      	ldrb	r2, [r2, #4]
 8001de6:	711a      	strb	r2, [r3, #4]
	char* strings[4] = {emptyString};
 8001de8:	24bc      	movs	r4, #188	; 0xbc
 8001dea:	193b      	adds	r3, r7, r4
 8001dec:	0018      	movs	r0, r3
 8001dee:	2310      	movs	r3, #16
 8001df0:	001a      	movs	r2, r3
 8001df2:	2100      	movs	r1, #0
 8001df4:	f00b fcd9 	bl	800d7aa <memset>
 8001df8:	193b      	adds	r3, r7, r4
 8001dfa:	197a      	adds	r2, r7, r5
 8001dfc:	601a      	str	r2, [r3, #0]
	ALIGN align[4] = {CENTER};
 8001dfe:	25b8      	movs	r5, #184	; 0xb8
 8001e00:	197b      	adds	r3, r7, r5
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	197b      	adds	r3, r7, r5
 8001e08:	2202      	movs	r2, #2
 8001e0a:	701a      	strb	r2, [r3, #0]
		strings[3] = ADC_value;
		writeRow(strings[3], strlen(strings[3]), 3, align[3]);
	}
#endif

	if(flags.testProgress && !flags.instructions.stopRequest)
 8001e0c:	4bce      	ldr	r3, [pc, #824]	; (8002148 <dispHandler+0x378>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	079b      	lsls	r3, r3, #30
 8001e12:	0fdb      	lsrs	r3, r3, #31
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <dispHandler+0x4c>
 8001e1a:	e0f6      	b.n	800200a <dispHandler+0x23a>
 8001e1c:	4bca      	ldr	r3, [pc, #808]	; (8002148 <dispHandler+0x378>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	079b      	lsls	r3, r3, #30
 8001e22:	0fdb      	lsrs	r3, r3, #31
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d000      	beq.n	8001e2c <dispHandler+0x5c>
 8001e2a:	e0ee      	b.n	800200a <dispHandler+0x23a>
	{
		if(currentPhase() != WAITING)
 8001e2c:	f000 ffa8 	bl	8002d80 <currentPhase>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	d010      	beq.n	8001e56 <dispHandler+0x86>
		{
			char supplyInTestingNum[6];
			sprintf(supplyInTestingNum, "%d/%d", supplyToTest+1, regCount);
 8001e34:	4bc5      	ldr	r3, [pc, #788]	; (800214c <dispHandler+0x37c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	4bc4      	ldr	r3, [pc, #784]	; (8002150 <dispHandler+0x380>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	49c4      	ldr	r1, [pc, #784]	; (8002154 <dispHandler+0x384>)
 8001e42:	26b0      	movs	r6, #176	; 0xb0
 8001e44:	19b8      	adds	r0, r7, r6
 8001e46:	f00b fdad 	bl	800d9a4 <siprintf>

			strings[0] = supplyInTestingNum;
 8001e4a:	193b      	adds	r3, r7, r4
 8001e4c:	19ba      	adds	r2, r7, r6
 8001e4e:	601a      	str	r2, [r3, #0]
			align[0] = LEFT;
 8001e50:	197b      	adds	r3, r7, r5
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
		}

		switch(currentPhase())
 8001e56:	f000 ff93 	bl	8002d80 <currentPhase>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d900      	bls.n	8001e62 <dispHandler+0x92>
 8001e60:	e087      	b.n	8001f72 <dispHandler+0x1a2>
 8001e62:	009a      	lsls	r2, r3, #2
 8001e64:	4bbc      	ldr	r3, [pc, #752]	; (8002158 <dispHandler+0x388>)
 8001e66:	18d3      	adds	r3, r2, r3
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	469f      	mov	pc, r3
		{
		case START:
		{
			char start1[] = "Spousteni";
 8001e6c:	21a4      	movs	r1, #164	; 0xa4
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	4aba      	ldr	r2, [pc, #744]	; (800215c <dispHandler+0x38c>)
 8001e72:	ca11      	ldmia	r2!, {r0, r4}
 8001e74:	c311      	stmia	r3!, {r0, r4}
 8001e76:	8812      	ldrh	r2, [r2, #0]
 8001e78:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001e7a:	23bc      	movs	r3, #188	; 0xbc
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	187a      	adds	r2, r7, r1
 8001e80:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001e82:	23b8      	movs	r3, #184	; 0xb8
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	2202      	movs	r2, #2
 8001e88:	705a      	strb	r2, [r3, #1]

			break;
 8001e8a:	e091      	b.n	8001fb0 <dispHandler+0x1e0>
		}
		case START_DONE:
		{
			char start1[] = "Spousteni";
 8001e8c:	2198      	movs	r1, #152	; 0x98
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	4ab2      	ldr	r2, [pc, #712]	; (800215c <dispHandler+0x38c>)
 8001e92:	ca11      	ldmia	r2!, {r0, r4}
 8001e94:	c311      	stmia	r3!, {r0, r4}
 8001e96:	8812      	ldrh	r2, [r2, #0]
 8001e98:	801a      	strh	r2, [r3, #0]
			char start2[] = "dokonceno";
 8001e9a:	208c      	movs	r0, #140	; 0x8c
 8001e9c:	183b      	adds	r3, r7, r0
 8001e9e:	4ab0      	ldr	r2, [pc, #704]	; (8002160 <dispHandler+0x390>)
 8001ea0:	ca30      	ldmia	r2!, {r4, r5}
 8001ea2:	c330      	stmia	r3!, {r4, r5}
 8001ea4:	8812      	ldrh	r2, [r2, #0]
 8001ea6:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001ea8:	24bc      	movs	r4, #188	; 0xbc
 8001eaa:	193b      	adds	r3, r7, r4
 8001eac:	187a      	adds	r2, r7, r1
 8001eae:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001eb0:	21b8      	movs	r1, #184	; 0xb8
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	705a      	strb	r2, [r3, #1]
			strings[2] = start2;
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	183a      	adds	r2, r7, r0
 8001ebc:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001ebe:	187b      	adds	r3, r7, r1
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	709a      	strb	r2, [r3, #2]
			break;
 8001ec4:	e074      	b.n	8001fb0 <dispHandler+0x1e0>
		}
		case MAIN_TEST:
		{
			char main1[] = "Hlavni test";
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	4aa6      	ldr	r2, [pc, #664]	; (8002164 <dispHandler+0x394>)
 8001ecc:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001ece:	c331      	stmia	r3!, {r0, r4, r5}
			strings[1] = main1;
 8001ed0:	23bc      	movs	r3, #188	; 0xbc
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	187a      	adds	r2, r7, r1
 8001ed6:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001ed8:	23b8      	movs	r3, #184	; 0xb8
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2202      	movs	r2, #2
 8001ede:	705a      	strb	r2, [r3, #1]
			break;
 8001ee0:	e066      	b.n	8001fb0 <dispHandler+0x1e0>
		}
		case MAIN_TEST_DONE:
		{
			char main1[] = "Hlavni test";
 8001ee2:	2174      	movs	r1, #116	; 0x74
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	4a9f      	ldr	r2, [pc, #636]	; (8002164 <dispHandler+0x394>)
 8001ee8:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001eea:	c331      	stmia	r3!, {r0, r4, r5}
			char main2[] = "dokoncen";
 8001eec:	2068      	movs	r0, #104	; 0x68
 8001eee:	183b      	adds	r3, r7, r0
 8001ef0:	4a9d      	ldr	r2, [pc, #628]	; (8002168 <dispHandler+0x398>)
 8001ef2:	ca30      	ldmia	r2!, {r4, r5}
 8001ef4:	c330      	stmia	r3!, {r4, r5}
 8001ef6:	7812      	ldrb	r2, [r2, #0]
 8001ef8:	701a      	strb	r2, [r3, #0]
			strings[1] = main1;
 8001efa:	24bc      	movs	r4, #188	; 0xbc
 8001efc:	193b      	adds	r3, r7, r4
 8001efe:	187a      	adds	r2, r7, r1
 8001f00:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001f02:	21b8      	movs	r1, #184	; 0xb8
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	2202      	movs	r2, #2
 8001f08:	705a      	strb	r2, [r3, #1]
			strings[2] = main2;
 8001f0a:	193b      	adds	r3, r7, r4
 8001f0c:	183a      	adds	r2, r7, r0
 8001f0e:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	2202      	movs	r2, #2
 8001f14:	709a      	strb	r2, [r3, #2]
			break;
 8001f16:	e04b      	b.n	8001fb0 <dispHandler+0x1e0>
		}
		case BATTERY_TEST:
		{
			char bat1[] = "Test baterie";
 8001f18:	2158      	movs	r1, #88	; 0x58
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	4a93      	ldr	r2, [pc, #588]	; (800216c <dispHandler+0x39c>)
 8001f1e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001f20:	c331      	stmia	r3!, {r0, r4, r5}
 8001f22:	7812      	ldrb	r2, [r2, #0]
 8001f24:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001f26:	23bc      	movs	r3, #188	; 0xbc
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	187a      	adds	r2, r7, r1
 8001f2c:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001f2e:	23b8      	movs	r3, #184	; 0xb8
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	2202      	movs	r2, #2
 8001f34:	705a      	strb	r2, [r3, #1]
			break;
 8001f36:	e03b      	b.n	8001fb0 <dispHandler+0x1e0>
		}
		case BATTERY_TEST_DONE:
		{
			char bat1[] = "Test baterie";
 8001f38:	2148      	movs	r1, #72	; 0x48
 8001f3a:	187b      	adds	r3, r7, r1
 8001f3c:	4a8b      	ldr	r2, [pc, #556]	; (800216c <dispHandler+0x39c>)
 8001f3e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001f40:	c331      	stmia	r3!, {r0, r4, r5}
 8001f42:	7812      	ldrb	r2, [r2, #0]
 8001f44:	701a      	strb	r2, [r3, #0]
			char bat2[] = "dokoncen";
 8001f46:	203c      	movs	r0, #60	; 0x3c
 8001f48:	183b      	adds	r3, r7, r0
 8001f4a:	4a87      	ldr	r2, [pc, #540]	; (8002168 <dispHandler+0x398>)
 8001f4c:	ca30      	ldmia	r2!, {r4, r5}
 8001f4e:	c330      	stmia	r3!, {r4, r5}
 8001f50:	7812      	ldrb	r2, [r2, #0]
 8001f52:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001f54:	24bc      	movs	r4, #188	; 0xbc
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	187a      	adds	r2, r7, r1
 8001f5a:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001f5c:	21b8      	movs	r1, #184	; 0xb8
 8001f5e:	187b      	adds	r3, r7, r1
 8001f60:	2202      	movs	r2, #2
 8001f62:	705a      	strb	r2, [r3, #1]
			strings[2] = bat2;
 8001f64:	193b      	adds	r3, r7, r4
 8001f66:	183a      	adds	r2, r7, r0
 8001f68:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001f6a:	187b      	adds	r3, r7, r1
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	709a      	strb	r2, [r3, #2]
			break;
 8001f70:	e01e      	b.n	8001fb0 <dispHandler+0x1e0>
		}
		default:
		{
			char default1[] = "Zahoreni";
 8001f72:	2030      	movs	r0, #48	; 0x30
 8001f74:	183b      	adds	r3, r7, r0
 8001f76:	4a7e      	ldr	r2, [pc, #504]	; (8002170 <dispHandler+0x3a0>)
 8001f78:	ca12      	ldmia	r2!, {r1, r4}
 8001f7a:	c312      	stmia	r3!, {r1, r4}
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	701a      	strb	r2, [r3, #0]
			char default2[] = "zdroju";
 8001f80:	2428      	movs	r4, #40	; 0x28
 8001f82:	193b      	adds	r3, r7, r4
 8001f84:	4a7b      	ldr	r2, [pc, #492]	; (8002174 <dispHandler+0x3a4>)
 8001f86:	6811      	ldr	r1, [r2, #0]
 8001f88:	6019      	str	r1, [r3, #0]
 8001f8a:	8891      	ldrh	r1, [r2, #4]
 8001f8c:	8099      	strh	r1, [r3, #4]
 8001f8e:	7992      	ldrb	r2, [r2, #6]
 8001f90:	719a      	strb	r2, [r3, #6]
			strings[1] = default1;
 8001f92:	21bc      	movs	r1, #188	; 0xbc
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	183a      	adds	r2, r7, r0
 8001f98:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001f9a:	20b8      	movs	r0, #184	; 0xb8
 8001f9c:	183b      	adds	r3, r7, r0
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	705a      	strb	r2, [r3, #1]
			strings[2] = default2;
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	193a      	adds	r2, r7, r4
 8001fa6:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001fa8:	183b      	adds	r3, r7, r0
 8001faa:	2202      	movs	r2, #2
 8001fac:	709a      	strb	r2, [r3, #2]

			break;
 8001fae:	46c0      	nop			; (mov r8, r8)
		}
		}

		for(int i = 0; i < 4; i++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	22e4      	movs	r2, #228	; 0xe4
 8001fb4:	18ba      	adds	r2, r7, r2
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	e022      	b.n	8002000 <dispHandler+0x230>
		{
			writeRow(strings[i], strlen(strings[i]), i, align[i]);
 8001fba:	21bc      	movs	r1, #188	; 0xbc
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	25e4      	movs	r5, #228	; 0xe4
 8001fc0:	197a      	adds	r2, r7, r5
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	58d4      	ldr	r4, [r2, r3]
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	197a      	adds	r2, r7, r5
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	0092      	lsls	r2, r2, #2
 8001fd0:	58d3      	ldr	r3, [r2, r3]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f7fe f898 	bl	8000108 <strlen>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	b2d9      	uxtb	r1, r3
 8001fdc:	197b      	adds	r3, r7, r5
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	b2d8      	uxtb	r0, r3
 8001fe2:	23b8      	movs	r3, #184	; 0xb8
 8001fe4:	18fa      	adds	r2, r7, r3
 8001fe6:	197b      	adds	r3, r7, r5
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	18d3      	adds	r3, r2, r3
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	0002      	movs	r2, r0
 8001ff0:	0020      	movs	r0, r4
 8001ff2:	f7ff f899 	bl	8001128 <writeRow>
		for(int i = 0; i < 4; i++)
 8001ff6:	197b      	adds	r3, r7, r5
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	197a      	adds	r2, r7, r5
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	23e4      	movs	r3, #228	; 0xe4
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b03      	cmp	r3, #3
 8002008:	ddd7      	ble.n	8001fba <dispHandler+0x1ea>
		}
	}

	//_____Zobrazení �?asu u hlavních testů_____//
	if(flags.time.sec)
 800200a:	4b4f      	ldr	r3, [pc, #316]	; (8002148 <dispHandler+0x378>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	079b      	lsls	r3, r3, #30
 8002010:	0fdb      	lsrs	r3, r3, #31
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d051      	beq.n	80020bc <dispHandler+0x2ec>
	{
		switch(currentPhase())
 8002018:	f000 feb2 	bl	8002d80 <currentPhase>
 800201c:	0003      	movs	r3, r0
 800201e:	2b03      	cmp	r3, #3
 8002020:	d002      	beq.n	8002028 <dispHandler+0x258>
 8002022:	2b05      	cmp	r3, #5
 8002024:	d028      	beq.n	8002078 <dispHandler+0x2a8>
			sprintf(time, "%lu:%lu", 14-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
			writeRow(time, strlen(time), 2, CENTER);
			break;
		}
		default:
			break;
 8002026:	e04a      	b.n	80020be <dispHandler+0x2ee>
			char time[9] = {0};
 8002028:	251c      	movs	r5, #28
 800202a:	197b      	adds	r3, r7, r5
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	3304      	adds	r3, #4
 8002032:	2205      	movs	r2, #5
 8002034:	2100      	movs	r1, #0
 8002036:	0018      	movs	r0, r3
 8002038:	f00b fbb7 	bl	800d7aa <memset>
			sprintf(time, "%lu:%lu:%lu", 2-sysTime[SYSTIME_HOUR], 59-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
 800203c:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <dispHandler+0x3a8>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	2202      	movs	r2, #2
 8002042:	1ad2      	subs	r2, r2, r3
 8002044:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <dispHandler+0x3a8>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	213b      	movs	r1, #59	; 0x3b
 800204a:	1acc      	subs	r4, r1, r3
 800204c:	4b4a      	ldr	r3, [pc, #296]	; (8002178 <dispHandler+0x3a8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	213b      	movs	r1, #59	; 0x3b
 8002052:	1acb      	subs	r3, r1, r3
 8002054:	4949      	ldr	r1, [pc, #292]	; (800217c <dispHandler+0x3ac>)
 8002056:	1978      	adds	r0, r7, r5
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	0023      	movs	r3, r4
 800205c:	f00b fca2 	bl	800d9a4 <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 8002060:	197b      	adds	r3, r7, r5
 8002062:	0018      	movs	r0, r3
 8002064:	f7fe f850 	bl	8000108 <strlen>
 8002068:	0003      	movs	r3, r0
 800206a:	b2d9      	uxtb	r1, r3
 800206c:	1978      	adds	r0, r7, r5
 800206e:	2302      	movs	r3, #2
 8002070:	2202      	movs	r2, #2
 8002072:	f7ff f859 	bl	8001128 <writeRow>
			break;
 8002076:	e022      	b.n	80020be <dispHandler+0x2ee>
			char time[9] = {0};
 8002078:	2410      	movs	r4, #16
 800207a:	193b      	adds	r3, r7, r4
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	3304      	adds	r3, #4
 8002082:	2205      	movs	r2, #5
 8002084:	2100      	movs	r1, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f00b fb8f 	bl	800d7aa <memset>
			sprintf(time, "%lu:%lu", 14-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
 800208c:	4b3a      	ldr	r3, [pc, #232]	; (8002178 <dispHandler+0x3a8>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	220e      	movs	r2, #14
 8002092:	1ad2      	subs	r2, r2, r3
 8002094:	4b38      	ldr	r3, [pc, #224]	; (8002178 <dispHandler+0x3a8>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	213b      	movs	r1, #59	; 0x3b
 800209a:	1acb      	subs	r3, r1, r3
 800209c:	4938      	ldr	r1, [pc, #224]	; (8002180 <dispHandler+0x3b0>)
 800209e:	1938      	adds	r0, r7, r4
 80020a0:	f00b fc80 	bl	800d9a4 <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 80020a4:	193b      	adds	r3, r7, r4
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7fe f82e 	bl	8000108 <strlen>
 80020ac:	0003      	movs	r3, r0
 80020ae:	b2d9      	uxtb	r1, r3
 80020b0:	1938      	adds	r0, r7, r4
 80020b2:	2302      	movs	r3, #2
 80020b4:	2202      	movs	r2, #2
 80020b6:	f7ff f837 	bl	8001128 <writeRow>
			break;
 80020ba:	e000      	b.n	80020be <dispHandler+0x2ee>
		}
	}
 80020bc:	46c0      	nop			; (mov r8, r8)

	if(flags.instructions.stopRequest || flags.testCanceled)
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <dispHandler+0x378>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	079b      	lsls	r3, r3, #30
 80020c4:	0fdb      	lsrs	r3, r3, #31
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <dispHandler+0x30a>
 80020cc:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <dispHandler+0x378>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	075b      	lsls	r3, r3, #29
 80020d2:	0fdb      	lsrs	r3, r3, #31
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d030      	beq.n	800213c <dispHandler+0x36c>
	{
		char err[] = "Preruseni";
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4a29      	ldr	r2, [pc, #164]	; (8002184 <dispHandler+0x3b4>)
 80020de:	ca03      	ldmia	r2!, {r0, r1}
 80020e0:	c303      	stmia	r3!, {r0, r1}
 80020e2:	8812      	ldrh	r2, [r2, #0]
 80020e4:	801a      	strh	r2, [r3, #0]
		strings[1] = err;
 80020e6:	23bc      	movs	r3, #188	; 0xbc
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	1d3a      	adds	r2, r7, #4
 80020ec:	605a      	str	r2, [r3, #4]

		for(int i = 0; i < 4; i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	22e0      	movs	r2, #224	; 0xe0
 80020f2:	18ba      	adds	r2, r7, r2
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e01c      	b.n	8002132 <dispHandler+0x362>
		{
			writeRow(strings[i], strlen(strings[i]), i, CENTER);
 80020f8:	21bc      	movs	r1, #188	; 0xbc
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	25e0      	movs	r5, #224	; 0xe0
 80020fe:	197a      	adds	r2, r7, r5
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	58d4      	ldr	r4, [r2, r3]
 8002106:	187b      	adds	r3, r7, r1
 8002108:	197a      	adds	r2, r7, r5
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	0092      	lsls	r2, r2, #2
 800210e:	58d3      	ldr	r3, [r2, r3]
 8002110:	0018      	movs	r0, r3
 8002112:	f7fd fff9 	bl	8000108 <strlen>
 8002116:	0003      	movs	r3, r0
 8002118:	b2d9      	uxtb	r1, r3
 800211a:	197b      	adds	r3, r7, r5
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	2302      	movs	r3, #2
 8002122:	0020      	movs	r0, r4
 8002124:	f7ff f800 	bl	8001128 <writeRow>
		for(int i = 0; i < 4; i++)
 8002128:	197b      	adds	r3, r7, r5
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	197a      	adds	r2, r7, r5
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	23e0      	movs	r3, #224	; 0xe0
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b03      	cmp	r3, #3
 800213a:	dddd      	ble.n	80020f8 <dispHandler+0x328>
		}
	}
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b03b      	add	sp, #236	; 0xec
 8002142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002144:	0800e0d8 	.word	0x0800e0d8
 8002148:	200003d0 	.word	0x200003d0
 800214c:	200003ee 	.word	0x200003ee
 8002150:	20000404 	.word	0x20000404
 8002154:	0800e0bc 	.word	0x0800e0bc
 8002158:	0800e264 	.word	0x0800e264
 800215c:	0800e0ec 	.word	0x0800e0ec
 8002160:	0800e0f8 	.word	0x0800e0f8
 8002164:	0800e104 	.word	0x0800e104
 8002168:	0800e110 	.word	0x0800e110
 800216c:	0800e11c 	.word	0x0800e11c
 8002170:	0800e0a8 	.word	0x0800e0a8
 8002174:	0800e0b4 	.word	0x0800e0b4
 8002178:	200003c0 	.word	0x200003c0
 800217c:	0800e0c4 	.word	0x0800e0c4
 8002180:	0800e0d0 	.word	0x0800e0d0
 8002184:	0800e12c 	.word	0x0800e12c

08002188 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
 void UI_Handler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	if((sysTime[SYSTIME_TEN_MS] - startTime_LCD) >= 6000)	//1min
	{
		setColour(BACKLIGHT_OFF);
	}*/

	if(flags.conErr)
 800218c:	4b9e      	ldr	r3, [pc, #632]	; (8002408 <UI_Handler+0x280>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	065b      	lsls	r3, r3, #25
 8002192:	0fdb      	lsrs	r3, r3, #31
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <UI_Handler+0x1c>
		flags.ui.error = 1;
 800219a:	4b9b      	ldr	r3, [pc, #620]	; (8002408 <UI_Handler+0x280>)
 800219c:	7c1a      	ldrb	r2, [r3, #16]
 800219e:	2104      	movs	r1, #4
 80021a0:	430a      	orrs	r2, r1
 80021a2:	741a      	strb	r2, [r3, #16]

	flags.ui.active = 0;
 80021a4:	4b98      	ldr	r3, [pc, #608]	; (8002408 <UI_Handler+0x280>)
 80021a6:	7c1a      	ldrb	r2, [r3, #16]
 80021a8:	2120      	movs	r1, #32
 80021aa:	438a      	bics	r2, r1
 80021ac:	741a      	strb	r2, [r3, #16]

	static uint32_t startTime;	//proměnná pro �?asování dějů

	//___Nastavení stavu podle požadavků___//
	//___Stavy výše mají vyšší prioritu (error nejvyšší)___//
	if(flags.ui.error && (UI_State != ERROR))
 80021ae:	4b96      	ldr	r3, [pc, #600]	; (8002408 <UI_Handler+0x280>)
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	075b      	lsls	r3, r3, #29
 80021b4:	0fdb      	lsrs	r3, r3, #31
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00b      	beq.n	80021d4 <UI_Handler+0x4c>
 80021bc:	4b93      	ldr	r3, [pc, #588]	; (800240c <UI_Handler+0x284>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d007      	beq.n	80021d4 <UI_Handler+0x4c>
	{
		UI_State = ERROR;
 80021c4:	4b91      	ldr	r3, [pc, #580]	; (800240c <UI_Handler+0x284>)
 80021c6:	2203      	movs	r2, #3
 80021c8:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80021ca:	4b91      	ldr	r3, [pc, #580]	; (8002410 <UI_Handler+0x288>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4b91      	ldr	r3, [pc, #580]	; (8002414 <UI_Handler+0x28c>)
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e05e      	b.n	8002292 <UI_Handler+0x10a>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 80021d4:	4b8c      	ldr	r3, [pc, #560]	; (8002408 <UI_Handler+0x280>)
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	071b      	lsls	r3, r3, #28
 80021da:	0fdb      	lsrs	r3, r3, #31
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d010      	beq.n	8002204 <UI_Handler+0x7c>
 80021e2:	4b8a      	ldr	r3, [pc, #552]	; (800240c <UI_Handler+0x284>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <UI_Handler+0x7c>
	{
		UI_State = NOTICE;
 80021ea:	4b88      	ldr	r3, [pc, #544]	; (800240c <UI_Handler+0x284>)
 80021ec:	2204      	movs	r2, #4
 80021ee:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80021f0:	4b87      	ldr	r3, [pc, #540]	; (8002410 <UI_Handler+0x288>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b87      	ldr	r3, [pc, #540]	; (8002414 <UI_Handler+0x28c>)
 80021f6:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 80021f8:	4b83      	ldr	r3, [pc, #524]	; (8002408 <UI_Handler+0x280>)
 80021fa:	7c1a      	ldrb	r2, [r3, #16]
 80021fc:	2108      	movs	r1, #8
 80021fe:	438a      	bics	r2, r1
 8002200:	741a      	strb	r2, [r3, #16]
 8002202:	e046      	b.n	8002292 <UI_Handler+0x10a>
	}
	else if(flags.ui.done && (UI_State == OFF))
 8002204:	4b80      	ldr	r3, [pc, #512]	; (8002408 <UI_Handler+0x280>)
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	06db      	lsls	r3, r3, #27
 800220a:	0fdb      	lsrs	r3, r3, #31
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d010      	beq.n	8002234 <UI_Handler+0xac>
 8002212:	4b7e      	ldr	r3, [pc, #504]	; (800240c <UI_Handler+0x284>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <UI_Handler+0xac>
	{
		UI_State = DONE;
 800221a:	4b7c      	ldr	r3, [pc, #496]	; (800240c <UI_Handler+0x284>)
 800221c:	2205      	movs	r2, #5
 800221e:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8002220:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <UI_Handler+0x288>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b7b      	ldr	r3, [pc, #492]	; (8002414 <UI_Handler+0x28c>)
 8002226:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 8002228:	4b77      	ldr	r3, [pc, #476]	; (8002408 <UI_Handler+0x280>)
 800222a:	7c1a      	ldrb	r2, [r3, #16]
 800222c:	2110      	movs	r1, #16
 800222e:	438a      	bics	r2, r1
 8002230:	741a      	strb	r2, [r3, #16]
 8002232:	e02e      	b.n	8002292 <UI_Handler+0x10a>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 8002234:	4b74      	ldr	r3, [pc, #464]	; (8002408 <UI_Handler+0x280>)
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	079b      	lsls	r3, r3, #30
 800223a:	0fdb      	lsrs	r3, r3, #31
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <UI_Handler+0xdc>
 8002242:	4b72      	ldr	r3, [pc, #456]	; (800240c <UI_Handler+0x284>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <UI_Handler+0xdc>
	{
		UI_State = LONG_BEEP;
 800224a:	4b70      	ldr	r3, [pc, #448]	; (800240c <UI_Handler+0x284>)
 800224c:	2202      	movs	r2, #2
 800224e:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8002250:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <UI_Handler+0x288>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b6f      	ldr	r3, [pc, #444]	; (8002414 <UI_Handler+0x28c>)
 8002256:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 8002258:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <UI_Handler+0x280>)
 800225a:	7c1a      	ldrb	r2, [r3, #16]
 800225c:	2102      	movs	r1, #2
 800225e:	438a      	bics	r2, r1
 8002260:	741a      	strb	r2, [r3, #16]
 8002262:	e016      	b.n	8002292 <UI_Handler+0x10a>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 8002264:	4b68      	ldr	r3, [pc, #416]	; (8002408 <UI_Handler+0x280>)
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	07db      	lsls	r3, r3, #31
 800226a:	0fdb      	lsrs	r3, r3, #31
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00f      	beq.n	8002292 <UI_Handler+0x10a>
 8002272:	4b66      	ldr	r3, [pc, #408]	; (800240c <UI_Handler+0x284>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10b      	bne.n	8002292 <UI_Handler+0x10a>
	{
		UI_State = SHORT_BEEP;
 800227a:	4b64      	ldr	r3, [pc, #400]	; (800240c <UI_Handler+0x284>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8002280:	4b63      	ldr	r3, [pc, #396]	; (8002410 <UI_Handler+0x288>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b63      	ldr	r3, [pc, #396]	; (8002414 <UI_Handler+0x28c>)
 8002286:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 8002288:	4b5f      	ldr	r3, [pc, #380]	; (8002408 <UI_Handler+0x280>)
 800228a:	7c1a      	ldrb	r2, [r3, #16]
 800228c:	2101      	movs	r1, #1
 800228e:	438a      	bics	r2, r1
 8002290:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 8002292:	4b5e      	ldr	r3, [pc, #376]	; (800240c <UI_Handler+0x284>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b05      	cmp	r3, #5
 8002298:	d900      	bls.n	800229c <UI_Handler+0x114>
 800229a:	e0a0      	b.n	80023de <UI_Handler+0x256>
 800229c:	009a      	lsls	r2, r3, #2
 800229e:	4b5e      	ldr	r3, [pc, #376]	; (8002418 <UI_Handler+0x290>)
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	015b      	lsls	r3, r3, #5
 80022aa:	485c      	ldr	r0, [pc, #368]	; (800241c <UI_Handler+0x294>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	0019      	movs	r1, r3
 80022b0:	f002 f8fd 	bl	80044ae <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)		//0,5s
 80022b4:	4b56      	ldr	r3, [pc, #344]	; (8002410 <UI_Handler+0x288>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b56      	ldr	r3, [pc, #344]	; (8002414 <UI_Handler+0x28c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b31      	cmp	r3, #49	; 0x31
 80022c0:	d800      	bhi.n	80022c4 <UI_Handler+0x13c>
 80022c2:	e094      	b.n	80023ee <UI_Handler+0x266>
		{
			UI_State = OFF;
 80022c4:	4b51      	ldr	r3, [pc, #324]	; (800240c <UI_Handler+0x284>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	015b      	lsls	r3, r3, #5
 80022ce:	4853      	ldr	r0, [pc, #332]	; (800241c <UI_Handler+0x294>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	0019      	movs	r1, r3
 80022d4:	f002 f8eb 	bl	80044ae <HAL_GPIO_WritePin>
		}
		break;
 80022d8:	e089      	b.n	80023ee <UI_Handler+0x266>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	015b      	lsls	r3, r3, #5
 80022de:	484f      	ldr	r0, [pc, #316]	; (800241c <UI_Handler+0x294>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	0019      	movs	r1, r3
 80022e4:	f002 f8e3 	bl	80044ae <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)	//1s
 80022e8:	4b49      	ldr	r3, [pc, #292]	; (8002410 <UI_Handler+0x288>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b49      	ldr	r3, [pc, #292]	; (8002414 <UI_Handler+0x28c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b63      	cmp	r3, #99	; 0x63
 80022f4:	d800      	bhi.n	80022f8 <UI_Handler+0x170>
 80022f6:	e07c      	b.n	80023f2 <UI_Handler+0x26a>
		{
			UI_State = OFF;
 80022f8:	4b44      	ldr	r3, [pc, #272]	; (800240c <UI_Handler+0x284>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	015b      	lsls	r3, r3, #5
 8002302:	4846      	ldr	r0, [pc, #280]	; (800241c <UI_Handler+0x294>)
 8002304:	2200      	movs	r2, #0
 8002306:	0019      	movs	r1, r3
 8002308:	f002 f8d1 	bl	80044ae <HAL_GPIO_WritePin>
		}
		break;
 800230c:	e071      	b.n	80023f2 <UI_Handler+0x26a>

	case ERROR:
		if(!flags.ui.error)	//dokud není požadavek zrušen provádí se error
 800230e:	4b3e      	ldr	r3, [pc, #248]	; (8002408 <UI_Handler+0x280>)
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	075b      	lsls	r3, r3, #29
 8002314:	0fdb      	lsrs	r3, r3, #31
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <UI_Handler+0x19a>
			UI_State = OFF;
 800231c:	4b3b      	ldr	r3, [pc, #236]	; (800240c <UI_Handler+0x284>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8002322:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <UI_Handler+0x288>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <UI_Handler+0x28c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2132      	movs	r1, #50	; 0x32
 800232e:	0018      	movs	r0, r3
 8002330:	f7fd ff82 	bl	8000238 <__aeabi_uidivmod>
 8002334:	1e0b      	subs	r3, r1, #0
 8002336:	d15e      	bne.n	80023f6 <UI_Handler+0x26e>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	015b      	lsls	r3, r3, #5
 800233c:	4a37      	ldr	r2, [pc, #220]	; (800241c <UI_Handler+0x294>)
 800233e:	0019      	movs	r1, r3
 8002340:	0010      	movs	r0, r2
 8002342:	f002 f8d1 	bl	80044e8 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	021a      	lsls	r2, r3, #8
 800234a:	2390      	movs	r3, #144	; 0x90
 800234c:	05db      	lsls	r3, r3, #23
 800234e:	0011      	movs	r1, r2
 8002350:	0018      	movs	r0, r3
 8002352:	f002 f8c9 	bl	80044e8 <HAL_GPIO_TogglePin>
		}
		break;
 8002356:	e04e      	b.n	80023f6 <UI_Handler+0x26e>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))	//každých 0,35s
 8002358:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <UI_Handler+0x288>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <UI_Handler+0x28c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2123      	movs	r1, #35	; 0x23
 8002364:	0018      	movs	r0, r3
 8002366:	f7fd ff67 	bl	8000238 <__aeabi_uidivmod>
 800236a:	1e0b      	subs	r3, r1, #0
 800236c:	d106      	bne.n	800237c <UI_Handler+0x1f4>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	015b      	lsls	r3, r3, #5
 8002372:	4a2a      	ldr	r2, [pc, #168]	; (800241c <UI_Handler+0x294>)
 8002374:	0019      	movs	r1, r3
 8002376:	0010      	movs	r0, r2
 8002378:	f002 f8b6 	bl	80044e8 <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)	//Po 2,1s ukon�?i
 800237c:	4b24      	ldr	r3, [pc, #144]	; (8002410 <UI_Handler+0x288>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <UI_Handler+0x28c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2bd0      	cmp	r3, #208	; 0xd0
 8002388:	d937      	bls.n	80023fa <UI_Handler+0x272>
			UI_State = OFF;
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <UI_Handler+0x284>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
		break;
 8002390:	e033      	b.n	80023fa <UI_Handler+0x272>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8002392:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <UI_Handler+0x288>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <UI_Handler+0x28c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2132      	movs	r1, #50	; 0x32
 800239e:	0018      	movs	r0, r3
 80023a0:	f7fd ff4a 	bl	8000238 <__aeabi_uidivmod>
 80023a4:	1e0b      	subs	r3, r1, #0
 80023a6:	d10d      	bne.n	80023c4 <UI_Handler+0x23c>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	015b      	lsls	r3, r3, #5
 80023ac:	4a1b      	ldr	r2, [pc, #108]	; (800241c <UI_Handler+0x294>)
 80023ae:	0019      	movs	r1, r3
 80023b0:	0010      	movs	r0, r2
 80023b2:	f002 f899 	bl	80044e8 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4a19      	ldr	r2, [pc, #100]	; (8002420 <UI_Handler+0x298>)
 80023bc:	0019      	movs	r1, r3
 80023be:	0010      	movs	r0, r2
 80023c0:	f002 f892 	bl	80044e8 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)	//Po 3s ukon�?i
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <UI_Handler+0x288>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <UI_Handler+0x28c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1ad2      	subs	r2, r2, r3
 80023ce:	2395      	movs	r3, #149	; 0x95
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d913      	bls.n	80023fe <UI_Handler+0x276>
			UI_State = OFF;
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <UI_Handler+0x284>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
		break;
 80023dc:	e00f      	b.n	80023fe <UI_Handler+0x276>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	015b      	lsls	r3, r3, #5
 80023e2:	480e      	ldr	r0, [pc, #56]	; (800241c <UI_Handler+0x294>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	0019      	movs	r1, r3
 80023e8:	f002 f861 	bl	80044ae <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		//setColour(BACKLIGHT_OFF);
#endif
		break;
 80023ec:	e008      	b.n	8002400 <UI_Handler+0x278>
		break;
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	e006      	b.n	8002400 <UI_Handler+0x278>
		break;
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	e004      	b.n	8002400 <UI_Handler+0x278>
		break;
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	e002      	b.n	8002400 <UI_Handler+0x278>
		break;
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	e000      	b.n	8002400 <UI_Handler+0x278>
		break;
 80023fe:	46c0      	nop			; (mov r8, r8)

	}
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	200003d0 	.word	0x200003d0
 800240c:	200003f5 	.word	0x200003f5
 8002410:	200003c0 	.word	0x200003c0
 8002414:	200003f8 	.word	0x200003f8
 8002418:	0800e280 	.word	0x0800e280
 800241c:	48000800 	.word	0x48000800
 8002420:	48000400 	.word	0x48000400

08002424 <measHandler>:

//_____Osluha AD převodníků_____//
 void measHandler(void)
{
 8002424:	b5b0      	push	{r4, r5, r7, lr}
 8002426:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;

	//___Nulování flagů___//
	flags.meas.measComplete = 0;
 8002428:	4b51      	ldr	r3, [pc, #324]	; (8002570 <measHandler+0x14c>)
 800242a:	7d1a      	ldrb	r2, [r3, #20]
 800242c:	2102      	movs	r1, #2
 800242e:	438a      	bics	r2, r1
 8002430:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 8002432:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <measHandler+0x14c>)
 8002434:	7d1a      	ldrb	r2, [r3, #20]
 8002436:	2110      	movs	r1, #16
 8002438:	438a      	bics	r2, r1
 800243a:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 800243c:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <measHandler+0x14c>)
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	07db      	lsls	r3, r3, #31
 8002442:	0fdb      	lsrs	r3, r3, #31
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d045      	beq.n	80024d6 <measHandler+0xb2>
	{
		if(!flags.meas.measRunning)
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <measHandler+0x14c>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	071b      	lsls	r3, r3, #28
 8002450:	0fdb      	lsrs	r3, r3, #31
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d134      	bne.n	80024c2 <measHandler+0x9e>
		{
			flags.meas.measRunning = 1;
 8002458:	4b45      	ldr	r3, [pc, #276]	; (8002570 <measHandler+0x14c>)
 800245a:	7d1a      	ldrb	r2, [r3, #20]
 800245c:	2108      	movs	r1, #8
 800245e:	430a      	orrs	r2, r1
 8002460:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 8002462:	f000 fc8d 	bl	8002d80 <currentPhase>
 8002466:	0003      	movs	r3, r0
 8002468:	2b05      	cmp	r3, #5
 800246a:	d004      	beq.n	8002476 <measHandler+0x52>
 800246c:	f000 fc88 	bl	8002d80 <currentPhase>
 8002470:	0003      	movs	r3, r0
 8002472:	2b06      	cmp	r3, #6
 8002474:	d110      	bne.n	8002498 <measHandler+0x74>
			{
				flags.meas.onlyBattery = 1;
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <measHandler+0x14c>)
 8002478:	7d1a      	ldrb	r2, [r3, #20]
 800247a:	2120      	movs	r1, #32
 800247c:	430a      	orrs	r2, r1
 800247e:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8002480:	4b3c      	ldr	r3, [pc, #240]	; (8002574 <measHandler+0x150>)
 8002482:	220d      	movs	r2, #13
 8002484:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8002486:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <measHandler+0x150>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	1e59      	subs	r1, r3, #1
 800248c:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <measHandler+0x154>)
 800248e:	4a3b      	ldr	r2, [pc, #236]	; (800257c <measHandler+0x158>)
 8002490:	0089      	lsls	r1, r1, #2
 8002492:	588a      	ldr	r2, [r1, r2]
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
 8002496:	e00f      	b.n	80024b8 <measHandler+0x94>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 8002498:	4b35      	ldr	r3, [pc, #212]	; (8002570 <measHandler+0x14c>)
 800249a:	7d1a      	ldrb	r2, [r3, #20]
 800249c:	2120      	movs	r1, #32
 800249e:	438a      	bics	r2, r1
 80024a0:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 80024a2:	4b34      	ldr	r3, [pc, #208]	; (8002574 <measHandler+0x150>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 80024a8:	4b32      	ldr	r3, [pc, #200]	; (8002574 <measHandler+0x150>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	1e59      	subs	r1, r3, #1
 80024ae:	4b32      	ldr	r3, [pc, #200]	; (8002578 <measHandler+0x154>)
 80024b0:	4a32      	ldr	r2, [pc, #200]	; (800257c <measHandler+0x158>)
 80024b2:	0089      	lsls	r1, r1, #2
 80024b4:	588a      	ldr	r2, [r1, r2]
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			HAL_ADC_Start_IT(&hadc);
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <measHandler+0x15c>)
 80024ba:	0018      	movs	r0, r3
 80024bc:	f001 f926 	bl	800370c <HAL_ADC_Start_IT>
 80024c0:	e004      	b.n	80024cc <measHandler+0xa8>
		}
		else
		{
			flags.meas.measConflict = 1;
 80024c2:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <measHandler+0x14c>)
 80024c4:	7d1a      	ldrb	r2, [r3, #20]
 80024c6:	2110      	movs	r1, #16
 80024c8:	430a      	orrs	r2, r1
 80024ca:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 80024cc:	4b28      	ldr	r3, [pc, #160]	; (8002570 <measHandler+0x14c>)
 80024ce:	7d1a      	ldrb	r2, [r3, #20]
 80024d0:	2101      	movs	r1, #1
 80024d2:	438a      	bics	r2, r1
 80024d4:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING)
 80024d6:	4b27      	ldr	r3, [pc, #156]	; (8002574 <measHandler+0x150>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d045      	beq.n	800256a <measHandler+0x146>
	{
		if(flags.meas.measDataReady)
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <measHandler+0x14c>)
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	075b      	lsls	r3, r3, #29
 80024e4:	0fdb      	lsrs	r3, r3, #31
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d03e      	beq.n	800256a <measHandler+0x146>
		{
			flags.meas.measDataReady = 0;
 80024ec:	4b20      	ldr	r3, [pc, #128]	; (8002570 <measHandler+0x14c>)
 80024ee:	7d1a      	ldrb	r2, [r3, #20]
 80024f0:	2104      	movs	r1, #4
 80024f2:	438a      	bics	r2, r1
 80024f4:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 80024f6:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <measHandler+0x150>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b0d      	cmp	r3, #13
 80024fc:	d118      	bne.n	8002530 <measHandler+0x10c>
			{
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <measHandler+0x150>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	1e5c      	subs	r4, r3, #1
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <measHandler+0x15c>)
 8002506:	0018      	movs	r0, r3
 8002508:	f001 f9bc 	bl	8003884 <HAL_ADC_GetValue>
 800250c:	0001      	movs	r1, r0
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <measHandler+0x160>)
 8002510:	00a2      	lsls	r2, r4, #2
 8002512:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <measHandler+0x14c>)
 8002516:	7d1a      	ldrb	r2, [r3, #20]
 8002518:	2102      	movs	r1, #2
 800251a:	430a      	orrs	r2, r1
 800251c:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <measHandler+0x14c>)
 8002520:	7d1a      	ldrb	r2, [r3, #20]
 8002522:	2108      	movs	r1, #8
 8002524:	438a      	bics	r2, r1
 8002526:	751a      	strb	r2, [r3, #20]
				ADC_State = ADC_WAITING;
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <measHandler+0x150>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_IT(&hadc);
			}
		}
	}
}
 800252e:	e01c      	b.n	800256a <measHandler+0x146>
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <measHandler+0x150>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	1e5c      	subs	r4, r3, #1
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <measHandler+0x15c>)
 8002538:	0018      	movs	r0, r3
 800253a:	f001 f9a3 	bl	8003884 <HAL_ADC_GetValue>
 800253e:	0001      	movs	r1, r0
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <measHandler+0x160>)
 8002542:	00a2      	lsls	r2, r4, #2
 8002544:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;	//Měř další kanál (měření proudů se přeskakuje)
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <measHandler+0x150>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	3302      	adds	r3, #2
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <measHandler+0x150>)
 8002550:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];	//Nastav měřený kanál
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <measHandler+0x150>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	1e59      	subs	r1, r3, #1
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <measHandler+0x154>)
 800255a:	4a08      	ldr	r2, [pc, #32]	; (800257c <measHandler+0x158>)
 800255c:	0089      	lsls	r1, r1, #2
 800255e:	588a      	ldr	r2, [r1, r2]
 8002560:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <measHandler+0x15c>)
 8002564:	0018      	movs	r0, r3
 8002566:	f001 f8d1 	bl	800370c <HAL_ADC_Start_IT>
}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	bdb0      	pop	{r4, r5, r7, pc}
 8002570:	200003d0 	.word	0x200003d0
 8002574:	200003fc 	.word	0x200003fc
 8002578:	40012400 	.word	0x40012400
 800257c:	0800e224 	.word	0x0800e224
 8002580:	20000210 	.word	0x20000210
 8002584:	20000380 	.word	0x20000380

08002588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800258c:	b672      	cpsid	i
}
 800258e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002590:	e7fe      	b.n	8002590 <Error_Handler+0x8>

08002592 <createBuffer>:
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	2018      	movs	r0, #24
 800259c:	f00b f8e8 	bl	800d770 <malloc>
 80025a0:	0003      	movs	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <createBuffer+0x1c>
 80025aa:	2300      	movs	r3, #0
 80025ac:	e022      	b.n	80025f4 <createBuffer+0x62>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f00b f8dd 	bl	800d770 <malloc>
 80025b6:	0003      	movs	r3, r0
 80025b8:	001a      	movs	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d105      	bne.n	80025d2 <createBuffer+0x40>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f00b f8db 	bl	800d784 <free>
 80025ce:	2300      	movs	r3, #0
 80025d0:	e010      	b.n	80025f4 <createBuffer+0x62>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	60da      	str	r2, [r3, #12]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	611a      	str	r2, [r3, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	751a      	strb	r2, [r3, #20]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b004      	add	sp, #16
 80025fa:	bd80      	pop	{r7, pc}

080025fc <clearBuffer>:
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	611a      	str	r2, [r3, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	751a      	strb	r2, [r3, #20]
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <push>:
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	000a      	movs	r2, r1
 8002632:	1cfb      	adds	r3, r7, #3
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	7d1b      	ldrb	r3, [r3, #20]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d101      	bne.n	8002642 <push+0x1a>
 800263e:	2302      	movs	r3, #2
 8002640:	e025      	b.n	800268e <push+0x66>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0019      	movs	r1, r3
 800264e:	0010      	movs	r0, r2
 8002650:	f7fd fedc 	bl	800040c <__aeabi_idivmod>
 8002654:	000b      	movs	r3, r1
 8002656:	001a      	movs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	611a      	str	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	18d3      	adds	r3, r2, r3
 8002670:	1cfa      	adds	r2, r7, #3
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	db01      	blt.n	8002686 <push+0x5e>
 8002682:	2202      	movs	r2, #2
 8002684:	e000      	b.n	8002688 <push+0x60>
 8002686:	2200      	movs	r2, #0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	751a      	strb	r2, [r3, #20]
 800268c:	2300      	movs	r3, #0
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b002      	add	sp, #8
 8002694:	bd80      	pop	{r7, pc}

08002696 <pushStr>:
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6899      	ldr	r1, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	18cb      	adds	r3, r1, r3
 80026ae:	429a      	cmp	r2, r3
 80026b0:	da01      	bge.n	80026b6 <pushStr+0x20>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e013      	b.n	80026de <pushStr+0x48>
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	e00b      	b.n	80026d4 <pushStr+0x3e>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	18d3      	adds	r3, r2, r3
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	0011      	movs	r1, r2
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7ff ffad 	bl	8002628 <push>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3301      	adds	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	dbef      	blt.n	80026bc <pushStr+0x26>
 80026dc:	2300      	movs	r3, #0
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b006      	add	sp, #24
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <pop>:
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	7d1b      	ldrb	r3, [r3, #20]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <pop+0x16>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e023      	b.n	8002744 <pop+0x5e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	18d3      	adds	r3, r2, r3
 8002706:	781a      	ldrb	r2, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	0019      	movs	r1, r3
 8002718:	0010      	movs	r0, r2
 800271a:	f7fd fe77 	bl	800040c <__aeabi_idivmod>
 800271e:	000b      	movs	r3, r1
 8002720:	001a      	movs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	1e5a      	subs	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	4313      	orrs	r3, r2
 8002738:	0fdb      	lsrs	r3, r3, #31
 800273a:	b2db      	uxtb	r3, r3
 800273c:	001a      	movs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	751a      	strb	r2, [r3, #20]
 8002742:	2300      	movs	r3, #0
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}

0800274c <at>:
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	7d1b      	ldrb	r3, [r3, #20]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <at+0x18>
 8002760:	2301      	movs	r3, #1
 8002762:	e01a      	b.n	800279a <at+0x4e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	db01      	blt.n	8002772 <at+0x26>
 800276e:	2303      	movs	r3, #3
 8002770:	e013      	b.n	800279a <at+0x4e>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	18d2      	adds	r2, r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0019      	movs	r1, r3
 8002780:	0010      	movs	r0, r2
 8002782:	f7fd fe43 	bl	800040c <__aeabi_idivmod>
 8002786:	000b      	movs	r3, r1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	18d3      	adds	r3, r2, r3
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	2300      	movs	r3, #0
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b006      	add	sp, #24
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 80027aa:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <getCount+0x84>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	222a      	movs	r2, #42	; 0x2a
 80027b4:	701a      	strb	r2, [r3, #0]
		answer = 0;
 80027b6:	1dbb      	adds	r3, r7, #6
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 80027bc:	1dba      	adds	r2, r7, #6
 80027be:	1df9      	adds	r1, r7, #7
 80027c0:	481a      	ldr	r0, [pc, #104]	; (800282c <getCount+0x88>)
 80027c2:	2364      	movs	r3, #100	; 0x64
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	f004 fd48 	bl	800725c <HAL_SPI_TransmitReceive>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d001      	beq.n	80027d4 <getCount+0x30>
			return 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e024      	b.n	800281e <getCount+0x7a>
		regCount++;
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <getCount+0x84>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <getCount+0x84>)
 80027de:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 80027e0:	2001      	movs	r0, #1
 80027e2:	f000 fe2f 	bl	8003444 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <getCount+0x84>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b63      	cmp	r3, #99	; 0x63
 80027ec:	d909      	bls.n	8002802 <getCount+0x5e>
		{
			flags.conErr = 1;
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <getCount+0x8c>)
 80027f0:	7e1a      	ldrb	r2, [r3, #24]
 80027f2:	2140      	movs	r1, #64	; 0x40
 80027f4:	430a      	orrs	r2, r1
 80027f6:	761a      	strb	r2, [r3, #24]
			regCount = 0;
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <getCount+0x84>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
			return 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	e00d      	b.n	800281e <getCount+0x7a>
		}
	}
	while(answer != question);
 8002802:	1dbb      	adds	r3, r7, #6
 8002804:	781a      	ldrb	r2, [r3, #0]
 8002806:	1dfb      	adds	r3, r7, #7
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d1d0      	bne.n	80027b0 <getCount+0xc>

	regCount--;
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <getCount+0x84>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <getCount+0x84>)
 8002818:	701a      	strb	r2, [r3, #0]

	return regCount;
 800281a:	4b03      	ldr	r3, [pc, #12]	; (8002828 <getCount+0x84>)
 800281c:	781b      	ldrb	r3, [r3, #0]
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b002      	add	sp, #8
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	20000404 	.word	0x20000404
 800282c:	20000250 	.word	0x20000250
 8002830:	200003d0 	.word	0x200003d0

08002834 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
	//___Clear registrů___//
	REG_CLR_ACTIVE;
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	4827      	ldr	r0, [pc, #156]	; (80028dc <regInit+0xa8>)
 8002840:	2200      	movs	r2, #0
 8002842:	0019      	movs	r1, r3
 8002844:	f001 fe33 	bl	80044ae <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002848:	2005      	movs	r0, #5
 800284a:	f000 fdfb 	bl	8003444 <HAL_Delay>
	REG_CLR_INACTIVE;
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	019b      	lsls	r3, r3, #6
 8002852:	4822      	ldr	r0, [pc, #136]	; (80028dc <regInit+0xa8>)
 8002854:	2201      	movs	r2, #1
 8002856:	0019      	movs	r1, r3
 8002858:	f001 fe29 	bl	80044ae <HAL_GPIO_WritePin>

	REG_DISABLE;
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	481e      	ldr	r0, [pc, #120]	; (80028dc <regInit+0xa8>)
 8002862:	2201      	movs	r2, #1
 8002864:	0019      	movs	r1, r3
 8002866:	f001 fe22 	bl	80044ae <HAL_GPIO_WritePin>

		if(getCount() == 0)
 800286a:	f7ff ff9b 	bl	80027a4 <getCount>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d101      	bne.n	8002876 <regInit+0x42>
		{
			return REG_CON_ERR;	//Connection error
 8002872:	2301      	movs	r3, #1
 8002874:	e02e      	b.n	80028d4 <regInit+0xa0>
		}

		regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <regInit+0xac>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	0018      	movs	r0, r3
 800287c:	f00a ff78 	bl	800d770 <malloc>
 8002880:	0003      	movs	r3, r0
 8002882:	001a      	movs	r2, r3
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <regInit+0xb0>)
 8002886:	601a      	str	r2, [r3, #0]
		if(regValues == NULL)
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <regInit+0xb0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d104      	bne.n	800289a <regInit+0x66>
		{
			regState = REG_ERR;
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <regInit+0xb4>)
 8002892:	2202      	movs	r2, #2
 8002894:	701a      	strb	r2, [r3, #0]
			return REG_ERR;
 8002896:	2302      	movs	r3, #2
 8002898:	e01c      	b.n	80028d4 <regInit+0xa0>
		}

		for(int i = 0; i < regCount; i++)
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	e008      	b.n	80028b2 <regInit+0x7e>
		{
			regValues[i] = 0;
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <regInit+0xb0>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	18d3      	adds	r3, r2, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3301      	adds	r3, #1
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <regInit+0xac>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	001a      	movs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4293      	cmp	r3, r2
 80028bc:	dbf0      	blt.n	80028a0 <regInit+0x6c>
		}

		sendData();
 80028be:	f000 f815 	bl	80028ec <sendData>

	REG_ENABLE;
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	4805      	ldr	r0, [pc, #20]	; (80028dc <regInit+0xa8>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	0019      	movs	r1, r3
 80028cc:	f001 fdef 	bl	80044ae <HAL_GPIO_WritePin>

	return regState;
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <regInit+0xb4>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	48000400 	.word	0x48000400
 80028e0:	20000404 	.word	0x20000404
 80028e4:	20000400 	.word	0x20000400
 80028e8:	200003fd 	.word	0x200003fd

080028ec <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <sendData+0x64>)
 80028f2:	6819      	ldr	r1, [r3, #0]
 80028f4:	4b17      	ldr	r3, [pc, #92]	; (8002954 <sendData+0x68>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4817      	ldr	r0, [pc, #92]	; (8002958 <sendData+0x6c>)
 80028fc:	2364      	movs	r3, #100	; 0x64
 80028fe:	f004 fb55 	bl	8006fac <HAL_SPI_Transmit>
 8002902:	1e03      	subs	r3, r0, #0
 8002904:	d114      	bne.n	8002930 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	01db      	lsls	r3, r3, #7
 800290a:	4814      	ldr	r0, [pc, #80]	; (800295c <sendData+0x70>)
 800290c:	2201      	movs	r2, #1
 800290e:	0019      	movs	r1, r3
 8002910:	f001 fdcd 	bl	80044ae <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002914:	2001      	movs	r0, #1
 8002916:	f000 fd95 	bl	8003444 <HAL_Delay>
		REG_RCLK_LOW;
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	01db      	lsls	r3, r3, #7
 800291e:	480f      	ldr	r0, [pc, #60]	; (800295c <sendData+0x70>)
 8002920:	2200      	movs	r2, #0
 8002922:	0019      	movs	r1, r3
 8002924:	f001 fdc3 	bl	80044ae <HAL_GPIO_WritePin>

		regState = REG_OK;
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <sendData+0x74>)
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e009      	b.n	8002944 <sendData+0x58>
	}
	else
	{
		regState = REG_ERR;
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <sendData+0x74>)
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]

		REG_DISABLE;	//výstup ve stavu vysoké impedance (zabrání nechtěnému nastavení relé)
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	4808      	ldr	r0, [pc, #32]	; (800295c <sendData+0x70>)
 800293c:	2201      	movs	r2, #1
 800293e:	0019      	movs	r1, r3
 8002940:	f001 fdb5 	bl	80044ae <HAL_GPIO_WritePin>
	}

	return regState;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <sendData+0x74>)
 8002946:	781b      	ldrb	r3, [r3, #0]
}
 8002948:	0018      	movs	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	20000400 	.word	0x20000400
 8002954:	20000404 	.word	0x20000404
 8002958:	20000250 	.word	0x20000250
 800295c:	48000400 	.word	0x48000400
 8002960:	200003fd 	.word	0x200003fd

08002964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_MspInit+0x44>)
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_MspInit+0x44>)
 8002970:	2101      	movs	r1, #1
 8002972:	430a      	orrs	r2, r1
 8002974:	619a      	str	r2, [r3, #24]
 8002976:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_MspInit+0x44>)
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2201      	movs	r2, #1
 800297c:	4013      	ands	r3, r2
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_MspInit+0x44>)
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_MspInit+0x44>)
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	0549      	lsls	r1, r1, #21
 800298c:	430a      	orrs	r2, r1
 800298e:	61da      	str	r2, [r3, #28]
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_MspInit+0x44>)
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	055b      	lsls	r3, r3, #21
 8002998:	4013      	ands	r3, r2
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b002      	add	sp, #8
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	40021000 	.word	0x40021000

080029ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b08d      	sub	sp, #52	; 0x34
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	241c      	movs	r4, #28
 80029b6:	193b      	adds	r3, r7, r4
 80029b8:	0018      	movs	r0, r3
 80029ba:	2314      	movs	r3, #20
 80029bc:	001a      	movs	r2, r3
 80029be:	2100      	movs	r1, #0
 80029c0:	f00a fef3 	bl	800d7aa <memset>
  if(hadc->Instance==ADC1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a3a      	ldr	r2, [pc, #232]	; (8002ab4 <HAL_ADC_MspInit+0x108>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d16d      	bne.n	8002aaa <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029ce:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	0089      	lsls	r1, r1, #2
 80029d8:	430a      	orrs	r2, r1
 80029da:	619a      	str	r2, [r3, #24]
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ea:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	0309      	lsls	r1, r1, #12
 80029f4:	430a      	orrs	r2, r1
 80029f6:	615a      	str	r2, [r3, #20]
 80029f8:	4b2f      	ldr	r3, [pc, #188]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	031b      	lsls	r3, r3, #12
 8002a00:	4013      	ands	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	0289      	lsls	r1, r1, #10
 8002a10:	430a      	orrs	r2, r1
 8002a12:	615a      	str	r2, [r3, #20]
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	029b      	lsls	r3, r3, #10
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a22:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	02c9      	lsls	r1, r1, #11
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	615a      	str	r2, [r3, #20]
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_ADC_MspInit+0x10c>)
 8002a32:	695a      	ldr	r2, [r3, #20]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	02db      	lsls	r3, r3, #11
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	223f      	movs	r2, #63	; 0x3f
 8002a42:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	2203      	movs	r2, #3
 8002a48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a50:	193b      	adds	r3, r7, r4
 8002a52:	4a1a      	ldr	r2, [pc, #104]	; (8002abc <HAL_ADC_MspInit+0x110>)
 8002a54:	0019      	movs	r1, r3
 8002a56:	0010      	movs	r0, r2
 8002a58:	f001 fb94 	bl	8004184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a5c:	193b      	adds	r3, r7, r4
 8002a5e:	22ff      	movs	r2, #255	; 0xff
 8002a60:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	2203      	movs	r2, #3
 8002a66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	193b      	adds	r3, r7, r4
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	193a      	adds	r2, r7, r4
 8002a70:	2390      	movs	r3, #144	; 0x90
 8002a72:	05db      	lsls	r3, r3, #23
 8002a74:	0011      	movs	r1, r2
 8002a76:	0018      	movs	r0, r3
 8002a78:	f001 fb84 	bl	8004184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	2203      	movs	r2, #3
 8002a80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	2203      	movs	r2, #3
 8002a86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <HAL_ADC_MspInit+0x114>)
 8002a92:	0019      	movs	r1, r3
 8002a94:	0010      	movs	r0, r2
 8002a96:	f001 fb75 	bl	8004184 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	200c      	movs	r0, #12
 8002aa0:	f001 fac0 	bl	8004024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002aa4:	200c      	movs	r0, #12
 8002aa6:	f001 fad2 	bl	800404e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b00d      	add	sp, #52	; 0x34
 8002ab0:	bd90      	pop	{r4, r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	40012400 	.word	0x40012400
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	48000800 	.word	0x48000800
 8002ac0:	48000400 	.word	0x48000400

08002ac4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b08b      	sub	sp, #44	; 0x2c
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	2414      	movs	r4, #20
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	2314      	movs	r3, #20
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f00a fe67 	bl	800d7aa <memset>
  if(hspi->Instance==SPI1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <HAL_SPI_MspInit+0x90>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d131      	bne.n	8002b4a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_SPI_MspInit+0x94>)
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_SPI_MspInit+0x94>)
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	0149      	lsls	r1, r1, #5
 8002af0:	430a      	orrs	r2, r1
 8002af2:	619a      	str	r2, [r3, #24]
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <HAL_SPI_MspInit+0x94>)
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	015b      	lsls	r3, r3, #5
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_SPI_MspInit+0x94>)
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_SPI_MspInit+0x94>)
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	02c9      	lsls	r1, r1, #11
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	615a      	str	r2, [r3, #20]
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_SPI_MspInit+0x94>)
 8002b12:	695a      	ldr	r2, [r3, #20]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	02db      	lsls	r3, r3, #11
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b1e:	0021      	movs	r1, r4
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	2238      	movs	r2, #56	; 0x38
 8002b24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b26:	187b      	adds	r3, r7, r1
 8002b28:	2202      	movs	r2, #2
 8002b2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	2203      	movs	r2, #3
 8002b36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	4a06      	ldr	r2, [pc, #24]	; (8002b5c <HAL_SPI_MspInit+0x98>)
 8002b42:	0019      	movs	r1, r3
 8002b44:	0010      	movs	r0, r2
 8002b46:	f001 fb1d 	bl	8004184 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b00b      	add	sp, #44	; 0x2c
 8002b50:	bd90      	pop	{r4, r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	40013000 	.word	0x40013000
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	48000400 	.word	0x48000400

08002b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <HAL_TIM_Base_MspInit+0x48>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d115      	bne.n	8002b9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_TIM_Base_MspInit+0x4c>)
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_TIM_Base_MspInit+0x4c>)
 8002b78:	2180      	movs	r1, #128	; 0x80
 8002b7a:	0049      	lsls	r1, r1, #1
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	61da      	str	r2, [r3, #28]
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_TIM_Base_MspInit+0x4c>)
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	2013      	movs	r0, #19
 8002b94:	f001 fa46 	bl	8004024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002b98:	2013      	movs	r0, #19
 8002b9a:	f001 fa58 	bl	800404e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b004      	add	sp, #16
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	40002000 	.word	0x40002000
 8002bac:	40021000 	.word	0x40021000

08002bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b08b      	sub	sp, #44	; 0x2c
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	2414      	movs	r4, #20
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	2314      	movs	r3, #20
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	f00a fdf1 	bl	800d7aa <memset>
  if(huart->Instance==USART3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a20      	ldr	r2, [pc, #128]	; (8002c50 <HAL_UART_MspInit+0xa0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d13a      	bne.n	8002c48 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_UART_MspInit+0xa4>)
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <HAL_UART_MspInit+0xa4>)
 8002bd8:	2180      	movs	r1, #128	; 0x80
 8002bda:	02c9      	lsls	r1, r1, #11
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	61da      	str	r2, [r3, #28]
 8002be0:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <HAL_UART_MspInit+0xa4>)
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	02db      	lsls	r3, r3, #11
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_UART_MspInit+0xa4>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_UART_MspInit+0xa4>)
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	0309      	lsls	r1, r1, #12
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	615a      	str	r2, [r3, #20]
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_UART_MspInit+0xa4>)
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	031b      	lsls	r3, r3, #12
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	22c0      	movs	r2, #192	; 0xc0
 8002c0e:	0112      	lsls	r2, r2, #4
 8002c10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	0021      	movs	r1, r4
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2202      	movs	r2, #2
 8002c18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	2203      	movs	r2, #3
 8002c24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8002c26:	187b      	adds	r3, r7, r1
 8002c28:	2201      	movs	r2, #1
 8002c2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <HAL_UART_MspInit+0xa8>)
 8002c30:	0019      	movs	r1, r3
 8002c32:	0010      	movs	r0, r2
 8002c34:	f001 faa6 	bl	8004184 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	201d      	movs	r0, #29
 8002c3e:	f001 f9f1 	bl	8004024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002c42:	201d      	movs	r0, #29
 8002c44:	f001 fa03 	bl	800404e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b00b      	add	sp, #44	; 0x2c
 8002c4e:	bd90      	pop	{r4, r7, pc}
 8002c50:	40004800 	.word	0x40004800
 8002c54:	40021000 	.word	0x40021000
 8002c58:	48000800 	.word	0x48000800

08002c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <NMI_Handler+0x4>

08002c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c66:	e7fe      	b.n	8002c66 <HardFault_Handler+0x4>

08002c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c80:	f000 fbc4 	bl	800340c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	0018      	movs	r0, r3
 8002c94:	f001 fc44 	bl	8004520 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_0_Pin);
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f001 fc3f 	bl	8004520 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <ADC1_COMP_IRQHandler+0x14>)
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 fdf4 	bl	800389c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	20000210 	.word	0x20000210

08002cc0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <TIM14_IRQHandler+0x14>)
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f004 ff0a 	bl	8007ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	200002b4 	.word	0x200002b4

08002cd8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <USART3_4_IRQHandler+0x14>)
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f005 fb6c 	bl	80083bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	200002fc 	.word	0x200002fc

08002cf0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <USB_IRQHandler+0x14>)
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f001 fd64 	bl	80047c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	200010b8 	.word	0x200010b8

08002d08 <_sbrk>:
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <_sbrk+0x5c>)
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <_sbrk+0x60>)
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <_sbrk+0x64>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <_sbrk+0x22>
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <_sbrk+0x64>)
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <_sbrk+0x68>)
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	18d3      	adds	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d207      	bcs.n	8002d48 <_sbrk+0x40>
 8002d38:	f00a fcf0 	bl	800d71c <__errno>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	220c      	movs	r2, #12
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	2301      	movs	r3, #1
 8002d44:	425b      	negs	r3, r3
 8002d46:	e009      	b.n	8002d5c <_sbrk+0x54>
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <_sbrk+0x64>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	18d2      	adds	r2, r2, r3
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <_sbrk+0x64>)
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b006      	add	sp, #24
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20004000 	.word	0x20004000
 8002d68:	00000400 	.word	0x00000400
 8002d6c:	20000408 	.word	0x20000408
 8002d70:	200015e0 	.word	0x200015e0

08002d74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
	return testPhase;
 8002d84:	4b02      	ldr	r3, [pc, #8]	; (8002d90 <currentPhase+0x10>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	2000040c 	.word	0x2000040c

08002d94 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b08b      	sub	sp, #44	; 0x2c
 8002d98:	af00      	add	r7, sp, #0
	flags.testProgress = 0;
 8002d9a:	4bc5      	ldr	r3, [pc, #788]	; (80030b0 <testHandler+0x31c>)
 8002d9c:	7e1a      	ldrb	r2, [r3, #24]
 8002d9e:	2102      	movs	r1, #2
 8002da0:	438a      	bics	r2, r1
 8002da2:	761a      	strb	r2, [r3, #24]
	flags.testCanceled = 0;
 8002da4:	4bc2      	ldr	r3, [pc, #776]	; (80030b0 <testHandler+0x31c>)
 8002da6:	7e1a      	ldrb	r2, [r3, #24]
 8002da8:	2104      	movs	r1, #4
 8002daa:	438a      	bics	r2, r1
 8002dac:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8002dae:	4bc0      	ldr	r3, [pc, #768]	; (80030b0 <testHandler+0x31c>)
 8002db0:	7b1b      	ldrb	r3, [r3, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d032      	beq.n	8002e22 <testHandler+0x8e>
	{
		if(testPhase == WAITING)
 8002dbc:	4bbd      	ldr	r3, [pc, #756]	; (80030b4 <testHandler+0x320>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d124      	bne.n	8002e0e <testHandler+0x7a>
		{
			if(flags.conErr)
 8002dc4:	4bba      	ldr	r3, [pc, #744]	; (80030b0 <testHandler+0x31c>)
 8002dc6:	7e1b      	ldrb	r3, [r3, #24]
 8002dc8:	2240      	movs	r2, #64	; 0x40
 8002dca:	4013      	ands	r3, r2
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d01a      	beq.n	8002e08 <testHandler+0x74>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	4ab8      	ldr	r2, [pc, #736]	; (80030b8 <testHandler+0x324>)
 8002dd6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dd8:	c313      	stmia	r3!, {r0, r1, r4}
 8002dda:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ddc:	c313      	stmia	r3!, {r0, r1, r4}
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8002de2:	4bb6      	ldr	r3, [pc, #728]	; (80030bc <testHandler+0x328>)
 8002de4:	681c      	ldr	r4, [r3, #0]
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7fd f98d 	bl	8000108 <strlen>
 8002dee:	0003      	movs	r3, r0
 8002df0:	001a      	movs	r2, r3
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	0019      	movs	r1, r3
 8002df6:	0020      	movs	r0, r4
 8002df8:	f7ff fc4d 	bl	8002696 <pushStr>
				flags.instructions.startRequest = 0;
 8002dfc:	4bac      	ldr	r3, [pc, #688]	; (80030b0 <testHandler+0x31c>)
 8002dfe:	7b1a      	ldrb	r2, [r3, #12]
 8002e00:	2101      	movs	r1, #1
 8002e02:	438a      	bics	r2, r1
 8002e04:	731a      	strb	r2, [r3, #12]
 8002e06:	e00c      	b.n	8002e22 <testHandler+0x8e>
			}
			else
			{
				startTest();
 8002e08:	f000 f9e8 	bl	80031dc <startTest>
 8002e0c:	e009      	b.n	8002e22 <testHandler+0x8e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8002e0e:	4ba8      	ldr	r3, [pc, #672]	; (80030b0 <testHandler+0x31c>)
 8002e10:	7e1a      	ldrb	r2, [r3, #24]
 8002e12:	2101      	movs	r1, #1
 8002e14:	430a      	orrs	r2, r1
 8002e16:	761a      	strb	r2, [r3, #24]
			flags.instructions.startRequest = 0;
 8002e18:	4ba5      	ldr	r3, [pc, #660]	; (80030b0 <testHandler+0x31c>)
 8002e1a:	7b1a      	ldrb	r2, [r3, #12]
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	438a      	bics	r2, r1
 8002e20:	731a      	strb	r2, [r3, #12]
		}
	}
	if(flags.instructions.stopRequest)
 8002e22:	4ba3      	ldr	r3, [pc, #652]	; (80030b0 <testHandler+0x31c>)
 8002e24:	7b1b      	ldrb	r3, [r3, #12]
 8002e26:	2202      	movs	r2, #2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <testHandler+0xa0>
	{
		stopTest();
 8002e30:	f000 fa44 	bl	80032bc <stopTest>
	}

	if(testPhase != WAITING)
 8002e34:	4b9f      	ldr	r3, [pc, #636]	; (80030b4 <testHandler+0x320>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00d      	beq.n	8002e58 <testHandler+0xc4>
	{
		if(flags.buttons.butt0_ver)
 8002e3c:	4b9c      	ldr	r3, [pc, #624]	; (80030b0 <testHandler+0x31c>)
 8002e3e:	791b      	ldrb	r3, [r3, #4]
 8002e40:	2202      	movs	r2, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <testHandler+0xc4>
		{
			stopTest();
 8002e4a:	f000 fa37 	bl	80032bc <stopTest>
			flags.testCanceled = 1;
 8002e4e:	4b98      	ldr	r3, [pc, #608]	; (80030b0 <testHandler+0x31c>)
 8002e50:	7e1a      	ldrb	r2, [r3, #24]
 8002e52:	2104      	movs	r1, #4
 8002e54:	430a      	orrs	r2, r1
 8002e56:	761a      	strb	r2, [r3, #24]
		}
	}

	switch(testPhase)
 8002e58:	4b96      	ldr	r3, [pc, #600]	; (80030b4 <testHandler+0x320>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b06      	cmp	r3, #6
 8002e5e:	d900      	bls.n	8002e62 <testHandler+0xce>
 8002e60:	e1b0      	b.n	80031c4 <testHandler+0x430>
 8002e62:	009a      	lsls	r2, r3, #2
 8002e64:	4b96      	ldr	r3, [pc, #600]	; (80030c0 <testHandler+0x32c>)
 8002e66:	18d3      	adds	r3, r2, r3
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8002e6c:	4b90      	ldr	r3, [pc, #576]	; (80030b0 <testHandler+0x31c>)
 8002e6e:	7e1a      	ldrb	r2, [r3, #24]
 8002e70:	2102      	movs	r1, #2
 8002e72:	438a      	bics	r2, r1
 8002e74:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 8002e76:	e1a5      	b.n	80031c4 <testHandler+0x430>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8002e78:	4b8d      	ldr	r3, [pc, #564]	; (80030b0 <testHandler+0x31c>)
 8002e7a:	7d1b      	ldrb	r3, [r3, #20]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <testHandler+0xfe>
		{
			testPhase++;
 8002e86:	4b8b      	ldr	r3, [pc, #556]	; (80030b4 <testHandler+0x320>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b89      	ldr	r3, [pc, #548]	; (80030b4 <testHandler+0x320>)
 8002e90:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.sec)
 8002e92:	4b87      	ldr	r3, [pc, #540]	; (80030b0 <testHandler+0x31c>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2202      	movs	r2, #2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d052      	beq.n	8002f46 <testHandler+0x1b2>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED1);	//blikání prvni progress led
 8002ea0:	4b88      	ldr	r3, [pc, #544]	; (80030c4 <testHandler+0x330>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	4b87      	ldr	r3, [pc, #540]	; (80030c4 <testHandler+0x330>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2120      	movs	r1, #32
 8002eac:	404a      	eors	r2, r1
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
			sendData();
 8002eb2:	f7ff fd1b 	bl	80028ec <sendData>

			switch(sysTime[SYSTIME_SEC])
 8002eb6:	4b84      	ldr	r3, [pc, #528]	; (80030c8 <testHandler+0x334>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d03d      	beq.n	8002f3a <testHandler+0x1a6>
 8002ebe:	dc44      	bgt.n	8002f4a <testHandler+0x1b6>
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d002      	beq.n	8002eca <testHandler+0x136>
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d00f      	beq.n	8002ee8 <testHandler+0x154>
				break;
			case 3:	//ve treti sekunde zmerit napeti naprazdno
				flags.meas.measRequest = 1;
				break;
			default:
				break;
 8002ec8:	e03f      	b.n	8002f4a <testHandler+0x1b6>
				HTR_ON;
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	487f      	ldr	r0, [pc, #508]	; (80030cc <testHandler+0x338>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	f001 faeb 	bl	80044ae <HAL_GPIO_WritePin>
				EM_HTR_ON;
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	487b      	ldr	r0, [pc, #492]	; (80030cc <testHandler+0x338>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	f001 fae4 	bl	80044ae <HAL_GPIO_WritePin>
				break;
 8002ee6:	e031      	b.n	8002f4c <testHandler+0x1b8>
				if(HAL_GPIO_ReadPin(HEATER_STATE_GPIO_Port, HEATER_STATE_Pin) == GPIO_PIN_RESET)	//Topení neni v poradku
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	015b      	lsls	r3, r3, #5
 8002eec:	4a78      	ldr	r2, [pc, #480]	; (80030d0 <testHandler+0x33c>)
 8002eee:	0019      	movs	r1, r3
 8002ef0:	0010      	movs	r0, r2
 8002ef2:	f001 fabf 	bl	8004474 <HAL_GPIO_ReadPin>
 8002ef6:	1e03      	subs	r3, r0, #0
 8002ef8:	d108      	bne.n	8002f0c <testHandler+0x178>
					flags.heaterState = HEATER_ERR;
 8002efa:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <testHandler+0x31c>)
 8002efc:	7e1a      	ldrb	r2, [r3, #24]
 8002efe:	2130      	movs	r1, #48	; 0x30
 8002f00:	438a      	bics	r2, r1
 8002f02:	1c11      	adds	r1, r2, #0
 8002f04:	2220      	movs	r2, #32
 8002f06:	430a      	orrs	r2, r1
 8002f08:	761a      	strb	r2, [r3, #24]
 8002f0a:	e007      	b.n	8002f1c <testHandler+0x188>
					flags.heaterState = HEATER_OK;
 8002f0c:	4b68      	ldr	r3, [pc, #416]	; (80030b0 <testHandler+0x31c>)
 8002f0e:	7e1a      	ldrb	r2, [r3, #24]
 8002f10:	2130      	movs	r1, #48	; 0x30
 8002f12:	438a      	bics	r2, r1
 8002f14:	1c11      	adds	r1, r2, #0
 8002f16:	2210      	movs	r2, #16
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	761a      	strb	r2, [r3, #24]
				HTR_OFF;
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	486a      	ldr	r0, [pc, #424]	; (80030cc <testHandler+0x338>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	0019      	movs	r1, r3
 8002f26:	f001 fac2 	bl	80044ae <HAL_GPIO_WritePin>
				EM_HTR_OFF;
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4867      	ldr	r0, [pc, #412]	; (80030cc <testHandler+0x338>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	0019      	movs	r1, r3
 8002f34:	f001 fabb 	bl	80044ae <HAL_GPIO_WritePin>
				break;
 8002f38:	e008      	b.n	8002f4c <testHandler+0x1b8>
				flags.meas.measRequest = 1;
 8002f3a:	4b5d      	ldr	r3, [pc, #372]	; (80030b0 <testHandler+0x31c>)
 8002f3c:	7d1a      	ldrb	r2, [r3, #20]
 8002f3e:	2101      	movs	r1, #1
 8002f40:	430a      	orrs	r2, r1
 8002f42:	751a      	strb	r2, [r3, #20]
				break;
 8002f44:	e002      	b.n	8002f4c <testHandler+0x1b8>
			}
		}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	e13c      	b.n	80031c4 <testHandler+0x430>
				break;
 8002f4a:	46c0      	nop			; (mov r8, r8)
		break;
 8002f4c:	e13a      	b.n	80031c4 <testHandler+0x430>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8002f4e:	4b5f      	ldr	r3, [pc, #380]	; (80030cc <testHandler+0x338>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	2180      	movs	r1, #128	; 0x80
 8002f54:	0018      	movs	r0, r3
 8002f56:	f001 faaa 	bl	80044ae <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8002f5a:	4b5c      	ldr	r3, [pc, #368]	; (80030cc <testHandler+0x338>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	2140      	movs	r1, #64	; 0x40
 8002f60:	0018      	movs	r0, r3
 8002f62:	f001 faa4 	bl	80044ae <HAL_GPIO_WritePin>

		testPhase++;
 8002f66:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <testHandler+0x320>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b51      	ldr	r3, [pc, #324]	; (80030b4 <testHandler+0x320>)
 8002f70:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8002f72:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <testHandler+0x31c>)
 8002f74:	7e1a      	ldrb	r2, [r3, #24]
 8002f76:	2102      	movs	r1, #2
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první led
 8002f7c:	4b51      	ldr	r3, [pc, #324]	; (80030c4 <testHandler+0x330>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	4b50      	ldr	r3, [pc, #320]	; (80030c4 <testHandler+0x330>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2120      	movs	r1, #32
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8002f8e:	2301      	movs	r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	e007      	b.n	8002fa4 <testHandler+0x210>
		{
			sysTime[i] = 0;
 8002f94:	4b4c      	ldr	r3, [pc, #304]	; (80030c8 <testHandler+0x334>)
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	0092      	lsls	r2, r2, #2
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	ddf4      	ble.n	8002f94 <testHandler+0x200>
		}
		break;
 8002faa:	e10b      	b.n	80031c4 <testHandler+0x430>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002fac:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <testHandler+0x31c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <testHandler+0x23c>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8002fba:	4b42      	ldr	r3, [pc, #264]	; (80030c4 <testHandler+0x330>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	4b40      	ldr	r3, [pc, #256]	; (80030c4 <testHandler+0x330>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2110      	movs	r1, #16
 8002fc6:	404a      	eors	r2, r1
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]
			sendData();
 8002fcc:	f7ff fc8e 	bl	80028ec <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && !(sysTime[SYSTIME_MIN] == 0 && sysTime[SYSTIME_HOUR] == 0) && flags.time.min)	//___Měření napětí každých deset minut___//
 8002fd0:	4b3d      	ldr	r3, [pc, #244]	; (80030c8 <testHandler+0x334>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	210a      	movs	r1, #10
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7fd fa18 	bl	800040c <__aeabi_idivmod>
 8002fdc:	1e0b      	subs	r3, r1, #0
 8002fde:	d113      	bne.n	8003008 <testHandler+0x274>
 8002fe0:	4b39      	ldr	r3, [pc, #228]	; (80030c8 <testHandler+0x334>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <testHandler+0x25c>
 8002fe8:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <testHandler+0x334>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <testHandler+0x274>
 8002ff0:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <testHandler+0x31c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <testHandler+0x274>
#endif
		{
			flags.meas.measRequest = 1;
 8002ffe:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <testHandler+0x31c>)
 8003000:	7d1a      	ldrb	r2, [r3, #20]
 8003002:	2101      	movs	r1, #1
 8003004:	430a      	orrs	r2, r1
 8003006:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 10)	//___Po deseti minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
 8003008:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <testHandler+0x334>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b02      	cmp	r3, #2
 800300e:	dc00      	bgt.n	8003012 <testHandler+0x27e>
 8003010:	e0d1      	b.n	80031b6 <testHandler+0x422>
#endif
		{
			testPhase++;
 8003012:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <testHandler+0x320>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <testHandler+0x320>)
 800301c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800301e:	e0ca      	b.n	80031b6 <testHandler+0x422>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8003020:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <testHandler+0x31c>)
 8003022:	7d1b      	ldrb	r3, [r3, #20]
 8003024:	2208      	movs	r2, #8
 8003026:	4013      	ands	r3, r2
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d000      	beq.n	8003030 <testHandler+0x29c>
 800302e:	e0c4      	b.n	80031ba <testHandler+0x426>
		{
			flags.ui.notice = 1;
 8003030:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <testHandler+0x31c>)
 8003032:	7c1a      	ldrb	r2, [r3, #16]
 8003034:	2108      	movs	r1, #8
 8003036:	430a      	orrs	r2, r1
 8003038:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 800303a:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <testHandler+0x31c>)
 800303c:	7e1a      	ldrb	r2, [r3, #24]
 800303e:	2102      	movs	r1, #2
 8003040:	430a      	orrs	r2, r1
 8003042:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <testHandler+0x320>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	3301      	adds	r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <testHandler+0x320>)
 800304e:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 8003050:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <testHandler+0x338>)
 8003052:	2200      	movs	r2, #0
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	0018      	movs	r0, r3
 8003058:	f001 fa29 	bl	80044ae <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <testHandler+0x338>)
 800305e:	2200      	movs	r2, #0
 8003060:	2140      	movs	r1, #64	; 0x40
 8003062:	0018      	movs	r0, r3
 8003064:	f001 fa23 	bl	80044ae <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8003068:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <testHandler+0x330>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <testHandler+0x330>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2110      	movs	r1, #16
 8003074:	430a      	orrs	r2, r1
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <testHandler+0x330>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <testHandler+0x330>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2101      	movs	r1, #1
 8003086:	430a      	orrs	r2, r1
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]
			sendData();
 800308c:	f7ff fc2e 	bl	80028ec <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8003090:	2301      	movs	r3, #1
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	e007      	b.n	80030a6 <testHandler+0x312>
			{
				sysTime[i] = 0;
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <testHandler+0x334>)
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	2100      	movs	r1, #0
 800309e:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	3301      	adds	r3, #1
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	ddf4      	ble.n	8003096 <testHandler+0x302>
			}
		}
		break;
 80030ac:	e085      	b.n	80031ba <testHandler+0x426>
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	200003d0 	.word	0x200003d0
 80030b4:	2000040c 	.word	0x2000040c
 80030b8:	0800e138 	.word	0x0800e138
 80030bc:	200001fc 	.word	0x200001fc
 80030c0:	0800e2b0 	.word	0x0800e2b0
 80030c4:	20000414 	.word	0x20000414
 80030c8:	200003c0 	.word	0x200003c0
 80030cc:	48000800 	.word	0x48000800
 80030d0:	48000400 	.word	0x48000400
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 80030d4:	4b3d      	ldr	r3, [pc, #244]	; (80031cc <testHandler+0x438>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2202      	movs	r2, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <testHandler+0x364>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 80030e2:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <testHandler+0x43c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	781a      	ldrb	r2, [r3, #0]
 80030e8:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <testHandler+0x43c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2108      	movs	r1, #8
 80030ee:	404a      	eors	r2, r1
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]
			sendData();
 80030f4:	f7ff fbfa 	bl	80028ec <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
 80030f8:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <testHandler+0x440>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2105      	movs	r1, #5
 80030fe:	0018      	movs	r0, r3
 8003100:	f7fd f984 	bl	800040c <__aeabi_idivmod>
 8003104:	1e0b      	subs	r3, r1, #0
 8003106:	d114      	bne.n	8003132 <testHandler+0x39e>
 8003108:	4b32      	ldr	r3, [pc, #200]	; (80031d4 <testHandler+0x440>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d010      	beq.n	8003132 <testHandler+0x39e>
 8003110:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <testHandler+0x438>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2204      	movs	r2, #4
 8003116:	4013      	ands	r3, r2
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <testHandler+0x39e>
#endif
		{
			flags.meas.onlyBattery = 1;
 800311e:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <testHandler+0x438>)
 8003120:	7d1a      	ldrb	r2, [r3, #20]
 8003122:	2120      	movs	r1, #32
 8003124:	430a      	orrs	r2, r1
 8003126:	751a      	strb	r2, [r3, #20]
			flags.meas.measRequest = 1;
 8003128:	4b28      	ldr	r3, [pc, #160]	; (80031cc <testHandler+0x438>)
 800312a:	7d1a      	ldrb	r2, [r3, #20]
 800312c:	2101      	movs	r1, #1
 800312e:	430a      	orrs	r2, r1
 8003130:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po třech minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
 8003132:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <testHandler+0x440>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b0e      	cmp	r3, #14
 8003138:	dd41      	ble.n	80031be <testHandler+0x42a>
#endif
		{
			testPhase++;
 800313a:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <testHandler+0x444>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	3301      	adds	r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <testHandler+0x444>)
 8003144:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003146:	e03a      	b.n	80031be <testHandler+0x42a>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <testHandler+0x438>)
 800314a:	7d1b      	ldrb	r3, [r3, #20]
 800314c:	2208      	movs	r2, #8
 800314e:	4013      	ands	r3, r2
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d135      	bne.n	80031c2 <testHandler+0x42e>
		{
			flags.ui.done = 1;
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <testHandler+0x438>)
 8003158:	7c1a      	ldrb	r2, [r3, #16]
 800315a:	2110      	movs	r1, #16
 800315c:	430a      	orrs	r2, r1
 800315e:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8003160:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <testHandler+0x438>)
 8003162:	7e1a      	ldrb	r2, [r3, #24]
 8003164:	2102      	movs	r1, #2
 8003166:	430a      	orrs	r2, r1
 8003168:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 800316a:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <testHandler+0x43c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <testHandler+0x43c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2108      	movs	r1, #8
 8003176:	430a      	orrs	r2, r1
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 800317c:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <testHandler+0x43c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	781a      	ldrb	r2, [r3, #0]
 8003182:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <testHandler+0x43c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2102      	movs	r1, #2
 8003188:	438a      	bics	r2, r1
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 800318e:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <testHandler+0x43c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	781a      	ldrb	r2, [r3, #0]
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <testHandler+0x43c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	438a      	bics	r2, r1
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]
			sendData();
 80031a0:	f7ff fba4 	bl	80028ec <sendData>

			flags.meas.onlyBattery = 0;
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <testHandler+0x438>)
 80031a6:	7d1a      	ldrb	r2, [r3, #20]
 80031a8:	2120      	movs	r1, #32
 80031aa:	438a      	bics	r2, r1
 80031ac:	751a      	strb	r2, [r3, #20]

			testPhase = WAITING;
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <testHandler+0x444>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80031b4:	e005      	b.n	80031c2 <testHandler+0x42e>
		break;
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	e004      	b.n	80031c4 <testHandler+0x430>
		break;
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	e002      	b.n	80031c4 <testHandler+0x430>
		break;
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	e000      	b.n	80031c4 <testHandler+0x430>
		break;
 80031c2:	46c0      	nop			; (mov r8, r8)

	}
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b00b      	add	sp, #44	; 0x2c
 80031ca:	bd90      	pop	{r4, r7, pc}
 80031cc:	200003d0 	.word	0x200003d0
 80031d0:	20000414 	.word	0x20000414
 80031d4:	200003c0 	.word	0x200003c0
 80031d8:	2000040c 	.word	0x2000040c

080031dc <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
	if(supplyToTest > regCount)
 80031e2:	4b2e      	ldr	r3, [pc, #184]	; (800329c <startTest+0xc0>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <startTest+0xc4>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d851      	bhi.n	8003294 <startTest+0xb8>
	{
		return;
	}

	flags.ui.shortBeep = 1;
 80031f0:	4b2c      	ldr	r3, [pc, #176]	; (80032a4 <startTest+0xc8>)
 80031f2:	7c1a      	ldrb	r2, [r3, #16]
 80031f4:	2101      	movs	r1, #1
 80031f6:	430a      	orrs	r2, r1
 80031f8:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 80031fa:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <startTest+0xcc>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 8003200:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <startTest+0xd0>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 8003206:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <startTest+0xc8>)
 8003208:	7e1a      	ldrb	r2, [r3, #24]
 800320a:	2102      	movs	r1, #2
 800320c:	430a      	orrs	r2, r1
 800320e:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[supplyToTest];
 8003210:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <startTest+0xd4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a21      	ldr	r2, [pc, #132]	; (800329c <startTest+0xc0>)
 8003216:	7812      	ldrb	r2, [r2, #0]
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	189a      	adds	r2, r3, r2
 800321c:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <startTest+0xd8>)
 800321e:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 8003220:	2300      	movs	r3, #0
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	e008      	b.n	8003238 <startTest+0x5c>
	{
		regValues[i] = 0;
 8003226:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <startTest+0xd4>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	18d3      	adds	r3, r2, r3
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3301      	adds	r3, #1
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <startTest+0xc4>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	001a      	movs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4293      	cmp	r3, r2
 8003242:	dbf0      	blt.n	8003226 <startTest+0x4a>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <startTest+0xd8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <startTest+0xd8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2120      	movs	r1, #32
 8003250:	430a      	orrs	r2, r1
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 8003256:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <startTest+0xd8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <startTest+0xd8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2102      	movs	r1, #2
 8003262:	430a      	orrs	r2, r1
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 8003268:	f7ff fb40 	bl	80028ec <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 800326c:	2301      	movs	r3, #1
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	e007      	b.n	8003282 <startTest+0xa6>
	{
		sysTime[i] = 0;
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <startTest+0xdc>)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	0092      	lsls	r2, r2, #2
 8003278:	2100      	movs	r1, #0
 800327a:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b03      	cmp	r3, #3
 8003286:	ddf4      	ble.n	8003272 <startTest+0x96>
	}

	flags.instructions.startRequest = 0;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <startTest+0xc8>)
 800328a:	7b1a      	ldrb	r2, [r3, #12]
 800328c:	2101      	movs	r1, #1
 800328e:	438a      	bics	r2, r1
 8003290:	731a      	strb	r2, [r3, #12]
 8003292:	e000      	b.n	8003296 <startTest+0xba>
		return;
 8003294:	46c0      	nop			; (mov r8, r8)
}
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}
 800329c:	200003ee 	.word	0x200003ee
 80032a0:	20000404 	.word	0x20000404
 80032a4:	200003d0 	.word	0x200003d0
 80032a8:	2000040c 	.word	0x2000040c
 80032ac:	20000410 	.word	0x20000410
 80032b0:	20000400 	.word	0x20000400
 80032b4:	20000414 	.word	0x20000414
 80032b8:	200003c0 	.word	0x200003c0

080032bc <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 80032c0:	4b15      	ldr	r3, [pc, #84]	; (8003318 <stopTest+0x5c>)
 80032c2:	7c1a      	ldrb	r2, [r3, #16]
 80032c4:	2102      	movs	r1, #2
 80032c6:	430a      	orrs	r2, r1
 80032c8:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 80032ca:	4b14      	ldr	r3, [pc, #80]	; (800331c <stopTest+0x60>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <stopTest+0x64>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	0018      	movs	r0, r3
 80032d8:	f001 f8e9 	bl	80044ae <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 80032dc:	4b10      	ldr	r3, [pc, #64]	; (8003320 <stopTest+0x64>)
 80032de:	2200      	movs	r2, #0
 80032e0:	2140      	movs	r1, #64	; 0x40
 80032e2:	0018      	movs	r0, r3
 80032e4:	f001 f8e3 	bl	80044ae <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <stopTest+0x68>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <stopTest+0x68>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <stopTest+0x68>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2104      	movs	r1, #4
 80032fc:	430a      	orrs	r2, r1
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]
	sendData();
 8003302:	f7ff faf3 	bl	80028ec <sendData>

	flags.instructions.stopRequest = 0;
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <stopTest+0x5c>)
 8003308:	7b1a      	ldrb	r2, [r3, #12]
 800330a:	2102      	movs	r1, #2
 800330c:	438a      	bics	r2, r1
 800330e:	731a      	strb	r2, [r3, #12]
}
 8003310:	46c0      	nop			; (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	200003d0 	.word	0x200003d0
 800331c:	2000040c 	.word	0x2000040c
 8003320:	48000800 	.word	0x48000800
 8003324:	20000414 	.word	0x20000414

08003328 <Reset_Handler>:
 8003328:	480d      	ldr	r0, [pc, #52]	; (8003360 <LoopForever+0x2>)
 800332a:	4685      	mov	sp, r0
 800332c:	480d      	ldr	r0, [pc, #52]	; (8003364 <LoopForever+0x6>)
 800332e:	490e      	ldr	r1, [pc, #56]	; (8003368 <LoopForever+0xa>)
 8003330:	4a0e      	ldr	r2, [pc, #56]	; (800336c <LoopForever+0xe>)
 8003332:	2300      	movs	r3, #0
 8003334:	e002      	b.n	800333c <LoopCopyDataInit>

08003336 <CopyDataInit>:
 8003336:	58d4      	ldr	r4, [r2, r3]
 8003338:	50c4      	str	r4, [r0, r3]
 800333a:	3304      	adds	r3, #4

0800333c <LoopCopyDataInit>:
 800333c:	18c4      	adds	r4, r0, r3
 800333e:	428c      	cmp	r4, r1
 8003340:	d3f9      	bcc.n	8003336 <CopyDataInit>
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <LoopForever+0x12>)
 8003344:	4c0b      	ldr	r4, [pc, #44]	; (8003374 <LoopForever+0x16>)
 8003346:	2300      	movs	r3, #0
 8003348:	e001      	b.n	800334e <LoopFillZerobss>

0800334a <FillZerobss>:
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	3204      	adds	r2, #4

0800334e <LoopFillZerobss>:
 800334e:	42a2      	cmp	r2, r4
 8003350:	d3fb      	bcc.n	800334a <FillZerobss>
 8003352:	f7ff fd0f 	bl	8002d74 <SystemInit>
 8003356:	f00a f9e7 	bl	800d728 <__libc_init_array>
 800335a:	f7fd ffd9 	bl	8001310 <main>

0800335e <LoopForever>:
 800335e:	e7fe      	b.n	800335e <LoopForever>
 8003360:	20004000 	.word	0x20004000
 8003364:	20000000 	.word	0x20000000
 8003368:	200001e0 	.word	0x200001e0
 800336c:	0800e3f8 	.word	0x0800e3f8
 8003370:	200001e0 	.word	0x200001e0
 8003374:	200015dc 	.word	0x200015dc

08003378 <CEC_CAN_IRQHandler>:
 8003378:	e7fe      	b.n	8003378 <CEC_CAN_IRQHandler>
	...

0800337c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003380:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <HAL_Init+0x24>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_Init+0x24>)
 8003386:	2110      	movs	r1, #16
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800338c:	2003      	movs	r0, #3
 800338e:	f000 f809 	bl	80033a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003392:	f7ff fae7 	bl	8002964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	40022000 	.word	0x40022000

080033a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <HAL_InitTick+0x5c>)
 80033ae:	681c      	ldr	r4, [r3, #0]
 80033b0:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_InitTick+0x60>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	0019      	movs	r1, r3
 80033b6:	23fa      	movs	r3, #250	; 0xfa
 80033b8:	0098      	lsls	r0, r3, #2
 80033ba:	f7fc feb7 	bl	800012c <__udivsi3>
 80033be:	0003      	movs	r3, r0
 80033c0:	0019      	movs	r1, r3
 80033c2:	0020      	movs	r0, r4
 80033c4:	f7fc feb2 	bl	800012c <__udivsi3>
 80033c8:	0003      	movs	r3, r0
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 fe4f 	bl	800406e <HAL_SYSTICK_Config>
 80033d0:	1e03      	subs	r3, r0, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e00f      	b.n	80033f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d80b      	bhi.n	80033f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	2301      	movs	r3, #1
 80033e2:	425b      	negs	r3, r3
 80033e4:	2200      	movs	r2, #0
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 fe1c 	bl	8004024 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_InitTick+0x64>)
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e000      	b.n	80033f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b003      	add	sp, #12
 80033fe:	bd90      	pop	{r4, r7, pc}
 8003400:	20000000 	.word	0x20000000
 8003404:	20000008 	.word	0x20000008
 8003408:	20000004 	.word	0x20000004

0800340c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_IncTick+0x1c>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	001a      	movs	r2, r3
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_IncTick+0x20>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	18d2      	adds	r2, r2, r3
 800341c:	4b03      	ldr	r3, [pc, #12]	; (800342c <HAL_IncTick+0x20>)
 800341e:	601a      	str	r2, [r3, #0]
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	20000008 	.word	0x20000008
 800342c:	20000418 	.word	0x20000418

08003430 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  return uwTick;
 8003434:	4b02      	ldr	r3, [pc, #8]	; (8003440 <HAL_GetTick+0x10>)
 8003436:	681b      	ldr	r3, [r3, #0]
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	20000418 	.word	0x20000418

08003444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800344c:	f7ff fff0 	bl	8003430 <HAL_GetTick>
 8003450:	0003      	movs	r3, r0
 8003452:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3301      	adds	r3, #1
 800345c:	d005      	beq.n	800346a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_Delay+0x44>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	001a      	movs	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	189b      	adds	r3, r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	f7ff ffe0 	bl	8003430 <HAL_GetTick>
 8003470:	0002      	movs	r2, r0
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	429a      	cmp	r2, r3
 800347a:	d8f7      	bhi.n	800346c <HAL_Delay+0x28>
  {
  }
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	20000008 	.word	0x20000008

0800348c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003494:	230f      	movs	r3, #15
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e125      	b.n	80036f6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2234      	movs	r2, #52	; 0x34
 80034bc:	2100      	movs	r1, #0
 80034be:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff fa72 	bl	80029ac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	2210      	movs	r2, #16
 80034ce:	4013      	ands	r3, r2
 80034d0:	d000      	beq.n	80034d4 <HAL_ADC_Init+0x48>
 80034d2:	e103      	b.n	80036dc <HAL_ADC_Init+0x250>
 80034d4:	230f      	movs	r3, #15
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d000      	beq.n	80034e0 <HAL_ADC_Init+0x54>
 80034de:	e0fd      	b.n	80036dc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2204      	movs	r2, #4
 80034e8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80034ea:	d000      	beq.n	80034ee <HAL_ADC_Init+0x62>
 80034ec:	e0f6      	b.n	80036dc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	4a83      	ldr	r2, [pc, #524]	; (8003700 <HAL_ADC_Init+0x274>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	2202      	movs	r2, #2
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2203      	movs	r2, #3
 8003506:	4013      	ands	r3, r2
 8003508:	2b01      	cmp	r3, #1
 800350a:	d112      	bne.n	8003532 <HAL_ADC_Init+0xa6>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2201      	movs	r2, #1
 8003514:	4013      	ands	r3, r2
 8003516:	2b01      	cmp	r3, #1
 8003518:	d009      	beq.n	800352e <HAL_ADC_Init+0xa2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	401a      	ands	r2, r3
 8003526:	2380      	movs	r3, #128	; 0x80
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	429a      	cmp	r2, r3
 800352c:	d101      	bne.n	8003532 <HAL_ADC_Init+0xa6>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <HAL_ADC_Init+0xa8>
 8003532:	2300      	movs	r3, #0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d116      	bne.n	8003566 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2218      	movs	r2, #24
 8003540:	4393      	bics	r3, r2
 8003542:	0019      	movs	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	0899      	lsrs	r1, r3, #2
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4964      	ldr	r1, [pc, #400]	; (8003704 <HAL_ADC_Init+0x278>)
 8003572:	400a      	ands	r2, r1
 8003574:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7e1b      	ldrb	r3, [r3, #24]
 800357a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	7e5b      	ldrb	r3, [r3, #25]
 8003580:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003582:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	7e9b      	ldrb	r3, [r3, #26]
 8003588:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800358a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	2b01      	cmp	r3, #1
 8003592:	d002      	beq.n	800359a <HAL_ADC_Init+0x10e>
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	015b      	lsls	r3, r3, #5
 8003598:	e000      	b.n	800359c <HAL_ADC_Init+0x110>
 800359a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800359c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80035a2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d101      	bne.n	80035b0 <HAL_ADC_Init+0x124>
 80035ac:	2304      	movs	r3, #4
 80035ae:	e000      	b.n	80035b2 <HAL_ADC_Init+0x126>
 80035b0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80035b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2124      	movs	r1, #36	; 0x24
 80035b8:	5c5b      	ldrb	r3, [r3, r1]
 80035ba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80035bc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7edb      	ldrb	r3, [r3, #27]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d115      	bne.n	80035f8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7e9b      	ldrb	r3, [r3, #26]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2280      	movs	r2, #128	; 0x80
 80035d8:	0252      	lsls	r2, r2, #9
 80035da:	4313      	orrs	r3, r2
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	e00b      	b.n	80035f8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	2220      	movs	r2, #32
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	2201      	movs	r2, #1
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	23c2      	movs	r3, #194	; 0xc2
 80035fe:	33ff      	adds	r3, #255	; 0xff
 8003600:	429a      	cmp	r2, r3
 8003602:	d007      	beq.n	8003614 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800360c:	4313      	orrs	r3, r2
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	4313      	orrs	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68d9      	ldr	r1, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	430a      	orrs	r2, r1
 8003622:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	055b      	lsls	r3, r3, #21
 800362c:	429a      	cmp	r2, r3
 800362e:	d01b      	beq.n	8003668 <HAL_ADC_Init+0x1dc>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d017      	beq.n	8003668 <HAL_ADC_Init+0x1dc>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	2b02      	cmp	r3, #2
 800363e:	d013      	beq.n	8003668 <HAL_ADC_Init+0x1dc>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	2b03      	cmp	r3, #3
 8003646:	d00f      	beq.n	8003668 <HAL_ADC_Init+0x1dc>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	2b04      	cmp	r3, #4
 800364e:	d00b      	beq.n	8003668 <HAL_ADC_Init+0x1dc>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	2b05      	cmp	r3, #5
 8003656:	d007      	beq.n	8003668 <HAL_ADC_Init+0x1dc>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	2b06      	cmp	r3, #6
 800365e:	d003      	beq.n	8003668 <HAL_ADC_Init+0x1dc>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	2b07      	cmp	r3, #7
 8003666:	d112      	bne.n	800368e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2107      	movs	r1, #7
 8003674:	438a      	bics	r2, r1
 8003676:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6959      	ldr	r1, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	2207      	movs	r2, #7
 8003684:	401a      	ands	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_ADC_Init+0x27c>)
 8003696:	4013      	ands	r3, r2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d10b      	bne.n	80036b6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	2203      	movs	r2, #3
 80036aa:	4393      	bics	r3, r2
 80036ac:	2201      	movs	r2, #1
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80036b4:	e01c      	b.n	80036f0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	2212      	movs	r2, #18
 80036bc:	4393      	bics	r3, r2
 80036be:	2210      	movs	r2, #16
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	2201      	movs	r2, #1
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80036d2:	230f      	movs	r3, #15
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80036da:	e009      	b.n	80036f0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	2210      	movs	r2, #16
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80036e8:	230f      	movs	r3, #15
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036f0:	230f      	movs	r3, #15
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	781b      	ldrb	r3, [r3, #0]
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b004      	add	sp, #16
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	fffffefd 	.word	0xfffffefd
 8003704:	fffe0219 	.word	0xfffe0219
 8003708:	833fffe7 	.word	0x833fffe7

0800370c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003714:	230f      	movs	r3, #15
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2204      	movs	r2, #4
 8003724:	4013      	ands	r3, r2
 8003726:	d156      	bne.n	80037d6 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2234      	movs	r2, #52	; 0x34
 800372c:	5c9b      	ldrb	r3, [r3, r2]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_ADC_Start_IT+0x2a>
 8003732:	2302      	movs	r3, #2
 8003734:	e056      	b.n	80037e4 <HAL_ADC_Start_IT+0xd8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2234      	movs	r2, #52	; 0x34
 800373a:	2101      	movs	r1, #1
 800373c:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	7e5b      	ldrb	r3, [r3, #25]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d007      	beq.n	8003756 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003746:	230f      	movs	r3, #15
 8003748:	18fc      	adds	r4, r7, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	0018      	movs	r0, r3
 800374e:	f000 fa7b 	bl	8003c48 <ADC_Enable>
 8003752:	0003      	movs	r3, r0
 8003754:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003756:	230f      	movs	r3, #15
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d13e      	bne.n	80037de <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_ADC_Start_IT+0xe0>)
 8003766:	4013      	ands	r3, r2
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	0052      	lsls	r2, r2, #1
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2234      	movs	r2, #52	; 0x34
 800377c:	2100      	movs	r1, #0
 800377e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	221c      	movs	r2, #28
 8003786:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d110      	bne.n	80037b2 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2104      	movs	r1, #4
 800379c:	438a      	bics	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2118      	movs	r1, #24
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
          break;
 80037b0:	e008      	b.n	80037c4 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	211c      	movs	r1, #28
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
          break;
 80037c2:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2104      	movs	r1, #4
 80037d0:	430a      	orrs	r2, r1
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	e003      	b.n	80037de <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037d6:	230f      	movs	r3, #15
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	2202      	movs	r2, #2
 80037dc:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80037de:	230f      	movs	r3, #15
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	781b      	ldrb	r3, [r3, #0]
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b005      	add	sp, #20
 80037ea:	bd90      	pop	{r4, r7, pc}
 80037ec:	fffff0fe 	.word	0xfffff0fe

080037f0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80037f0:	b5b0      	push	{r4, r5, r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f8:	230f      	movs	r3, #15
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2234      	movs	r2, #52	; 0x34
 8003804:	5c9b      	ldrb	r3, [r3, r2]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_ADC_Stop_IT+0x1e>
 800380a:	2302      	movs	r3, #2
 800380c:	e033      	b.n	8003876 <HAL_ADC_Stop_IT+0x86>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2234      	movs	r2, #52	; 0x34
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003816:	250f      	movs	r5, #15
 8003818:	197c      	adds	r4, r7, r5
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f000 fb08 	bl	8003e32 <ADC_ConversionStop>
 8003822:	0003      	movs	r3, r0
 8003824:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003826:	0028      	movs	r0, r5
 8003828:	183b      	adds	r3, r7, r0
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d11b      	bne.n	8003868 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	211c      	movs	r1, #28
 800383c:	438a      	bics	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003840:	0005      	movs	r5, r0
 8003842:	183c      	adds	r4, r7, r0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 fa82 	bl	8003d50 <ADC_Disable>
 800384c:	0003      	movs	r3, r0
 800384e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003850:	197b      	adds	r3, r7, r5
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	4a08      	ldr	r2, [pc, #32]	; (8003880 <HAL_ADC_Stop_IT+0x90>)
 800385e:	4013      	ands	r3, r2
 8003860:	2201      	movs	r2, #1
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2234      	movs	r2, #52	; 0x34
 800386c:	2100      	movs	r1, #0
 800386e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003870:	230f      	movs	r3, #15
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	781b      	ldrb	r3, [r3, #0]
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b004      	add	sp, #16
 800387c:	bdb0      	pop	{r4, r5, r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	fffffefe 	.word	0xfffffefe

08003884 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003892:	0018      	movs	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	b002      	add	sp, #8
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2204      	movs	r2, #4
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d106      	bne.n	80038c0 <HAL_ADC_IRQHandler+0x24>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2204      	movs	r2, #4
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d00d      	beq.n	80038dc <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2208      	movs	r2, #8
 80038c8:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d14f      	bne.n	800396e <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2208      	movs	r2, #8
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d148      	bne.n	800396e <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	2210      	movs	r2, #16
 80038e2:	4013      	ands	r3, r2
 80038e4:	d106      	bne.n	80038f4 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	2280      	movs	r2, #128	; 0x80
 80038ec:	0092      	lsls	r2, r2, #2
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	23c0      	movs	r3, #192	; 0xc0
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	4013      	ands	r3, r2
 8003900:	d12d      	bne.n	800395e <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003906:	2b00      	cmp	r3, #0
 8003908:	d129      	bne.n	800395e <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2208      	movs	r2, #8
 8003912:	4013      	ands	r3, r2
 8003914:	2b08      	cmp	r3, #8
 8003916:	d122      	bne.n	800395e <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2204      	movs	r2, #4
 8003920:	4013      	ands	r3, r2
 8003922:	d110      	bne.n	8003946 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	210c      	movs	r1, #12
 8003930:	438a      	bics	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	4a33      	ldr	r2, [pc, #204]	; (8003a08 <HAL_ADC_IRQHandler+0x16c>)
 800393a:	4013      	ands	r3, r2
 800393c:	2201      	movs	r2, #1
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	639a      	str	r2, [r3, #56]	; 0x38
 8003944:	e00b      	b.n	800395e <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	2220      	movs	r2, #32
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	2201      	movs	r2, #1
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0018      	movs	r0, r3
 8003962:	f7fd fcc1 	bl	80012e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	220c      	movs	r2, #12
 800396c:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	4013      	ands	r3, r2
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d115      	bne.n	80039a8 <HAL_ADC_IRQHandler+0x10c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	4013      	ands	r3, r2
 8003986:	2b80      	cmp	r3, #128	; 0x80
 8003988:	d10e      	bne.n	80039a8 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	2280      	movs	r2, #128	; 0x80
 8003990:	0252      	lsls	r2, r2, #9
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	0018      	movs	r0, r3
 800399c:	f000 f836 	bl	8003a0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2210      	movs	r2, #16
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d123      	bne.n	80039fe <HAL_ADC_IRQHandler+0x162>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2210      	movs	r2, #16
 80039be:	4013      	ands	r3, r2
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d11c      	bne.n	80039fe <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d006      	beq.n	80039da <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10d      	bne.n	80039f6 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	2202      	movs	r2, #2
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2210      	movs	r2, #16
 80039ec:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 f813 	bl	8003a1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2210      	movs	r2, #16
 80039fc:	601a      	str	r2, [r3, #0]
  }

}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b002      	add	sp, #8
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	fffffefe 	.word	0xfffffefe

08003a0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a36:	230f      	movs	r3, #15
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	055b      	lsls	r3, r3, #21
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d011      	beq.n	8003a72 <HAL_ADC_ConfigChannel+0x46>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d00d      	beq.n	8003a72 <HAL_ADC_ConfigChannel+0x46>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d009      	beq.n	8003a72 <HAL_ADC_ConfigChannel+0x46>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d005      	beq.n	8003a72 <HAL_ADC_ConfigChannel+0x46>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d001      	beq.n	8003a72 <HAL_ADC_ConfigChannel+0x46>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2234      	movs	r2, #52	; 0x34
 8003a76:	5c9b      	ldrb	r3, [r3, r2]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x54>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0d0      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x1f6>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2234      	movs	r2, #52	; 0x34
 8003a84:	2101      	movs	r1, #1
 8003a86:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2204      	movs	r2, #4
 8003a90:	4013      	ands	r3, r2
 8003a92:	d000      	beq.n	8003a96 <HAL_ADC_ConfigChannel+0x6a>
 8003a94:	e0b4      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4a64      	ldr	r2, [pc, #400]	; (8003c2c <HAL_ADC_ConfigChannel+0x200>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d100      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x76>
 8003aa0:	e082      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2201      	movs	r2, #1
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	055b      	lsls	r3, r3, #21
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d037      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x108>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d033      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x108>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d02f      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x108>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d02b      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x108>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d027      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x108>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	d023      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x108>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	2b06      	cmp	r3, #6
 8003af2:	d01f      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x108>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	2b07      	cmp	r3, #7
 8003afa:	d01b      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	2107      	movs	r1, #7
 8003b08:	400b      	ands	r3, r1
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d012      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2107      	movs	r1, #7
 8003b1a:	438a      	bics	r2, r1
 8003b1c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6959      	ldr	r1, [r3, #20]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2207      	movs	r2, #7
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d007      	beq.n	8003b4c <HAL_ADC_ConfigChannel+0x120>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b11      	cmp	r3, #17
 8003b42:	d003      	beq.n	8003b4c <HAL_ADC_ConfigChannel+0x120>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b12      	cmp	r3, #18
 8003b4a:	d163      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b4c:	4b38      	ldr	r3, [pc, #224]	; (8003c30 <HAL_ADC_ConfigChannel+0x204>)
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d009      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x140>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b11      	cmp	r3, #17
 8003b5e:	d102      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x13a>
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	03db      	lsls	r3, r3, #15
 8003b64:	e004      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x144>
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	045b      	lsls	r3, r3, #17
 8003b6a:	e001      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x144>
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	041b      	lsls	r3, r3, #16
 8003b70:	4a2f      	ldr	r2, [pc, #188]	; (8003c30 <HAL_ADC_ConfigChannel+0x204>)
 8003b72:	430b      	orrs	r3, r1
 8003b74:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d14a      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b7e:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <HAL_ADC_ConfigChannel+0x208>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	492d      	ldr	r1, [pc, #180]	; (8003c38 <HAL_ADC_ConfigChannel+0x20c>)
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7fc fad1 	bl	800012c <__udivsi3>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	001a      	movs	r2, r3
 8003b8e:	0013      	movs	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	189b      	adds	r3, r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b98:	e002      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f9      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x16e>
 8003ba6:	e035      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4099      	lsls	r1, r3
 8003bb6:	000b      	movs	r3, r1
 8003bb8:	43d9      	mvns	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	400a      	ands	r2, r1
 8003bc0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d007      	beq.n	8003bda <HAL_ADC_ConfigChannel+0x1ae>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b11      	cmp	r3, #17
 8003bd0:	d003      	beq.n	8003bda <HAL_ADC_ConfigChannel+0x1ae>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b12      	cmp	r3, #18
 8003bd8:	d11c      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <HAL_ADC_ConfigChannel+0x204>)
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d007      	beq.n	8003bf6 <HAL_ADC_ConfigChannel+0x1ca>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b11      	cmp	r3, #17
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x1c6>
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <HAL_ADC_ConfigChannel+0x210>)
 8003bf0:	e002      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x1cc>
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_ADC_ConfigChannel+0x214>)
 8003bf4:	e000      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x1cc>
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_ADC_ConfigChannel+0x218>)
 8003bf8:	4a0d      	ldr	r2, [pc, #52]	; (8003c30 <HAL_ADC_ConfigChannel+0x204>)
 8003bfa:	400b      	ands	r3, r1
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e009      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	2220      	movs	r2, #32
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003c0c:	230f      	movs	r3, #15
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2234      	movs	r2, #52	; 0x34
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003c1c:	230f      	movs	r3, #15
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	781b      	ldrb	r3, [r3, #0]
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b004      	add	sp, #16
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	00001001 	.word	0x00001001
 8003c30:	40012708 	.word	0x40012708
 8003c34:	20000000 	.word	0x20000000
 8003c38:	000f4240 	.word	0x000f4240
 8003c3c:	ffbfffff 	.word	0xffbfffff
 8003c40:	feffffff 	.word	0xfeffffff
 8003c44:	ff7fffff 	.word	0xff7fffff

08003c48 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2203      	movs	r2, #3
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d112      	bne.n	8003c8c <ADC_Enable+0x44>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d009      	beq.n	8003c88 <ADC_Enable+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	401a      	ands	r2, r3
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d101      	bne.n	8003c8c <ADC_Enable+0x44>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <ADC_Enable+0x46>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d152      	bne.n	8003d38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4a2a      	ldr	r2, [pc, #168]	; (8003d44 <ADC_Enable+0xfc>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d00d      	beq.n	8003cba <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	2201      	movs	r2, #1
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e03f      	b.n	8003d3a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cca:	4b1f      	ldr	r3, [pc, #124]	; (8003d48 <ADC_Enable+0x100>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	491f      	ldr	r1, [pc, #124]	; (8003d4c <ADC_Enable+0x104>)
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7fc fa2b 	bl	800012c <__udivsi3>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003cda:	e002      	b.n	8003ce2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f9      	bne.n	8003cdc <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ce8:	f7ff fba2 	bl	8003430 <HAL_GetTick>
 8003cec:	0003      	movs	r3, r0
 8003cee:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cf0:	e01b      	b.n	8003d2a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cf2:	f7ff fb9d 	bl	8003430 <HAL_GetTick>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d914      	bls.n	8003d2a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2201      	movs	r2, #1
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d00d      	beq.n	8003d2a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	2210      	movs	r2, #16
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	2201      	movs	r2, #1
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e007      	b.n	8003d3a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2201      	movs	r2, #1
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d1dc      	bne.n	8003cf2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b004      	add	sp, #16
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	80000017 	.word	0x80000017
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	000f4240 	.word	0x000f4240

08003d50 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2203      	movs	r2, #3
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d112      	bne.n	8003d90 <ADC_Disable+0x40>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2201      	movs	r2, #1
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d009      	beq.n	8003d8c <ADC_Disable+0x3c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	401a      	ands	r2, r3
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d101      	bne.n	8003d90 <ADC_Disable+0x40>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <ADC_Disable+0x42>
 8003d90:	2300      	movs	r3, #0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d048      	beq.n	8003e28 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d110      	bne.n	8003dc6 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2102      	movs	r1, #2
 8003db0:	430a      	orrs	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2203      	movs	r2, #3
 8003dba:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dbc:	f7ff fb38 	bl	8003430 <HAL_GetTick>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003dc4:	e029      	b.n	8003e1a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	2210      	movs	r2, #16
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e023      	b.n	8003e2a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003de2:	f7ff fb25 	bl	8003430 <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d914      	bls.n	8003e1a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2201      	movs	r2, #1
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d10d      	bne.n	8003e1a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	2210      	movs	r2, #16
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	2201      	movs	r2, #1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e007      	b.n	8003e2a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2201      	movs	r2, #1
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d0dc      	beq.n	8003de2 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b004      	add	sp, #16
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2204      	movs	r2, #4
 8003e46:	4013      	ands	r3, r2
 8003e48:	d03a      	beq.n	8003ec0 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2204      	movs	r2, #4
 8003e52:	4013      	ands	r3, r2
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d10d      	bne.n	8003e74 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003e62:	d107      	bne.n	8003e74 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2110      	movs	r1, #16
 8003e70:	430a      	orrs	r2, r1
 8003e72:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e74:	f7ff fadc 	bl	8003430 <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003e7c:	e01a      	b.n	8003eb4 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e7e:	f7ff fad7 	bl	8003430 <HAL_GetTick>
 8003e82:	0002      	movs	r2, r0
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d913      	bls.n	8003eb4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2204      	movs	r2, #4
 8003e94:	4013      	ands	r3, r2
 8003e96:	d00d      	beq.n	8003eb4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e006      	b.n	8003ec2 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d1de      	bne.n	8003e7e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b004      	add	sp, #16
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	1dfb      	adds	r3, r7, #7
 8003ed6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ed8:	1dfb      	adds	r3, r7, #7
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b7f      	cmp	r3, #127	; 0x7f
 8003ede:	d809      	bhi.n	8003ef4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ee0:	1dfb      	adds	r3, r7, #7
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	001a      	movs	r2, r3
 8003ee6:	231f      	movs	r3, #31
 8003ee8:	401a      	ands	r2, r3
 8003eea:	4b04      	ldr	r3, [pc, #16]	; (8003efc <__NVIC_EnableIRQ+0x30>)
 8003eec:	2101      	movs	r1, #1
 8003eee:	4091      	lsls	r1, r2
 8003ef0:	000a      	movs	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]
  }
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b002      	add	sp, #8
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	e000e100 	.word	0xe000e100

08003f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f00:	b590      	push	{r4, r7, lr}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	0002      	movs	r2, r0
 8003f08:	6039      	str	r1, [r7, #0]
 8003f0a:	1dfb      	adds	r3, r7, #7
 8003f0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b7f      	cmp	r3, #127	; 0x7f
 8003f14:	d828      	bhi.n	8003f68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f16:	4a2f      	ldr	r2, [pc, #188]	; (8003fd4 <__NVIC_SetPriority+0xd4>)
 8003f18:	1dfb      	adds	r3, r7, #7
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b25b      	sxtb	r3, r3
 8003f1e:	089b      	lsrs	r3, r3, #2
 8003f20:	33c0      	adds	r3, #192	; 0xc0
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	589b      	ldr	r3, [r3, r2]
 8003f26:	1dfa      	adds	r2, r7, #7
 8003f28:	7812      	ldrb	r2, [r2, #0]
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	400a      	ands	r2, r1
 8003f30:	00d2      	lsls	r2, r2, #3
 8003f32:	21ff      	movs	r1, #255	; 0xff
 8003f34:	4091      	lsls	r1, r2
 8003f36:	000a      	movs	r2, r1
 8003f38:	43d2      	mvns	r2, r2
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	22ff      	movs	r2, #255	; 0xff
 8003f44:	401a      	ands	r2, r3
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	4003      	ands	r3, r0
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f54:	481f      	ldr	r0, [pc, #124]	; (8003fd4 <__NVIC_SetPriority+0xd4>)
 8003f56:	1dfb      	adds	r3, r7, #7
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b25b      	sxtb	r3, r3
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	33c0      	adds	r3, #192	; 0xc0
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f66:	e031      	b.n	8003fcc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f68:	4a1b      	ldr	r2, [pc, #108]	; (8003fd8 <__NVIC_SetPriority+0xd8>)
 8003f6a:	1dfb      	adds	r3, r7, #7
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	0019      	movs	r1, r3
 8003f70:	230f      	movs	r3, #15
 8003f72:	400b      	ands	r3, r1
 8003f74:	3b08      	subs	r3, #8
 8003f76:	089b      	lsrs	r3, r3, #2
 8003f78:	3306      	adds	r3, #6
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	18d3      	adds	r3, r2, r3
 8003f7e:	3304      	adds	r3, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	1dfa      	adds	r2, r7, #7
 8003f84:	7812      	ldrb	r2, [r2, #0]
 8003f86:	0011      	movs	r1, r2
 8003f88:	2203      	movs	r2, #3
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	00d2      	lsls	r2, r2, #3
 8003f8e:	21ff      	movs	r1, #255	; 0xff
 8003f90:	4091      	lsls	r1, r2
 8003f92:	000a      	movs	r2, r1
 8003f94:	43d2      	mvns	r2, r2
 8003f96:	401a      	ands	r2, r3
 8003f98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	019b      	lsls	r3, r3, #6
 8003f9e:	22ff      	movs	r2, #255	; 0xff
 8003fa0:	401a      	ands	r2, r3
 8003fa2:	1dfb      	adds	r3, r7, #7
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	2303      	movs	r3, #3
 8003faa:	4003      	ands	r3, r0
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fb0:	4809      	ldr	r0, [pc, #36]	; (8003fd8 <__NVIC_SetPriority+0xd8>)
 8003fb2:	1dfb      	adds	r3, r7, #7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	001c      	movs	r4, r3
 8003fb8:	230f      	movs	r3, #15
 8003fba:	4023      	ands	r3, r4
 8003fbc:	3b08      	subs	r3, #8
 8003fbe:	089b      	lsrs	r3, r3, #2
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	3306      	adds	r3, #6
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	18c3      	adds	r3, r0, r3
 8003fc8:	3304      	adds	r3, #4
 8003fca:	601a      	str	r2, [r3, #0]
}
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b003      	add	sp, #12
 8003fd2:	bd90      	pop	{r4, r7, pc}
 8003fd4:	e000e100 	.word	0xe000e100
 8003fd8:	e000ed00 	.word	0xe000ed00

08003fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	1e5a      	subs	r2, r3, #1
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	045b      	lsls	r3, r3, #17
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d301      	bcc.n	8003ff4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e010      	b.n	8004016 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <SysTick_Config+0x44>)
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	425b      	negs	r3, r3
 8004000:	2103      	movs	r1, #3
 8004002:	0018      	movs	r0, r3
 8004004:	f7ff ff7c 	bl	8003f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <SysTick_Config+0x44>)
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <SysTick_Config+0x44>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004014:	2300      	movs	r3, #0
}
 8004016:	0018      	movs	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	b002      	add	sp, #8
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	e000e010 	.word	0xe000e010

08004024 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	210f      	movs	r1, #15
 8004030:	187b      	adds	r3, r7, r1
 8004032:	1c02      	adds	r2, r0, #0
 8004034:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	187b      	adds	r3, r7, r1
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	b25b      	sxtb	r3, r3
 800403e:	0011      	movs	r1, r2
 8004040:	0018      	movs	r0, r3
 8004042:	f7ff ff5d 	bl	8003f00 <__NVIC_SetPriority>
}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	46bd      	mov	sp, r7
 800404a:	b004      	add	sp, #16
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	0002      	movs	r2, r0
 8004056:	1dfb      	adds	r3, r7, #7
 8004058:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800405a:	1dfb      	adds	r3, r7, #7
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	b25b      	sxtb	r3, r3
 8004060:	0018      	movs	r0, r3
 8004062:	f7ff ff33 	bl	8003ecc <__NVIC_EnableIRQ>
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b002      	add	sp, #8
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f7ff ffaf 	bl	8003fdc <SysTick_Config>
 800407e:	0003      	movs	r3, r0
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2221      	movs	r2, #33	; 0x21
 8004094:	5c9b      	ldrb	r3, [r3, r2]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d008      	beq.n	80040ae <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2204      	movs	r2, #4
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	2100      	movs	r1, #0
 80040a8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e020      	b.n	80040f0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	210e      	movs	r1, #14
 80040ba:	438a      	bics	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2101      	movs	r1, #1
 80040ca:	438a      	bics	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	2101      	movs	r1, #1
 80040d8:	4091      	lsls	r1, r2
 80040da:	000a      	movs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2221      	movs	r2, #33	; 0x21
 80040e2:	2101      	movs	r1, #1
 80040e4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	2100      	movs	r1, #0
 80040ec:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	0018      	movs	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	210f      	movs	r1, #15
 8004102:	187b      	adds	r3, r7, r1
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2221      	movs	r2, #33	; 0x21
 800410c:	5c9b      	ldrb	r3, [r3, r2]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d006      	beq.n	8004122 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2204      	movs	r2, #4
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800411a:	187b      	adds	r3, r7, r1
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	e028      	b.n	8004174 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	210e      	movs	r1, #14
 800412e:	438a      	bics	r2, r1
 8004130:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2101      	movs	r1, #1
 800413e:	438a      	bics	r2, r1
 8004140:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	2101      	movs	r1, #1
 800414c:	4091      	lsls	r1, r2
 800414e:	000a      	movs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2221      	movs	r2, #33	; 0x21
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	2100      	movs	r1, #0
 8004160:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	0010      	movs	r0, r2
 8004172:	4798      	blx	r3
    } 
  }
  return status;
 8004174:	230f      	movs	r3, #15
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	781b      	ldrb	r3, [r3, #0]
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b004      	add	sp, #16
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004192:	e155      	b.n	8004440 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4091      	lsls	r1, r2
 800419e:	000a      	movs	r2, r1
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d100      	bne.n	80041ac <HAL_GPIO_Init+0x28>
 80041aa:	e146      	b.n	800443a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2203      	movs	r2, #3
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d005      	beq.n	80041c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2203      	movs	r2, #3
 80041be:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d130      	bne.n	8004226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	2203      	movs	r2, #3
 80041d0:	409a      	lsls	r2, r3
 80041d2:	0013      	movs	r3, r2
 80041d4:	43da      	mvns	r2, r3
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4013      	ands	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	409a      	lsls	r2, r3
 80041e6:	0013      	movs	r3, r2
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041fa:	2201      	movs	r2, #1
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	409a      	lsls	r2, r3
 8004200:	0013      	movs	r3, r2
 8004202:	43da      	mvns	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	2201      	movs	r2, #1
 8004212:	401a      	ands	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	409a      	lsls	r2, r3
 8004218:	0013      	movs	r3, r2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2203      	movs	r2, #3
 800422c:	4013      	ands	r3, r2
 800422e:	2b03      	cmp	r3, #3
 8004230:	d017      	beq.n	8004262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	2203      	movs	r2, #3
 800423e:	409a      	lsls	r2, r3
 8004240:	0013      	movs	r3, r2
 8004242:	43da      	mvns	r2, r3
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4013      	ands	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	409a      	lsls	r2, r3
 8004254:	0013      	movs	r3, r2
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2203      	movs	r2, #3
 8004268:	4013      	ands	r3, r2
 800426a:	2b02      	cmp	r3, #2
 800426c:	d123      	bne.n	80042b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	08da      	lsrs	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3208      	adds	r2, #8
 8004276:	0092      	lsls	r2, r2, #2
 8004278:	58d3      	ldr	r3, [r2, r3]
 800427a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2207      	movs	r2, #7
 8004280:	4013      	ands	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	409a      	lsls	r2, r3
 8004288:	0013      	movs	r3, r2
 800428a:	43da      	mvns	r2, r3
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2107      	movs	r1, #7
 800429a:	400b      	ands	r3, r1
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	409a      	lsls	r2, r3
 80042a0:	0013      	movs	r3, r2
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	08da      	lsrs	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3208      	adds	r2, #8
 80042b0:	0092      	lsls	r2, r2, #2
 80042b2:	6939      	ldr	r1, [r7, #16]
 80042b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2203      	movs	r2, #3
 80042c2:	409a      	lsls	r2, r3
 80042c4:	0013      	movs	r3, r2
 80042c6:	43da      	mvns	r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2203      	movs	r2, #3
 80042d4:	401a      	ands	r2, r3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	0013      	movs	r3, r2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	23c0      	movs	r3, #192	; 0xc0
 80042f0:	029b      	lsls	r3, r3, #10
 80042f2:	4013      	ands	r3, r2
 80042f4:	d100      	bne.n	80042f8 <HAL_GPIO_Init+0x174>
 80042f6:	e0a0      	b.n	800443a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f8:	4b57      	ldr	r3, [pc, #348]	; (8004458 <HAL_GPIO_Init+0x2d4>)
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	4b56      	ldr	r3, [pc, #344]	; (8004458 <HAL_GPIO_Init+0x2d4>)
 80042fe:	2101      	movs	r1, #1
 8004300:	430a      	orrs	r2, r1
 8004302:	619a      	str	r2, [r3, #24]
 8004304:	4b54      	ldr	r3, [pc, #336]	; (8004458 <HAL_GPIO_Init+0x2d4>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2201      	movs	r2, #1
 800430a:	4013      	ands	r3, r2
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004310:	4a52      	ldr	r2, [pc, #328]	; (800445c <HAL_GPIO_Init+0x2d8>)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	3302      	adds	r3, #2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	589b      	ldr	r3, [r3, r2]
 800431c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2203      	movs	r2, #3
 8004322:	4013      	ands	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	220f      	movs	r2, #15
 8004328:	409a      	lsls	r2, r3
 800432a:	0013      	movs	r3, r2
 800432c:	43da      	mvns	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	2390      	movs	r3, #144	; 0x90
 8004338:	05db      	lsls	r3, r3, #23
 800433a:	429a      	cmp	r2, r3
 800433c:	d019      	beq.n	8004372 <HAL_GPIO_Init+0x1ee>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a47      	ldr	r2, [pc, #284]	; (8004460 <HAL_GPIO_Init+0x2dc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_GPIO_Init+0x1ea>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a46      	ldr	r2, [pc, #280]	; (8004464 <HAL_GPIO_Init+0x2e0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d00d      	beq.n	800436a <HAL_GPIO_Init+0x1e6>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a45      	ldr	r2, [pc, #276]	; (8004468 <HAL_GPIO_Init+0x2e4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d007      	beq.n	8004366 <HAL_GPIO_Init+0x1e2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a44      	ldr	r2, [pc, #272]	; (800446c <HAL_GPIO_Init+0x2e8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d101      	bne.n	8004362 <HAL_GPIO_Init+0x1de>
 800435e:	2304      	movs	r3, #4
 8004360:	e008      	b.n	8004374 <HAL_GPIO_Init+0x1f0>
 8004362:	2305      	movs	r3, #5
 8004364:	e006      	b.n	8004374 <HAL_GPIO_Init+0x1f0>
 8004366:	2303      	movs	r3, #3
 8004368:	e004      	b.n	8004374 <HAL_GPIO_Init+0x1f0>
 800436a:	2302      	movs	r3, #2
 800436c:	e002      	b.n	8004374 <HAL_GPIO_Init+0x1f0>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <HAL_GPIO_Init+0x1f0>
 8004372:	2300      	movs	r3, #0
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	2103      	movs	r1, #3
 8004378:	400a      	ands	r2, r1
 800437a:	0092      	lsls	r2, r2, #2
 800437c:	4093      	lsls	r3, r2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004384:	4935      	ldr	r1, [pc, #212]	; (800445c <HAL_GPIO_Init+0x2d8>)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	3302      	adds	r3, #2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004392:	4b37      	ldr	r3, [pc, #220]	; (8004470 <HAL_GPIO_Init+0x2ec>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	43da      	mvns	r2, r3
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4013      	ands	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	025b      	lsls	r3, r3, #9
 80043aa:	4013      	ands	r3, r2
 80043ac:	d003      	beq.n	80043b6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80043b6:	4b2e      	ldr	r3, [pc, #184]	; (8004470 <HAL_GPIO_Init+0x2ec>)
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80043bc:	4b2c      	ldr	r3, [pc, #176]	; (8004470 <HAL_GPIO_Init+0x2ec>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	43da      	mvns	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	029b      	lsls	r3, r3, #10
 80043d4:	4013      	ands	r3, r2
 80043d6:	d003      	beq.n	80043e0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <HAL_GPIO_Init+0x2ec>)
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043e6:	4b22      	ldr	r3, [pc, #136]	; (8004470 <HAL_GPIO_Init+0x2ec>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	43da      	mvns	r2, r3
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	035b      	lsls	r3, r3, #13
 80043fe:	4013      	ands	r3, r2
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800440a:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_GPIO_Init+0x2ec>)
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <HAL_GPIO_Init+0x2ec>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	43da      	mvns	r2, r3
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	039b      	lsls	r3, r3, #14
 8004428:	4013      	ands	r3, r2
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004434:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <HAL_GPIO_Init+0x2ec>)
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	3301      	adds	r3, #1
 800443e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	40da      	lsrs	r2, r3
 8004448:	1e13      	subs	r3, r2, #0
 800444a:	d000      	beq.n	800444e <HAL_GPIO_Init+0x2ca>
 800444c:	e6a2      	b.n	8004194 <HAL_GPIO_Init+0x10>
  } 
}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	46c0      	nop			; (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	b006      	add	sp, #24
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000
 800445c:	40010000 	.word	0x40010000
 8004460:	48000400 	.word	0x48000400
 8004464:	48000800 	.word	0x48000800
 8004468:	48000c00 	.word	0x48000c00
 800446c:	48001000 	.word	0x48001000
 8004470:	40010400 	.word	0x40010400

08004474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	000a      	movs	r2, r1
 800447e:	1cbb      	adds	r3, r7, #2
 8004480:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	1cba      	adds	r2, r7, #2
 8004488:	8812      	ldrh	r2, [r2, #0]
 800448a:	4013      	ands	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800448e:	230f      	movs	r3, #15
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	e003      	b.n	80044a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004498:	230f      	movs	r3, #15
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80044a0:	230f      	movs	r3, #15
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	781b      	ldrb	r3, [r3, #0]
  }
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b004      	add	sp, #16
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	0008      	movs	r0, r1
 80044b8:	0011      	movs	r1, r2
 80044ba:	1cbb      	adds	r3, r7, #2
 80044bc:	1c02      	adds	r2, r0, #0
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	1c7b      	adds	r3, r7, #1
 80044c2:	1c0a      	adds	r2, r1, #0
 80044c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044c6:	1c7b      	adds	r3, r7, #1
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044ce:	1cbb      	adds	r3, r7, #2
 80044d0:	881a      	ldrh	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044d6:	e003      	b.n	80044e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044d8:	1cbb      	adds	r3, r7, #2
 80044da:	881a      	ldrh	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044e0:	46c0      	nop			; (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b002      	add	sp, #8
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	000a      	movs	r2, r1
 80044f2:	1cbb      	adds	r3, r7, #2
 80044f4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044fc:	1cbb      	adds	r3, r7, #2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4013      	ands	r3, r2
 8004504:	041a      	lsls	r2, r3, #16
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	43db      	mvns	r3, r3
 800450a:	1cb9      	adds	r1, r7, #2
 800450c:	8809      	ldrh	r1, [r1, #0]
 800450e:	400b      	ands	r3, r1
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	619a      	str	r2, [r3, #24]
}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b004      	add	sp, #16
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	0002      	movs	r2, r0
 8004528:	1dbb      	adds	r3, r7, #6
 800452a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	1dba      	adds	r2, r7, #6
 8004532:	8812      	ldrh	r2, [r2, #0]
 8004534:	4013      	ands	r3, r2
 8004536:	d008      	beq.n	800454a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800453a:	1dba      	adds	r2, r7, #6
 800453c:	8812      	ldrh	r2, [r2, #0]
 800453e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004540:	1dbb      	adds	r3, r7, #6
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	0018      	movs	r0, r3
 8004546:	f7fc fe8b 	bl	8001260 <HAL_GPIO_EXTI_Callback>
  }
}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	b002      	add	sp, #8
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	40010400 	.word	0x40010400

08004558 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455a:	b08b      	sub	sp, #44	; 0x2c
 800455c:	af06      	add	r7, sp, #24
 800455e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0ff      	b.n	800476a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a81      	ldr	r2, [pc, #516]	; (8004774 <HAL_PCD_Init+0x21c>)
 800456e:	5c9b      	ldrb	r3, [r3, r2]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	23aa      	movs	r3, #170	; 0xaa
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	2100      	movs	r1, #0
 800457e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0018      	movs	r0, r3
 8004584:	f008 fd6c 	bl	800d060 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a7a      	ldr	r2, [pc, #488]	; (8004774 <HAL_PCD_Init+0x21c>)
 800458c:	2103      	movs	r1, #3
 800458e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	0018      	movs	r0, r3
 8004596:	f004 fe0f 	bl	80091b8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800459a:	230f      	movs	r3, #15
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e058      	b.n	8004656 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045a4:	200f      	movs	r0, #15
 80045a6:	183b      	adds	r3, r7, r0
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	0013      	movs	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	18cb      	adds	r3, r1, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045be:	183b      	adds	r3, r7, r0
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	0013      	movs	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	189b      	adds	r3, r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	183a      	adds	r2, r7, r0
 80045d0:	7812      	ldrb	r2, [r2, #0]
 80045d2:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045d4:	0004      	movs	r4, r0
 80045d6:	183b      	adds	r3, r7, r0
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	193b      	adds	r3, r7, r4
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	b298      	uxth	r0, r3
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	0013      	movs	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	18cb      	adds	r3, r1, r3
 80045ec:	3336      	adds	r3, #54	; 0x36
 80045ee:	1c02      	adds	r2, r0, #0
 80045f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045f2:	193b      	adds	r3, r7, r4
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	0013      	movs	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	189b      	adds	r3, r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	18cb      	adds	r3, r1, r3
 8004604:	3303      	adds	r3, #3
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800460a:	193b      	adds	r3, r7, r4
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	0013      	movs	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	189b      	adds	r3, r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	18cb      	adds	r3, r1, r3
 800461a:	3338      	adds	r3, #56	; 0x38
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004620:	193b      	adds	r3, r7, r4
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	0013      	movs	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	189b      	adds	r3, r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	18cb      	adds	r3, r1, r3
 8004630:	333c      	adds	r3, #60	; 0x3c
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004636:	193b      	adds	r3, r7, r4
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	0013      	movs	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	189b      	adds	r3, r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	18cb      	adds	r3, r1, r3
 8004646:	3340      	adds	r3, #64	; 0x40
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800464c:	193b      	adds	r3, r7, r4
 800464e:	781a      	ldrb	r2, [r3, #0]
 8004650:	193b      	adds	r3, r7, r4
 8004652:	3201      	adds	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	210f      	movs	r1, #15
 8004658:	187b      	adds	r3, r7, r1
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d39f      	bcc.n	80045a4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004664:	187b      	adds	r3, r7, r1
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	e056      	b.n	800471a <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800466c:	240f      	movs	r4, #15
 800466e:	193b      	adds	r3, r7, r4
 8004670:	781a      	ldrb	r2, [r3, #0]
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	236a      	movs	r3, #106	; 0x6a
 8004676:	33ff      	adds	r3, #255	; 0xff
 8004678:	0019      	movs	r1, r3
 800467a:	0013      	movs	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	189b      	adds	r3, r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	18c3      	adds	r3, r0, r3
 8004684:	185b      	adds	r3, r3, r1
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800468a:	193b      	adds	r3, r7, r4
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	23b4      	movs	r3, #180	; 0xb4
 8004692:	0059      	lsls	r1, r3, #1
 8004694:	0013      	movs	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	189b      	adds	r3, r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	18c3      	adds	r3, r0, r3
 800469e:	185b      	adds	r3, r3, r1
 80046a0:	193a      	adds	r2, r7, r4
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046a6:	193b      	adds	r3, r7, r4
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	236c      	movs	r3, #108	; 0x6c
 80046ae:	33ff      	adds	r3, #255	; 0xff
 80046b0:	0019      	movs	r1, r3
 80046b2:	0013      	movs	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	18c3      	adds	r3, r0, r3
 80046bc:	185b      	adds	r3, r3, r1
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046c2:	193b      	adds	r3, r7, r4
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	23bc      	movs	r3, #188	; 0xbc
 80046ca:	0059      	lsls	r1, r3, #1
 80046cc:	0013      	movs	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	18c3      	adds	r3, r0, r3
 80046d6:	185b      	adds	r3, r3, r1
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046dc:	193b      	adds	r3, r7, r4
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	23be      	movs	r3, #190	; 0xbe
 80046e4:	0059      	lsls	r1, r3, #1
 80046e6:	0013      	movs	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	18c3      	adds	r3, r0, r3
 80046f0:	185b      	adds	r3, r3, r1
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046f6:	193b      	adds	r3, r7, r4
 80046f8:	781a      	ldrb	r2, [r3, #0]
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	23c0      	movs	r3, #192	; 0xc0
 80046fe:	0059      	lsls	r1, r3, #1
 8004700:	0013      	movs	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	189b      	adds	r3, r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	18c3      	adds	r3, r0, r3
 800470a:	185b      	adds	r3, r3, r1
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004710:	193b      	adds	r3, r7, r4
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	193b      	adds	r3, r7, r4
 8004716:	3201      	adds	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	230f      	movs	r3, #15
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	781a      	ldrb	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	429a      	cmp	r2, r3
 8004726:	d3a1      	bcc.n	800466c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	466a      	mov	r2, sp
 8004730:	0011      	movs	r1, r2
 8004732:	001a      	movs	r2, r3
 8004734:	3210      	adds	r2, #16
 8004736:	ca70      	ldmia	r2!, {r4, r5, r6}
 8004738:	c170      	stmia	r1!, {r4, r5, r6}
 800473a:	ca30      	ldmia	r2!, {r4, r5}
 800473c:	c130      	stmia	r1!, {r4, r5}
 800473e:	6859      	ldr	r1, [r3, #4]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f004 fd52 	bl	80091ec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2224      	movs	r2, #36	; 0x24
 800474c:	2100      	movs	r1, #0
 800474e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <HAL_PCD_Init+0x21c>)
 8004754:	2101      	movs	r1, #1
 8004756:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d103      	bne.n	8004768 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	0018      	movs	r0, r3
 8004764:	f001 fd34 	bl	80061d0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b005      	add	sp, #20
 8004770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	000002a9 	.word	0x000002a9

08004778 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	23aa      	movs	r3, #170	; 0xaa
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	5cd3      	ldrb	r3, [r2, r3]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_PCD_Start+0x18>
 800478c:	2302      	movs	r3, #2
 800478e:	e014      	b.n	80047ba <HAL_PCD_Start+0x42>
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	23aa      	movs	r3, #170	; 0xaa
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	2101      	movs	r1, #1
 8004798:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	0018      	movs	r0, r3
 80047a0:	f004 fcf4 	bl	800918c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	0018      	movs	r0, r3
 80047aa:	f006 fc4b 	bl	800b044 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	23aa      	movs	r3, #170	; 0xaa
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	2100      	movs	r1, #0
 80047b6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b002      	add	sp, #8
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f006 fc4d 	bl	800b070 <USB_ReadInterrupts>
 80047d6:	0002      	movs	r2, r0
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	401a      	ands	r2, r3
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d103      	bne.n	80047ee <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 fbbb 	bl	8004f64 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f006 fc3c 	bl	800b070 <USB_ReadInterrupts>
 80047f8:	0002      	movs	r2, r0
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	401a      	ands	r2, r3
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	429a      	cmp	r2, r3
 8004806:	d114      	bne.n	8004832 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2244      	movs	r2, #68	; 0x44
 800480e:	5a9b      	ldrh	r3, [r3, r2]
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	49a2      	ldr	r1, [pc, #648]	; (8004aa0 <HAL_PCD_IRQHandler+0x2dc>)
 8004818:	400a      	ands	r2, r1
 800481a:	b291      	uxth	r1, r2
 800481c:	2244      	movs	r2, #68	; 0x44
 800481e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0018      	movs	r0, r3
 8004824:	f008 fca7 	bl	800d176 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2100      	movs	r1, #0
 800482c:	0018      	movs	r0, r3
 800482e:	f000 f945 	bl	8004abc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	0018      	movs	r0, r3
 8004838:	f006 fc1a 	bl	800b070 <USB_ReadInterrupts>
 800483c:	0002      	movs	r2, r0
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	01db      	lsls	r3, r3, #7
 8004842:	401a      	ands	r2, r3
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	01db      	lsls	r3, r3, #7
 8004848:	429a      	cmp	r2, r3
 800484a:	d10b      	bne.n	8004864 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2244      	movs	r2, #68	; 0x44
 8004852:	5a9b      	ldrh	r3, [r3, r2]
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4992      	ldr	r1, [pc, #584]	; (8004aa4 <HAL_PCD_IRQHandler+0x2e0>)
 800485c:	400a      	ands	r2, r1
 800485e:	b291      	uxth	r1, r2
 8004860:	2244      	movs	r2, #68	; 0x44
 8004862:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0018      	movs	r0, r3
 800486a:	f006 fc01 	bl	800b070 <USB_ReadInterrupts>
 800486e:	0002      	movs	r2, r0
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	019b      	lsls	r3, r3, #6
 8004874:	401a      	ands	r2, r3
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	019b      	lsls	r3, r3, #6
 800487a:	429a      	cmp	r2, r3
 800487c:	d10b      	bne.n	8004896 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2244      	movs	r2, #68	; 0x44
 8004884:	5a9b      	ldrh	r3, [r3, r2]
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4986      	ldr	r1, [pc, #536]	; (8004aa8 <HAL_PCD_IRQHandler+0x2e4>)
 800488e:	400a      	ands	r2, r1
 8004890:	b291      	uxth	r1, r2
 8004892:	2244      	movs	r2, #68	; 0x44
 8004894:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	0018      	movs	r0, r3
 800489c:	f006 fbe8 	bl	800b070 <USB_ReadInterrupts>
 80048a0:	0002      	movs	r2, r0
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	015b      	lsls	r3, r3, #5
 80048a6:	401a      	ands	r2, r3
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	015b      	lsls	r3, r3, #5
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d137      	bne.n	8004920 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2240      	movs	r2, #64	; 0x40
 80048b6:	5a9b      	ldrh	r3, [r3, r2]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2104      	movs	r1, #4
 80048c0:	438a      	bics	r2, r1
 80048c2:	b291      	uxth	r1, r2
 80048c4:	2240      	movs	r2, #64	; 0x40
 80048c6:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2240      	movs	r2, #64	; 0x40
 80048ce:	5a9b      	ldrh	r3, [r3, r2]
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2108      	movs	r1, #8
 80048d8:	438a      	bics	r2, r1
 80048da:	b291      	uxth	r1, r2
 80048dc:	2240      	movs	r2, #64	; 0x40
 80048de:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	23b8      	movs	r3, #184	; 0xb8
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	5cd3      	ldrb	r3, [r2, r3]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d109      	bne.n	8004900 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	23b8      	movs	r3, #184	; 0xb8
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	2100      	movs	r1, #0
 80048f4:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2100      	movs	r1, #0
 80048fa:	0018      	movs	r0, r3
 80048fc:	f001 fc92 	bl	8006224 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	0018      	movs	r0, r3
 8004904:	f008 fc78 	bl	800d1f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2244      	movs	r2, #68	; 0x44
 800490e:	5a9b      	ldrh	r3, [r3, r2]
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4965      	ldr	r1, [pc, #404]	; (8004aac <HAL_PCD_IRQHandler+0x2e8>)
 8004918:	400a      	ands	r2, r1
 800491a:	b291      	uxth	r1, r2
 800491c:	2244      	movs	r2, #68	; 0x44
 800491e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	0018      	movs	r0, r3
 8004926:	f006 fba3 	bl	800b070 <USB_ReadInterrupts>
 800492a:	0002      	movs	r2, r0
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	401a      	ands	r2, r3
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	429a      	cmp	r2, r3
 8004938:	d127      	bne.n	800498a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2240      	movs	r2, #64	; 0x40
 8004940:	5a9b      	ldrh	r3, [r3, r2]
 8004942:	b29a      	uxth	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2108      	movs	r1, #8
 800494a:	430a      	orrs	r2, r1
 800494c:	b291      	uxth	r1, r2
 800494e:	2240      	movs	r2, #64	; 0x40
 8004950:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2244      	movs	r2, #68	; 0x44
 8004958:	5a9b      	ldrh	r3, [r3, r2]
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4953      	ldr	r1, [pc, #332]	; (8004ab0 <HAL_PCD_IRQHandler+0x2ec>)
 8004962:	400a      	ands	r2, r1
 8004964:	b291      	uxth	r1, r2
 8004966:	2244      	movs	r2, #68	; 0x44
 8004968:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2240      	movs	r2, #64	; 0x40
 8004970:	5a9b      	ldrh	r3, [r3, r2]
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2104      	movs	r1, #4
 800497a:	430a      	orrs	r2, r1
 800497c:	b291      	uxth	r1, r2
 800497e:	2240      	movs	r2, #64	; 0x40
 8004980:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f008 fc1b 	bl	800d1c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	0018      	movs	r0, r3
 8004990:	f006 fb6e 	bl	800b070 <USB_ReadInterrupts>
 8004994:	0003      	movs	r3, r0
 8004996:	2280      	movs	r2, #128	; 0x80
 8004998:	4013      	ands	r3, r2
 800499a:	2b80      	cmp	r3, #128	; 0x80
 800499c:	d145      	bne.n	8004a2a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2244      	movs	r2, #68	; 0x44
 80049a4:	5a9b      	ldrh	r3, [r3, r2]
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2180      	movs	r1, #128	; 0x80
 80049ae:	438a      	bics	r2, r1
 80049b0:	b291      	uxth	r1, r2
 80049b2:	2244      	movs	r2, #68	; 0x44
 80049b4:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	23b8      	movs	r3, #184	; 0xb8
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	5cd3      	ldrb	r3, [r2, r3]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d12f      	bne.n	8004a22 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2240      	movs	r2, #64	; 0x40
 80049c8:	5a9b      	ldrh	r3, [r3, r2]
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2104      	movs	r1, #4
 80049d2:	430a      	orrs	r2, r1
 80049d4:	b291      	uxth	r1, r2
 80049d6:	2240      	movs	r2, #64	; 0x40
 80049d8:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2240      	movs	r2, #64	; 0x40
 80049e0:	5a9b      	ldrh	r3, [r3, r2]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2108      	movs	r1, #8
 80049ea:	430a      	orrs	r2, r1
 80049ec:	b291      	uxth	r1, r2
 80049ee:	2240      	movs	r2, #64	; 0x40
 80049f0:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	23b8      	movs	r3, #184	; 0xb8
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	2101      	movs	r1, #1
 80049fa:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2254      	movs	r2, #84	; 0x54
 8004a02:	5a9b      	ldrh	r3, [r3, r2]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	089b      	lsrs	r3, r3, #2
 8004a08:	223c      	movs	r2, #60	; 0x3c
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	23b9      	movs	r3, #185	; 0xb9
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2101      	movs	r1, #1
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f001 fc02 	bl	8006224 <HAL_PCDEx_LPM_Callback>
 8004a20:	e003      	b.n	8004a2a <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f008 fbcb 	bl	800d1c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f006 fb1e 	bl	800b070 <USB_ReadInterrupts>
 8004a34:	0002      	movs	r2, r0
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d10f      	bne.n	8004a64 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2244      	movs	r2, #68	; 0x44
 8004a4a:	5a9b      	ldrh	r3, [r3, r2]
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4918      	ldr	r1, [pc, #96]	; (8004ab4 <HAL_PCD_IRQHandler+0x2f0>)
 8004a54:	400a      	ands	r2, r1
 8004a56:	b291      	uxth	r1, r2
 8004a58:	2244      	movs	r2, #68	; 0x44
 8004a5a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f008 fb7a 	bl	800d158 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f006 fb01 	bl	800b070 <USB_ReadInterrupts>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	401a      	ands	r2, r3
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d10b      	bne.n	8004a96 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2244      	movs	r2, #68	; 0x44
 8004a84:	5a9b      	ldrh	r3, [r3, r2]
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	490a      	ldr	r1, [pc, #40]	; (8004ab8 <HAL_PCD_IRQHandler+0x2f4>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	b291      	uxth	r1, r2
 8004a92:	2244      	movs	r2, #68	; 0x44
 8004a94:	5299      	strh	r1, [r3, r2]
  }
}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b002      	add	sp, #8
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	fffffbff 	.word	0xfffffbff
 8004aa4:	ffffbfff 	.word	0xffffbfff
 8004aa8:	ffffdfff 	.word	0xffffdfff
 8004aac:	ffffefff 	.word	0xffffefff
 8004ab0:	fffff7ff 	.word	0xfffff7ff
 8004ab4:	fffffdff 	.word	0xfffffdff
 8004ab8:	fffffeff 	.word	0xfffffeff

08004abc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	000a      	movs	r2, r1
 8004ac6:	1cfb      	adds	r3, r7, #3
 8004ac8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	23aa      	movs	r3, #170	; 0xaa
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	5cd3      	ldrb	r3, [r2, r3]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_PCD_SetAddress+0x1e>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e017      	b.n	8004b0a <HAL_PCD_SetAddress+0x4e>
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	23aa      	movs	r3, #170	; 0xaa
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	1cfa      	adds	r2, r7, #3
 8004ae8:	2124      	movs	r1, #36	; 0x24
 8004aea:	7812      	ldrb	r2, [r2, #0]
 8004aec:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	1cfb      	adds	r3, r7, #3
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	0019      	movs	r1, r3
 8004af8:	0010      	movs	r0, r2
 8004afa:	f006 fa8f 	bl	800b01c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	23aa      	movs	r3, #170	; 0xaa
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	2100      	movs	r1, #0
 8004b06:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b002      	add	sp, #8
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b12:	b590      	push	{r4, r7, lr}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	000c      	movs	r4, r1
 8004b1c:	0010      	movs	r0, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	1cfb      	adds	r3, r7, #3
 8004b22:	1c22      	adds	r2, r4, #0
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	003b      	movs	r3, r7
 8004b28:	1c02      	adds	r2, r0, #0
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	1cbb      	adds	r3, r7, #2
 8004b2e:	1c0a      	adds	r2, r1, #0
 8004b30:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b32:	230b      	movs	r3, #11
 8004b34:	18fb      	adds	r3, r7, r3
 8004b36:	2200      	movs	r2, #0
 8004b38:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b3a:	1cfb      	adds	r3, r7, #3
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	b25b      	sxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	da0f      	bge.n	8004b64 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b44:	1cfb      	adds	r3, r7, #3
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2207      	movs	r2, #7
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	0013      	movs	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	189b      	adds	r3, r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	18d3      	adds	r3, r2, r3
 8004b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	705a      	strb	r2, [r3, #1]
 8004b62:	e00f      	b.n	8004b84 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b64:	1cfb      	adds	r3, r7, #3
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2207      	movs	r2, #7
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	0013      	movs	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	189b      	adds	r3, r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	3369      	adds	r3, #105	; 0x69
 8004b76:	33ff      	adds	r3, #255	; 0xff
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	18d3      	adds	r3, r2, r3
 8004b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b84:	1cfb      	adds	r3, r7, #3
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2207      	movs	r2, #7
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b92:	003b      	movs	r3, r7
 8004b94:	881a      	ldrh	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1cba      	adds	r2, r7, #2
 8004b9e:	7812      	ldrb	r2, [r2, #0]
 8004ba0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	785b      	ldrb	r3, [r3, #1]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bb4:	1cbb      	adds	r3, r7, #2
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d102      	bne.n	8004bc2 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	23aa      	movs	r3, #170	; 0xaa
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	5cd3      	ldrb	r3, [r2, r3]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_PCD_EP_Open+0xc0>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e013      	b.n	8004bfa <HAL_PCD_EP_Open+0xe8>
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	23aa      	movs	r3, #170	; 0xaa
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	2101      	movs	r1, #1
 8004bda:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	0011      	movs	r1, r2
 8004be4:	0018      	movs	r0, r3
 8004be6:	f004 fb29 	bl	800923c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	23aa      	movs	r3, #170	; 0xaa
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004bf4:	230b      	movs	r3, #11
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	781b      	ldrb	r3, [r3, #0]
}
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b005      	add	sp, #20
 8004c00:	bd90      	pop	{r4, r7, pc}

08004c02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	000a      	movs	r2, r1
 8004c0c:	1cfb      	adds	r3, r7, #3
 8004c0e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c10:	1cfb      	adds	r3, r7, #3
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	b25b      	sxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	da0f      	bge.n	8004c3a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c1a:	1cfb      	adds	r3, r7, #3
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2207      	movs	r2, #7
 8004c20:	4013      	ands	r3, r2
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	0013      	movs	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	189b      	adds	r3, r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	18d3      	adds	r3, r2, r3
 8004c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	705a      	strb	r2, [r3, #1]
 8004c38:	e00f      	b.n	8004c5a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c3a:	1cfb      	adds	r3, r7, #3
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2207      	movs	r2, #7
 8004c40:	401a      	ands	r2, r3
 8004c42:	0013      	movs	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	189b      	adds	r3, r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	3369      	adds	r3, #105	; 0x69
 8004c4c:	33ff      	adds	r3, #255	; 0xff
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	18d3      	adds	r3, r2, r3
 8004c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c5a:	1cfb      	adds	r3, r7, #3
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2207      	movs	r2, #7
 8004c60:	4013      	ands	r3, r2
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	23aa      	movs	r3, #170	; 0xaa
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	5cd3      	ldrb	r3, [r2, r3]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_PCD_EP_Close+0x76>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e011      	b.n	8004c9c <HAL_PCD_EP_Close+0x9a>
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	23aa      	movs	r3, #170	; 0xaa
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	2101      	movs	r1, #1
 8004c80:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	0011      	movs	r1, r2
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f004 fe4a 	bl	8009924 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	23aa      	movs	r3, #170	; 0xaa
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	2100      	movs	r1, #0
 8004c98:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b004      	add	sp, #16
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	200b      	movs	r0, #11
 8004cb2:	183b      	adds	r3, r7, r0
 8004cb4:	1c0a      	adds	r2, r1, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cb8:	0001      	movs	r1, r0
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2207      	movs	r2, #7
 8004cc0:	401a      	ands	r2, r3
 8004cc2:	0013      	movs	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	3369      	adds	r3, #105	; 0x69
 8004ccc:	33ff      	adds	r3, #255	; 0xff
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	18d3      	adds	r3, r2, r3
 8004cd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cec:	187b      	adds	r3, r7, r1
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2207      	movs	r2, #7
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cfa:	187b      	adds	r3, r7, r1
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2207      	movs	r2, #7
 8004d00:	4013      	ands	r3, r2
 8004d02:	d107      	bne.n	8004d14 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f004 ffc9 	bl	8009ca4 <USB_EPStartXfer>
 8004d12:	e006      	b.n	8004d22 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f004 ffc1 	bl	8009ca4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	0018      	movs	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b006      	add	sp, #24
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	000a      	movs	r2, r1
 8004d36:	1cfb      	adds	r3, r7, #3
 8004d38:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d3a:	1cfb      	adds	r3, r7, #3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2207      	movs	r2, #7
 8004d40:	401a      	ands	r2, r3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	23c2      	movs	r3, #194	; 0xc2
 8004d46:	0059      	lsls	r1, r3, #1
 8004d48:	0013      	movs	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	18c3      	adds	r3, r0, r3
 8004d52:	185b      	adds	r3, r3, r1
 8004d54:	681b      	ldr	r3, [r3, #0]
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b002      	add	sp, #8
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	200b      	movs	r0, #11
 8004d6c:	183b      	adds	r3, r7, r0
 8004d6e:	1c0a      	adds	r2, r1, #0
 8004d70:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d72:	183b      	adds	r3, r7, r0
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2207      	movs	r2, #7
 8004d78:	4013      	ands	r3, r2
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	0013      	movs	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	189b      	adds	r3, r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	18d3      	adds	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2224      	movs	r2, #36	; 0x24
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2200      	movs	r2, #0
 8004da8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2201      	movs	r2, #1
 8004dae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004db0:	183b      	adds	r3, r7, r0
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2207      	movs	r2, #7
 8004db6:	4013      	ands	r3, r2
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dbe:	183b      	adds	r3, r7, r0
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2207      	movs	r2, #7
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d107      	bne.n	8004dd8 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	0011      	movs	r1, r2
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f004 ff67 	bl	8009ca4 <USB_EPStartXfer>
 8004dd6:	e006      	b.n	8004de6 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	0011      	movs	r1, r2
 8004de0:	0018      	movs	r0, r3
 8004de2:	f004 ff5f 	bl	8009ca4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b006      	add	sp, #24
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	000a      	movs	r2, r1
 8004dfa:	1cfb      	adds	r3, r7, #3
 8004dfc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004dfe:	1cfb      	adds	r3, r7, #3
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2207      	movs	r2, #7
 8004e04:	401a      	ands	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d901      	bls.n	8004e12 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e046      	b.n	8004ea0 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e12:	1cfb      	adds	r3, r7, #3
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	b25b      	sxtb	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	da0f      	bge.n	8004e3c <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e1c:	1cfb      	adds	r3, r7, #3
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2207      	movs	r2, #7
 8004e22:	4013      	ands	r3, r2
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	0013      	movs	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	18d3      	adds	r3, r2, r3
 8004e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	705a      	strb	r2, [r3, #1]
 8004e3a:	e00d      	b.n	8004e58 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e3c:	1cfb      	adds	r3, r7, #3
 8004e3e:	781a      	ldrb	r2, [r3, #0]
 8004e40:	0013      	movs	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	189b      	adds	r3, r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	3369      	adds	r3, #105	; 0x69
 8004e4a:	33ff      	adds	r3, #255	; 0xff
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	18d3      	adds	r3, r2, r3
 8004e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e5e:	1cfb      	adds	r3, r7, #3
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2207      	movs	r2, #7
 8004e64:	4013      	ands	r3, r2
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	23aa      	movs	r3, #170	; 0xaa
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	5cd3      	ldrb	r3, [r2, r3]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_PCD_EP_SetStall+0x8c>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e011      	b.n	8004ea0 <HAL_PCD_EP_SetStall+0xb0>
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	23aa      	movs	r3, #170	; 0xaa
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	2101      	movs	r1, #1
 8004e84:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	0011      	movs	r1, r2
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f005 ffc2 	bl	800ae18 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	23aa      	movs	r3, #170	; 0xaa
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b004      	add	sp, #16
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	000a      	movs	r2, r1
 8004eb2:	1cfb      	adds	r3, r7, #3
 8004eb4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004eb6:	1cfb      	adds	r3, r7, #3
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	220f      	movs	r2, #15
 8004ebc:	401a      	ands	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d901      	bls.n	8004eca <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e048      	b.n	8004f5c <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004eca:	1cfb      	adds	r3, r7, #3
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	b25b      	sxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	da0f      	bge.n	8004ef4 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ed4:	1cfb      	adds	r3, r7, #3
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2207      	movs	r2, #7
 8004eda:	4013      	ands	r3, r2
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	0013      	movs	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	189b      	adds	r3, r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	18d3      	adds	r3, r2, r3
 8004eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	705a      	strb	r2, [r3, #1]
 8004ef2:	e00f      	b.n	8004f14 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ef4:	1cfb      	adds	r3, r7, #3
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2207      	movs	r2, #7
 8004efa:	401a      	ands	r2, r3
 8004efc:	0013      	movs	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	189b      	adds	r3, r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	3369      	adds	r3, #105	; 0x69
 8004f06:	33ff      	adds	r3, #255	; 0xff
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	18d3      	adds	r3, r2, r3
 8004f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f1a:	1cfb      	adds	r3, r7, #3
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2207      	movs	r2, #7
 8004f20:	4013      	ands	r3, r2
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	23aa      	movs	r3, #170	; 0xaa
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	5cd3      	ldrb	r3, [r2, r3]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_PCD_EP_ClrStall+0x90>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e011      	b.n	8004f5c <HAL_PCD_EP_ClrStall+0xb4>
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	23aa      	movs	r3, #170	; 0xaa
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	2101      	movs	r1, #1
 8004f40:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	0011      	movs	r1, r2
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f005 ffb4 	bl	800aeb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	23aa      	movs	r3, #170	; 0xaa
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	2100      	movs	r1, #0
 8004f58:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b004      	add	sp, #16
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004f64:	b5b0      	push	{r4, r5, r7, lr}
 8004f66:	b096      	sub	sp, #88	; 0x58
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f6c:	f000 fbd8 	bl	8005720 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	2056      	movs	r0, #86	; 0x56
 8004f76:	183b      	adds	r3, r7, r0
 8004f78:	2144      	movs	r1, #68	; 0x44
 8004f7a:	5a52      	ldrh	r2, [r2, r1]
 8004f7c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004f7e:	183b      	adds	r3, r7, r0
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	2455      	movs	r4, #85	; 0x55
 8004f86:	193b      	adds	r3, r7, r4
 8004f88:	210f      	movs	r1, #15
 8004f8a:	400a      	ands	r2, r1
 8004f8c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d000      	beq.n	8004f98 <PCD_EP_ISR_Handler+0x34>
 8004f96:	e179      	b.n	800528c <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f98:	183b      	adds	r3, r7, r0
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d154      	bne.n	800504c <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	200e      	movs	r0, #14
 8004fac:	183b      	adds	r3, r7, r0
 8004fae:	49af      	ldr	r1, [pc, #700]	; (800526c <PCD_EP_ISR_Handler+0x308>)
 8004fb0:	400a      	ands	r2, r1
 8004fb2:	801a      	strh	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	183a      	adds	r2, r7, r0
 8004fba:	8812      	ldrh	r2, [r2, #0]
 8004fbc:	49ac      	ldr	r1, [pc, #688]	; (8005270 <PCD_EP_ISR_Handler+0x30c>)
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	b292      	uxth	r2, r2
 8004fc2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3328      	adds	r3, #40	; 0x28
 8004fc8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2250      	movs	r2, #80	; 0x50
 8004fd0:	5a9b      	ldrh	r3, [r3, r2]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	18d2      	adds	r2, r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	18d3      	adds	r3, r2, r3
 8004fe4:	4aa3      	ldr	r2, [pc, #652]	; (8005274 <PCD_EP_ISR_Handler+0x310>)
 8004fe6:	4694      	mov	ip, r2
 8004fe8:	4463      	add	r3, ip
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	059b      	lsls	r3, r3, #22
 8004fee:	0d9a      	lsrs	r2, r3, #22
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff6:	695a      	ldr	r2, [r3, #20]
 8004ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	18d2      	adds	r2, r2, r3
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005000:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2100      	movs	r1, #0
 8005006:	0018      	movs	r0, r3
 8005008:	f008 f888 	bl	800d11c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2224      	movs	r2, #36	; 0x24
 8005010:	5c9b      	ldrb	r3, [r3, r2]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <PCD_EP_ISR_Handler+0xb8>
 8005018:	f000 fb82 	bl	8005720 <PCD_EP_ISR_Handler+0x7bc>
 800501c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <PCD_EP_ISR_Handler+0xc4>
 8005024:	f000 fb7c 	bl	8005720 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2224      	movs	r2, #36	; 0x24
 800502c:	5c9b      	ldrb	r3, [r3, r2]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2280      	movs	r2, #128	; 0x80
 8005032:	4252      	negs	r2, r2
 8005034:	4313      	orrs	r3, r2
 8005036:	b2da      	uxtb	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	b291      	uxth	r1, r2
 800503e:	224c      	movs	r2, #76	; 0x4c
 8005040:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2224      	movs	r2, #36	; 0x24
 8005046:	2100      	movs	r1, #0
 8005048:	5499      	strb	r1, [r3, r2]
 800504a:	e369      	b.n	8005720 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3369      	adds	r3, #105	; 0x69
 8005050:	33ff      	adds	r3, #255	; 0xff
 8005052:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	2152      	movs	r1, #82	; 0x52
 800505a:	187b      	adds	r3, r7, r1
 800505c:	8812      	ldrh	r2, [r2, #0]
 800505e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005060:	187b      	adds	r3, r7, r1
 8005062:	881a      	ldrh	r2, [r3, #0]
 8005064:	2380      	movs	r3, #128	; 0x80
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	4013      	ands	r3, r2
 800506a:	d037      	beq.n	80050dc <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2250      	movs	r2, #80	; 0x50
 8005072:	5a9b      	ldrh	r3, [r3, r2]
 8005074:	b29b      	uxth	r3, r3
 8005076:	001a      	movs	r2, r3
 8005078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	18d2      	adds	r2, r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	18d3      	adds	r3, r2, r3
 8005086:	4a7c      	ldr	r2, [pc, #496]	; (8005278 <PCD_EP_ISR_Handler+0x314>)
 8005088:	4694      	mov	ip, r2
 800508a:	4463      	add	r3, ip
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	059b      	lsls	r3, r3, #22
 8005090:	0d9a      	lsrs	r2, r3, #22
 8005092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005094:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	22ac      	movs	r2, #172	; 0xac
 800509e:	0092      	lsls	r2, r2, #2
 80050a0:	1899      	adds	r1, r3, r2
 80050a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80050a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f006 f832 	bl	800b114 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	2010      	movs	r0, #16
 80050ba:	183b      	adds	r3, r7, r0
 80050bc:	496f      	ldr	r1, [pc, #444]	; (800527c <PCD_EP_ISR_Handler+0x318>)
 80050be:	400a      	ands	r2, r1
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	183a      	adds	r2, r7, r0
 80050c8:	8812      	ldrh	r2, [r2, #0]
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	430a      	orrs	r2, r1
 80050ce:	b292      	uxth	r2, r2
 80050d0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f007 ffeb 	bl	800d0b0 <HAL_PCD_SetupStageCallback>
 80050da:	e321      	b.n	8005720 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050dc:	2352      	movs	r3, #82	; 0x52
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	2200      	movs	r2, #0
 80050e2:	5e9b      	ldrsh	r3, [r3, r2]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	db00      	blt.n	80050ea <PCD_EP_ISR_Handler+0x186>
 80050e8:	e31a      	b.n	8005720 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	201e      	movs	r0, #30
 80050f4:	183b      	adds	r3, r7, r0
 80050f6:	4961      	ldr	r1, [pc, #388]	; (800527c <PCD_EP_ISR_Handler+0x318>)
 80050f8:	400a      	ands	r2, r1
 80050fa:	801a      	strh	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	183a      	adds	r2, r7, r0
 8005102:	8812      	ldrh	r2, [r2, #0]
 8005104:	2180      	movs	r1, #128	; 0x80
 8005106:	430a      	orrs	r2, r1
 8005108:	b292      	uxth	r2, r2
 800510a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2250      	movs	r2, #80	; 0x50
 8005112:	5a9b      	ldrh	r3, [r3, r2]
 8005114:	b29b      	uxth	r3, r3
 8005116:	001a      	movs	r2, r3
 8005118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	18d2      	adds	r2, r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	18d3      	adds	r3, r2, r3
 8005126:	4a54      	ldr	r2, [pc, #336]	; (8005278 <PCD_EP_ISR_Handler+0x314>)
 8005128:	4694      	mov	ip, r2
 800512a:	4463      	add	r3, ip
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	059b      	lsls	r3, r3, #22
 8005130:	0d9a      	lsrs	r2, r3, #22
 8005132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005134:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01a      	beq.n	8005174 <PCD_EP_ISR_Handler+0x210>
 800513e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514c:	6959      	ldr	r1, [r3, #20]
 800514e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005150:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005154:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005156:	b29b      	uxth	r3, r3
 8005158:	f005 ffdc 	bl	800b114 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800515c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	18d2      	adds	r2, r2, r3
 8005166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005168:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2100      	movs	r1, #0
 800516e:	0018      	movs	r0, r3
 8005170:	f007 ffb3 	bl	800d0da <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	001a      	movs	r2, r3
 800517e:	2380      	movs	r3, #128	; 0x80
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	4013      	ands	r3, r2
 8005184:	d000      	beq.n	8005188 <PCD_EP_ISR_Handler+0x224>
 8005186:	e2cb      	b.n	8005720 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2250      	movs	r2, #80	; 0x50
 8005194:	5a9b      	ldrh	r3, [r3, r2]
 8005196:	b29b      	uxth	r3, r3
 8005198:	001a      	movs	r2, r3
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	189b      	adds	r3, r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	4a35      	ldr	r2, [pc, #212]	; (8005278 <PCD_EP_ISR_Handler+0x314>)
 80051a4:	4694      	mov	ip, r2
 80051a6:	4463      	add	r3, ip
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d110      	bne.n	80051d4 <PCD_EP_ISR_Handler+0x270>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	4a31      	ldr	r2, [pc, #196]	; (8005280 <PCD_EP_ISR_Handler+0x31c>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	b29a      	uxth	r2, r3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	801a      	strh	r2, [r3, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	4a29      	ldr	r2, [pc, #164]	; (8005270 <PCD_EP_ISR_Handler+0x30c>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	801a      	strh	r2, [r3, #0]
 80051d2:	e02b      	b.n	800522c <PCD_EP_ISR_Handler+0x2c8>
 80051d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b3e      	cmp	r3, #62	; 0x3e
 80051da:	d812      	bhi.n	8005202 <PCD_EP_ISR_Handler+0x29e>
 80051dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	085b      	lsrs	r3, r3, #1
 80051e2:	647b      	str	r3, [r7, #68]	; 0x44
 80051e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2201      	movs	r2, #1
 80051ea:	4013      	ands	r3, r2
 80051ec:	d002      	beq.n	80051f4 <PCD_EP_ISR_Handler+0x290>
 80051ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f0:	3301      	adds	r3, #1
 80051f2:	647b      	str	r3, [r7, #68]	; 0x44
 80051f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	029b      	lsls	r3, r3, #10
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	801a      	strh	r2, [r3, #0]
 8005200:	e014      	b.n	800522c <PCD_EP_ISR_Handler+0x2c8>
 8005202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	647b      	str	r3, [r7, #68]	; 0x44
 800520a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	221f      	movs	r2, #31
 8005210:	4013      	ands	r3, r2
 8005212:	d102      	bne.n	800521a <PCD_EP_ISR_Handler+0x2b6>
 8005214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005216:	3b01      	subs	r3, #1
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
 800521a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800521c:	b29b      	uxth	r3, r3
 800521e:	029b      	lsls	r3, r3, #10
 8005220:	b29b      	uxth	r3, r3
 8005222:	4a13      	ldr	r2, [pc, #76]	; (8005270 <PCD_EP_ISR_Handler+0x30c>)
 8005224:	4313      	orrs	r3, r2
 8005226:	b29a      	uxth	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29a      	uxth	r2, r3
 8005234:	2012      	movs	r0, #18
 8005236:	183b      	adds	r3, r7, r0
 8005238:	4912      	ldr	r1, [pc, #72]	; (8005284 <PCD_EP_ISR_Handler+0x320>)
 800523a:	400a      	ands	r2, r1
 800523c:	801a      	strh	r2, [r3, #0]
 800523e:	183b      	adds	r3, r7, r0
 8005240:	183a      	adds	r2, r7, r0
 8005242:	8812      	ldrh	r2, [r2, #0]
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	0149      	lsls	r1, r1, #5
 8005248:	404a      	eors	r2, r1
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	183b      	adds	r3, r7, r0
 800524e:	183a      	adds	r2, r7, r0
 8005250:	8812      	ldrh	r2, [r2, #0]
 8005252:	2180      	movs	r1, #128	; 0x80
 8005254:	0189      	lsls	r1, r1, #6
 8005256:	404a      	eors	r2, r1
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	183a      	adds	r2, r7, r0
 8005260:	8812      	ldrh	r2, [r2, #0]
 8005262:	4909      	ldr	r1, [pc, #36]	; (8005288 <PCD_EP_ISR_Handler+0x324>)
 8005264:	430a      	orrs	r2, r1
 8005266:	b292      	uxth	r2, r2
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	e259      	b.n	8005720 <PCD_EP_ISR_Handler+0x7bc>
 800526c:	ffff8f0f 	.word	0xffff8f0f
 8005270:	ffff8000 	.word	0xffff8000
 8005274:	00000402 	.word	0x00000402
 8005278:	00000406 	.word	0x00000406
 800527c:	00000f8f 	.word	0x00000f8f
 8005280:	ffff83ff 	.word	0xffff83ff
 8005284:	ffffbf8f 	.word	0xffffbf8f
 8005288:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	001a      	movs	r2, r3
 8005292:	2055      	movs	r0, #85	; 0x55
 8005294:	183b      	adds	r3, r7, r0
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	18d2      	adds	r2, r2, r3
 800529c:	2152      	movs	r1, #82	; 0x52
 800529e:	187b      	adds	r3, r7, r1
 80052a0:	8812      	ldrh	r2, [r2, #0]
 80052a2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80052a4:	187b      	adds	r3, r7, r1
 80052a6:	2200      	movs	r2, #0
 80052a8:	5e9b      	ldrsh	r3, [r3, r2]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	db00      	blt.n	80052b0 <PCD_EP_ISR_Handler+0x34c>
 80052ae:	e0fa      	b.n	80054a6 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	001a      	movs	r2, r3
 80052b6:	183b      	adds	r3, r7, r0
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	18d3      	adds	r3, r2, r3
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	2450      	movs	r4, #80	; 0x50
 80052c4:	193b      	adds	r3, r7, r4
 80052c6:	49cf      	ldr	r1, [pc, #828]	; (8005604 <PCD_EP_ISR_Handler+0x6a0>)
 80052c8:	400a      	ands	r2, r1
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	001a      	movs	r2, r3
 80052d2:	183b      	adds	r3, r7, r0
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	18d3      	adds	r3, r2, r3
 80052da:	193a      	adds	r2, r7, r4
 80052dc:	8812      	ldrh	r2, [r2, #0]
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	430a      	orrs	r2, r1
 80052e2:	b292      	uxth	r2, r2
 80052e4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80052e6:	183b      	adds	r3, r7, r0
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	0013      	movs	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	189b      	adds	r3, r3, r2
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	3369      	adds	r3, #105	; 0x69
 80052f4:	33ff      	adds	r3, #255	; 0xff
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	18d3      	adds	r3, r2, r3
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80052fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fe:	7b1b      	ldrb	r3, [r3, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d125      	bne.n	8005350 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2250      	movs	r2, #80	; 0x50
 800530a:	5a9b      	ldrh	r3, [r3, r2]
 800530c:	b29b      	uxth	r3, r3
 800530e:	001a      	movs	r2, r3
 8005310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	18d2      	adds	r2, r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	18d3      	adds	r3, r2, r3
 800531e:	4aba      	ldr	r2, [pc, #744]	; (8005608 <PCD_EP_ISR_Handler+0x6a4>)
 8005320:	4694      	mov	ip, r2
 8005322:	4463      	add	r3, ip
 8005324:	881a      	ldrh	r2, [r3, #0]
 8005326:	2448      	movs	r4, #72	; 0x48
 8005328:	193b      	adds	r3, r7, r4
 800532a:	0592      	lsls	r2, r2, #22
 800532c:	0d92      	lsrs	r2, r2, #22
 800532e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8005330:	193b      	adds	r3, r7, r4
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d100      	bne.n	800533a <PCD_EP_ISR_Handler+0x3d6>
 8005338:	e08d      	b.n	8005456 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005340:	6959      	ldr	r1, [r3, #20]
 8005342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005344:	88da      	ldrh	r2, [r3, #6]
 8005346:	193b      	adds	r3, r7, r4
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	f005 fee3 	bl	800b114 <USB_ReadPMA>
 800534e:	e082      	b.n	8005456 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005352:	78db      	ldrb	r3, [r3, #3]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d10c      	bne.n	8005372 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005358:	2348      	movs	r3, #72	; 0x48
 800535a:	18fc      	adds	r4, r7, r3
 800535c:	2352      	movs	r3, #82	; 0x52
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	881a      	ldrh	r2, [r3, #0]
 8005362:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	0018      	movs	r0, r3
 8005368:	f000 f9ee 	bl	8005748 <HAL_PCD_EP_DB_Receive>
 800536c:	0003      	movs	r3, r0
 800536e:	8023      	strh	r3, [r4, #0]
 8005370:	e071      	b.n	8005456 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	001a      	movs	r2, r3
 8005378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	18d3      	adds	r3, r2, r3
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29a      	uxth	r2, r3
 8005384:	204a      	movs	r0, #74	; 0x4a
 8005386:	183b      	adds	r3, r7, r0
 8005388:	49a0      	ldr	r1, [pc, #640]	; (800560c <PCD_EP_ISR_Handler+0x6a8>)
 800538a:	400a      	ands	r2, r1
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	001a      	movs	r2, r3
 8005394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	18d3      	adds	r3, r2, r3
 800539c:	183a      	adds	r2, r7, r0
 800539e:	8812      	ldrh	r2, [r2, #0]
 80053a0:	499b      	ldr	r1, [pc, #620]	; (8005610 <PCD_EP_ISR_Handler+0x6ac>)
 80053a2:	430a      	orrs	r2, r1
 80053a4:	b292      	uxth	r2, r2
 80053a6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	001a      	movs	r2, r3
 80053ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	18d3      	adds	r3, r2, r3
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	001a      	movs	r2, r3
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	01db      	lsls	r3, r3, #7
 80053c0:	4013      	ands	r3, r2
 80053c2:	d024      	beq.n	800540e <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2250      	movs	r2, #80	; 0x50
 80053ca:	5a9b      	ldrh	r3, [r3, r2]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	001a      	movs	r2, r3
 80053d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	18d2      	adds	r2, r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	18d3      	adds	r3, r2, r3
 80053de:	4a8d      	ldr	r2, [pc, #564]	; (8005614 <PCD_EP_ISR_Handler+0x6b0>)
 80053e0:	4694      	mov	ip, r2
 80053e2:	4463      	add	r3, ip
 80053e4:	881a      	ldrh	r2, [r3, #0]
 80053e6:	2448      	movs	r4, #72	; 0x48
 80053e8:	193b      	adds	r3, r7, r4
 80053ea:	0592      	lsls	r2, r2, #22
 80053ec:	0d92      	lsrs	r2, r2, #22
 80053ee:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80053f0:	193b      	adds	r3, r7, r4
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d02e      	beq.n	8005456 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fe:	6959      	ldr	r1, [r3, #20]
 8005400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005402:	891a      	ldrh	r2, [r3, #8]
 8005404:	193b      	adds	r3, r7, r4
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	f005 fe84 	bl	800b114 <USB_ReadPMA>
 800540c:	e023      	b.n	8005456 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2250      	movs	r2, #80	; 0x50
 8005414:	5a9b      	ldrh	r3, [r3, r2]
 8005416:	b29b      	uxth	r3, r3
 8005418:	001a      	movs	r2, r3
 800541a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	18d2      	adds	r2, r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	18d3      	adds	r3, r2, r3
 8005428:	4a77      	ldr	r2, [pc, #476]	; (8005608 <PCD_EP_ISR_Handler+0x6a4>)
 800542a:	4694      	mov	ip, r2
 800542c:	4463      	add	r3, ip
 800542e:	881a      	ldrh	r2, [r3, #0]
 8005430:	2448      	movs	r4, #72	; 0x48
 8005432:	193b      	adds	r3, r7, r4
 8005434:	0592      	lsls	r2, r2, #22
 8005436:	0d92      	lsrs	r2, r2, #22
 8005438:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800543a:	193b      	adds	r3, r7, r4
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005448:	6959      	ldr	r1, [r3, #20]
 800544a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544c:	895a      	ldrh	r2, [r3, #10]
 800544e:	193b      	adds	r3, r7, r4
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	f005 fe5f 	bl	800b114 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	2148      	movs	r1, #72	; 0x48
 800545c:	187b      	adds	r3, r7, r1
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	18d2      	adds	r2, r2, r3
 8005462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005464:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005468:	695a      	ldr	r2, [r3, #20]
 800546a:	187b      	adds	r3, r7, r1
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	18d2      	adds	r2, r2, r3
 8005470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005472:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <PCD_EP_ISR_Handler+0x524>
 800547c:	187b      	adds	r3, r7, r1
 800547e:	881a      	ldrh	r2, [r3, #0]
 8005480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	429a      	cmp	r2, r3
 8005486:	d207      	bcs.n	8005498 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	0011      	movs	r1, r2
 8005490:	0018      	movs	r0, r3
 8005492:	f007 fe22 	bl	800d0da <HAL_PCD_DataOutStageCallback>
 8005496:	e006      	b.n	80054a6 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800549e:	0011      	movs	r1, r2
 80054a0:	0018      	movs	r0, r3
 80054a2:	f004 fbff 	bl	8009ca4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80054a6:	2452      	movs	r4, #82	; 0x52
 80054a8:	193b      	adds	r3, r7, r4
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	2280      	movs	r2, #128	; 0x80
 80054ae:	4013      	ands	r3, r2
 80054b0:	d100      	bne.n	80054b4 <PCD_EP_ISR_Handler+0x550>
 80054b2:	e135      	b.n	8005720 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 80054b4:	2055      	movs	r0, #85	; 0x55
 80054b6:	183b      	adds	r3, r7, r0
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	0013      	movs	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	189b      	adds	r3, r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	18d3      	adds	r3, r2, r3
 80054c8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	001a      	movs	r2, r3
 80054d0:	183b      	adds	r3, r7, r0
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	18d3      	adds	r3, r2, r3
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29a      	uxth	r2, r3
 80054dc:	2542      	movs	r5, #66	; 0x42
 80054de:	197b      	adds	r3, r7, r5
 80054e0:	494d      	ldr	r1, [pc, #308]	; (8005618 <PCD_EP_ISR_Handler+0x6b4>)
 80054e2:	400a      	ands	r2, r1
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	001a      	movs	r2, r3
 80054ec:	183b      	adds	r3, r7, r0
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	18d3      	adds	r3, r2, r3
 80054f4:	197a      	adds	r2, r7, r5
 80054f6:	8812      	ldrh	r2, [r2, #0]
 80054f8:	4948      	ldr	r1, [pc, #288]	; (800561c <PCD_EP_ISR_Handler+0x6b8>)
 80054fa:	430a      	orrs	r2, r1
 80054fc:	b292      	uxth	r2, r2
 80054fe:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8005500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005502:	78db      	ldrb	r3, [r3, #3]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d100      	bne.n	800550a <PCD_EP_ISR_Handler+0x5a6>
 8005508:	e0ad      	b.n	8005666 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 800550a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550c:	2200      	movs	r2, #0
 800550e:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005510:	193b      	adds	r3, r7, r4
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	2240      	movs	r2, #64	; 0x40
 8005516:	4013      	ands	r3, r2
 8005518:	d046      	beq.n	80055a8 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800551a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551c:	785b      	ldrb	r3, [r3, #1]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d125      	bne.n	800556e <PCD_EP_ISR_Handler+0x60a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2250      	movs	r2, #80	; 0x50
 800552e:	5a9b      	ldrh	r3, [r3, r2]
 8005530:	b29b      	uxth	r3, r3
 8005532:	001a      	movs	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	189b      	adds	r3, r3, r2
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	00da      	lsls	r2, r3, #3
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	18d3      	adds	r3, r2, r3
 8005544:	4a33      	ldr	r2, [pc, #204]	; (8005614 <PCD_EP_ISR_Handler+0x6b0>)
 8005546:	4694      	mov	ip, r2
 8005548:	4463      	add	r3, ip
 800554a:	623b      	str	r3, [r7, #32]
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	4a33      	ldr	r2, [pc, #204]	; (8005620 <PCD_EP_ISR_Handler+0x6bc>)
 8005554:	4013      	ands	r3, r2
 8005556:	b29a      	uxth	r2, r3
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	4a2e      	ldr	r2, [pc, #184]	; (800561c <PCD_EP_ISR_Handler+0x6b8>)
 8005564:	4313      	orrs	r3, r2
 8005566:	b29a      	uxth	r2, r3
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e073      	b.n	8005656 <PCD_EP_ISR_Handler+0x6f2>
 800556e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d16f      	bne.n	8005656 <PCD_EP_ISR_Handler+0x6f2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2250      	movs	r2, #80	; 0x50
 8005582:	5a9b      	ldrh	r3, [r3, r2]
 8005584:	b29b      	uxth	r3, r3
 8005586:	001a      	movs	r2, r3
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	189b      	adds	r3, r3, r2
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	00da      	lsls	r2, r3, #3
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	18d3      	adds	r3, r2, r3
 8005598:	4a1e      	ldr	r2, [pc, #120]	; (8005614 <PCD_EP_ISR_Handler+0x6b0>)
 800559a:	4694      	mov	ip, r2
 800559c:	4463      	add	r3, ip
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	2200      	movs	r2, #0
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	e056      	b.n	8005656 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d136      	bne.n	8005624 <PCD_EP_ISR_Handler+0x6c0>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2250      	movs	r2, #80	; 0x50
 80055c2:	5a9b      	ldrh	r3, [r3, r2]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	001a      	movs	r2, r3
 80055c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ca:	189b      	adds	r3, r3, r2
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
 80055ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	00da      	lsls	r2, r3, #3
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	18d3      	adds	r3, r2, r3
 80055d8:	4a0b      	ldr	r2, [pc, #44]	; (8005608 <PCD_EP_ISR_Handler+0x6a4>)
 80055da:	4694      	mov	ip, r2
 80055dc:	4463      	add	r3, ip
 80055de:	633b      	str	r3, [r7, #48]	; 0x30
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	4a0e      	ldr	r2, [pc, #56]	; (8005620 <PCD_EP_ISR_Handler+0x6bc>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	4a09      	ldr	r2, [pc, #36]	; (800561c <PCD_EP_ISR_Handler+0x6b8>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	801a      	strh	r2, [r3, #0]
 8005600:	e029      	b.n	8005656 <PCD_EP_ISR_Handler+0x6f2>
 8005602:	46c0      	nop			; (mov r8, r8)
 8005604:	00000f8f 	.word	0x00000f8f
 8005608:	00000406 	.word	0x00000406
 800560c:	ffff8f8f 	.word	0xffff8f8f
 8005610:	ffff80c0 	.word	0xffff80c0
 8005614:	00000402 	.word	0x00000402
 8005618:	ffff8f0f 	.word	0xffff8f0f
 800561c:	ffff8000 	.word	0xffff8000
 8005620:	ffff83ff 	.word	0xffff83ff
 8005624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d114      	bne.n	8005656 <PCD_EP_ISR_Handler+0x6f2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2250      	movs	r2, #80	; 0x50
 8005632:	5a9b      	ldrh	r3, [r3, r2]
 8005634:	b29b      	uxth	r3, r3
 8005636:	001a      	movs	r2, r3
 8005638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563a:	189b      	adds	r3, r3, r2
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800563e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	00da      	lsls	r2, r3, #3
 8005644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005646:	18d3      	adds	r3, r2, r3
 8005648:	4a3d      	ldr	r2, [pc, #244]	; (8005740 <PCD_EP_ISR_Handler+0x7dc>)
 800564a:	4694      	mov	ip, r2
 800564c:	4463      	add	r3, ip
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	2200      	movs	r2, #0
 8005654:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005658:	781a      	ldrb	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	0011      	movs	r1, r2
 800565e:	0018      	movs	r0, r3
 8005660:	f007 fd5c 	bl	800d11c <HAL_PCD_DataInStageCallback>
 8005664:	e05c      	b.n	8005720 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8005666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005668:	78db      	ldrb	r3, [r3, #3]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d150      	bne.n	8005710 <PCD_EP_ISR_Handler+0x7ac>
 800566e:	2352      	movs	r3, #82	; 0x52
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	881a      	ldrh	r2, [r3, #0]
 8005674:	2380      	movs	r3, #128	; 0x80
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	4013      	ands	r3, r2
 800567a:	d149      	bne.n	8005710 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2250      	movs	r2, #80	; 0x50
 8005682:	5a9b      	ldrh	r3, [r3, r2]
 8005684:	b29b      	uxth	r3, r3
 8005686:	001a      	movs	r2, r3
 8005688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	18d2      	adds	r2, r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	18d3      	adds	r3, r2, r3
 8005696:	4a2b      	ldr	r2, [pc, #172]	; (8005744 <PCD_EP_ISR_Handler+0x7e0>)
 8005698:	4694      	mov	ip, r2
 800569a:	4463      	add	r3, ip
 800569c:	881a      	ldrh	r2, [r3, #0]
 800569e:	2140      	movs	r1, #64	; 0x40
 80056a0:	187b      	adds	r3, r7, r1
 80056a2:	0592      	lsls	r2, r2, #22
 80056a4:	0d92      	lsrs	r2, r2, #22
 80056a6:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 80056a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056aa:	699a      	ldr	r2, [r3, #24]
 80056ac:	187b      	adds	r3, r7, r1
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d907      	bls.n	80056c4 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 80056b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b6:	699a      	ldr	r2, [r3, #24]
 80056b8:	187b      	adds	r3, r7, r1
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	1ad2      	subs	r2, r2, r3
 80056be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c0:	619a      	str	r2, [r3, #24]
 80056c2:	e002      	b.n	80056ca <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 80056c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c6:	2200      	movs	r2, #0
 80056c8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80056ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d107      	bne.n	80056e2 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0011      	movs	r1, r2
 80056da:	0018      	movs	r0, r3
 80056dc:	f007 fd1e 	bl	800d11c <HAL_PCD_DataInStageCallback>
 80056e0:	e01e      	b.n	8005720 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80056e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	2140      	movs	r1, #64	; 0x40
 80056e8:	187b      	adds	r3, r7, r1
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	18d2      	adds	r2, r2, r3
 80056ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80056f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f4:	69da      	ldr	r2, [r3, #28]
 80056f6:	187b      	adds	r3, r7, r1
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	18d2      	adds	r2, r2, r3
 80056fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fe:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005706:	0011      	movs	r1, r2
 8005708:	0018      	movs	r0, r3
 800570a:	f004 facb 	bl	8009ca4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800570e:	e007      	b.n	8005720 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005710:	2352      	movs	r3, #82	; 0x52
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	881a      	ldrh	r2, [r3, #0]
 8005716:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	0018      	movs	r0, r3
 800571c:	f000 f930 	bl	8005980 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2244      	movs	r2, #68	; 0x44
 8005726:	5a9b      	ldrh	r3, [r3, r2]
 8005728:	b29b      	uxth	r3, r3
 800572a:	b21b      	sxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	da01      	bge.n	8005734 <PCD_EP_ISR_Handler+0x7d0>
 8005730:	f7ff fc1e 	bl	8004f70 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	0018      	movs	r0, r3
 8005738:	46bd      	mov	sp, r7
 800573a:	b016      	add	sp, #88	; 0x58
 800573c:	bdb0      	pop	{r4, r5, r7, pc}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	00000406 	.word	0x00000406
 8005744:	00000402 	.word	0x00000402

08005748 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005748:	b590      	push	{r4, r7, lr}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	1dbb      	adds	r3, r7, #6
 8005754:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005756:	1dbb      	adds	r3, r7, #6
 8005758:	881a      	ldrh	r2, [r3, #0]
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	01db      	lsls	r3, r3, #7
 800575e:	4013      	ands	r3, r2
 8005760:	d100      	bne.n	8005764 <HAL_PCD_EP_DB_Receive+0x1c>
 8005762:	e07d      	b.n	8005860 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2250      	movs	r2, #80	; 0x50
 800576a:	5a9b      	ldrh	r3, [r3, r2]
 800576c:	b29b      	uxth	r3, r3
 800576e:	001a      	movs	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	18d2      	adds	r2, r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	18d3      	adds	r3, r2, r3
 800577e:	4a7a      	ldr	r2, [pc, #488]	; (8005968 <HAL_PCD_EP_DB_Receive+0x220>)
 8005780:	4694      	mov	ip, r2
 8005782:	4463      	add	r3, ip
 8005784:	881a      	ldrh	r2, [r3, #0]
 8005786:	211a      	movs	r1, #26
 8005788:	187b      	adds	r3, r7, r1
 800578a:	0592      	lsls	r2, r2, #22
 800578c:	0d92      	lsrs	r2, r2, #22
 800578e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	187b      	adds	r3, r7, r1
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d307      	bcc.n	80057ac <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	699a      	ldr	r2, [r3, #24]
 80057a0:	187b      	adds	r3, r7, r1
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	1ad2      	subs	r2, r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	619a      	str	r2, [r3, #24]
 80057aa:	e002      	b.n	80057b2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d121      	bne.n	80057fe <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	001a      	movs	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	18d3      	adds	r3, r2, r3
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	2018      	movs	r0, #24
 80057ce:	183b      	adds	r3, r7, r0
 80057d0:	4966      	ldr	r1, [pc, #408]	; (800596c <HAL_PCD_EP_DB_Receive+0x224>)
 80057d2:	400a      	ands	r2, r1
 80057d4:	801a      	strh	r2, [r3, #0]
 80057d6:	183b      	adds	r3, r7, r0
 80057d8:	183a      	adds	r2, r7, r0
 80057da:	8812      	ldrh	r2, [r2, #0]
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	0189      	lsls	r1, r1, #6
 80057e0:	404a      	eors	r2, r1
 80057e2:	801a      	strh	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	001a      	movs	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	18d3      	adds	r3, r2, r3
 80057f2:	183a      	adds	r2, r7, r0
 80057f4:	8812      	ldrh	r2, [r2, #0]
 80057f6:	495e      	ldr	r1, [pc, #376]	; (8005970 <HAL_PCD_EP_DB_Receive+0x228>)
 80057f8:	430a      	orrs	r2, r1
 80057fa:	b292      	uxth	r2, r2
 80057fc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057fe:	1dbb      	adds	r3, r7, #6
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	2240      	movs	r2, #64	; 0x40
 8005804:	4013      	ands	r3, r2
 8005806:	d01a      	beq.n	800583e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	001a      	movs	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	18d3      	adds	r3, r2, r3
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29a      	uxth	r2, r3
 800581a:	2016      	movs	r0, #22
 800581c:	183b      	adds	r3, r7, r0
 800581e:	4955      	ldr	r1, [pc, #340]	; (8005974 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005820:	400a      	ands	r2, r1
 8005822:	801a      	strh	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	001a      	movs	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	18d3      	adds	r3, r2, r3
 8005832:	183a      	adds	r2, r7, r0
 8005834:	8812      	ldrh	r2, [r2, #0]
 8005836:	4950      	ldr	r1, [pc, #320]	; (8005978 <HAL_PCD_EP_DB_Receive+0x230>)
 8005838:	430a      	orrs	r2, r1
 800583a:	b292      	uxth	r2, r2
 800583c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800583e:	241a      	movs	r4, #26
 8005840:	193b      	adds	r3, r7, r4
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d100      	bne.n	800584a <HAL_PCD_EP_DB_Receive+0x102>
 8005848:	e086      	b.n	8005958 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	6959      	ldr	r1, [r3, #20]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	891a      	ldrh	r2, [r3, #8]
 8005856:	193b      	adds	r3, r7, r4
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	f005 fc5b 	bl	800b114 <USB_ReadPMA>
 800585e:	e07b      	b.n	8005958 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2250      	movs	r2, #80	; 0x50
 8005866:	5a9b      	ldrh	r3, [r3, r2]
 8005868:	b29b      	uxth	r3, r3
 800586a:	001a      	movs	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	18d2      	adds	r2, r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	18d3      	adds	r3, r2, r3
 800587a:	4a40      	ldr	r2, [pc, #256]	; (800597c <HAL_PCD_EP_DB_Receive+0x234>)
 800587c:	4694      	mov	ip, r2
 800587e:	4463      	add	r3, ip
 8005880:	881a      	ldrh	r2, [r3, #0]
 8005882:	211a      	movs	r1, #26
 8005884:	187b      	adds	r3, r7, r1
 8005886:	0592      	lsls	r2, r2, #22
 8005888:	0d92      	lsrs	r2, r2, #22
 800588a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	699a      	ldr	r2, [r3, #24]
 8005890:	187b      	adds	r3, r7, r1
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d307      	bcc.n	80058a8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	187b      	adds	r3, r7, r1
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	1ad2      	subs	r2, r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	619a      	str	r2, [r3, #24]
 80058a6:	e002      	b.n	80058ae <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2200      	movs	r2, #0
 80058ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d121      	bne.n	80058fa <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	001a      	movs	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	18d3      	adds	r3, r2, r3
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	201e      	movs	r0, #30
 80058ca:	183b      	adds	r3, r7, r0
 80058cc:	4927      	ldr	r1, [pc, #156]	; (800596c <HAL_PCD_EP_DB_Receive+0x224>)
 80058ce:	400a      	ands	r2, r1
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	183b      	adds	r3, r7, r0
 80058d4:	183a      	adds	r2, r7, r0
 80058d6:	8812      	ldrh	r2, [r2, #0]
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	0189      	lsls	r1, r1, #6
 80058dc:	404a      	eors	r2, r1
 80058de:	801a      	strh	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	001a      	movs	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	18d3      	adds	r3, r2, r3
 80058ee:	183a      	adds	r2, r7, r0
 80058f0:	8812      	ldrh	r2, [r2, #0]
 80058f2:	491f      	ldr	r1, [pc, #124]	; (8005970 <HAL_PCD_EP_DB_Receive+0x228>)
 80058f4:	430a      	orrs	r2, r1
 80058f6:	b292      	uxth	r2, r2
 80058f8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058fa:	1dbb      	adds	r3, r7, #6
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	2240      	movs	r2, #64	; 0x40
 8005900:	4013      	ands	r3, r2
 8005902:	d11a      	bne.n	800593a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	001a      	movs	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	18d3      	adds	r3, r2, r3
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29a      	uxth	r2, r3
 8005916:	201c      	movs	r0, #28
 8005918:	183b      	adds	r3, r7, r0
 800591a:	4916      	ldr	r1, [pc, #88]	; (8005974 <HAL_PCD_EP_DB_Receive+0x22c>)
 800591c:	400a      	ands	r2, r1
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	001a      	movs	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	18d3      	adds	r3, r2, r3
 800592e:	183a      	adds	r2, r7, r0
 8005930:	8812      	ldrh	r2, [r2, #0]
 8005932:	4911      	ldr	r1, [pc, #68]	; (8005978 <HAL_PCD_EP_DB_Receive+0x230>)
 8005934:	430a      	orrs	r2, r1
 8005936:	b292      	uxth	r2, r2
 8005938:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800593a:	241a      	movs	r4, #26
 800593c:	193b      	adds	r3, r7, r4
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d009      	beq.n	8005958 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	6959      	ldr	r1, [r3, #20]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	895a      	ldrh	r2, [r3, #10]
 8005950:	193b      	adds	r3, r7, r4
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	f005 fbde 	bl	800b114 <USB_ReadPMA>
    }
  }

  return count;
 8005958:	231a      	movs	r3, #26
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	881b      	ldrh	r3, [r3, #0]
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b009      	add	sp, #36	; 0x24
 8005964:	bd90      	pop	{r4, r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	00000402 	.word	0x00000402
 800596c:	ffffbf8f 	.word	0xffffbf8f
 8005970:	ffff8080 	.word	0xffff8080
 8005974:	ffff8f8f 	.word	0xffff8f8f
 8005978:	ffff80c0 	.word	0xffff80c0
 800597c:	00000406 	.word	0x00000406

08005980 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b0a2      	sub	sp, #136	; 0x88
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	1dbb      	adds	r3, r7, #6
 800598c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800598e:	1dbb      	adds	r3, r7, #6
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	2240      	movs	r2, #64	; 0x40
 8005994:	4013      	ands	r3, r2
 8005996:	d100      	bne.n	800599a <HAL_PCD_EP_DB_Transmit+0x1a>
 8005998:	e1c8      	b.n	8005d2c <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2250      	movs	r2, #80	; 0x50
 80059a0:	5a9b      	ldrh	r3, [r3, r2]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	001a      	movs	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	18d2      	adds	r2, r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	18d3      	adds	r3, r2, r3
 80059b4:	4ad7      	ldr	r2, [pc, #860]	; (8005d14 <HAL_PCD_EP_DB_Transmit+0x394>)
 80059b6:	4694      	mov	ip, r2
 80059b8:	4463      	add	r3, ip
 80059ba:	881a      	ldrh	r2, [r3, #0]
 80059bc:	214e      	movs	r1, #78	; 0x4e
 80059be:	187b      	adds	r3, r7, r1
 80059c0:	0592      	lsls	r2, r2, #22
 80059c2:	0d92      	lsrs	r2, r2, #22
 80059c4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	187b      	adds	r3, r7, r1
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d907      	bls.n	80059e2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	187b      	adds	r3, r7, r1
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	1ad2      	subs	r2, r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	619a      	str	r2, [r3, #24]
 80059e0:	e002      	b.n	80059e8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2200      	movs	r2, #0
 80059e6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d000      	beq.n	80059f2 <HAL_PCD_EP_DB_Transmit+0x72>
 80059f0:	e0b5      	b.n	8005b5e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d125      	bne.n	8005a46 <HAL_PCD_EP_DB_Transmit+0xc6>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2250      	movs	r2, #80	; 0x50
 8005a06:	5a9b      	ldrh	r3, [r3, r2]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	001a      	movs	r2, r3
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	189b      	adds	r3, r3, r2
 8005a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	00da      	lsls	r2, r3, #3
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	18d3      	adds	r3, r2, r3
 8005a1c:	4abd      	ldr	r2, [pc, #756]	; (8005d14 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005a1e:	4694      	mov	ip, r2
 8005a20:	4463      	add	r3, ip
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	4abb      	ldr	r2, [pc, #748]	; (8005d18 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	4ab8      	ldr	r2, [pc, #736]	; (8005d1c <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	e01b      	b.n	8005a7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d117      	bne.n	8005a7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	633b      	str	r3, [r7, #48]	; 0x30
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2250      	movs	r2, #80	; 0x50
 8005a5a:	5a9b      	ldrh	r3, [r3, r2]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	001a      	movs	r2, r3
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	189b      	adds	r3, r3, r2
 8005a64:	633b      	str	r3, [r7, #48]	; 0x30
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	00da      	lsls	r2, r3, #3
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	18d3      	adds	r3, r2, r3
 8005a70:	4aa8      	ldr	r2, [pc, #672]	; (8005d14 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005a72:	4694      	mov	ip, r2
 8005a74:	4463      	add	r3, ip
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	623b      	str	r3, [r7, #32]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d125      	bne.n	8005ad8 <HAL_PCD_EP_DB_Transmit+0x158>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2250      	movs	r2, #80	; 0x50
 8005a98:	5a9b      	ldrh	r3, [r3, r2]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	001a      	movs	r2, r3
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	189b      	adds	r3, r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	00da      	lsls	r2, r3, #3
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	18d3      	adds	r3, r2, r3
 8005aae:	4a9c      	ldr	r2, [pc, #624]	; (8005d20 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005ab0:	4694      	mov	ip, r2
 8005ab2:	4463      	add	r3, ip
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	4a96      	ldr	r2, [pc, #600]	; (8005d18 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005abe:	4013      	ands	r3, r2
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4a93      	ldr	r2, [pc, #588]	; (8005d1c <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	801a      	strh	r2, [r3, #0]
 8005ad6:	e018      	b.n	8005b0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d114      	bne.n	8005b0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2250      	movs	r2, #80	; 0x50
 8005ae6:	5a9b      	ldrh	r3, [r3, r2]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	001a      	movs	r2, r3
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	189b      	adds	r3, r3, r2
 8005af0:	623b      	str	r3, [r7, #32]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	00da      	lsls	r2, r3, #3
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	18d3      	adds	r3, r2, r3
 8005afc:	4a88      	ldr	r2, [pc, #544]	; (8005d20 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005afe:	4694      	mov	ip, r2
 8005b00:	4463      	add	r3, ip
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	2200      	movs	r2, #0
 8005b08:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	0011      	movs	r1, r2
 8005b12:	0018      	movs	r0, r3
 8005b14:	f007 fb02 	bl	800d11c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b18:	1dbb      	adds	r3, r7, #6
 8005b1a:	881a      	ldrh	r2, [r3, #0]
 8005b1c:	2380      	movs	r3, #128	; 0x80
 8005b1e:	01db      	lsls	r3, r3, #7
 8005b20:	4013      	ands	r3, r2
 8005b22:	d100      	bne.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005b24:	e2d4      	b.n	80060d0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	001a      	movs	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	18d3      	adds	r3, r2, r3
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	2012      	movs	r0, #18
 8005b3a:	183b      	adds	r3, r7, r0
 8005b3c:	4979      	ldr	r1, [pc, #484]	; (8005d24 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005b3e:	400a      	ands	r2, r1
 8005b40:	801a      	strh	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	001a      	movs	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	18d3      	adds	r3, r2, r3
 8005b50:	183a      	adds	r2, r7, r0
 8005b52:	8812      	ldrh	r2, [r2, #0]
 8005b54:	4974      	ldr	r1, [pc, #464]	; (8005d28 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005b56:	430a      	orrs	r2, r1
 8005b58:	b292      	uxth	r2, r2
 8005b5a:	801a      	strh	r2, [r3, #0]
 8005b5c:	e2b8      	b.n	80060d0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b5e:	1dbb      	adds	r3, r7, #6
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	01db      	lsls	r3, r3, #7
 8005b66:	4013      	ands	r3, r2
 8005b68:	d01a      	beq.n	8005ba0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	001a      	movs	r2, r3
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	18d3      	adds	r3, r2, r3
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	2044      	movs	r0, #68	; 0x44
 8005b7e:	183b      	adds	r3, r7, r0
 8005b80:	4968      	ldr	r1, [pc, #416]	; (8005d24 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005b82:	400a      	ands	r2, r1
 8005b84:	801a      	strh	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	001a      	movs	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	18d3      	adds	r3, r2, r3
 8005b94:	183a      	adds	r2, r7, r0
 8005b96:	8812      	ldrh	r2, [r2, #0]
 8005b98:	4963      	ldr	r1, [pc, #396]	; (8005d28 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	b292      	uxth	r2, r2
 8005b9e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2224      	movs	r2, #36	; 0x24
 8005ba4:	5c9b      	ldrb	r3, [r3, r2]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d000      	beq.n	8005bac <HAL_PCD_EP_DB_Transmit+0x22c>
 8005baa:	e291      	b.n	80060d0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	214e      	movs	r1, #78	; 0x4e
 8005bb2:	187b      	adds	r3, r7, r1
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	18d2      	adds	r2, r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	187b      	adds	r3, r7, r1
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	18d2      	adds	r2, r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	6a1a      	ldr	r2, [r3, #32]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d309      	bcc.n	8005bea <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	621a      	str	r2, [r3, #32]
 8005be8:	e016      	b.n	8005c18 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d108      	bne.n	8005c04 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8005bf2:	234e      	movs	r3, #78	; 0x4e
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2224      	movs	r2, #36	; 0x24
 8005bfe:	2100      	movs	r1, #0
 8005c00:	5499      	strb	r1, [r3, r2]
 8005c02:	e009      	b.n	8005c18 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2224      	movs	r2, #36	; 0x24
 8005c08:	2100      	movs	r1, #0
 8005c0a:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2200      	movs	r2, #0
 8005c16:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d150      	bne.n	8005cc2 <HAL_PCD_EP_DB_Transmit+0x342>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2250      	movs	r2, #80	; 0x50
 8005c2c:	5a9b      	ldrh	r3, [r3, r2]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	001a      	movs	r2, r3
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	189b      	adds	r3, r3, r2
 8005c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	00da      	lsls	r2, r3, #3
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	18d3      	adds	r3, r2, r3
 8005c42:	4a34      	ldr	r2, [pc, #208]	; (8005d14 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005c44:	4694      	mov	ip, r2
 8005c46:	4463      	add	r3, ip
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d110      	bne.n	8005c72 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8005c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	4a30      	ldr	r2, [pc, #192]	; (8005d18 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	4a2d      	ldr	r2, [pc, #180]	; (8005d1c <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e044      	b.n	8005cfc <HAL_PCD_EP_DB_Transmit+0x37c>
 8005c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c74:	2b3e      	cmp	r3, #62	; 0x3e
 8005c76:	d810      	bhi.n	8005c9a <HAL_PCD_EP_DB_Transmit+0x31a>
 8005c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c80:	2201      	movs	r2, #1
 8005c82:	4013      	ands	r3, r2
 8005c84:	d002      	beq.n	8005c8c <HAL_PCD_EP_DB_Transmit+0x30c>
 8005c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c88:	3301      	adds	r3, #1
 8005c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	029b      	lsls	r3, r3, #10
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c96:	801a      	strh	r2, [r3, #0]
 8005c98:	e030      	b.n	8005cfc <HAL_PCD_EP_DB_Transmit+0x37c>
 8005c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca2:	221f      	movs	r2, #31
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d102      	bne.n	8005cae <HAL_PCD_EP_DB_Transmit+0x32e>
 8005ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005caa:	3b01      	subs	r3, #1
 8005cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	029b      	lsls	r3, r3, #10
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4a19      	ldr	r2, [pc, #100]	; (8005d1c <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e01c      	b.n	8005cfc <HAL_PCD_EP_DB_Transmit+0x37c>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d118      	bne.n	8005cfc <HAL_PCD_EP_DB_Transmit+0x37c>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2250      	movs	r2, #80	; 0x50
 8005cd6:	5a9b      	ldrh	r3, [r3, r2]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	001a      	movs	r2, r3
 8005cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cde:	189b      	adds	r3, r3, r2
 8005ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	00da      	lsls	r2, r3, #3
 8005ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cea:	18d3      	adds	r3, r2, r3
 8005cec:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005cee:	4694      	mov	ip, r2
 8005cf0:	4463      	add	r3, ip
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	6959      	ldr	r1, [r3, #20]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	891a      	ldrh	r2, [r3, #8]
 8005d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f005 f9be 	bl	800b08c <USB_WritePMA>
 8005d10:	e1de      	b.n	80060d0 <HAL_PCD_EP_DB_Transmit+0x750>
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	00000402 	.word	0x00000402
 8005d18:	ffff83ff 	.word	0xffff83ff
 8005d1c:	ffff8000 	.word	0xffff8000
 8005d20:	00000406 	.word	0x00000406
 8005d24:	ffff8f8f 	.word	0xffff8f8f
 8005d28:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2250      	movs	r2, #80	; 0x50
 8005d32:	5a9b      	ldrh	r3, [r3, r2]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	001a      	movs	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	18d2      	adds	r2, r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	18d3      	adds	r3, r2, r3
 8005d46:	4aca      	ldr	r2, [pc, #808]	; (8006070 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005d48:	4694      	mov	ip, r2
 8005d4a:	4463      	add	r3, ip
 8005d4c:	881a      	ldrh	r2, [r3, #0]
 8005d4e:	214e      	movs	r1, #78	; 0x4e
 8005d50:	187b      	adds	r3, r7, r1
 8005d52:	0592      	lsls	r2, r2, #22
 8005d54:	0d92      	lsrs	r2, r2, #22
 8005d56:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	187b      	adds	r3, r7, r1
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d307      	bcc.n	8005d74 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	187b      	adds	r3, r7, r1
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	1ad2      	subs	r2, r2, r3
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	619a      	str	r2, [r3, #24]
 8005d72:	e002      	b.n	8005d7a <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2200      	movs	r2, #0
 8005d78:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d000      	beq.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x404>
 8005d82:	e0c0      	b.n	8005f06 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d125      	bne.n	8005dd8 <HAL_PCD_EP_DB_Transmit+0x458>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2250      	movs	r2, #80	; 0x50
 8005d98:	5a9b      	ldrh	r3, [r3, r2]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da0:	189b      	adds	r3, r3, r2
 8005da2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	00da      	lsls	r2, r3, #3
 8005daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dac:	18d3      	adds	r3, r2, r3
 8005dae:	4ab1      	ldr	r2, [pc, #708]	; (8006074 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005db0:	4694      	mov	ip, r2
 8005db2:	4463      	add	r3, ip
 8005db4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	4aae      	ldr	r2, [pc, #696]	; (8006078 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	4aab      	ldr	r2, [pc, #684]	; (800607c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	e01b      	b.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x490>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d117      	bne.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x490>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	677b      	str	r3, [r7, #116]	; 0x74
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2250      	movs	r2, #80	; 0x50
 8005dec:	5a9b      	ldrh	r3, [r3, r2]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	001a      	movs	r2, r3
 8005df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	677b      	str	r3, [r7, #116]	; 0x74
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	00da      	lsls	r2, r3, #3
 8005dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e00:	18d3      	adds	r3, r2, r3
 8005e02:	4a9c      	ldr	r2, [pc, #624]	; (8006074 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005e04:	4694      	mov	ip, r2
 8005e06:	4463      	add	r3, ip
 8005e08:	673b      	str	r3, [r7, #112]	; 0x70
 8005e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d130      	bne.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x500>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2180      	movs	r1, #128	; 0x80
 8005e24:	187a      	adds	r2, r7, r1
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2250      	movs	r2, #80	; 0x50
 8005e2e:	5a9b      	ldrh	r3, [r3, r2]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	001a      	movs	r2, r3
 8005e34:	187b      	adds	r3, r7, r1
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	189b      	adds	r3, r3, r2
 8005e3a:	187a      	adds	r2, r7, r1
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	00da      	lsls	r2, r3, #3
 8005e44:	187b      	adds	r3, r7, r1
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	18d3      	adds	r3, r2, r3
 8005e4a:	4a89      	ldr	r2, [pc, #548]	; (8006070 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005e4c:	4694      	mov	ip, r2
 8005e4e:	4463      	add	r3, ip
 8005e50:	2184      	movs	r1, #132	; 0x84
 8005e52:	187a      	adds	r2, r7, r1
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	187b      	adds	r3, r7, r1
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	4a86      	ldr	r2, [pc, #536]	; (8006078 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	187b      	adds	r3, r7, r1
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	801a      	strh	r2, [r3, #0]
 8005e6a:	187b      	adds	r3, r7, r1
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	4a82      	ldr	r2, [pc, #520]	; (800607c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	187b      	adds	r3, r7, r1
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	e018      	b.n	8005eb2 <HAL_PCD_EP_DB_Transmit+0x532>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d114      	bne.n	8005eb2 <HAL_PCD_EP_DB_Transmit+0x532>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2250      	movs	r2, #80	; 0x50
 8005e8e:	5a9b      	ldrh	r3, [r3, r2]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	001a      	movs	r2, r3
 8005e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e96:	189b      	adds	r3, r3, r2
 8005e98:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	00da      	lsls	r2, r3, #3
 8005ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ea2:	18d3      	adds	r3, r2, r3
 8005ea4:	4a72      	ldr	r2, [pc, #456]	; (8006070 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005ea6:	4694      	mov	ip, r2
 8005ea8:	4463      	add	r3, ip
 8005eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005eac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eae:	2200      	movs	r2, #0
 8005eb0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	0011      	movs	r1, r2
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f007 f92e 	bl	800d11c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ec0:	1dbb      	adds	r3, r7, #6
 8005ec2:	881a      	ldrh	r2, [r3, #0]
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	01db      	lsls	r3, r3, #7
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d000      	beq.n	8005ece <HAL_PCD_EP_DB_Transmit+0x54e>
 8005ecc:	e100      	b.n	80060d0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	001a      	movs	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	18d3      	adds	r3, r2, r3
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	2046      	movs	r0, #70	; 0x46
 8005ee2:	183b      	adds	r3, r7, r0
 8005ee4:	4966      	ldr	r1, [pc, #408]	; (8006080 <HAL_PCD_EP_DB_Transmit+0x700>)
 8005ee6:	400a      	ands	r2, r1
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	001a      	movs	r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	18d3      	adds	r3, r2, r3
 8005ef8:	183a      	adds	r2, r7, r0
 8005efa:	8812      	ldrh	r2, [r2, #0]
 8005efc:	4961      	ldr	r1, [pc, #388]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005efe:	430a      	orrs	r2, r1
 8005f00:	b292      	uxth	r2, r2
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	e0e4      	b.n	80060d0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005f06:	1dbb      	adds	r3, r7, #6
 8005f08:	881a      	ldrh	r2, [r3, #0]
 8005f0a:	2380      	movs	r3, #128	; 0x80
 8005f0c:	01db      	lsls	r3, r3, #7
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d11a      	bne.n	8005f48 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	001a      	movs	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	18d3      	adds	r3, r2, r3
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	204c      	movs	r0, #76	; 0x4c
 8005f26:	183b      	adds	r3, r7, r0
 8005f28:	4955      	ldr	r1, [pc, #340]	; (8006080 <HAL_PCD_EP_DB_Transmit+0x700>)
 8005f2a:	400a      	ands	r2, r1
 8005f2c:	801a      	strh	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	001a      	movs	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	18d3      	adds	r3, r2, r3
 8005f3c:	183a      	adds	r2, r7, r0
 8005f3e:	8812      	ldrh	r2, [r2, #0]
 8005f40:	4950      	ldr	r1, [pc, #320]	; (8006084 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005f42:	430a      	orrs	r2, r1
 8005f44:	b292      	uxth	r2, r2
 8005f46:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2224      	movs	r2, #36	; 0x24
 8005f4c:	5c9b      	ldrb	r3, [r3, r2]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d000      	beq.n	8005f54 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8005f52:	e0bd      	b.n	80060d0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	695a      	ldr	r2, [r3, #20]
 8005f58:	214e      	movs	r1, #78	; 0x4e
 8005f5a:	187b      	adds	r3, r7, r1
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	18d2      	adds	r2, r2, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	187b      	adds	r3, r7, r1
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	18d2      	adds	r2, r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	6a1a      	ldr	r2, [r3, #32]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d309      	bcc.n	8005f92 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	6a1a      	ldr	r2, [r3, #32]
 8005f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f8a:	1ad2      	subs	r2, r2, r3
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	621a      	str	r2, [r3, #32]
 8005f90:	e016      	b.n	8005fc0 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d108      	bne.n	8005fac <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8005f9a:	234e      	movs	r3, #78	; 0x4e
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2224      	movs	r2, #36	; 0x24
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	5499      	strb	r1, [r3, r2]
 8005faa:	e009      	b.n	8005fc0 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2224      	movs	r2, #36	; 0x24
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d15c      	bne.n	8006088 <HAL_PCD_EP_DB_Transmit+0x708>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2250      	movs	r2, #80	; 0x50
 8005fda:	5a9b      	ldrh	r3, [r3, r2]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	001a      	movs	r2, r3
 8005fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fe2:	189b      	adds	r3, r3, r2
 8005fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	00da      	lsls	r2, r3, #3
 8005fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fee:	18d3      	adds	r3, r2, r3
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005ff2:	4694      	mov	ip, r2
 8005ff4:	4463      	add	r3, ip
 8005ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d110      	bne.n	8006020 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8005ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	4a1c      	ldr	r2, [pc, #112]	; (8006078 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8006006:	4013      	ands	r3, r2
 8006008:	b29a      	uxth	r2, r3
 800600a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800600c:	801a      	strh	r2, [r3, #0]
 800600e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	4a19      	ldr	r2, [pc, #100]	; (800607c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8006016:	4313      	orrs	r3, r2
 8006018:	b29a      	uxth	r2, r3
 800601a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	e04d      	b.n	80060bc <HAL_PCD_EP_DB_Transmit+0x73c>
 8006020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006022:	2b3e      	cmp	r3, #62	; 0x3e
 8006024:	d810      	bhi.n	8006048 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	657b      	str	r3, [r7, #84]	; 0x54
 800602c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602e:	2201      	movs	r2, #1
 8006030:	4013      	ands	r3, r2
 8006032:	d002      	beq.n	800603a <HAL_PCD_EP_DB_Transmit+0x6ba>
 8006034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006036:	3301      	adds	r3, #1
 8006038:	657b      	str	r3, [r7, #84]	; 0x54
 800603a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603c:	b29b      	uxth	r3, r3
 800603e:	029b      	lsls	r3, r3, #10
 8006040:	b29a      	uxth	r2, r3
 8006042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	e039      	b.n	80060bc <HAL_PCD_EP_DB_Transmit+0x73c>
 8006048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	657b      	str	r3, [r7, #84]	; 0x54
 800604e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006050:	221f      	movs	r2, #31
 8006052:	4013      	ands	r3, r2
 8006054:	d102      	bne.n	800605c <HAL_PCD_EP_DB_Transmit+0x6dc>
 8006056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006058:	3b01      	subs	r3, #1
 800605a:	657b      	str	r3, [r7, #84]	; 0x54
 800605c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800605e:	b29b      	uxth	r3, r3
 8006060:	029b      	lsls	r3, r3, #10
 8006062:	b29b      	uxth	r3, r3
 8006064:	4a05      	ldr	r2, [pc, #20]	; (800607c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8006066:	4313      	orrs	r3, r2
 8006068:	b29a      	uxth	r2, r3
 800606a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	e025      	b.n	80060bc <HAL_PCD_EP_DB_Transmit+0x73c>
 8006070:	00000406 	.word	0x00000406
 8006074:	00000402 	.word	0x00000402
 8006078:	ffff83ff 	.word	0xffff83ff
 800607c:	ffff8000 	.word	0xffff8000
 8006080:	ffff8f8f 	.word	0xffff8f8f
 8006084:	ffffc080 	.word	0xffffc080
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d115      	bne.n	80060bc <HAL_PCD_EP_DB_Transmit+0x73c>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2250      	movs	r2, #80	; 0x50
 8006096:	5a9b      	ldrh	r3, [r3, r2]
 8006098:	b29b      	uxth	r3, r3
 800609a:	001a      	movs	r2, r3
 800609c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800609e:	189b      	adds	r3, r3, r2
 80060a0:	667b      	str	r3, [r7, #100]	; 0x64
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	00da      	lsls	r2, r3, #3
 80060a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060aa:	18d3      	adds	r3, r2, r3
 80060ac:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80060ae:	4694      	mov	ip, r2
 80060b0:	4463      	add	r3, ip
 80060b2:	663b      	str	r3, [r7, #96]	; 0x60
 80060b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6959      	ldr	r1, [r3, #20]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	895a      	ldrh	r2, [r3, #10]
 80060c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f004 ffde 	bl	800b08c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	001a      	movs	r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	18d3      	adds	r3, r2, r3
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	2010      	movs	r0, #16
 80060e4:	183b      	adds	r3, r7, r0
 80060e6:	4911      	ldr	r1, [pc, #68]	; (800612c <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80060e8:	400a      	ands	r2, r1
 80060ea:	801a      	strh	r2, [r3, #0]
 80060ec:	183b      	adds	r3, r7, r0
 80060ee:	183a      	adds	r2, r7, r0
 80060f0:	8812      	ldrh	r2, [r2, #0]
 80060f2:	2110      	movs	r1, #16
 80060f4:	404a      	eors	r2, r1
 80060f6:	801a      	strh	r2, [r3, #0]
 80060f8:	183b      	adds	r3, r7, r0
 80060fa:	183a      	adds	r2, r7, r0
 80060fc:	8812      	ldrh	r2, [r2, #0]
 80060fe:	2120      	movs	r1, #32
 8006100:	404a      	eors	r2, r1
 8006102:	801a      	strh	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	001a      	movs	r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	18d3      	adds	r3, r2, r3
 8006112:	183a      	adds	r2, r7, r0
 8006114:	8812      	ldrh	r2, [r2, #0]
 8006116:	4906      	ldr	r1, [pc, #24]	; (8006130 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8006118:	430a      	orrs	r2, r1
 800611a:	b292      	uxth	r2, r2
 800611c:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	0018      	movs	r0, r3
 8006122:	46bd      	mov	sp, r7
 8006124:	b022      	add	sp, #136	; 0x88
 8006126:	bd80      	pop	{r7, pc}
 8006128:	00000406 	.word	0x00000406
 800612c:	ffff8fbf 	.word	0xffff8fbf
 8006130:	ffff8080 	.word	0xffff8080

08006134 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006134:	b590      	push	{r4, r7, lr}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	0008      	movs	r0, r1
 800613e:	0011      	movs	r1, r2
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	240a      	movs	r4, #10
 8006144:	193b      	adds	r3, r7, r4
 8006146:	1c02      	adds	r2, r0, #0
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	2308      	movs	r3, #8
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	1c0a      	adds	r2, r1, #0
 8006150:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006152:	0021      	movs	r1, r4
 8006154:	187b      	adds	r3, r7, r1
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	2280      	movs	r2, #128	; 0x80
 800615a:	4013      	ands	r3, r2
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00c      	beq.n	800617c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006162:	187b      	adds	r3, r7, r1
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	2207      	movs	r2, #7
 8006168:	4013      	ands	r3, r2
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	0013      	movs	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	189b      	adds	r3, r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	18d3      	adds	r3, r2, r3
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	e00b      	b.n	8006194 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800617c:	230a      	movs	r3, #10
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	881a      	ldrh	r2, [r3, #0]
 8006182:	0013      	movs	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	189b      	adds	r3, r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	3369      	adds	r3, #105	; 0x69
 800618c:	33ff      	adds	r3, #255	; 0xff
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	18d3      	adds	r3, r2, r3
 8006192:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006194:	2308      	movs	r3, #8
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d107      	bne.n	80061ae <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2200      	movs	r2, #0
 80061a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	80da      	strh	r2, [r3, #6]
 80061ac:	e00b      	b.n	80061c6 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2201      	movs	r2, #1
 80061b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	0c1b      	lsrs	r3, r3, #16
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	0018      	movs	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	b007      	add	sp, #28
 80061ce:	bd90      	pop	{r4, r7, pc}

080061d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	23ba      	movs	r3, #186	; 0xba
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	2101      	movs	r1, #1
 80061e6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	23b8      	movs	r3, #184	; 0xb8
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	2100      	movs	r1, #0
 80061f0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2254      	movs	r2, #84	; 0x54
 80061f6:	5a9b      	ldrh	r3, [r3, r2]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2201      	movs	r2, #1
 80061fc:	4313      	orrs	r3, r2
 80061fe:	b299      	uxth	r1, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2254      	movs	r2, #84	; 0x54
 8006204:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2254      	movs	r2, #84	; 0x54
 800620a:	5a9b      	ldrh	r3, [r3, r2]
 800620c:	b29b      	uxth	r3, r3
 800620e:	2202      	movs	r2, #2
 8006210:	4313      	orrs	r3, r2
 8006212:	b299      	uxth	r1, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2254      	movs	r2, #84	; 0x54
 8006218:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	0018      	movs	r0, r3
 800621e:	46bd      	mov	sp, r7
 8006220:	b004      	add	sp, #16
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	000a      	movs	r2, r1
 800622e:	1cfb      	adds	r3, r7, #3
 8006230:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	46bd      	mov	sp, r7
 8006236:	b002      	add	sp, #8
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	f000 fb76 	bl	800693c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2201      	movs	r2, #1
 8006256:	4013      	ands	r3, r2
 8006258:	d100      	bne.n	800625c <HAL_RCC_OscConfig+0x20>
 800625a:	e08e      	b.n	800637a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800625c:	4bc5      	ldr	r3, [pc, #788]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	220c      	movs	r2, #12
 8006262:	4013      	ands	r3, r2
 8006264:	2b04      	cmp	r3, #4
 8006266:	d00e      	beq.n	8006286 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006268:	4bc2      	ldr	r3, [pc, #776]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	220c      	movs	r2, #12
 800626e:	4013      	ands	r3, r2
 8006270:	2b08      	cmp	r3, #8
 8006272:	d117      	bne.n	80062a4 <HAL_RCC_OscConfig+0x68>
 8006274:	4bbf      	ldr	r3, [pc, #764]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	23c0      	movs	r3, #192	; 0xc0
 800627a:	025b      	lsls	r3, r3, #9
 800627c:	401a      	ands	r2, r3
 800627e:	2380      	movs	r3, #128	; 0x80
 8006280:	025b      	lsls	r3, r3, #9
 8006282:	429a      	cmp	r2, r3
 8006284:	d10e      	bne.n	80062a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006286:	4bbb      	ldr	r3, [pc, #748]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	2380      	movs	r3, #128	; 0x80
 800628c:	029b      	lsls	r3, r3, #10
 800628e:	4013      	ands	r3, r2
 8006290:	d100      	bne.n	8006294 <HAL_RCC_OscConfig+0x58>
 8006292:	e071      	b.n	8006378 <HAL_RCC_OscConfig+0x13c>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d000      	beq.n	800629e <HAL_RCC_OscConfig+0x62>
 800629c:	e06c      	b.n	8006378 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	f000 fb4c 	bl	800693c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d107      	bne.n	80062bc <HAL_RCC_OscConfig+0x80>
 80062ac:	4bb1      	ldr	r3, [pc, #708]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	4bb0      	ldr	r3, [pc, #704]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80062b2:	2180      	movs	r1, #128	; 0x80
 80062b4:	0249      	lsls	r1, r1, #9
 80062b6:	430a      	orrs	r2, r1
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e02f      	b.n	800631c <HAL_RCC_OscConfig+0xe0>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10c      	bne.n	80062de <HAL_RCC_OscConfig+0xa2>
 80062c4:	4bab      	ldr	r3, [pc, #684]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	4baa      	ldr	r3, [pc, #680]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80062ca:	49ab      	ldr	r1, [pc, #684]	; (8006578 <HAL_RCC_OscConfig+0x33c>)
 80062cc:	400a      	ands	r2, r1
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	4ba8      	ldr	r3, [pc, #672]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4ba7      	ldr	r3, [pc, #668]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80062d6:	49a9      	ldr	r1, [pc, #676]	; (800657c <HAL_RCC_OscConfig+0x340>)
 80062d8:	400a      	ands	r2, r1
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	e01e      	b.n	800631c <HAL_RCC_OscConfig+0xe0>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b05      	cmp	r3, #5
 80062e4:	d10e      	bne.n	8006304 <HAL_RCC_OscConfig+0xc8>
 80062e6:	4ba3      	ldr	r3, [pc, #652]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4ba2      	ldr	r3, [pc, #648]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80062ec:	2180      	movs	r1, #128	; 0x80
 80062ee:	02c9      	lsls	r1, r1, #11
 80062f0:	430a      	orrs	r2, r1
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	4b9f      	ldr	r3, [pc, #636]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	4b9e      	ldr	r3, [pc, #632]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80062fa:	2180      	movs	r1, #128	; 0x80
 80062fc:	0249      	lsls	r1, r1, #9
 80062fe:	430a      	orrs	r2, r1
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e00b      	b.n	800631c <HAL_RCC_OscConfig+0xe0>
 8006304:	4b9b      	ldr	r3, [pc, #620]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4b9a      	ldr	r3, [pc, #616]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 800630a:	499b      	ldr	r1, [pc, #620]	; (8006578 <HAL_RCC_OscConfig+0x33c>)
 800630c:	400a      	ands	r2, r1
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	4b98      	ldr	r3, [pc, #608]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	4b97      	ldr	r3, [pc, #604]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006316:	4999      	ldr	r1, [pc, #612]	; (800657c <HAL_RCC_OscConfig+0x340>)
 8006318:	400a      	ands	r2, r1
 800631a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d014      	beq.n	800634e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006324:	f7fd f884 	bl	8003430 <HAL_GetTick>
 8006328:	0003      	movs	r3, r0
 800632a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800632e:	f7fd f87f 	bl	8003430 <HAL_GetTick>
 8006332:	0002      	movs	r2, r0
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b64      	cmp	r3, #100	; 0x64
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e2fd      	b.n	800693c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006340:	4b8c      	ldr	r3, [pc, #560]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	029b      	lsls	r3, r3, #10
 8006348:	4013      	ands	r3, r2
 800634a:	d0f0      	beq.n	800632e <HAL_RCC_OscConfig+0xf2>
 800634c:	e015      	b.n	800637a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634e:	f7fd f86f 	bl	8003430 <HAL_GetTick>
 8006352:	0003      	movs	r3, r0
 8006354:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006358:	f7fd f86a 	bl	8003430 <HAL_GetTick>
 800635c:	0002      	movs	r2, r0
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	; 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e2e8      	b.n	800693c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800636a:	4b82      	ldr	r3, [pc, #520]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	2380      	movs	r3, #128	; 0x80
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	4013      	ands	r3, r2
 8006374:	d1f0      	bne.n	8006358 <HAL_RCC_OscConfig+0x11c>
 8006376:	e000      	b.n	800637a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006378:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2202      	movs	r2, #2
 8006380:	4013      	ands	r3, r2
 8006382:	d100      	bne.n	8006386 <HAL_RCC_OscConfig+0x14a>
 8006384:	e06c      	b.n	8006460 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006386:	4b7b      	ldr	r3, [pc, #492]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	220c      	movs	r2, #12
 800638c:	4013      	ands	r3, r2
 800638e:	d00e      	beq.n	80063ae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006390:	4b78      	ldr	r3, [pc, #480]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	220c      	movs	r2, #12
 8006396:	4013      	ands	r3, r2
 8006398:	2b08      	cmp	r3, #8
 800639a:	d11f      	bne.n	80063dc <HAL_RCC_OscConfig+0x1a0>
 800639c:	4b75      	ldr	r3, [pc, #468]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	23c0      	movs	r3, #192	; 0xc0
 80063a2:	025b      	lsls	r3, r3, #9
 80063a4:	401a      	ands	r2, r3
 80063a6:	2380      	movs	r3, #128	; 0x80
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d116      	bne.n	80063dc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ae:	4b71      	ldr	r3, [pc, #452]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2202      	movs	r2, #2
 80063b4:	4013      	ands	r3, r2
 80063b6:	d005      	beq.n	80063c4 <HAL_RCC_OscConfig+0x188>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d001      	beq.n	80063c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e2bb      	b.n	800693c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c4:	4b6b      	ldr	r3, [pc, #428]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	22f8      	movs	r2, #248	; 0xf8
 80063ca:	4393      	bics	r3, r2
 80063cc:	0019      	movs	r1, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	00da      	lsls	r2, r3, #3
 80063d4:	4b67      	ldr	r3, [pc, #412]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80063d6:	430a      	orrs	r2, r1
 80063d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063da:	e041      	b.n	8006460 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d024      	beq.n	800642e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063e4:	4b63      	ldr	r3, [pc, #396]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	4b62      	ldr	r3, [pc, #392]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80063ea:	2101      	movs	r1, #1
 80063ec:	430a      	orrs	r2, r1
 80063ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f0:	f7fd f81e 	bl	8003430 <HAL_GetTick>
 80063f4:	0003      	movs	r3, r0
 80063f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063fa:	f7fd f819 	bl	8003430 <HAL_GetTick>
 80063fe:	0002      	movs	r2, r0
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e297      	b.n	800693c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800640c:	4b59      	ldr	r3, [pc, #356]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2202      	movs	r2, #2
 8006412:	4013      	ands	r3, r2
 8006414:	d0f1      	beq.n	80063fa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006416:	4b57      	ldr	r3, [pc, #348]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	22f8      	movs	r2, #248	; 0xf8
 800641c:	4393      	bics	r3, r2
 800641e:	0019      	movs	r1, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	00da      	lsls	r2, r3, #3
 8006426:	4b53      	ldr	r3, [pc, #332]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006428:	430a      	orrs	r2, r1
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	e018      	b.n	8006460 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800642e:	4b51      	ldr	r3, [pc, #324]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b50      	ldr	r3, [pc, #320]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006434:	2101      	movs	r1, #1
 8006436:	438a      	bics	r2, r1
 8006438:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643a:	f7fc fff9 	bl	8003430 <HAL_GetTick>
 800643e:	0003      	movs	r3, r0
 8006440:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006444:	f7fc fff4 	bl	8003430 <HAL_GetTick>
 8006448:	0002      	movs	r2, r0
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e272      	b.n	800693c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006456:	4b47      	ldr	r3, [pc, #284]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2202      	movs	r2, #2
 800645c:	4013      	ands	r3, r2
 800645e:	d1f1      	bne.n	8006444 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2208      	movs	r2, #8
 8006466:	4013      	ands	r3, r2
 8006468:	d036      	beq.n	80064d8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d019      	beq.n	80064a6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006472:	4b40      	ldr	r3, [pc, #256]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006476:	4b3f      	ldr	r3, [pc, #252]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006478:	2101      	movs	r1, #1
 800647a:	430a      	orrs	r2, r1
 800647c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800647e:	f7fc ffd7 	bl	8003430 <HAL_GetTick>
 8006482:	0003      	movs	r3, r0
 8006484:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006488:	f7fc ffd2 	bl	8003430 <HAL_GetTick>
 800648c:	0002      	movs	r2, r0
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e250      	b.n	800693c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800649a:	4b36      	ldr	r3, [pc, #216]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	2202      	movs	r2, #2
 80064a0:	4013      	ands	r3, r2
 80064a2:	d0f1      	beq.n	8006488 <HAL_RCC_OscConfig+0x24c>
 80064a4:	e018      	b.n	80064d8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064a6:	4b33      	ldr	r3, [pc, #204]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80064a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064aa:	4b32      	ldr	r3, [pc, #200]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80064ac:	2101      	movs	r1, #1
 80064ae:	438a      	bics	r2, r1
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b2:	f7fc ffbd 	bl	8003430 <HAL_GetTick>
 80064b6:	0003      	movs	r3, r0
 80064b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064bc:	f7fc ffb8 	bl	8003430 <HAL_GetTick>
 80064c0:	0002      	movs	r2, r0
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e236      	b.n	800693c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ce:	4b29      	ldr	r3, [pc, #164]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	2202      	movs	r2, #2
 80064d4:	4013      	ands	r3, r2
 80064d6:	d1f1      	bne.n	80064bc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2204      	movs	r2, #4
 80064de:	4013      	ands	r3, r2
 80064e0:	d100      	bne.n	80064e4 <HAL_RCC_OscConfig+0x2a8>
 80064e2:	e0b5      	b.n	8006650 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e4:	201f      	movs	r0, #31
 80064e6:	183b      	adds	r3, r7, r0
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ec:	4b21      	ldr	r3, [pc, #132]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80064ee:	69da      	ldr	r2, [r3, #28]
 80064f0:	2380      	movs	r3, #128	; 0x80
 80064f2:	055b      	lsls	r3, r3, #21
 80064f4:	4013      	ands	r3, r2
 80064f6:	d110      	bne.n	800651a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f8:	4b1e      	ldr	r3, [pc, #120]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 80064fe:	2180      	movs	r1, #128	; 0x80
 8006500:	0549      	lsls	r1, r1, #21
 8006502:	430a      	orrs	r2, r1
 8006504:	61da      	str	r2, [r3, #28]
 8006506:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006508:	69da      	ldr	r2, [r3, #28]
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	055b      	lsls	r3, r3, #21
 800650e:	4013      	ands	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006514:	183b      	adds	r3, r7, r0
 8006516:	2201      	movs	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651a:	4b19      	ldr	r3, [pc, #100]	; (8006580 <HAL_RCC_OscConfig+0x344>)
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	2380      	movs	r3, #128	; 0x80
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4013      	ands	r3, r2
 8006524:	d11a      	bne.n	800655c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006526:	4b16      	ldr	r3, [pc, #88]	; (8006580 <HAL_RCC_OscConfig+0x344>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b15      	ldr	r3, [pc, #84]	; (8006580 <HAL_RCC_OscConfig+0x344>)
 800652c:	2180      	movs	r1, #128	; 0x80
 800652e:	0049      	lsls	r1, r1, #1
 8006530:	430a      	orrs	r2, r1
 8006532:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006534:	f7fc ff7c 	bl	8003430 <HAL_GetTick>
 8006538:	0003      	movs	r3, r0
 800653a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800653c:	e008      	b.n	8006550 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800653e:	f7fc ff77 	bl	8003430 <HAL_GetTick>
 8006542:	0002      	movs	r2, r0
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b64      	cmp	r3, #100	; 0x64
 800654a:	d901      	bls.n	8006550 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e1f5      	b.n	800693c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <HAL_RCC_OscConfig+0x344>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	2380      	movs	r3, #128	; 0x80
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4013      	ands	r3, r2
 800655a:	d0f0      	beq.n	800653e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d10f      	bne.n	8006584 <HAL_RCC_OscConfig+0x348>
 8006564:	4b03      	ldr	r3, [pc, #12]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 8006566:	6a1a      	ldr	r2, [r3, #32]
 8006568:	4b02      	ldr	r3, [pc, #8]	; (8006574 <HAL_RCC_OscConfig+0x338>)
 800656a:	2101      	movs	r1, #1
 800656c:	430a      	orrs	r2, r1
 800656e:	621a      	str	r2, [r3, #32]
 8006570:	e036      	b.n	80065e0 <HAL_RCC_OscConfig+0x3a4>
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	40021000 	.word	0x40021000
 8006578:	fffeffff 	.word	0xfffeffff
 800657c:	fffbffff 	.word	0xfffbffff
 8006580:	40007000 	.word	0x40007000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10c      	bne.n	80065a6 <HAL_RCC_OscConfig+0x36a>
 800658c:	4bca      	ldr	r3, [pc, #808]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800658e:	6a1a      	ldr	r2, [r3, #32]
 8006590:	4bc9      	ldr	r3, [pc, #804]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006592:	2101      	movs	r1, #1
 8006594:	438a      	bics	r2, r1
 8006596:	621a      	str	r2, [r3, #32]
 8006598:	4bc7      	ldr	r3, [pc, #796]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	4bc6      	ldr	r3, [pc, #792]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800659e:	2104      	movs	r1, #4
 80065a0:	438a      	bics	r2, r1
 80065a2:	621a      	str	r2, [r3, #32]
 80065a4:	e01c      	b.n	80065e0 <HAL_RCC_OscConfig+0x3a4>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d10c      	bne.n	80065c8 <HAL_RCC_OscConfig+0x38c>
 80065ae:	4bc2      	ldr	r3, [pc, #776]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80065b0:	6a1a      	ldr	r2, [r3, #32]
 80065b2:	4bc1      	ldr	r3, [pc, #772]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80065b4:	2104      	movs	r1, #4
 80065b6:	430a      	orrs	r2, r1
 80065b8:	621a      	str	r2, [r3, #32]
 80065ba:	4bbf      	ldr	r3, [pc, #764]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80065bc:	6a1a      	ldr	r2, [r3, #32]
 80065be:	4bbe      	ldr	r3, [pc, #760]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80065c0:	2101      	movs	r1, #1
 80065c2:	430a      	orrs	r2, r1
 80065c4:	621a      	str	r2, [r3, #32]
 80065c6:	e00b      	b.n	80065e0 <HAL_RCC_OscConfig+0x3a4>
 80065c8:	4bbb      	ldr	r3, [pc, #748]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80065ca:	6a1a      	ldr	r2, [r3, #32]
 80065cc:	4bba      	ldr	r3, [pc, #744]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80065ce:	2101      	movs	r1, #1
 80065d0:	438a      	bics	r2, r1
 80065d2:	621a      	str	r2, [r3, #32]
 80065d4:	4bb8      	ldr	r3, [pc, #736]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80065d6:	6a1a      	ldr	r2, [r3, #32]
 80065d8:	4bb7      	ldr	r3, [pc, #732]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80065da:	2104      	movs	r1, #4
 80065dc:	438a      	bics	r2, r1
 80065de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d014      	beq.n	8006612 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e8:	f7fc ff22 	bl	8003430 <HAL_GetTick>
 80065ec:	0003      	movs	r3, r0
 80065ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f0:	e009      	b.n	8006606 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f2:	f7fc ff1d 	bl	8003430 <HAL_GetTick>
 80065f6:	0002      	movs	r2, r0
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	4aaf      	ldr	r2, [pc, #700]	; (80068bc <HAL_RCC_OscConfig+0x680>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e19a      	b.n	800693c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006606:	4bac      	ldr	r3, [pc, #688]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	2202      	movs	r2, #2
 800660c:	4013      	ands	r3, r2
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x3b6>
 8006610:	e013      	b.n	800663a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006612:	f7fc ff0d 	bl	8003430 <HAL_GetTick>
 8006616:	0003      	movs	r3, r0
 8006618:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800661a:	e009      	b.n	8006630 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800661c:	f7fc ff08 	bl	8003430 <HAL_GetTick>
 8006620:	0002      	movs	r2, r0
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	4aa5      	ldr	r2, [pc, #660]	; (80068bc <HAL_RCC_OscConfig+0x680>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e185      	b.n	800693c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006630:	4ba1      	ldr	r3, [pc, #644]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	2202      	movs	r2, #2
 8006636:	4013      	ands	r3, r2
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800663a:	231f      	movs	r3, #31
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d105      	bne.n	8006650 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006644:	4b9c      	ldr	r3, [pc, #624]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	4b9b      	ldr	r3, [pc, #620]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800664a:	499d      	ldr	r1, [pc, #628]	; (80068c0 <HAL_RCC_OscConfig+0x684>)
 800664c:	400a      	ands	r2, r1
 800664e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2210      	movs	r2, #16
 8006656:	4013      	ands	r3, r2
 8006658:	d063      	beq.n	8006722 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d12a      	bne.n	80066b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006662:	4b95      	ldr	r3, [pc, #596]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006666:	4b94      	ldr	r3, [pc, #592]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006668:	2104      	movs	r1, #4
 800666a:	430a      	orrs	r2, r1
 800666c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800666e:	4b92      	ldr	r3, [pc, #584]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006672:	4b91      	ldr	r3, [pc, #580]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006674:	2101      	movs	r1, #1
 8006676:	430a      	orrs	r2, r1
 8006678:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800667a:	f7fc fed9 	bl	8003430 <HAL_GetTick>
 800667e:	0003      	movs	r3, r0
 8006680:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006684:	f7fc fed4 	bl	8003430 <HAL_GetTick>
 8006688:	0002      	movs	r2, r0
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e152      	b.n	800693c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006696:	4b88      	ldr	r3, [pc, #544]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669a:	2202      	movs	r2, #2
 800669c:	4013      	ands	r3, r2
 800669e:	d0f1      	beq.n	8006684 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80066a0:	4b85      	ldr	r3, [pc, #532]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80066a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a4:	22f8      	movs	r2, #248	; 0xf8
 80066a6:	4393      	bics	r3, r2
 80066a8:	0019      	movs	r1, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	00da      	lsls	r2, r3, #3
 80066b0:	4b81      	ldr	r3, [pc, #516]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80066b2:	430a      	orrs	r2, r1
 80066b4:	635a      	str	r2, [r3, #52]	; 0x34
 80066b6:	e034      	b.n	8006722 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	3305      	adds	r3, #5
 80066be:	d111      	bne.n	80066e4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80066c0:	4b7d      	ldr	r3, [pc, #500]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80066c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066c4:	4b7c      	ldr	r3, [pc, #496]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80066c6:	2104      	movs	r1, #4
 80066c8:	438a      	bics	r2, r1
 80066ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80066cc:	4b7a      	ldr	r3, [pc, #488]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80066ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d0:	22f8      	movs	r2, #248	; 0xf8
 80066d2:	4393      	bics	r3, r2
 80066d4:	0019      	movs	r1, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	00da      	lsls	r2, r3, #3
 80066dc:	4b76      	ldr	r3, [pc, #472]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80066de:	430a      	orrs	r2, r1
 80066e0:	635a      	str	r2, [r3, #52]	; 0x34
 80066e2:	e01e      	b.n	8006722 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80066e4:	4b74      	ldr	r3, [pc, #464]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80066e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e8:	4b73      	ldr	r3, [pc, #460]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80066ea:	2104      	movs	r1, #4
 80066ec:	430a      	orrs	r2, r1
 80066ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80066f0:	4b71      	ldr	r3, [pc, #452]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80066f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f4:	4b70      	ldr	r3, [pc, #448]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80066f6:	2101      	movs	r1, #1
 80066f8:	438a      	bics	r2, r1
 80066fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066fc:	f7fc fe98 	bl	8003430 <HAL_GetTick>
 8006700:	0003      	movs	r3, r0
 8006702:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006704:	e008      	b.n	8006718 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006706:	f7fc fe93 	bl	8003430 <HAL_GetTick>
 800670a:	0002      	movs	r2, r0
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	d901      	bls.n	8006718 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e111      	b.n	800693c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006718:	4b67      	ldr	r3, [pc, #412]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800671a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671c:	2202      	movs	r2, #2
 800671e:	4013      	ands	r3, r2
 8006720:	d1f1      	bne.n	8006706 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2220      	movs	r2, #32
 8006728:	4013      	ands	r3, r2
 800672a:	d05c      	beq.n	80067e6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800672c:	4b62      	ldr	r3, [pc, #392]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	220c      	movs	r2, #12
 8006732:	4013      	ands	r3, r2
 8006734:	2b0c      	cmp	r3, #12
 8006736:	d00e      	beq.n	8006756 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006738:	4b5f      	ldr	r3, [pc, #380]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	220c      	movs	r2, #12
 800673e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006740:	2b08      	cmp	r3, #8
 8006742:	d114      	bne.n	800676e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006744:	4b5c      	ldr	r3, [pc, #368]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	23c0      	movs	r3, #192	; 0xc0
 800674a:	025b      	lsls	r3, r3, #9
 800674c:	401a      	ands	r2, r3
 800674e:	23c0      	movs	r3, #192	; 0xc0
 8006750:	025b      	lsls	r3, r3, #9
 8006752:	429a      	cmp	r2, r3
 8006754:	d10b      	bne.n	800676e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006756:	4b58      	ldr	r3, [pc, #352]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800675a:	2380      	movs	r3, #128	; 0x80
 800675c:	025b      	lsls	r3, r3, #9
 800675e:	4013      	ands	r3, r2
 8006760:	d040      	beq.n	80067e4 <HAL_RCC_OscConfig+0x5a8>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d03c      	beq.n	80067e4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e0e6      	b.n	800693c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01b      	beq.n	80067ae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006776:	4b50      	ldr	r3, [pc, #320]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800677a:	4b4f      	ldr	r3, [pc, #316]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800677c:	2180      	movs	r1, #128	; 0x80
 800677e:	0249      	lsls	r1, r1, #9
 8006780:	430a      	orrs	r2, r1
 8006782:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006784:	f7fc fe54 	bl	8003430 <HAL_GetTick>
 8006788:	0003      	movs	r3, r0
 800678a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800678c:	e008      	b.n	80067a0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800678e:	f7fc fe4f 	bl	8003430 <HAL_GetTick>
 8006792:	0002      	movs	r2, r0
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d901      	bls.n	80067a0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e0cd      	b.n	800693c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80067a0:	4b45      	ldr	r3, [pc, #276]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80067a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a4:	2380      	movs	r3, #128	; 0x80
 80067a6:	025b      	lsls	r3, r3, #9
 80067a8:	4013      	ands	r3, r2
 80067aa:	d0f0      	beq.n	800678e <HAL_RCC_OscConfig+0x552>
 80067ac:	e01b      	b.n	80067e6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80067ae:	4b42      	ldr	r3, [pc, #264]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80067b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067b2:	4b41      	ldr	r3, [pc, #260]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80067b4:	4943      	ldr	r1, [pc, #268]	; (80068c4 <HAL_RCC_OscConfig+0x688>)
 80067b6:	400a      	ands	r2, r1
 80067b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ba:	f7fc fe39 	bl	8003430 <HAL_GetTick>
 80067be:	0003      	movs	r3, r0
 80067c0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067c4:	f7fc fe34 	bl	8003430 <HAL_GetTick>
 80067c8:	0002      	movs	r2, r0
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e0b2      	b.n	800693c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80067d6:	4b38      	ldr	r3, [pc, #224]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80067d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067da:	2380      	movs	r3, #128	; 0x80
 80067dc:	025b      	lsls	r3, r3, #9
 80067de:	4013      	ands	r3, r2
 80067e0:	d1f0      	bne.n	80067c4 <HAL_RCC_OscConfig+0x588>
 80067e2:	e000      	b.n	80067e6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80067e4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d100      	bne.n	80067f0 <HAL_RCC_OscConfig+0x5b4>
 80067ee:	e0a4      	b.n	800693a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067f0:	4b31      	ldr	r3, [pc, #196]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	220c      	movs	r2, #12
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d100      	bne.n	80067fe <HAL_RCC_OscConfig+0x5c2>
 80067fc:	e078      	b.n	80068f0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	2b02      	cmp	r3, #2
 8006804:	d14c      	bne.n	80068a0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006806:	4b2c      	ldr	r3, [pc, #176]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b2b      	ldr	r3, [pc, #172]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800680c:	492e      	ldr	r1, [pc, #184]	; (80068c8 <HAL_RCC_OscConfig+0x68c>)
 800680e:	400a      	ands	r2, r1
 8006810:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006812:	f7fc fe0d 	bl	8003430 <HAL_GetTick>
 8006816:	0003      	movs	r3, r0
 8006818:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800681c:	f7fc fe08 	bl	8003430 <HAL_GetTick>
 8006820:	0002      	movs	r2, r0
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e086      	b.n	800693c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800682e:	4b22      	ldr	r3, [pc, #136]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	2380      	movs	r3, #128	; 0x80
 8006834:	049b      	lsls	r3, r3, #18
 8006836:	4013      	ands	r3, r2
 8006838:	d1f0      	bne.n	800681c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800683a:	4b1f      	ldr	r3, [pc, #124]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800683c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683e:	220f      	movs	r2, #15
 8006840:	4393      	bics	r3, r2
 8006842:	0019      	movs	r1, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006848:	4b1b      	ldr	r3, [pc, #108]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800684a:	430a      	orrs	r2, r1
 800684c:	62da      	str	r2, [r3, #44]	; 0x2c
 800684e:	4b1a      	ldr	r3, [pc, #104]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	4a1e      	ldr	r2, [pc, #120]	; (80068cc <HAL_RCC_OscConfig+0x690>)
 8006854:	4013      	ands	r3, r2
 8006856:	0019      	movs	r1, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	431a      	orrs	r2, r3
 8006862:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006868:	4b13      	ldr	r3, [pc, #76]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 800686e:	2180      	movs	r1, #128	; 0x80
 8006870:	0449      	lsls	r1, r1, #17
 8006872:	430a      	orrs	r2, r1
 8006874:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006876:	f7fc fddb 	bl	8003430 <HAL_GetTick>
 800687a:	0003      	movs	r3, r0
 800687c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006880:	f7fc fdd6 	bl	8003430 <HAL_GetTick>
 8006884:	0002      	movs	r2, r0
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e054      	b.n	800693c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	2380      	movs	r3, #128	; 0x80
 8006898:	049b      	lsls	r3, r3, #18
 800689a:	4013      	ands	r3, r2
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0x644>
 800689e:	e04c      	b.n	800693a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a0:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <HAL_RCC_OscConfig+0x67c>)
 80068a6:	4908      	ldr	r1, [pc, #32]	; (80068c8 <HAL_RCC_OscConfig+0x68c>)
 80068a8:	400a      	ands	r2, r1
 80068aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ac:	f7fc fdc0 	bl	8003430 <HAL_GetTick>
 80068b0:	0003      	movs	r3, r0
 80068b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068b4:	e015      	b.n	80068e2 <HAL_RCC_OscConfig+0x6a6>
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	40021000 	.word	0x40021000
 80068bc:	00001388 	.word	0x00001388
 80068c0:	efffffff 	.word	0xefffffff
 80068c4:	fffeffff 	.word	0xfffeffff
 80068c8:	feffffff 	.word	0xfeffffff
 80068cc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068d0:	f7fc fdae 	bl	8003430 <HAL_GetTick>
 80068d4:	0002      	movs	r2, r0
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e02c      	b.n	800693c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068e2:	4b18      	ldr	r3, [pc, #96]	; (8006944 <HAL_RCC_OscConfig+0x708>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	2380      	movs	r3, #128	; 0x80
 80068e8:	049b      	lsls	r3, r3, #18
 80068ea:	4013      	ands	r3, r2
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x694>
 80068ee:	e024      	b.n	800693a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e01f      	b.n	800693c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80068fc:	4b11      	ldr	r3, [pc, #68]	; (8006944 <HAL_RCC_OscConfig+0x708>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006902:	4b10      	ldr	r3, [pc, #64]	; (8006944 <HAL_RCC_OscConfig+0x708>)
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	23c0      	movs	r3, #192	; 0xc0
 800690c:	025b      	lsls	r3, r3, #9
 800690e:	401a      	ands	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	429a      	cmp	r2, r3
 8006916:	d10e      	bne.n	8006936 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	220f      	movs	r2, #15
 800691c:	401a      	ands	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006922:	429a      	cmp	r2, r3
 8006924:	d107      	bne.n	8006936 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	23f0      	movs	r3, #240	; 0xf0
 800692a:	039b      	lsls	r3, r3, #14
 800692c:	401a      	ands	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006932:	429a      	cmp	r2, r3
 8006934:	d001      	beq.n	800693a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	0018      	movs	r0, r3
 800693e:	46bd      	mov	sp, r7
 8006940:	b008      	add	sp, #32
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40021000 	.word	0x40021000

08006948 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e0bf      	b.n	8006adc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800695c:	4b61      	ldr	r3, [pc, #388]	; (8006ae4 <HAL_RCC_ClockConfig+0x19c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2201      	movs	r2, #1
 8006962:	4013      	ands	r3, r2
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d911      	bls.n	800698e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696a:	4b5e      	ldr	r3, [pc, #376]	; (8006ae4 <HAL_RCC_ClockConfig+0x19c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2201      	movs	r2, #1
 8006970:	4393      	bics	r3, r2
 8006972:	0019      	movs	r1, r3
 8006974:	4b5b      	ldr	r3, [pc, #364]	; (8006ae4 <HAL_RCC_ClockConfig+0x19c>)
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800697c:	4b59      	ldr	r3, [pc, #356]	; (8006ae4 <HAL_RCC_ClockConfig+0x19c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2201      	movs	r2, #1
 8006982:	4013      	ands	r3, r2
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d001      	beq.n	800698e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e0a6      	b.n	8006adc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2202      	movs	r2, #2
 8006994:	4013      	ands	r3, r2
 8006996:	d015      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2204      	movs	r2, #4
 800699e:	4013      	ands	r3, r2
 80069a0:	d006      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80069a2:	4b51      	ldr	r3, [pc, #324]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	4b50      	ldr	r3, [pc, #320]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 80069a8:	21e0      	movs	r1, #224	; 0xe0
 80069aa:	00c9      	lsls	r1, r1, #3
 80069ac:	430a      	orrs	r2, r1
 80069ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069b0:	4b4d      	ldr	r3, [pc, #308]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	22f0      	movs	r2, #240	; 0xf0
 80069b6:	4393      	bics	r3, r2
 80069b8:	0019      	movs	r1, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	4b4a      	ldr	r3, [pc, #296]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2201      	movs	r2, #1
 80069ca:	4013      	ands	r3, r2
 80069cc:	d04c      	beq.n	8006a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d107      	bne.n	80069e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069d6:	4b44      	ldr	r3, [pc, #272]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	2380      	movs	r3, #128	; 0x80
 80069dc:	029b      	lsls	r3, r3, #10
 80069de:	4013      	ands	r3, r2
 80069e0:	d120      	bne.n	8006a24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e07a      	b.n	8006adc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d107      	bne.n	80069fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ee:	4b3e      	ldr	r3, [pc, #248]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	2380      	movs	r3, #128	; 0x80
 80069f4:	049b      	lsls	r3, r3, #18
 80069f6:	4013      	ands	r3, r2
 80069f8:	d114      	bne.n	8006a24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e06e      	b.n	8006adc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d107      	bne.n	8006a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006a06:	4b38      	ldr	r3, [pc, #224]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8006a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a0a:	2380      	movs	r3, #128	; 0x80
 8006a0c:	025b      	lsls	r3, r3, #9
 8006a0e:	4013      	ands	r3, r2
 8006a10:	d108      	bne.n	8006a24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e062      	b.n	8006adc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a16:	4b34      	ldr	r3, [pc, #208]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	d101      	bne.n	8006a24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e05b      	b.n	8006adc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a24:	4b30      	ldr	r3, [pc, #192]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2203      	movs	r2, #3
 8006a2a:	4393      	bics	r3, r2
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	4b2d      	ldr	r3, [pc, #180]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8006a34:	430a      	orrs	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a38:	f7fc fcfa 	bl	8003430 <HAL_GetTick>
 8006a3c:	0003      	movs	r3, r0
 8006a3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a40:	e009      	b.n	8006a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a42:	f7fc fcf5 	bl	8003430 <HAL_GetTick>
 8006a46:	0002      	movs	r2, r0
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	4a27      	ldr	r2, [pc, #156]	; (8006aec <HAL_RCC_ClockConfig+0x1a4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e042      	b.n	8006adc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a56:	4b24      	ldr	r3, [pc, #144]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	220c      	movs	r2, #12
 8006a5c:	401a      	ands	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d1ec      	bne.n	8006a42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a68:	4b1e      	ldr	r3, [pc, #120]	; (8006ae4 <HAL_RCC_ClockConfig+0x19c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	4013      	ands	r3, r2
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d211      	bcs.n	8006a9a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a76:	4b1b      	ldr	r3, [pc, #108]	; (8006ae4 <HAL_RCC_ClockConfig+0x19c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	4393      	bics	r3, r2
 8006a7e:	0019      	movs	r1, r3
 8006a80:	4b18      	ldr	r3, [pc, #96]	; (8006ae4 <HAL_RCC_ClockConfig+0x19c>)
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a88:	4b16      	ldr	r3, [pc, #88]	; (8006ae4 <HAL_RCC_ClockConfig+0x19c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	4013      	ands	r3, r2
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d001      	beq.n	8006a9a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e020      	b.n	8006adc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	d009      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006aa4:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	4a11      	ldr	r2, [pc, #68]	; (8006af0 <HAL_RCC_ClockConfig+0x1a8>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	0019      	movs	r1, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006ab8:	f000 f820 	bl	8006afc <HAL_RCC_GetSysClockFreq>
 8006abc:	0001      	movs	r1, r0
 8006abe:	4b0a      	ldr	r3, [pc, #40]	; (8006ae8 <HAL_RCC_ClockConfig+0x1a0>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	091b      	lsrs	r3, r3, #4
 8006ac4:	220f      	movs	r2, #15
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	4a0a      	ldr	r2, [pc, #40]	; (8006af4 <HAL_RCC_ClockConfig+0x1ac>)
 8006aca:	5cd3      	ldrb	r3, [r2, r3]
 8006acc:	000a      	movs	r2, r1
 8006ace:	40da      	lsrs	r2, r3
 8006ad0:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <HAL_RCC_ClockConfig+0x1b0>)
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006ad4:	2003      	movs	r0, #3
 8006ad6:	f7fc fc65 	bl	80033a4 <HAL_InitTick>
  
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	0018      	movs	r0, r3
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b004      	add	sp, #16
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40022000 	.word	0x40022000
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	00001388 	.word	0x00001388
 8006af0:	fffff8ff 	.word	0xfffff8ff
 8006af4:	0800e298 	.word	0x0800e298
 8006af8:	20000000 	.word	0x20000000

08006afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006afc:	b590      	push	{r4, r7, lr}
 8006afe:	b08f      	sub	sp, #60	; 0x3c
 8006b00:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006b02:	2314      	movs	r3, #20
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	4a38      	ldr	r2, [pc, #224]	; (8006be8 <HAL_RCC_GetSysClockFreq+0xec>)
 8006b08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006b0a:	c313      	stmia	r3!, {r0, r1, r4}
 8006b0c:	6812      	ldr	r2, [r2, #0]
 8006b0e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006b10:	1d3b      	adds	r3, r7, #4
 8006b12:	4a36      	ldr	r2, [pc, #216]	; (8006bec <HAL_RCC_GetSysClockFreq+0xf0>)
 8006b14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006b16:	c313      	stmia	r3!, {r0, r1, r4}
 8006b18:	6812      	ldr	r2, [r2, #0]
 8006b1a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b20:	2300      	movs	r3, #0
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b24:	2300      	movs	r3, #0
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
 8006b28:	2300      	movs	r3, #0
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006b30:	4b2f      	ldr	r3, [pc, #188]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	220c      	movs	r2, #12
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b0c      	cmp	r3, #12
 8006b3e:	d047      	beq.n	8006bd0 <HAL_RCC_GetSysClockFreq+0xd4>
 8006b40:	d849      	bhi.n	8006bd6 <HAL_RCC_GetSysClockFreq+0xda>
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d002      	beq.n	8006b4c <HAL_RCC_GetSysClockFreq+0x50>
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d003      	beq.n	8006b52 <HAL_RCC_GetSysClockFreq+0x56>
 8006b4a:	e044      	b.n	8006bd6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b4c:	4b29      	ldr	r3, [pc, #164]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b50:	e044      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	0c9b      	lsrs	r3, r3, #18
 8006b56:	220f      	movs	r2, #15
 8006b58:	4013      	ands	r3, r2
 8006b5a:	2214      	movs	r2, #20
 8006b5c:	18ba      	adds	r2, r7, r2
 8006b5e:	5cd3      	ldrb	r3, [r2, r3]
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006b62:	4b23      	ldr	r3, [pc, #140]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b66:	220f      	movs	r2, #15
 8006b68:	4013      	ands	r3, r2
 8006b6a:	1d3a      	adds	r2, r7, #4
 8006b6c:	5cd3      	ldrb	r3, [r2, r3]
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b72:	23c0      	movs	r3, #192	; 0xc0
 8006b74:	025b      	lsls	r3, r3, #9
 8006b76:	401a      	ands	r2, r3
 8006b78:	2380      	movs	r3, #128	; 0x80
 8006b7a:	025b      	lsls	r3, r3, #9
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d109      	bne.n	8006b94 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b82:	481c      	ldr	r0, [pc, #112]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b84:	f7f9 fad2 	bl	800012c <__udivsi3>
 8006b88:	0003      	movs	r3, r0
 8006b8a:	001a      	movs	r2, r3
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	4353      	muls	r3, r2
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	e01a      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b96:	23c0      	movs	r3, #192	; 0xc0
 8006b98:	025b      	lsls	r3, r3, #9
 8006b9a:	401a      	ands	r2, r3
 8006b9c:	23c0      	movs	r3, #192	; 0xc0
 8006b9e:	025b      	lsls	r3, r3, #9
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d109      	bne.n	8006bb8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba6:	4814      	ldr	r0, [pc, #80]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006ba8:	f7f9 fac0 	bl	800012c <__udivsi3>
 8006bac:	0003      	movs	r3, r0
 8006bae:	001a      	movs	r2, r3
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	4353      	muls	r3, r2
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bba:	4810      	ldr	r0, [pc, #64]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x100>)
 8006bbc:	f7f9 fab6 	bl	800012c <__udivsi3>
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	4353      	muls	r3, r2
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bcc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bce:	e005      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006bd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bd4:	e002      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bd6:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x100>)
 8006bd8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006bda:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006bde:	0018      	movs	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	b00f      	add	sp, #60	; 0x3c
 8006be4:	bd90      	pop	{r4, r7, pc}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	0800e154 	.word	0x0800e154
 8006bec:	0800e164 	.word	0x0800e164
 8006bf0:	40021000 	.word	0x40021000
 8006bf4:	00f42400 	.word	0x00f42400
 8006bf8:	02dc6c00 	.word	0x02dc6c00
 8006bfc:	007a1200 	.word	0x007a1200

08006c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c04:	4b02      	ldr	r3, [pc, #8]	; (8006c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c06:	681b      	ldr	r3, [r3, #0]
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	20000000 	.word	0x20000000

08006c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006c18:	f7ff fff2 	bl	8006c00 <HAL_RCC_GetHCLKFreq>
 8006c1c:	0001      	movs	r1, r0
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	2207      	movs	r2, #7
 8006c26:	4013      	ands	r3, r2
 8006c28:	4a04      	ldr	r2, [pc, #16]	; (8006c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c2a:	5cd3      	ldrb	r3, [r2, r3]
 8006c2c:	40d9      	lsrs	r1, r3
 8006c2e:	000b      	movs	r3, r1
}    
 8006c30:	0018      	movs	r0, r3
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	46c0      	nop			; (mov r8, r8)
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	0800e2a8 	.word	0x0800e2a8

08006c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	2380      	movs	r3, #128	; 0x80
 8006c56:	025b      	lsls	r3, r3, #9
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d100      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006c5c:	e08e      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006c5e:	2017      	movs	r0, #23
 8006c60:	183b      	adds	r3, r7, r0
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c66:	4b6e      	ldr	r3, [pc, #440]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c68:	69da      	ldr	r2, [r3, #28]
 8006c6a:	2380      	movs	r3, #128	; 0x80
 8006c6c:	055b      	lsls	r3, r3, #21
 8006c6e:	4013      	ands	r3, r2
 8006c70:	d110      	bne.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c72:	4b6b      	ldr	r3, [pc, #428]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c74:	69da      	ldr	r2, [r3, #28]
 8006c76:	4b6a      	ldr	r3, [pc, #424]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c78:	2180      	movs	r1, #128	; 0x80
 8006c7a:	0549      	lsls	r1, r1, #21
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	61da      	str	r2, [r3, #28]
 8006c80:	4b67      	ldr	r3, [pc, #412]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	055b      	lsls	r3, r3, #21
 8006c88:	4013      	ands	r3, r2
 8006c8a:	60bb      	str	r3, [r7, #8]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c8e:	183b      	adds	r3, r7, r0
 8006c90:	2201      	movs	r2, #1
 8006c92:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c94:	4b63      	ldr	r3, [pc, #396]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	2380      	movs	r3, #128	; 0x80
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d11a      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ca0:	4b60      	ldr	r3, [pc, #384]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	4b5f      	ldr	r3, [pc, #380]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006ca6:	2180      	movs	r1, #128	; 0x80
 8006ca8:	0049      	lsls	r1, r1, #1
 8006caa:	430a      	orrs	r2, r1
 8006cac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cae:	f7fc fbbf 	bl	8003430 <HAL_GetTick>
 8006cb2:	0003      	movs	r3, r0
 8006cb4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cb6:	e008      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cb8:	f7fc fbba 	bl	8003430 <HAL_GetTick>
 8006cbc:	0002      	movs	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b64      	cmp	r3, #100	; 0x64
 8006cc4:	d901      	bls.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e0a6      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cca:	4b56      	ldr	r3, [pc, #344]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	2380      	movs	r3, #128	; 0x80
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	d0f0      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cd6:	4b52      	ldr	r3, [pc, #328]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cd8:	6a1a      	ldr	r2, [r3, #32]
 8006cda:	23c0      	movs	r3, #192	; 0xc0
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4013      	ands	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d034      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	23c0      	movs	r3, #192	; 0xc0
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d02c      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cf8:	4b49      	ldr	r3, [pc, #292]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	4a4a      	ldr	r2, [pc, #296]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d02:	4b47      	ldr	r3, [pc, #284]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d04:	6a1a      	ldr	r2, [r3, #32]
 8006d06:	4b46      	ldr	r3, [pc, #280]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d08:	2180      	movs	r1, #128	; 0x80
 8006d0a:	0249      	lsls	r1, r1, #9
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d10:	4b43      	ldr	r3, [pc, #268]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	4b42      	ldr	r3, [pc, #264]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d16:	4945      	ldr	r1, [pc, #276]	; (8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006d18:	400a      	ands	r2, r1
 8006d1a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006d1c:	4b40      	ldr	r3, [pc, #256]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2201      	movs	r2, #1
 8006d26:	4013      	ands	r3, r2
 8006d28:	d013      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d2a:	f7fc fb81 	bl	8003430 <HAL_GetTick>
 8006d2e:	0003      	movs	r3, r0
 8006d30:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d32:	e009      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d34:	f7fc fb7c 	bl	8003430 <HAL_GetTick>
 8006d38:	0002      	movs	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	4a3c      	ldr	r2, [pc, #240]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e067      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d48:	4b35      	ldr	r3, [pc, #212]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d0f0      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d52:	4b33      	ldr	r3, [pc, #204]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	4a34      	ldr	r2, [pc, #208]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	0019      	movs	r1, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	4b2f      	ldr	r3, [pc, #188]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d62:	430a      	orrs	r2, r1
 8006d64:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006d66:	2317      	movs	r3, #23
 8006d68:	18fb      	adds	r3, r7, r3
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d105      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d70:	4b2b      	ldr	r3, [pc, #172]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d72:	69da      	ldr	r2, [r3, #28]
 8006d74:	4b2a      	ldr	r3, [pc, #168]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d76:	492f      	ldr	r1, [pc, #188]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006d78:	400a      	ands	r2, r1
 8006d7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2201      	movs	r2, #1
 8006d82:	4013      	ands	r3, r2
 8006d84:	d009      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d86:	4b26      	ldr	r3, [pc, #152]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	4393      	bics	r3, r2
 8006d8e:	0019      	movs	r1, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	4b22      	ldr	r3, [pc, #136]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d96:	430a      	orrs	r2, r1
 8006d98:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	4013      	ands	r3, r2
 8006da2:	d009      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006da4:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da8:	4a23      	ldr	r2, [pc, #140]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	0019      	movs	r1, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	4b1b      	ldr	r3, [pc, #108]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006db4:	430a      	orrs	r2, r1
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	d009      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dc2:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	2210      	movs	r2, #16
 8006dc8:	4393      	bics	r3, r2
 8006dca:	0019      	movs	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	029b      	lsls	r3, r3, #10
 8006dde:	4013      	ands	r3, r2
 8006de0:	d009      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006de2:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de6:	2280      	movs	r2, #128	; 0x80
 8006de8:	4393      	bics	r3, r2
 8006dea:	0019      	movs	r1, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699a      	ldr	r2, [r3, #24]
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006df2:	430a      	orrs	r2, r1
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	4013      	ands	r3, r2
 8006e00:	d009      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e02:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	2240      	movs	r2, #64	; 0x40
 8006e08:	4393      	bics	r3, r2
 8006e0a:	0019      	movs	r1, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695a      	ldr	r2, [r3, #20]
 8006e10:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e12:	430a      	orrs	r2, r1
 8006e14:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	0018      	movs	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b006      	add	sp, #24
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40021000 	.word	0x40021000
 8006e24:	40007000 	.word	0x40007000
 8006e28:	fffffcff 	.word	0xfffffcff
 8006e2c:	fffeffff 	.word	0xfffeffff
 8006e30:	00001388 	.word	0x00001388
 8006e34:	efffffff 	.word	0xefffffff
 8006e38:	fffcffff 	.word	0xfffcffff

08006e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e0a8      	b.n	8006fa0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	2382      	movs	r3, #130	; 0x82
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d009      	beq.n	8006e76 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	61da      	str	r2, [r3, #28]
 8006e68:	e005      	b.n	8006e76 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	225d      	movs	r2, #93	; 0x5d
 8006e80:	5c9b      	ldrb	r3, [r3, r2]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d107      	bne.n	8006e98 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	225c      	movs	r2, #92	; 0x5c
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	0018      	movs	r0, r3
 8006e94:	f7fb fe16 	bl	8002ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	225d      	movs	r2, #93	; 0x5d
 8006e9c:	2102      	movs	r1, #2
 8006e9e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2140      	movs	r1, #64	; 0x40
 8006eac:	438a      	bics	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	23e0      	movs	r3, #224	; 0xe0
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d902      	bls.n	8006ec2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	e002      	b.n	8006ec8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ec2:	2380      	movs	r3, #128	; 0x80
 8006ec4:	015b      	lsls	r3, r3, #5
 8006ec6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	23f0      	movs	r3, #240	; 0xf0
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d008      	beq.n	8006ee6 <HAL_SPI_Init+0xaa>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	23e0      	movs	r3, #224	; 0xe0
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d002      	beq.n	8006ee6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	2382      	movs	r3, #130	; 0x82
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	401a      	ands	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6899      	ldr	r1, [r3, #8]
 8006ef4:	2384      	movs	r3, #132	; 0x84
 8006ef6:	021b      	lsls	r3, r3, #8
 8006ef8:	400b      	ands	r3, r1
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2102      	movs	r1, #2
 8006f02:	400b      	ands	r3, r1
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	400b      	ands	r3, r1
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6999      	ldr	r1, [r3, #24]
 8006f14:	2380      	movs	r3, #128	; 0x80
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	400b      	ands	r3, r1
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	2138      	movs	r1, #56	; 0x38
 8006f22:	400b      	ands	r3, r1
 8006f24:	431a      	orrs	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	2180      	movs	r1, #128	; 0x80
 8006f2c:	400b      	ands	r3, r1
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	0011      	movs	r1, r2
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f36:	2380      	movs	r3, #128	; 0x80
 8006f38:	019b      	lsls	r3, r3, #6
 8006f3a:	401a      	ands	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	0c1b      	lsrs	r3, r3, #16
 8006f4a:	2204      	movs	r2, #4
 8006f4c:	401a      	ands	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	2110      	movs	r1, #16
 8006f54:	400b      	ands	r3, r1
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	2108      	movs	r1, #8
 8006f5e:	400b      	ands	r3, r1
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68d9      	ldr	r1, [r3, #12]
 8006f66:	23f0      	movs	r3, #240	; 0xf0
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	400b      	ands	r3, r1
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	0011      	movs	r1, r2
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	2380      	movs	r3, #128	; 0x80
 8006f74:	015b      	lsls	r3, r3, #5
 8006f76:	401a      	ands	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69da      	ldr	r2, [r3, #28]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4907      	ldr	r1, [pc, #28]	; (8006fa8 <HAL_SPI_Init+0x16c>)
 8006f8c:	400a      	ands	r2, r1
 8006f8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	225d      	movs	r2, #93	; 0x5d
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	b004      	add	sp, #16
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	fffff7ff 	.word	0xfffff7ff

08006fac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	1dbb      	adds	r3, r7, #6
 8006fba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fbc:	231f      	movs	r3, #31
 8006fbe:	18fb      	adds	r3, r7, r3
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	225c      	movs	r2, #92	; 0x5c
 8006fc8:	5c9b      	ldrb	r3, [r3, r2]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d101      	bne.n	8006fd2 <HAL_SPI_Transmit+0x26>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e140      	b.n	8007254 <HAL_SPI_Transmit+0x2a8>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	225c      	movs	r2, #92	; 0x5c
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fda:	f7fc fa29 	bl	8003430 <HAL_GetTick>
 8006fde:	0003      	movs	r3, r0
 8006fe0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006fe2:	2316      	movs	r3, #22
 8006fe4:	18fb      	adds	r3, r7, r3
 8006fe6:	1dba      	adds	r2, r7, #6
 8006fe8:	8812      	ldrh	r2, [r2, #0]
 8006fea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	225d      	movs	r2, #93	; 0x5d
 8006ff0:	5c9b      	ldrb	r3, [r3, r2]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d004      	beq.n	8007002 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006ff8:	231f      	movs	r3, #31
 8006ffa:	18fb      	adds	r3, r7, r3
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	701a      	strb	r2, [r3, #0]
    goto error;
 8007000:	e11d      	b.n	800723e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_SPI_Transmit+0x64>
 8007008:	1dbb      	adds	r3, r7, #6
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007010:	231f      	movs	r3, #31
 8007012:	18fb      	adds	r3, r7, r3
 8007014:	2201      	movs	r2, #1
 8007016:	701a      	strb	r2, [r3, #0]
    goto error;
 8007018:	e111      	b.n	800723e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	225d      	movs	r2, #93	; 0x5d
 800701e:	2103      	movs	r1, #3
 8007020:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1dba      	adds	r2, r7, #6
 8007032:	8812      	ldrh	r2, [r2, #0]
 8007034:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	1dba      	adds	r2, r7, #6
 800703a:	8812      	ldrh	r2, [r2, #0]
 800703c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2244      	movs	r2, #68	; 0x44
 8007048:	2100      	movs	r1, #0
 800704a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2246      	movs	r2, #70	; 0x46
 8007050:	2100      	movs	r1, #0
 8007052:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	429a      	cmp	r2, r3
 800706a:	d110      	bne.n	800708e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2140      	movs	r1, #64	; 0x40
 8007078:	438a      	bics	r2, r1
 800707a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2180      	movs	r1, #128	; 0x80
 8007088:	01c9      	lsls	r1, r1, #7
 800708a:	430a      	orrs	r2, r1
 800708c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2240      	movs	r2, #64	; 0x40
 8007096:	4013      	ands	r3, r2
 8007098:	2b40      	cmp	r3, #64	; 0x40
 800709a:	d007      	beq.n	80070ac <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2140      	movs	r1, #64	; 0x40
 80070a8:	430a      	orrs	r2, r1
 80070aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	23e0      	movs	r3, #224	; 0xe0
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d94e      	bls.n	8007156 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <HAL_SPI_Transmit+0x11e>
 80070c0:	2316      	movs	r3, #22
 80070c2:	18fb      	adds	r3, r7, r3
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d13f      	bne.n	800714a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	881a      	ldrh	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	1c9a      	adds	r2, r3, #2
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070ee:	e02c      	b.n	800714a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2202      	movs	r2, #2
 80070f8:	4013      	ands	r3, r2
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d112      	bne.n	8007124 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	881a      	ldrh	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710e:	1c9a      	adds	r2, r3, #2
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007122:	e012      	b.n	800714a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007124:	f7fc f984 	bl	8003430 <HAL_GetTick>
 8007128:	0002      	movs	r2, r0
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d802      	bhi.n	800713a <HAL_SPI_Transmit+0x18e>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	d102      	bne.n	8007140 <HAL_SPI_Transmit+0x194>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8007140:	231f      	movs	r3, #31
 8007142:	18fb      	adds	r3, r7, r3
 8007144:	2203      	movs	r2, #3
 8007146:	701a      	strb	r2, [r3, #0]
          goto error;
 8007148:	e079      	b.n	800723e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1cd      	bne.n	80070f0 <HAL_SPI_Transmit+0x144>
 8007154:	e04f      	b.n	80071f6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d004      	beq.n	8007168 <HAL_SPI_Transmit+0x1bc>
 800715e:	2316      	movs	r3, #22
 8007160:	18fb      	adds	r3, r7, r3
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d141      	bne.n	80071ec <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	330c      	adds	r3, #12
 8007172:	7812      	ldrb	r2, [r2, #0]
 8007174:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	b29a      	uxth	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800718e:	e02d      	b.n	80071ec <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2202      	movs	r2, #2
 8007198:	4013      	ands	r3, r2
 800719a:	2b02      	cmp	r3, #2
 800719c:	d113      	bne.n	80071c6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	330c      	adds	r3, #12
 80071a8:	7812      	ldrb	r2, [r2, #0]
 80071aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	3b01      	subs	r3, #1
 80071be:	b29a      	uxth	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071c4:	e012      	b.n	80071ec <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071c6:	f7fc f933 	bl	8003430 <HAL_GetTick>
 80071ca:	0002      	movs	r2, r0
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d802      	bhi.n	80071dc <HAL_SPI_Transmit+0x230>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	3301      	adds	r3, #1
 80071da:	d102      	bne.n	80071e2 <HAL_SPI_Transmit+0x236>
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80071e2:	231f      	movs	r3, #31
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	2203      	movs	r2, #3
 80071e8:	701a      	strb	r2, [r3, #0]
          goto error;
 80071ea:	e028      	b.n	800723e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1cc      	bne.n	8007190 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	0018      	movs	r0, r3
 80071fe:	f000 fb2f 	bl	8007860 <SPI_EndRxTxTransaction>
 8007202:	1e03      	subs	r3, r0, #0
 8007204:	d002      	beq.n	800720c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2220      	movs	r2, #32
 800720a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007214:	2300      	movs	r3, #0
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	613b      	str	r3, [r7, #16]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007232:	231f      	movs	r3, #31
 8007234:	18fb      	adds	r3, r7, r3
 8007236:	2201      	movs	r2, #1
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	e000      	b.n	800723e <HAL_SPI_Transmit+0x292>
  }

error:
 800723c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	225d      	movs	r2, #93	; 0x5d
 8007242:	2101      	movs	r1, #1
 8007244:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	225c      	movs	r2, #92	; 0x5c
 800724a:	2100      	movs	r1, #0
 800724c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800724e:	231f      	movs	r3, #31
 8007250:	18fb      	adds	r3, r7, r3
 8007252:	781b      	ldrb	r3, [r3, #0]
}
 8007254:	0018      	movs	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	b008      	add	sp, #32
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	; 0x28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	001a      	movs	r2, r3
 800726a:	1cbb      	adds	r3, r7, #2
 800726c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800726e:	2301      	movs	r3, #1
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007272:	2323      	movs	r3, #35	; 0x23
 8007274:	18fb      	adds	r3, r7, r3
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	225c      	movs	r2, #92	; 0x5c
 800727e:	5c9b      	ldrb	r3, [r3, r2]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d101      	bne.n	8007288 <HAL_SPI_TransmitReceive+0x2c>
 8007284:	2302      	movs	r3, #2
 8007286:	e1b5      	b.n	80075f4 <HAL_SPI_TransmitReceive+0x398>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	225c      	movs	r2, #92	; 0x5c
 800728c:	2101      	movs	r1, #1
 800728e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007290:	f7fc f8ce 	bl	8003430 <HAL_GetTick>
 8007294:	0003      	movs	r3, r0
 8007296:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007298:	201b      	movs	r0, #27
 800729a:	183b      	adds	r3, r7, r0
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	215d      	movs	r1, #93	; 0x5d
 80072a0:	5c52      	ldrb	r2, [r2, r1]
 80072a2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80072aa:	2312      	movs	r3, #18
 80072ac:	18fb      	adds	r3, r7, r3
 80072ae:	1cba      	adds	r2, r7, #2
 80072b0:	8812      	ldrh	r2, [r2, #0]
 80072b2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072b4:	183b      	adds	r3, r7, r0
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d011      	beq.n	80072e0 <HAL_SPI_TransmitReceive+0x84>
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	2382      	movs	r3, #130	; 0x82
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d107      	bne.n	80072d6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <HAL_SPI_TransmitReceive+0x7a>
 80072ce:	183b      	adds	r3, r7, r0
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d004      	beq.n	80072e0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80072d6:	2323      	movs	r3, #35	; 0x23
 80072d8:	18fb      	adds	r3, r7, r3
 80072da:	2202      	movs	r2, #2
 80072dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80072de:	e17e      	b.n	80075de <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d006      	beq.n	80072f4 <HAL_SPI_TransmitReceive+0x98>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_SPI_TransmitReceive+0x98>
 80072ec:	1cbb      	adds	r3, r7, #2
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d104      	bne.n	80072fe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80072f4:	2323      	movs	r3, #35	; 0x23
 80072f6:	18fb      	adds	r3, r7, r3
 80072f8:	2201      	movs	r2, #1
 80072fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80072fc:	e16f      	b.n	80075de <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	225d      	movs	r2, #93	; 0x5d
 8007302:	5c9b      	ldrb	r3, [r3, r2]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b04      	cmp	r3, #4
 8007308:	d003      	beq.n	8007312 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	225d      	movs	r2, #93	; 0x5d
 800730e:	2105      	movs	r1, #5
 8007310:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	1cba      	adds	r2, r7, #2
 8007322:	2146      	movs	r1, #70	; 0x46
 8007324:	8812      	ldrh	r2, [r2, #0]
 8007326:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	1cba      	adds	r2, r7, #2
 800732c:	2144      	movs	r1, #68	; 0x44
 800732e:	8812      	ldrh	r2, [r2, #0]
 8007330:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	1cba      	adds	r2, r7, #2
 800733c:	8812      	ldrh	r2, [r2, #0]
 800733e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	1cba      	adds	r2, r7, #2
 8007344:	8812      	ldrh	r2, [r2, #0]
 8007346:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	23e0      	movs	r3, #224	; 0xe0
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	429a      	cmp	r2, r3
 800735e:	d908      	bls.n	8007372 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	49a4      	ldr	r1, [pc, #656]	; (80075fc <HAL_SPI_TransmitReceive+0x3a0>)
 800736c:	400a      	ands	r2, r1
 800736e:	605a      	str	r2, [r3, #4]
 8007370:	e008      	b.n	8007384 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2180      	movs	r1, #128	; 0x80
 800737e:	0149      	lsls	r1, r1, #5
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2240      	movs	r2, #64	; 0x40
 800738c:	4013      	ands	r3, r2
 800738e:	2b40      	cmp	r3, #64	; 0x40
 8007390:	d007      	beq.n	80073a2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2140      	movs	r1, #64	; 0x40
 800739e:	430a      	orrs	r2, r1
 80073a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	23e0      	movs	r3, #224	; 0xe0
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d800      	bhi.n	80073b0 <HAL_SPI_TransmitReceive+0x154>
 80073ae:	e07f      	b.n	80074b0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d005      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0x168>
 80073b8:	2312      	movs	r3, #18
 80073ba:	18fb      	adds	r3, r7, r3
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d000      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0x168>
 80073c2:	e069      	b.n	8007498 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	881a      	ldrh	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	1c9a      	adds	r2, r3, #2
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073e8:	e056      	b.n	8007498 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	2202      	movs	r2, #2
 80073f2:	4013      	ands	r3, r2
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d11b      	bne.n	8007430 <HAL_SPI_TransmitReceive+0x1d4>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d016      	beq.n	8007430 <HAL_SPI_TransmitReceive+0x1d4>
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	2b01      	cmp	r3, #1
 8007406:	d113      	bne.n	8007430 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740c:	881a      	ldrh	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007418:	1c9a      	adds	r2, r3, #2
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2201      	movs	r2, #1
 8007438:	4013      	ands	r3, r2
 800743a:	2b01      	cmp	r3, #1
 800743c:	d11c      	bne.n	8007478 <HAL_SPI_TransmitReceive+0x21c>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2246      	movs	r2, #70	; 0x46
 8007442:	5a9b      	ldrh	r3, [r3, r2]
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d016      	beq.n	8007478 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68da      	ldr	r2, [r3, #12]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	b292      	uxth	r2, r2
 8007456:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	1c9a      	adds	r2, r3, #2
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2246      	movs	r2, #70	; 0x46
 8007466:	5a9b      	ldrh	r3, [r3, r2]
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	b299      	uxth	r1, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2246      	movs	r2, #70	; 0x46
 8007472:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007474:	2301      	movs	r3, #1
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007478:	f7fb ffda 	bl	8003430 <HAL_GetTick>
 800747c:	0002      	movs	r2, r0
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007484:	429a      	cmp	r2, r3
 8007486:	d807      	bhi.n	8007498 <HAL_SPI_TransmitReceive+0x23c>
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	3301      	adds	r3, #1
 800748c:	d004      	beq.n	8007498 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800748e:	2323      	movs	r3, #35	; 0x23
 8007490:	18fb      	adds	r3, r7, r3
 8007492:	2203      	movs	r2, #3
 8007494:	701a      	strb	r2, [r3, #0]
        goto error;
 8007496:	e0a2      	b.n	80075de <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1a3      	bne.n	80073ea <HAL_SPI_TransmitReceive+0x18e>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2246      	movs	r2, #70	; 0x46
 80074a6:	5a9b      	ldrh	r3, [r3, r2]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d19d      	bne.n	80073ea <HAL_SPI_TransmitReceive+0x18e>
 80074ae:	e085      	b.n	80075bc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <HAL_SPI_TransmitReceive+0x268>
 80074b8:	2312      	movs	r3, #18
 80074ba:	18fb      	adds	r3, r7, r3
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d000      	beq.n	80074c4 <HAL_SPI_TransmitReceive+0x268>
 80074c2:	e070      	b.n	80075a6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	330c      	adds	r3, #12
 80074ce:	7812      	ldrb	r2, [r2, #0]
 80074d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074ea:	e05c      	b.n	80075a6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	2202      	movs	r2, #2
 80074f4:	4013      	ands	r3, r2
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d11c      	bne.n	8007534 <HAL_SPI_TransmitReceive+0x2d8>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d017      	beq.n	8007534 <HAL_SPI_TransmitReceive+0x2d8>
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	2b01      	cmp	r3, #1
 8007508:	d114      	bne.n	8007534 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	330c      	adds	r3, #12
 8007514:	7812      	ldrb	r2, [r2, #0]
 8007516:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	2201      	movs	r2, #1
 800753c:	4013      	ands	r3, r2
 800753e:	2b01      	cmp	r3, #1
 8007540:	d11e      	bne.n	8007580 <HAL_SPI_TransmitReceive+0x324>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2246      	movs	r2, #70	; 0x46
 8007546:	5a9b      	ldrh	r3, [r3, r2]
 8007548:	b29b      	uxth	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d018      	beq.n	8007580 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	330c      	adds	r3, #12
 8007554:	001a      	movs	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	7812      	ldrb	r2, [r2, #0]
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2246      	movs	r2, #70	; 0x46
 800756e:	5a9b      	ldrh	r3, [r3, r2]
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b299      	uxth	r1, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2246      	movs	r2, #70	; 0x46
 800757a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800757c:	2301      	movs	r3, #1
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007580:	f7fb ff56 	bl	8003430 <HAL_GetTick>
 8007584:	0002      	movs	r2, r0
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758c:	429a      	cmp	r2, r3
 800758e:	d802      	bhi.n	8007596 <HAL_SPI_TransmitReceive+0x33a>
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	3301      	adds	r3, #1
 8007594:	d102      	bne.n	800759c <HAL_SPI_TransmitReceive+0x340>
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	2b00      	cmp	r3, #0
 800759a:	d104      	bne.n	80075a6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800759c:	2323      	movs	r3, #35	; 0x23
 800759e:	18fb      	adds	r3, r7, r3
 80075a0:	2203      	movs	r2, #3
 80075a2:	701a      	strb	r2, [r3, #0]
        goto error;
 80075a4:	e01b      	b.n	80075de <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d19d      	bne.n	80074ec <HAL_SPI_TransmitReceive+0x290>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2246      	movs	r2, #70	; 0x46
 80075b4:	5a9b      	ldrh	r3, [r3, r2]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d197      	bne.n	80074ec <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	0018      	movs	r0, r3
 80075c4:	f000 f94c 	bl	8007860 <SPI_EndRxTxTransaction>
 80075c8:	1e03      	subs	r3, r0, #0
 80075ca:	d007      	beq.n	80075dc <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80075cc:	2323      	movs	r3, #35	; 0x23
 80075ce:	18fb      	adds	r3, r7, r3
 80075d0:	2201      	movs	r2, #1
 80075d2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2220      	movs	r2, #32
 80075d8:	661a      	str	r2, [r3, #96]	; 0x60
 80075da:	e000      	b.n	80075de <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80075dc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	225d      	movs	r2, #93	; 0x5d
 80075e2:	2101      	movs	r1, #1
 80075e4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	225c      	movs	r2, #92	; 0x5c
 80075ea:	2100      	movs	r1, #0
 80075ec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80075ee:	2323      	movs	r3, #35	; 0x23
 80075f0:	18fb      	adds	r3, r7, r3
 80075f2:	781b      	ldrb	r3, [r3, #0]
}
 80075f4:	0018      	movs	r0, r3
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b00a      	add	sp, #40	; 0x28
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	ffffefff 	.word	0xffffefff

08007600 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	1dfb      	adds	r3, r7, #7
 800760e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007610:	f7fb ff0e 	bl	8003430 <HAL_GetTick>
 8007614:	0002      	movs	r2, r0
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	18d3      	adds	r3, r2, r3
 800761e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007620:	f7fb ff06 	bl	8003430 <HAL_GetTick>
 8007624:	0003      	movs	r3, r0
 8007626:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007628:	4b3a      	ldr	r3, [pc, #232]	; (8007714 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	015b      	lsls	r3, r3, #5
 800762e:	0d1b      	lsrs	r3, r3, #20
 8007630:	69fa      	ldr	r2, [r7, #28]
 8007632:	4353      	muls	r3, r2
 8007634:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007636:	e058      	b.n	80076ea <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	3301      	adds	r3, #1
 800763c:	d055      	beq.n	80076ea <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800763e:	f7fb fef7 	bl	8003430 <HAL_GetTick>
 8007642:	0002      	movs	r2, r0
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	429a      	cmp	r2, r3
 800764c:	d902      	bls.n	8007654 <SPI_WaitFlagStateUntilTimeout+0x54>
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d142      	bne.n	80076da <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	21e0      	movs	r1, #224	; 0xe0
 8007660:	438a      	bics	r2, r1
 8007662:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	2382      	movs	r3, #130	; 0x82
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	429a      	cmp	r2, r3
 800766e:	d113      	bne.n	8007698 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	429a      	cmp	r2, r3
 800767a:	d005      	beq.n	8007688 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	2380      	movs	r3, #128	; 0x80
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	429a      	cmp	r2, r3
 8007686:	d107      	bne.n	8007698 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2140      	movs	r1, #64	; 0x40
 8007694:	438a      	bics	r2, r1
 8007696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800769c:	2380      	movs	r3, #128	; 0x80
 800769e:	019b      	lsls	r3, r3, #6
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d110      	bne.n	80076c6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	491a      	ldr	r1, [pc, #104]	; (8007718 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80076b0:	400a      	ands	r2, r1
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	0189      	lsls	r1, r1, #6
 80076c2:	430a      	orrs	r2, r1
 80076c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	225d      	movs	r2, #93	; 0x5d
 80076ca:	2101      	movs	r1, #1
 80076cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	225c      	movs	r2, #92	; 0x5c
 80076d2:	2100      	movs	r1, #0
 80076d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e017      	b.n	800770a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	4013      	ands	r3, r2
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	425a      	negs	r2, r3
 80076fa:	4153      	adcs	r3, r2
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	001a      	movs	r2, r3
 8007700:	1dfb      	adds	r3, r7, #7
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d197      	bne.n	8007638 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	0018      	movs	r0, r3
 800770c:	46bd      	mov	sp, r7
 800770e:	b008      	add	sp, #32
 8007710:	bd80      	pop	{r7, pc}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	20000000 	.word	0x20000000
 8007718:	ffffdfff 	.word	0xffffdfff

0800771c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08a      	sub	sp, #40	; 0x28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800772a:	2317      	movs	r3, #23
 800772c:	18fb      	adds	r3, r7, r3
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007732:	f7fb fe7d 	bl	8003430 <HAL_GetTick>
 8007736:	0002      	movs	r2, r0
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	1a9b      	subs	r3, r3, r2
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	18d3      	adds	r3, r2, r3
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007742:	f7fb fe75 	bl	8003430 <HAL_GetTick>
 8007746:	0003      	movs	r3, r0
 8007748:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	330c      	adds	r3, #12
 8007750:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007752:	4b41      	ldr	r3, [pc, #260]	; (8007858 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	0013      	movs	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	189b      	adds	r3, r3, r2
 800775c:	00da      	lsls	r2, r3, #3
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	0d1b      	lsrs	r3, r3, #20
 8007762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007764:	4353      	muls	r3, r2
 8007766:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007768:	e068      	b.n	800783c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	23c0      	movs	r3, #192	; 0xc0
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	429a      	cmp	r2, r3
 8007772:	d10a      	bne.n	800778a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d107      	bne.n	800778a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b2da      	uxtb	r2, r3
 8007780:	2117      	movs	r1, #23
 8007782:	187b      	adds	r3, r7, r1
 8007784:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007786:	187b      	adds	r3, r7, r1
 8007788:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	3301      	adds	r3, #1
 800778e:	d055      	beq.n	800783c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007790:	f7fb fe4e 	bl	8003430 <HAL_GetTick>
 8007794:	0002      	movs	r2, r0
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779c:	429a      	cmp	r2, r3
 800779e:	d902      	bls.n	80077a6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d142      	bne.n	800782c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	21e0      	movs	r1, #224	; 0xe0
 80077b2:	438a      	bics	r2, r1
 80077b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	2382      	movs	r3, #130	; 0x82
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	429a      	cmp	r2, r3
 80077c0:	d113      	bne.n	80077ea <SPI_WaitFifoStateUntilTimeout+0xce>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	2380      	movs	r3, #128	; 0x80
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d005      	beq.n	80077da <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689a      	ldr	r2, [r3, #8]
 80077d2:	2380      	movs	r3, #128	; 0x80
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d107      	bne.n	80077ea <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2140      	movs	r1, #64	; 0x40
 80077e6:	438a      	bics	r2, r1
 80077e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ee:	2380      	movs	r3, #128	; 0x80
 80077f0:	019b      	lsls	r3, r3, #6
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d110      	bne.n	8007818 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4916      	ldr	r1, [pc, #88]	; (800785c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007802:	400a      	ands	r2, r1
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2180      	movs	r1, #128	; 0x80
 8007812:	0189      	lsls	r1, r1, #6
 8007814:	430a      	orrs	r2, r1
 8007816:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	225d      	movs	r2, #93	; 0x5d
 800781c:	2101      	movs	r1, #1
 800781e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	225c      	movs	r2, #92	; 0x5c
 8007824:	2100      	movs	r1, #0
 8007826:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e010      	b.n	800784e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	3b01      	subs	r3, #1
 800783a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	4013      	ands	r3, r2
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	429a      	cmp	r2, r3
 800784a:	d18e      	bne.n	800776a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	0018      	movs	r0, r3
 8007850:	46bd      	mov	sp, r7
 8007852:	b00a      	add	sp, #40	; 0x28
 8007854:	bd80      	pop	{r7, pc}
 8007856:	46c0      	nop			; (mov r8, r8)
 8007858:	20000000 	.word	0x20000000
 800785c:	ffffdfff 	.word	0xffffdfff

08007860 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	23c0      	movs	r3, #192	; 0xc0
 8007870:	0159      	lsls	r1, r3, #5
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	0013      	movs	r3, r2
 800787a:	2200      	movs	r2, #0
 800787c:	f7ff ff4e 	bl	800771c <SPI_WaitFifoStateUntilTimeout>
 8007880:	1e03      	subs	r3, r0, #0
 8007882:	d007      	beq.n	8007894 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007888:	2220      	movs	r2, #32
 800788a:	431a      	orrs	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e027      	b.n	80078e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	0013      	movs	r3, r2
 800789e:	2200      	movs	r2, #0
 80078a0:	2180      	movs	r1, #128	; 0x80
 80078a2:	f7ff fead 	bl	8007600 <SPI_WaitFlagStateUntilTimeout>
 80078a6:	1e03      	subs	r3, r0, #0
 80078a8:	d007      	beq.n	80078ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ae:	2220      	movs	r2, #32
 80078b0:	431a      	orrs	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e014      	b.n	80078e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	23c0      	movs	r3, #192	; 0xc0
 80078be:	00d9      	lsls	r1, r3, #3
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	0013      	movs	r3, r2
 80078c8:	2200      	movs	r2, #0
 80078ca:	f7ff ff27 	bl	800771c <SPI_WaitFifoStateUntilTimeout>
 80078ce:	1e03      	subs	r3, r0, #0
 80078d0:	d007      	beq.n	80078e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d6:	2220      	movs	r2, #32
 80078d8:	431a      	orrs	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e000      	b.n	80078e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	0018      	movs	r0, r3
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b004      	add	sp, #16
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e042      	b.n	8007984 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	223d      	movs	r2, #61	; 0x3d
 8007902:	5c9b      	ldrb	r3, [r3, r2]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d107      	bne.n	800791a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	223c      	movs	r2, #60	; 0x3c
 800790e:	2100      	movs	r1, #0
 8007910:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	0018      	movs	r0, r3
 8007916:	f7fb f923 	bl	8002b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	223d      	movs	r2, #61	; 0x3d
 800791e:	2102      	movs	r1, #2
 8007920:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3304      	adds	r3, #4
 800792a:	0019      	movs	r1, r3
 800792c:	0010      	movs	r0, r2
 800792e:	f000 fa65 	bl	8007dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2246      	movs	r2, #70	; 0x46
 8007936:	2101      	movs	r1, #1
 8007938:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	223e      	movs	r2, #62	; 0x3e
 800793e:	2101      	movs	r1, #1
 8007940:	5499      	strb	r1, [r3, r2]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	223f      	movs	r2, #63	; 0x3f
 8007946:	2101      	movs	r1, #1
 8007948:	5499      	strb	r1, [r3, r2]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2240      	movs	r2, #64	; 0x40
 800794e:	2101      	movs	r1, #1
 8007950:	5499      	strb	r1, [r3, r2]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2241      	movs	r2, #65	; 0x41
 8007956:	2101      	movs	r1, #1
 8007958:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2242      	movs	r2, #66	; 0x42
 800795e:	2101      	movs	r1, #1
 8007960:	5499      	strb	r1, [r3, r2]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2243      	movs	r2, #67	; 0x43
 8007966:	2101      	movs	r1, #1
 8007968:	5499      	strb	r1, [r3, r2]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2244      	movs	r2, #68	; 0x44
 800796e:	2101      	movs	r1, #1
 8007970:	5499      	strb	r1, [r3, r2]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2245      	movs	r2, #69	; 0x45
 8007976:	2101      	movs	r1, #1
 8007978:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	223d      	movs	r2, #61	; 0x3d
 800797e:	2101      	movs	r1, #1
 8007980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	0018      	movs	r0, r3
 8007986:	46bd      	mov	sp, r7
 8007988:	b002      	add	sp, #8
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	223d      	movs	r2, #61	; 0x3d
 8007998:	5c9b      	ldrb	r3, [r3, r2]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b01      	cmp	r3, #1
 800799e:	d001      	beq.n	80079a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e03b      	b.n	8007a1c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	223d      	movs	r2, #61	; 0x3d
 80079a8:	2102      	movs	r1, #2
 80079aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2101      	movs	r1, #1
 80079b8:	430a      	orrs	r2, r1
 80079ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a18      	ldr	r2, [pc, #96]	; (8007a24 <HAL_TIM_Base_Start_IT+0x98>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00f      	beq.n	80079e6 <HAL_TIM_Base_Start_IT+0x5a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	2380      	movs	r3, #128	; 0x80
 80079cc:	05db      	lsls	r3, r3, #23
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d009      	beq.n	80079e6 <HAL_TIM_Base_Start_IT+0x5a>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a14      	ldr	r2, [pc, #80]	; (8007a28 <HAL_TIM_Base_Start_IT+0x9c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d004      	beq.n	80079e6 <HAL_TIM_Base_Start_IT+0x5a>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a12      	ldr	r2, [pc, #72]	; (8007a2c <HAL_TIM_Base_Start_IT+0xa0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d111      	bne.n	8007a0a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2207      	movs	r2, #7
 80079ee:	4013      	ands	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b06      	cmp	r3, #6
 80079f6:	d010      	beq.n	8007a1a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2101      	movs	r1, #1
 8007a04:	430a      	orrs	r2, r1
 8007a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a08:	e007      	b.n	8007a1a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2101      	movs	r1, #1
 8007a16:	430a      	orrs	r2, r1
 8007a18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	b004      	add	sp, #16
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40012c00 	.word	0x40012c00
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40014000 	.word	0x40014000

08007a30 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e042      	b.n	8007ac8 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	223d      	movs	r2, #61	; 0x3d
 8007a46:	5c9b      	ldrb	r3, [r3, r2]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d107      	bne.n	8007a5e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	223c      	movs	r2, #60	; 0x3c
 8007a52:	2100      	movs	r1, #0
 8007a54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	0018      	movs	r0, r3
 8007a5a:	f000 f839 	bl	8007ad0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	223d      	movs	r2, #61	; 0x3d
 8007a62:	2102      	movs	r1, #2
 8007a64:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	0019      	movs	r1, r3
 8007a70:	0010      	movs	r0, r2
 8007a72:	f000 f9c3 	bl	8007dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2246      	movs	r2, #70	; 0x46
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	223e      	movs	r2, #62	; 0x3e
 8007a82:	2101      	movs	r1, #1
 8007a84:	5499      	strb	r1, [r3, r2]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	223f      	movs	r2, #63	; 0x3f
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	5499      	strb	r1, [r3, r2]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2240      	movs	r2, #64	; 0x40
 8007a92:	2101      	movs	r1, #1
 8007a94:	5499      	strb	r1, [r3, r2]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2241      	movs	r2, #65	; 0x41
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2242      	movs	r2, #66	; 0x42
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	5499      	strb	r1, [r3, r2]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2243      	movs	r2, #67	; 0x43
 8007aaa:	2101      	movs	r1, #1
 8007aac:	5499      	strb	r1, [r3, r2]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2244      	movs	r2, #68	; 0x44
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	5499      	strb	r1, [r3, r2]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2245      	movs	r2, #69	; 0x45
 8007aba:	2101      	movs	r1, #1
 8007abc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	223d      	movs	r2, #61	; 0x3d
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	0018      	movs	r0, r3
 8007aca:	46bd      	mov	sp, r7
 8007acc:	b002      	add	sp, #8
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007ad8:	46c0      	nop			; (mov r8, r8)
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b002      	add	sp, #8
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	2202      	movs	r2, #2
 8007af0:	4013      	ands	r3, r2
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d124      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2202      	movs	r2, #2
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d11d      	bne.n	8007b40 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2203      	movs	r2, #3
 8007b0a:	4252      	negs	r2, r2
 8007b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	0018      	movs	r0, r3
 8007b24:	f000 f952 	bl	8007dcc <HAL_TIM_IC_CaptureCallback>
 8007b28:	e007      	b.n	8007b3a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	f000 f945 	bl	8007dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	0018      	movs	r0, r3
 8007b36:	f000 f951 	bl	8007ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2204      	movs	r2, #4
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d125      	bne.n	8007b9a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	2204      	movs	r2, #4
 8007b56:	4013      	ands	r3, r2
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d11e      	bne.n	8007b9a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2205      	movs	r2, #5
 8007b62:	4252      	negs	r2, r2
 8007b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699a      	ldr	r2, [r3, #24]
 8007b72:	23c0      	movs	r3, #192	; 0xc0
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4013      	ands	r3, r2
 8007b78:	d004      	beq.n	8007b84 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	f000 f925 	bl	8007dcc <HAL_TIM_IC_CaptureCallback>
 8007b82:	e007      	b.n	8007b94 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	0018      	movs	r0, r3
 8007b88:	f000 f918 	bl	8007dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	0018      	movs	r0, r3
 8007b90:	f000 f924 	bl	8007ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d124      	bne.n	8007bf2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	2208      	movs	r2, #8
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	2b08      	cmp	r3, #8
 8007bb4:	d11d      	bne.n	8007bf2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2209      	movs	r2, #9
 8007bbc:	4252      	negs	r2, r2
 8007bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	2203      	movs	r2, #3
 8007bce:	4013      	ands	r3, r2
 8007bd0:	d004      	beq.n	8007bdc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	f000 f8f9 	bl	8007dcc <HAL_TIM_IC_CaptureCallback>
 8007bda:	e007      	b.n	8007bec <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	0018      	movs	r0, r3
 8007be0:	f000 f8ec 	bl	8007dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	0018      	movs	r0, r3
 8007be8:	f000 f8f8 	bl	8007ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	2210      	movs	r2, #16
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	2b10      	cmp	r3, #16
 8007bfe:	d125      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	2210      	movs	r2, #16
 8007c08:	4013      	ands	r3, r2
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d11e      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2211      	movs	r2, #17
 8007c14:	4252      	negs	r2, r2
 8007c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2208      	movs	r2, #8
 8007c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69da      	ldr	r2, [r3, #28]
 8007c24:	23c0      	movs	r3, #192	; 0xc0
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4013      	ands	r3, r2
 8007c2a:	d004      	beq.n	8007c36 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f000 f8cc 	bl	8007dcc <HAL_TIM_IC_CaptureCallback>
 8007c34:	e007      	b.n	8007c46 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	0018      	movs	r0, r3
 8007c3a:	f000 f8bf 	bl	8007dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	0018      	movs	r0, r3
 8007c42:	f000 f8cb 	bl	8007ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	2201      	movs	r2, #1
 8007c54:	4013      	ands	r3, r2
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d10f      	bne.n	8007c7a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	2201      	movs	r2, #1
 8007c62:	4013      	ands	r3, r2
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d108      	bne.n	8007c7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	4252      	negs	r2, r2
 8007c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	0018      	movs	r0, r3
 8007c76:	f7f9 fb15 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	2280      	movs	r2, #128	; 0x80
 8007c82:	4013      	ands	r3, r2
 8007c84:	2b80      	cmp	r3, #128	; 0x80
 8007c86:	d10f      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	2280      	movs	r2, #128	; 0x80
 8007c90:	4013      	ands	r3, r2
 8007c92:	2b80      	cmp	r3, #128	; 0x80
 8007c94:	d108      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2281      	movs	r2, #129	; 0x81
 8007c9c:	4252      	negs	r2, r2
 8007c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	f000 fb2e 	bl	8008304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2240      	movs	r2, #64	; 0x40
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	2b40      	cmp	r3, #64	; 0x40
 8007cb4:	d10f      	bne.n	8007cd6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	2240      	movs	r2, #64	; 0x40
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b40      	cmp	r3, #64	; 0x40
 8007cc2:	d108      	bne.n	8007cd6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2241      	movs	r2, #65	; 0x41
 8007cca:	4252      	negs	r2, r2
 8007ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	f000 f88b 	bl	8007dec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	4013      	ands	r3, r2
 8007ce0:	2b20      	cmp	r3, #32
 8007ce2:	d10f      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	2220      	movs	r2, #32
 8007cec:	4013      	ands	r3, r2
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d108      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2221      	movs	r2, #33	; 0x21
 8007cf8:	4252      	negs	r2, r2
 8007cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	0018      	movs	r0, r3
 8007d00:	f000 faf8 	bl	80082f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d04:	46c0      	nop			; (mov r8, r8)
 8007d06:	46bd      	mov	sp, r7
 8007d08:	b002      	add	sp, #8
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d18:	2317      	movs	r3, #23
 8007d1a:	18fb      	adds	r3, r7, r3
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	223c      	movs	r2, #60	; 0x3c
 8007d24:	5c9b      	ldrb	r3, [r3, r2]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d101      	bne.n	8007d2e <HAL_TIM_OC_ConfigChannel+0x22>
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	e042      	b.n	8007db4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	223c      	movs	r2, #60	; 0x3c
 8007d32:	2101      	movs	r1, #1
 8007d34:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	d027      	beq.n	8007d8c <HAL_TIM_OC_ConfigChannel+0x80>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b0c      	cmp	r3, #12
 8007d40:	d82c      	bhi.n	8007d9c <HAL_TIM_OC_ConfigChannel+0x90>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d019      	beq.n	8007d7c <HAL_TIM_OC_ConfigChannel+0x70>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b08      	cmp	r3, #8
 8007d4c:	d826      	bhi.n	8007d9c <HAL_TIM_OC_ConfigChannel+0x90>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <HAL_TIM_OC_ConfigChannel+0x50>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d008      	beq.n	8007d6c <HAL_TIM_OC_ConfigChannel+0x60>
 8007d5a:	e01f      	b.n	8007d9c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	0011      	movs	r1, r2
 8007d64:	0018      	movs	r0, r3
 8007d66:	f000 f8c9 	bl	8007efc <TIM_OC1_SetConfig>
      break;
 8007d6a:	e01c      	b.n	8007da6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	0011      	movs	r1, r2
 8007d74:	0018      	movs	r0, r3
 8007d76:	f000 f949 	bl	800800c <TIM_OC2_SetConfig>
      break;
 8007d7a:	e014      	b.n	8007da6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	0011      	movs	r1, r2
 8007d84:	0018      	movs	r0, r3
 8007d86:	f000 f9c5 	bl	8008114 <TIM_OC3_SetConfig>
      break;
 8007d8a:	e00c      	b.n	8007da6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	0011      	movs	r1, r2
 8007d94:	0018      	movs	r0, r3
 8007d96:	f000 fa43 	bl	8008220 <TIM_OC4_SetConfig>
      break;
 8007d9a:	e004      	b.n	8007da6 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8007d9c:	2317      	movs	r3, #23
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]
      break;
 8007da4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	223c      	movs	r2, #60	; 0x3c
 8007daa:	2100      	movs	r1, #0
 8007dac:	5499      	strb	r1, [r3, r2]

  return status;
 8007dae:	2317      	movs	r3, #23
 8007db0:	18fb      	adds	r3, r7, r3
 8007db2:	781b      	ldrb	r3, [r3, #0]
}
 8007db4:	0018      	movs	r0, r3
 8007db6:	46bd      	mov	sp, r7
 8007db8:	b006      	add	sp, #24
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dc4:	46c0      	nop			; (mov r8, r8)
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	b002      	add	sp, #8
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dd4:	46c0      	nop			; (mov r8, r8)
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	b002      	add	sp, #8
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007de4:	46c0      	nop			; (mov r8, r8)
 8007de6:	46bd      	mov	sp, r7
 8007de8:	b002      	add	sp, #8
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007df4:	46c0      	nop			; (mov r8, r8)
 8007df6:	46bd      	mov	sp, r7
 8007df8:	b002      	add	sp, #8
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a34      	ldr	r2, [pc, #208]	; (8007ee0 <TIM_Base_SetConfig+0xe4>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d008      	beq.n	8007e26 <TIM_Base_SetConfig+0x2a>
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	2380      	movs	r3, #128	; 0x80
 8007e18:	05db      	lsls	r3, r3, #23
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d003      	beq.n	8007e26 <TIM_Base_SetConfig+0x2a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a30      	ldr	r2, [pc, #192]	; (8007ee4 <TIM_Base_SetConfig+0xe8>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d108      	bne.n	8007e38 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2270      	movs	r2, #112	; 0x70
 8007e2a:	4393      	bics	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a29      	ldr	r2, [pc, #164]	; (8007ee0 <TIM_Base_SetConfig+0xe4>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d018      	beq.n	8007e72 <TIM_Base_SetConfig+0x76>
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	2380      	movs	r3, #128	; 0x80
 8007e44:	05db      	lsls	r3, r3, #23
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d013      	beq.n	8007e72 <TIM_Base_SetConfig+0x76>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a25      	ldr	r2, [pc, #148]	; (8007ee4 <TIM_Base_SetConfig+0xe8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00f      	beq.n	8007e72 <TIM_Base_SetConfig+0x76>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a24      	ldr	r2, [pc, #144]	; (8007ee8 <TIM_Base_SetConfig+0xec>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00b      	beq.n	8007e72 <TIM_Base_SetConfig+0x76>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a23      	ldr	r2, [pc, #140]	; (8007eec <TIM_Base_SetConfig+0xf0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d007      	beq.n	8007e72 <TIM_Base_SetConfig+0x76>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a22      	ldr	r2, [pc, #136]	; (8007ef0 <TIM_Base_SetConfig+0xf4>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d003      	beq.n	8007e72 <TIM_Base_SetConfig+0x76>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a21      	ldr	r2, [pc, #132]	; (8007ef4 <TIM_Base_SetConfig+0xf8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d108      	bne.n	8007e84 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4a20      	ldr	r2, [pc, #128]	; (8007ef8 <TIM_Base_SetConfig+0xfc>)
 8007e76:	4013      	ands	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2280      	movs	r2, #128	; 0x80
 8007e88:	4393      	bics	r3, r2
 8007e8a:	001a      	movs	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a0c      	ldr	r2, [pc, #48]	; (8007ee0 <TIM_Base_SetConfig+0xe4>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00b      	beq.n	8007eca <TIM_Base_SetConfig+0xce>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a0d      	ldr	r2, [pc, #52]	; (8007eec <TIM_Base_SetConfig+0xf0>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d007      	beq.n	8007eca <TIM_Base_SetConfig+0xce>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a0c      	ldr	r2, [pc, #48]	; (8007ef0 <TIM_Base_SetConfig+0xf4>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d003      	beq.n	8007eca <TIM_Base_SetConfig+0xce>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a0b      	ldr	r2, [pc, #44]	; (8007ef4 <TIM_Base_SetConfig+0xf8>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d103      	bne.n	8007ed2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	691a      	ldr	r2, [r3, #16]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	615a      	str	r2, [r3, #20]
}
 8007ed8:	46c0      	nop			; (mov r8, r8)
 8007eda:	46bd      	mov	sp, r7
 8007edc:	b004      	add	sp, #16
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	40012c00 	.word	0x40012c00
 8007ee4:	40000400 	.word	0x40000400
 8007ee8:	40002000 	.word	0x40002000
 8007eec:	40014000 	.word	0x40014000
 8007ef0:	40014400 	.word	0x40014400
 8007ef4:	40014800 	.word	0x40014800
 8007ef8:	fffffcff 	.word	0xfffffcff

08007efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	4393      	bics	r3, r2
 8007f0e:	001a      	movs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2270      	movs	r2, #112	; 0x70
 8007f2a:	4393      	bics	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2203      	movs	r2, #3
 8007f32:	4393      	bics	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	2202      	movs	r2, #2
 8007f44:	4393      	bics	r3, r2
 8007f46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a27      	ldr	r2, [pc, #156]	; (8007ff4 <TIM_OC1_SetConfig+0xf8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00b      	beq.n	8007f72 <TIM_OC1_SetConfig+0x76>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a26      	ldr	r2, [pc, #152]	; (8007ff8 <TIM_OC1_SetConfig+0xfc>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d007      	beq.n	8007f72 <TIM_OC1_SetConfig+0x76>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a25      	ldr	r2, [pc, #148]	; (8007ffc <TIM_OC1_SetConfig+0x100>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d003      	beq.n	8007f72 <TIM_OC1_SetConfig+0x76>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a24      	ldr	r2, [pc, #144]	; (8008000 <TIM_OC1_SetConfig+0x104>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d10c      	bne.n	8007f8c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2208      	movs	r2, #8
 8007f76:	4393      	bics	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2204      	movs	r2, #4
 8007f88:	4393      	bics	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a19      	ldr	r2, [pc, #100]	; (8007ff4 <TIM_OC1_SetConfig+0xf8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00b      	beq.n	8007fac <TIM_OC1_SetConfig+0xb0>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <TIM_OC1_SetConfig+0xfc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d007      	beq.n	8007fac <TIM_OC1_SetConfig+0xb0>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a17      	ldr	r2, [pc, #92]	; (8007ffc <TIM_OC1_SetConfig+0x100>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d003      	beq.n	8007fac <TIM_OC1_SetConfig+0xb0>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a16      	ldr	r2, [pc, #88]	; (8008000 <TIM_OC1_SetConfig+0x104>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d111      	bne.n	8007fd0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	4a15      	ldr	r2, [pc, #84]	; (8008004 <TIM_OC1_SetConfig+0x108>)
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	4a14      	ldr	r2, [pc, #80]	; (8008008 <TIM_OC1_SetConfig+0x10c>)
 8007fb8:	4013      	ands	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	621a      	str	r2, [r3, #32]
}
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b006      	add	sp, #24
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	40012c00 	.word	0x40012c00
 8007ff8:	40014000 	.word	0x40014000
 8007ffc:	40014400 	.word	0x40014400
 8008000:	40014800 	.word	0x40014800
 8008004:	fffffeff 	.word	0xfffffeff
 8008008:	fffffdff 	.word	0xfffffdff

0800800c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	2210      	movs	r2, #16
 800801c:	4393      	bics	r3, r2
 800801e:	001a      	movs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	4a2e      	ldr	r2, [pc, #184]	; (80080f4 <TIM_OC2_SetConfig+0xe8>)
 800803a:	4013      	ands	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4a2d      	ldr	r2, [pc, #180]	; (80080f8 <TIM_OC2_SetConfig+0xec>)
 8008042:	4013      	ands	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	021b      	lsls	r3, r3, #8
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2220      	movs	r2, #32
 8008056:	4393      	bics	r3, r2
 8008058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	011b      	lsls	r3, r3, #4
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	4313      	orrs	r3, r2
 8008064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a24      	ldr	r2, [pc, #144]	; (80080fc <TIM_OC2_SetConfig+0xf0>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d10d      	bne.n	800808a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2280      	movs	r2, #128	; 0x80
 8008072:	4393      	bics	r3, r2
 8008074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	4313      	orrs	r3, r2
 8008080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2240      	movs	r2, #64	; 0x40
 8008086:	4393      	bics	r3, r2
 8008088:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a1b      	ldr	r2, [pc, #108]	; (80080fc <TIM_OC2_SetConfig+0xf0>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d00b      	beq.n	80080aa <TIM_OC2_SetConfig+0x9e>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a1a      	ldr	r2, [pc, #104]	; (8008100 <TIM_OC2_SetConfig+0xf4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d007      	beq.n	80080aa <TIM_OC2_SetConfig+0x9e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a19      	ldr	r2, [pc, #100]	; (8008104 <TIM_OC2_SetConfig+0xf8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d003      	beq.n	80080aa <TIM_OC2_SetConfig+0x9e>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a18      	ldr	r2, [pc, #96]	; (8008108 <TIM_OC2_SetConfig+0xfc>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d113      	bne.n	80080d2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4a17      	ldr	r2, [pc, #92]	; (800810c <TIM_OC2_SetConfig+0x100>)
 80080ae:	4013      	ands	r3, r2
 80080b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	4a16      	ldr	r2, [pc, #88]	; (8008110 <TIM_OC2_SetConfig+0x104>)
 80080b6:	4013      	ands	r3, r2
 80080b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	621a      	str	r2, [r3, #32]
}
 80080ec:	46c0      	nop			; (mov r8, r8)
 80080ee:	46bd      	mov	sp, r7
 80080f0:	b006      	add	sp, #24
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	ffff8fff 	.word	0xffff8fff
 80080f8:	fffffcff 	.word	0xfffffcff
 80080fc:	40012c00 	.word	0x40012c00
 8008100:	40014000 	.word	0x40014000
 8008104:	40014400 	.word	0x40014400
 8008108:	40014800 	.word	0x40014800
 800810c:	fffffbff 	.word	0xfffffbff
 8008110:	fffff7ff 	.word	0xfffff7ff

08008114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	4a35      	ldr	r2, [pc, #212]	; (80081f8 <TIM_OC3_SetConfig+0xe4>)
 8008124:	401a      	ands	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2270      	movs	r2, #112	; 0x70
 8008140:	4393      	bics	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2203      	movs	r2, #3
 8008148:	4393      	bics	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	4a28      	ldr	r2, [pc, #160]	; (80081fc <TIM_OC3_SetConfig+0xe8>)
 800815a:	4013      	ands	r3, r2
 800815c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	021b      	lsls	r3, r3, #8
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	4313      	orrs	r3, r2
 8008168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a24      	ldr	r2, [pc, #144]	; (8008200 <TIM_OC3_SetConfig+0xec>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d10d      	bne.n	800818e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	4a23      	ldr	r2, [pc, #140]	; (8008204 <TIM_OC3_SetConfig+0xf0>)
 8008176:	4013      	ands	r3, r2
 8008178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	4a1f      	ldr	r2, [pc, #124]	; (8008208 <TIM_OC3_SetConfig+0xf4>)
 800818a:	4013      	ands	r3, r2
 800818c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a1b      	ldr	r2, [pc, #108]	; (8008200 <TIM_OC3_SetConfig+0xec>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00b      	beq.n	80081ae <TIM_OC3_SetConfig+0x9a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a1c      	ldr	r2, [pc, #112]	; (800820c <TIM_OC3_SetConfig+0xf8>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d007      	beq.n	80081ae <TIM_OC3_SetConfig+0x9a>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a1b      	ldr	r2, [pc, #108]	; (8008210 <TIM_OC3_SetConfig+0xfc>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d003      	beq.n	80081ae <TIM_OC3_SetConfig+0x9a>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a1a      	ldr	r2, [pc, #104]	; (8008214 <TIM_OC3_SetConfig+0x100>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d113      	bne.n	80081d6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	4a19      	ldr	r2, [pc, #100]	; (8008218 <TIM_OC3_SetConfig+0x104>)
 80081b2:	4013      	ands	r3, r2
 80081b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	4a18      	ldr	r2, [pc, #96]	; (800821c <TIM_OC3_SetConfig+0x108>)
 80081ba:	4013      	ands	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	011b      	lsls	r3, r3, #4
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	621a      	str	r2, [r3, #32]
}
 80081f0:	46c0      	nop			; (mov r8, r8)
 80081f2:	46bd      	mov	sp, r7
 80081f4:	b006      	add	sp, #24
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	fffffeff 	.word	0xfffffeff
 80081fc:	fffffdff 	.word	0xfffffdff
 8008200:	40012c00 	.word	0x40012c00
 8008204:	fffff7ff 	.word	0xfffff7ff
 8008208:	fffffbff 	.word	0xfffffbff
 800820c:	40014000 	.word	0x40014000
 8008210:	40014400 	.word	0x40014400
 8008214:	40014800 	.word	0x40014800
 8008218:	ffffefff 	.word	0xffffefff
 800821c:	ffffdfff 	.word	0xffffdfff

08008220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	4a28      	ldr	r2, [pc, #160]	; (80082d0 <TIM_OC4_SetConfig+0xb0>)
 8008230:	401a      	ands	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4a22      	ldr	r2, [pc, #136]	; (80082d4 <TIM_OC4_SetConfig+0xb4>)
 800824c:	4013      	ands	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4a21      	ldr	r2, [pc, #132]	; (80082d8 <TIM_OC4_SetConfig+0xb8>)
 8008254:	4013      	ands	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	4313      	orrs	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	4a1d      	ldr	r2, [pc, #116]	; (80082dc <TIM_OC4_SetConfig+0xbc>)
 8008268:	4013      	ands	r3, r2
 800826a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	031b      	lsls	r3, r3, #12
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a19      	ldr	r2, [pc, #100]	; (80082e0 <TIM_OC4_SetConfig+0xc0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00b      	beq.n	8008298 <TIM_OC4_SetConfig+0x78>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a18      	ldr	r2, [pc, #96]	; (80082e4 <TIM_OC4_SetConfig+0xc4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d007      	beq.n	8008298 <TIM_OC4_SetConfig+0x78>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a17      	ldr	r2, [pc, #92]	; (80082e8 <TIM_OC4_SetConfig+0xc8>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d003      	beq.n	8008298 <TIM_OC4_SetConfig+0x78>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a16      	ldr	r2, [pc, #88]	; (80082ec <TIM_OC4_SetConfig+0xcc>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d109      	bne.n	80082ac <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	4a15      	ldr	r2, [pc, #84]	; (80082f0 <TIM_OC4_SetConfig+0xd0>)
 800829c:	4013      	ands	r3, r2
 800829e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	019b      	lsls	r3, r3, #6
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	621a      	str	r2, [r3, #32]
}
 80082c6:	46c0      	nop			; (mov r8, r8)
 80082c8:	46bd      	mov	sp, r7
 80082ca:	b006      	add	sp, #24
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	ffffefff 	.word	0xffffefff
 80082d4:	ffff8fff 	.word	0xffff8fff
 80082d8:	fffffcff 	.word	0xfffffcff
 80082dc:	ffffdfff 	.word	0xffffdfff
 80082e0:	40012c00 	.word	0x40012c00
 80082e4:	40014000 	.word	0x40014000
 80082e8:	40014400 	.word	0x40014400
 80082ec:	40014800 	.word	0x40014800
 80082f0:	ffffbfff 	.word	0xffffbfff

080082f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082fc:	46c0      	nop			; (mov r8, r8)
 80082fe:	46bd      	mov	sp, r7
 8008300:	b002      	add	sp, #8
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800830c:	46c0      	nop			; (mov r8, r8)
 800830e:	46bd      	mov	sp, r7
 8008310:	b002      	add	sp, #8
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e044      	b.n	80083b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800832a:	2b00      	cmp	r3, #0
 800832c:	d107      	bne.n	800833e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2274      	movs	r2, #116	; 0x74
 8008332:	2100      	movs	r1, #0
 8008334:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	0018      	movs	r0, r3
 800833a:	f7fa fc39 	bl	8002bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2224      	movs	r2, #36	; 0x24
 8008342:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2101      	movs	r1, #1
 8008350:	438a      	bics	r2, r1
 8008352:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	0018      	movs	r0, r3
 8008358:	f000 fb24 	bl	80089a4 <UART_SetConfig>
 800835c:	0003      	movs	r3, r0
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e024      	b.n	80083b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	0018      	movs	r0, r3
 8008372:	f000 fc9f 	bl	8008cb4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	490d      	ldr	r1, [pc, #52]	; (80083b8 <HAL_UART_Init+0xa4>)
 8008382:	400a      	ands	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	212a      	movs	r1, #42	; 0x2a
 8008392:	438a      	bics	r2, r1
 8008394:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2101      	movs	r1, #1
 80083a2:	430a      	orrs	r2, r1
 80083a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	0018      	movs	r0, r3
 80083aa:	f000 fd37 	bl	8008e1c <UART_CheckIdleState>
 80083ae:	0003      	movs	r3, r0
}
 80083b0:	0018      	movs	r0, r3
 80083b2:	46bd      	mov	sp, r7
 80083b4:	b002      	add	sp, #8
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	ffffb7ff 	.word	0xffffb7ff

080083bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083bc:	b590      	push	{r4, r7, lr}
 80083be:	b0ab      	sub	sp, #172	; 0xac
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	22a4      	movs	r2, #164	; 0xa4
 80083cc:	18b9      	adds	r1, r7, r2
 80083ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	20a0      	movs	r0, #160	; 0xa0
 80083d8:	1839      	adds	r1, r7, r0
 80083da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	219c      	movs	r1, #156	; 0x9c
 80083e4:	1879      	adds	r1, r7, r1
 80083e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083e8:	0011      	movs	r1, r2
 80083ea:	18bb      	adds	r3, r7, r2
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a99      	ldr	r2, [pc, #612]	; (8008654 <HAL_UART_IRQHandler+0x298>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	2298      	movs	r2, #152	; 0x98
 80083f4:	18bc      	adds	r4, r7, r2
 80083f6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80083f8:	18bb      	adds	r3, r7, r2
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d114      	bne.n	800842a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008400:	187b      	adds	r3, r7, r1
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2220      	movs	r2, #32
 8008406:	4013      	ands	r3, r2
 8008408:	d00f      	beq.n	800842a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800840a:	183b      	adds	r3, r7, r0
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2220      	movs	r2, #32
 8008410:	4013      	ands	r3, r2
 8008412:	d00a      	beq.n	800842a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008418:	2b00      	cmp	r3, #0
 800841a:	d100      	bne.n	800841e <HAL_UART_IRQHandler+0x62>
 800841c:	e296      	b.n	800894c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	0010      	movs	r0, r2
 8008426:	4798      	blx	r3
      }
      return;
 8008428:	e290      	b.n	800894c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800842a:	2398      	movs	r3, #152	; 0x98
 800842c:	18fb      	adds	r3, r7, r3
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d100      	bne.n	8008436 <HAL_UART_IRQHandler+0x7a>
 8008434:	e114      	b.n	8008660 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008436:	239c      	movs	r3, #156	; 0x9c
 8008438:	18fb      	adds	r3, r7, r3
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2201      	movs	r2, #1
 800843e:	4013      	ands	r3, r2
 8008440:	d106      	bne.n	8008450 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008442:	23a0      	movs	r3, #160	; 0xa0
 8008444:	18fb      	adds	r3, r7, r3
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a83      	ldr	r2, [pc, #524]	; (8008658 <HAL_UART_IRQHandler+0x29c>)
 800844a:	4013      	ands	r3, r2
 800844c:	d100      	bne.n	8008450 <HAL_UART_IRQHandler+0x94>
 800844e:	e107      	b.n	8008660 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008450:	23a4      	movs	r3, #164	; 0xa4
 8008452:	18fb      	adds	r3, r7, r3
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2201      	movs	r2, #1
 8008458:	4013      	ands	r3, r2
 800845a:	d012      	beq.n	8008482 <HAL_UART_IRQHandler+0xc6>
 800845c:	23a0      	movs	r3, #160	; 0xa0
 800845e:	18fb      	adds	r3, r7, r3
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	2380      	movs	r3, #128	; 0x80
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	4013      	ands	r3, r2
 8008468:	d00b      	beq.n	8008482 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2201      	movs	r2, #1
 8008470:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2280      	movs	r2, #128	; 0x80
 8008476:	589b      	ldr	r3, [r3, r2]
 8008478:	2201      	movs	r2, #1
 800847a:	431a      	orrs	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2180      	movs	r1, #128	; 0x80
 8008480:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008482:	23a4      	movs	r3, #164	; 0xa4
 8008484:	18fb      	adds	r3, r7, r3
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2202      	movs	r2, #2
 800848a:	4013      	ands	r3, r2
 800848c:	d011      	beq.n	80084b2 <HAL_UART_IRQHandler+0xf6>
 800848e:	239c      	movs	r3, #156	; 0x9c
 8008490:	18fb      	adds	r3, r7, r3
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2201      	movs	r2, #1
 8008496:	4013      	ands	r3, r2
 8008498:	d00b      	beq.n	80084b2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2202      	movs	r2, #2
 80084a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2280      	movs	r2, #128	; 0x80
 80084a6:	589b      	ldr	r3, [r3, r2]
 80084a8:	2204      	movs	r2, #4
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2180      	movs	r1, #128	; 0x80
 80084b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084b2:	23a4      	movs	r3, #164	; 0xa4
 80084b4:	18fb      	adds	r3, r7, r3
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2204      	movs	r2, #4
 80084ba:	4013      	ands	r3, r2
 80084bc:	d011      	beq.n	80084e2 <HAL_UART_IRQHandler+0x126>
 80084be:	239c      	movs	r3, #156	; 0x9c
 80084c0:	18fb      	adds	r3, r7, r3
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2201      	movs	r2, #1
 80084c6:	4013      	ands	r3, r2
 80084c8:	d00b      	beq.n	80084e2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2204      	movs	r2, #4
 80084d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2280      	movs	r2, #128	; 0x80
 80084d6:	589b      	ldr	r3, [r3, r2]
 80084d8:	2202      	movs	r2, #2
 80084da:	431a      	orrs	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2180      	movs	r1, #128	; 0x80
 80084e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084e2:	23a4      	movs	r3, #164	; 0xa4
 80084e4:	18fb      	adds	r3, r7, r3
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2208      	movs	r2, #8
 80084ea:	4013      	ands	r3, r2
 80084ec:	d017      	beq.n	800851e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084ee:	23a0      	movs	r3, #160	; 0xa0
 80084f0:	18fb      	adds	r3, r7, r3
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2220      	movs	r2, #32
 80084f6:	4013      	ands	r3, r2
 80084f8:	d105      	bne.n	8008506 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80084fa:	239c      	movs	r3, #156	; 0x9c
 80084fc:	18fb      	adds	r3, r7, r3
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2201      	movs	r2, #1
 8008502:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008504:	d00b      	beq.n	800851e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2208      	movs	r2, #8
 800850c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2280      	movs	r2, #128	; 0x80
 8008512:	589b      	ldr	r3, [r3, r2]
 8008514:	2208      	movs	r2, #8
 8008516:	431a      	orrs	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2180      	movs	r1, #128	; 0x80
 800851c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800851e:	23a4      	movs	r3, #164	; 0xa4
 8008520:	18fb      	adds	r3, r7, r3
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	2380      	movs	r3, #128	; 0x80
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	4013      	ands	r3, r2
 800852a:	d013      	beq.n	8008554 <HAL_UART_IRQHandler+0x198>
 800852c:	23a0      	movs	r3, #160	; 0xa0
 800852e:	18fb      	adds	r3, r7, r3
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	2380      	movs	r3, #128	; 0x80
 8008534:	04db      	lsls	r3, r3, #19
 8008536:	4013      	ands	r3, r2
 8008538:	d00c      	beq.n	8008554 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2280      	movs	r2, #128	; 0x80
 8008540:	0112      	lsls	r2, r2, #4
 8008542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2280      	movs	r2, #128	; 0x80
 8008548:	589b      	ldr	r3, [r3, r2]
 800854a:	2220      	movs	r2, #32
 800854c:	431a      	orrs	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2180      	movs	r1, #128	; 0x80
 8008552:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2280      	movs	r2, #128	; 0x80
 8008558:	589b      	ldr	r3, [r3, r2]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d100      	bne.n	8008560 <HAL_UART_IRQHandler+0x1a4>
 800855e:	e1f7      	b.n	8008950 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008560:	23a4      	movs	r3, #164	; 0xa4
 8008562:	18fb      	adds	r3, r7, r3
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2220      	movs	r2, #32
 8008568:	4013      	ands	r3, r2
 800856a:	d00e      	beq.n	800858a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800856c:	23a0      	movs	r3, #160	; 0xa0
 800856e:	18fb      	adds	r3, r7, r3
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2220      	movs	r2, #32
 8008574:	4013      	ands	r3, r2
 8008576:	d008      	beq.n	800858a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800857c:	2b00      	cmp	r3, #0
 800857e:	d004      	beq.n	800858a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	0010      	movs	r0, r2
 8008588:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2280      	movs	r2, #128	; 0x80
 800858e:	589b      	ldr	r3, [r3, r2]
 8008590:	2194      	movs	r1, #148	; 0x94
 8008592:	187a      	adds	r2, r7, r1
 8008594:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	2240      	movs	r2, #64	; 0x40
 800859e:	4013      	ands	r3, r2
 80085a0:	2b40      	cmp	r3, #64	; 0x40
 80085a2:	d004      	beq.n	80085ae <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80085a4:	187b      	adds	r3, r7, r1
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2228      	movs	r2, #40	; 0x28
 80085aa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80085ac:	d047      	beq.n	800863e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	0018      	movs	r0, r3
 80085b2:	f000 fd3f 	bl	8009034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	2240      	movs	r2, #64	; 0x40
 80085be:	4013      	ands	r3, r2
 80085c0:	2b40      	cmp	r3, #64	; 0x40
 80085c2:	d137      	bne.n	8008634 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085c4:	f3ef 8310 	mrs	r3, PRIMASK
 80085c8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80085ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085cc:	2090      	movs	r0, #144	; 0x90
 80085ce:	183a      	adds	r2, r7, r0
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	2301      	movs	r3, #1
 80085d4:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085d8:	f383 8810 	msr	PRIMASK, r3
}
 80085dc:	46c0      	nop			; (mov r8, r8)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689a      	ldr	r2, [r3, #8]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2140      	movs	r1, #64	; 0x40
 80085ea:	438a      	bics	r2, r1
 80085ec:	609a      	str	r2, [r3, #8]
 80085ee:	183b      	adds	r3, r7, r0
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085f6:	f383 8810 	msr	PRIMASK, r3
}
 80085fa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008600:	2b00      	cmp	r3, #0
 8008602:	d012      	beq.n	800862a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008608:	4a14      	ldr	r2, [pc, #80]	; (800865c <HAL_UART_IRQHandler+0x2a0>)
 800860a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008610:	0018      	movs	r0, r3
 8008612:	f7fb fd71 	bl	80040f8 <HAL_DMA_Abort_IT>
 8008616:	1e03      	subs	r3, r0, #0
 8008618:	d01a      	beq.n	8008650 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008624:	0018      	movs	r0, r3
 8008626:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008628:	e012      	b.n	8008650 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	0018      	movs	r0, r3
 800862e:	f000 f9a5 	bl	800897c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008632:	e00d      	b.n	8008650 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	0018      	movs	r0, r3
 8008638:	f000 f9a0 	bl	800897c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800863c:	e008      	b.n	8008650 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	0018      	movs	r0, r3
 8008642:	f000 f99b 	bl	800897c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2280      	movs	r2, #128	; 0x80
 800864a:	2100      	movs	r1, #0
 800864c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800864e:	e17f      	b.n	8008950 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008650:	46c0      	nop			; (mov r8, r8)
    return;
 8008652:	e17d      	b.n	8008950 <HAL_UART_IRQHandler+0x594>
 8008654:	0000080f 	.word	0x0000080f
 8008658:	04000120 	.word	0x04000120
 800865c:	080090f9 	.word	0x080090f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008664:	2b01      	cmp	r3, #1
 8008666:	d000      	beq.n	800866a <HAL_UART_IRQHandler+0x2ae>
 8008668:	e131      	b.n	80088ce <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800866a:	23a4      	movs	r3, #164	; 0xa4
 800866c:	18fb      	adds	r3, r7, r3
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2210      	movs	r2, #16
 8008672:	4013      	ands	r3, r2
 8008674:	d100      	bne.n	8008678 <HAL_UART_IRQHandler+0x2bc>
 8008676:	e12a      	b.n	80088ce <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008678:	23a0      	movs	r3, #160	; 0xa0
 800867a:	18fb      	adds	r3, r7, r3
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2210      	movs	r2, #16
 8008680:	4013      	ands	r3, r2
 8008682:	d100      	bne.n	8008686 <HAL_UART_IRQHandler+0x2ca>
 8008684:	e123      	b.n	80088ce <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2210      	movs	r2, #16
 800868c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	2240      	movs	r2, #64	; 0x40
 8008696:	4013      	ands	r3, r2
 8008698:	2b40      	cmp	r3, #64	; 0x40
 800869a:	d000      	beq.n	800869e <HAL_UART_IRQHandler+0x2e2>
 800869c:	e09b      	b.n	80087d6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	217e      	movs	r1, #126	; 0x7e
 80086a8:	187b      	adds	r3, r7, r1
 80086aa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80086ac:	187b      	adds	r3, r7, r1
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d100      	bne.n	80086b6 <HAL_UART_IRQHandler+0x2fa>
 80086b4:	e14e      	b.n	8008954 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2258      	movs	r2, #88	; 0x58
 80086ba:	5a9b      	ldrh	r3, [r3, r2]
 80086bc:	187a      	adds	r2, r7, r1
 80086be:	8812      	ldrh	r2, [r2, #0]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d300      	bcc.n	80086c6 <HAL_UART_IRQHandler+0x30a>
 80086c4:	e146      	b.n	8008954 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	187a      	adds	r2, r7, r1
 80086ca:	215a      	movs	r1, #90	; 0x5a
 80086cc:	8812      	ldrh	r2, [r2, #0]
 80086ce:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	2b20      	cmp	r3, #32
 80086d8:	d06e      	beq.n	80087b8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086da:	f3ef 8310 	mrs	r3, PRIMASK
 80086de:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80086e4:	2301      	movs	r3, #1
 80086e6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ea:	f383 8810 	msr	PRIMASK, r3
}
 80086ee:	46c0      	nop			; (mov r8, r8)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	499a      	ldr	r1, [pc, #616]	; (8008964 <HAL_UART_IRQHandler+0x5a8>)
 80086fc:	400a      	ands	r2, r1
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008702:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	f383 8810 	msr	PRIMASK, r3
}
 800870a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800870c:	f3ef 8310 	mrs	r3, PRIMASK
 8008710:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008714:	677b      	str	r3, [r7, #116]	; 0x74
 8008716:	2301      	movs	r3, #1
 8008718:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800871a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871c:	f383 8810 	msr	PRIMASK, r3
}
 8008720:	46c0      	nop			; (mov r8, r8)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2101      	movs	r1, #1
 800872e:	438a      	bics	r2, r1
 8008730:	609a      	str	r2, [r3, #8]
 8008732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008734:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008738:	f383 8810 	msr	PRIMASK, r3
}
 800873c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800873e:	f3ef 8310 	mrs	r3, PRIMASK
 8008742:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008744:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008746:	673b      	str	r3, [r7, #112]	; 0x70
 8008748:	2301      	movs	r3, #1
 800874a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874e:	f383 8810 	msr	PRIMASK, r3
}
 8008752:	46c0      	nop			; (mov r8, r8)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689a      	ldr	r2, [r3, #8]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2140      	movs	r1, #64	; 0x40
 8008760:	438a      	bics	r2, r1
 8008762:	609a      	str	r2, [r3, #8]
 8008764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008766:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800876a:	f383 8810 	msr	PRIMASK, r3
}
 800876e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800877c:	f3ef 8310 	mrs	r3, PRIMASK
 8008780:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008782:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008784:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008786:	2301      	movs	r3, #1
 8008788:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800878a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800878c:	f383 8810 	msr	PRIMASK, r3
}
 8008790:	46c0      	nop			; (mov r8, r8)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2110      	movs	r1, #16
 800879e:	438a      	bics	r2, r1
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a8:	f383 8810 	msr	PRIMASK, r3
}
 80087ac:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7fb fc68 	bl	8004088 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2258      	movs	r2, #88	; 0x58
 80087bc:	5a9a      	ldrh	r2, [r3, r2]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	215a      	movs	r1, #90	; 0x5a
 80087c2:	5a5b      	ldrh	r3, [r3, r1]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	0011      	movs	r1, r2
 80087ce:	0018      	movs	r0, r3
 80087d0:	f000 f8dc 	bl	800898c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087d4:	e0be      	b.n	8008954 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2258      	movs	r2, #88	; 0x58
 80087da:	5a99      	ldrh	r1, [r3, r2]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	225a      	movs	r2, #90	; 0x5a
 80087e0:	5a9b      	ldrh	r3, [r3, r2]
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	208e      	movs	r0, #142	; 0x8e
 80087e6:	183b      	adds	r3, r7, r0
 80087e8:	1a8a      	subs	r2, r1, r2
 80087ea:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	225a      	movs	r2, #90	; 0x5a
 80087f0:	5a9b      	ldrh	r3, [r3, r2]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d100      	bne.n	80087fa <HAL_UART_IRQHandler+0x43e>
 80087f8:	e0ae      	b.n	8008958 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80087fa:	183b      	adds	r3, r7, r0
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d100      	bne.n	8008804 <HAL_UART_IRQHandler+0x448>
 8008802:	e0a9      	b.n	8008958 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008804:	f3ef 8310 	mrs	r3, PRIMASK
 8008808:	60fb      	str	r3, [r7, #12]
  return(result);
 800880a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800880c:	2488      	movs	r4, #136	; 0x88
 800880e:	193a      	adds	r2, r7, r4
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	2301      	movs	r3, #1
 8008814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f383 8810 	msr	PRIMASK, r3
}
 800881c:	46c0      	nop			; (mov r8, r8)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	494f      	ldr	r1, [pc, #316]	; (8008968 <HAL_UART_IRQHandler+0x5ac>)
 800882a:	400a      	ands	r2, r1
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	193b      	adds	r3, r7, r4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f383 8810 	msr	PRIMASK, r3
}
 800883a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800883c:	f3ef 8310 	mrs	r3, PRIMASK
 8008840:	61bb      	str	r3, [r7, #24]
  return(result);
 8008842:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008844:	2484      	movs	r4, #132	; 0x84
 8008846:	193a      	adds	r2, r7, r4
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	2301      	movs	r3, #1
 800884c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	f383 8810 	msr	PRIMASK, r3
}
 8008854:	46c0      	nop			; (mov r8, r8)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2101      	movs	r1, #1
 8008862:	438a      	bics	r2, r1
 8008864:	609a      	str	r2, [r3, #8]
 8008866:	193b      	adds	r3, r7, r4
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	f383 8810 	msr	PRIMASK, r3
}
 8008872:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2220      	movs	r2, #32
 8008878:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008886:	f3ef 8310 	mrs	r3, PRIMASK
 800888a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800888e:	2480      	movs	r4, #128	; 0x80
 8008890:	193a      	adds	r2, r7, r4
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	2301      	movs	r3, #1
 8008896:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	f383 8810 	msr	PRIMASK, r3
}
 800889e:	46c0      	nop			; (mov r8, r8)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2110      	movs	r1, #16
 80088ac:	438a      	bics	r2, r1
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	193b      	adds	r3, r7, r4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	f383 8810 	msr	PRIMASK, r3
}
 80088bc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088be:	183b      	adds	r3, r7, r0
 80088c0:	881a      	ldrh	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	0011      	movs	r1, r2
 80088c6:	0018      	movs	r0, r3
 80088c8:	f000 f860 	bl	800898c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088cc:	e044      	b.n	8008958 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088ce:	23a4      	movs	r3, #164	; 0xa4
 80088d0:	18fb      	adds	r3, r7, r3
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	2380      	movs	r3, #128	; 0x80
 80088d6:	035b      	lsls	r3, r3, #13
 80088d8:	4013      	ands	r3, r2
 80088da:	d010      	beq.n	80088fe <HAL_UART_IRQHandler+0x542>
 80088dc:	239c      	movs	r3, #156	; 0x9c
 80088de:	18fb      	adds	r3, r7, r3
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	2380      	movs	r3, #128	; 0x80
 80088e4:	03db      	lsls	r3, r3, #15
 80088e6:	4013      	ands	r3, r2
 80088e8:	d009      	beq.n	80088fe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2280      	movs	r2, #128	; 0x80
 80088f0:	0352      	lsls	r2, r2, #13
 80088f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	0018      	movs	r0, r3
 80088f8:	f000 fc40 	bl	800917c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088fc:	e02f      	b.n	800895e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80088fe:	23a4      	movs	r3, #164	; 0xa4
 8008900:	18fb      	adds	r3, r7, r3
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2280      	movs	r2, #128	; 0x80
 8008906:	4013      	ands	r3, r2
 8008908:	d00f      	beq.n	800892a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800890a:	23a0      	movs	r3, #160	; 0xa0
 800890c:	18fb      	adds	r3, r7, r3
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2280      	movs	r2, #128	; 0x80
 8008912:	4013      	ands	r3, r2
 8008914:	d009      	beq.n	800892a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800891a:	2b00      	cmp	r3, #0
 800891c:	d01e      	beq.n	800895c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	0010      	movs	r0, r2
 8008926:	4798      	blx	r3
    }
    return;
 8008928:	e018      	b.n	800895c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800892a:	23a4      	movs	r3, #164	; 0xa4
 800892c:	18fb      	adds	r3, r7, r3
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2240      	movs	r2, #64	; 0x40
 8008932:	4013      	ands	r3, r2
 8008934:	d013      	beq.n	800895e <HAL_UART_IRQHandler+0x5a2>
 8008936:	23a0      	movs	r3, #160	; 0xa0
 8008938:	18fb      	adds	r3, r7, r3
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2240      	movs	r2, #64	; 0x40
 800893e:	4013      	ands	r3, r2
 8008940:	d00d      	beq.n	800895e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	0018      	movs	r0, r3
 8008946:	f000 fbee 	bl	8009126 <UART_EndTransmit_IT>
    return;
 800894a:	e008      	b.n	800895e <HAL_UART_IRQHandler+0x5a2>
      return;
 800894c:	46c0      	nop			; (mov r8, r8)
 800894e:	e006      	b.n	800895e <HAL_UART_IRQHandler+0x5a2>
    return;
 8008950:	46c0      	nop			; (mov r8, r8)
 8008952:	e004      	b.n	800895e <HAL_UART_IRQHandler+0x5a2>
      return;
 8008954:	46c0      	nop			; (mov r8, r8)
 8008956:	e002      	b.n	800895e <HAL_UART_IRQHandler+0x5a2>
      return;
 8008958:	46c0      	nop			; (mov r8, r8)
 800895a:	e000      	b.n	800895e <HAL_UART_IRQHandler+0x5a2>
    return;
 800895c:	46c0      	nop			; (mov r8, r8)
  }

}
 800895e:	46bd      	mov	sp, r7
 8008960:	b02b      	add	sp, #172	; 0xac
 8008962:	bd90      	pop	{r4, r7, pc}
 8008964:	fffffeff 	.word	0xfffffeff
 8008968:	fffffedf 	.word	0xfffffedf

0800896c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008974:	46c0      	nop			; (mov r8, r8)
 8008976:	46bd      	mov	sp, r7
 8008978:	b002      	add	sp, #8
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008984:	46c0      	nop			; (mov r8, r8)
 8008986:	46bd      	mov	sp, r7
 8008988:	b002      	add	sp, #8
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	000a      	movs	r2, r1
 8008996:	1cbb      	adds	r3, r7, #2
 8008998:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	46bd      	mov	sp, r7
 800899e:	b002      	add	sp, #8
 80089a0:	bd80      	pop	{r7, pc}
	...

080089a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b088      	sub	sp, #32
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089ac:	231e      	movs	r3, #30
 80089ae:	18fb      	adds	r3, r7, r3
 80089b0:	2200      	movs	r2, #0
 80089b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689a      	ldr	r2, [r3, #8]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	431a      	orrs	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	431a      	orrs	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4aaf      	ldr	r2, [pc, #700]	; (8008c90 <UART_SetConfig+0x2ec>)
 80089d4:	4013      	ands	r3, r2
 80089d6:	0019      	movs	r1, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	430a      	orrs	r2, r1
 80089e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4aaa      	ldr	r2, [pc, #680]	; (8008c94 <UART_SetConfig+0x2f0>)
 80089ea:	4013      	ands	r3, r2
 80089ec:	0019      	movs	r1, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	4aa1      	ldr	r2, [pc, #644]	; (8008c98 <UART_SetConfig+0x2f4>)
 8008a12:	4013      	ands	r3, r2
 8008a14:	0019      	movs	r1, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a9d      	ldr	r2, [pc, #628]	; (8008c9c <UART_SetConfig+0x2f8>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d127      	bne.n	8008a7a <UART_SetConfig+0xd6>
 8008a2a:	4b9d      	ldr	r3, [pc, #628]	; (8008ca0 <UART_SetConfig+0x2fc>)
 8008a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2e:	2203      	movs	r2, #3
 8008a30:	4013      	ands	r3, r2
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d00d      	beq.n	8008a52 <UART_SetConfig+0xae>
 8008a36:	d81b      	bhi.n	8008a70 <UART_SetConfig+0xcc>
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d014      	beq.n	8008a66 <UART_SetConfig+0xc2>
 8008a3c:	d818      	bhi.n	8008a70 <UART_SetConfig+0xcc>
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <UART_SetConfig+0xa4>
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d00a      	beq.n	8008a5c <UART_SetConfig+0xb8>
 8008a46:	e013      	b.n	8008a70 <UART_SetConfig+0xcc>
 8008a48:	231f      	movs	r3, #31
 8008a4a:	18fb      	adds	r3, r7, r3
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	701a      	strb	r2, [r3, #0]
 8008a50:	e065      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008a52:	231f      	movs	r3, #31
 8008a54:	18fb      	adds	r3, r7, r3
 8008a56:	2202      	movs	r2, #2
 8008a58:	701a      	strb	r2, [r3, #0]
 8008a5a:	e060      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008a5c:	231f      	movs	r3, #31
 8008a5e:	18fb      	adds	r3, r7, r3
 8008a60:	2204      	movs	r2, #4
 8008a62:	701a      	strb	r2, [r3, #0]
 8008a64:	e05b      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008a66:	231f      	movs	r3, #31
 8008a68:	18fb      	adds	r3, r7, r3
 8008a6a:	2208      	movs	r2, #8
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	e056      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008a70:	231f      	movs	r3, #31
 8008a72:	18fb      	adds	r3, r7, r3
 8008a74:	2210      	movs	r2, #16
 8008a76:	701a      	strb	r2, [r3, #0]
 8008a78:	e051      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a89      	ldr	r2, [pc, #548]	; (8008ca4 <UART_SetConfig+0x300>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d134      	bne.n	8008aee <UART_SetConfig+0x14a>
 8008a84:	4b86      	ldr	r3, [pc, #536]	; (8008ca0 <UART_SetConfig+0x2fc>)
 8008a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a88:	23c0      	movs	r3, #192	; 0xc0
 8008a8a:	029b      	lsls	r3, r3, #10
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	22c0      	movs	r2, #192	; 0xc0
 8008a90:	0292      	lsls	r2, r2, #10
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d017      	beq.n	8008ac6 <UART_SetConfig+0x122>
 8008a96:	22c0      	movs	r2, #192	; 0xc0
 8008a98:	0292      	lsls	r2, r2, #10
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d822      	bhi.n	8008ae4 <UART_SetConfig+0x140>
 8008a9e:	2280      	movs	r2, #128	; 0x80
 8008aa0:	0292      	lsls	r2, r2, #10
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d019      	beq.n	8008ada <UART_SetConfig+0x136>
 8008aa6:	2280      	movs	r2, #128	; 0x80
 8008aa8:	0292      	lsls	r2, r2, #10
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d81a      	bhi.n	8008ae4 <UART_SetConfig+0x140>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <UART_SetConfig+0x118>
 8008ab2:	2280      	movs	r2, #128	; 0x80
 8008ab4:	0252      	lsls	r2, r2, #9
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d00a      	beq.n	8008ad0 <UART_SetConfig+0x12c>
 8008aba:	e013      	b.n	8008ae4 <UART_SetConfig+0x140>
 8008abc:	231f      	movs	r3, #31
 8008abe:	18fb      	adds	r3, r7, r3
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	701a      	strb	r2, [r3, #0]
 8008ac4:	e02b      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008ac6:	231f      	movs	r3, #31
 8008ac8:	18fb      	adds	r3, r7, r3
 8008aca:	2202      	movs	r2, #2
 8008acc:	701a      	strb	r2, [r3, #0]
 8008ace:	e026      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008ad0:	231f      	movs	r3, #31
 8008ad2:	18fb      	adds	r3, r7, r3
 8008ad4:	2204      	movs	r2, #4
 8008ad6:	701a      	strb	r2, [r3, #0]
 8008ad8:	e021      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008ada:	231f      	movs	r3, #31
 8008adc:	18fb      	adds	r3, r7, r3
 8008ade:	2208      	movs	r2, #8
 8008ae0:	701a      	strb	r2, [r3, #0]
 8008ae2:	e01c      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008ae4:	231f      	movs	r3, #31
 8008ae6:	18fb      	adds	r3, r7, r3
 8008ae8:	2210      	movs	r2, #16
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	e017      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a6d      	ldr	r2, [pc, #436]	; (8008ca8 <UART_SetConfig+0x304>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d104      	bne.n	8008b02 <UART_SetConfig+0x15e>
 8008af8:	231f      	movs	r3, #31
 8008afa:	18fb      	adds	r3, r7, r3
 8008afc:	2200      	movs	r2, #0
 8008afe:	701a      	strb	r2, [r3, #0]
 8008b00:	e00d      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a69      	ldr	r2, [pc, #420]	; (8008cac <UART_SetConfig+0x308>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d104      	bne.n	8008b16 <UART_SetConfig+0x172>
 8008b0c:	231f      	movs	r3, #31
 8008b0e:	18fb      	adds	r3, r7, r3
 8008b10:	2200      	movs	r2, #0
 8008b12:	701a      	strb	r2, [r3, #0]
 8008b14:	e003      	b.n	8008b1e <UART_SetConfig+0x17a>
 8008b16:	231f      	movs	r3, #31
 8008b18:	18fb      	adds	r3, r7, r3
 8008b1a:	2210      	movs	r2, #16
 8008b1c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	69da      	ldr	r2, [r3, #28]
 8008b22:	2380      	movs	r3, #128	; 0x80
 8008b24:	021b      	lsls	r3, r3, #8
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d15d      	bne.n	8008be6 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8008b2a:	231f      	movs	r3, #31
 8008b2c:	18fb      	adds	r3, r7, r3
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d015      	beq.n	8008b60 <UART_SetConfig+0x1bc>
 8008b34:	dc18      	bgt.n	8008b68 <UART_SetConfig+0x1c4>
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d00d      	beq.n	8008b56 <UART_SetConfig+0x1b2>
 8008b3a:	dc15      	bgt.n	8008b68 <UART_SetConfig+0x1c4>
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <UART_SetConfig+0x1a2>
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d005      	beq.n	8008b50 <UART_SetConfig+0x1ac>
 8008b44:	e010      	b.n	8008b68 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b46:	f7fe f865 	bl	8006c14 <HAL_RCC_GetPCLK1Freq>
 8008b4a:	0003      	movs	r3, r0
 8008b4c:	61bb      	str	r3, [r7, #24]
        break;
 8008b4e:	e012      	b.n	8008b76 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b50:	4b57      	ldr	r3, [pc, #348]	; (8008cb0 <UART_SetConfig+0x30c>)
 8008b52:	61bb      	str	r3, [r7, #24]
        break;
 8008b54:	e00f      	b.n	8008b76 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b56:	f7fd ffd1 	bl	8006afc <HAL_RCC_GetSysClockFreq>
 8008b5a:	0003      	movs	r3, r0
 8008b5c:	61bb      	str	r3, [r7, #24]
        break;
 8008b5e:	e00a      	b.n	8008b76 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b60:	2380      	movs	r3, #128	; 0x80
 8008b62:	021b      	lsls	r3, r3, #8
 8008b64:	61bb      	str	r3, [r7, #24]
        break;
 8008b66:	e006      	b.n	8008b76 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b6c:	231e      	movs	r3, #30
 8008b6e:	18fb      	adds	r3, r7, r3
 8008b70:	2201      	movs	r2, #1
 8008b72:	701a      	strb	r2, [r3, #0]
        break;
 8008b74:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d100      	bne.n	8008b7e <UART_SetConfig+0x1da>
 8008b7c:	e07b      	b.n	8008c76 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	005a      	lsls	r2, r3, #1
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	085b      	lsrs	r3, r3, #1
 8008b88:	18d2      	adds	r2, r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	0019      	movs	r1, r3
 8008b90:	0010      	movs	r0, r2
 8008b92:	f7f7 facb 	bl	800012c <__udivsi3>
 8008b96:	0003      	movs	r3, r0
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	2b0f      	cmp	r3, #15
 8008ba0:	d91c      	bls.n	8008bdc <UART_SetConfig+0x238>
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	2380      	movs	r3, #128	; 0x80
 8008ba6:	025b      	lsls	r3, r3, #9
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d217      	bcs.n	8008bdc <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	200e      	movs	r0, #14
 8008bb2:	183b      	adds	r3, r7, r0
 8008bb4:	210f      	movs	r1, #15
 8008bb6:	438a      	bics	r2, r1
 8008bb8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	085b      	lsrs	r3, r3, #1
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	2207      	movs	r2, #7
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	b299      	uxth	r1, r3
 8008bc6:	183b      	adds	r3, r7, r0
 8008bc8:	183a      	adds	r2, r7, r0
 8008bca:	8812      	ldrh	r2, [r2, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	183a      	adds	r2, r7, r0
 8008bd6:	8812      	ldrh	r2, [r2, #0]
 8008bd8:	60da      	str	r2, [r3, #12]
 8008bda:	e04c      	b.n	8008c76 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008bdc:	231e      	movs	r3, #30
 8008bde:	18fb      	adds	r3, r7, r3
 8008be0:	2201      	movs	r2, #1
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	e047      	b.n	8008c76 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008be6:	231f      	movs	r3, #31
 8008be8:	18fb      	adds	r3, r7, r3
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d015      	beq.n	8008c1c <UART_SetConfig+0x278>
 8008bf0:	dc18      	bgt.n	8008c24 <UART_SetConfig+0x280>
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	d00d      	beq.n	8008c12 <UART_SetConfig+0x26e>
 8008bf6:	dc15      	bgt.n	8008c24 <UART_SetConfig+0x280>
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <UART_SetConfig+0x25e>
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d005      	beq.n	8008c0c <UART_SetConfig+0x268>
 8008c00:	e010      	b.n	8008c24 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c02:	f7fe f807 	bl	8006c14 <HAL_RCC_GetPCLK1Freq>
 8008c06:	0003      	movs	r3, r0
 8008c08:	61bb      	str	r3, [r7, #24]
        break;
 8008c0a:	e012      	b.n	8008c32 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c0c:	4b28      	ldr	r3, [pc, #160]	; (8008cb0 <UART_SetConfig+0x30c>)
 8008c0e:	61bb      	str	r3, [r7, #24]
        break;
 8008c10:	e00f      	b.n	8008c32 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c12:	f7fd ff73 	bl	8006afc <HAL_RCC_GetSysClockFreq>
 8008c16:	0003      	movs	r3, r0
 8008c18:	61bb      	str	r3, [r7, #24]
        break;
 8008c1a:	e00a      	b.n	8008c32 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c1c:	2380      	movs	r3, #128	; 0x80
 8008c1e:	021b      	lsls	r3, r3, #8
 8008c20:	61bb      	str	r3, [r7, #24]
        break;
 8008c22:	e006      	b.n	8008c32 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c28:	231e      	movs	r3, #30
 8008c2a:	18fb      	adds	r3, r7, r3
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	701a      	strb	r2, [r3, #0]
        break;
 8008c30:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d01e      	beq.n	8008c76 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	085a      	lsrs	r2, r3, #1
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	18d2      	adds	r2, r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	0019      	movs	r1, r3
 8008c48:	0010      	movs	r0, r2
 8008c4a:	f7f7 fa6f 	bl	800012c <__udivsi3>
 8008c4e:	0003      	movs	r3, r0
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2b0f      	cmp	r3, #15
 8008c58:	d909      	bls.n	8008c6e <UART_SetConfig+0x2ca>
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	2380      	movs	r3, #128	; 0x80
 8008c5e:	025b      	lsls	r3, r3, #9
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d204      	bcs.n	8008c6e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	60da      	str	r2, [r3, #12]
 8008c6c:	e003      	b.n	8008c76 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008c6e:	231e      	movs	r3, #30
 8008c70:	18fb      	adds	r3, r7, r3
 8008c72:	2201      	movs	r2, #1
 8008c74:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008c82:	231e      	movs	r3, #30
 8008c84:	18fb      	adds	r3, r7, r3
 8008c86:	781b      	ldrb	r3, [r3, #0]
}
 8008c88:	0018      	movs	r0, r3
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	b008      	add	sp, #32
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	efff69f3 	.word	0xefff69f3
 8008c94:	ffffcfff 	.word	0xffffcfff
 8008c98:	fffff4ff 	.word	0xfffff4ff
 8008c9c:	40013800 	.word	0x40013800
 8008ca0:	40021000 	.word	0x40021000
 8008ca4:	40004400 	.word	0x40004400
 8008ca8:	40004800 	.word	0x40004800
 8008cac:	40004c00 	.word	0x40004c00
 8008cb0:	007a1200 	.word	0x007a1200

08008cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	d00b      	beq.n	8008cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	4a4a      	ldr	r2, [pc, #296]	; (8008df8 <UART_AdvFeatureConfig+0x144>)
 8008cce:	4013      	ands	r3, r2
 8008cd0:	0019      	movs	r1, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	d00b      	beq.n	8008d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	4a43      	ldr	r2, [pc, #268]	; (8008dfc <UART_AdvFeatureConfig+0x148>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	0019      	movs	r1, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	2204      	movs	r2, #4
 8008d06:	4013      	ands	r3, r2
 8008d08:	d00b      	beq.n	8008d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	4a3b      	ldr	r2, [pc, #236]	; (8008e00 <UART_AdvFeatureConfig+0x14c>)
 8008d12:	4013      	ands	r3, r2
 8008d14:	0019      	movs	r1, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	2208      	movs	r2, #8
 8008d28:	4013      	ands	r3, r2
 8008d2a:	d00b      	beq.n	8008d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	4a34      	ldr	r2, [pc, #208]	; (8008e04 <UART_AdvFeatureConfig+0x150>)
 8008d34:	4013      	ands	r3, r2
 8008d36:	0019      	movs	r1, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	2210      	movs	r2, #16
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	d00b      	beq.n	8008d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	4a2c      	ldr	r2, [pc, #176]	; (8008e08 <UART_AdvFeatureConfig+0x154>)
 8008d56:	4013      	ands	r3, r2
 8008d58:	0019      	movs	r1, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	d00b      	beq.n	8008d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	4a25      	ldr	r2, [pc, #148]	; (8008e0c <UART_AdvFeatureConfig+0x158>)
 8008d78:	4013      	ands	r3, r2
 8008d7a:	0019      	movs	r1, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	2240      	movs	r2, #64	; 0x40
 8008d8e:	4013      	ands	r3, r2
 8008d90:	d01d      	beq.n	8008dce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	4a1d      	ldr	r2, [pc, #116]	; (8008e10 <UART_AdvFeatureConfig+0x15c>)
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	0019      	movs	r1, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dae:	2380      	movs	r3, #128	; 0x80
 8008db0:	035b      	lsls	r3, r3, #13
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d10b      	bne.n	8008dce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	4a15      	ldr	r2, [pc, #84]	; (8008e14 <UART_AdvFeatureConfig+0x160>)
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	0019      	movs	r1, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	2280      	movs	r2, #128	; 0x80
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	d00b      	beq.n	8008df0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	4a0e      	ldr	r2, [pc, #56]	; (8008e18 <UART_AdvFeatureConfig+0x164>)
 8008de0:	4013      	ands	r3, r2
 8008de2:	0019      	movs	r1, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	605a      	str	r2, [r3, #4]
  }
}
 8008df0:	46c0      	nop			; (mov r8, r8)
 8008df2:	46bd      	mov	sp, r7
 8008df4:	b002      	add	sp, #8
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	fffdffff 	.word	0xfffdffff
 8008dfc:	fffeffff 	.word	0xfffeffff
 8008e00:	fffbffff 	.word	0xfffbffff
 8008e04:	ffff7fff 	.word	0xffff7fff
 8008e08:	ffffefff 	.word	0xffffefff
 8008e0c:	ffffdfff 	.word	0xffffdfff
 8008e10:	ffefffff 	.word	0xffefffff
 8008e14:	ff9fffff 	.word	0xff9fffff
 8008e18:	fff7ffff 	.word	0xfff7ffff

08008e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af02      	add	r7, sp, #8
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2280      	movs	r2, #128	; 0x80
 8008e28:	2100      	movs	r1, #0
 8008e2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e2c:	f7fa fb00 	bl	8003430 <HAL_GetTick>
 8008e30:	0003      	movs	r3, r0
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2208      	movs	r2, #8
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d10c      	bne.n	8008e5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2280      	movs	r2, #128	; 0x80
 8008e46:	0391      	lsls	r1, r2, #14
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	4a17      	ldr	r2, [pc, #92]	; (8008ea8 <UART_CheckIdleState+0x8c>)
 8008e4c:	9200      	str	r2, [sp, #0]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f000 f82c 	bl	8008eac <UART_WaitOnFlagUntilTimeout>
 8008e54:	1e03      	subs	r3, r0, #0
 8008e56:	d001      	beq.n	8008e5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e021      	b.n	8008ea0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2204      	movs	r2, #4
 8008e64:	4013      	ands	r3, r2
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d10c      	bne.n	8008e84 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2280      	movs	r2, #128	; 0x80
 8008e6e:	03d1      	lsls	r1, r2, #15
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	4a0d      	ldr	r2, [pc, #52]	; (8008ea8 <UART_CheckIdleState+0x8c>)
 8008e74:	9200      	str	r2, [sp, #0]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f000 f818 	bl	8008eac <UART_WaitOnFlagUntilTimeout>
 8008e7c:	1e03      	subs	r3, r0, #0
 8008e7e:	d001      	beq.n	8008e84 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e00d      	b.n	8008ea0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2274      	movs	r2, #116	; 0x74
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	b004      	add	sp, #16
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	01ffffff 	.word	0x01ffffff

08008eac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b094      	sub	sp, #80	; 0x50
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	603b      	str	r3, [r7, #0]
 8008eb8:	1dfb      	adds	r3, r7, #7
 8008eba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ebc:	e0a3      	b.n	8009006 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	d100      	bne.n	8008ec6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008ec4:	e09f      	b.n	8009006 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ec6:	f7fa fab3 	bl	8003430 <HAL_GetTick>
 8008eca:	0002      	movs	r2, r0
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d302      	bcc.n	8008edc <UART_WaitOnFlagUntilTimeout+0x30>
 8008ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d13d      	bne.n	8008f58 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008edc:	f3ef 8310 	mrs	r3, PRIMASK
 8008ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eec:	f383 8810 	msr	PRIMASK, r3
}
 8008ef0:	46c0      	nop			; (mov r8, r8)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	494c      	ldr	r1, [pc, #304]	; (8009030 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008efe:	400a      	ands	r2, r1
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f04:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	f383 8810 	msr	PRIMASK, r3
}
 8008f0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f12:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f16:	643b      	str	r3, [r7, #64]	; 0x40
 8008f18:	2301      	movs	r3, #1
 8008f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	f383 8810 	msr	PRIMASK, r3
}
 8008f22:	46c0      	nop			; (mov r8, r8)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689a      	ldr	r2, [r3, #8]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2101      	movs	r1, #1
 8008f30:	438a      	bics	r2, r1
 8008f32:	609a      	str	r2, [r3, #8]
 8008f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3a:	f383 8810 	msr	PRIMASK, r3
}
 8008f3e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2220      	movs	r2, #32
 8008f44:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2220      	movs	r2, #32
 8008f4a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2274      	movs	r2, #116	; 0x74
 8008f50:	2100      	movs	r1, #0
 8008f52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e067      	b.n	8009028 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2204      	movs	r2, #4
 8008f60:	4013      	ands	r3, r2
 8008f62:	d050      	beq.n	8009006 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	69da      	ldr	r2, [r3, #28]
 8008f6a:	2380      	movs	r3, #128	; 0x80
 8008f6c:	011b      	lsls	r3, r3, #4
 8008f6e:	401a      	ands	r2, r3
 8008f70:	2380      	movs	r3, #128	; 0x80
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d146      	bne.n	8009006 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2280      	movs	r2, #128	; 0x80
 8008f7e:	0112      	lsls	r2, r2, #4
 8008f80:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f82:	f3ef 8310 	mrs	r3, PRIMASK
 8008f86:	613b      	str	r3, [r7, #16]
  return(result);
 8008f88:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f383 8810 	msr	PRIMASK, r3
}
 8008f96:	46c0      	nop			; (mov r8, r8)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4923      	ldr	r1, [pc, #140]	; (8009030 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008fa4:	400a      	ands	r2, r1
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008faa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	f383 8810 	msr	PRIMASK, r3
}
 8008fb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008fb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8008fba:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	f383 8810 	msr	PRIMASK, r3
}
 8008fc8:	46c0      	nop			; (mov r8, r8)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	438a      	bics	r2, r1
 8008fd8:	609a      	str	r2, [r3, #8]
 8008fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	f383 8810 	msr	PRIMASK, r3
}
 8008fe4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2220      	movs	r2, #32
 8008ff0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2280      	movs	r2, #128	; 0x80
 8008ff6:	2120      	movs	r1, #32
 8008ff8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2274      	movs	r2, #116	; 0x74
 8008ffe:	2100      	movs	r1, #0
 8009000:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e010      	b.n	8009028 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	4013      	ands	r3, r2
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	425a      	negs	r2, r3
 8009016:	4153      	adcs	r3, r2
 8009018:	b2db      	uxtb	r3, r3
 800901a:	001a      	movs	r2, r3
 800901c:	1dfb      	adds	r3, r7, #7
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	d100      	bne.n	8009026 <UART_WaitOnFlagUntilTimeout+0x17a>
 8009024:	e74b      	b.n	8008ebe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	0018      	movs	r0, r3
 800902a:	46bd      	mov	sp, r7
 800902c:	b014      	add	sp, #80	; 0x50
 800902e:	bd80      	pop	{r7, pc}
 8009030:	fffffe5f 	.word	0xfffffe5f

08009034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08e      	sub	sp, #56	; 0x38
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800903c:	f3ef 8310 	mrs	r3, PRIMASK
 8009040:	617b      	str	r3, [r7, #20]
  return(result);
 8009042:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009044:	637b      	str	r3, [r7, #52]	; 0x34
 8009046:	2301      	movs	r3, #1
 8009048:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	f383 8810 	msr	PRIMASK, r3
}
 8009050:	46c0      	nop			; (mov r8, r8)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4925      	ldr	r1, [pc, #148]	; (80090f4 <UART_EndRxTransfer+0xc0>)
 800905e:	400a      	ands	r2, r1
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009064:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	f383 8810 	msr	PRIMASK, r3
}
 800906c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800906e:	f3ef 8310 	mrs	r3, PRIMASK
 8009072:	623b      	str	r3, [r7, #32]
  return(result);
 8009074:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009076:	633b      	str	r3, [r7, #48]	; 0x30
 8009078:	2301      	movs	r3, #1
 800907a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	f383 8810 	msr	PRIMASK, r3
}
 8009082:	46c0      	nop			; (mov r8, r8)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2101      	movs	r1, #1
 8009090:	438a      	bics	r2, r1
 8009092:	609a      	str	r2, [r3, #8]
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	f383 8810 	msr	PRIMASK, r3
}
 800909e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d118      	bne.n	80090da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a8:	f3ef 8310 	mrs	r3, PRIMASK
 80090ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80090ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090b2:	2301      	movs	r3, #1
 80090b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f383 8810 	msr	PRIMASK, r3
}
 80090bc:	46c0      	nop			; (mov r8, r8)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2110      	movs	r1, #16
 80090ca:	438a      	bics	r2, r1
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f383 8810 	msr	PRIMASK, r3
}
 80090d8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	665a      	str	r2, [r3, #100]	; 0x64
}
 80090ec:	46c0      	nop			; (mov r8, r8)
 80090ee:	46bd      	mov	sp, r7
 80090f0:	b00e      	add	sp, #56	; 0x38
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	fffffedf 	.word	0xfffffedf

080090f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	225a      	movs	r2, #90	; 0x5a
 800910a:	2100      	movs	r1, #0
 800910c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2252      	movs	r2, #82	; 0x52
 8009112:	2100      	movs	r1, #0
 8009114:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	0018      	movs	r0, r3
 800911a:	f7ff fc2f 	bl	800897c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	46bd      	mov	sp, r7
 8009122:	b004      	add	sp, #16
 8009124:	bd80      	pop	{r7, pc}

08009126 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b086      	sub	sp, #24
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800912e:	f3ef 8310 	mrs	r3, PRIMASK
 8009132:	60bb      	str	r3, [r7, #8]
  return(result);
 8009134:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009136:	617b      	str	r3, [r7, #20]
 8009138:	2301      	movs	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f383 8810 	msr	PRIMASK, r3
}
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2140      	movs	r1, #64	; 0x40
 8009150:	438a      	bics	r2, r1
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f383 8810 	msr	PRIMASK, r3
}
 800915e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	0018      	movs	r0, r3
 8009170:	f7ff fbfc 	bl	800896c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009174:	46c0      	nop			; (mov r8, r8)
 8009176:	46bd      	mov	sp, r7
 8009178:	b006      	add	sp, #24
 800917a:	bd80      	pop	{r7, pc}

0800917c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009184:	46c0      	nop			; (mov r8, r8)
 8009186:	46bd      	mov	sp, r7
 8009188:	b002      	add	sp, #8
 800918a:	bd80      	pop	{r7, pc}

0800918c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2244      	movs	r2, #68	; 0x44
 8009198:	2100      	movs	r1, #0
 800919a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800919c:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <USB_EnableGlobalInt+0x28>)
 800919e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	b299      	uxth	r1, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2240      	movs	r2, #64	; 0x40
 80091a8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	0018      	movs	r0, r3
 80091ae:	46bd      	mov	sp, r7
 80091b0:	b004      	add	sp, #16
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	0000bf80 	.word	0x0000bf80

080091b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80091c0:	4b09      	ldr	r3, [pc, #36]	; (80091e8 <USB_DisableGlobalInt+0x30>)
 80091c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2240      	movs	r2, #64	; 0x40
 80091c8:	5a9b      	ldrh	r3, [r3, r2]
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	b292      	uxth	r2, r2
 80091d0:	43d2      	mvns	r2, r2
 80091d2:	b292      	uxth	r2, r2
 80091d4:	4013      	ands	r3, r2
 80091d6:	b299      	uxth	r1, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2240      	movs	r2, #64	; 0x40
 80091dc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	0018      	movs	r0, r3
 80091e2:	46bd      	mov	sp, r7
 80091e4:	b004      	add	sp, #16
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	0000bf80 	.word	0x0000bf80

080091ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80091ec:	b084      	sub	sp, #16
 80091ee:	b590      	push	{r4, r7, lr}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	2004      	movs	r0, #4
 80091f8:	2410      	movs	r4, #16
 80091fa:	1900      	adds	r0, r0, r4
 80091fc:	2408      	movs	r4, #8
 80091fe:	46a4      	mov	ip, r4
 8009200:	44bc      	add	ip, r7
 8009202:	4460      	add	r0, ip
 8009204:	6001      	str	r1, [r0, #0]
 8009206:	6042      	str	r2, [r0, #4]
 8009208:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2240      	movs	r2, #64	; 0x40
 800920e:	2101      	movs	r1, #1
 8009210:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2240      	movs	r2, #64	; 0x40
 8009216:	2100      	movs	r1, #0
 8009218:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2244      	movs	r2, #68	; 0x44
 800921e:	2100      	movs	r1, #0
 8009220:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2250      	movs	r2, #80	; 0x50
 8009226:	2100      	movs	r1, #0
 8009228:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	0018      	movs	r0, r3
 800922e:	46bd      	mov	sp, r7
 8009230:	b003      	add	sp, #12
 8009232:	bc90      	pop	{r4, r7}
 8009234:	bc08      	pop	{r3}
 8009236:	b004      	add	sp, #16
 8009238:	4718      	bx	r3
	...

0800923c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b09c      	sub	sp, #112	; 0x70
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009246:	236f      	movs	r3, #111	; 0x6f
 8009248:	18fb      	adds	r3, r7, r3
 800924a:	2200      	movs	r2, #0
 800924c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	18d3      	adds	r3, r2, r3
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	b29a      	uxth	r2, r3
 800925c:	236c      	movs	r3, #108	; 0x6c
 800925e:	18fb      	adds	r3, r7, r3
 8009260:	49cf      	ldr	r1, [pc, #828]	; (80095a0 <USB_ActivateEndpoint+0x364>)
 8009262:	400a      	ands	r2, r1
 8009264:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	78db      	ldrb	r3, [r3, #3]
 800926a:	2b03      	cmp	r3, #3
 800926c:	d017      	beq.n	800929e <USB_ActivateEndpoint+0x62>
 800926e:	dc28      	bgt.n	80092c2 <USB_ActivateEndpoint+0x86>
 8009270:	2b02      	cmp	r3, #2
 8009272:	d00e      	beq.n	8009292 <USB_ActivateEndpoint+0x56>
 8009274:	dc25      	bgt.n	80092c2 <USB_ActivateEndpoint+0x86>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <USB_ActivateEndpoint+0x44>
 800927a:	2b01      	cmp	r3, #1
 800927c:	d018      	beq.n	80092b0 <USB_ActivateEndpoint+0x74>
 800927e:	e020      	b.n	80092c2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009280:	226c      	movs	r2, #108	; 0x6c
 8009282:	18bb      	adds	r3, r7, r2
 8009284:	18ba      	adds	r2, r7, r2
 8009286:	8812      	ldrh	r2, [r2, #0]
 8009288:	2180      	movs	r1, #128	; 0x80
 800928a:	0089      	lsls	r1, r1, #2
 800928c:	430a      	orrs	r2, r1
 800928e:	801a      	strh	r2, [r3, #0]
      break;
 8009290:	e01c      	b.n	80092cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8009292:	226c      	movs	r2, #108	; 0x6c
 8009294:	18bb      	adds	r3, r7, r2
 8009296:	18ba      	adds	r2, r7, r2
 8009298:	8812      	ldrh	r2, [r2, #0]
 800929a:	801a      	strh	r2, [r3, #0]
      break;
 800929c:	e016      	b.n	80092cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800929e:	226c      	movs	r2, #108	; 0x6c
 80092a0:	18bb      	adds	r3, r7, r2
 80092a2:	18ba      	adds	r2, r7, r2
 80092a4:	8812      	ldrh	r2, [r2, #0]
 80092a6:	21c0      	movs	r1, #192	; 0xc0
 80092a8:	00c9      	lsls	r1, r1, #3
 80092aa:	430a      	orrs	r2, r1
 80092ac:	801a      	strh	r2, [r3, #0]
      break;
 80092ae:	e00d      	b.n	80092cc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80092b0:	226c      	movs	r2, #108	; 0x6c
 80092b2:	18bb      	adds	r3, r7, r2
 80092b4:	18ba      	adds	r2, r7, r2
 80092b6:	8812      	ldrh	r2, [r2, #0]
 80092b8:	2180      	movs	r1, #128	; 0x80
 80092ba:	00c9      	lsls	r1, r1, #3
 80092bc:	430a      	orrs	r2, r1
 80092be:	801a      	strh	r2, [r3, #0]
      break;
 80092c0:	e004      	b.n	80092cc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80092c2:	236f      	movs	r3, #111	; 0x6f
 80092c4:	18fb      	adds	r3, r7, r3
 80092c6:	2201      	movs	r2, #1
 80092c8:	701a      	strb	r2, [r3, #0]
      break;
 80092ca:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	18d3      	adds	r3, r2, r3
 80092d6:	226c      	movs	r2, #108	; 0x6c
 80092d8:	18ba      	adds	r2, r7, r2
 80092da:	8812      	ldrh	r2, [r2, #0]
 80092dc:	49b1      	ldr	r1, [pc, #708]	; (80095a4 <USB_ActivateEndpoint+0x368>)
 80092de:	430a      	orrs	r2, r1
 80092e0:	b292      	uxth	r2, r2
 80092e2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	18d3      	adds	r3, r2, r3
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	b21b      	sxth	r3, r3
 80092f4:	4aac      	ldr	r2, [pc, #688]	; (80095a8 <USB_ActivateEndpoint+0x36c>)
 80092f6:	4013      	ands	r3, r2
 80092f8:	b21a      	sxth	r2, r3
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	b21b      	sxth	r3, r3
 8009300:	4313      	orrs	r3, r2
 8009302:	b21a      	sxth	r2, r3
 8009304:	2166      	movs	r1, #102	; 0x66
 8009306:	187b      	adds	r3, r7, r1
 8009308:	801a      	strh	r2, [r3, #0]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	18d3      	adds	r3, r2, r3
 8009314:	187a      	adds	r2, r7, r1
 8009316:	8812      	ldrh	r2, [r2, #0]
 8009318:	49a2      	ldr	r1, [pc, #648]	; (80095a4 <USB_ActivateEndpoint+0x368>)
 800931a:	430a      	orrs	r2, r1
 800931c:	b292      	uxth	r2, r2
 800931e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	7b1b      	ldrb	r3, [r3, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d000      	beq.n	800932a <USB_ActivateEndpoint+0xee>
 8009328:	e150      	b.n	80095cc <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d100      	bne.n	8009334 <USB_ActivateEndpoint+0xf8>
 8009332:	e07a      	b.n	800942a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	61bb      	str	r3, [r7, #24]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2250      	movs	r2, #80	; 0x50
 800933c:	5a9b      	ldrh	r3, [r3, r2]
 800933e:	b29b      	uxth	r3, r3
 8009340:	001a      	movs	r2, r3
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	189b      	adds	r3, r3, r2
 8009346:	61bb      	str	r3, [r7, #24]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	00da      	lsls	r2, r3, #3
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	18d3      	adds	r3, r2, r3
 8009352:	2280      	movs	r2, #128	; 0x80
 8009354:	00d2      	lsls	r2, r2, #3
 8009356:	4694      	mov	ip, r2
 8009358:	4463      	add	r3, ip
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	88db      	ldrh	r3, [r3, #6]
 8009360:	085b      	lsrs	r3, r3, #1
 8009362:	b29b      	uxth	r3, r3
 8009364:	18db      	adds	r3, r3, r3
 8009366:	b29a      	uxth	r2, r3
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	18d2      	adds	r2, r2, r3
 8009376:	2112      	movs	r1, #18
 8009378:	187b      	adds	r3, r7, r1
 800937a:	8812      	ldrh	r2, [r2, #0]
 800937c:	801a      	strh	r2, [r3, #0]
 800937e:	187b      	adds	r3, r7, r1
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	2240      	movs	r2, #64	; 0x40
 8009384:	4013      	ands	r3, r2
 8009386:	d016      	beq.n	80093b6 <USB_ActivateEndpoint+0x17a>
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	18d3      	adds	r3, r2, r3
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	b29a      	uxth	r2, r3
 8009396:	2010      	movs	r0, #16
 8009398:	183b      	adds	r3, r7, r0
 800939a:	4983      	ldr	r1, [pc, #524]	; (80095a8 <USB_ActivateEndpoint+0x36c>)
 800939c:	400a      	ands	r2, r1
 800939e:	801a      	strh	r2, [r3, #0]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	18d3      	adds	r3, r2, r3
 80093aa:	183a      	adds	r2, r7, r0
 80093ac:	8812      	ldrh	r2, [r2, #0]
 80093ae:	497f      	ldr	r1, [pc, #508]	; (80095ac <USB_ActivateEndpoint+0x370>)
 80093b0:	430a      	orrs	r2, r1
 80093b2:	b292      	uxth	r2, r2
 80093b4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	78db      	ldrb	r3, [r3, #3]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d01d      	beq.n	80093fa <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	18d3      	adds	r3, r2, r3
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	200c      	movs	r0, #12
 80093ce:	183b      	adds	r3, r7, r0
 80093d0:	4977      	ldr	r1, [pc, #476]	; (80095b0 <USB_ActivateEndpoint+0x374>)
 80093d2:	400a      	ands	r2, r1
 80093d4:	801a      	strh	r2, [r3, #0]
 80093d6:	183b      	adds	r3, r7, r0
 80093d8:	183a      	adds	r2, r7, r0
 80093da:	8812      	ldrh	r2, [r2, #0]
 80093dc:	2120      	movs	r1, #32
 80093de:	404a      	eors	r2, r1
 80093e0:	801a      	strh	r2, [r3, #0]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	18d3      	adds	r3, r2, r3
 80093ec:	183a      	adds	r2, r7, r0
 80093ee:	8812      	ldrh	r2, [r2, #0]
 80093f0:	496c      	ldr	r1, [pc, #432]	; (80095a4 <USB_ActivateEndpoint+0x368>)
 80093f2:	430a      	orrs	r2, r1
 80093f4:	b292      	uxth	r2, r2
 80093f6:	801a      	strh	r2, [r3, #0]
 80093f8:	e27a      	b.n	80098f0 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	18d3      	adds	r3, r2, r3
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	b29a      	uxth	r2, r3
 8009408:	200e      	movs	r0, #14
 800940a:	183b      	adds	r3, r7, r0
 800940c:	4968      	ldr	r1, [pc, #416]	; (80095b0 <USB_ActivateEndpoint+0x374>)
 800940e:	400a      	ands	r2, r1
 8009410:	801a      	strh	r2, [r3, #0]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	18d3      	adds	r3, r2, r3
 800941c:	183a      	adds	r2, r7, r0
 800941e:	8812      	ldrh	r2, [r2, #0]
 8009420:	4960      	ldr	r1, [pc, #384]	; (80095a4 <USB_ActivateEndpoint+0x368>)
 8009422:	430a      	orrs	r2, r1
 8009424:	b292      	uxth	r2, r2
 8009426:	801a      	strh	r2, [r3, #0]
 8009428:	e262      	b.n	80098f0 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	633b      	str	r3, [r7, #48]	; 0x30
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2250      	movs	r2, #80	; 0x50
 8009432:	5a9b      	ldrh	r3, [r3, r2]
 8009434:	b29b      	uxth	r3, r3
 8009436:	001a      	movs	r2, r3
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	189b      	adds	r3, r3, r2
 800943c:	633b      	str	r3, [r7, #48]	; 0x30
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	00da      	lsls	r2, r3, #3
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	18d3      	adds	r3, r2, r3
 8009448:	4a5a      	ldr	r2, [pc, #360]	; (80095b4 <USB_ActivateEndpoint+0x378>)
 800944a:	4694      	mov	ip, r2
 800944c:	4463      	add	r3, ip
 800944e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	88db      	ldrh	r3, [r3, #6]
 8009454:	085b      	lsrs	r3, r3, #1
 8009456:	b29b      	uxth	r3, r3
 8009458:	18db      	adds	r3, r3, r3
 800945a:	b29a      	uxth	r2, r3
 800945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	62bb      	str	r3, [r7, #40]	; 0x28
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2250      	movs	r2, #80	; 0x50
 8009468:	5a9b      	ldrh	r3, [r3, r2]
 800946a:	b29b      	uxth	r3, r3
 800946c:	001a      	movs	r2, r3
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	189b      	adds	r3, r3, r2
 8009472:	62bb      	str	r3, [r7, #40]	; 0x28
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	00da      	lsls	r2, r3, #3
 800947a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947c:	18d3      	adds	r3, r2, r3
 800947e:	4a4e      	ldr	r2, [pc, #312]	; (80095b8 <USB_ActivateEndpoint+0x37c>)
 8009480:	4694      	mov	ip, r2
 8009482:	4463      	add	r3, ip
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d110      	bne.n	80094b0 <USB_ActivateEndpoint+0x274>
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	b29b      	uxth	r3, r3
 8009494:	4a49      	ldr	r2, [pc, #292]	; (80095bc <USB_ActivateEndpoint+0x380>)
 8009496:	4013      	ands	r3, r2
 8009498:	b29a      	uxth	r2, r3
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	801a      	strh	r2, [r3, #0]
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	4a46      	ldr	r2, [pc, #280]	; (80095c0 <USB_ActivateEndpoint+0x384>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	801a      	strh	r2, [r3, #0]
 80094ae:	e02b      	b.n	8009508 <USB_ActivateEndpoint+0x2cc>
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	2b3e      	cmp	r3, #62	; 0x3e
 80094b6:	d812      	bhi.n	80094de <USB_ActivateEndpoint+0x2a2>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	085b      	lsrs	r3, r3, #1
 80094be:	66bb      	str	r3, [r7, #104]	; 0x68
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2201      	movs	r2, #1
 80094c6:	4013      	ands	r3, r2
 80094c8:	d002      	beq.n	80094d0 <USB_ActivateEndpoint+0x294>
 80094ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094cc:	3301      	adds	r3, #1
 80094ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80094d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	029b      	lsls	r3, r3, #10
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	801a      	strh	r2, [r3, #0]
 80094dc:	e014      	b.n	8009508 <USB_ActivateEndpoint+0x2cc>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	095b      	lsrs	r3, r3, #5
 80094e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	221f      	movs	r2, #31
 80094ec:	4013      	ands	r3, r2
 80094ee:	d102      	bne.n	80094f6 <USB_ActivateEndpoint+0x2ba>
 80094f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094f2:	3b01      	subs	r3, #1
 80094f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80094f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	029b      	lsls	r3, r3, #10
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	4a30      	ldr	r2, [pc, #192]	; (80095c0 <USB_ActivateEndpoint+0x384>)
 8009500:	4313      	orrs	r3, r2
 8009502:	b29a      	uxth	r2, r3
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	18d2      	adds	r2, r2, r3
 8009512:	2122      	movs	r1, #34	; 0x22
 8009514:	187b      	adds	r3, r7, r1
 8009516:	8812      	ldrh	r2, [r2, #0]
 8009518:	801a      	strh	r2, [r3, #0]
 800951a:	187b      	adds	r3, r7, r1
 800951c:	881a      	ldrh	r2, [r3, #0]
 800951e:	2380      	movs	r3, #128	; 0x80
 8009520:	01db      	lsls	r3, r3, #7
 8009522:	4013      	ands	r3, r2
 8009524:	d016      	beq.n	8009554 <USB_ActivateEndpoint+0x318>
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	18d3      	adds	r3, r2, r3
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	b29a      	uxth	r2, r3
 8009534:	2020      	movs	r0, #32
 8009536:	183b      	adds	r3, r7, r0
 8009538:	491b      	ldr	r1, [pc, #108]	; (80095a8 <USB_ActivateEndpoint+0x36c>)
 800953a:	400a      	ands	r2, r1
 800953c:	801a      	strh	r2, [r3, #0]
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	18d3      	adds	r3, r2, r3
 8009548:	183a      	adds	r2, r7, r0
 800954a:	8812      	ldrh	r2, [r2, #0]
 800954c:	491d      	ldr	r1, [pc, #116]	; (80095c4 <USB_ActivateEndpoint+0x388>)
 800954e:	430a      	orrs	r2, r1
 8009550:	b292      	uxth	r2, r2
 8009552:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	18d3      	adds	r3, r2, r3
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	b29a      	uxth	r2, r3
 8009562:	201e      	movs	r0, #30
 8009564:	183b      	adds	r3, r7, r0
 8009566:	4918      	ldr	r1, [pc, #96]	; (80095c8 <USB_ActivateEndpoint+0x38c>)
 8009568:	400a      	ands	r2, r1
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	183b      	adds	r3, r7, r0
 800956e:	183a      	adds	r2, r7, r0
 8009570:	8812      	ldrh	r2, [r2, #0]
 8009572:	2180      	movs	r1, #128	; 0x80
 8009574:	0149      	lsls	r1, r1, #5
 8009576:	404a      	eors	r2, r1
 8009578:	801a      	strh	r2, [r3, #0]
 800957a:	183b      	adds	r3, r7, r0
 800957c:	183a      	adds	r2, r7, r0
 800957e:	8812      	ldrh	r2, [r2, #0]
 8009580:	2180      	movs	r1, #128	; 0x80
 8009582:	0189      	lsls	r1, r1, #6
 8009584:	404a      	eors	r2, r1
 8009586:	801a      	strh	r2, [r3, #0]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	18d3      	adds	r3, r2, r3
 8009592:	183a      	adds	r2, r7, r0
 8009594:	8812      	ldrh	r2, [r2, #0]
 8009596:	4903      	ldr	r1, [pc, #12]	; (80095a4 <USB_ActivateEndpoint+0x368>)
 8009598:	430a      	orrs	r2, r1
 800959a:	b292      	uxth	r2, r2
 800959c:	801a      	strh	r2, [r3, #0]
 800959e:	e1a7      	b.n	80098f0 <USB_ActivateEndpoint+0x6b4>
 80095a0:	ffff898f 	.word	0xffff898f
 80095a4:	ffff8080 	.word	0xffff8080
 80095a8:	ffff8f8f 	.word	0xffff8f8f
 80095ac:	ffff80c0 	.word	0xffff80c0
 80095b0:	ffff8fbf 	.word	0xffff8fbf
 80095b4:	00000404 	.word	0x00000404
 80095b8:	00000406 	.word	0x00000406
 80095bc:	ffff83ff 	.word	0xffff83ff
 80095c0:	ffff8000 	.word	0xffff8000
 80095c4:	ffffc080 	.word	0xffffc080
 80095c8:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	78db      	ldrb	r3, [r3, #3]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d117      	bne.n	8009604 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	18d3      	adds	r3, r2, r3
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	2062      	movs	r0, #98	; 0x62
 80095e4:	183b      	adds	r3, r7, r0
 80095e6:	49c6      	ldr	r1, [pc, #792]	; (8009900 <USB_ActivateEndpoint+0x6c4>)
 80095e8:	400a      	ands	r2, r1
 80095ea:	801a      	strh	r2, [r3, #0]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	18d3      	adds	r3, r2, r3
 80095f6:	183a      	adds	r2, r7, r0
 80095f8:	8812      	ldrh	r2, [r2, #0]
 80095fa:	49c2      	ldr	r1, [pc, #776]	; (8009904 <USB_ActivateEndpoint+0x6c8>)
 80095fc:	430a      	orrs	r2, r1
 80095fe:	b292      	uxth	r2, r2
 8009600:	801a      	strh	r2, [r3, #0]
 8009602:	e016      	b.n	8009632 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	18d3      	adds	r3, r2, r3
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	b29a      	uxth	r2, r3
 8009612:	2064      	movs	r0, #100	; 0x64
 8009614:	183b      	adds	r3, r7, r0
 8009616:	49bc      	ldr	r1, [pc, #752]	; (8009908 <USB_ActivateEndpoint+0x6cc>)
 8009618:	400a      	ands	r2, r1
 800961a:	801a      	strh	r2, [r3, #0]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	18d3      	adds	r3, r2, r3
 8009626:	183a      	adds	r2, r7, r0
 8009628:	8812      	ldrh	r2, [r2, #0]
 800962a:	49b8      	ldr	r1, [pc, #736]	; (800990c <USB_ActivateEndpoint+0x6d0>)
 800962c:	430a      	orrs	r2, r1
 800962e:	b292      	uxth	r2, r2
 8009630:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2250      	movs	r2, #80	; 0x50
 800963a:	5a9b      	ldrh	r3, [r3, r2]
 800963c:	b29b      	uxth	r3, r3
 800963e:	001a      	movs	r2, r3
 8009640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009642:	189b      	adds	r3, r3, r2
 8009644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	00da      	lsls	r2, r3, #3
 800964c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800964e:	18d3      	adds	r3, r2, r3
 8009650:	2280      	movs	r2, #128	; 0x80
 8009652:	00d2      	lsls	r2, r2, #3
 8009654:	4694      	mov	ip, r2
 8009656:	4463      	add	r3, ip
 8009658:	65bb      	str	r3, [r7, #88]	; 0x58
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	891b      	ldrh	r3, [r3, #8]
 800965e:	085b      	lsrs	r3, r3, #1
 8009660:	b29b      	uxth	r3, r3
 8009662:	18db      	adds	r3, r3, r3
 8009664:	b29a      	uxth	r2, r3
 8009666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009668:	801a      	strh	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	657b      	str	r3, [r7, #84]	; 0x54
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2250      	movs	r2, #80	; 0x50
 8009672:	5a9b      	ldrh	r3, [r3, r2]
 8009674:	b29b      	uxth	r3, r3
 8009676:	001a      	movs	r2, r3
 8009678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800967a:	189b      	adds	r3, r3, r2
 800967c:	657b      	str	r3, [r7, #84]	; 0x54
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	00da      	lsls	r2, r3, #3
 8009684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009686:	18d3      	adds	r3, r2, r3
 8009688:	4aa1      	ldr	r2, [pc, #644]	; (8009910 <USB_ActivateEndpoint+0x6d4>)
 800968a:	4694      	mov	ip, r2
 800968c:	4463      	add	r3, ip
 800968e:	653b      	str	r3, [r7, #80]	; 0x50
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	895b      	ldrh	r3, [r3, #10]
 8009694:	085b      	lsrs	r3, r3, #1
 8009696:	b29b      	uxth	r3, r3
 8009698:	18db      	adds	r3, r3, r3
 800969a:	b29a      	uxth	r2, r3
 800969c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800969e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	785b      	ldrb	r3, [r3, #1]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d000      	beq.n	80096aa <USB_ActivateEndpoint+0x46e>
 80096a8:	e087      	b.n	80097ba <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	18d2      	adds	r2, r2, r3
 80096b4:	2140      	movs	r1, #64	; 0x40
 80096b6:	187b      	adds	r3, r7, r1
 80096b8:	8812      	ldrh	r2, [r2, #0]
 80096ba:	801a      	strh	r2, [r3, #0]
 80096bc:	187b      	adds	r3, r7, r1
 80096be:	881a      	ldrh	r2, [r3, #0]
 80096c0:	2380      	movs	r3, #128	; 0x80
 80096c2:	01db      	lsls	r3, r3, #7
 80096c4:	4013      	ands	r3, r2
 80096c6:	d016      	beq.n	80096f6 <USB_ActivateEndpoint+0x4ba>
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	18d3      	adds	r3, r2, r3
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	203e      	movs	r0, #62	; 0x3e
 80096d8:	183b      	adds	r3, r7, r0
 80096da:	4989      	ldr	r1, [pc, #548]	; (8009900 <USB_ActivateEndpoint+0x6c4>)
 80096dc:	400a      	ands	r2, r1
 80096de:	801a      	strh	r2, [r3, #0]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	18d3      	adds	r3, r2, r3
 80096ea:	183a      	adds	r2, r7, r0
 80096ec:	8812      	ldrh	r2, [r2, #0]
 80096ee:	4989      	ldr	r1, [pc, #548]	; (8009914 <USB_ActivateEndpoint+0x6d8>)
 80096f0:	430a      	orrs	r2, r1
 80096f2:	b292      	uxth	r2, r2
 80096f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	18d2      	adds	r2, r2, r3
 8009700:	213c      	movs	r1, #60	; 0x3c
 8009702:	187b      	adds	r3, r7, r1
 8009704:	8812      	ldrh	r2, [r2, #0]
 8009706:	801a      	strh	r2, [r3, #0]
 8009708:	187b      	adds	r3, r7, r1
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	2240      	movs	r2, #64	; 0x40
 800970e:	4013      	ands	r3, r2
 8009710:	d016      	beq.n	8009740 <USB_ActivateEndpoint+0x504>
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	18d3      	adds	r3, r2, r3
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	b29a      	uxth	r2, r3
 8009720:	203a      	movs	r0, #58	; 0x3a
 8009722:	183b      	adds	r3, r7, r0
 8009724:	4976      	ldr	r1, [pc, #472]	; (8009900 <USB_ActivateEndpoint+0x6c4>)
 8009726:	400a      	ands	r2, r1
 8009728:	801a      	strh	r2, [r3, #0]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	18d3      	adds	r3, r2, r3
 8009734:	183a      	adds	r2, r7, r0
 8009736:	8812      	ldrh	r2, [r2, #0]
 8009738:	4977      	ldr	r1, [pc, #476]	; (8009918 <USB_ActivateEndpoint+0x6dc>)
 800973a:	430a      	orrs	r2, r1
 800973c:	b292      	uxth	r2, r2
 800973e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	18d3      	adds	r3, r2, r3
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	b29a      	uxth	r2, r3
 800974e:	2038      	movs	r0, #56	; 0x38
 8009750:	183b      	adds	r3, r7, r0
 8009752:	4972      	ldr	r1, [pc, #456]	; (800991c <USB_ActivateEndpoint+0x6e0>)
 8009754:	400a      	ands	r2, r1
 8009756:	801a      	strh	r2, [r3, #0]
 8009758:	183b      	adds	r3, r7, r0
 800975a:	183a      	adds	r2, r7, r0
 800975c:	8812      	ldrh	r2, [r2, #0]
 800975e:	2180      	movs	r1, #128	; 0x80
 8009760:	0149      	lsls	r1, r1, #5
 8009762:	404a      	eors	r2, r1
 8009764:	801a      	strh	r2, [r3, #0]
 8009766:	183b      	adds	r3, r7, r0
 8009768:	183a      	adds	r2, r7, r0
 800976a:	8812      	ldrh	r2, [r2, #0]
 800976c:	2180      	movs	r1, #128	; 0x80
 800976e:	0189      	lsls	r1, r1, #6
 8009770:	404a      	eors	r2, r1
 8009772:	801a      	strh	r2, [r3, #0]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	18d3      	adds	r3, r2, r3
 800977e:	183a      	adds	r2, r7, r0
 8009780:	8812      	ldrh	r2, [r2, #0]
 8009782:	4962      	ldr	r1, [pc, #392]	; (800990c <USB_ActivateEndpoint+0x6d0>)
 8009784:	430a      	orrs	r2, r1
 8009786:	b292      	uxth	r2, r2
 8009788:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	18d3      	adds	r3, r2, r3
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	b29a      	uxth	r2, r3
 8009798:	2036      	movs	r0, #54	; 0x36
 800979a:	183b      	adds	r3, r7, r0
 800979c:	4960      	ldr	r1, [pc, #384]	; (8009920 <USB_ActivateEndpoint+0x6e4>)
 800979e:	400a      	ands	r2, r1
 80097a0:	801a      	strh	r2, [r3, #0]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	18d3      	adds	r3, r2, r3
 80097ac:	183a      	adds	r2, r7, r0
 80097ae:	8812      	ldrh	r2, [r2, #0]
 80097b0:	4956      	ldr	r1, [pc, #344]	; (800990c <USB_ActivateEndpoint+0x6d0>)
 80097b2:	430a      	orrs	r2, r1
 80097b4:	b292      	uxth	r2, r2
 80097b6:	801a      	strh	r2, [r3, #0]
 80097b8:	e09a      	b.n	80098f0 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	18d2      	adds	r2, r2, r3
 80097c4:	214e      	movs	r1, #78	; 0x4e
 80097c6:	187b      	adds	r3, r7, r1
 80097c8:	8812      	ldrh	r2, [r2, #0]
 80097ca:	801a      	strh	r2, [r3, #0]
 80097cc:	187b      	adds	r3, r7, r1
 80097ce:	881a      	ldrh	r2, [r3, #0]
 80097d0:	2380      	movs	r3, #128	; 0x80
 80097d2:	01db      	lsls	r3, r3, #7
 80097d4:	4013      	ands	r3, r2
 80097d6:	d016      	beq.n	8009806 <USB_ActivateEndpoint+0x5ca>
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	18d3      	adds	r3, r2, r3
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	204c      	movs	r0, #76	; 0x4c
 80097e8:	183b      	adds	r3, r7, r0
 80097ea:	4945      	ldr	r1, [pc, #276]	; (8009900 <USB_ActivateEndpoint+0x6c4>)
 80097ec:	400a      	ands	r2, r1
 80097ee:	801a      	strh	r2, [r3, #0]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	18d3      	adds	r3, r2, r3
 80097fa:	183a      	adds	r2, r7, r0
 80097fc:	8812      	ldrh	r2, [r2, #0]
 80097fe:	4945      	ldr	r1, [pc, #276]	; (8009914 <USB_ActivateEndpoint+0x6d8>)
 8009800:	430a      	orrs	r2, r1
 8009802:	b292      	uxth	r2, r2
 8009804:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	18d2      	adds	r2, r2, r3
 8009810:	214a      	movs	r1, #74	; 0x4a
 8009812:	187b      	adds	r3, r7, r1
 8009814:	8812      	ldrh	r2, [r2, #0]
 8009816:	801a      	strh	r2, [r3, #0]
 8009818:	187b      	adds	r3, r7, r1
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	2240      	movs	r2, #64	; 0x40
 800981e:	4013      	ands	r3, r2
 8009820:	d016      	beq.n	8009850 <USB_ActivateEndpoint+0x614>
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	18d3      	adds	r3, r2, r3
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	b29a      	uxth	r2, r3
 8009830:	2048      	movs	r0, #72	; 0x48
 8009832:	183b      	adds	r3, r7, r0
 8009834:	4932      	ldr	r1, [pc, #200]	; (8009900 <USB_ActivateEndpoint+0x6c4>)
 8009836:	400a      	ands	r2, r1
 8009838:	801a      	strh	r2, [r3, #0]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	18d3      	adds	r3, r2, r3
 8009844:	183a      	adds	r2, r7, r0
 8009846:	8812      	ldrh	r2, [r2, #0]
 8009848:	4933      	ldr	r1, [pc, #204]	; (8009918 <USB_ActivateEndpoint+0x6dc>)
 800984a:	430a      	orrs	r2, r1
 800984c:	b292      	uxth	r2, r2
 800984e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	78db      	ldrb	r3, [r3, #3]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d01d      	beq.n	8009894 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	18d3      	adds	r3, r2, r3
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29a      	uxth	r2, r3
 8009866:	2044      	movs	r0, #68	; 0x44
 8009868:	183b      	adds	r3, r7, r0
 800986a:	492d      	ldr	r1, [pc, #180]	; (8009920 <USB_ActivateEndpoint+0x6e4>)
 800986c:	400a      	ands	r2, r1
 800986e:	801a      	strh	r2, [r3, #0]
 8009870:	183b      	adds	r3, r7, r0
 8009872:	183a      	adds	r2, r7, r0
 8009874:	8812      	ldrh	r2, [r2, #0]
 8009876:	2120      	movs	r1, #32
 8009878:	404a      	eors	r2, r1
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	18d3      	adds	r3, r2, r3
 8009886:	183a      	adds	r2, r7, r0
 8009888:	8812      	ldrh	r2, [r2, #0]
 800988a:	4920      	ldr	r1, [pc, #128]	; (800990c <USB_ActivateEndpoint+0x6d0>)
 800988c:	430a      	orrs	r2, r1
 800988e:	b292      	uxth	r2, r2
 8009890:	801a      	strh	r2, [r3, #0]
 8009892:	e016      	b.n	80098c2 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	18d3      	adds	r3, r2, r3
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	2046      	movs	r0, #70	; 0x46
 80098a4:	183b      	adds	r3, r7, r0
 80098a6:	491e      	ldr	r1, [pc, #120]	; (8009920 <USB_ActivateEndpoint+0x6e4>)
 80098a8:	400a      	ands	r2, r1
 80098aa:	801a      	strh	r2, [r3, #0]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	18d3      	adds	r3, r2, r3
 80098b6:	183a      	adds	r2, r7, r0
 80098b8:	8812      	ldrh	r2, [r2, #0]
 80098ba:	4914      	ldr	r1, [pc, #80]	; (800990c <USB_ActivateEndpoint+0x6d0>)
 80098bc:	430a      	orrs	r2, r1
 80098be:	b292      	uxth	r2, r2
 80098c0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	18d3      	adds	r3, r2, r3
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	2042      	movs	r0, #66	; 0x42
 80098d2:	183b      	adds	r3, r7, r0
 80098d4:	4911      	ldr	r1, [pc, #68]	; (800991c <USB_ActivateEndpoint+0x6e0>)
 80098d6:	400a      	ands	r2, r1
 80098d8:	801a      	strh	r2, [r3, #0]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	18d3      	adds	r3, r2, r3
 80098e4:	183a      	adds	r2, r7, r0
 80098e6:	8812      	ldrh	r2, [r2, #0]
 80098e8:	4908      	ldr	r1, [pc, #32]	; (800990c <USB_ActivateEndpoint+0x6d0>)
 80098ea:	430a      	orrs	r2, r1
 80098ec:	b292      	uxth	r2, r2
 80098ee:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80098f0:	236f      	movs	r3, #111	; 0x6f
 80098f2:	18fb      	adds	r3, r7, r3
 80098f4:	781b      	ldrb	r3, [r3, #0]
}
 80098f6:	0018      	movs	r0, r3
 80098f8:	46bd      	mov	sp, r7
 80098fa:	b01c      	add	sp, #112	; 0x70
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	46c0      	nop			; (mov r8, r8)
 8009900:	ffff8f8f 	.word	0xffff8f8f
 8009904:	ffff8180 	.word	0xffff8180
 8009908:	ffff8e8f 	.word	0xffff8e8f
 800990c:	ffff8080 	.word	0xffff8080
 8009910:	00000404 	.word	0x00000404
 8009914:	ffffc080 	.word	0xffffc080
 8009918:	ffff80c0 	.word	0xffff80c0
 800991c:	ffffbf8f 	.word	0xffffbf8f
 8009920:	ffff8fbf 	.word	0xffff8fbf

08009924 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08c      	sub	sp, #48	; 0x30
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	7b1b      	ldrb	r3, [r3, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d000      	beq.n	8009938 <USB_DeactivateEndpoint+0x14>
 8009936:	e07e      	b.n	8009a36 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	785b      	ldrb	r3, [r3, #1]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d03c      	beq.n	80099ba <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	18d2      	adds	r2, r2, r3
 800994a:	210c      	movs	r1, #12
 800994c:	187b      	adds	r3, r7, r1
 800994e:	8812      	ldrh	r2, [r2, #0]
 8009950:	801a      	strh	r2, [r3, #0]
 8009952:	187b      	adds	r3, r7, r1
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	2240      	movs	r2, #64	; 0x40
 8009958:	4013      	ands	r3, r2
 800995a:	d016      	beq.n	800998a <USB_DeactivateEndpoint+0x66>
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	18d3      	adds	r3, r2, r3
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	b29a      	uxth	r2, r3
 800996a:	200a      	movs	r0, #10
 800996c:	183b      	adds	r3, r7, r0
 800996e:	49c7      	ldr	r1, [pc, #796]	; (8009c8c <USB_DeactivateEndpoint+0x368>)
 8009970:	400a      	ands	r2, r1
 8009972:	801a      	strh	r2, [r3, #0]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	18d3      	adds	r3, r2, r3
 800997e:	183a      	adds	r2, r7, r0
 8009980:	8812      	ldrh	r2, [r2, #0]
 8009982:	49c3      	ldr	r1, [pc, #780]	; (8009c90 <USB_DeactivateEndpoint+0x36c>)
 8009984:	430a      	orrs	r2, r1
 8009986:	b292      	uxth	r2, r2
 8009988:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	18d3      	adds	r3, r2, r3
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	b29a      	uxth	r2, r3
 8009998:	2008      	movs	r0, #8
 800999a:	183b      	adds	r3, r7, r0
 800999c:	49bd      	ldr	r1, [pc, #756]	; (8009c94 <USB_DeactivateEndpoint+0x370>)
 800999e:	400a      	ands	r2, r1
 80099a0:	801a      	strh	r2, [r3, #0]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	18d3      	adds	r3, r2, r3
 80099ac:	183a      	adds	r2, r7, r0
 80099ae:	8812      	ldrh	r2, [r2, #0]
 80099b0:	49b9      	ldr	r1, [pc, #740]	; (8009c98 <USB_DeactivateEndpoint+0x374>)
 80099b2:	430a      	orrs	r2, r1
 80099b4:	b292      	uxth	r2, r2
 80099b6:	801a      	strh	r2, [r3, #0]
 80099b8:	e163      	b.n	8009c82 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	18d2      	adds	r2, r2, r3
 80099c4:	2112      	movs	r1, #18
 80099c6:	187b      	adds	r3, r7, r1
 80099c8:	8812      	ldrh	r2, [r2, #0]
 80099ca:	801a      	strh	r2, [r3, #0]
 80099cc:	187b      	adds	r3, r7, r1
 80099ce:	881a      	ldrh	r2, [r3, #0]
 80099d0:	2380      	movs	r3, #128	; 0x80
 80099d2:	01db      	lsls	r3, r3, #7
 80099d4:	4013      	ands	r3, r2
 80099d6:	d016      	beq.n	8009a06 <USB_DeactivateEndpoint+0xe2>
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	18d3      	adds	r3, r2, r3
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	2010      	movs	r0, #16
 80099e8:	183b      	adds	r3, r7, r0
 80099ea:	49a8      	ldr	r1, [pc, #672]	; (8009c8c <USB_DeactivateEndpoint+0x368>)
 80099ec:	400a      	ands	r2, r1
 80099ee:	801a      	strh	r2, [r3, #0]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	18d3      	adds	r3, r2, r3
 80099fa:	183a      	adds	r2, r7, r0
 80099fc:	8812      	ldrh	r2, [r2, #0]
 80099fe:	49a7      	ldr	r1, [pc, #668]	; (8009c9c <USB_DeactivateEndpoint+0x378>)
 8009a00:	430a      	orrs	r2, r1
 8009a02:	b292      	uxth	r2, r2
 8009a04:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	18d3      	adds	r3, r2, r3
 8009a10:	881b      	ldrh	r3, [r3, #0]
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	200e      	movs	r0, #14
 8009a16:	183b      	adds	r3, r7, r0
 8009a18:	49a1      	ldr	r1, [pc, #644]	; (8009ca0 <USB_DeactivateEndpoint+0x37c>)
 8009a1a:	400a      	ands	r2, r1
 8009a1c:	801a      	strh	r2, [r3, #0]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	18d3      	adds	r3, r2, r3
 8009a28:	183a      	adds	r2, r7, r0
 8009a2a:	8812      	ldrh	r2, [r2, #0]
 8009a2c:	499a      	ldr	r1, [pc, #616]	; (8009c98 <USB_DeactivateEndpoint+0x374>)
 8009a2e:	430a      	orrs	r2, r1
 8009a30:	b292      	uxth	r2, r2
 8009a32:	801a      	strh	r2, [r3, #0]
 8009a34:	e125      	b.n	8009c82 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	785b      	ldrb	r3, [r3, #1]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d000      	beq.n	8009a40 <USB_DeactivateEndpoint+0x11c>
 8009a3e:	e090      	b.n	8009b62 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	18d2      	adds	r2, r2, r3
 8009a4a:	2120      	movs	r1, #32
 8009a4c:	187b      	adds	r3, r7, r1
 8009a4e:	8812      	ldrh	r2, [r2, #0]
 8009a50:	801a      	strh	r2, [r3, #0]
 8009a52:	187b      	adds	r3, r7, r1
 8009a54:	881a      	ldrh	r2, [r3, #0]
 8009a56:	2380      	movs	r3, #128	; 0x80
 8009a58:	01db      	lsls	r3, r3, #7
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	d016      	beq.n	8009a8c <USB_DeactivateEndpoint+0x168>
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	18d3      	adds	r3, r2, r3
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	201e      	movs	r0, #30
 8009a6e:	183b      	adds	r3, r7, r0
 8009a70:	4986      	ldr	r1, [pc, #536]	; (8009c8c <USB_DeactivateEndpoint+0x368>)
 8009a72:	400a      	ands	r2, r1
 8009a74:	801a      	strh	r2, [r3, #0]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	18d3      	adds	r3, r2, r3
 8009a80:	183a      	adds	r2, r7, r0
 8009a82:	8812      	ldrh	r2, [r2, #0]
 8009a84:	4985      	ldr	r1, [pc, #532]	; (8009c9c <USB_DeactivateEndpoint+0x378>)
 8009a86:	430a      	orrs	r2, r1
 8009a88:	b292      	uxth	r2, r2
 8009a8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	18d2      	adds	r2, r2, r3
 8009a96:	211c      	movs	r1, #28
 8009a98:	187b      	adds	r3, r7, r1
 8009a9a:	8812      	ldrh	r2, [r2, #0]
 8009a9c:	801a      	strh	r2, [r3, #0]
 8009a9e:	187b      	adds	r3, r7, r1
 8009aa0:	881b      	ldrh	r3, [r3, #0]
 8009aa2:	2240      	movs	r2, #64	; 0x40
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	d016      	beq.n	8009ad6 <USB_DeactivateEndpoint+0x1b2>
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	18d3      	adds	r3, r2, r3
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	201a      	movs	r0, #26
 8009ab8:	183b      	adds	r3, r7, r0
 8009aba:	4974      	ldr	r1, [pc, #464]	; (8009c8c <USB_DeactivateEndpoint+0x368>)
 8009abc:	400a      	ands	r2, r1
 8009abe:	801a      	strh	r2, [r3, #0]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	18d3      	adds	r3, r2, r3
 8009aca:	183a      	adds	r2, r7, r0
 8009acc:	8812      	ldrh	r2, [r2, #0]
 8009ace:	4970      	ldr	r1, [pc, #448]	; (8009c90 <USB_DeactivateEndpoint+0x36c>)
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	b292      	uxth	r2, r2
 8009ad4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	18d3      	adds	r3, r2, r3
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	2018      	movs	r0, #24
 8009ae6:	183b      	adds	r3, r7, r0
 8009ae8:	4968      	ldr	r1, [pc, #416]	; (8009c8c <USB_DeactivateEndpoint+0x368>)
 8009aea:	400a      	ands	r2, r1
 8009aec:	801a      	strh	r2, [r3, #0]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	18d3      	adds	r3, r2, r3
 8009af8:	183a      	adds	r2, r7, r0
 8009afa:	8812      	ldrh	r2, [r2, #0]
 8009afc:	4964      	ldr	r1, [pc, #400]	; (8009c90 <USB_DeactivateEndpoint+0x36c>)
 8009afe:	430a      	orrs	r2, r1
 8009b00:	b292      	uxth	r2, r2
 8009b02:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	18d3      	adds	r3, r2, r3
 8009b0e:	881b      	ldrh	r3, [r3, #0]
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	2016      	movs	r0, #22
 8009b14:	183b      	adds	r3, r7, r0
 8009b16:	4962      	ldr	r1, [pc, #392]	; (8009ca0 <USB_DeactivateEndpoint+0x37c>)
 8009b18:	400a      	ands	r2, r1
 8009b1a:	801a      	strh	r2, [r3, #0]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	18d3      	adds	r3, r2, r3
 8009b26:	183a      	adds	r2, r7, r0
 8009b28:	8812      	ldrh	r2, [r2, #0]
 8009b2a:	495b      	ldr	r1, [pc, #364]	; (8009c98 <USB_DeactivateEndpoint+0x374>)
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	b292      	uxth	r2, r2
 8009b30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	18d3      	adds	r3, r2, r3
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	2014      	movs	r0, #20
 8009b42:	183b      	adds	r3, r7, r0
 8009b44:	4953      	ldr	r1, [pc, #332]	; (8009c94 <USB_DeactivateEndpoint+0x370>)
 8009b46:	400a      	ands	r2, r1
 8009b48:	801a      	strh	r2, [r3, #0]
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	18d3      	adds	r3, r2, r3
 8009b54:	183a      	adds	r2, r7, r0
 8009b56:	8812      	ldrh	r2, [r2, #0]
 8009b58:	494f      	ldr	r1, [pc, #316]	; (8009c98 <USB_DeactivateEndpoint+0x374>)
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	b292      	uxth	r2, r2
 8009b5e:	801a      	strh	r2, [r3, #0]
 8009b60:	e08f      	b.n	8009c82 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	18d2      	adds	r2, r2, r3
 8009b6c:	212e      	movs	r1, #46	; 0x2e
 8009b6e:	187b      	adds	r3, r7, r1
 8009b70:	8812      	ldrh	r2, [r2, #0]
 8009b72:	801a      	strh	r2, [r3, #0]
 8009b74:	187b      	adds	r3, r7, r1
 8009b76:	881a      	ldrh	r2, [r3, #0]
 8009b78:	2380      	movs	r3, #128	; 0x80
 8009b7a:	01db      	lsls	r3, r3, #7
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	d016      	beq.n	8009bae <USB_DeactivateEndpoint+0x28a>
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	18d3      	adds	r3, r2, r3
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	202c      	movs	r0, #44	; 0x2c
 8009b90:	183b      	adds	r3, r7, r0
 8009b92:	493e      	ldr	r1, [pc, #248]	; (8009c8c <USB_DeactivateEndpoint+0x368>)
 8009b94:	400a      	ands	r2, r1
 8009b96:	801a      	strh	r2, [r3, #0]
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	18d3      	adds	r3, r2, r3
 8009ba2:	183a      	adds	r2, r7, r0
 8009ba4:	8812      	ldrh	r2, [r2, #0]
 8009ba6:	493d      	ldr	r1, [pc, #244]	; (8009c9c <USB_DeactivateEndpoint+0x378>)
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	b292      	uxth	r2, r2
 8009bac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	18d2      	adds	r2, r2, r3
 8009bb8:	212a      	movs	r1, #42	; 0x2a
 8009bba:	187b      	adds	r3, r7, r1
 8009bbc:	8812      	ldrh	r2, [r2, #0]
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	187b      	adds	r3, r7, r1
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	2240      	movs	r2, #64	; 0x40
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	d016      	beq.n	8009bf8 <USB_DeactivateEndpoint+0x2d4>
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	18d3      	adds	r3, r2, r3
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	2028      	movs	r0, #40	; 0x28
 8009bda:	183b      	adds	r3, r7, r0
 8009bdc:	492b      	ldr	r1, [pc, #172]	; (8009c8c <USB_DeactivateEndpoint+0x368>)
 8009bde:	400a      	ands	r2, r1
 8009be0:	801a      	strh	r2, [r3, #0]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	18d3      	adds	r3, r2, r3
 8009bec:	183a      	adds	r2, r7, r0
 8009bee:	8812      	ldrh	r2, [r2, #0]
 8009bf0:	4927      	ldr	r1, [pc, #156]	; (8009c90 <USB_DeactivateEndpoint+0x36c>)
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	b292      	uxth	r2, r2
 8009bf6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	18d3      	adds	r3, r2, r3
 8009c02:	881b      	ldrh	r3, [r3, #0]
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	2026      	movs	r0, #38	; 0x26
 8009c08:	183b      	adds	r3, r7, r0
 8009c0a:	4920      	ldr	r1, [pc, #128]	; (8009c8c <USB_DeactivateEndpoint+0x368>)
 8009c0c:	400a      	ands	r2, r1
 8009c0e:	801a      	strh	r2, [r3, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	18d3      	adds	r3, r2, r3
 8009c1a:	183a      	adds	r2, r7, r0
 8009c1c:	8812      	ldrh	r2, [r2, #0]
 8009c1e:	491f      	ldr	r1, [pc, #124]	; (8009c9c <USB_DeactivateEndpoint+0x378>)
 8009c20:	430a      	orrs	r2, r1
 8009c22:	b292      	uxth	r2, r2
 8009c24:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	18d3      	adds	r3, r2, r3
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	2024      	movs	r0, #36	; 0x24
 8009c36:	183b      	adds	r3, r7, r0
 8009c38:	4916      	ldr	r1, [pc, #88]	; (8009c94 <USB_DeactivateEndpoint+0x370>)
 8009c3a:	400a      	ands	r2, r1
 8009c3c:	801a      	strh	r2, [r3, #0]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	18d3      	adds	r3, r2, r3
 8009c48:	183a      	adds	r2, r7, r0
 8009c4a:	8812      	ldrh	r2, [r2, #0]
 8009c4c:	4912      	ldr	r1, [pc, #72]	; (8009c98 <USB_DeactivateEndpoint+0x374>)
 8009c4e:	430a      	orrs	r2, r1
 8009c50:	b292      	uxth	r2, r2
 8009c52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	18d3      	adds	r3, r2, r3
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	2022      	movs	r0, #34	; 0x22
 8009c64:	183b      	adds	r3, r7, r0
 8009c66:	490e      	ldr	r1, [pc, #56]	; (8009ca0 <USB_DeactivateEndpoint+0x37c>)
 8009c68:	400a      	ands	r2, r1
 8009c6a:	801a      	strh	r2, [r3, #0]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	18d3      	adds	r3, r2, r3
 8009c76:	183a      	adds	r2, r7, r0
 8009c78:	8812      	ldrh	r2, [r2, #0]
 8009c7a:	4907      	ldr	r1, [pc, #28]	; (8009c98 <USB_DeactivateEndpoint+0x374>)
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	b292      	uxth	r2, r2
 8009c80:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	0018      	movs	r0, r3
 8009c86:	46bd      	mov	sp, r7
 8009c88:	b00c      	add	sp, #48	; 0x30
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	ffff8f8f 	.word	0xffff8f8f
 8009c90:	ffff80c0 	.word	0xffff80c0
 8009c94:	ffff8fbf 	.word	0xffff8fbf
 8009c98:	ffff8080 	.word	0xffff8080
 8009c9c:	ffffc080 	.word	0xffffc080
 8009ca0:	ffffbf8f 	.word	0xffffbf8f

08009ca4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ca4:	b590      	push	{r4, r7, lr}
 8009ca6:	b0c3      	sub	sp, #268	; 0x10c
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	785b      	ldrb	r3, [r3, #1]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d001      	beq.n	8009cba <USB_EPStartXfer+0x16>
 8009cb6:	f000 fcef 	bl	800a698 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	699a      	ldr	r2, [r3, #24]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d905      	bls.n	8009cd2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	1d7a      	adds	r2, r7, #5
 8009ccc:	32ff      	adds	r2, #255	; 0xff
 8009cce:	6013      	str	r3, [r2, #0]
 8009cd0:	e004      	b.n	8009cdc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	1d7a      	adds	r2, r7, #5
 8009cd8:	32ff      	adds	r2, #255	; 0xff
 8009cda:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	7b1b      	ldrb	r3, [r3, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d125      	bne.n	8009d30 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	6959      	ldr	r1, [r3, #20]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	88da      	ldrh	r2, [r3, #6]
 8009cec:	1d7b      	adds	r3, r7, #5
 8009cee:	33ff      	adds	r3, #255	; 0xff
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f001 f9c9 	bl	800b08c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	613b      	str	r3, [r7, #16]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2250      	movs	r2, #80	; 0x50
 8009d02:	5a9b      	ldrh	r3, [r3, r2]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	001a      	movs	r2, r3
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	189b      	adds	r3, r3, r2
 8009d0c:	613b      	str	r3, [r7, #16]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	00da      	lsls	r2, r3, #3
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	18d3      	adds	r3, r2, r3
 8009d18:	4acc      	ldr	r2, [pc, #816]	; (800a04c <USB_EPStartXfer+0x3a8>)
 8009d1a:	4694      	mov	ip, r2
 8009d1c:	4463      	add	r3, ip
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	1d7b      	adds	r3, r7, #5
 8009d22:	33ff      	adds	r3, #255	; 0xff
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	801a      	strh	r2, [r3, #0]
 8009d2c:	f000 fc8f 	bl	800a64e <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	78db      	ldrb	r3, [r3, #3]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d000      	beq.n	8009d3a <USB_EPStartXfer+0x96>
 8009d38:	e33a      	b.n	800a3b0 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	6a1a      	ldr	r2, [r3, #32]
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d800      	bhi.n	8009d48 <USB_EPStartXfer+0xa4>
 8009d46:	e2df      	b.n	800a308 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	18d3      	adds	r3, r2, r3
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	2056      	movs	r0, #86	; 0x56
 8009d58:	183b      	adds	r3, r7, r0
 8009d5a:	49bd      	ldr	r1, [pc, #756]	; (800a050 <USB_EPStartXfer+0x3ac>)
 8009d5c:	400a      	ands	r2, r1
 8009d5e:	801a      	strh	r2, [r3, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	18d3      	adds	r3, r2, r3
 8009d6a:	183a      	adds	r2, r7, r0
 8009d6c:	8812      	ldrh	r2, [r2, #0]
 8009d6e:	49b9      	ldr	r1, [pc, #740]	; (800a054 <USB_EPStartXfer+0x3b0>)
 8009d70:	430a      	orrs	r2, r1
 8009d72:	b292      	uxth	r2, r2
 8009d74:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	6a1a      	ldr	r2, [r3, #32]
 8009d7a:	1d7b      	adds	r3, r7, #5
 8009d7c:	33ff      	adds	r3, #255	; 0xff
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	1ad2      	subs	r2, r2, r3
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	18d3      	adds	r3, r2, r3
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	001a      	movs	r2, r3
 8009d96:	2340      	movs	r3, #64	; 0x40
 8009d98:	4013      	ands	r3, r2
 8009d9a:	d100      	bne.n	8009d9e <USB_EPStartXfer+0xfa>
 8009d9c:	e162      	b.n	800a064 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	633b      	str	r3, [r7, #48]	; 0x30
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	785b      	ldrb	r3, [r3, #1]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d16a      	bne.n	8009e80 <USB_EPStartXfer+0x1dc>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2250      	movs	r2, #80	; 0x50
 8009db2:	5a9b      	ldrh	r3, [r3, r2]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	001a      	movs	r2, r3
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	189b      	adds	r3, r3, r2
 8009dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	00da      	lsls	r2, r3, #3
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	18d3      	adds	r3, r2, r3
 8009dc8:	4aa3      	ldr	r2, [pc, #652]	; (800a058 <USB_EPStartXfer+0x3b4>)
 8009dca:	4694      	mov	ip, r2
 8009dcc:	4463      	add	r3, ip
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd0:	1d7b      	adds	r3, r7, #5
 8009dd2:	33ff      	adds	r3, #255	; 0xff
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d110      	bne.n	8009dfc <USB_EPStartXfer+0x158>
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	4a9e      	ldr	r2, [pc, #632]	; (800a05c <USB_EPStartXfer+0x3b8>)
 8009de2:	4013      	ands	r3, r2
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	801a      	strh	r2, [r3, #0]
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	4a9b      	ldr	r2, [pc, #620]	; (800a060 <USB_EPStartXfer+0x3bc>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	b29a      	uxth	r2, r3
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	801a      	strh	r2, [r3, #0]
 8009dfa:	e05c      	b.n	8009eb6 <USB_EPStartXfer+0x212>
 8009dfc:	1d7b      	adds	r3, r7, #5
 8009dfe:	33ff      	adds	r3, #255	; 0xff
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b3e      	cmp	r3, #62	; 0x3e
 8009e04:	d81c      	bhi.n	8009e40 <USB_EPStartXfer+0x19c>
 8009e06:	1d7b      	adds	r3, r7, #5
 8009e08:	33ff      	adds	r3, #255	; 0xff
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	085b      	lsrs	r3, r3, #1
 8009e0e:	1c7a      	adds	r2, r7, #1
 8009e10:	32ff      	adds	r2, #255	; 0xff
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	1d7b      	adds	r3, r7, #5
 8009e16:	33ff      	adds	r3, #255	; 0xff
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	d006      	beq.n	8009e2e <USB_EPStartXfer+0x18a>
 8009e20:	1c7b      	adds	r3, r7, #1
 8009e22:	33ff      	adds	r3, #255	; 0xff
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3301      	adds	r3, #1
 8009e28:	1c7a      	adds	r2, r7, #1
 8009e2a:	32ff      	adds	r2, #255	; 0xff
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	1c7b      	adds	r3, r7, #1
 8009e30:	33ff      	adds	r3, #255	; 0xff
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	029b      	lsls	r3, r3, #10
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	801a      	strh	r2, [r3, #0]
 8009e3e:	e03a      	b.n	8009eb6 <USB_EPStartXfer+0x212>
 8009e40:	1d7b      	adds	r3, r7, #5
 8009e42:	33ff      	adds	r3, #255	; 0xff
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	095b      	lsrs	r3, r3, #5
 8009e48:	1c7a      	adds	r2, r7, #1
 8009e4a:	32ff      	adds	r2, #255	; 0xff
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	1d7b      	adds	r3, r7, #5
 8009e50:	33ff      	adds	r3, #255	; 0xff
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	221f      	movs	r2, #31
 8009e56:	4013      	ands	r3, r2
 8009e58:	d106      	bne.n	8009e68 <USB_EPStartXfer+0x1c4>
 8009e5a:	1c7b      	adds	r3, r7, #1
 8009e5c:	33ff      	adds	r3, #255	; 0xff
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	1c7a      	adds	r2, r7, #1
 8009e64:	32ff      	adds	r2, #255	; 0xff
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	1c7b      	adds	r3, r7, #1
 8009e6a:	33ff      	adds	r3, #255	; 0xff
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	029b      	lsls	r3, r3, #10
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	4a7a      	ldr	r2, [pc, #488]	; (800a060 <USB_EPStartXfer+0x3bc>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7c:	801a      	strh	r2, [r3, #0]
 8009e7e:	e01a      	b.n	8009eb6 <USB_EPStartXfer+0x212>
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	785b      	ldrb	r3, [r3, #1]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d116      	bne.n	8009eb6 <USB_EPStartXfer+0x212>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2250      	movs	r2, #80	; 0x50
 8009e8c:	5a9b      	ldrh	r3, [r3, r2]
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	001a      	movs	r2, r3
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	189b      	adds	r3, r3, r2
 8009e96:	633b      	str	r3, [r7, #48]	; 0x30
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	00da      	lsls	r2, r3, #3
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	18d3      	adds	r3, r2, r3
 8009ea2:	4a6d      	ldr	r2, [pc, #436]	; (800a058 <USB_EPStartXfer+0x3b4>)
 8009ea4:	4694      	mov	ip, r2
 8009ea6:	4463      	add	r3, ip
 8009ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eaa:	1d7b      	adds	r3, r7, #5
 8009eac:	33ff      	adds	r3, #255	; 0xff
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009eb6:	2076      	movs	r0, #118	; 0x76
 8009eb8:	183b      	adds	r3, r7, r0
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	8952      	ldrh	r2, [r2, #10]
 8009ebe:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	6959      	ldr	r1, [r3, #20]
 8009ec4:	1d7b      	adds	r3, r7, #5
 8009ec6:	33ff      	adds	r3, #255	; 0xff
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	b29c      	uxth	r4, r3
 8009ecc:	183b      	adds	r3, r7, r0
 8009ece:	881a      	ldrh	r2, [r3, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	0023      	movs	r3, r4
 8009ed4:	f001 f8da 	bl	800b08c <USB_WritePMA>
            ep->xfer_buff += len;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	695a      	ldr	r2, [r3, #20]
 8009edc:	1d7b      	adds	r3, r7, #5
 8009ede:	33ff      	adds	r3, #255	; 0xff
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	18d2      	adds	r2, r2, r3
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	6a1a      	ldr	r2, [r3, #32]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d908      	bls.n	8009f06 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	6a1a      	ldr	r2, [r3, #32]
 8009ef8:	1d7b      	adds	r3, r7, #5
 8009efa:	33ff      	adds	r3, #255	; 0xff
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	621a      	str	r2, [r3, #32]
 8009f04:	e007      	b.n	8009f16 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	1d7a      	adds	r2, r7, #5
 8009f0c:	32ff      	adds	r2, #255	; 0xff
 8009f0e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	2200      	movs	r2, #0
 8009f14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	785b      	ldrb	r3, [r3, #1]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d166      	bne.n	8009fec <USB_EPStartXfer+0x348>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	61bb      	str	r3, [r7, #24]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2250      	movs	r2, #80	; 0x50
 8009f26:	5a9b      	ldrh	r3, [r3, r2]
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	001a      	movs	r2, r3
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	189b      	adds	r3, r3, r2
 8009f30:	61bb      	str	r3, [r7, #24]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	00da      	lsls	r2, r3, #3
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	18d3      	adds	r3, r2, r3
 8009f3c:	4a43      	ldr	r2, [pc, #268]	; (800a04c <USB_EPStartXfer+0x3a8>)
 8009f3e:	4694      	mov	ip, r2
 8009f40:	4463      	add	r3, ip
 8009f42:	617b      	str	r3, [r7, #20]
 8009f44:	1d7b      	adds	r3, r7, #5
 8009f46:	33ff      	adds	r3, #255	; 0xff
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d110      	bne.n	8009f70 <USB_EPStartXfer+0x2cc>
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	4a41      	ldr	r2, [pc, #260]	; (800a05c <USB_EPStartXfer+0x3b8>)
 8009f56:	4013      	ands	r3, r2
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	801a      	strh	r2, [r3, #0]
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	4a3e      	ldr	r2, [pc, #248]	; (800a060 <USB_EPStartXfer+0x3bc>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	801a      	strh	r2, [r3, #0]
 8009f6e:	e05a      	b.n	800a026 <USB_EPStartXfer+0x382>
 8009f70:	1d7b      	adds	r3, r7, #5
 8009f72:	33ff      	adds	r3, #255	; 0xff
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b3e      	cmp	r3, #62	; 0x3e
 8009f78:	d81a      	bhi.n	8009fb0 <USB_EPStartXfer+0x30c>
 8009f7a:	1d7b      	adds	r3, r7, #5
 8009f7c:	33ff      	adds	r3, #255	; 0xff
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	085b      	lsrs	r3, r3, #1
 8009f82:	21fc      	movs	r1, #252	; 0xfc
 8009f84:	187a      	adds	r2, r7, r1
 8009f86:	6013      	str	r3, [r2, #0]
 8009f88:	1d7b      	adds	r3, r7, #5
 8009f8a:	33ff      	adds	r3, #255	; 0xff
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	4013      	ands	r3, r2
 8009f92:	d004      	beq.n	8009f9e <USB_EPStartXfer+0x2fa>
 8009f94:	187b      	adds	r3, r7, r1
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	187a      	adds	r2, r7, r1
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	23fc      	movs	r3, #252	; 0xfc
 8009fa0:	18fb      	adds	r3, r7, r3
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	029b      	lsls	r3, r3, #10
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	801a      	strh	r2, [r3, #0]
 8009fae:	e03a      	b.n	800a026 <USB_EPStartXfer+0x382>
 8009fb0:	1d7b      	adds	r3, r7, #5
 8009fb2:	33ff      	adds	r3, #255	; 0xff
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	095b      	lsrs	r3, r3, #5
 8009fb8:	21fc      	movs	r1, #252	; 0xfc
 8009fba:	187a      	adds	r2, r7, r1
 8009fbc:	6013      	str	r3, [r2, #0]
 8009fbe:	1d7b      	adds	r3, r7, #5
 8009fc0:	33ff      	adds	r3, #255	; 0xff
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	221f      	movs	r2, #31
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	d104      	bne.n	8009fd4 <USB_EPStartXfer+0x330>
 8009fca:	187b      	adds	r3, r7, r1
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	187a      	adds	r2, r7, r1
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	23fc      	movs	r3, #252	; 0xfc
 8009fd6:	18fb      	adds	r3, r7, r3
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	029b      	lsls	r3, r3, #10
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	4a1f      	ldr	r2, [pc, #124]	; (800a060 <USB_EPStartXfer+0x3bc>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	801a      	strh	r2, [r3, #0]
 8009fea:	e01c      	b.n	800a026 <USB_EPStartXfer+0x382>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	785b      	ldrb	r3, [r3, #1]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d118      	bne.n	800a026 <USB_EPStartXfer+0x382>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	623b      	str	r3, [r7, #32]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2250      	movs	r2, #80	; 0x50
 8009ffc:	5a9b      	ldrh	r3, [r3, r2]
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	001a      	movs	r2, r3
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	189b      	adds	r3, r3, r2
 800a006:	623b      	str	r3, [r7, #32]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	00da      	lsls	r2, r3, #3
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	18d3      	adds	r3, r2, r3
 800a012:	4a0e      	ldr	r2, [pc, #56]	; (800a04c <USB_EPStartXfer+0x3a8>)
 800a014:	4694      	mov	ip, r2
 800a016:	4463      	add	r3, ip
 800a018:	61fb      	str	r3, [r7, #28]
 800a01a:	1d7b      	adds	r3, r7, #5
 800a01c:	33ff      	adds	r3, #255	; 0xff
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	b29a      	uxth	r2, r3
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a026:	2076      	movs	r0, #118	; 0x76
 800a028:	183b      	adds	r3, r7, r0
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	8912      	ldrh	r2, [r2, #8]
 800a02e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	6959      	ldr	r1, [r3, #20]
 800a034:	1d7b      	adds	r3, r7, #5
 800a036:	33ff      	adds	r3, #255	; 0xff
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	b29c      	uxth	r4, r3
 800a03c:	183b      	adds	r3, r7, r0
 800a03e:	881a      	ldrh	r2, [r3, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	0023      	movs	r3, r4
 800a044:	f001 f822 	bl	800b08c <USB_WritePMA>
 800a048:	e301      	b.n	800a64e <USB_EPStartXfer+0x9aa>
 800a04a:	46c0      	nop			; (mov r8, r8)
 800a04c:	00000402 	.word	0x00000402
 800a050:	ffff8f8f 	.word	0xffff8f8f
 800a054:	ffff8180 	.word	0xffff8180
 800a058:	00000406 	.word	0x00000406
 800a05c:	ffff83ff 	.word	0xffff83ff
 800a060:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	785b      	ldrb	r3, [r3, #1]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d166      	bne.n	800a13a <USB_EPStartXfer+0x496>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2250      	movs	r2, #80	; 0x50
 800a074:	5a9b      	ldrh	r3, [r3, r2]
 800a076:	b29b      	uxth	r3, r3
 800a078:	001a      	movs	r2, r3
 800a07a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a07c:	189b      	adds	r3, r3, r2
 800a07e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	00da      	lsls	r2, r3, #3
 800a086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a088:	18d3      	adds	r3, r2, r3
 800a08a:	4ac3      	ldr	r2, [pc, #780]	; (800a398 <USB_EPStartXfer+0x6f4>)
 800a08c:	4694      	mov	ip, r2
 800a08e:	4463      	add	r3, ip
 800a090:	647b      	str	r3, [r7, #68]	; 0x44
 800a092:	1d7b      	adds	r3, r7, #5
 800a094:	33ff      	adds	r3, #255	; 0xff
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d110      	bne.n	800a0be <USB_EPStartXfer+0x41a>
 800a09c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a09e:	881b      	ldrh	r3, [r3, #0]
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	4abe      	ldr	r2, [pc, #760]	; (800a39c <USB_EPStartXfer+0x6f8>)
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0aa:	801a      	strh	r2, [r3, #0]
 800a0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	4abb      	ldr	r2, [pc, #748]	; (800a3a0 <USB_EPStartXfer+0x6fc>)
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ba:	801a      	strh	r2, [r3, #0]
 800a0bc:	e05a      	b.n	800a174 <USB_EPStartXfer+0x4d0>
 800a0be:	1d7b      	adds	r3, r7, #5
 800a0c0:	33ff      	adds	r3, #255	; 0xff
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b3e      	cmp	r3, #62	; 0x3e
 800a0c6:	d81a      	bhi.n	800a0fe <USB_EPStartXfer+0x45a>
 800a0c8:	1d7b      	adds	r3, r7, #5
 800a0ca:	33ff      	adds	r3, #255	; 0xff
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	085b      	lsrs	r3, r3, #1
 800a0d0:	21f8      	movs	r1, #248	; 0xf8
 800a0d2:	187a      	adds	r2, r7, r1
 800a0d4:	6013      	str	r3, [r2, #0]
 800a0d6:	1d7b      	adds	r3, r7, #5
 800a0d8:	33ff      	adds	r3, #255	; 0xff
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	4013      	ands	r3, r2
 800a0e0:	d004      	beq.n	800a0ec <USB_EPStartXfer+0x448>
 800a0e2:	187b      	adds	r3, r7, r1
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	187a      	adds	r2, r7, r1
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	23f8      	movs	r3, #248	; 0xf8
 800a0ee:	18fb      	adds	r3, r7, r3
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	029b      	lsls	r3, r3, #10
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0fa:	801a      	strh	r2, [r3, #0]
 800a0fc:	e03a      	b.n	800a174 <USB_EPStartXfer+0x4d0>
 800a0fe:	1d7b      	adds	r3, r7, #5
 800a100:	33ff      	adds	r3, #255	; 0xff
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	095b      	lsrs	r3, r3, #5
 800a106:	21f8      	movs	r1, #248	; 0xf8
 800a108:	187a      	adds	r2, r7, r1
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	1d7b      	adds	r3, r7, #5
 800a10e:	33ff      	adds	r3, #255	; 0xff
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	221f      	movs	r2, #31
 800a114:	4013      	ands	r3, r2
 800a116:	d104      	bne.n	800a122 <USB_EPStartXfer+0x47e>
 800a118:	187b      	adds	r3, r7, r1
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	187a      	adds	r2, r7, r1
 800a120:	6013      	str	r3, [r2, #0]
 800a122:	23f8      	movs	r3, #248	; 0xf8
 800a124:	18fb      	adds	r3, r7, r3
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	029b      	lsls	r3, r3, #10
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	4a9c      	ldr	r2, [pc, #624]	; (800a3a0 <USB_EPStartXfer+0x6fc>)
 800a130:	4313      	orrs	r3, r2
 800a132:	b29a      	uxth	r2, r3
 800a134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a136:	801a      	strh	r2, [r3, #0]
 800a138:	e01c      	b.n	800a174 <USB_EPStartXfer+0x4d0>
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	785b      	ldrb	r3, [r3, #1]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d118      	bne.n	800a174 <USB_EPStartXfer+0x4d0>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	653b      	str	r3, [r7, #80]	; 0x50
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2250      	movs	r2, #80	; 0x50
 800a14a:	5a9b      	ldrh	r3, [r3, r2]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	001a      	movs	r2, r3
 800a150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a152:	189b      	adds	r3, r3, r2
 800a154:	653b      	str	r3, [r7, #80]	; 0x50
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	00da      	lsls	r2, r3, #3
 800a15c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a15e:	18d3      	adds	r3, r2, r3
 800a160:	4a8d      	ldr	r2, [pc, #564]	; (800a398 <USB_EPStartXfer+0x6f4>)
 800a162:	4694      	mov	ip, r2
 800a164:	4463      	add	r3, ip
 800a166:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a168:	1d7b      	adds	r3, r7, #5
 800a16a:	33ff      	adds	r3, #255	; 0xff
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	b29a      	uxth	r2, r3
 800a170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a172:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a174:	2076      	movs	r0, #118	; 0x76
 800a176:	183b      	adds	r3, r7, r0
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	8912      	ldrh	r2, [r2, #8]
 800a17c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	6959      	ldr	r1, [r3, #20]
 800a182:	1d7b      	adds	r3, r7, #5
 800a184:	33ff      	adds	r3, #255	; 0xff
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	b29c      	uxth	r4, r3
 800a18a:	183b      	adds	r3, r7, r0
 800a18c:	881a      	ldrh	r2, [r3, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	0023      	movs	r3, r4
 800a192:	f000 ff7b 	bl	800b08c <USB_WritePMA>
            ep->xfer_buff += len;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	695a      	ldr	r2, [r3, #20]
 800a19a:	1d7b      	adds	r3, r7, #5
 800a19c:	33ff      	adds	r3, #255	; 0xff
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	18d2      	adds	r2, r2, r3
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	6a1a      	ldr	r2, [r3, #32]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d908      	bls.n	800a1c4 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	6a1a      	ldr	r2, [r3, #32]
 800a1b6:	1d7b      	adds	r3, r7, #5
 800a1b8:	33ff      	adds	r3, #255	; 0xff
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	1ad2      	subs	r2, r2, r3
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	621a      	str	r2, [r3, #32]
 800a1c2:	e007      	b.n	800a1d4 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	1d7a      	adds	r2, r7, #5
 800a1ca:	32ff      	adds	r2, #255	; 0xff
 800a1cc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	643b      	str	r3, [r7, #64]	; 0x40
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	785b      	ldrb	r3, [r3, #1]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d166      	bne.n	800a2ae <USB_EPStartXfer+0x60a>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2250      	movs	r2, #80	; 0x50
 800a1e8:	5a9b      	ldrh	r3, [r3, r2]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	001a      	movs	r2, r3
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f0:	189b      	adds	r3, r3, r2
 800a1f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	00da      	lsls	r2, r3, #3
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	18d3      	adds	r3, r2, r3
 800a1fe:	4a69      	ldr	r2, [pc, #420]	; (800a3a4 <USB_EPStartXfer+0x700>)
 800a200:	4694      	mov	ip, r2
 800a202:	4463      	add	r3, ip
 800a204:	637b      	str	r3, [r7, #52]	; 0x34
 800a206:	1d7b      	adds	r3, r7, #5
 800a208:	33ff      	adds	r3, #255	; 0xff
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d110      	bne.n	800a232 <USB_EPStartXfer+0x58e>
 800a210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	b29b      	uxth	r3, r3
 800a216:	4a61      	ldr	r2, [pc, #388]	; (800a39c <USB_EPStartXfer+0x6f8>)
 800a218:	4013      	ands	r3, r2
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21e:	801a      	strh	r2, [r3, #0]
 800a220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	b29b      	uxth	r3, r3
 800a226:	4a5e      	ldr	r2, [pc, #376]	; (800a3a0 <USB_EPStartXfer+0x6fc>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a22e:	801a      	strh	r2, [r3, #0]
 800a230:	e058      	b.n	800a2e4 <USB_EPStartXfer+0x640>
 800a232:	1d7b      	adds	r3, r7, #5
 800a234:	33ff      	adds	r3, #255	; 0xff
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b3e      	cmp	r3, #62	; 0x3e
 800a23a:	d81a      	bhi.n	800a272 <USB_EPStartXfer+0x5ce>
 800a23c:	1d7b      	adds	r3, r7, #5
 800a23e:	33ff      	adds	r3, #255	; 0xff
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	085b      	lsrs	r3, r3, #1
 800a244:	21f4      	movs	r1, #244	; 0xf4
 800a246:	187a      	adds	r2, r7, r1
 800a248:	6013      	str	r3, [r2, #0]
 800a24a:	1d7b      	adds	r3, r7, #5
 800a24c:	33ff      	adds	r3, #255	; 0xff
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2201      	movs	r2, #1
 800a252:	4013      	ands	r3, r2
 800a254:	d004      	beq.n	800a260 <USB_EPStartXfer+0x5bc>
 800a256:	187b      	adds	r3, r7, r1
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3301      	adds	r3, #1
 800a25c:	187a      	adds	r2, r7, r1
 800a25e:	6013      	str	r3, [r2, #0]
 800a260:	23f4      	movs	r3, #244	; 0xf4
 800a262:	18fb      	adds	r3, r7, r3
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	b29b      	uxth	r3, r3
 800a268:	029b      	lsls	r3, r3, #10
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a26e:	801a      	strh	r2, [r3, #0]
 800a270:	e038      	b.n	800a2e4 <USB_EPStartXfer+0x640>
 800a272:	1d7b      	adds	r3, r7, #5
 800a274:	33ff      	adds	r3, #255	; 0xff
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	095b      	lsrs	r3, r3, #5
 800a27a:	21f4      	movs	r1, #244	; 0xf4
 800a27c:	187a      	adds	r2, r7, r1
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	1d7b      	adds	r3, r7, #5
 800a282:	33ff      	adds	r3, #255	; 0xff
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	221f      	movs	r2, #31
 800a288:	4013      	ands	r3, r2
 800a28a:	d104      	bne.n	800a296 <USB_EPStartXfer+0x5f2>
 800a28c:	187b      	adds	r3, r7, r1
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3b01      	subs	r3, #1
 800a292:	187a      	adds	r2, r7, r1
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	23f4      	movs	r3, #244	; 0xf4
 800a298:	18fb      	adds	r3, r7, r3
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	029b      	lsls	r3, r3, #10
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	4a3f      	ldr	r2, [pc, #252]	; (800a3a0 <USB_EPStartXfer+0x6fc>)
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2aa:	801a      	strh	r2, [r3, #0]
 800a2ac:	e01a      	b.n	800a2e4 <USB_EPStartXfer+0x640>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d116      	bne.n	800a2e4 <USB_EPStartXfer+0x640>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2250      	movs	r2, #80	; 0x50
 800a2ba:	5a9b      	ldrh	r3, [r3, r2]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	001a      	movs	r2, r3
 800a2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c2:	189b      	adds	r3, r3, r2
 800a2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	00da      	lsls	r2, r3, #3
 800a2cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ce:	18d3      	adds	r3, r2, r3
 800a2d0:	4a34      	ldr	r2, [pc, #208]	; (800a3a4 <USB_EPStartXfer+0x700>)
 800a2d2:	4694      	mov	ip, r2
 800a2d4:	4463      	add	r3, ip
 800a2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2d8:	1d7b      	adds	r3, r7, #5
 800a2da:	33ff      	adds	r3, #255	; 0xff
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a2e4:	2076      	movs	r0, #118	; 0x76
 800a2e6:	183b      	adds	r3, r7, r0
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	8952      	ldrh	r2, [r2, #10]
 800a2ec:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	6959      	ldr	r1, [r3, #20]
 800a2f2:	1d7b      	adds	r3, r7, #5
 800a2f4:	33ff      	adds	r3, #255	; 0xff
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	b29c      	uxth	r4, r3
 800a2fa:	183b      	adds	r3, r7, r0
 800a2fc:	881a      	ldrh	r2, [r3, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	0023      	movs	r3, r4
 800a302:	f000 fec3 	bl	800b08c <USB_WritePMA>
 800a306:	e1a2      	b.n	800a64e <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	1d7a      	adds	r2, r7, #5
 800a30e:	32ff      	adds	r2, #255	; 0xff
 800a310:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	18d3      	adds	r3, r2, r3
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	b29a      	uxth	r2, r3
 800a320:	2062      	movs	r0, #98	; 0x62
 800a322:	183b      	adds	r3, r7, r0
 800a324:	4920      	ldr	r1, [pc, #128]	; (800a3a8 <USB_EPStartXfer+0x704>)
 800a326:	400a      	ands	r2, r1
 800a328:	801a      	strh	r2, [r3, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	18d3      	adds	r3, r2, r3
 800a334:	183a      	adds	r2, r7, r0
 800a336:	8812      	ldrh	r2, [r2, #0]
 800a338:	491c      	ldr	r1, [pc, #112]	; (800a3ac <USB_EPStartXfer+0x708>)
 800a33a:	430a      	orrs	r2, r1
 800a33c:	b292      	uxth	r2, r2
 800a33e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2250      	movs	r2, #80	; 0x50
 800a348:	5a9b      	ldrh	r3, [r3, r2]
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	001a      	movs	r2, r3
 800a34e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a350:	189b      	adds	r3, r3, r2
 800a352:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	00da      	lsls	r2, r3, #3
 800a35a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a35c:	18d3      	adds	r3, r2, r3
 800a35e:	4a0e      	ldr	r2, [pc, #56]	; (800a398 <USB_EPStartXfer+0x6f4>)
 800a360:	4694      	mov	ip, r2
 800a362:	4463      	add	r3, ip
 800a364:	65bb      	str	r3, [r7, #88]	; 0x58
 800a366:	1d7b      	adds	r3, r7, #5
 800a368:	33ff      	adds	r3, #255	; 0xff
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a370:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a372:	2076      	movs	r0, #118	; 0x76
 800a374:	183b      	adds	r3, r7, r0
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	8912      	ldrh	r2, [r2, #8]
 800a37a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	6959      	ldr	r1, [r3, #20]
 800a380:	1d7b      	adds	r3, r7, #5
 800a382:	33ff      	adds	r3, #255	; 0xff
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	b29c      	uxth	r4, r3
 800a388:	183b      	adds	r3, r7, r0
 800a38a:	881a      	ldrh	r2, [r3, #0]
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	0023      	movs	r3, r4
 800a390:	f000 fe7c 	bl	800b08c <USB_WritePMA>
 800a394:	e15b      	b.n	800a64e <USB_EPStartXfer+0x9aa>
 800a396:	46c0      	nop			; (mov r8, r8)
 800a398:	00000402 	.word	0x00000402
 800a39c:	ffff83ff 	.word	0xffff83ff
 800a3a0:	ffff8000 	.word	0xffff8000
 800a3a4:	00000406 	.word	0x00000406
 800a3a8:	ffff8e8f 	.word	0xffff8e8f
 800a3ac:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	6a1a      	ldr	r2, [r3, #32]
 800a3b4:	1d7b      	adds	r3, r7, #5
 800a3b6:	33ff      	adds	r3, #255	; 0xff
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	1ad2      	subs	r2, r2, r3
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	18d3      	adds	r3, r2, r3
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	001a      	movs	r2, r3
 800a3d0:	2340      	movs	r3, #64	; 0x40
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	d100      	bne.n	800a3d8 <USB_EPStartXfer+0x734>
 800a3d6:	e099      	b.n	800a50c <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	673b      	str	r3, [r7, #112]	; 0x70
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	785b      	ldrb	r3, [r3, #1]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d166      	bne.n	800a4b2 <USB_EPStartXfer+0x80e>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2250      	movs	r2, #80	; 0x50
 800a3ec:	5a9b      	ldrh	r3, [r3, r2]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	001a      	movs	r2, r3
 800a3f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3f4:	189b      	adds	r3, r3, r2
 800a3f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	00da      	lsls	r2, r3, #3
 800a3fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a400:	18d3      	adds	r3, r2, r3
 800a402:	4ad0      	ldr	r2, [pc, #832]	; (800a744 <USB_EPStartXfer+0xaa0>)
 800a404:	4694      	mov	ip, r2
 800a406:	4463      	add	r3, ip
 800a408:	667b      	str	r3, [r7, #100]	; 0x64
 800a40a:	1d7b      	adds	r3, r7, #5
 800a40c:	33ff      	adds	r3, #255	; 0xff
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d110      	bne.n	800a436 <USB_EPStartXfer+0x792>
 800a414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	4acb      	ldr	r2, [pc, #812]	; (800a748 <USB_EPStartXfer+0xaa4>)
 800a41c:	4013      	ands	r3, r2
 800a41e:	b29a      	uxth	r2, r3
 800a420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a422:	801a      	strh	r2, [r3, #0]
 800a424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	b29b      	uxth	r3, r3
 800a42a:	4ac8      	ldr	r2, [pc, #800]	; (800a74c <USB_EPStartXfer+0xaa8>)
 800a42c:	4313      	orrs	r3, r2
 800a42e:	b29a      	uxth	r2, r3
 800a430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a432:	801a      	strh	r2, [r3, #0]
 800a434:	e058      	b.n	800a4e8 <USB_EPStartXfer+0x844>
 800a436:	1d7b      	adds	r3, r7, #5
 800a438:	33ff      	adds	r3, #255	; 0xff
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b3e      	cmp	r3, #62	; 0x3e
 800a43e:	d81a      	bhi.n	800a476 <USB_EPStartXfer+0x7d2>
 800a440:	1d7b      	adds	r3, r7, #5
 800a442:	33ff      	adds	r3, #255	; 0xff
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	085b      	lsrs	r3, r3, #1
 800a448:	21f0      	movs	r1, #240	; 0xf0
 800a44a:	187a      	adds	r2, r7, r1
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	1d7b      	adds	r3, r7, #5
 800a450:	33ff      	adds	r3, #255	; 0xff
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2201      	movs	r2, #1
 800a456:	4013      	ands	r3, r2
 800a458:	d004      	beq.n	800a464 <USB_EPStartXfer+0x7c0>
 800a45a:	187b      	adds	r3, r7, r1
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3301      	adds	r3, #1
 800a460:	187a      	adds	r2, r7, r1
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	23f0      	movs	r3, #240	; 0xf0
 800a466:	18fb      	adds	r3, r7, r3
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	029b      	lsls	r3, r3, #10
 800a46e:	b29a      	uxth	r2, r3
 800a470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a472:	801a      	strh	r2, [r3, #0]
 800a474:	e038      	b.n	800a4e8 <USB_EPStartXfer+0x844>
 800a476:	1d7b      	adds	r3, r7, #5
 800a478:	33ff      	adds	r3, #255	; 0xff
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	095b      	lsrs	r3, r3, #5
 800a47e:	21f0      	movs	r1, #240	; 0xf0
 800a480:	187a      	adds	r2, r7, r1
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	1d7b      	adds	r3, r7, #5
 800a486:	33ff      	adds	r3, #255	; 0xff
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	221f      	movs	r2, #31
 800a48c:	4013      	ands	r3, r2
 800a48e:	d104      	bne.n	800a49a <USB_EPStartXfer+0x7f6>
 800a490:	187b      	adds	r3, r7, r1
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3b01      	subs	r3, #1
 800a496:	187a      	adds	r2, r7, r1
 800a498:	6013      	str	r3, [r2, #0]
 800a49a:	23f0      	movs	r3, #240	; 0xf0
 800a49c:	18fb      	adds	r3, r7, r3
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	029b      	lsls	r3, r3, #10
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	4aa9      	ldr	r2, [pc, #676]	; (800a74c <USB_EPStartXfer+0xaa8>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4ae:	801a      	strh	r2, [r3, #0]
 800a4b0:	e01a      	b.n	800a4e8 <USB_EPStartXfer+0x844>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	785b      	ldrb	r3, [r3, #1]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d116      	bne.n	800a4e8 <USB_EPStartXfer+0x844>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2250      	movs	r2, #80	; 0x50
 800a4be:	5a9b      	ldrh	r3, [r3, r2]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	001a      	movs	r2, r3
 800a4c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4c6:	189b      	adds	r3, r3, r2
 800a4c8:	673b      	str	r3, [r7, #112]	; 0x70
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	00da      	lsls	r2, r3, #3
 800a4d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4d2:	18d3      	adds	r3, r2, r3
 800a4d4:	4a9b      	ldr	r2, [pc, #620]	; (800a744 <USB_EPStartXfer+0xaa0>)
 800a4d6:	4694      	mov	ip, r2
 800a4d8:	4463      	add	r3, ip
 800a4da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4dc:	1d7b      	adds	r3, r7, #5
 800a4de:	33ff      	adds	r3, #255	; 0xff
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a4e8:	2076      	movs	r0, #118	; 0x76
 800a4ea:	183b      	adds	r3, r7, r0
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	8952      	ldrh	r2, [r2, #10]
 800a4f0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	6959      	ldr	r1, [r3, #20]
 800a4f6:	1d7b      	adds	r3, r7, #5
 800a4f8:	33ff      	adds	r3, #255	; 0xff
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	b29c      	uxth	r4, r3
 800a4fe:	183b      	adds	r3, r7, r0
 800a500:	881a      	ldrh	r2, [r3, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	0023      	movs	r3, r4
 800a506:	f000 fdc1 	bl	800b08c <USB_WritePMA>
 800a50a:	e0a0      	b.n	800a64e <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	785b      	ldrb	r3, [r3, #1]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d166      	bne.n	800a5e2 <USB_EPStartXfer+0x93e>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2250      	movs	r2, #80	; 0x50
 800a51c:	5a9b      	ldrh	r3, [r3, r2]
 800a51e:	b29b      	uxth	r3, r3
 800a520:	001a      	movs	r2, r3
 800a522:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a524:	189b      	adds	r3, r3, r2
 800a526:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	00da      	lsls	r2, r3, #3
 800a52e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a530:	18d3      	adds	r3, r2, r3
 800a532:	4a87      	ldr	r2, [pc, #540]	; (800a750 <USB_EPStartXfer+0xaac>)
 800a534:	4694      	mov	ip, r2
 800a536:	4463      	add	r3, ip
 800a538:	67bb      	str	r3, [r7, #120]	; 0x78
 800a53a:	1d7b      	adds	r3, r7, #5
 800a53c:	33ff      	adds	r3, #255	; 0xff
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d110      	bne.n	800a566 <USB_EPStartXfer+0x8c2>
 800a544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a546:	881b      	ldrh	r3, [r3, #0]
 800a548:	b29b      	uxth	r3, r3
 800a54a:	4a7f      	ldr	r2, [pc, #508]	; (800a748 <USB_EPStartXfer+0xaa4>)
 800a54c:	4013      	ands	r3, r2
 800a54e:	b29a      	uxth	r2, r3
 800a550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a552:	801a      	strh	r2, [r3, #0]
 800a554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	4a7c      	ldr	r2, [pc, #496]	; (800a74c <USB_EPStartXfer+0xaa8>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	b29a      	uxth	r2, r3
 800a560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a562:	801a      	strh	r2, [r3, #0]
 800a564:	e062      	b.n	800a62c <USB_EPStartXfer+0x988>
 800a566:	1d7b      	adds	r3, r7, #5
 800a568:	33ff      	adds	r3, #255	; 0xff
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b3e      	cmp	r3, #62	; 0x3e
 800a56e:	d81a      	bhi.n	800a5a6 <USB_EPStartXfer+0x902>
 800a570:	1d7b      	adds	r3, r7, #5
 800a572:	33ff      	adds	r3, #255	; 0xff
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	085b      	lsrs	r3, r3, #1
 800a578:	21ec      	movs	r1, #236	; 0xec
 800a57a:	187a      	adds	r2, r7, r1
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	1d7b      	adds	r3, r7, #5
 800a580:	33ff      	adds	r3, #255	; 0xff
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2201      	movs	r2, #1
 800a586:	4013      	ands	r3, r2
 800a588:	d004      	beq.n	800a594 <USB_EPStartXfer+0x8f0>
 800a58a:	187b      	adds	r3, r7, r1
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3301      	adds	r3, #1
 800a590:	187a      	adds	r2, r7, r1
 800a592:	6013      	str	r3, [r2, #0]
 800a594:	23ec      	movs	r3, #236	; 0xec
 800a596:	18fb      	adds	r3, r7, r3
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	029b      	lsls	r3, r3, #10
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5a2:	801a      	strh	r2, [r3, #0]
 800a5a4:	e042      	b.n	800a62c <USB_EPStartXfer+0x988>
 800a5a6:	1d7b      	adds	r3, r7, #5
 800a5a8:	33ff      	adds	r3, #255	; 0xff
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	095b      	lsrs	r3, r3, #5
 800a5ae:	21ec      	movs	r1, #236	; 0xec
 800a5b0:	187a      	adds	r2, r7, r1
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	1d7b      	adds	r3, r7, #5
 800a5b6:	33ff      	adds	r3, #255	; 0xff
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	221f      	movs	r2, #31
 800a5bc:	4013      	ands	r3, r2
 800a5be:	d104      	bne.n	800a5ca <USB_EPStartXfer+0x926>
 800a5c0:	187b      	adds	r3, r7, r1
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	187a      	adds	r2, r7, r1
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	23ec      	movs	r3, #236	; 0xec
 800a5cc:	18fb      	adds	r3, r7, r3
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	029b      	lsls	r3, r3, #10
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	4a5d      	ldr	r2, [pc, #372]	; (800a74c <USB_EPStartXfer+0xaa8>)
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5de:	801a      	strh	r2, [r3, #0]
 800a5e0:	e024      	b.n	800a62c <USB_EPStartXfer+0x988>
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	785b      	ldrb	r3, [r3, #1]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d120      	bne.n	800a62c <USB_EPStartXfer+0x988>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2184      	movs	r1, #132	; 0x84
 800a5ee:	187a      	adds	r2, r7, r1
 800a5f0:	6013      	str	r3, [r2, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2250      	movs	r2, #80	; 0x50
 800a5f6:	5a9b      	ldrh	r3, [r3, r2]
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	001a      	movs	r2, r3
 800a5fc:	187b      	adds	r3, r7, r1
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	189b      	adds	r3, r3, r2
 800a602:	187a      	adds	r2, r7, r1
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	00da      	lsls	r2, r3, #3
 800a60c:	187b      	adds	r3, r7, r1
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	18d3      	adds	r3, r2, r3
 800a612:	4a4f      	ldr	r2, [pc, #316]	; (800a750 <USB_EPStartXfer+0xaac>)
 800a614:	4694      	mov	ip, r2
 800a616:	4463      	add	r3, ip
 800a618:	2180      	movs	r1, #128	; 0x80
 800a61a:	187a      	adds	r2, r7, r1
 800a61c:	6013      	str	r3, [r2, #0]
 800a61e:	1d7b      	adds	r3, r7, #5
 800a620:	33ff      	adds	r3, #255	; 0xff
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	b29a      	uxth	r2, r3
 800a626:	187b      	adds	r3, r7, r1
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a62c:	2076      	movs	r0, #118	; 0x76
 800a62e:	183b      	adds	r3, r7, r0
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	8912      	ldrh	r2, [r2, #8]
 800a634:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	6959      	ldr	r1, [r3, #20]
 800a63a:	1d7b      	adds	r3, r7, #5
 800a63c:	33ff      	adds	r3, #255	; 0xff
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	b29c      	uxth	r4, r3
 800a642:	183b      	adds	r3, r7, r0
 800a644:	881a      	ldrh	r2, [r3, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	0023      	movs	r3, r4
 800a64a:	f000 fd1f 	bl	800b08c <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	18d3      	adds	r3, r2, r3
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	200a      	movs	r0, #10
 800a65e:	183b      	adds	r3, r7, r0
 800a660:	493c      	ldr	r1, [pc, #240]	; (800a754 <USB_EPStartXfer+0xab0>)
 800a662:	400a      	ands	r2, r1
 800a664:	801a      	strh	r2, [r3, #0]
 800a666:	183b      	adds	r3, r7, r0
 800a668:	183a      	adds	r2, r7, r0
 800a66a:	8812      	ldrh	r2, [r2, #0]
 800a66c:	2110      	movs	r1, #16
 800a66e:	404a      	eors	r2, r1
 800a670:	801a      	strh	r2, [r3, #0]
 800a672:	183b      	adds	r3, r7, r0
 800a674:	183a      	adds	r2, r7, r0
 800a676:	8812      	ldrh	r2, [r2, #0]
 800a678:	2120      	movs	r1, #32
 800a67a:	404a      	eors	r2, r1
 800a67c:	801a      	strh	r2, [r3, #0]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	18d3      	adds	r3, r2, r3
 800a688:	183a      	adds	r2, r7, r0
 800a68a:	8812      	ldrh	r2, [r2, #0]
 800a68c:	4932      	ldr	r1, [pc, #200]	; (800a758 <USB_EPStartXfer+0xab4>)
 800a68e:	430a      	orrs	r2, r1
 800a690:	b292      	uxth	r2, r2
 800a692:	801a      	strh	r2, [r3, #0]
 800a694:	f000 fbaf 	bl	800adf6 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	7b1b      	ldrb	r3, [r3, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d000      	beq.n	800a6a2 <USB_EPStartXfer+0x9fe>
 800a6a0:	e09e      	b.n	800a7e0 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	699a      	ldr	r2, [r3, #24]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d90d      	bls.n	800a6ca <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	1d7a      	adds	r2, r7, #5
 800a6b4:	32ff      	adds	r2, #255	; 0xff
 800a6b6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	699a      	ldr	r2, [r3, #24]
 800a6bc:	1d7b      	adds	r3, r7, #5
 800a6be:	33ff      	adds	r3, #255	; 0xff
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	1ad2      	subs	r2, r2, r3
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	619a      	str	r2, [r3, #24]
 800a6c8:	e007      	b.n	800a6da <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	1d7a      	adds	r2, r7, #5
 800a6d0:	32ff      	adds	r2, #255	; 0xff
 800a6d2:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2190      	movs	r1, #144	; 0x90
 800a6de:	187a      	adds	r2, r7, r1
 800a6e0:	6013      	str	r3, [r2, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2250      	movs	r2, #80	; 0x50
 800a6e6:	5a9b      	ldrh	r3, [r3, r2]
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	001a      	movs	r2, r3
 800a6ec:	187b      	adds	r3, r7, r1
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	189b      	adds	r3, r3, r2
 800a6f2:	187a      	adds	r2, r7, r1
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	00da      	lsls	r2, r3, #3
 800a6fc:	187b      	adds	r3, r7, r1
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	18d3      	adds	r3, r2, r3
 800a702:	4a10      	ldr	r2, [pc, #64]	; (800a744 <USB_EPStartXfer+0xaa0>)
 800a704:	4694      	mov	ip, r2
 800a706:	4463      	add	r3, ip
 800a708:	218c      	movs	r1, #140	; 0x8c
 800a70a:	187a      	adds	r2, r7, r1
 800a70c:	6013      	str	r3, [r2, #0]
 800a70e:	1d7b      	adds	r3, r7, #5
 800a710:	33ff      	adds	r3, #255	; 0xff
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d121      	bne.n	800a75c <USB_EPStartXfer+0xab8>
 800a718:	187b      	adds	r3, r7, r1
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	881b      	ldrh	r3, [r3, #0]
 800a71e:	b29b      	uxth	r3, r3
 800a720:	4a09      	ldr	r2, [pc, #36]	; (800a748 <USB_EPStartXfer+0xaa4>)
 800a722:	4013      	ands	r3, r2
 800a724:	b29a      	uxth	r2, r3
 800a726:	187b      	adds	r3, r7, r1
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	801a      	strh	r2, [r3, #0]
 800a72c:	187b      	adds	r3, r7, r1
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	b29b      	uxth	r3, r3
 800a734:	4a05      	ldr	r2, [pc, #20]	; (800a74c <USB_EPStartXfer+0xaa8>)
 800a736:	4313      	orrs	r3, r2
 800a738:	b29a      	uxth	r2, r3
 800a73a:	187b      	adds	r3, r7, r1
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	801a      	strh	r2, [r3, #0]
 800a740:	e334      	b.n	800adac <USB_EPStartXfer+0x1108>
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	00000406 	.word	0x00000406
 800a748:	ffff83ff 	.word	0xffff83ff
 800a74c:	ffff8000 	.word	0xffff8000
 800a750:	00000402 	.word	0x00000402
 800a754:	ffff8fbf 	.word	0xffff8fbf
 800a758:	ffff8080 	.word	0xffff8080
 800a75c:	1d7b      	adds	r3, r7, #5
 800a75e:	33ff      	adds	r3, #255	; 0xff
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b3e      	cmp	r3, #62	; 0x3e
 800a764:	d81c      	bhi.n	800a7a0 <USB_EPStartXfer+0xafc>
 800a766:	1d7b      	adds	r3, r7, #5
 800a768:	33ff      	adds	r3, #255	; 0xff
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	085b      	lsrs	r3, r3, #1
 800a76e:	21e8      	movs	r1, #232	; 0xe8
 800a770:	187a      	adds	r2, r7, r1
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	1d7b      	adds	r3, r7, #5
 800a776:	33ff      	adds	r3, #255	; 0xff
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2201      	movs	r2, #1
 800a77c:	4013      	ands	r3, r2
 800a77e:	d004      	beq.n	800a78a <USB_EPStartXfer+0xae6>
 800a780:	187b      	adds	r3, r7, r1
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3301      	adds	r3, #1
 800a786:	187a      	adds	r2, r7, r1
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	23e8      	movs	r3, #232	; 0xe8
 800a78c:	18fb      	adds	r3, r7, r3
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	b29b      	uxth	r3, r3
 800a792:	029b      	lsls	r3, r3, #10
 800a794:	b29a      	uxth	r2, r3
 800a796:	238c      	movs	r3, #140	; 0x8c
 800a798:	18fb      	adds	r3, r7, r3
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	801a      	strh	r2, [r3, #0]
 800a79e:	e305      	b.n	800adac <USB_EPStartXfer+0x1108>
 800a7a0:	1d7b      	adds	r3, r7, #5
 800a7a2:	33ff      	adds	r3, #255	; 0xff
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	095b      	lsrs	r3, r3, #5
 800a7a8:	21e8      	movs	r1, #232	; 0xe8
 800a7aa:	187a      	adds	r2, r7, r1
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	1d7b      	adds	r3, r7, #5
 800a7b0:	33ff      	adds	r3, #255	; 0xff
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	221f      	movs	r2, #31
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	d104      	bne.n	800a7c4 <USB_EPStartXfer+0xb20>
 800a7ba:	187b      	adds	r3, r7, r1
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	187a      	adds	r2, r7, r1
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	23e8      	movs	r3, #232	; 0xe8
 800a7c6:	18fb      	adds	r3, r7, r3
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	029b      	lsls	r3, r3, #10
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	4aca      	ldr	r2, [pc, #808]	; (800aafc <USB_EPStartXfer+0xe58>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	238c      	movs	r3, #140	; 0x8c
 800a7d8:	18fb      	adds	r3, r7, r3
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	801a      	strh	r2, [r3, #0]
 800a7de:	e2e5      	b.n	800adac <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	78db      	ldrb	r3, [r3, #3]
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d000      	beq.n	800a7ea <USB_EPStartXfer+0xb46>
 800a7e8:	e16f      	b.n	800aaca <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d16f      	bne.n	800a8d2 <USB_EPStartXfer+0xc2e>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	21ac      	movs	r1, #172	; 0xac
 800a7f6:	187a      	adds	r2, r7, r1
 800a7f8:	6013      	str	r3, [r2, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2250      	movs	r2, #80	; 0x50
 800a7fe:	5a9b      	ldrh	r3, [r3, r2]
 800a800:	b29b      	uxth	r3, r3
 800a802:	001a      	movs	r2, r3
 800a804:	187b      	adds	r3, r7, r1
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	189b      	adds	r3, r3, r2
 800a80a:	187a      	adds	r2, r7, r1
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	00da      	lsls	r2, r3, #3
 800a814:	187b      	adds	r3, r7, r1
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	18d3      	adds	r3, r2, r3
 800a81a:	4ab9      	ldr	r2, [pc, #740]	; (800ab00 <USB_EPStartXfer+0xe5c>)
 800a81c:	4694      	mov	ip, r2
 800a81e:	4463      	add	r3, ip
 800a820:	21a8      	movs	r1, #168	; 0xa8
 800a822:	187a      	adds	r2, r7, r1
 800a824:	6013      	str	r3, [r2, #0]
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	691b      	ldr	r3, [r3, #16]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d114      	bne.n	800a858 <USB_EPStartXfer+0xbb4>
 800a82e:	187b      	adds	r3, r7, r1
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	b29b      	uxth	r3, r3
 800a836:	4ab3      	ldr	r2, [pc, #716]	; (800ab04 <USB_EPStartXfer+0xe60>)
 800a838:	4013      	ands	r3, r2
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	187b      	adds	r3, r7, r1
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	801a      	strh	r2, [r3, #0]
 800a842:	187b      	adds	r3, r7, r1
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	4aac      	ldr	r2, [pc, #688]	; (800aafc <USB_EPStartXfer+0xe58>)
 800a84c:	4313      	orrs	r3, r2
 800a84e:	b29a      	uxth	r2, r3
 800a850:	187b      	adds	r3, r7, r1
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	801a      	strh	r2, [r3, #0]
 800a856:	e060      	b.n	800a91a <USB_EPStartXfer+0xc76>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	2b3e      	cmp	r3, #62	; 0x3e
 800a85e:	d81a      	bhi.n	800a896 <USB_EPStartXfer+0xbf2>
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	085b      	lsrs	r3, r3, #1
 800a866:	21e4      	movs	r1, #228	; 0xe4
 800a868:	187a      	adds	r2, r7, r1
 800a86a:	6013      	str	r3, [r2, #0]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	2201      	movs	r2, #1
 800a872:	4013      	ands	r3, r2
 800a874:	d004      	beq.n	800a880 <USB_EPStartXfer+0xbdc>
 800a876:	187b      	adds	r3, r7, r1
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3301      	adds	r3, #1
 800a87c:	187a      	adds	r2, r7, r1
 800a87e:	6013      	str	r3, [r2, #0]
 800a880:	23e4      	movs	r3, #228	; 0xe4
 800a882:	18fb      	adds	r3, r7, r3
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	b29b      	uxth	r3, r3
 800a888:	029b      	lsls	r3, r3, #10
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	23a8      	movs	r3, #168	; 0xa8
 800a88e:	18fb      	adds	r3, r7, r3
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	801a      	strh	r2, [r3, #0]
 800a894:	e041      	b.n	800a91a <USB_EPStartXfer+0xc76>
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	095b      	lsrs	r3, r3, #5
 800a89c:	21e4      	movs	r1, #228	; 0xe4
 800a89e:	187a      	adds	r2, r7, r1
 800a8a0:	6013      	str	r3, [r2, #0]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	221f      	movs	r2, #31
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	d104      	bne.n	800a8b6 <USB_EPStartXfer+0xc12>
 800a8ac:	187b      	adds	r3, r7, r1
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	187a      	adds	r2, r7, r1
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	23e4      	movs	r3, #228	; 0xe4
 800a8b8:	18fb      	adds	r3, r7, r3
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	029b      	lsls	r3, r3, #10
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	4a8e      	ldr	r2, [pc, #568]	; (800aafc <USB_EPStartXfer+0xe58>)
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	23a8      	movs	r3, #168	; 0xa8
 800a8ca:	18fb      	adds	r3, r7, r3
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	801a      	strh	r2, [r3, #0]
 800a8d0:	e023      	b.n	800a91a <USB_EPStartXfer+0xc76>
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	785b      	ldrb	r3, [r3, #1]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d11f      	bne.n	800a91a <USB_EPStartXfer+0xc76>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	21b4      	movs	r1, #180	; 0xb4
 800a8de:	187a      	adds	r2, r7, r1
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2250      	movs	r2, #80	; 0x50
 800a8e6:	5a9b      	ldrh	r3, [r3, r2]
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	001a      	movs	r2, r3
 800a8ec:	187b      	adds	r3, r7, r1
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	189b      	adds	r3, r3, r2
 800a8f2:	187a      	adds	r2, r7, r1
 800a8f4:	6013      	str	r3, [r2, #0]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	00da      	lsls	r2, r3, #3
 800a8fc:	187b      	adds	r3, r7, r1
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	18d3      	adds	r3, r2, r3
 800a902:	4a7f      	ldr	r2, [pc, #508]	; (800ab00 <USB_EPStartXfer+0xe5c>)
 800a904:	4694      	mov	ip, r2
 800a906:	4463      	add	r3, ip
 800a908:	21b0      	movs	r1, #176	; 0xb0
 800a90a:	187a      	adds	r2, r7, r1
 800a90c:	6013      	str	r3, [r2, #0]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	b29a      	uxth	r2, r3
 800a914:	187b      	adds	r3, r7, r1
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	801a      	strh	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	22a4      	movs	r2, #164	; 0xa4
 800a91e:	18ba      	adds	r2, r7, r2
 800a920:	6013      	str	r3, [r2, #0]
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	785b      	ldrb	r3, [r3, #1]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d16f      	bne.n	800aa0a <USB_EPStartXfer+0xd66>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	219c      	movs	r1, #156	; 0x9c
 800a92e:	187a      	adds	r2, r7, r1
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2250      	movs	r2, #80	; 0x50
 800a936:	5a9b      	ldrh	r3, [r3, r2]
 800a938:	b29b      	uxth	r3, r3
 800a93a:	001a      	movs	r2, r3
 800a93c:	187b      	adds	r3, r7, r1
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	189b      	adds	r3, r3, r2
 800a942:	187a      	adds	r2, r7, r1
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	00da      	lsls	r2, r3, #3
 800a94c:	187b      	adds	r3, r7, r1
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	18d3      	adds	r3, r2, r3
 800a952:	4a6d      	ldr	r2, [pc, #436]	; (800ab08 <USB_EPStartXfer+0xe64>)
 800a954:	4694      	mov	ip, r2
 800a956:	4463      	add	r3, ip
 800a958:	2198      	movs	r1, #152	; 0x98
 800a95a:	187a      	adds	r2, r7, r1
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d114      	bne.n	800a990 <USB_EPStartXfer+0xcec>
 800a966:	187b      	adds	r3, r7, r1
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	4a65      	ldr	r2, [pc, #404]	; (800ab04 <USB_EPStartXfer+0xe60>)
 800a970:	4013      	ands	r3, r2
 800a972:	b29a      	uxth	r2, r3
 800a974:	187b      	adds	r3, r7, r1
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	801a      	strh	r2, [r3, #0]
 800a97a:	187b      	adds	r3, r7, r1
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	881b      	ldrh	r3, [r3, #0]
 800a980:	b29b      	uxth	r3, r3
 800a982:	4a5e      	ldr	r2, [pc, #376]	; (800aafc <USB_EPStartXfer+0xe58>)
 800a984:	4313      	orrs	r3, r2
 800a986:	b29a      	uxth	r2, r3
 800a988:	187b      	adds	r3, r7, r1
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	801a      	strh	r2, [r3, #0]
 800a98e:	e05d      	b.n	800aa4c <USB_EPStartXfer+0xda8>
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	2b3e      	cmp	r3, #62	; 0x3e
 800a996:	d81a      	bhi.n	800a9ce <USB_EPStartXfer+0xd2a>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	085b      	lsrs	r3, r3, #1
 800a99e:	21e0      	movs	r1, #224	; 0xe0
 800a9a0:	187a      	adds	r2, r7, r1
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	d004      	beq.n	800a9b8 <USB_EPStartXfer+0xd14>
 800a9ae:	187b      	adds	r3, r7, r1
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	187a      	adds	r2, r7, r1
 800a9b6:	6013      	str	r3, [r2, #0]
 800a9b8:	23e0      	movs	r3, #224	; 0xe0
 800a9ba:	18fb      	adds	r3, r7, r3
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	029b      	lsls	r3, r3, #10
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	2398      	movs	r3, #152	; 0x98
 800a9c6:	18fb      	adds	r3, r7, r3
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	801a      	strh	r2, [r3, #0]
 800a9cc:	e03e      	b.n	800aa4c <USB_EPStartXfer+0xda8>
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	095b      	lsrs	r3, r3, #5
 800a9d4:	21e0      	movs	r1, #224	; 0xe0
 800a9d6:	187a      	adds	r2, r7, r1
 800a9d8:	6013      	str	r3, [r2, #0]
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	221f      	movs	r2, #31
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	d104      	bne.n	800a9ee <USB_EPStartXfer+0xd4a>
 800a9e4:	187b      	adds	r3, r7, r1
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	187a      	adds	r2, r7, r1
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	23e0      	movs	r3, #224	; 0xe0
 800a9f0:	18fb      	adds	r3, r7, r3
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	029b      	lsls	r3, r3, #10
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	4a40      	ldr	r2, [pc, #256]	; (800aafc <USB_EPStartXfer+0xe58>)
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	2398      	movs	r3, #152	; 0x98
 800aa02:	18fb      	adds	r3, r7, r3
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	801a      	strh	r2, [r3, #0]
 800aa08:	e020      	b.n	800aa4c <USB_EPStartXfer+0xda8>
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	785b      	ldrb	r3, [r3, #1]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d11c      	bne.n	800aa4c <USB_EPStartXfer+0xda8>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2250      	movs	r2, #80	; 0x50
 800aa16:	5a9b      	ldrh	r3, [r3, r2]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	001a      	movs	r2, r3
 800aa1c:	21a4      	movs	r1, #164	; 0xa4
 800aa1e:	187b      	adds	r3, r7, r1
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	189b      	adds	r3, r3, r2
 800aa24:	187a      	adds	r2, r7, r1
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	00da      	lsls	r2, r3, #3
 800aa2e:	187b      	adds	r3, r7, r1
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	18d3      	adds	r3, r2, r3
 800aa34:	4a34      	ldr	r2, [pc, #208]	; (800ab08 <USB_EPStartXfer+0xe64>)
 800aa36:	4694      	mov	ip, r2
 800aa38:	4463      	add	r3, ip
 800aa3a:	21a0      	movs	r1, #160	; 0xa0
 800aa3c:	187a      	adds	r2, r7, r1
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	187b      	adds	r3, r7, r1
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	69db      	ldr	r3, [r3, #28]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d100      	bne.n	800aa56 <USB_EPStartXfer+0xdb2>
 800aa54:	e1aa      	b.n	800adac <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	18d2      	adds	r2, r2, r3
 800aa60:	2196      	movs	r1, #150	; 0x96
 800aa62:	187b      	adds	r3, r7, r1
 800aa64:	8812      	ldrh	r2, [r2, #0]
 800aa66:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa68:	187b      	adds	r3, r7, r1
 800aa6a:	881a      	ldrh	r2, [r3, #0]
 800aa6c:	2380      	movs	r3, #128	; 0x80
 800aa6e:	01db      	lsls	r3, r3, #7
 800aa70:	4013      	ands	r3, r2
 800aa72:	d004      	beq.n	800aa7e <USB_EPStartXfer+0xdda>
 800aa74:	187b      	adds	r3, r7, r1
 800aa76:	881b      	ldrh	r3, [r3, #0]
 800aa78:	2240      	movs	r2, #64	; 0x40
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	d10d      	bne.n	800aa9a <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa7e:	2196      	movs	r1, #150	; 0x96
 800aa80:	187b      	adds	r3, r7, r1
 800aa82:	881a      	ldrh	r2, [r3, #0]
 800aa84:	2380      	movs	r3, #128	; 0x80
 800aa86:	01db      	lsls	r3, r3, #7
 800aa88:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa8a:	d000      	beq.n	800aa8e <USB_EPStartXfer+0xdea>
 800aa8c:	e18e      	b.n	800adac <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa8e:	187b      	adds	r3, r7, r1
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	2240      	movs	r2, #64	; 0x40
 800aa94:	4013      	ands	r3, r2
 800aa96:	d000      	beq.n	800aa9a <USB_EPStartXfer+0xdf6>
 800aa98:	e188      	b.n	800adac <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	18d3      	adds	r3, r2, r3
 800aaa4:	881b      	ldrh	r3, [r3, #0]
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	2094      	movs	r0, #148	; 0x94
 800aaaa:	183b      	adds	r3, r7, r0
 800aaac:	4917      	ldr	r1, [pc, #92]	; (800ab0c <USB_EPStartXfer+0xe68>)
 800aaae:	400a      	ands	r2, r1
 800aab0:	801a      	strh	r2, [r3, #0]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	18d3      	adds	r3, r2, r3
 800aabc:	183a      	adds	r2, r7, r0
 800aabe:	8812      	ldrh	r2, [r2, #0]
 800aac0:	4913      	ldr	r1, [pc, #76]	; (800ab10 <USB_EPStartXfer+0xe6c>)
 800aac2:	430a      	orrs	r2, r1
 800aac4:	b292      	uxth	r2, r2
 800aac6:	801a      	strh	r2, [r3, #0]
 800aac8:	e170      	b.n	800adac <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	78db      	ldrb	r3, [r3, #3]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d000      	beq.n	800aad4 <USB_EPStartXfer+0xe30>
 800aad2:	e169      	b.n	800ada8 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	699a      	ldr	r2, [r3, #24]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d919      	bls.n	800ab14 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	1d7a      	adds	r2, r7, #5
 800aae6:	32ff      	adds	r2, #255	; 0xff
 800aae8:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	699a      	ldr	r2, [r3, #24]
 800aaee:	1d7b      	adds	r3, r7, #5
 800aaf0:	33ff      	adds	r3, #255	; 0xff
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	1ad2      	subs	r2, r2, r3
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	619a      	str	r2, [r3, #24]
 800aafa:	e013      	b.n	800ab24 <USB_EPStartXfer+0xe80>
 800aafc:	ffff8000 	.word	0xffff8000
 800ab00:	00000402 	.word	0x00000402
 800ab04:	ffff83ff 	.word	0xffff83ff
 800ab08:	00000406 	.word	0x00000406
 800ab0c:	ffff8f8f 	.word	0xffff8f8f
 800ab10:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	1d7a      	adds	r2, r7, #5
 800ab1a:	32ff      	adds	r2, #255	; 0xff
 800ab1c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2200      	movs	r2, #0
 800ab22:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	785b      	ldrb	r3, [r3, #1]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d000      	beq.n	800ab2e <USB_EPStartXfer+0xe8a>
 800ab2c:	e075      	b.n	800ac1a <USB_EPStartXfer+0xf76>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	21cc      	movs	r1, #204	; 0xcc
 800ab32:	187a      	adds	r2, r7, r1
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2250      	movs	r2, #80	; 0x50
 800ab3a:	5a9b      	ldrh	r3, [r3, r2]
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	001a      	movs	r2, r3
 800ab40:	187b      	adds	r3, r7, r1
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	189b      	adds	r3, r3, r2
 800ab46:	187a      	adds	r2, r7, r1
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	00da      	lsls	r2, r3, #3
 800ab50:	187b      	adds	r3, r7, r1
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	18d3      	adds	r3, r2, r3
 800ab56:	4aaa      	ldr	r2, [pc, #680]	; (800ae00 <USB_EPStartXfer+0x115c>)
 800ab58:	4694      	mov	ip, r2
 800ab5a:	4463      	add	r3, ip
 800ab5c:	21c8      	movs	r1, #200	; 0xc8
 800ab5e:	187a      	adds	r2, r7, r1
 800ab60:	6013      	str	r3, [r2, #0]
 800ab62:	1d7b      	adds	r3, r7, #5
 800ab64:	33ff      	adds	r3, #255	; 0xff
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d114      	bne.n	800ab96 <USB_EPStartXfer+0xef2>
 800ab6c:	187b      	adds	r3, r7, r1
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	881b      	ldrh	r3, [r3, #0]
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	4aa3      	ldr	r2, [pc, #652]	; (800ae04 <USB_EPStartXfer+0x1160>)
 800ab76:	4013      	ands	r3, r2
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	187b      	adds	r3, r7, r1
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	801a      	strh	r2, [r3, #0]
 800ab80:	187b      	adds	r3, r7, r1
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	4a9f      	ldr	r2, [pc, #636]	; (800ae08 <USB_EPStartXfer+0x1164>)
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	187b      	adds	r3, r7, r1
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	801a      	strh	r2, [r3, #0]
 800ab94:	e066      	b.n	800ac64 <USB_EPStartXfer+0xfc0>
 800ab96:	1d7b      	adds	r3, r7, #5
 800ab98:	33ff      	adds	r3, #255	; 0xff
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b3e      	cmp	r3, #62	; 0x3e
 800ab9e:	d81c      	bhi.n	800abda <USB_EPStartXfer+0xf36>
 800aba0:	1d7b      	adds	r3, r7, #5
 800aba2:	33ff      	adds	r3, #255	; 0xff
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	085b      	lsrs	r3, r3, #1
 800aba8:	21dc      	movs	r1, #220	; 0xdc
 800abaa:	187a      	adds	r2, r7, r1
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	1d7b      	adds	r3, r7, #5
 800abb0:	33ff      	adds	r3, #255	; 0xff
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2201      	movs	r2, #1
 800abb6:	4013      	ands	r3, r2
 800abb8:	d004      	beq.n	800abc4 <USB_EPStartXfer+0xf20>
 800abba:	187b      	adds	r3, r7, r1
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	3301      	adds	r3, #1
 800abc0:	187a      	adds	r2, r7, r1
 800abc2:	6013      	str	r3, [r2, #0]
 800abc4:	23dc      	movs	r3, #220	; 0xdc
 800abc6:	18fb      	adds	r3, r7, r3
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	029b      	lsls	r3, r3, #10
 800abce:	b29a      	uxth	r2, r3
 800abd0:	23c8      	movs	r3, #200	; 0xc8
 800abd2:	18fb      	adds	r3, r7, r3
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	801a      	strh	r2, [r3, #0]
 800abd8:	e044      	b.n	800ac64 <USB_EPStartXfer+0xfc0>
 800abda:	1d7b      	adds	r3, r7, #5
 800abdc:	33ff      	adds	r3, #255	; 0xff
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	095b      	lsrs	r3, r3, #5
 800abe2:	21dc      	movs	r1, #220	; 0xdc
 800abe4:	187a      	adds	r2, r7, r1
 800abe6:	6013      	str	r3, [r2, #0]
 800abe8:	1d7b      	adds	r3, r7, #5
 800abea:	33ff      	adds	r3, #255	; 0xff
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	221f      	movs	r2, #31
 800abf0:	4013      	ands	r3, r2
 800abf2:	d104      	bne.n	800abfe <USB_EPStartXfer+0xf5a>
 800abf4:	187b      	adds	r3, r7, r1
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	187a      	adds	r2, r7, r1
 800abfc:	6013      	str	r3, [r2, #0]
 800abfe:	23dc      	movs	r3, #220	; 0xdc
 800ac00:	18fb      	adds	r3, r7, r3
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	029b      	lsls	r3, r3, #10
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	4a7f      	ldr	r2, [pc, #508]	; (800ae08 <USB_EPStartXfer+0x1164>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	23c8      	movs	r3, #200	; 0xc8
 800ac12:	18fb      	adds	r3, r7, r3
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	801a      	strh	r2, [r3, #0]
 800ac18:	e024      	b.n	800ac64 <USB_EPStartXfer+0xfc0>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	785b      	ldrb	r3, [r3, #1]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d120      	bne.n	800ac64 <USB_EPStartXfer+0xfc0>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	21d4      	movs	r1, #212	; 0xd4
 800ac26:	187a      	adds	r2, r7, r1
 800ac28:	6013      	str	r3, [r2, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2250      	movs	r2, #80	; 0x50
 800ac2e:	5a9b      	ldrh	r3, [r3, r2]
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	001a      	movs	r2, r3
 800ac34:	187b      	adds	r3, r7, r1
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	189b      	adds	r3, r3, r2
 800ac3a:	187a      	adds	r2, r7, r1
 800ac3c:	6013      	str	r3, [r2, #0]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	00da      	lsls	r2, r3, #3
 800ac44:	187b      	adds	r3, r7, r1
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	18d3      	adds	r3, r2, r3
 800ac4a:	4a6d      	ldr	r2, [pc, #436]	; (800ae00 <USB_EPStartXfer+0x115c>)
 800ac4c:	4694      	mov	ip, r2
 800ac4e:	4463      	add	r3, ip
 800ac50:	21d0      	movs	r1, #208	; 0xd0
 800ac52:	187a      	adds	r2, r7, r1
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	1d7b      	adds	r3, r7, #5
 800ac58:	33ff      	adds	r3, #255	; 0xff
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	187b      	adds	r3, r7, r1
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	801a      	strh	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	22c4      	movs	r2, #196	; 0xc4
 800ac68:	18ba      	adds	r2, r7, r2
 800ac6a:	6013      	str	r3, [r2, #0]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	785b      	ldrb	r3, [r3, #1]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d000      	beq.n	800ac76 <USB_EPStartXfer+0xfd2>
 800ac74:	e075      	b.n	800ad62 <USB_EPStartXfer+0x10be>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	21bc      	movs	r1, #188	; 0xbc
 800ac7a:	187a      	adds	r2, r7, r1
 800ac7c:	6013      	str	r3, [r2, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2250      	movs	r2, #80	; 0x50
 800ac82:	5a9b      	ldrh	r3, [r3, r2]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	001a      	movs	r2, r3
 800ac88:	187b      	adds	r3, r7, r1
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	189b      	adds	r3, r3, r2
 800ac8e:	187a      	adds	r2, r7, r1
 800ac90:	6013      	str	r3, [r2, #0]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	00da      	lsls	r2, r3, #3
 800ac98:	187b      	adds	r3, r7, r1
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	18d3      	adds	r3, r2, r3
 800ac9e:	4a5b      	ldr	r2, [pc, #364]	; (800ae0c <USB_EPStartXfer+0x1168>)
 800aca0:	4694      	mov	ip, r2
 800aca2:	4463      	add	r3, ip
 800aca4:	21b8      	movs	r1, #184	; 0xb8
 800aca6:	187a      	adds	r2, r7, r1
 800aca8:	6013      	str	r3, [r2, #0]
 800acaa:	1d7b      	adds	r3, r7, #5
 800acac:	33ff      	adds	r3, #255	; 0xff
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d114      	bne.n	800acde <USB_EPStartXfer+0x103a>
 800acb4:	187b      	adds	r3, r7, r1
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	881b      	ldrh	r3, [r3, #0]
 800acba:	b29b      	uxth	r3, r3
 800acbc:	4a51      	ldr	r2, [pc, #324]	; (800ae04 <USB_EPStartXfer+0x1160>)
 800acbe:	4013      	ands	r3, r2
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	187b      	adds	r3, r7, r1
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	801a      	strh	r2, [r3, #0]
 800acc8:	187b      	adds	r3, r7, r1
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	4a4d      	ldr	r2, [pc, #308]	; (800ae08 <USB_EPStartXfer+0x1164>)
 800acd2:	4313      	orrs	r3, r2
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	187b      	adds	r3, r7, r1
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	801a      	strh	r2, [r3, #0]
 800acdc:	e066      	b.n	800adac <USB_EPStartXfer+0x1108>
 800acde:	1d7b      	adds	r3, r7, #5
 800ace0:	33ff      	adds	r3, #255	; 0xff
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b3e      	cmp	r3, #62	; 0x3e
 800ace6:	d81c      	bhi.n	800ad22 <USB_EPStartXfer+0x107e>
 800ace8:	1d7b      	adds	r3, r7, #5
 800acea:	33ff      	adds	r3, #255	; 0xff
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	085b      	lsrs	r3, r3, #1
 800acf0:	21d8      	movs	r1, #216	; 0xd8
 800acf2:	187a      	adds	r2, r7, r1
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	1d7b      	adds	r3, r7, #5
 800acf8:	33ff      	adds	r3, #255	; 0xff
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2201      	movs	r2, #1
 800acfe:	4013      	ands	r3, r2
 800ad00:	d004      	beq.n	800ad0c <USB_EPStartXfer+0x1068>
 800ad02:	187b      	adds	r3, r7, r1
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	3301      	adds	r3, #1
 800ad08:	187a      	adds	r2, r7, r1
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	23d8      	movs	r3, #216	; 0xd8
 800ad0e:	18fb      	adds	r3, r7, r3
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	029b      	lsls	r3, r3, #10
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	23b8      	movs	r3, #184	; 0xb8
 800ad1a:	18fb      	adds	r3, r7, r3
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	801a      	strh	r2, [r3, #0]
 800ad20:	e044      	b.n	800adac <USB_EPStartXfer+0x1108>
 800ad22:	1d7b      	adds	r3, r7, #5
 800ad24:	33ff      	adds	r3, #255	; 0xff
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	095b      	lsrs	r3, r3, #5
 800ad2a:	21d8      	movs	r1, #216	; 0xd8
 800ad2c:	187a      	adds	r2, r7, r1
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	1d7b      	adds	r3, r7, #5
 800ad32:	33ff      	adds	r3, #255	; 0xff
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	221f      	movs	r2, #31
 800ad38:	4013      	ands	r3, r2
 800ad3a:	d104      	bne.n	800ad46 <USB_EPStartXfer+0x10a2>
 800ad3c:	187b      	adds	r3, r7, r1
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	187a      	adds	r2, r7, r1
 800ad44:	6013      	str	r3, [r2, #0]
 800ad46:	23d8      	movs	r3, #216	; 0xd8
 800ad48:	18fb      	adds	r3, r7, r3
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	029b      	lsls	r3, r3, #10
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	4a2d      	ldr	r2, [pc, #180]	; (800ae08 <USB_EPStartXfer+0x1164>)
 800ad54:	4313      	orrs	r3, r2
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	23b8      	movs	r3, #184	; 0xb8
 800ad5a:	18fb      	adds	r3, r7, r3
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	801a      	strh	r2, [r3, #0]
 800ad60:	e024      	b.n	800adac <USB_EPStartXfer+0x1108>
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	785b      	ldrb	r3, [r3, #1]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d120      	bne.n	800adac <USB_EPStartXfer+0x1108>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2250      	movs	r2, #80	; 0x50
 800ad6e:	5a9b      	ldrh	r3, [r3, r2]
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	001a      	movs	r2, r3
 800ad74:	21c4      	movs	r1, #196	; 0xc4
 800ad76:	187b      	adds	r3, r7, r1
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	189b      	adds	r3, r3, r2
 800ad7c:	187a      	adds	r2, r7, r1
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	00da      	lsls	r2, r3, #3
 800ad86:	187b      	adds	r3, r7, r1
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	18d3      	adds	r3, r2, r3
 800ad8c:	4a1f      	ldr	r2, [pc, #124]	; (800ae0c <USB_EPStartXfer+0x1168>)
 800ad8e:	4694      	mov	ip, r2
 800ad90:	4463      	add	r3, ip
 800ad92:	21c0      	movs	r1, #192	; 0xc0
 800ad94:	187a      	adds	r2, r7, r1
 800ad96:	6013      	str	r3, [r2, #0]
 800ad98:	1d7b      	adds	r3, r7, #5
 800ad9a:	33ff      	adds	r3, #255	; 0xff
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	187b      	adds	r3, r7, r1
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	801a      	strh	r2, [r3, #0]
 800ada6:	e001      	b.n	800adac <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	e025      	b.n	800adf8 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	18d3      	adds	r3, r2, r3
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	b29a      	uxth	r2, r3
 800adba:	208a      	movs	r0, #138	; 0x8a
 800adbc:	183b      	adds	r3, r7, r0
 800adbe:	4914      	ldr	r1, [pc, #80]	; (800ae10 <USB_EPStartXfer+0x116c>)
 800adc0:	400a      	ands	r2, r1
 800adc2:	801a      	strh	r2, [r3, #0]
 800adc4:	183b      	adds	r3, r7, r0
 800adc6:	183a      	adds	r2, r7, r0
 800adc8:	8812      	ldrh	r2, [r2, #0]
 800adca:	2180      	movs	r1, #128	; 0x80
 800adcc:	0149      	lsls	r1, r1, #5
 800adce:	404a      	eors	r2, r1
 800add0:	801a      	strh	r2, [r3, #0]
 800add2:	183b      	adds	r3, r7, r0
 800add4:	183a      	adds	r2, r7, r0
 800add6:	8812      	ldrh	r2, [r2, #0]
 800add8:	2180      	movs	r1, #128	; 0x80
 800adda:	0189      	lsls	r1, r1, #6
 800addc:	404a      	eors	r2, r1
 800adde:	801a      	strh	r2, [r3, #0]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	18d3      	adds	r3, r2, r3
 800adea:	183a      	adds	r2, r7, r0
 800adec:	8812      	ldrh	r2, [r2, #0]
 800adee:	4909      	ldr	r1, [pc, #36]	; (800ae14 <USB_EPStartXfer+0x1170>)
 800adf0:	430a      	orrs	r2, r1
 800adf2:	b292      	uxth	r2, r2
 800adf4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	0018      	movs	r0, r3
 800adfa:	46bd      	mov	sp, r7
 800adfc:	b043      	add	sp, #268	; 0x10c
 800adfe:	bd90      	pop	{r4, r7, pc}
 800ae00:	00000402 	.word	0x00000402
 800ae04:	ffff83ff 	.word	0xffff83ff
 800ae08:	ffff8000 	.word	0xffff8000
 800ae0c:	00000406 	.word	0x00000406
 800ae10:	ffffbf8f 	.word	0xffffbf8f
 800ae14:	ffff8080 	.word	0xffff8080

0800ae18 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	785b      	ldrb	r3, [r3, #1]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d01d      	beq.n	800ae66 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	18d3      	adds	r3, r2, r3
 800ae34:	881b      	ldrh	r3, [r3, #0]
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	200c      	movs	r0, #12
 800ae3a:	183b      	adds	r3, r7, r0
 800ae3c:	491b      	ldr	r1, [pc, #108]	; (800aeac <USB_EPSetStall+0x94>)
 800ae3e:	400a      	ands	r2, r1
 800ae40:	801a      	strh	r2, [r3, #0]
 800ae42:	183b      	adds	r3, r7, r0
 800ae44:	183a      	adds	r2, r7, r0
 800ae46:	8812      	ldrh	r2, [r2, #0]
 800ae48:	2110      	movs	r1, #16
 800ae4a:	404a      	eors	r2, r1
 800ae4c:	801a      	strh	r2, [r3, #0]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	18d3      	adds	r3, r2, r3
 800ae58:	183a      	adds	r2, r7, r0
 800ae5a:	8812      	ldrh	r2, [r2, #0]
 800ae5c:	4914      	ldr	r1, [pc, #80]	; (800aeb0 <USB_EPSetStall+0x98>)
 800ae5e:	430a      	orrs	r2, r1
 800ae60:	b292      	uxth	r2, r2
 800ae62:	801a      	strh	r2, [r3, #0]
 800ae64:	e01d      	b.n	800aea2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	18d3      	adds	r3, r2, r3
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	200e      	movs	r0, #14
 800ae76:	183b      	adds	r3, r7, r0
 800ae78:	490e      	ldr	r1, [pc, #56]	; (800aeb4 <USB_EPSetStall+0x9c>)
 800ae7a:	400a      	ands	r2, r1
 800ae7c:	801a      	strh	r2, [r3, #0]
 800ae7e:	183b      	adds	r3, r7, r0
 800ae80:	183a      	adds	r2, r7, r0
 800ae82:	8812      	ldrh	r2, [r2, #0]
 800ae84:	2180      	movs	r1, #128	; 0x80
 800ae86:	0149      	lsls	r1, r1, #5
 800ae88:	404a      	eors	r2, r1
 800ae8a:	801a      	strh	r2, [r3, #0]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	18d3      	adds	r3, r2, r3
 800ae96:	183a      	adds	r2, r7, r0
 800ae98:	8812      	ldrh	r2, [r2, #0]
 800ae9a:	4905      	ldr	r1, [pc, #20]	; (800aeb0 <USB_EPSetStall+0x98>)
 800ae9c:	430a      	orrs	r2, r1
 800ae9e:	b292      	uxth	r2, r2
 800aea0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	0018      	movs	r0, r3
 800aea6:	46bd      	mov	sp, r7
 800aea8:	b004      	add	sp, #16
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	ffff8fbf 	.word	0xffff8fbf
 800aeb0:	ffff8080 	.word	0xffff8080
 800aeb4:	ffffbf8f 	.word	0xffffbf8f

0800aeb8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	7b1b      	ldrb	r3, [r3, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d000      	beq.n	800aecc <USB_EPClearStall+0x14>
 800aeca:	e095      	b.n	800aff8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	785b      	ldrb	r3, [r3, #1]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d046      	beq.n	800af62 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	18d2      	adds	r2, r2, r3
 800aede:	2110      	movs	r1, #16
 800aee0:	187b      	adds	r3, r7, r1
 800aee2:	8812      	ldrh	r2, [r2, #0]
 800aee4:	801a      	strh	r2, [r3, #0]
 800aee6:	187b      	adds	r3, r7, r1
 800aee8:	881b      	ldrh	r3, [r3, #0]
 800aeea:	2240      	movs	r2, #64	; 0x40
 800aeec:	4013      	ands	r3, r2
 800aeee:	d016      	beq.n	800af1e <USB_EPClearStall+0x66>
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	18d3      	adds	r3, r2, r3
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	200e      	movs	r0, #14
 800af00:	183b      	adds	r3, r7, r0
 800af02:	4940      	ldr	r1, [pc, #256]	; (800b004 <USB_EPClearStall+0x14c>)
 800af04:	400a      	ands	r2, r1
 800af06:	801a      	strh	r2, [r3, #0]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	18d3      	adds	r3, r2, r3
 800af12:	183a      	adds	r2, r7, r0
 800af14:	8812      	ldrh	r2, [r2, #0]
 800af16:	493c      	ldr	r1, [pc, #240]	; (800b008 <USB_EPClearStall+0x150>)
 800af18:	430a      	orrs	r2, r1
 800af1a:	b292      	uxth	r2, r2
 800af1c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	78db      	ldrb	r3, [r3, #3]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d068      	beq.n	800aff8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	18d3      	adds	r3, r2, r3
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	b29a      	uxth	r2, r3
 800af34:	200c      	movs	r0, #12
 800af36:	183b      	adds	r3, r7, r0
 800af38:	4934      	ldr	r1, [pc, #208]	; (800b00c <USB_EPClearStall+0x154>)
 800af3a:	400a      	ands	r2, r1
 800af3c:	801a      	strh	r2, [r3, #0]
 800af3e:	183b      	adds	r3, r7, r0
 800af40:	183a      	adds	r2, r7, r0
 800af42:	8812      	ldrh	r2, [r2, #0]
 800af44:	2120      	movs	r1, #32
 800af46:	404a      	eors	r2, r1
 800af48:	801a      	strh	r2, [r3, #0]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	18d3      	adds	r3, r2, r3
 800af54:	183a      	adds	r2, r7, r0
 800af56:	8812      	ldrh	r2, [r2, #0]
 800af58:	492d      	ldr	r1, [pc, #180]	; (800b010 <USB_EPClearStall+0x158>)
 800af5a:	430a      	orrs	r2, r1
 800af5c:	b292      	uxth	r2, r2
 800af5e:	801a      	strh	r2, [r3, #0]
 800af60:	e04a      	b.n	800aff8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	18d2      	adds	r2, r2, r3
 800af6c:	2116      	movs	r1, #22
 800af6e:	187b      	adds	r3, r7, r1
 800af70:	8812      	ldrh	r2, [r2, #0]
 800af72:	801a      	strh	r2, [r3, #0]
 800af74:	187b      	adds	r3, r7, r1
 800af76:	881a      	ldrh	r2, [r3, #0]
 800af78:	2380      	movs	r3, #128	; 0x80
 800af7a:	01db      	lsls	r3, r3, #7
 800af7c:	4013      	ands	r3, r2
 800af7e:	d016      	beq.n	800afae <USB_EPClearStall+0xf6>
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	18d3      	adds	r3, r2, r3
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	2014      	movs	r0, #20
 800af90:	183b      	adds	r3, r7, r0
 800af92:	491c      	ldr	r1, [pc, #112]	; (800b004 <USB_EPClearStall+0x14c>)
 800af94:	400a      	ands	r2, r1
 800af96:	801a      	strh	r2, [r3, #0]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	18d3      	adds	r3, r2, r3
 800afa2:	183a      	adds	r2, r7, r0
 800afa4:	8812      	ldrh	r2, [r2, #0]
 800afa6:	491b      	ldr	r1, [pc, #108]	; (800b014 <USB_EPClearStall+0x15c>)
 800afa8:	430a      	orrs	r2, r1
 800afaa:	b292      	uxth	r2, r2
 800afac:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	18d3      	adds	r3, r2, r3
 800afb8:	881b      	ldrh	r3, [r3, #0]
 800afba:	b29a      	uxth	r2, r3
 800afbc:	2012      	movs	r0, #18
 800afbe:	183b      	adds	r3, r7, r0
 800afc0:	4915      	ldr	r1, [pc, #84]	; (800b018 <USB_EPClearStall+0x160>)
 800afc2:	400a      	ands	r2, r1
 800afc4:	801a      	strh	r2, [r3, #0]
 800afc6:	183b      	adds	r3, r7, r0
 800afc8:	183a      	adds	r2, r7, r0
 800afca:	8812      	ldrh	r2, [r2, #0]
 800afcc:	2180      	movs	r1, #128	; 0x80
 800afce:	0149      	lsls	r1, r1, #5
 800afd0:	404a      	eors	r2, r1
 800afd2:	801a      	strh	r2, [r3, #0]
 800afd4:	183b      	adds	r3, r7, r0
 800afd6:	183a      	adds	r2, r7, r0
 800afd8:	8812      	ldrh	r2, [r2, #0]
 800afda:	2180      	movs	r1, #128	; 0x80
 800afdc:	0189      	lsls	r1, r1, #6
 800afde:	404a      	eors	r2, r1
 800afe0:	801a      	strh	r2, [r3, #0]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	18d3      	adds	r3, r2, r3
 800afec:	183a      	adds	r2, r7, r0
 800afee:	8812      	ldrh	r2, [r2, #0]
 800aff0:	4907      	ldr	r1, [pc, #28]	; (800b010 <USB_EPClearStall+0x158>)
 800aff2:	430a      	orrs	r2, r1
 800aff4:	b292      	uxth	r2, r2
 800aff6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	0018      	movs	r0, r3
 800affc:	46bd      	mov	sp, r7
 800affe:	b006      	add	sp, #24
 800b000:	bd80      	pop	{r7, pc}
 800b002:	46c0      	nop			; (mov r8, r8)
 800b004:	ffff8f8f 	.word	0xffff8f8f
 800b008:	ffff80c0 	.word	0xffff80c0
 800b00c:	ffff8fbf 	.word	0xffff8fbf
 800b010:	ffff8080 	.word	0xffff8080
 800b014:	ffffc080 	.word	0xffffc080
 800b018:	ffffbf8f 	.word	0xffffbf8f

0800b01c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	000a      	movs	r2, r1
 800b026:	1cfb      	adds	r3, r7, #3
 800b028:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800b02a:	1cfb      	adds	r3, r7, #3
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d103      	bne.n	800b03a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	224c      	movs	r2, #76	; 0x4c
 800b036:	2180      	movs	r1, #128	; 0x80
 800b038:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	0018      	movs	r0, r3
 800b03e:	46bd      	mov	sp, r7
 800b040:	b002      	add	sp, #8
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2258      	movs	r2, #88	; 0x58
 800b050:	5a9b      	ldrh	r3, [r3, r2]
 800b052:	b29b      	uxth	r3, r3
 800b054:	4a05      	ldr	r2, [pc, #20]	; (800b06c <USB_DevConnect+0x28>)
 800b056:	4313      	orrs	r3, r2
 800b058:	b299      	uxth	r1, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2258      	movs	r2, #88	; 0x58
 800b05e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	0018      	movs	r0, r3
 800b064:	46bd      	mov	sp, r7
 800b066:	b002      	add	sp, #8
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	46c0      	nop			; (mov r8, r8)
 800b06c:	ffff8000 	.word	0xffff8000

0800b070 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2244      	movs	r2, #68	; 0x44
 800b07c:	5a9b      	ldrh	r3, [r3, r2]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b082:	68fb      	ldr	r3, [r7, #12]
}
 800b084:	0018      	movs	r0, r3
 800b086:	46bd      	mov	sp, r7
 800b088:	b004      	add	sp, #16
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b08c      	sub	sp, #48	; 0x30
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	0019      	movs	r1, r3
 800b098:	1dbb      	adds	r3, r7, #6
 800b09a:	801a      	strh	r2, [r3, #0]
 800b09c:	1d3b      	adds	r3, r7, #4
 800b09e:	1c0a      	adds	r2, r1, #0
 800b0a0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b0a2:	1d3b      	adds	r3, r7, #4
 800b0a4:	881b      	ldrh	r3, [r3, #0]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	085b      	lsrs	r3, r3, #1
 800b0aa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0b4:	1dbb      	adds	r3, r7, #6
 800b0b6:	881a      	ldrh	r2, [r3, #0]
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	18d3      	adds	r3, r2, r3
 800b0bc:	2280      	movs	r2, #128	; 0x80
 800b0be:	00d2      	lsls	r2, r2, #3
 800b0c0:	4694      	mov	ip, r2
 800b0c2:	4463      	add	r3, ip
 800b0c4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b0c6:	6a3b      	ldr	r3, [r7, #32]
 800b0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0ca:	e01b      	b.n	800b104 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	021b      	lsls	r3, r3, #8
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	001a      	movs	r2, r3
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f4:	3302      	adds	r3, #2
 800b0f6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b100:	3b01      	subs	r3, #1
 800b102:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1e0      	bne.n	800b0cc <USB_WritePMA+0x40>
  }
}
 800b10a:	46c0      	nop			; (mov r8, r8)
 800b10c:	46c0      	nop			; (mov r8, r8)
 800b10e:	46bd      	mov	sp, r7
 800b110:	b00c      	add	sp, #48	; 0x30
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b08a      	sub	sp, #40	; 0x28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	0019      	movs	r1, r3
 800b120:	1dbb      	adds	r3, r7, #6
 800b122:	801a      	strh	r2, [r3, #0]
 800b124:	1d3b      	adds	r3, r7, #4
 800b126:	1c0a      	adds	r2, r1, #0
 800b128:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b12a:	1d3b      	adds	r3, r7, #4
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	085b      	lsrs	r3, r3, #1
 800b130:	b29b      	uxth	r3, r3
 800b132:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b13c:	1dbb      	adds	r3, r7, #6
 800b13e:	881a      	ldrh	r2, [r3, #0]
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	18d3      	adds	r3, r2, r3
 800b144:	2280      	movs	r2, #128	; 0x80
 800b146:	00d2      	lsls	r2, r2, #3
 800b148:	4694      	mov	ip, r2
 800b14a:	4463      	add	r3, ip
 800b14c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	627b      	str	r3, [r7, #36]	; 0x24
 800b152:	e018      	b.n	800b186 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	3302      	adds	r3, #2
 800b160:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	b2da      	uxtb	r2, r3
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	3301      	adds	r3, #1
 800b16e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	0a1b      	lsrs	r3, r3, #8
 800b174:	b2da      	uxtb	r2, r3
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	3301      	adds	r3, #1
 800b17e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	3b01      	subs	r3, #1
 800b184:	627b      	str	r3, [r7, #36]	; 0x24
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e3      	bne.n	800b154 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b18c:	1d3b      	adds	r3, r7, #4
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	2201      	movs	r2, #1
 800b192:	4013      	ands	r3, r2
 800b194:	b29b      	uxth	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	d007      	beq.n	800b1aa <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	881b      	ldrh	r3, [r3, #0]
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	701a      	strb	r2, [r3, #0]
  }
}
 800b1aa:	46c0      	nop			; (mov r8, r8)
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	b00a      	add	sp, #40	; 0x28
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b084      	sub	sp, #16
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	000a      	movs	r2, r1
 800b1bc:	1cfb      	adds	r3, r7, #3
 800b1be:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b1c0:	230f      	movs	r3, #15
 800b1c2:	18fb      	adds	r3, r7, r3
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	7c1b      	ldrb	r3, [r3, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d116      	bne.n	800b1fe <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b1d0:	2380      	movs	r3, #128	; 0x80
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	2181      	movs	r1, #129	; 0x81
 800b1da:	f002 f8b4 	bl	800d346 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b1e4:	2380      	movs	r3, #128	; 0x80
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	2101      	movs	r1, #1
 800b1ee:	f002 f8aa 	bl	800d346 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	23b6      	movs	r3, #182	; 0xb6
 800b1f6:	005b      	lsls	r3, r3, #1
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	50d1      	str	r1, [r2, r3]
 800b1fc:	e013      	b.n	800b226 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	2340      	movs	r3, #64	; 0x40
 800b202:	2202      	movs	r2, #2
 800b204:	2181      	movs	r1, #129	; 0x81
 800b206:	f002 f89e 	bl	800d346 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	2340      	movs	r3, #64	; 0x40
 800b214:	2202      	movs	r2, #2
 800b216:	2101      	movs	r1, #1
 800b218:	f002 f895 	bl	800d346 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	23b6      	movs	r3, #182	; 0xb6
 800b220:	005b      	lsls	r3, r3, #1
 800b222:	2101      	movs	r1, #1
 800b224:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	2308      	movs	r3, #8
 800b22a:	2203      	movs	r2, #3
 800b22c:	2182      	movs	r1, #130	; 0x82
 800b22e:	f002 f88a 	bl	800d346 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b238:	2387      	movs	r3, #135	; 0x87
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	0018      	movs	r0, r3
 800b23e:	f002 fa1b 	bl	800d678 <USBD_static_malloc>
 800b242:	0001      	movs	r1, r0
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	23ae      	movs	r3, #174	; 0xae
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	23ae      	movs	r3, #174	; 0xae
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	58d3      	ldr	r3, [r2, r3]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d104      	bne.n	800b262 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800b258:	230f      	movs	r3, #15
 800b25a:	18fb      	adds	r3, r7, r3
 800b25c:	2201      	movs	r2, #1
 800b25e:	701a      	strb	r2, [r3, #0]
 800b260:	e02c      	b.n	800b2bc <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	23ae      	movs	r3, #174	; 0xae
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	58d3      	ldr	r3, [r2, r3]
 800b26a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	23af      	movs	r3, #175	; 0xaf
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	58d3      	ldr	r3, [r2, r3]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b278:	68ba      	ldr	r2, [r7, #8]
 800b27a:	2385      	movs	r3, #133	; 0x85
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	2100      	movs	r1, #0
 800b280:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	2386      	movs	r3, #134	; 0x86
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	2100      	movs	r1, #0
 800b28a:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	7c1b      	ldrb	r3, [r3, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10a      	bne.n	800b2aa <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	2381      	movs	r3, #129	; 0x81
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	58d2      	ldr	r2, [r2, r3]
 800b29c:	2380      	movs	r3, #128	; 0x80
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	2101      	movs	r1, #1
 800b2a4:	f002 f99a 	bl	800d5dc <USBD_LL_PrepareReceive>
 800b2a8:	e008      	b.n	800b2bc <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	2381      	movs	r3, #129	; 0x81
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	58d2      	ldr	r2, [r2, r3]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	2340      	movs	r3, #64	; 0x40
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	f002 f990 	bl	800d5dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b2bc:	230f      	movs	r3, #15
 800b2be:	18fb      	adds	r3, r7, r3
 800b2c0:	781b      	ldrb	r3, [r3, #0]
}
 800b2c2:	0018      	movs	r0, r3
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	b004      	add	sp, #16
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b084      	sub	sp, #16
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	000a      	movs	r2, r1
 800b2d4:	1cfb      	adds	r3, r7, #3
 800b2d6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b2d8:	230f      	movs	r3, #15
 800b2da:	18fb      	adds	r3, r7, r3
 800b2dc:	2200      	movs	r2, #0
 800b2de:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2181      	movs	r1, #129	; 0x81
 800b2e4:	0018      	movs	r0, r3
 800b2e6:	f002 f865 	bl	800d3b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	0018      	movs	r0, r3
 800b2f6:	f002 f85d 	bl	800d3b4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	23b6      	movs	r3, #182	; 0xb6
 800b2fe:	005b      	lsls	r3, r3, #1
 800b300:	2100      	movs	r1, #0
 800b302:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2182      	movs	r1, #130	; 0x82
 800b308:	0018      	movs	r0, r3
 800b30a:	f002 f853 	bl	800d3b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	23ae      	movs	r3, #174	; 0xae
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	58d3      	ldr	r3, [r2, r3]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d011      	beq.n	800b344 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	23af      	movs	r3, #175	; 0xaf
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	58d3      	ldr	r3, [r2, r3]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	23ae      	movs	r3, #174	; 0xae
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	58d3      	ldr	r3, [r2, r3]
 800b334:	0018      	movs	r0, r3
 800b336:	f002 f9ab 	bl	800d690 <USBD_static_free>
    pdev->pClassData = NULL;
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	23ae      	movs	r3, #174	; 0xae
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	2100      	movs	r1, #0
 800b342:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800b344:	230f      	movs	r3, #15
 800b346:	18fb      	adds	r3, r7, r3
 800b348:	781b      	ldrb	r3, [r3, #0]
}
 800b34a:	0018      	movs	r0, r3
 800b34c:	46bd      	mov	sp, r7
 800b34e:	b004      	add	sp, #16
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	23ae      	movs	r3, #174	; 0xae
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	58d3      	ldr	r3, [r2, r3]
 800b366:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b368:	230f      	movs	r3, #15
 800b36a:	18fb      	adds	r3, r7, r3
 800b36c:	2200      	movs	r2, #0
 800b36e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800b370:	230c      	movs	r3, #12
 800b372:	18fb      	adds	r3, r7, r3
 800b374:	2200      	movs	r2, #0
 800b376:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800b378:	2317      	movs	r3, #23
 800b37a:	18fb      	adds	r3, r7, r3
 800b37c:	2200      	movs	r2, #0
 800b37e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	001a      	movs	r2, r3
 800b386:	2360      	movs	r3, #96	; 0x60
 800b388:	4013      	ands	r3, r2
 800b38a:	d03d      	beq.n	800b408 <USBD_CDC_Setup+0xb4>
 800b38c:	2b20      	cmp	r3, #32
 800b38e:	d000      	beq.n	800b392 <USBD_CDC_Setup+0x3e>
 800b390:	e094      	b.n	800b4bc <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	88db      	ldrh	r3, [r3, #6]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d02b      	beq.n	800b3f2 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	b25b      	sxtb	r3, r3
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	da12      	bge.n	800b3ca <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	23af      	movs	r3, #175	; 0xaf
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	58d3      	ldr	r3, [r2, r3]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b3b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	88d2      	ldrh	r2, [r2, #6]
 800b3b8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b3ba:	6939      	ldr	r1, [r7, #16]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	88da      	ldrh	r2, [r3, #6]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	0018      	movs	r0, r3
 800b3c4:	f001 fbb2 	bl	800cb2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b3c8:	e083      	b.n	800b4d2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	7859      	ldrb	r1, [r3, #1]
 800b3ce:	693a      	ldr	r2, [r7, #16]
 800b3d0:	2380      	movs	r3, #128	; 0x80
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	88db      	ldrh	r3, [r3, #6]
 800b3da:	b2d9      	uxtb	r1, r3
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	4a40      	ldr	r2, [pc, #256]	; (800b4e0 <USBD_CDC_Setup+0x18c>)
 800b3e0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b3e2:	6939      	ldr	r1, [r7, #16]
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	88da      	ldrh	r2, [r3, #6]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	0018      	movs	r0, r3
 800b3ec:	f001 fbd1 	bl	800cb92 <USBD_CtlPrepareRx>
      break;
 800b3f0:	e06f      	b.n	800b4d2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	23af      	movs	r3, #175	; 0xaf
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	58d3      	ldr	r3, [r2, r3]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	7850      	ldrb	r0, [r2, #1]
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	2200      	movs	r2, #0
 800b404:	4798      	blx	r3
      break;
 800b406:	e064      	b.n	800b4d2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	785b      	ldrb	r3, [r3, #1]
 800b40c:	2b0b      	cmp	r3, #11
 800b40e:	d037      	beq.n	800b480 <USBD_CDC_Setup+0x12c>
 800b410:	dc47      	bgt.n	800b4a2 <USBD_CDC_Setup+0x14e>
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <USBD_CDC_Setup+0xc8>
 800b416:	2b0a      	cmp	r3, #10
 800b418:	d019      	beq.n	800b44e <USBD_CDC_Setup+0xfa>
 800b41a:	e042      	b.n	800b4a2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	23a7      	movs	r3, #167	; 0xa7
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	5cd3      	ldrb	r3, [r2, r3]
 800b424:	2b03      	cmp	r3, #3
 800b426:	d107      	bne.n	800b438 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b428:	230c      	movs	r3, #12
 800b42a:	18f9      	adds	r1, r7, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2202      	movs	r2, #2
 800b430:	0018      	movs	r0, r3
 800b432:	f001 fb7b 	bl	800cb2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b436:	e040      	b.n	800b4ba <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b438:	683a      	ldr	r2, [r7, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	0011      	movs	r1, r2
 800b43e:	0018      	movs	r0, r3
 800b440:	f001 faf6 	bl	800ca30 <USBD_CtlError>
            ret = USBD_FAIL;
 800b444:	2317      	movs	r3, #23
 800b446:	18fb      	adds	r3, r7, r3
 800b448:	2202      	movs	r2, #2
 800b44a:	701a      	strb	r2, [r3, #0]
          break;
 800b44c:	e035      	b.n	800b4ba <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	23a7      	movs	r3, #167	; 0xa7
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	5cd3      	ldrb	r3, [r2, r3]
 800b456:	2b03      	cmp	r3, #3
 800b458:	d107      	bne.n	800b46a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b45a:	230f      	movs	r3, #15
 800b45c:	18f9      	adds	r1, r7, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	0018      	movs	r0, r3
 800b464:	f001 fb62 	bl	800cb2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b468:	e027      	b.n	800b4ba <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	0011      	movs	r1, r2
 800b470:	0018      	movs	r0, r3
 800b472:	f001 fadd 	bl	800ca30 <USBD_CtlError>
            ret = USBD_FAIL;
 800b476:	2317      	movs	r3, #23
 800b478:	18fb      	adds	r3, r7, r3
 800b47a:	2202      	movs	r2, #2
 800b47c:	701a      	strb	r2, [r3, #0]
          break;
 800b47e:	e01c      	b.n	800b4ba <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	23a7      	movs	r3, #167	; 0xa7
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	5cd3      	ldrb	r3, [r2, r3]
 800b488:	2b03      	cmp	r3, #3
 800b48a:	d015      	beq.n	800b4b8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	0011      	movs	r1, r2
 800b492:	0018      	movs	r0, r3
 800b494:	f001 facc 	bl	800ca30 <USBD_CtlError>
            ret = USBD_FAIL;
 800b498:	2317      	movs	r3, #23
 800b49a:	18fb      	adds	r3, r7, r3
 800b49c:	2202      	movs	r2, #2
 800b49e:	701a      	strb	r2, [r3, #0]
          }
          break;
 800b4a0:	e00a      	b.n	800b4b8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	0011      	movs	r1, r2
 800b4a8:	0018      	movs	r0, r3
 800b4aa:	f001 fac1 	bl	800ca30 <USBD_CtlError>
          ret = USBD_FAIL;
 800b4ae:	2317      	movs	r3, #23
 800b4b0:	18fb      	adds	r3, r7, r3
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	701a      	strb	r2, [r3, #0]
          break;
 800b4b6:	e000      	b.n	800b4ba <USBD_CDC_Setup+0x166>
          break;
 800b4b8:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b4ba:	e00a      	b.n	800b4d2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	0011      	movs	r1, r2
 800b4c2:	0018      	movs	r0, r3
 800b4c4:	f001 fab4 	bl	800ca30 <USBD_CtlError>
      ret = USBD_FAIL;
 800b4c8:	2317      	movs	r3, #23
 800b4ca:	18fb      	adds	r3, r7, r3
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	701a      	strb	r2, [r3, #0]
      break;
 800b4d0:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b4d2:	2317      	movs	r3, #23
 800b4d4:	18fb      	adds	r3, r7, r3
 800b4d6:	781b      	ldrb	r3, [r3, #0]
}
 800b4d8:	0018      	movs	r0, r3
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	b006      	add	sp, #24
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	00000201 	.word	0x00000201

0800b4e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	000a      	movs	r2, r1
 800b4ee:	1cfb      	adds	r3, r7, #3
 800b4f0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	23ae      	movs	r3, #174	; 0xae
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	58d3      	ldr	r3, [r2, r3]
 800b4fa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	23b0      	movs	r3, #176	; 0xb0
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	58d3      	ldr	r3, [r2, r3]
 800b504:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	23ae      	movs	r3, #174	; 0xae
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	58d3      	ldr	r3, [r2, r3]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d03e      	beq.n	800b590 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b512:	1cfb      	adds	r3, r7, #3
 800b514:	781a      	ldrb	r2, [r3, #0]
 800b516:	6879      	ldr	r1, [r7, #4]
 800b518:	0013      	movs	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	189b      	adds	r3, r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	18cb      	adds	r3, r1, r3
 800b522:	331c      	adds	r3, #28
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d02b      	beq.n	800b582 <USBD_CDC_DataIn+0x9e>
 800b52a:	1cfb      	adds	r3, r7, #3
 800b52c:	781a      	ldrb	r2, [r3, #0]
 800b52e:	6879      	ldr	r1, [r7, #4]
 800b530:	0013      	movs	r3, r2
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	189b      	adds	r3, r3, r2
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	18cb      	adds	r3, r1, r3
 800b53a:	331c      	adds	r3, #28
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	1cfb      	adds	r3, r7, #3
 800b540:	781a      	ldrb	r2, [r3, #0]
 800b542:	68b9      	ldr	r1, [r7, #8]
 800b544:	0013      	movs	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	189b      	adds	r3, r3, r2
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	18cb      	adds	r3, r1, r3
 800b54e:	3338      	adds	r3, #56	; 0x38
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	0019      	movs	r1, r3
 800b554:	f7f4 fe70 	bl	8000238 <__aeabi_uidivmod>
 800b558:	1e0b      	subs	r3, r1, #0
 800b55a:	d112      	bne.n	800b582 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b55c:	1cfb      	adds	r3, r7, #3
 800b55e:	781a      	ldrb	r2, [r3, #0]
 800b560:	6879      	ldr	r1, [r7, #4]
 800b562:	0013      	movs	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	189b      	adds	r3, r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	18cb      	adds	r3, r1, r3
 800b56c:	331c      	adds	r3, #28
 800b56e:	2200      	movs	r2, #0
 800b570:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b572:	1cfb      	adds	r3, r7, #3
 800b574:	7819      	ldrb	r1, [r3, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	2300      	movs	r3, #0
 800b57a:	2200      	movs	r2, #0
 800b57c:	f001 fff7 	bl	800d56e <USBD_LL_Transmit>
 800b580:	e004      	b.n	800b58c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	2385      	movs	r3, #133	; 0x85
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	2100      	movs	r1, #0
 800b58a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	e000      	b.n	800b592 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800b590:	2302      	movs	r3, #2
  }
}
 800b592:	0018      	movs	r0, r3
 800b594:	46bd      	mov	sp, r7
 800b596:	b004      	add	sp, #16
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	000a      	movs	r2, r1
 800b5a4:	1cfb      	adds	r3, r7, #3
 800b5a6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	23ae      	movs	r3, #174	; 0xae
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	58d3      	ldr	r3, [r2, r3]
 800b5b0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5b2:	1cfb      	adds	r3, r7, #3
 800b5b4:	781a      	ldrb	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	0011      	movs	r1, r2
 800b5ba:	0018      	movs	r0, r3
 800b5bc:	f002 f845 	bl	800d64a <USBD_LL_GetRxDataSize>
 800b5c0:	0001      	movs	r1, r0
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	2383      	movs	r3, #131	; 0x83
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	23ae      	movs	r3, #174	; 0xae
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	58d3      	ldr	r3, [r2, r3]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d011      	beq.n	800b5fa <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	23af      	movs	r3, #175	; 0xaf
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	58d3      	ldr	r3, [r2, r3]
 800b5de:	68da      	ldr	r2, [r3, #12]
 800b5e0:	68f9      	ldr	r1, [r7, #12]
 800b5e2:	2381      	movs	r3, #129	; 0x81
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	58c8      	ldr	r0, [r1, r3]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2183      	movs	r1, #131	; 0x83
 800b5ec:	0089      	lsls	r1, r1, #2
 800b5ee:	468c      	mov	ip, r1
 800b5f0:	4463      	add	r3, ip
 800b5f2:	0019      	movs	r1, r3
 800b5f4:	4790      	blx	r2

    return USBD_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e000      	b.n	800b5fc <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800b5fa:	2302      	movs	r3, #2
  }
}
 800b5fc:	0018      	movs	r0, r3
 800b5fe:	46bd      	mov	sp, r7
 800b600:	b004      	add	sp, #16
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b604:	b590      	push	{r4, r7, lr}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	23ae      	movs	r3, #174	; 0xae
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	58d3      	ldr	r3, [r2, r3]
 800b614:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	23af      	movs	r3, #175	; 0xaf
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	58d3      	ldr	r3, [r2, r3]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d019      	beq.n	800b656 <USBD_CDC_EP0_RxReady+0x52>
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	2380      	movs	r3, #128	; 0x80
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	5cd3      	ldrb	r3, [r2, r3]
 800b62a:	2bff      	cmp	r3, #255	; 0xff
 800b62c:	d013      	beq.n	800b656 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	23af      	movs	r3, #175	; 0xaf
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	58d3      	ldr	r3, [r2, r3]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	68f9      	ldr	r1, [r7, #12]
 800b63a:	2280      	movs	r2, #128	; 0x80
 800b63c:	0092      	lsls	r2, r2, #2
 800b63e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800b640:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	4c06      	ldr	r4, [pc, #24]	; (800b660 <USBD_CDC_EP0_RxReady+0x5c>)
 800b646:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b648:	b292      	uxth	r2, r2
 800b64a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	2380      	movs	r3, #128	; 0x80
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	21ff      	movs	r1, #255	; 0xff
 800b654:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	0018      	movs	r0, r3
 800b65a:	46bd      	mov	sp, r7
 800b65c:	b005      	add	sp, #20
 800b65e:	bd90      	pop	{r4, r7, pc}
 800b660:	00000201 	.word	0x00000201

0800b664 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2243      	movs	r2, #67	; 0x43
 800b670:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b672:	4b02      	ldr	r3, [pc, #8]	; (800b67c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800b674:	0018      	movs	r0, r3
 800b676:	46bd      	mov	sp, r7
 800b678:	b002      	add	sp, #8
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	20000094 	.word	0x20000094

0800b680 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2243      	movs	r2, #67	; 0x43
 800b68c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b68e:	4b02      	ldr	r3, [pc, #8]	; (800b698 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800b690:	0018      	movs	r0, r3
 800b692:	46bd      	mov	sp, r7
 800b694:	b002      	add	sp, #8
 800b696:	bd80      	pop	{r7, pc}
 800b698:	20000050 	.word	0x20000050

0800b69c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2243      	movs	r2, #67	; 0x43
 800b6a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b6aa:	4b02      	ldr	r3, [pc, #8]	; (800b6b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800b6ac:	0018      	movs	r0, r3
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	b002      	add	sp, #8
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	200000d8 	.word	0x200000d8

0800b6b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	220a      	movs	r2, #10
 800b6c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b6c6:	4b02      	ldr	r3, [pc, #8]	; (800b6d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800b6c8:	0018      	movs	r0, r3
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	b002      	add	sp, #8
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	2000000c 	.word	0x2000000c

0800b6d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b6de:	200f      	movs	r0, #15
 800b6e0:	183b      	adds	r3, r7, r0
 800b6e2:	2202      	movs	r2, #2
 800b6e4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d007      	beq.n	800b6fc <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	23af      	movs	r3, #175	; 0xaf
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800b6f6:	183b      	adds	r3, r7, r0
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b6fc:	230f      	movs	r3, #15
 800b6fe:	18fb      	adds	r3, r7, r3
 800b700:	781b      	ldrb	r3, [r3, #0]
}
 800b702:	0018      	movs	r0, r3
 800b704:	46bd      	mov	sp, r7
 800b706:	b004      	add	sp, #16
 800b708:	bd80      	pop	{r7, pc}

0800b70a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b086      	sub	sp, #24
 800b70e:	af00      	add	r7, sp, #0
 800b710:	60f8      	str	r0, [r7, #12]
 800b712:	60b9      	str	r1, [r7, #8]
 800b714:	1dbb      	adds	r3, r7, #6
 800b716:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	23ae      	movs	r3, #174	; 0xae
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	58d3      	ldr	r3, [r2, r3]
 800b720:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	2382      	movs	r3, #130	; 0x82
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	68b9      	ldr	r1, [r7, #8]
 800b72a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800b72c:	1dbb      	adds	r3, r7, #6
 800b72e:	8819      	ldrh	r1, [r3, #0]
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	2384      	movs	r3, #132	; 0x84
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	0018      	movs	r0, r3
 800b73c:	46bd      	mov	sp, r7
 800b73e:	b006      	add	sp, #24
 800b740:	bd80      	pop	{r7, pc}

0800b742 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	23ae      	movs	r3, #174	; 0xae
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	58d3      	ldr	r3, [r2, r3]
 800b754:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	2381      	movs	r3, #129	; 0x81
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b760:	2300      	movs	r3, #0
}
 800b762:	0018      	movs	r0, r3
 800b764:	46bd      	mov	sp, r7
 800b766:	b004      	add	sp, #16
 800b768:	bd80      	pop	{r7, pc}

0800b76a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b084      	sub	sp, #16
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	23ae      	movs	r3, #174	; 0xae
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	58d3      	ldr	r3, [r2, r3]
 800b77a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	23ae      	movs	r3, #174	; 0xae
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	58d3      	ldr	r3, [r2, r3]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d022      	beq.n	800b7ce <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	2385      	movs	r3, #133	; 0x85
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	58d3      	ldr	r3, [r2, r3]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d11a      	bne.n	800b7ca <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	2385      	movs	r3, #133	; 0x85
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	2101      	movs	r1, #1
 800b79c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	2384      	movs	r3, #132	; 0x84
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	58d2      	ldr	r2, [r2, r3]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	2382      	movs	r3, #130	; 0x82
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	2384      	movs	r3, #132	; 0x84
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	000a      	movs	r2, r1
 800b7c0:	2181      	movs	r1, #129	; 0x81
 800b7c2:	f001 fed4 	bl	800d56e <USBD_LL_Transmit>

      return USBD_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	e002      	b.n	800b7d0 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e000      	b.n	800b7d0 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800b7ce:	2302      	movs	r3, #2
  }
}
 800b7d0:	0018      	movs	r0, r3
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	b004      	add	sp, #16
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	23ae      	movs	r3, #174	; 0xae
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	58d3      	ldr	r3, [r2, r3]
 800b7e8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	23ae      	movs	r3, #174	; 0xae
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	58d3      	ldr	r3, [r2, r3]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d019      	beq.n	800b82a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	7c1b      	ldrb	r3, [r3, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	2381      	movs	r3, #129	; 0x81
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	58d2      	ldr	r2, [r2, r3]
 800b806:	2380      	movs	r3, #128	; 0x80
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	2101      	movs	r1, #1
 800b80e:	f001 fee5 	bl	800d5dc <USBD_LL_PrepareReceive>
 800b812:	e008      	b.n	800b826 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	2381      	movs	r3, #129	; 0x81
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	58d2      	ldr	r2, [r2, r3]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	2340      	movs	r3, #64	; 0x40
 800b820:	2101      	movs	r1, #1
 800b822:	f001 fedb 	bl	800d5dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	e000      	b.n	800b82c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800b82a:	2302      	movs	r3, #2
  }
}
 800b82c:	0018      	movs	r0, r3
 800b82e:	46bd      	mov	sp, r7
 800b830:	b004      	add	sp, #16
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	1dfb      	adds	r3, r7, #7
 800b840:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d101      	bne.n	800b84c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b848:	2302      	movs	r3, #2
 800b84a:	e020      	b.n	800b88e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	23ad      	movs	r3, #173	; 0xad
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	58d3      	ldr	r3, [r2, r3]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d004      	beq.n	800b862 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	23ad      	movs	r3, #173	; 0xad
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	2100      	movs	r1, #0
 800b860:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d004      	beq.n	800b872 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	23ac      	movs	r3, #172	; 0xac
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	68b9      	ldr	r1, [r7, #8]
 800b870:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	23a7      	movs	r3, #167	; 0xa7
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	2101      	movs	r1, #1
 800b87a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	1dfa      	adds	r2, r7, #7
 800b880:	7812      	ldrb	r2, [r2, #0]
 800b882:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	0018      	movs	r0, r3
 800b888:	f001 fcd4 	bl	800d234 <USBD_LL_Init>

  return USBD_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	0018      	movs	r0, r3
 800b890:	46bd      	mov	sp, r7
 800b892:	b004      	add	sp, #16
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b084      	sub	sp, #16
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b8a0:	200f      	movs	r0, #15
 800b8a2:	183b      	adds	r3, r7, r0
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d008      	beq.n	800b8c0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	23ad      	movs	r3, #173	; 0xad
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800b8b8:	183b      	adds	r3, r7, r0
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	701a      	strb	r2, [r3, #0]
 800b8be:	e003      	b.n	800b8c8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b8c0:	230f      	movs	r3, #15
 800b8c2:	18fb      	adds	r3, r7, r3
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b8c8:	230f      	movs	r3, #15
 800b8ca:	18fb      	adds	r3, r7, r3
 800b8cc:	781b      	ldrb	r3, [r3, #0]
}
 800b8ce:	0018      	movs	r0, r3
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	b004      	add	sp, #16
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b082      	sub	sp, #8
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	0018      	movs	r0, r3
 800b8e2:	f001 fd0b 	bl	800d2fc <USBD_LL_Start>

  return USBD_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	0018      	movs	r0, r3
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	b002      	add	sp, #8
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	0018      	movs	r0, r3
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	b002      	add	sp, #8
 800b900:	bd80      	pop	{r7, pc}

0800b902 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b902:	b590      	push	{r4, r7, lr}
 800b904:	b085      	sub	sp, #20
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	000a      	movs	r2, r1
 800b90c:	1cfb      	adds	r3, r7, #3
 800b90e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b910:	240f      	movs	r4, #15
 800b912:	193b      	adds	r3, r7, r4
 800b914:	2202      	movs	r2, #2
 800b916:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	23ad      	movs	r3, #173	; 0xad
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	58d3      	ldr	r3, [r2, r3]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00e      	beq.n	800b942 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	23ad      	movs	r3, #173	; 0xad
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	58d3      	ldr	r3, [r2, r3]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	1cfa      	adds	r2, r7, #3
 800b930:	7811      	ldrb	r1, [r2, #0]
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	0010      	movs	r0, r2
 800b936:	4798      	blx	r3
 800b938:	1e03      	subs	r3, r0, #0
 800b93a:	d102      	bne.n	800b942 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800b93c:	193b      	adds	r3, r7, r4
 800b93e:	2200      	movs	r2, #0
 800b940:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800b942:	230f      	movs	r3, #15
 800b944:	18fb      	adds	r3, r7, r3
 800b946:	781b      	ldrb	r3, [r3, #0]
}
 800b948:	0018      	movs	r0, r3
 800b94a:	46bd      	mov	sp, r7
 800b94c:	b005      	add	sp, #20
 800b94e:	bd90      	pop	{r4, r7, pc}

0800b950 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	000a      	movs	r2, r1
 800b95a:	1cfb      	adds	r3, r7, #3
 800b95c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	23ad      	movs	r3, #173	; 0xad
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	58d3      	ldr	r3, [r2, r3]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	1cfa      	adds	r2, r7, #3
 800b96a:	7811      	ldrb	r1, [r2, #0]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	0010      	movs	r0, r2
 800b970:	4798      	blx	r3

  return USBD_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	0018      	movs	r0, r3
 800b976:	46bd      	mov	sp, r7
 800b978:	b002      	add	sp, #8
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	22aa      	movs	r2, #170	; 0xaa
 800b98a:	0092      	lsls	r2, r2, #2
 800b98c:	4694      	mov	ip, r2
 800b98e:	4463      	add	r3, ip
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	0011      	movs	r1, r2
 800b994:	0018      	movs	r0, r3
 800b996:	f001 f810 	bl	800c9ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	23a5      	movs	r3, #165	; 0xa5
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	2101      	movs	r1, #1
 800b9a2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a23      	ldr	r2, [pc, #140]	; (800ba34 <USBD_LL_SetupStage+0xb8>)
 800b9a8:	5a9b      	ldrh	r3, [r3, r2]
 800b9aa:	0019      	movs	r1, r3
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	23a6      	movs	r3, #166	; 0xa6
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	23aa      	movs	r3, #170	; 0xaa
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	5cd3      	ldrb	r3, [r2, r3]
 800b9bc:	001a      	movs	r2, r3
 800b9be:	231f      	movs	r3, #31
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d019      	beq.n	800b9fa <USBD_LL_SetupStage+0x7e>
 800b9c6:	d822      	bhi.n	800ba0e <USBD_LL_SetupStage+0x92>
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d002      	beq.n	800b9d2 <USBD_LL_SetupStage+0x56>
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d00a      	beq.n	800b9e6 <USBD_LL_SetupStage+0x6a>
 800b9d0:	e01d      	b.n	800ba0e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	22aa      	movs	r2, #170	; 0xaa
 800b9d6:	0092      	lsls	r2, r2, #2
 800b9d8:	189a      	adds	r2, r3, r2
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	0011      	movs	r1, r2
 800b9de:	0018      	movs	r0, r3
 800b9e0:	f000 fa10 	bl	800be04 <USBD_StdDevReq>
      break;
 800b9e4:	e020      	b.n	800ba28 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	22aa      	movs	r2, #170	; 0xaa
 800b9ea:	0092      	lsls	r2, r2, #2
 800b9ec:	189a      	adds	r2, r3, r2
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	0011      	movs	r1, r2
 800b9f2:	0018      	movs	r0, r3
 800b9f4:	f000 fa78 	bl	800bee8 <USBD_StdItfReq>
      break;
 800b9f8:	e016      	b.n	800ba28 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	22aa      	movs	r2, #170	; 0xaa
 800b9fe:	0092      	lsls	r2, r2, #2
 800ba00:	189a      	adds	r2, r3, r2
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	0011      	movs	r1, r2
 800ba06:	0018      	movs	r0, r3
 800ba08:	f000 fac5 	bl	800bf96 <USBD_StdEPReq>
      break;
 800ba0c:	e00c      	b.n	800ba28 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	23aa      	movs	r3, #170	; 0xaa
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	5cd3      	ldrb	r3, [r2, r3]
 800ba16:	227f      	movs	r2, #127	; 0x7f
 800ba18:	4393      	bics	r3, r2
 800ba1a:	b2da      	uxtb	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	0011      	movs	r1, r2
 800ba20:	0018      	movs	r0, r3
 800ba22:	f001 fcf2 	bl	800d40a <USBD_LL_StallEP>
      break;
 800ba26:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	0018      	movs	r0, r3
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	b002      	add	sp, #8
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	46c0      	nop			; (mov r8, r8)
 800ba34:	000002ae 	.word	0x000002ae

0800ba38 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	607a      	str	r2, [r7, #4]
 800ba42:	200b      	movs	r0, #11
 800ba44:	183b      	adds	r3, r7, r0
 800ba46:	1c0a      	adds	r2, r1, #0
 800ba48:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ba4a:	183b      	adds	r3, r7, r0
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d154      	bne.n	800bafc <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3355      	adds	r3, #85	; 0x55
 800ba56:	33ff      	adds	r3, #255	; 0xff
 800ba58:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	23a5      	movs	r3, #165	; 0xa5
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	58d3      	ldr	r3, [r2, r3]
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	d139      	bne.n	800bada <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	68da      	ldr	r2, [r3, #12]
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d919      	bls.n	800baa6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	68da      	ldr	r2, [r3, #12]
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	1ad2      	subs	r2, r2, r3
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	68da      	ldr	r2, [r3, #12]
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d203      	bcs.n	800ba94 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	e002      	b.n	800ba9a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	6879      	ldr	r1, [r7, #4]
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	001a      	movs	r2, r3
 800baa0:	f001 f89b 	bl	800cbda <USBD_CtlContinueRx>
 800baa4:	e045      	b.n	800bb32 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	23ad      	movs	r3, #173	; 0xad
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	58d3      	ldr	r3, [r2, r3]
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00d      	beq.n	800bad0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	23a7      	movs	r3, #167	; 0xa7
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800babc:	2b03      	cmp	r3, #3
 800babe:	d107      	bne.n	800bad0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	23ad      	movs	r3, #173	; 0xad
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	58d3      	ldr	r3, [r2, r3]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	0010      	movs	r0, r2
 800bace:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	0018      	movs	r0, r3
 800bad4:	f001 f894 	bl	800cc00 <USBD_CtlSendStatus>
 800bad8:	e02b      	b.n	800bb32 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	23a5      	movs	r3, #165	; 0xa5
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	58d3      	ldr	r3, [r2, r3]
 800bae2:	2b05      	cmp	r3, #5
 800bae4:	d125      	bne.n	800bb32 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	23a5      	movs	r3, #165	; 0xa5
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	2100      	movs	r1, #0
 800baee:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2100      	movs	r1, #0
 800baf4:	0018      	movs	r0, r3
 800baf6:	f001 fc88 	bl	800d40a <USBD_LL_StallEP>
 800bafa:	e01a      	b.n	800bb32 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	23ad      	movs	r3, #173	; 0xad
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	58d3      	ldr	r3, [r2, r3]
 800bb04:	699b      	ldr	r3, [r3, #24]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d011      	beq.n	800bb2e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	23a7      	movs	r3, #167	; 0xa7
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d10b      	bne.n	800bb2e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	23ad      	movs	r3, #173	; 0xad
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	58d3      	ldr	r3, [r2, r3]
 800bb1e:	699b      	ldr	r3, [r3, #24]
 800bb20:	220b      	movs	r2, #11
 800bb22:	18ba      	adds	r2, r7, r2
 800bb24:	7811      	ldrb	r1, [r2, #0]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	0010      	movs	r0, r2
 800bb2a:	4798      	blx	r3
 800bb2c:	e001      	b.n	800bb32 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bb2e:	2302      	movs	r3, #2
 800bb30:	e000      	b.n	800bb34 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	0018      	movs	r0, r3
 800bb36:	46bd      	mov	sp, r7
 800bb38:	b006      	add	sp, #24
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	607a      	str	r2, [r7, #4]
 800bb46:	200b      	movs	r0, #11
 800bb48:	183b      	adds	r3, r7, r0
 800bb4a:	1c0a      	adds	r2, r1, #0
 800bb4c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bb4e:	183b      	adds	r3, r7, r0
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d000      	beq.n	800bb58 <USBD_LL_DataInStage+0x1c>
 800bb56:	e08e      	b.n	800bc76 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	3314      	adds	r3, #20
 800bb5c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	23a5      	movs	r3, #165	; 0xa5
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	58d3      	ldr	r3, [r2, r3]
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d164      	bne.n	800bc34 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	68da      	ldr	r2, [r3, #12]
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d915      	bls.n	800bba2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	68da      	ldr	r2, [r3, #12]
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	1ad2      	subs	r2, r2, r3
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	6879      	ldr	r1, [r7, #4]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	0018      	movs	r0, r3
 800bb90:	f000 ffec 	bl	800cb6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	2300      	movs	r3, #0
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	f001 fd1e 	bl	800d5dc <USBD_LL_PrepareReceive>
 800bba0:	e059      	b.n	800bc56 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	689a      	ldr	r2, [r3, #8]
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	0019      	movs	r1, r3
 800bbac:	0010      	movs	r0, r2
 800bbae:	f7f4 fb43 	bl	8000238 <__aeabi_uidivmod>
 800bbb2:	1e0b      	subs	r3, r1, #0
 800bbb4:	d11f      	bne.n	800bbf6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	689a      	ldr	r2, [r3, #8]
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d319      	bcc.n	800bbf6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	689a      	ldr	r2, [r3, #8]
 800bbc6:	68f9      	ldr	r1, [r7, #12]
 800bbc8:	23a6      	movs	r3, #166	; 0xa6
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d211      	bcs.n	800bbf6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	0018      	movs	r0, r3
 800bbda:	f000 ffc7 	bl	800cb6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	23a6      	movs	r3, #166	; 0xa6
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	2300      	movs	r3, #0
 800bbec:	2200      	movs	r2, #0
 800bbee:	2100      	movs	r1, #0
 800bbf0:	f001 fcf4 	bl	800d5dc <USBD_LL_PrepareReceive>
 800bbf4:	e02f      	b.n	800bc56 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	23ad      	movs	r3, #173	; 0xad
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	58d3      	ldr	r3, [r2, r3]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00d      	beq.n	800bc20 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	23a7      	movs	r3, #167	; 0xa7
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d107      	bne.n	800bc20 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	23ad      	movs	r3, #173	; 0xad
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	58d3      	ldr	r3, [r2, r3]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	0010      	movs	r0, r2
 800bc1e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2180      	movs	r1, #128	; 0x80
 800bc24:	0018      	movs	r0, r3
 800bc26:	f001 fbf0 	bl	800d40a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	0018      	movs	r0, r3
 800bc2e:	f000 fffb 	bl	800cc28 <USBD_CtlReceiveStatus>
 800bc32:	e010      	b.n	800bc56 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	23a5      	movs	r3, #165	; 0xa5
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	58d3      	ldr	r3, [r2, r3]
 800bc3c:	2b04      	cmp	r3, #4
 800bc3e:	d005      	beq.n	800bc4c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	23a5      	movs	r3, #165	; 0xa5
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d104      	bne.n	800bc56 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2180      	movs	r1, #128	; 0x80
 800bc50:	0018      	movs	r0, r3
 800bc52:	f001 fbda 	bl	800d40a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	23a8      	movs	r3, #168	; 0xa8
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	5cd3      	ldrb	r3, [r2, r3]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d124      	bne.n	800bcac <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	0018      	movs	r0, r3
 800bc66:	f7ff fe43 	bl	800b8f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	23a8      	movs	r3, #168	; 0xa8
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	2100      	movs	r1, #0
 800bc72:	54d1      	strb	r1, [r2, r3]
 800bc74:	e01a      	b.n	800bcac <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	23ad      	movs	r3, #173	; 0xad
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	58d3      	ldr	r3, [r2, r3]
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d011      	beq.n	800bca8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	23a7      	movs	r3, #167	; 0xa7
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc8c:	2b03      	cmp	r3, #3
 800bc8e:	d10b      	bne.n	800bca8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	23ad      	movs	r3, #173	; 0xad
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	58d3      	ldr	r3, [r2, r3]
 800bc98:	695b      	ldr	r3, [r3, #20]
 800bc9a:	220b      	movs	r2, #11
 800bc9c:	18ba      	adds	r2, r7, r2
 800bc9e:	7811      	ldrb	r1, [r2, #0]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	0010      	movs	r0, r2
 800bca4:	4798      	blx	r3
 800bca6:	e001      	b.n	800bcac <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bca8:	2302      	movs	r3, #2
 800bcaa:	e000      	b.n	800bcae <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	0018      	movs	r0, r3
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	b006      	add	sp, #24
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b082      	sub	sp, #8
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	2340      	movs	r3, #64	; 0x40
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	f001 fb3e 	bl	800d346 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	23ac      	movs	r3, #172	; 0xac
 800bcce:	005b      	lsls	r3, r3, #1
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	23b2      	movs	r3, #178	; 0xb2
 800bcd8:	005b      	lsls	r3, r3, #1
 800bcda:	2140      	movs	r1, #64	; 0x40
 800bcdc:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	2340      	movs	r3, #64	; 0x40
 800bce2:	2200      	movs	r2, #0
 800bce4:	2180      	movs	r1, #128	; 0x80
 800bce6:	f001 fb2e 	bl	800d346 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2201      	movs	r2, #1
 800bcee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2240      	movs	r2, #64	; 0x40
 800bcf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	23a7      	movs	r3, #167	; 0xa7
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	23a5      	movs	r3, #165	; 0xa5
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	2100      	movs	r1, #0
 800bd08:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	23a9      	movs	r3, #169	; 0xa9
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	2100      	movs	r1, #0
 800bd18:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	23ae      	movs	r3, #174	; 0xae
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	58d3      	ldr	r3, [r2, r3]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00a      	beq.n	800bd3c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	23ad      	movs	r3, #173	; 0xad
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	58d3      	ldr	r3, [r2, r3]
 800bd2e:	685a      	ldr	r2, [r3, #4]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	b2d9      	uxtb	r1, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	0018      	movs	r0, r3
 800bd3a:	4790      	blx	r2
  }

  return USBD_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	0018      	movs	r0, r3
 800bd40:	46bd      	mov	sp, r7
 800bd42:	b002      	add	sp, #8
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b082      	sub	sp, #8
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	000a      	movs	r2, r1
 800bd50:	1cfb      	adds	r3, r7, #3
 800bd52:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	1cfa      	adds	r2, r7, #3
 800bd58:	7812      	ldrb	r2, [r2, #0]
 800bd5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	0018      	movs	r0, r3
 800bd60:	46bd      	mov	sp, r7
 800bd62:	b002      	add	sp, #8
 800bd64:	bd80      	pop	{r7, pc}
	...

0800bd68 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	23a7      	movs	r3, #167	; 0xa7
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	5cd1      	ldrb	r1, [r2, r3]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a06      	ldr	r2, [pc, #24]	; (800bd94 <USBD_LL_Suspend+0x2c>)
 800bd7c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	23a7      	movs	r3, #167	; 0xa7
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	2104      	movs	r1, #4
 800bd86:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	0018      	movs	r0, r3
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	b002      	add	sp, #8
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	46c0      	nop			; (mov r8, r8)
 800bd94:	0000029d 	.word	0x0000029d

0800bd98 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	23a7      	movs	r3, #167	; 0xa7
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	5cd3      	ldrb	r3, [r2, r3]
 800bda8:	2b04      	cmp	r3, #4
 800bdaa:	d106      	bne.n	800bdba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a05      	ldr	r2, [pc, #20]	; (800bdc4 <USBD_LL_Resume+0x2c>)
 800bdb0:	5c99      	ldrb	r1, [r3, r2]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	23a7      	movs	r3, #167	; 0xa7
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	0018      	movs	r0, r3
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	b002      	add	sp, #8
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	0000029d 	.word	0x0000029d

0800bdc8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	23a7      	movs	r3, #167	; 0xa7
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	5cd3      	ldrb	r3, [r2, r3]
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d10e      	bne.n	800bdfa <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	23ad      	movs	r3, #173	; 0xad
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	58d3      	ldr	r3, [r2, r3]
 800bde4:	69db      	ldr	r3, [r3, #28]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d007      	beq.n	800bdfa <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	23ad      	movs	r3, #173	; 0xad
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	58d3      	ldr	r3, [r2, r3]
 800bdf2:	69db      	ldr	r3, [r3, #28]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	0010      	movs	r0, r2
 800bdf8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	0018      	movs	r0, r3
 800bdfe:	46bd      	mov	sp, r7
 800be00:	b002      	add	sp, #8
 800be02:	bd80      	pop	{r7, pc}

0800be04 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be0e:	230f      	movs	r3, #15
 800be10:	18fb      	adds	r3, r7, r3
 800be12:	2200      	movs	r2, #0
 800be14:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	001a      	movs	r2, r3
 800be1c:	2360      	movs	r3, #96	; 0x60
 800be1e:	4013      	ands	r3, r2
 800be20:	2b40      	cmp	r3, #64	; 0x40
 800be22:	d004      	beq.n	800be2e <USBD_StdDevReq+0x2a>
 800be24:	d84f      	bhi.n	800bec6 <USBD_StdDevReq+0xc2>
 800be26:	2b00      	cmp	r3, #0
 800be28:	d00b      	beq.n	800be42 <USBD_StdDevReq+0x3e>
 800be2a:	2b20      	cmp	r3, #32
 800be2c:	d14b      	bne.n	800bec6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	23ad      	movs	r3, #173	; 0xad
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	58d3      	ldr	r3, [r2, r3]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	0010      	movs	r0, r2
 800be3e:	4798      	blx	r3
      break;
 800be40:	e048      	b.n	800bed4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	785b      	ldrb	r3, [r3, #1]
 800be46:	2b09      	cmp	r3, #9
 800be48:	d835      	bhi.n	800beb6 <USBD_StdDevReq+0xb2>
 800be4a:	009a      	lsls	r2, r3, #2
 800be4c:	4b25      	ldr	r3, [pc, #148]	; (800bee4 <USBD_StdDevReq+0xe0>)
 800be4e:	18d3      	adds	r3, r2, r3
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be54:	683a      	ldr	r2, [r7, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	0011      	movs	r1, r2
 800be5a:	0018      	movs	r0, r3
 800be5c:	f000 fa52 	bl	800c304 <USBD_GetDescriptor>
          break;
 800be60:	e030      	b.n	800bec4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	0011      	movs	r1, r2
 800be68:	0018      	movs	r0, r3
 800be6a:	f000 fbfd 	bl	800c668 <USBD_SetAddress>
          break;
 800be6e:	e029      	b.n	800bec4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	0011      	movs	r1, r2
 800be76:	0018      	movs	r0, r3
 800be78:	f000 fc4a 	bl	800c710 <USBD_SetConfig>
          break;
 800be7c:	e022      	b.n	800bec4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	0011      	movs	r1, r2
 800be84:	0018      	movs	r0, r3
 800be86:	f000 fce7 	bl	800c858 <USBD_GetConfig>
          break;
 800be8a:	e01b      	b.n	800bec4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	0011      	movs	r1, r2
 800be92:	0018      	movs	r0, r3
 800be94:	f000 fd1b 	bl	800c8ce <USBD_GetStatus>
          break;
 800be98:	e014      	b.n	800bec4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	0011      	movs	r1, r2
 800bea0:	0018      	movs	r0, r3
 800bea2:	f000 fd4e 	bl	800c942 <USBD_SetFeature>
          break;
 800bea6:	e00d      	b.n	800bec4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	0011      	movs	r1, r2
 800beae:	0018      	movs	r0, r3
 800beb0:	f000 fd5d 	bl	800c96e <USBD_ClrFeature>
          break;
 800beb4:	e006      	b.n	800bec4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	0011      	movs	r1, r2
 800bebc:	0018      	movs	r0, r3
 800bebe:	f000 fdb7 	bl	800ca30 <USBD_CtlError>
          break;
 800bec2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800bec4:	e006      	b.n	800bed4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	0011      	movs	r1, r2
 800becc:	0018      	movs	r0, r3
 800bece:	f000 fdaf 	bl	800ca30 <USBD_CtlError>
      break;
 800bed2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800bed4:	230f      	movs	r3, #15
 800bed6:	18fb      	adds	r3, r7, r3
 800bed8:	781b      	ldrb	r3, [r3, #0]
}
 800beda:	0018      	movs	r0, r3
 800bedc:	46bd      	mov	sp, r7
 800bede:	b004      	add	sp, #16
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	46c0      	nop			; (mov r8, r8)
 800bee4:	0800e2cc 	.word	0x0800e2cc

0800bee8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bee8:	b5b0      	push	{r4, r5, r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bef2:	230f      	movs	r3, #15
 800bef4:	18fb      	adds	r3, r7, r3
 800bef6:	2200      	movs	r2, #0
 800bef8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	001a      	movs	r2, r3
 800bf00:	2360      	movs	r3, #96	; 0x60
 800bf02:	4013      	ands	r3, r2
 800bf04:	2b40      	cmp	r3, #64	; 0x40
 800bf06:	d004      	beq.n	800bf12 <USBD_StdItfReq+0x2a>
 800bf08:	d839      	bhi.n	800bf7e <USBD_StdItfReq+0x96>
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <USBD_StdItfReq+0x2a>
 800bf0e:	2b20      	cmp	r3, #32
 800bf10:	d135      	bne.n	800bf7e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	23a7      	movs	r3, #167	; 0xa7
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	5cd3      	ldrb	r3, [r2, r3]
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d825      	bhi.n	800bf6c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	889b      	ldrh	r3, [r3, #4]
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d819      	bhi.n	800bf5e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	23ad      	movs	r3, #173	; 0xad
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	58d3      	ldr	r3, [r2, r3]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	250f      	movs	r5, #15
 800bf36:	197c      	adds	r4, r7, r5
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	0010      	movs	r0, r2
 800bf3e:	4798      	blx	r3
 800bf40:	0003      	movs	r3, r0
 800bf42:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	88db      	ldrh	r3, [r3, #6]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d116      	bne.n	800bf7a <USBD_StdItfReq+0x92>
 800bf4c:	197b      	adds	r3, r7, r5
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d112      	bne.n	800bf7a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	0018      	movs	r0, r3
 800bf58:	f000 fe52 	bl	800cc00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf5c:	e00d      	b.n	800bf7a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	0011      	movs	r1, r2
 800bf64:	0018      	movs	r0, r3
 800bf66:	f000 fd63 	bl	800ca30 <USBD_CtlError>
          break;
 800bf6a:	e006      	b.n	800bf7a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800bf6c:	683a      	ldr	r2, [r7, #0]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	0011      	movs	r1, r2
 800bf72:	0018      	movs	r0, r3
 800bf74:	f000 fd5c 	bl	800ca30 <USBD_CtlError>
          break;
 800bf78:	e000      	b.n	800bf7c <USBD_StdItfReq+0x94>
          break;
 800bf7a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800bf7c:	e006      	b.n	800bf8c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	0011      	movs	r1, r2
 800bf84:	0018      	movs	r0, r3
 800bf86:	f000 fd53 	bl	800ca30 <USBD_CtlError>
      break;
 800bf8a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	0018      	movs	r0, r3
 800bf90:	46bd      	mov	sp, r7
 800bf92:	b004      	add	sp, #16
 800bf94:	bdb0      	pop	{r4, r5, r7, pc}

0800bf96 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bf96:	b5b0      	push	{r4, r5, r7, lr}
 800bf98:	b084      	sub	sp, #16
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfa0:	230f      	movs	r3, #15
 800bfa2:	18fb      	adds	r3, r7, r3
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	889a      	ldrh	r2, [r3, #4]
 800bfac:	230e      	movs	r3, #14
 800bfae:	18fb      	adds	r3, r7, r3
 800bfb0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	001a      	movs	r2, r3
 800bfb8:	2360      	movs	r3, #96	; 0x60
 800bfba:	4013      	ands	r3, r2
 800bfbc:	2b40      	cmp	r3, #64	; 0x40
 800bfbe:	d006      	beq.n	800bfce <USBD_StdEPReq+0x38>
 800bfc0:	d900      	bls.n	800bfc4 <USBD_StdEPReq+0x2e>
 800bfc2:	e190      	b.n	800c2e6 <USBD_StdEPReq+0x350>
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00c      	beq.n	800bfe2 <USBD_StdEPReq+0x4c>
 800bfc8:	2b20      	cmp	r3, #32
 800bfca:	d000      	beq.n	800bfce <USBD_StdEPReq+0x38>
 800bfcc:	e18b      	b.n	800c2e6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	23ad      	movs	r3, #173	; 0xad
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	58d3      	ldr	r3, [r2, r3]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	0010      	movs	r0, r2
 800bfde:	4798      	blx	r3
      break;
 800bfe0:	e188      	b.n	800c2f4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	001a      	movs	r2, r3
 800bfe8:	2360      	movs	r3, #96	; 0x60
 800bfea:	4013      	ands	r3, r2
 800bfec:	2b20      	cmp	r3, #32
 800bfee:	d10f      	bne.n	800c010 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	23ad      	movs	r3, #173	; 0xad
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	58d3      	ldr	r3, [r2, r3]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	250f      	movs	r5, #15
 800bffc:	197c      	adds	r4, r7, r5
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	0010      	movs	r0, r2
 800c004:	4798      	blx	r3
 800c006:	0003      	movs	r3, r0
 800c008:	7023      	strb	r3, [r4, #0]

        return ret;
 800c00a:	197b      	adds	r3, r7, r5
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	e174      	b.n	800c2fa <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	785b      	ldrb	r3, [r3, #1]
 800c014:	2b03      	cmp	r3, #3
 800c016:	d007      	beq.n	800c028 <USBD_StdEPReq+0x92>
 800c018:	dd00      	ble.n	800c01c <USBD_StdEPReq+0x86>
 800c01a:	e15c      	b.n	800c2d6 <USBD_StdEPReq+0x340>
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d100      	bne.n	800c022 <USBD_StdEPReq+0x8c>
 800c020:	e092      	b.n	800c148 <USBD_StdEPReq+0x1b2>
 800c022:	2b01      	cmp	r3, #1
 800c024:	d04b      	beq.n	800c0be <USBD_StdEPReq+0x128>
 800c026:	e156      	b.n	800c2d6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	23a7      	movs	r3, #167	; 0xa7
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	5cd3      	ldrb	r3, [r2, r3]
 800c030:	2b02      	cmp	r3, #2
 800c032:	d002      	beq.n	800c03a <USBD_StdEPReq+0xa4>
 800c034:	2b03      	cmp	r3, #3
 800c036:	d01d      	beq.n	800c074 <USBD_StdEPReq+0xde>
 800c038:	e039      	b.n	800c0ae <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c03a:	220e      	movs	r2, #14
 800c03c:	18bb      	adds	r3, r7, r2
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d010      	beq.n	800c066 <USBD_StdEPReq+0xd0>
 800c044:	18bb      	adds	r3, r7, r2
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	2b80      	cmp	r3, #128	; 0x80
 800c04a:	d00c      	beq.n	800c066 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c04c:	18bb      	adds	r3, r7, r2
 800c04e:	781a      	ldrb	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	0011      	movs	r1, r2
 800c054:	0018      	movs	r0, r3
 800c056:	f001 f9d8 	bl	800d40a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2180      	movs	r1, #128	; 0x80
 800c05e:	0018      	movs	r0, r3
 800c060:	f001 f9d3 	bl	800d40a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c064:	e02a      	b.n	800c0bc <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	0011      	movs	r1, r2
 800c06c:	0018      	movs	r0, r3
 800c06e:	f000 fcdf 	bl	800ca30 <USBD_CtlError>
              break;
 800c072:	e023      	b.n	800c0bc <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	885b      	ldrh	r3, [r3, #2]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d113      	bne.n	800c0a4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800c07c:	220e      	movs	r2, #14
 800c07e:	18bb      	adds	r3, r7, r2
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00e      	beq.n	800c0a4 <USBD_StdEPReq+0x10e>
 800c086:	18bb      	adds	r3, r7, r2
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	2b80      	cmp	r3, #128	; 0x80
 800c08c:	d00a      	beq.n	800c0a4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	88db      	ldrh	r3, [r3, #6]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c096:	18bb      	adds	r3, r7, r2
 800c098:	781a      	ldrb	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	0011      	movs	r1, r2
 800c09e:	0018      	movs	r0, r3
 800c0a0:	f001 f9b3 	bl	800d40a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	0018      	movs	r0, r3
 800c0a8:	f000 fdaa 	bl	800cc00 <USBD_CtlSendStatus>

              break;
 800c0ac:	e006      	b.n	800c0bc <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	0011      	movs	r1, r2
 800c0b4:	0018      	movs	r0, r3
 800c0b6:	f000 fcbb 	bl	800ca30 <USBD_CtlError>
              break;
 800c0ba:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c0bc:	e112      	b.n	800c2e4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	23a7      	movs	r3, #167	; 0xa7
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	5cd3      	ldrb	r3, [r2, r3]
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d002      	beq.n	800c0d0 <USBD_StdEPReq+0x13a>
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	d01d      	beq.n	800c10a <USBD_StdEPReq+0x174>
 800c0ce:	e032      	b.n	800c136 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0d0:	220e      	movs	r2, #14
 800c0d2:	18bb      	adds	r3, r7, r2
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d010      	beq.n	800c0fc <USBD_StdEPReq+0x166>
 800c0da:	18bb      	adds	r3, r7, r2
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	2b80      	cmp	r3, #128	; 0x80
 800c0e0:	d00c      	beq.n	800c0fc <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c0e2:	18bb      	adds	r3, r7, r2
 800c0e4:	781a      	ldrb	r2, [r3, #0]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	0011      	movs	r1, r2
 800c0ea:	0018      	movs	r0, r3
 800c0ec:	f001 f98d 	bl	800d40a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2180      	movs	r1, #128	; 0x80
 800c0f4:	0018      	movs	r0, r3
 800c0f6:	f001 f988 	bl	800d40a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0fa:	e024      	b.n	800c146 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	0011      	movs	r1, r2
 800c102:	0018      	movs	r0, r3
 800c104:	f000 fc94 	bl	800ca30 <USBD_CtlError>
              break;
 800c108:	e01d      	b.n	800c146 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	885b      	ldrh	r3, [r3, #2]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d118      	bne.n	800c144 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c112:	210e      	movs	r1, #14
 800c114:	187b      	adds	r3, r7, r1
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	227f      	movs	r2, #127	; 0x7f
 800c11a:	4013      	ands	r3, r2
 800c11c:	d006      	beq.n	800c12c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c11e:	187b      	adds	r3, r7, r1
 800c120:	781a      	ldrb	r2, [r3, #0]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	0011      	movs	r1, r2
 800c126:	0018      	movs	r0, r3
 800c128:	f001 f99a 	bl	800d460 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	0018      	movs	r0, r3
 800c130:	f000 fd66 	bl	800cc00 <USBD_CtlSendStatus>
              }
              break;
 800c134:	e006      	b.n	800c144 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800c136:	683a      	ldr	r2, [r7, #0]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	0011      	movs	r1, r2
 800c13c:	0018      	movs	r0, r3
 800c13e:	f000 fc77 	bl	800ca30 <USBD_CtlError>
              break;
 800c142:	e000      	b.n	800c146 <USBD_StdEPReq+0x1b0>
              break;
 800c144:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c146:	e0cd      	b.n	800c2e4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	23a7      	movs	r3, #167	; 0xa7
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	5cd3      	ldrb	r3, [r2, r3]
 800c150:	2b02      	cmp	r3, #2
 800c152:	d002      	beq.n	800c15a <USBD_StdEPReq+0x1c4>
 800c154:	2b03      	cmp	r3, #3
 800c156:	d03c      	beq.n	800c1d2 <USBD_StdEPReq+0x23c>
 800c158:	e0b5      	b.n	800c2c6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c15a:	220e      	movs	r2, #14
 800c15c:	18bb      	adds	r3, r7, r2
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00a      	beq.n	800c17a <USBD_StdEPReq+0x1e4>
 800c164:	18bb      	adds	r3, r7, r2
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	2b80      	cmp	r3, #128	; 0x80
 800c16a:	d006      	beq.n	800c17a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800c16c:	683a      	ldr	r2, [r7, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	0011      	movs	r1, r2
 800c172:	0018      	movs	r0, r3
 800c174:	f000 fc5c 	bl	800ca30 <USBD_CtlError>
                break;
 800c178:	e0ac      	b.n	800c2d4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c17a:	220e      	movs	r2, #14
 800c17c:	18bb      	adds	r3, r7, r2
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	b25b      	sxtb	r3, r3
 800c182:	2b00      	cmp	r3, #0
 800c184:	da0c      	bge.n	800c1a0 <USBD_StdEPReq+0x20a>
 800c186:	18bb      	adds	r3, r7, r2
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	227f      	movs	r2, #127	; 0x7f
 800c18c:	401a      	ands	r2, r3
 800c18e:	0013      	movs	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	189b      	adds	r3, r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	3310      	adds	r3, #16
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	18d3      	adds	r3, r2, r3
 800c19c:	3304      	adds	r3, #4
 800c19e:	e00d      	b.n	800c1bc <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1a0:	230e      	movs	r3, #14
 800c1a2:	18fb      	adds	r3, r7, r3
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	227f      	movs	r2, #127	; 0x7f
 800c1a8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1aa:	0013      	movs	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	189b      	adds	r3, r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	3351      	adds	r3, #81	; 0x51
 800c1b4:	33ff      	adds	r3, #255	; 0xff
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	18d3      	adds	r3, r2, r3
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c1c4:	68b9      	ldr	r1, [r7, #8]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2202      	movs	r2, #2
 800c1ca:	0018      	movs	r0, r3
 800c1cc:	f000 fcae 	bl	800cb2c <USBD_CtlSendData>
              break;
 800c1d0:	e080      	b.n	800c2d4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1d2:	220e      	movs	r2, #14
 800c1d4:	18bb      	adds	r3, r7, r2
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	b25b      	sxtb	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	da14      	bge.n	800c208 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1de:	18bb      	adds	r3, r7, r2
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	220f      	movs	r2, #15
 800c1e4:	401a      	ands	r2, r3
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	0013      	movs	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	189b      	adds	r3, r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	18cb      	adds	r3, r1, r3
 800c1f2:	3318      	adds	r3, #24
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d11e      	bne.n	800c238 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	0011      	movs	r1, r2
 800c200:	0018      	movs	r0, r3
 800c202:	f000 fc15 	bl	800ca30 <USBD_CtlError>
                  break;
 800c206:	e065      	b.n	800c2d4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c208:	230e      	movs	r3, #14
 800c20a:	18fb      	adds	r3, r7, r3
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	220f      	movs	r2, #15
 800c210:	401a      	ands	r2, r3
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	23ac      	movs	r3, #172	; 0xac
 800c216:	0059      	lsls	r1, r3, #1
 800c218:	0013      	movs	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	189b      	adds	r3, r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	18c3      	adds	r3, r0, r3
 800c222:	185b      	adds	r3, r3, r1
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d106      	bne.n	800c238 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	0011      	movs	r1, r2
 800c230:	0018      	movs	r0, r3
 800c232:	f000 fbfd 	bl	800ca30 <USBD_CtlError>
                  break;
 800c236:	e04d      	b.n	800c2d4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c238:	220e      	movs	r2, #14
 800c23a:	18bb      	adds	r3, r7, r2
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	b25b      	sxtb	r3, r3
 800c240:	2b00      	cmp	r3, #0
 800c242:	da0c      	bge.n	800c25e <USBD_StdEPReq+0x2c8>
 800c244:	18bb      	adds	r3, r7, r2
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	227f      	movs	r2, #127	; 0x7f
 800c24a:	401a      	ands	r2, r3
 800c24c:	0013      	movs	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	189b      	adds	r3, r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	3310      	adds	r3, #16
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	18d3      	adds	r3, r2, r3
 800c25a:	3304      	adds	r3, #4
 800c25c:	e00d      	b.n	800c27a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c25e:	230e      	movs	r3, #14
 800c260:	18fb      	adds	r3, r7, r3
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	227f      	movs	r2, #127	; 0x7f
 800c266:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c268:	0013      	movs	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	189b      	adds	r3, r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	3351      	adds	r3, #81	; 0x51
 800c272:	33ff      	adds	r3, #255	; 0xff
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	18d3      	adds	r3, r2, r3
 800c278:	3304      	adds	r3, #4
 800c27a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c27c:	220e      	movs	r2, #14
 800c27e:	18bb      	adds	r3, r7, r2
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d003      	beq.n	800c28e <USBD_StdEPReq+0x2f8>
 800c286:	18bb      	adds	r3, r7, r2
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	2b80      	cmp	r3, #128	; 0x80
 800c28c:	d103      	bne.n	800c296 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	2200      	movs	r2, #0
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	e010      	b.n	800c2b8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c296:	230e      	movs	r3, #14
 800c298:	18fb      	adds	r3, r7, r3
 800c29a:	781a      	ldrb	r2, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	0011      	movs	r1, r2
 800c2a0:	0018      	movs	r0, r3
 800c2a2:	f001 f908 	bl	800d4b6 <USBD_LL_IsStallEP>
 800c2a6:	1e03      	subs	r3, r0, #0
 800c2a8:	d003      	beq.n	800c2b2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	601a      	str	r2, [r3, #0]
 800c2b0:	e002      	b.n	800c2b8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c2b8:	68b9      	ldr	r1, [r7, #8]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2202      	movs	r2, #2
 800c2be:	0018      	movs	r0, r3
 800c2c0:	f000 fc34 	bl	800cb2c <USBD_CtlSendData>
              break;
 800c2c4:	e006      	b.n	800c2d4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800c2c6:	683a      	ldr	r2, [r7, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	0011      	movs	r1, r2
 800c2cc:	0018      	movs	r0, r3
 800c2ce:	f000 fbaf 	bl	800ca30 <USBD_CtlError>
              break;
 800c2d2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c2d4:	e006      	b.n	800c2e4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	0011      	movs	r1, r2
 800c2dc:	0018      	movs	r0, r3
 800c2de:	f000 fba7 	bl	800ca30 <USBD_CtlError>
          break;
 800c2e2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800c2e4:	e006      	b.n	800c2f4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	0011      	movs	r1, r2
 800c2ec:	0018      	movs	r0, r3
 800c2ee:	f000 fb9f 	bl	800ca30 <USBD_CtlError>
      break;
 800c2f2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800c2f4:	230f      	movs	r3, #15
 800c2f6:	18fb      	adds	r3, r7, r3
 800c2f8:	781b      	ldrb	r3, [r3, #0]
}
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	b004      	add	sp, #16
 800c300:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c304 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c30e:	2308      	movs	r3, #8
 800c310:	18fb      	adds	r3, r7, r3
 800c312:	2200      	movs	r2, #0
 800c314:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800c316:	2300      	movs	r3, #0
 800c318:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c31a:	230b      	movs	r3, #11
 800c31c:	18fb      	adds	r3, r7, r3
 800c31e:	2200      	movs	r2, #0
 800c320:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	885b      	ldrh	r3, [r3, #2]
 800c326:	0a1b      	lsrs	r3, r3, #8
 800c328:	b29b      	uxth	r3, r3
 800c32a:	2b07      	cmp	r3, #7
 800c32c:	d900      	bls.n	800c330 <USBD_GetDescriptor+0x2c>
 800c32e:	e159      	b.n	800c5e4 <USBD_GetDescriptor+0x2e0>
 800c330:	009a      	lsls	r2, r3, #2
 800c332:	4bcb      	ldr	r3, [pc, #812]	; (800c660 <USBD_GetDescriptor+0x35c>)
 800c334:	18d3      	adds	r3, r2, r3
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	23ac      	movs	r3, #172	; 0xac
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	58d3      	ldr	r3, [r2, r3]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	7c12      	ldrb	r2, [r2, #16]
 800c348:	2108      	movs	r1, #8
 800c34a:	1879      	adds	r1, r7, r1
 800c34c:	0010      	movs	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	0003      	movs	r3, r0
 800c352:	60fb      	str	r3, [r7, #12]
      break;
 800c354:	e153      	b.n	800c5fe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	7c1b      	ldrb	r3, [r3, #16]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10f      	bne.n	800c37e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	23ad      	movs	r3, #173	; 0xad
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	58d3      	ldr	r3, [r2, r3]
 800c366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c368:	2208      	movs	r2, #8
 800c36a:	18ba      	adds	r2, r7, r2
 800c36c:	0010      	movs	r0, r2
 800c36e:	4798      	blx	r3
 800c370:	0003      	movs	r3, r0
 800c372:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	3301      	adds	r3, #1
 800c378:	2202      	movs	r2, #2
 800c37a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c37c:	e13f      	b.n	800c5fe <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	23ad      	movs	r3, #173	; 0xad
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	58d3      	ldr	r3, [r2, r3]
 800c386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c388:	2208      	movs	r2, #8
 800c38a:	18ba      	adds	r2, r7, r2
 800c38c:	0010      	movs	r0, r2
 800c38e:	4798      	blx	r3
 800c390:	0003      	movs	r3, r0
 800c392:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	3301      	adds	r3, #1
 800c398:	2202      	movs	r2, #2
 800c39a:	701a      	strb	r2, [r3, #0]
      break;
 800c39c:	e12f      	b.n	800c5fe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	885b      	ldrh	r3, [r3, #2]
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b05      	cmp	r3, #5
 800c3a6:	d900      	bls.n	800c3aa <USBD_GetDescriptor+0xa6>
 800c3a8:	e0d0      	b.n	800c54c <USBD_GetDescriptor+0x248>
 800c3aa:	009a      	lsls	r2, r3, #2
 800c3ac:	4bad      	ldr	r3, [pc, #692]	; (800c664 <USBD_GetDescriptor+0x360>)
 800c3ae:	18d3      	adds	r3, r2, r3
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	23ac      	movs	r3, #172	; 0xac
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	58d3      	ldr	r3, [r2, r3]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00d      	beq.n	800c3de <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	23ac      	movs	r3, #172	; 0xac
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	58d3      	ldr	r3, [r2, r3]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	7c12      	ldrb	r2, [r2, #16]
 800c3d0:	2108      	movs	r1, #8
 800c3d2:	1879      	adds	r1, r7, r1
 800c3d4:	0010      	movs	r0, r2
 800c3d6:	4798      	blx	r3
 800c3d8:	0003      	movs	r3, r0
 800c3da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3dc:	e0c3      	b.n	800c566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c3de:	683a      	ldr	r2, [r7, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	0011      	movs	r1, r2
 800c3e4:	0018      	movs	r0, r3
 800c3e6:	f000 fb23 	bl	800ca30 <USBD_CtlError>
            err++;
 800c3ea:	210b      	movs	r1, #11
 800c3ec:	187b      	adds	r3, r7, r1
 800c3ee:	781a      	ldrb	r2, [r3, #0]
 800c3f0:	187b      	adds	r3, r7, r1
 800c3f2:	3201      	adds	r2, #1
 800c3f4:	701a      	strb	r2, [r3, #0]
          break;
 800c3f6:	e0b6      	b.n	800c566 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	23ac      	movs	r3, #172	; 0xac
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	58d3      	ldr	r3, [r2, r3]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00d      	beq.n	800c422 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	23ac      	movs	r3, #172	; 0xac
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	58d3      	ldr	r3, [r2, r3]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	7c12      	ldrb	r2, [r2, #16]
 800c414:	2108      	movs	r1, #8
 800c416:	1879      	adds	r1, r7, r1
 800c418:	0010      	movs	r0, r2
 800c41a:	4798      	blx	r3
 800c41c:	0003      	movs	r3, r0
 800c41e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c420:	e0a1      	b.n	800c566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	0011      	movs	r1, r2
 800c428:	0018      	movs	r0, r3
 800c42a:	f000 fb01 	bl	800ca30 <USBD_CtlError>
            err++;
 800c42e:	210b      	movs	r1, #11
 800c430:	187b      	adds	r3, r7, r1
 800c432:	781a      	ldrb	r2, [r3, #0]
 800c434:	187b      	adds	r3, r7, r1
 800c436:	3201      	adds	r2, #1
 800c438:	701a      	strb	r2, [r3, #0]
          break;
 800c43a:	e094      	b.n	800c566 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	23ac      	movs	r3, #172	; 0xac
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	58d3      	ldr	r3, [r2, r3]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00d      	beq.n	800c466 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	23ac      	movs	r3, #172	; 0xac
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	58d3      	ldr	r3, [r2, r3]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	7c12      	ldrb	r2, [r2, #16]
 800c458:	2108      	movs	r1, #8
 800c45a:	1879      	adds	r1, r7, r1
 800c45c:	0010      	movs	r0, r2
 800c45e:	4798      	blx	r3
 800c460:	0003      	movs	r3, r0
 800c462:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c464:	e07f      	b.n	800c566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	0011      	movs	r1, r2
 800c46c:	0018      	movs	r0, r3
 800c46e:	f000 fadf 	bl	800ca30 <USBD_CtlError>
            err++;
 800c472:	210b      	movs	r1, #11
 800c474:	187b      	adds	r3, r7, r1
 800c476:	781a      	ldrb	r2, [r3, #0]
 800c478:	187b      	adds	r3, r7, r1
 800c47a:	3201      	adds	r2, #1
 800c47c:	701a      	strb	r2, [r3, #0]
          break;
 800c47e:	e072      	b.n	800c566 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	23ac      	movs	r3, #172	; 0xac
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	58d3      	ldr	r3, [r2, r3]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00d      	beq.n	800c4aa <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	23ac      	movs	r3, #172	; 0xac
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	58d3      	ldr	r3, [r2, r3]
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	7c12      	ldrb	r2, [r2, #16]
 800c49c:	2108      	movs	r1, #8
 800c49e:	1879      	adds	r1, r7, r1
 800c4a0:	0010      	movs	r0, r2
 800c4a2:	4798      	blx	r3
 800c4a4:	0003      	movs	r3, r0
 800c4a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4a8:	e05d      	b.n	800c566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	0011      	movs	r1, r2
 800c4b0:	0018      	movs	r0, r3
 800c4b2:	f000 fabd 	bl	800ca30 <USBD_CtlError>
            err++;
 800c4b6:	210b      	movs	r1, #11
 800c4b8:	187b      	adds	r3, r7, r1
 800c4ba:	781a      	ldrb	r2, [r3, #0]
 800c4bc:	187b      	adds	r3, r7, r1
 800c4be:	3201      	adds	r2, #1
 800c4c0:	701a      	strb	r2, [r3, #0]
          break;
 800c4c2:	e050      	b.n	800c566 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	23ac      	movs	r3, #172	; 0xac
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	58d3      	ldr	r3, [r2, r3]
 800c4cc:	695b      	ldr	r3, [r3, #20]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00d      	beq.n	800c4ee <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	23ac      	movs	r3, #172	; 0xac
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	58d3      	ldr	r3, [r2, r3]
 800c4da:	695b      	ldr	r3, [r3, #20]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	7c12      	ldrb	r2, [r2, #16]
 800c4e0:	2108      	movs	r1, #8
 800c4e2:	1879      	adds	r1, r7, r1
 800c4e4:	0010      	movs	r0, r2
 800c4e6:	4798      	blx	r3
 800c4e8:	0003      	movs	r3, r0
 800c4ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ec:	e03b      	b.n	800c566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	0011      	movs	r1, r2
 800c4f4:	0018      	movs	r0, r3
 800c4f6:	f000 fa9b 	bl	800ca30 <USBD_CtlError>
            err++;
 800c4fa:	210b      	movs	r1, #11
 800c4fc:	187b      	adds	r3, r7, r1
 800c4fe:	781a      	ldrb	r2, [r3, #0]
 800c500:	187b      	adds	r3, r7, r1
 800c502:	3201      	adds	r2, #1
 800c504:	701a      	strb	r2, [r3, #0]
          break;
 800c506:	e02e      	b.n	800c566 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	23ac      	movs	r3, #172	; 0xac
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	58d3      	ldr	r3, [r2, r3]
 800c510:	699b      	ldr	r3, [r3, #24]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00d      	beq.n	800c532 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	23ac      	movs	r3, #172	; 0xac
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	58d3      	ldr	r3, [r2, r3]
 800c51e:	699b      	ldr	r3, [r3, #24]
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	7c12      	ldrb	r2, [r2, #16]
 800c524:	2108      	movs	r1, #8
 800c526:	1879      	adds	r1, r7, r1
 800c528:	0010      	movs	r0, r2
 800c52a:	4798      	blx	r3
 800c52c:	0003      	movs	r3, r0
 800c52e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c530:	e019      	b.n	800c566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c532:	683a      	ldr	r2, [r7, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	0011      	movs	r1, r2
 800c538:	0018      	movs	r0, r3
 800c53a:	f000 fa79 	bl	800ca30 <USBD_CtlError>
            err++;
 800c53e:	210b      	movs	r1, #11
 800c540:	187b      	adds	r3, r7, r1
 800c542:	781a      	ldrb	r2, [r3, #0]
 800c544:	187b      	adds	r3, r7, r1
 800c546:	3201      	adds	r2, #1
 800c548:	701a      	strb	r2, [r3, #0]
          break;
 800c54a:	e00c      	b.n	800c566 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	0011      	movs	r1, r2
 800c552:	0018      	movs	r0, r3
 800c554:	f000 fa6c 	bl	800ca30 <USBD_CtlError>
          err++;
 800c558:	210b      	movs	r1, #11
 800c55a:	187b      	adds	r3, r7, r1
 800c55c:	781a      	ldrb	r2, [r3, #0]
 800c55e:	187b      	adds	r3, r7, r1
 800c560:	3201      	adds	r2, #1
 800c562:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800c564:	e04b      	b.n	800c5fe <USBD_GetDescriptor+0x2fa>
 800c566:	e04a      	b.n	800c5fe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	7c1b      	ldrb	r3, [r3, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10b      	bne.n	800c588 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	23ad      	movs	r3, #173	; 0xad
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	58d3      	ldr	r3, [r2, r3]
 800c578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c57a:	2208      	movs	r2, #8
 800c57c:	18ba      	adds	r2, r7, r2
 800c57e:	0010      	movs	r0, r2
 800c580:	4798      	blx	r3
 800c582:	0003      	movs	r3, r0
 800c584:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c586:	e03a      	b.n	800c5fe <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	0011      	movs	r1, r2
 800c58e:	0018      	movs	r0, r3
 800c590:	f000 fa4e 	bl	800ca30 <USBD_CtlError>
        err++;
 800c594:	210b      	movs	r1, #11
 800c596:	187b      	adds	r3, r7, r1
 800c598:	781a      	ldrb	r2, [r3, #0]
 800c59a:	187b      	adds	r3, r7, r1
 800c59c:	3201      	adds	r2, #1
 800c59e:	701a      	strb	r2, [r3, #0]
      break;
 800c5a0:	e02d      	b.n	800c5fe <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	7c1b      	ldrb	r3, [r3, #16]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d10f      	bne.n	800c5ca <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	23ad      	movs	r3, #173	; 0xad
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	58d3      	ldr	r3, [r2, r3]
 800c5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b4:	2208      	movs	r2, #8
 800c5b6:	18ba      	adds	r2, r7, r2
 800c5b8:	0010      	movs	r0, r2
 800c5ba:	4798      	blx	r3
 800c5bc:	0003      	movs	r3, r0
 800c5be:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	2207      	movs	r2, #7
 800c5c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5c8:	e019      	b.n	800c5fe <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	0011      	movs	r1, r2
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	f000 fa2d 	bl	800ca30 <USBD_CtlError>
        err++;
 800c5d6:	210b      	movs	r1, #11
 800c5d8:	187b      	adds	r3, r7, r1
 800c5da:	781a      	ldrb	r2, [r3, #0]
 800c5dc:	187b      	adds	r3, r7, r1
 800c5de:	3201      	adds	r2, #1
 800c5e0:	701a      	strb	r2, [r3, #0]
      break;
 800c5e2:	e00c      	b.n	800c5fe <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800c5e4:	683a      	ldr	r2, [r7, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	0011      	movs	r1, r2
 800c5ea:	0018      	movs	r0, r3
 800c5ec:	f000 fa20 	bl	800ca30 <USBD_CtlError>
      err++;
 800c5f0:	210b      	movs	r1, #11
 800c5f2:	187b      	adds	r3, r7, r1
 800c5f4:	781a      	ldrb	r2, [r3, #0]
 800c5f6:	187b      	adds	r3, r7, r1
 800c5f8:	3201      	adds	r2, #1
 800c5fa:	701a      	strb	r2, [r3, #0]
      break;
 800c5fc:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800c5fe:	230b      	movs	r3, #11
 800c600:	18fb      	adds	r3, r7, r3
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d127      	bne.n	800c658 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c608:	2108      	movs	r1, #8
 800c60a:	187b      	adds	r3, r7, r1
 800c60c:	881b      	ldrh	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d019      	beq.n	800c646 <USBD_GetDescriptor+0x342>
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	88db      	ldrh	r3, [r3, #6]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d015      	beq.n	800c646 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	88da      	ldrh	r2, [r3, #6]
 800c61e:	187b      	adds	r3, r7, r1
 800c620:	881b      	ldrh	r3, [r3, #0]
 800c622:	1c18      	adds	r0, r3, #0
 800c624:	1c11      	adds	r1, r2, #0
 800c626:	b28a      	uxth	r2, r1
 800c628:	b283      	uxth	r3, r0
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d900      	bls.n	800c630 <USBD_GetDescriptor+0x32c>
 800c62e:	1c01      	adds	r1, r0, #0
 800c630:	b28a      	uxth	r2, r1
 800c632:	2108      	movs	r1, #8
 800c634:	187b      	adds	r3, r7, r1
 800c636:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c638:	187b      	adds	r3, r7, r1
 800c63a:	881a      	ldrh	r2, [r3, #0]
 800c63c:	68f9      	ldr	r1, [r7, #12]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	0018      	movs	r0, r3
 800c642:	f000 fa73 	bl	800cb2c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	88db      	ldrh	r3, [r3, #6]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d105      	bne.n	800c65a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	0018      	movs	r0, r3
 800c652:	f000 fad5 	bl	800cc00 <USBD_CtlSendStatus>
 800c656:	e000      	b.n	800c65a <USBD_GetDescriptor+0x356>
    return;
 800c658:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c65a:	46bd      	mov	sp, r7
 800c65c:	b004      	add	sp, #16
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	0800e2f4 	.word	0x0800e2f4
 800c664:	0800e314 	.word	0x0800e314

0800c668 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c668:	b590      	push	{r4, r7, lr}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	889b      	ldrh	r3, [r3, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d13d      	bne.n	800c6f6 <USBD_SetAddress+0x8e>
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	88db      	ldrh	r3, [r3, #6]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d139      	bne.n	800c6f6 <USBD_SetAddress+0x8e>
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	885b      	ldrh	r3, [r3, #2]
 800c686:	2b7f      	cmp	r3, #127	; 0x7f
 800c688:	d835      	bhi.n	800c6f6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	885b      	ldrh	r3, [r3, #2]
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	230f      	movs	r3, #15
 800c692:	18fb      	adds	r3, r7, r3
 800c694:	217f      	movs	r1, #127	; 0x7f
 800c696:	400a      	ands	r2, r1
 800c698:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	23a7      	movs	r3, #167	; 0xa7
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	5cd3      	ldrb	r3, [r2, r3]
 800c6a2:	2b03      	cmp	r3, #3
 800c6a4:	d106      	bne.n	800c6b4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	0011      	movs	r1, r2
 800c6ac:	0018      	movs	r0, r3
 800c6ae:	f000 f9bf 	bl	800ca30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6b2:	e027      	b.n	800c704 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	240f      	movs	r4, #15
 800c6b8:	193a      	adds	r2, r7, r4
 800c6ba:	4914      	ldr	r1, [pc, #80]	; (800c70c <USBD_SetAddress+0xa4>)
 800c6bc:	7812      	ldrb	r2, [r2, #0]
 800c6be:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c6c0:	193b      	adds	r3, r7, r4
 800c6c2:	781a      	ldrb	r2, [r3, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	0011      	movs	r1, r2
 800c6c8:	0018      	movs	r0, r3
 800c6ca:	f000 ff25 	bl	800d518 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	0018      	movs	r0, r3
 800c6d2:	f000 fa95 	bl	800cc00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6d6:	193b      	adds	r3, r7, r4
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d005      	beq.n	800c6ea <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	23a7      	movs	r3, #167	; 0xa7
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	2102      	movs	r1, #2
 800c6e6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6e8:	e00c      	b.n	800c704 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	23a7      	movs	r3, #167	; 0xa7
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6f4:	e006      	b.n	800c704 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	0011      	movs	r1, r2
 800c6fc:	0018      	movs	r0, r3
 800c6fe:	f000 f997 	bl	800ca30 <USBD_CtlError>
  }
}
 800c702:	46c0      	nop			; (mov r8, r8)
 800c704:	46c0      	nop			; (mov r8, r8)
 800c706:	46bd      	mov	sp, r7
 800c708:	b005      	add	sp, #20
 800c70a:	bd90      	pop	{r4, r7, pc}
 800c70c:	0000029e 	.word	0x0000029e

0800c710 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	885b      	ldrh	r3, [r3, #2]
 800c71e:	b2da      	uxtb	r2, r3
 800c720:	4b4c      	ldr	r3, [pc, #304]	; (800c854 <USBD_SetConfig+0x144>)
 800c722:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c724:	4b4b      	ldr	r3, [pc, #300]	; (800c854 <USBD_SetConfig+0x144>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d906      	bls.n	800c73a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800c72c:	683a      	ldr	r2, [r7, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	0011      	movs	r1, r2
 800c732:	0018      	movs	r0, r3
 800c734:	f000 f97c 	bl	800ca30 <USBD_CtlError>
 800c738:	e088      	b.n	800c84c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	23a7      	movs	r3, #167	; 0xa7
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	5cd3      	ldrb	r3, [r2, r3]
 800c742:	2b02      	cmp	r3, #2
 800c744:	d002      	beq.n	800c74c <USBD_SetConfig+0x3c>
 800c746:	2b03      	cmp	r3, #3
 800c748:	d029      	beq.n	800c79e <USBD_SetConfig+0x8e>
 800c74a:	e071      	b.n	800c830 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c74c:	4b41      	ldr	r3, [pc, #260]	; (800c854 <USBD_SetConfig+0x144>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d01f      	beq.n	800c794 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800c754:	4b3f      	ldr	r3, [pc, #252]	; (800c854 <USBD_SetConfig+0x144>)
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	001a      	movs	r2, r3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	23a7      	movs	r3, #167	; 0xa7
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	2103      	movs	r1, #3
 800c766:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c768:	4b3a      	ldr	r3, [pc, #232]	; (800c854 <USBD_SetConfig+0x144>)
 800c76a:	781a      	ldrb	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	0011      	movs	r1, r2
 800c770:	0018      	movs	r0, r3
 800c772:	f7ff f8c6 	bl	800b902 <USBD_SetClassConfig>
 800c776:	0003      	movs	r3, r0
 800c778:	2b02      	cmp	r3, #2
 800c77a:	d106      	bne.n	800c78a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800c77c:	683a      	ldr	r2, [r7, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	0011      	movs	r1, r2
 800c782:	0018      	movs	r0, r3
 800c784:	f000 f954 	bl	800ca30 <USBD_CtlError>
            return;
 800c788:	e060      	b.n	800c84c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	0018      	movs	r0, r3
 800c78e:	f000 fa37 	bl	800cc00 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c792:	e05b      	b.n	800c84c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	0018      	movs	r0, r3
 800c798:	f000 fa32 	bl	800cc00 <USBD_CtlSendStatus>
        break;
 800c79c:	e056      	b.n	800c84c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c79e:	4b2d      	ldr	r3, [pc, #180]	; (800c854 <USBD_SetConfig+0x144>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d115      	bne.n	800c7d2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	23a7      	movs	r3, #167	; 0xa7
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	2102      	movs	r1, #2
 800c7ae:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800c7b0:	4b28      	ldr	r3, [pc, #160]	; (800c854 <USBD_SetConfig+0x144>)
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	001a      	movs	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c7ba:	4b26      	ldr	r3, [pc, #152]	; (800c854 <USBD_SetConfig+0x144>)
 800c7bc:	781a      	ldrb	r2, [r3, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	0011      	movs	r1, r2
 800c7c2:	0018      	movs	r0, r3
 800c7c4:	f7ff f8c4 	bl	800b950 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	0018      	movs	r0, r3
 800c7cc:	f000 fa18 	bl	800cc00 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c7d0:	e03c      	b.n	800c84c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c7d2:	4b20      	ldr	r3, [pc, #128]	; (800c854 <USBD_SetConfig+0x144>)
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	001a      	movs	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d022      	beq.n	800c826 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	0011      	movs	r1, r2
 800c7ea:	0018      	movs	r0, r3
 800c7ec:	f7ff f8b0 	bl	800b950 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c7f0:	4b18      	ldr	r3, [pc, #96]	; (800c854 <USBD_SetConfig+0x144>)
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	001a      	movs	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c7fa:	4b16      	ldr	r3, [pc, #88]	; (800c854 <USBD_SetConfig+0x144>)
 800c7fc:	781a      	ldrb	r2, [r3, #0]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	0011      	movs	r1, r2
 800c802:	0018      	movs	r0, r3
 800c804:	f7ff f87d 	bl	800b902 <USBD_SetClassConfig>
 800c808:	0003      	movs	r3, r0
 800c80a:	2b02      	cmp	r3, #2
 800c80c:	d106      	bne.n	800c81c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c80e:	683a      	ldr	r2, [r7, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	0011      	movs	r1, r2
 800c814:	0018      	movs	r0, r3
 800c816:	f000 f90b 	bl	800ca30 <USBD_CtlError>
            return;
 800c81a:	e017      	b.n	800c84c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	0018      	movs	r0, r3
 800c820:	f000 f9ee 	bl	800cc00 <USBD_CtlSendStatus>
        break;
 800c824:	e012      	b.n	800c84c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	0018      	movs	r0, r3
 800c82a:	f000 f9e9 	bl	800cc00 <USBD_CtlSendStatus>
        break;
 800c82e:	e00d      	b.n	800c84c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c830:	683a      	ldr	r2, [r7, #0]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	0011      	movs	r1, r2
 800c836:	0018      	movs	r0, r3
 800c838:	f000 f8fa 	bl	800ca30 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c83c:	4b05      	ldr	r3, [pc, #20]	; (800c854 <USBD_SetConfig+0x144>)
 800c83e:	781a      	ldrb	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	0011      	movs	r1, r2
 800c844:	0018      	movs	r0, r3
 800c846:	f7ff f883 	bl	800b950 <USBD_ClrClassConfig>
        break;
 800c84a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c84c:	46bd      	mov	sp, r7
 800c84e:	b002      	add	sp, #8
 800c850:	bd80      	pop	{r7, pc}
 800c852:	46c0      	nop			; (mov r8, r8)
 800c854:	2000041c 	.word	0x2000041c

0800c858 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	88db      	ldrh	r3, [r3, #6]
 800c866:	2b01      	cmp	r3, #1
 800c868:	d006      	beq.n	800c878 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	0011      	movs	r1, r2
 800c870:	0018      	movs	r0, r3
 800c872:	f000 f8dd 	bl	800ca30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c876:	e026      	b.n	800c8c6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	23a7      	movs	r3, #167	; 0xa7
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	5cd3      	ldrb	r3, [r2, r3]
 800c880:	2b02      	cmp	r3, #2
 800c882:	dc02      	bgt.n	800c88a <USBD_GetConfig+0x32>
 800c884:	2b00      	cmp	r3, #0
 800c886:	dc03      	bgt.n	800c890 <USBD_GetConfig+0x38>
 800c888:	e016      	b.n	800c8b8 <USBD_GetConfig+0x60>
 800c88a:	2b03      	cmp	r3, #3
 800c88c:	d00c      	beq.n	800c8a8 <USBD_GetConfig+0x50>
 800c88e:	e013      	b.n	800c8b8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3308      	adds	r3, #8
 800c89a:	0019      	movs	r1, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	0018      	movs	r0, r3
 800c8a2:	f000 f943 	bl	800cb2c <USBD_CtlSendData>
        break;
 800c8a6:	e00e      	b.n	800c8c6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	1d19      	adds	r1, r3, #4
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	0018      	movs	r0, r3
 800c8b2:	f000 f93b 	bl	800cb2c <USBD_CtlSendData>
        break;
 800c8b6:	e006      	b.n	800c8c6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800c8b8:	683a      	ldr	r2, [r7, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	0011      	movs	r1, r2
 800c8be:	0018      	movs	r0, r3
 800c8c0:	f000 f8b6 	bl	800ca30 <USBD_CtlError>
        break;
 800c8c4:	46c0      	nop			; (mov r8, r8)
}
 800c8c6:	46c0      	nop			; (mov r8, r8)
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	b002      	add	sp, #8
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b082      	sub	sp, #8
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	23a7      	movs	r3, #167	; 0xa7
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	5cd3      	ldrb	r3, [r2, r3]
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	d822      	bhi.n	800c92c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	88db      	ldrh	r3, [r3, #6]
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	d006      	beq.n	800c8fc <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800c8ee:	683a      	ldr	r2, [r7, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	0011      	movs	r1, r2
 800c8f4:	0018      	movs	r0, r3
 800c8f6:	f000 f89b 	bl	800ca30 <USBD_CtlError>
        break;
 800c8fa:	e01e      	b.n	800c93a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	23a9      	movs	r3, #169	; 0xa9
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	58d3      	ldr	r3, [r2, r3]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d005      	beq.n	800c91a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	2202      	movs	r2, #2
 800c914:	431a      	orrs	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	330c      	adds	r3, #12
 800c91e:	0019      	movs	r1, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2202      	movs	r2, #2
 800c924:	0018      	movs	r0, r3
 800c926:	f000 f901 	bl	800cb2c <USBD_CtlSendData>
      break;
 800c92a:	e006      	b.n	800c93a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800c92c:	683a      	ldr	r2, [r7, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	0011      	movs	r1, r2
 800c932:	0018      	movs	r0, r3
 800c934:	f000 f87c 	bl	800ca30 <USBD_CtlError>
      break;
 800c938:	46c0      	nop			; (mov r8, r8)
  }
}
 800c93a:	46c0      	nop			; (mov r8, r8)
 800c93c:	46bd      	mov	sp, r7
 800c93e:	b002      	add	sp, #8
 800c940:	bd80      	pop	{r7, pc}

0800c942 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b082      	sub	sp, #8
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	885b      	ldrh	r3, [r3, #2]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d108      	bne.n	800c966 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	23a9      	movs	r3, #169	; 0xa9
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	2101      	movs	r1, #1
 800c95c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	0018      	movs	r0, r3
 800c962:	f000 f94d 	bl	800cc00 <USBD_CtlSendStatus>
  }
}
 800c966:	46c0      	nop			; (mov r8, r8)
 800c968:	46bd      	mov	sp, r7
 800c96a:	b002      	add	sp, #8
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b082      	sub	sp, #8
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	23a7      	movs	r3, #167	; 0xa7
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	5cd3      	ldrb	r3, [r2, r3]
 800c980:	3b01      	subs	r3, #1
 800c982:	2b02      	cmp	r3, #2
 800c984:	d80d      	bhi.n	800c9a2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	885b      	ldrh	r3, [r3, #2]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d110      	bne.n	800c9b0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	23a9      	movs	r3, #169	; 0xa9
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	2100      	movs	r1, #0
 800c996:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	0018      	movs	r0, r3
 800c99c:	f000 f930 	bl	800cc00 <USBD_CtlSendStatus>
      }
      break;
 800c9a0:	e006      	b.n	800c9b0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	0011      	movs	r1, r2
 800c9a8:	0018      	movs	r0, r3
 800c9aa:	f000 f841 	bl	800ca30 <USBD_CtlError>
      break;
 800c9ae:	e000      	b.n	800c9b2 <USBD_ClrFeature+0x44>
      break;
 800c9b0:	46c0      	nop			; (mov r8, r8)
  }
}
 800c9b2:	46c0      	nop			; (mov r8, r8)
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	b002      	add	sp, #8
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b082      	sub	sp, #8
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	781a      	ldrb	r2, [r3, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	785a      	ldrb	r2, [r3, #1]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	3302      	adds	r3, #2
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	3303      	adds	r3, #3
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	021b      	lsls	r3, r3, #8
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	18d3      	adds	r3, r2, r3
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	3305      	adds	r3, #5
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	021b      	lsls	r3, r3, #8
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	18d3      	adds	r3, r2, r3
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	3306      	adds	r3, #6
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	3307      	adds	r3, #7
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	021b      	lsls	r3, r3, #8
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	18d3      	adds	r3, r2, r3
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	80da      	strh	r2, [r3, #6]

}
 800ca28:	46c0      	nop			; (mov r8, r8)
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	b002      	add	sp, #8
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2180      	movs	r1, #128	; 0x80
 800ca3e:	0018      	movs	r0, r3
 800ca40:	f000 fce3 	bl	800d40a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2100      	movs	r1, #0
 800ca48:	0018      	movs	r0, r3
 800ca4a:	f000 fcde 	bl	800d40a <USBD_LL_StallEP>
}
 800ca4e:	46c0      	nop			; (mov r8, r8)
 800ca50:	46bd      	mov	sp, r7
 800ca52:	b002      	add	sp, #8
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca56:	b590      	push	{r4, r7, lr}
 800ca58:	b087      	sub	sp, #28
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	60f8      	str	r0, [r7, #12]
 800ca5e:	60b9      	str	r1, [r7, #8]
 800ca60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca62:	2417      	movs	r4, #23
 800ca64:	193b      	adds	r3, r7, r4
 800ca66:	2200      	movs	r2, #0
 800ca68:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d03c      	beq.n	800caea <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	0018      	movs	r0, r3
 800ca74:	f000 f83d 	bl	800caf2 <USBD_GetLen>
 800ca78:	0003      	movs	r3, r0
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	18db      	adds	r3, r3, r3
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ca86:	193b      	adds	r3, r7, r4
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	193a      	adds	r2, r7, r4
 800ca8c:	1c59      	adds	r1, r3, #1
 800ca8e:	7011      	strb	r1, [r2, #0]
 800ca90:	001a      	movs	r2, r3
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	189b      	adds	r3, r3, r2
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	7812      	ldrb	r2, [r2, #0]
 800ca9a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ca9c:	193b      	adds	r3, r7, r4
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	193a      	adds	r2, r7, r4
 800caa2:	1c59      	adds	r1, r3, #1
 800caa4:	7011      	strb	r1, [r2, #0]
 800caa6:	001a      	movs	r2, r3
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	189b      	adds	r3, r3, r2
 800caac:	2203      	movs	r2, #3
 800caae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cab0:	e017      	b.n	800cae2 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	60fa      	str	r2, [r7, #12]
 800cab8:	2417      	movs	r4, #23
 800caba:	193a      	adds	r2, r7, r4
 800cabc:	7812      	ldrb	r2, [r2, #0]
 800cabe:	1939      	adds	r1, r7, r4
 800cac0:	1c50      	adds	r0, r2, #1
 800cac2:	7008      	strb	r0, [r1, #0]
 800cac4:	0011      	movs	r1, r2
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	1852      	adds	r2, r2, r1
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cace:	193b      	adds	r3, r7, r4
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	193a      	adds	r2, r7, r4
 800cad4:	1c59      	adds	r1, r3, #1
 800cad6:	7011      	strb	r1, [r2, #0]
 800cad8:	001a      	movs	r2, r3
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	189b      	adds	r3, r3, r2
 800cade:	2200      	movs	r2, #0
 800cae0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1e3      	bne.n	800cab2 <USBD_GetString+0x5c>
    }
  }
}
 800caea:	46c0      	nop			; (mov r8, r8)
 800caec:	46bd      	mov	sp, r7
 800caee:	b007      	add	sp, #28
 800caf0:	bd90      	pop	{r4, r7, pc}

0800caf2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b084      	sub	sp, #16
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cafa:	230f      	movs	r3, #15
 800cafc:	18fb      	adds	r3, r7, r3
 800cafe:	2200      	movs	r2, #0
 800cb00:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800cb02:	e008      	b.n	800cb16 <USBD_GetLen+0x24>
  {
    len++;
 800cb04:	210f      	movs	r1, #15
 800cb06:	187b      	adds	r3, r7, r1
 800cb08:	781a      	ldrb	r2, [r3, #0]
 800cb0a:	187b      	adds	r3, r7, r1
 800cb0c:	3201      	adds	r2, #1
 800cb0e:	701a      	strb	r2, [r3, #0]
    buf++;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	3301      	adds	r3, #1
 800cb14:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1f2      	bne.n	800cb04 <USBD_GetLen+0x12>
  }

  return len;
 800cb1e:	230f      	movs	r3, #15
 800cb20:	18fb      	adds	r3, r7, r3
 800cb22:	781b      	ldrb	r3, [r3, #0]
}
 800cb24:	0018      	movs	r0, r3
 800cb26:	46bd      	mov	sp, r7
 800cb28:	b004      	add	sp, #16
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	1dbb      	adds	r3, r7, #6
 800cb38:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	23a5      	movs	r3, #165	; 0xa5
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	2102      	movs	r1, #2
 800cb42:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800cb44:	1dbb      	adds	r3, r7, #6
 800cb46:	881a      	ldrh	r2, [r3, #0]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cb4c:	1dbb      	adds	r3, r7, #6
 800cb4e:	881a      	ldrh	r2, [r3, #0]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb54:	1dbb      	adds	r3, r7, #6
 800cb56:	881b      	ldrh	r3, [r3, #0]
 800cb58:	68ba      	ldr	r2, [r7, #8]
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	f000 fd06 	bl	800d56e <USBD_LL_Transmit>

  return USBD_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	0018      	movs	r0, r3
 800cb66:	46bd      	mov	sp, r7
 800cb68:	b004      	add	sp, #16
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	1dbb      	adds	r3, r7, #6
 800cb78:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb7a:	1dbb      	adds	r3, r7, #6
 800cb7c:	881b      	ldrh	r3, [r3, #0]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	2100      	movs	r1, #0
 800cb84:	f000 fcf3 	bl	800d56e <USBD_LL_Transmit>

  return USBD_OK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	0018      	movs	r0, r3
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	b004      	add	sp, #16
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b084      	sub	sp, #16
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	60f8      	str	r0, [r7, #12]
 800cb9a:	60b9      	str	r1, [r7, #8]
 800cb9c:	1dbb      	adds	r3, r7, #6
 800cb9e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	23a5      	movs	r3, #165	; 0xa5
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	2103      	movs	r1, #3
 800cba8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800cbaa:	1dbb      	adds	r3, r7, #6
 800cbac:	8819      	ldrh	r1, [r3, #0]
 800cbae:	68fa      	ldr	r2, [r7, #12]
 800cbb0:	23ae      	movs	r3, #174	; 0xae
 800cbb2:	005b      	lsls	r3, r3, #1
 800cbb4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800cbb6:	1dbb      	adds	r3, r7, #6
 800cbb8:	8819      	ldrh	r1, [r3, #0]
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	23b0      	movs	r3, #176	; 0xb0
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbc2:	1dbb      	adds	r3, r7, #6
 800cbc4:	881b      	ldrh	r3, [r3, #0]
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	2100      	movs	r1, #0
 800cbcc:	f000 fd06 	bl	800d5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbd0:	2300      	movs	r3, #0
}
 800cbd2:	0018      	movs	r0, r3
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	b004      	add	sp, #16
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b084      	sub	sp, #16
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	60f8      	str	r0, [r7, #12]
 800cbe2:	60b9      	str	r1, [r7, #8]
 800cbe4:	1dbb      	adds	r3, r7, #6
 800cbe6:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbe8:	1dbb      	adds	r3, r7, #6
 800cbea:	881b      	ldrh	r3, [r3, #0]
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	f000 fcf3 	bl	800d5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	0018      	movs	r0, r3
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	b004      	add	sp, #16
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	23a5      	movs	r3, #165	; 0xa5
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	2104      	movs	r1, #4
 800cc10:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	2300      	movs	r3, #0
 800cc16:	2200      	movs	r2, #0
 800cc18:	2100      	movs	r1, #0
 800cc1a:	f000 fca8 	bl	800d56e <USBD_LL_Transmit>

  return USBD_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	0018      	movs	r0, r3
 800cc22:	46bd      	mov	sp, r7
 800cc24:	b002      	add	sp, #8
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	23a5      	movs	r3, #165	; 0xa5
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	2105      	movs	r1, #5
 800cc38:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	2200      	movs	r2, #0
 800cc40:	2100      	movs	r1, #0
 800cc42:	f000 fccb 	bl	800d5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	0018      	movs	r0, r3
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	b002      	add	sp, #8
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc54:	4914      	ldr	r1, [pc, #80]	; (800cca8 <MX_USB_DEVICE_Init+0x58>)
 800cc56:	4b15      	ldr	r3, [pc, #84]	; (800ccac <MX_USB_DEVICE_Init+0x5c>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	0018      	movs	r0, r3
 800cc5c:	f7fe fdea 	bl	800b834 <USBD_Init>
 800cc60:	1e03      	subs	r3, r0, #0
 800cc62:	d001      	beq.n	800cc68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc64:	f7f5 fc90 	bl	8002588 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cc68:	4a11      	ldr	r2, [pc, #68]	; (800ccb0 <MX_USB_DEVICE_Init+0x60>)
 800cc6a:	4b10      	ldr	r3, [pc, #64]	; (800ccac <MX_USB_DEVICE_Init+0x5c>)
 800cc6c:	0011      	movs	r1, r2
 800cc6e:	0018      	movs	r0, r3
 800cc70:	f7fe fe11 	bl	800b896 <USBD_RegisterClass>
 800cc74:	1e03      	subs	r3, r0, #0
 800cc76:	d001      	beq.n	800cc7c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800cc78:	f7f5 fc86 	bl	8002588 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cc7c:	4a0d      	ldr	r2, [pc, #52]	; (800ccb4 <MX_USB_DEVICE_Init+0x64>)
 800cc7e:	4b0b      	ldr	r3, [pc, #44]	; (800ccac <MX_USB_DEVICE_Init+0x5c>)
 800cc80:	0011      	movs	r1, r2
 800cc82:	0018      	movs	r0, r3
 800cc84:	f7fe fd26 	bl	800b6d4 <USBD_CDC_RegisterInterface>
 800cc88:	1e03      	subs	r3, r0, #0
 800cc8a:	d001      	beq.n	800cc90 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800cc8c:	f7f5 fc7c 	bl	8002588 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc90:	4b06      	ldr	r3, [pc, #24]	; (800ccac <MX_USB_DEVICE_Init+0x5c>)
 800cc92:	0018      	movs	r0, r3
 800cc94:	f7fe fe1f 	bl	800b8d6 <USBD_Start>
 800cc98:	1e03      	subs	r3, r0, #0
 800cc9a:	d001      	beq.n	800cca0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800cc9c:	f7f5 fc74 	bl	8002588 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cca0:	46c0      	nop			; (mov r8, r8)
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	46c0      	nop			; (mov r8, r8)
 800cca8:	2000012c 	.word	0x2000012c
 800ccac:	20000420 	.word	0x20000420
 800ccb0:	20000018 	.word	0x20000018
 800ccb4:	2000011c 	.word	0x2000011c

0800ccb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ccbc:	4907      	ldr	r1, [pc, #28]	; (800ccdc <CDC_Init_FS+0x24>)
 800ccbe:	4b08      	ldr	r3, [pc, #32]	; (800cce0 <CDC_Init_FS+0x28>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	0018      	movs	r0, r3
 800ccc4:	f7fe fd21 	bl	800b70a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ccc8:	4a06      	ldr	r2, [pc, #24]	; (800cce4 <CDC_Init_FS+0x2c>)
 800ccca:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <CDC_Init_FS+0x28>)
 800cccc:	0011      	movs	r1, r2
 800ccce:	0018      	movs	r0, r3
 800ccd0:	f7fe fd37 	bl	800b742 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ccd4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ccd6:	0018      	movs	r0, r3
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	20000acc 	.word	0x20000acc
 800cce0:	20000420 	.word	0x20000420
 800cce4:	200006e4 	.word	0x200006e4

0800cce8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ccec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ccee:	0018      	movs	r0, r3
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6039      	str	r1, [r7, #0]
 800ccfc:	0011      	movs	r1, r2
 800ccfe:	1dfb      	adds	r3, r7, #7
 800cd00:	1c02      	adds	r2, r0, #0
 800cd02:	701a      	strb	r2, [r3, #0]
 800cd04:	1d3b      	adds	r3, r7, #4
 800cd06:	1c0a      	adds	r2, r1, #0
 800cd08:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cd0a:	1dfb      	adds	r3, r7, #7
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	2b23      	cmp	r3, #35	; 0x23
 800cd10:	d804      	bhi.n	800cd1c <CDC_Control_FS+0x28>
 800cd12:	009a      	lsls	r2, r3, #2
 800cd14:	4b04      	ldr	r3, [pc, #16]	; (800cd28 <CDC_Control_FS+0x34>)
 800cd16:	18d3      	adds	r3, r2, r3
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd1c:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800cd1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd20:	0018      	movs	r0, r3
 800cd22:	46bd      	mov	sp, r7
 800cd24:	b002      	add	sp, #8
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	0800e32c 	.word	0x0800e32c

0800cd2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd2c:	b590      	push	{r4, r7, lr}
 800cd2e:	b085      	sub	sp, #20
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800cd36:	4b18      	ldr	r3, [pc, #96]	; (800cd98 <CDC_Receive_FS+0x6c>)
 800cd38:	7a1a      	ldrb	r2, [r3, #8]
 800cd3a:	2101      	movs	r1, #1
 800cd3c:	430a      	orrs	r2, r1
 800cd3e:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800cd40:	230f      	movs	r3, #15
 800cd42:	18fb      	adds	r3, r7, r3
 800cd44:	2200      	movs	r2, #0
 800cd46:	701a      	strb	r2, [r3, #0]
 800cd48:	e00f      	b.n	800cd6a <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800cd4a:	4b14      	ldr	r3, [pc, #80]	; (800cd9c <CDC_Receive_FS+0x70>)
 800cd4c:	6818      	ldr	r0, [r3, #0]
 800cd4e:	240f      	movs	r4, #15
 800cd50:	193b      	adds	r3, r7, r4
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	18d3      	adds	r3, r2, r3
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	0019      	movs	r1, r3
 800cd5c:	f7f5 fc64 	bl	8002628 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800cd60:	193b      	adds	r3, r7, r4
 800cd62:	781a      	ldrb	r2, [r3, #0]
 800cd64:	193b      	adds	r3, r7, r4
 800cd66:	3201      	adds	r2, #1
 800cd68:	701a      	strb	r2, [r3, #0]
 800cd6a:	230f      	movs	r3, #15
 800cd6c:	18fb      	adds	r3, r7, r3
 800cd6e:	781a      	ldrb	r2, [r3, #0]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d3e8      	bcc.n	800cd4a <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	4b09      	ldr	r3, [pc, #36]	; (800cda0 <CDC_Receive_FS+0x74>)
 800cd7c:	0011      	movs	r1, r2
 800cd7e:	0018      	movs	r0, r3
 800cd80:	f7fe fcdf 	bl	800b742 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd84:	4b06      	ldr	r3, [pc, #24]	; (800cda0 <CDC_Receive_FS+0x74>)
 800cd86:	0018      	movs	r0, r3
 800cd88:	f7fe fd26 	bl	800b7d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd8e:	0018      	movs	r0, r3
 800cd90:	46bd      	mov	sp, r7
 800cd92:	b005      	add	sp, #20
 800cd94:	bd90      	pop	{r4, r7, pc}
 800cd96:	46c0      	nop			; (mov r8, r8)
 800cd98:	200003d0 	.word	0x200003d0
 800cd9c:	20000eb4 	.word	0x20000eb4
 800cda0:	20000420 	.word	0x20000420

0800cda4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cda4:	b5b0      	push	{r4, r5, r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	000a      	movs	r2, r1
 800cdae:	1cbb      	adds	r3, r7, #2
 800cdb0:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800cdb2:	230f      	movs	r3, #15
 800cdb4:	18fb      	adds	r3, r7, r3
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cdba:	4a11      	ldr	r2, [pc, #68]	; (800ce00 <CDC_Transmit_FS+0x5c>)
 800cdbc:	23ae      	movs	r3, #174	; 0xae
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	58d3      	ldr	r3, [r2, r3]
 800cdc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	2385      	movs	r3, #133	; 0x85
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	58d3      	ldr	r3, [r2, r3]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d001      	beq.n	800cdd4 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e010      	b.n	800cdf6 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cdd4:	1cbb      	adds	r3, r7, #2
 800cdd6:	881a      	ldrh	r2, [r3, #0]
 800cdd8:	6879      	ldr	r1, [r7, #4]
 800cdda:	4b09      	ldr	r3, [pc, #36]	; (800ce00 <CDC_Transmit_FS+0x5c>)
 800cddc:	0018      	movs	r0, r3
 800cdde:	f7fe fc94 	bl	800b70a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cde2:	250f      	movs	r5, #15
 800cde4:	197c      	adds	r4, r7, r5
 800cde6:	4b06      	ldr	r3, [pc, #24]	; (800ce00 <CDC_Transmit_FS+0x5c>)
 800cde8:	0018      	movs	r0, r3
 800cdea:	f7fe fcbe 	bl	800b76a <USBD_CDC_TransmitPacket>
 800cdee:	0003      	movs	r3, r0
 800cdf0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800cdf2:	197b      	adds	r3, r7, r5
 800cdf4:	781b      	ldrb	r3, [r3, #0]
}
 800cdf6:	0018      	movs	r0, r3
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	b004      	add	sp, #16
 800cdfc:	bdb0      	pop	{r4, r5, r7, pc}
 800cdfe:	46c0      	nop			; (mov r8, r8)
 800ce00:	20000420 	.word	0x20000420

0800ce04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	0002      	movs	r2, r0
 800ce0c:	6039      	str	r1, [r7, #0]
 800ce0e:	1dfb      	adds	r3, r7, #7
 800ce10:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	2212      	movs	r2, #18
 800ce16:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce18:	4b02      	ldr	r3, [pc, #8]	; (800ce24 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce1a:	0018      	movs	r0, r3
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	b002      	add	sp, #8
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	46c0      	nop			; (mov r8, r8)
 800ce24:	20000148 	.word	0x20000148

0800ce28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	0002      	movs	r2, r0
 800ce30:	6039      	str	r1, [r7, #0]
 800ce32:	1dfb      	adds	r3, r7, #7
 800ce34:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	2204      	movs	r2, #4
 800ce3a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce3c:	4b02      	ldr	r3, [pc, #8]	; (800ce48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce3e:	0018      	movs	r0, r3
 800ce40:	46bd      	mov	sp, r7
 800ce42:	b002      	add	sp, #8
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	46c0      	nop			; (mov r8, r8)
 800ce48:	2000015c 	.word	0x2000015c

0800ce4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	0002      	movs	r2, r0
 800ce54:	6039      	str	r1, [r7, #0]
 800ce56:	1dfb      	adds	r3, r7, #7
 800ce58:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ce5a:	1dfb      	adds	r3, r7, #7
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	4908      	ldr	r1, [pc, #32]	; (800ce88 <USBD_FS_ProductStrDescriptor+0x3c>)
 800ce66:	4b09      	ldr	r3, [pc, #36]	; (800ce8c <USBD_FS_ProductStrDescriptor+0x40>)
 800ce68:	0018      	movs	r0, r3
 800ce6a:	f7ff fdf4 	bl	800ca56 <USBD_GetString>
 800ce6e:	e005      	b.n	800ce7c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce70:	683a      	ldr	r2, [r7, #0]
 800ce72:	4905      	ldr	r1, [pc, #20]	; (800ce88 <USBD_FS_ProductStrDescriptor+0x3c>)
 800ce74:	4b05      	ldr	r3, [pc, #20]	; (800ce8c <USBD_FS_ProductStrDescriptor+0x40>)
 800ce76:	0018      	movs	r0, r3
 800ce78:	f7ff fded 	bl	800ca56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce7c:	4b02      	ldr	r3, [pc, #8]	; (800ce88 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800ce7e:	0018      	movs	r0, r3
 800ce80:	46bd      	mov	sp, r7
 800ce82:	b002      	add	sp, #8
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	46c0      	nop			; (mov r8, r8)
 800ce88:	20000eb8 	.word	0x20000eb8
 800ce8c:	0800e174 	.word	0x0800e174

0800ce90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	0002      	movs	r2, r0
 800ce98:	6039      	str	r1, [r7, #0]
 800ce9a:	1dfb      	adds	r3, r7, #7
 800ce9c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	4904      	ldr	r1, [pc, #16]	; (800ceb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cea2:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800cea4:	0018      	movs	r0, r3
 800cea6:	f7ff fdd6 	bl	800ca56 <USBD_GetString>
  return USBD_StrDesc;
 800ceaa:	4b02      	ldr	r3, [pc, #8]	; (800ceb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800ceac:	0018      	movs	r0, r3
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	b002      	add	sp, #8
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	20000eb8 	.word	0x20000eb8
 800ceb8:	0800e18c 	.word	0x0800e18c

0800cebc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	0002      	movs	r2, r0
 800cec4:	6039      	str	r1, [r7, #0]
 800cec6:	1dfb      	adds	r3, r7, #7
 800cec8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	221a      	movs	r2, #26
 800cece:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ced0:	f000 f84c 	bl	800cf6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ced4:	4b02      	ldr	r3, [pc, #8]	; (800cee0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800ced6:	0018      	movs	r0, r3
 800ced8:	46bd      	mov	sp, r7
 800ceda:	b002      	add	sp, #8
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	46c0      	nop			; (mov r8, r8)
 800cee0:	20000160 	.word	0x20000160

0800cee4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	0002      	movs	r2, r0
 800ceec:	6039      	str	r1, [r7, #0]
 800ceee:	1dfb      	adds	r3, r7, #7
 800cef0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800cef2:	1dfb      	adds	r3, r7, #7
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d106      	bne.n	800cf08 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cefa:	683a      	ldr	r2, [r7, #0]
 800cefc:	4908      	ldr	r1, [pc, #32]	; (800cf20 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800cefe:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <USBD_FS_ConfigStrDescriptor+0x40>)
 800cf00:	0018      	movs	r0, r3
 800cf02:	f7ff fda8 	bl	800ca56 <USBD_GetString>
 800cf06:	e005      	b.n	800cf14 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf08:	683a      	ldr	r2, [r7, #0]
 800cf0a:	4905      	ldr	r1, [pc, #20]	; (800cf20 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800cf0c:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <USBD_FS_ConfigStrDescriptor+0x40>)
 800cf0e:	0018      	movs	r0, r3
 800cf10:	f7ff fda1 	bl	800ca56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf14:	4b02      	ldr	r3, [pc, #8]	; (800cf20 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800cf16:	0018      	movs	r0, r3
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	b002      	add	sp, #8
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	46c0      	nop			; (mov r8, r8)
 800cf20:	20000eb8 	.word	0x20000eb8
 800cf24:	0800e1a0 	.word	0x0800e1a0

0800cf28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	0002      	movs	r2, r0
 800cf30:	6039      	str	r1, [r7, #0]
 800cf32:	1dfb      	adds	r3, r7, #7
 800cf34:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800cf36:	1dfb      	adds	r3, r7, #7
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d106      	bne.n	800cf4c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	4908      	ldr	r1, [pc, #32]	; (800cf64 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800cf42:	4b09      	ldr	r3, [pc, #36]	; (800cf68 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800cf44:	0018      	movs	r0, r3
 800cf46:	f7ff fd86 	bl	800ca56 <USBD_GetString>
 800cf4a:	e005      	b.n	800cf58 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	4905      	ldr	r1, [pc, #20]	; (800cf64 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800cf50:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800cf52:	0018      	movs	r0, r3
 800cf54:	f7ff fd7f 	bl	800ca56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf58:	4b02      	ldr	r3, [pc, #8]	; (800cf64 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800cf5a:	0018      	movs	r0, r3
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	b002      	add	sp, #8
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	46c0      	nop			; (mov r8, r8)
 800cf64:	20000eb8 	.word	0x20000eb8
 800cf68:	0800e1ac 	.word	0x0800e1ac

0800cf6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf72:	4b10      	ldr	r3, [pc, #64]	; (800cfb4 <Get_SerialNum+0x48>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf78:	4b0f      	ldr	r3, [pc, #60]	; (800cfb8 <Get_SerialNum+0x4c>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf7e:	4b0f      	ldr	r3, [pc, #60]	; (800cfbc <Get_SerialNum+0x50>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf84:	68fa      	ldr	r2, [r7, #12]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	18d3      	adds	r3, r2, r3
 800cf8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00b      	beq.n	800cfaa <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf92:	490b      	ldr	r1, [pc, #44]	; (800cfc0 <Get_SerialNum+0x54>)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2208      	movs	r2, #8
 800cf98:	0018      	movs	r0, r3
 800cf9a:	f000 f815 	bl	800cfc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf9e:	4909      	ldr	r1, [pc, #36]	; (800cfc4 <Get_SerialNum+0x58>)
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	2204      	movs	r2, #4
 800cfa4:	0018      	movs	r0, r3
 800cfa6:	f000 f80f 	bl	800cfc8 <IntToUnicode>
  }
}
 800cfaa:	46c0      	nop			; (mov r8, r8)
 800cfac:	46bd      	mov	sp, r7
 800cfae:	b004      	add	sp, #16
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	46c0      	nop			; (mov r8, r8)
 800cfb4:	1ffff7ac 	.word	0x1ffff7ac
 800cfb8:	1ffff7b0 	.word	0x1ffff7b0
 800cfbc:	1ffff7b4 	.word	0x1ffff7b4
 800cfc0:	20000162 	.word	0x20000162
 800cfc4:	20000172 	.word	0x20000172

0800cfc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b086      	sub	sp, #24
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	1dfb      	adds	r3, r7, #7
 800cfd4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800cfd6:	2117      	movs	r1, #23
 800cfd8:	187b      	adds	r3, r7, r1
 800cfda:	2200      	movs	r2, #0
 800cfdc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800cfde:	187b      	adds	r3, r7, r1
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	701a      	strb	r2, [r3, #0]
 800cfe4:	e02f      	b.n	800d046 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	0f1b      	lsrs	r3, r3, #28
 800cfea:	2b09      	cmp	r3, #9
 800cfec:	d80d      	bhi.n	800d00a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	0f1b      	lsrs	r3, r3, #28
 800cff2:	b2da      	uxtb	r2, r3
 800cff4:	2317      	movs	r3, #23
 800cff6:	18fb      	adds	r3, r7, r3
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	005b      	lsls	r3, r3, #1
 800cffc:	0019      	movs	r1, r3
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	185b      	adds	r3, r3, r1
 800d002:	3230      	adds	r2, #48	; 0x30
 800d004:	b2d2      	uxtb	r2, r2
 800d006:	701a      	strb	r2, [r3, #0]
 800d008:	e00c      	b.n	800d024 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	0f1b      	lsrs	r3, r3, #28
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	2317      	movs	r3, #23
 800d012:	18fb      	adds	r3, r7, r3
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	0019      	movs	r1, r3
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	185b      	adds	r3, r3, r1
 800d01e:	3237      	adds	r2, #55	; 0x37
 800d020:	b2d2      	uxtb	r2, r2
 800d022:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	011b      	lsls	r3, r3, #4
 800d028:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d02a:	2117      	movs	r1, #23
 800d02c:	187b      	adds	r3, r7, r1
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	005b      	lsls	r3, r3, #1
 800d032:	3301      	adds	r3, #1
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	18d3      	adds	r3, r2, r3
 800d038:	2200      	movs	r2, #0
 800d03a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d03c:	187b      	adds	r3, r7, r1
 800d03e:	781a      	ldrb	r2, [r3, #0]
 800d040:	187b      	adds	r3, r7, r1
 800d042:	3201      	adds	r2, #1
 800d044:	701a      	strb	r2, [r3, #0]
 800d046:	2317      	movs	r3, #23
 800d048:	18fa      	adds	r2, r7, r3
 800d04a:	1dfb      	adds	r3, r7, #7
 800d04c:	7812      	ldrb	r2, [r2, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	429a      	cmp	r2, r3
 800d052:	d3c8      	bcc.n	800cfe6 <IntToUnicode+0x1e>
  }
}
 800d054:	46c0      	nop			; (mov r8, r8)
 800d056:	46c0      	nop			; (mov r8, r8)
 800d058:	46bd      	mov	sp, r7
 800d05a:	b006      	add	sp, #24
 800d05c:	bd80      	pop	{r7, pc}
	...

0800d060 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a0e      	ldr	r2, [pc, #56]	; (800d0a8 <HAL_PCD_MspInit+0x48>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d115      	bne.n	800d09e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d072:	4b0e      	ldr	r3, [pc, #56]	; (800d0ac <HAL_PCD_MspInit+0x4c>)
 800d074:	69da      	ldr	r2, [r3, #28]
 800d076:	4b0d      	ldr	r3, [pc, #52]	; (800d0ac <HAL_PCD_MspInit+0x4c>)
 800d078:	2180      	movs	r1, #128	; 0x80
 800d07a:	0409      	lsls	r1, r1, #16
 800d07c:	430a      	orrs	r2, r1
 800d07e:	61da      	str	r2, [r3, #28]
 800d080:	4b0a      	ldr	r3, [pc, #40]	; (800d0ac <HAL_PCD_MspInit+0x4c>)
 800d082:	69da      	ldr	r2, [r3, #28]
 800d084:	2380      	movs	r3, #128	; 0x80
 800d086:	041b      	lsls	r3, r3, #16
 800d088:	4013      	ands	r3, r2
 800d08a:	60fb      	str	r3, [r7, #12]
 800d08c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d08e:	2200      	movs	r2, #0
 800d090:	2100      	movs	r1, #0
 800d092:	201f      	movs	r0, #31
 800d094:	f7f6 ffc6 	bl	8004024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d098:	201f      	movs	r0, #31
 800d09a:	f7f6 ffd8 	bl	800404e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d09e:	46c0      	nop			; (mov r8, r8)
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	b004      	add	sp, #16
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	46c0      	nop			; (mov r8, r8)
 800d0a8:	40005c00 	.word	0x40005c00
 800d0ac:	40021000 	.word	0x40021000

0800d0b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	23bc      	movs	r3, #188	; 0xbc
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	58d2      	ldr	r2, [r2, r3]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	21ac      	movs	r1, #172	; 0xac
 800d0c4:	0089      	lsls	r1, r1, #2
 800d0c6:	468c      	mov	ip, r1
 800d0c8:	4463      	add	r3, ip
 800d0ca:	0019      	movs	r1, r3
 800d0cc:	0010      	movs	r0, r2
 800d0ce:	f7fe fc55 	bl	800b97c <USBD_LL_SetupStage>
}
 800d0d2:	46c0      	nop			; (mov r8, r8)
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	b002      	add	sp, #8
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0da:	b590      	push	{r4, r7, lr}
 800d0dc:	b083      	sub	sp, #12
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
 800d0e2:	000a      	movs	r2, r1
 800d0e4:	1cfb      	adds	r3, r7, #3
 800d0e6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	23bc      	movs	r3, #188	; 0xbc
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	58d4      	ldr	r4, [r2, r3]
 800d0f0:	1cfb      	adds	r3, r7, #3
 800d0f2:	781a      	ldrb	r2, [r3, #0]
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	23be      	movs	r3, #190	; 0xbe
 800d0f8:	0059      	lsls	r1, r3, #1
 800d0fa:	0013      	movs	r3, r2
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	189b      	adds	r3, r3, r2
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	18c3      	adds	r3, r0, r3
 800d104:	185b      	adds	r3, r3, r1
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	1cfb      	adds	r3, r7, #3
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	0019      	movs	r1, r3
 800d10e:	0020      	movs	r0, r4
 800d110:	f7fe fc92 	bl	800ba38 <USBD_LL_DataOutStage>
}
 800d114:	46c0      	nop			; (mov r8, r8)
 800d116:	46bd      	mov	sp, r7
 800d118:	b003      	add	sp, #12
 800d11a:	bd90      	pop	{r4, r7, pc}

0800d11c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	000a      	movs	r2, r1
 800d126:	1cfb      	adds	r3, r7, #3
 800d128:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	23bc      	movs	r3, #188	; 0xbc
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	58d0      	ldr	r0, [r2, r3]
 800d132:	1cfb      	adds	r3, r7, #3
 800d134:	781a      	ldrb	r2, [r3, #0]
 800d136:	6879      	ldr	r1, [r7, #4]
 800d138:	0013      	movs	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	189b      	adds	r3, r3, r2
 800d13e:	00db      	lsls	r3, r3, #3
 800d140:	18cb      	adds	r3, r1, r3
 800d142:	333c      	adds	r3, #60	; 0x3c
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	1cfb      	adds	r3, r7, #3
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	0019      	movs	r1, r3
 800d14c:	f7fe fcf6 	bl	800bb3c <USBD_LL_DataInStage>
}
 800d150:	46c0      	nop			; (mov r8, r8)
 800d152:	46bd      	mov	sp, r7
 800d154:	b002      	add	sp, #8
 800d156:	bd80      	pop	{r7, pc}

0800d158 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	23bc      	movs	r3, #188	; 0xbc
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	58d3      	ldr	r3, [r2, r3]
 800d168:	0018      	movs	r0, r3
 800d16a:	f7fe fe2d 	bl	800bdc8 <USBD_LL_SOF>
}
 800d16e:	46c0      	nop			; (mov r8, r8)
 800d170:	46bd      	mov	sp, r7
 800d172:	b002      	add	sp, #8
 800d174:	bd80      	pop	{r7, pc}

0800d176 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d17e:	230f      	movs	r3, #15
 800d180:	18fb      	adds	r3, r7, r3
 800d182:	2201      	movs	r2, #1
 800d184:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d001      	beq.n	800d192 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800d18e:	f7f5 f9fb 	bl	8002588 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	23bc      	movs	r3, #188	; 0xbc
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	58d2      	ldr	r2, [r2, r3]
 800d19a:	230f      	movs	r3, #15
 800d19c:	18fb      	adds	r3, r7, r3
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	0019      	movs	r1, r3
 800d1a2:	0010      	movs	r0, r2
 800d1a4:	f7fe fdcf 	bl	800bd46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	23bc      	movs	r3, #188	; 0xbc
 800d1ac:	009b      	lsls	r3, r3, #2
 800d1ae:	58d3      	ldr	r3, [r2, r3]
 800d1b0:	0018      	movs	r0, r3
 800d1b2:	f7fe fd80 	bl	800bcb6 <USBD_LL_Reset>
}
 800d1b6:	46c0      	nop			; (mov r8, r8)
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	b004      	add	sp, #16
 800d1bc:	bd80      	pop	{r7, pc}
	...

0800d1c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	23bc      	movs	r3, #188	; 0xbc
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	58d3      	ldr	r3, [r2, r3]
 800d1d0:	0018      	movs	r0, r3
 800d1d2:	f7fe fdc9 	bl	800bd68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	699b      	ldr	r3, [r3, #24]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d005      	beq.n	800d1ea <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1de:	4b05      	ldr	r3, [pc, #20]	; (800d1f4 <HAL_PCD_SuspendCallback+0x34>)
 800d1e0:	691a      	ldr	r2, [r3, #16]
 800d1e2:	4b04      	ldr	r3, [pc, #16]	; (800d1f4 <HAL_PCD_SuspendCallback+0x34>)
 800d1e4:	2106      	movs	r1, #6
 800d1e6:	430a      	orrs	r2, r1
 800d1e8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800d1ea:	46c0      	nop			; (mov r8, r8)
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	b002      	add	sp, #8
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	46c0      	nop			; (mov r8, r8)
 800d1f4:	e000ed00 	.word	0xe000ed00

0800d1f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	699b      	ldr	r3, [r3, #24]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d007      	beq.n	800d218 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d208:	4b09      	ldr	r3, [pc, #36]	; (800d230 <HAL_PCD_ResumeCallback+0x38>)
 800d20a:	691a      	ldr	r2, [r3, #16]
 800d20c:	4b08      	ldr	r3, [pc, #32]	; (800d230 <HAL_PCD_ResumeCallback+0x38>)
 800d20e:	2106      	movs	r1, #6
 800d210:	438a      	bics	r2, r1
 800d212:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800d214:	f000 fa44 	bl	800d6a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	23bc      	movs	r3, #188	; 0xbc
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	58d3      	ldr	r3, [r2, r3]
 800d220:	0018      	movs	r0, r3
 800d222:	f7fe fdb9 	bl	800bd98 <USBD_LL_Resume>
}
 800d226:	46c0      	nop			; (mov r8, r8)
 800d228:	46bd      	mov	sp, r7
 800d22a:	b002      	add	sp, #8
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	46c0      	nop			; (mov r8, r8)
 800d230:	e000ed00 	.word	0xe000ed00

0800d234 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d23c:	4a2d      	ldr	r2, [pc, #180]	; (800d2f4 <USBD_LL_Init+0xc0>)
 800d23e:	23bc      	movs	r3, #188	; 0xbc
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	6879      	ldr	r1, [r7, #4]
 800d244:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	23b0      	movs	r3, #176	; 0xb0
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	4929      	ldr	r1, [pc, #164]	; (800d2f4 <USBD_LL_Init+0xc0>)
 800d24e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800d250:	4b28      	ldr	r3, [pc, #160]	; (800d2f4 <USBD_LL_Init+0xc0>)
 800d252:	4a29      	ldr	r2, [pc, #164]	; (800d2f8 <USBD_LL_Init+0xc4>)
 800d254:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d256:	4b27      	ldr	r3, [pc, #156]	; (800d2f4 <USBD_LL_Init+0xc0>)
 800d258:	2208      	movs	r2, #8
 800d25a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d25c:	4b25      	ldr	r3, [pc, #148]	; (800d2f4 <USBD_LL_Init+0xc0>)
 800d25e:	2202      	movs	r2, #2
 800d260:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d262:	4b24      	ldr	r3, [pc, #144]	; (800d2f4 <USBD_LL_Init+0xc0>)
 800d264:	2202      	movs	r2, #2
 800d266:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d268:	4b22      	ldr	r3, [pc, #136]	; (800d2f4 <USBD_LL_Init+0xc0>)
 800d26a:	2200      	movs	r2, #0
 800d26c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d26e:	4b21      	ldr	r3, [pc, #132]	; (800d2f4 <USBD_LL_Init+0xc0>)
 800d270:	2200      	movs	r2, #0
 800d272:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d274:	4b1f      	ldr	r3, [pc, #124]	; (800d2f4 <USBD_LL_Init+0xc0>)
 800d276:	2200      	movs	r2, #0
 800d278:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d27a:	4b1e      	ldr	r3, [pc, #120]	; (800d2f4 <USBD_LL_Init+0xc0>)
 800d27c:	0018      	movs	r0, r3
 800d27e:	f7f7 f96b 	bl	8004558 <HAL_PCD_Init>
 800d282:	1e03      	subs	r3, r0, #0
 800d284:	d001      	beq.n	800d28a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800d286:	f7f5 f97f 	bl	8002588 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	23b0      	movs	r3, #176	; 0xb0
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	58d0      	ldr	r0, [r2, r3]
 800d292:	2318      	movs	r3, #24
 800d294:	2200      	movs	r2, #0
 800d296:	2100      	movs	r1, #0
 800d298:	f7f8 ff4c 	bl	8006134 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	23b0      	movs	r3, #176	; 0xb0
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	58d0      	ldr	r0, [r2, r3]
 800d2a4:	2358      	movs	r3, #88	; 0x58
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	2180      	movs	r1, #128	; 0x80
 800d2aa:	f7f8 ff43 	bl	8006134 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	23b0      	movs	r3, #176	; 0xb0
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	58d0      	ldr	r0, [r2, r3]
 800d2b6:	23c0      	movs	r3, #192	; 0xc0
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	2181      	movs	r1, #129	; 0x81
 800d2bc:	f7f8 ff3a 	bl	8006134 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	23b0      	movs	r3, #176	; 0xb0
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	58d0      	ldr	r0, [r2, r3]
 800d2c8:	2388      	movs	r3, #136	; 0x88
 800d2ca:	005b      	lsls	r3, r3, #1
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	2101      	movs	r1, #1
 800d2d0:	f7f8 ff30 	bl	8006134 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	23b0      	movs	r3, #176	; 0xb0
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	58d0      	ldr	r0, [r2, r3]
 800d2dc:	2380      	movs	r3, #128	; 0x80
 800d2de:	005b      	lsls	r3, r3, #1
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	2182      	movs	r1, #130	; 0x82
 800d2e4:	f7f8 ff26 	bl	8006134 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	0018      	movs	r0, r3
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	b002      	add	sp, #8
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	46c0      	nop			; (mov r8, r8)
 800d2f4:	200010b8 	.word	0x200010b8
 800d2f8:	40005c00 	.word	0x40005c00

0800d2fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2fe:	b085      	sub	sp, #20
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d304:	210f      	movs	r1, #15
 800d306:	187b      	adds	r3, r7, r1
 800d308:	2200      	movs	r2, #0
 800d30a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d30c:	260e      	movs	r6, #14
 800d30e:	19bb      	adds	r3, r7, r6
 800d310:	2200      	movs	r2, #0
 800d312:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	23b0      	movs	r3, #176	; 0xb0
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	58d3      	ldr	r3, [r2, r3]
 800d31c:	000d      	movs	r5, r1
 800d31e:	187c      	adds	r4, r7, r1
 800d320:	0018      	movs	r0, r3
 800d322:	f7f7 fa29 	bl	8004778 <HAL_PCD_Start>
 800d326:	0003      	movs	r3, r0
 800d328:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d32a:	19bc      	adds	r4, r7, r6
 800d32c:	197b      	adds	r3, r7, r5
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	0018      	movs	r0, r3
 800d332:	f000 f9bc 	bl	800d6ae <USBD_Get_USB_Status>
 800d336:	0003      	movs	r3, r0
 800d338:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d33a:	19bb      	adds	r3, r7, r6
 800d33c:	781b      	ldrb	r3, [r3, #0]
}
 800d33e:	0018      	movs	r0, r3
 800d340:	46bd      	mov	sp, r7
 800d342:	b005      	add	sp, #20
 800d344:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d346 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d346:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d348:	b085      	sub	sp, #20
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	000c      	movs	r4, r1
 800d350:	0010      	movs	r0, r2
 800d352:	0019      	movs	r1, r3
 800d354:	1cfb      	adds	r3, r7, #3
 800d356:	1c22      	adds	r2, r4, #0
 800d358:	701a      	strb	r2, [r3, #0]
 800d35a:	1cbb      	adds	r3, r7, #2
 800d35c:	1c02      	adds	r2, r0, #0
 800d35e:	701a      	strb	r2, [r3, #0]
 800d360:	003b      	movs	r3, r7
 800d362:	1c0a      	adds	r2, r1, #0
 800d364:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d366:	260f      	movs	r6, #15
 800d368:	19bb      	adds	r3, r7, r6
 800d36a:	2200      	movs	r2, #0
 800d36c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d36e:	250e      	movs	r5, #14
 800d370:	197b      	adds	r3, r7, r5
 800d372:	2200      	movs	r2, #0
 800d374:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	23b0      	movs	r3, #176	; 0xb0
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	58d0      	ldr	r0, [r2, r3]
 800d37e:	19bc      	adds	r4, r7, r6
 800d380:	1cbb      	adds	r3, r7, #2
 800d382:	781d      	ldrb	r5, [r3, #0]
 800d384:	003b      	movs	r3, r7
 800d386:	881a      	ldrh	r2, [r3, #0]
 800d388:	1cfb      	adds	r3, r7, #3
 800d38a:	7819      	ldrb	r1, [r3, #0]
 800d38c:	002b      	movs	r3, r5
 800d38e:	f7f7 fbc0 	bl	8004b12 <HAL_PCD_EP_Open>
 800d392:	0003      	movs	r3, r0
 800d394:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d396:	250e      	movs	r5, #14
 800d398:	197c      	adds	r4, r7, r5
 800d39a:	19bb      	adds	r3, r7, r6
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	0018      	movs	r0, r3
 800d3a0:	f000 f985 	bl	800d6ae <USBD_Get_USB_Status>
 800d3a4:	0003      	movs	r3, r0
 800d3a6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d3a8:	197b      	adds	r3, r7, r5
 800d3aa:	781b      	ldrb	r3, [r3, #0]
}
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	b005      	add	sp, #20
 800d3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	000a      	movs	r2, r1
 800d3be:	1cfb      	adds	r3, r7, #3
 800d3c0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3c2:	210f      	movs	r1, #15
 800d3c4:	187b      	adds	r3, r7, r1
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ca:	260e      	movs	r6, #14
 800d3cc:	19bb      	adds	r3, r7, r6
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	23b0      	movs	r3, #176	; 0xb0
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	58d2      	ldr	r2, [r2, r3]
 800d3da:	000d      	movs	r5, r1
 800d3dc:	187c      	adds	r4, r7, r1
 800d3de:	1cfb      	adds	r3, r7, #3
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	0019      	movs	r1, r3
 800d3e4:	0010      	movs	r0, r2
 800d3e6:	f7f7 fc0c 	bl	8004c02 <HAL_PCD_EP_Close>
 800d3ea:	0003      	movs	r3, r0
 800d3ec:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3ee:	19bc      	adds	r4, r7, r6
 800d3f0:	197b      	adds	r3, r7, r5
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	0018      	movs	r0, r3
 800d3f6:	f000 f95a 	bl	800d6ae <USBD_Get_USB_Status>
 800d3fa:	0003      	movs	r3, r0
 800d3fc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d3fe:	19bb      	adds	r3, r7, r6
 800d400:	781b      	ldrb	r3, [r3, #0]
}
 800d402:	0018      	movs	r0, r3
 800d404:	46bd      	mov	sp, r7
 800d406:	b005      	add	sp, #20
 800d408:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d40a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d40a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d40c:	b085      	sub	sp, #20
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	000a      	movs	r2, r1
 800d414:	1cfb      	adds	r3, r7, #3
 800d416:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d418:	210f      	movs	r1, #15
 800d41a:	187b      	adds	r3, r7, r1
 800d41c:	2200      	movs	r2, #0
 800d41e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d420:	260e      	movs	r6, #14
 800d422:	19bb      	adds	r3, r7, r6
 800d424:	2200      	movs	r2, #0
 800d426:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	23b0      	movs	r3, #176	; 0xb0
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	58d2      	ldr	r2, [r2, r3]
 800d430:	000d      	movs	r5, r1
 800d432:	187c      	adds	r4, r7, r1
 800d434:	1cfb      	adds	r3, r7, #3
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	0019      	movs	r1, r3
 800d43a:	0010      	movs	r0, r2
 800d43c:	f7f7 fcd8 	bl	8004df0 <HAL_PCD_EP_SetStall>
 800d440:	0003      	movs	r3, r0
 800d442:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d444:	19bc      	adds	r4, r7, r6
 800d446:	197b      	adds	r3, r7, r5
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	0018      	movs	r0, r3
 800d44c:	f000 f92f 	bl	800d6ae <USBD_Get_USB_Status>
 800d450:	0003      	movs	r3, r0
 800d452:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d454:	19bb      	adds	r3, r7, r6
 800d456:	781b      	ldrb	r3, [r3, #0]
}
 800d458:	0018      	movs	r0, r3
 800d45a:	46bd      	mov	sp, r7
 800d45c:	b005      	add	sp, #20
 800d45e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d460 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	000a      	movs	r2, r1
 800d46a:	1cfb      	adds	r3, r7, #3
 800d46c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d46e:	210f      	movs	r1, #15
 800d470:	187b      	adds	r3, r7, r1
 800d472:	2200      	movs	r2, #0
 800d474:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d476:	260e      	movs	r6, #14
 800d478:	19bb      	adds	r3, r7, r6
 800d47a:	2200      	movs	r2, #0
 800d47c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	23b0      	movs	r3, #176	; 0xb0
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	58d2      	ldr	r2, [r2, r3]
 800d486:	000d      	movs	r5, r1
 800d488:	187c      	adds	r4, r7, r1
 800d48a:	1cfb      	adds	r3, r7, #3
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	0019      	movs	r1, r3
 800d490:	0010      	movs	r0, r2
 800d492:	f7f7 fd09 	bl	8004ea8 <HAL_PCD_EP_ClrStall>
 800d496:	0003      	movs	r3, r0
 800d498:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d49a:	19bc      	adds	r4, r7, r6
 800d49c:	197b      	adds	r3, r7, r5
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	0018      	movs	r0, r3
 800d4a2:	f000 f904 	bl	800d6ae <USBD_Get_USB_Status>
 800d4a6:	0003      	movs	r3, r0
 800d4a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d4aa:	19bb      	adds	r3, r7, r6
 800d4ac:	781b      	ldrb	r3, [r3, #0]
}
 800d4ae:	0018      	movs	r0, r3
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	b005      	add	sp, #20
 800d4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4b6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b084      	sub	sp, #16
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	000a      	movs	r2, r1
 800d4c0:	1cfb      	adds	r3, r7, #3
 800d4c2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4c4:	687a      	ldr	r2, [r7, #4]
 800d4c6:	23b0      	movs	r3, #176	; 0xb0
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	58d3      	ldr	r3, [r2, r3]
 800d4cc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4ce:	1cfb      	adds	r3, r7, #3
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	b25b      	sxtb	r3, r3
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	da0d      	bge.n	800d4f4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4d8:	1cfb      	adds	r3, r7, #3
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	227f      	movs	r2, #127	; 0x7f
 800d4de:	4013      	ands	r3, r2
 800d4e0:	68f9      	ldr	r1, [r7, #12]
 800d4e2:	1c5a      	adds	r2, r3, #1
 800d4e4:	0013      	movs	r3, r2
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	189b      	adds	r3, r3, r2
 800d4ea:	00db      	lsls	r3, r3, #3
 800d4ec:	18cb      	adds	r3, r1, r3
 800d4ee:	3302      	adds	r3, #2
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	e00d      	b.n	800d510 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d4f4:	1cfb      	adds	r3, r7, #3
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	227f      	movs	r2, #127	; 0x7f
 800d4fa:	401a      	ands	r2, r3
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	23b5      	movs	r3, #181	; 0xb5
 800d500:	0059      	lsls	r1, r3, #1
 800d502:	0013      	movs	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	189b      	adds	r3, r3, r2
 800d508:	00db      	lsls	r3, r3, #3
 800d50a:	18c3      	adds	r3, r0, r3
 800d50c:	185b      	adds	r3, r3, r1
 800d50e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d510:	0018      	movs	r0, r3
 800d512:	46bd      	mov	sp, r7
 800d514:	b004      	add	sp, #16
 800d516:	bd80      	pop	{r7, pc}

0800d518 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	000a      	movs	r2, r1
 800d522:	1cfb      	adds	r3, r7, #3
 800d524:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d526:	210f      	movs	r1, #15
 800d528:	187b      	adds	r3, r7, r1
 800d52a:	2200      	movs	r2, #0
 800d52c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d52e:	260e      	movs	r6, #14
 800d530:	19bb      	adds	r3, r7, r6
 800d532:	2200      	movs	r2, #0
 800d534:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	23b0      	movs	r3, #176	; 0xb0
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	58d2      	ldr	r2, [r2, r3]
 800d53e:	000d      	movs	r5, r1
 800d540:	187c      	adds	r4, r7, r1
 800d542:	1cfb      	adds	r3, r7, #3
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	0019      	movs	r1, r3
 800d548:	0010      	movs	r0, r2
 800d54a:	f7f7 fab7 	bl	8004abc <HAL_PCD_SetAddress>
 800d54e:	0003      	movs	r3, r0
 800d550:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d552:	19bc      	adds	r4, r7, r6
 800d554:	197b      	adds	r3, r7, r5
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	0018      	movs	r0, r3
 800d55a:	f000 f8a8 	bl	800d6ae <USBD_Get_USB_Status>
 800d55e:	0003      	movs	r3, r0
 800d560:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d562:	19bb      	adds	r3, r7, r6
 800d564:	781b      	ldrb	r3, [r3, #0]
}
 800d566:	0018      	movs	r0, r3
 800d568:	46bd      	mov	sp, r7
 800d56a:	b005      	add	sp, #20
 800d56c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d56e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d56e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d570:	b087      	sub	sp, #28
 800d572:	af00      	add	r7, sp, #0
 800d574:	60f8      	str	r0, [r7, #12]
 800d576:	0008      	movs	r0, r1
 800d578:	607a      	str	r2, [r7, #4]
 800d57a:	0019      	movs	r1, r3
 800d57c:	230b      	movs	r3, #11
 800d57e:	18fb      	adds	r3, r7, r3
 800d580:	1c02      	adds	r2, r0, #0
 800d582:	701a      	strb	r2, [r3, #0]
 800d584:	2408      	movs	r4, #8
 800d586:	193b      	adds	r3, r7, r4
 800d588:	1c0a      	adds	r2, r1, #0
 800d58a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d58c:	2117      	movs	r1, #23
 800d58e:	187b      	adds	r3, r7, r1
 800d590:	2200      	movs	r2, #0
 800d592:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d594:	2516      	movs	r5, #22
 800d596:	197b      	adds	r3, r7, r5
 800d598:	2200      	movs	r2, #0
 800d59a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d59c:	68fa      	ldr	r2, [r7, #12]
 800d59e:	23b0      	movs	r3, #176	; 0xb0
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	58d0      	ldr	r0, [r2, r3]
 800d5a4:	193b      	adds	r3, r7, r4
 800d5a6:	881d      	ldrh	r5, [r3, #0]
 800d5a8:	000e      	movs	r6, r1
 800d5aa:	187c      	adds	r4, r7, r1
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	230b      	movs	r3, #11
 800d5b0:	18fb      	adds	r3, r7, r3
 800d5b2:	7819      	ldrb	r1, [r3, #0]
 800d5b4:	002b      	movs	r3, r5
 800d5b6:	f7f7 fbd2 	bl	8004d5e <HAL_PCD_EP_Transmit>
 800d5ba:	0003      	movs	r3, r0
 800d5bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5be:	2516      	movs	r5, #22
 800d5c0:	197c      	adds	r4, r7, r5
 800d5c2:	19bb      	adds	r3, r7, r6
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	0018      	movs	r0, r3
 800d5c8:	f000 f871 	bl	800d6ae <USBD_Get_USB_Status>
 800d5cc:	0003      	movs	r3, r0
 800d5ce:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d5d0:	197b      	adds	r3, r7, r5
 800d5d2:	781b      	ldrb	r3, [r3, #0]
}
 800d5d4:	0018      	movs	r0, r3
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	b007      	add	sp, #28
 800d5da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d5dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5de:	b087      	sub	sp, #28
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	0008      	movs	r0, r1
 800d5e6:	607a      	str	r2, [r7, #4]
 800d5e8:	0019      	movs	r1, r3
 800d5ea:	230b      	movs	r3, #11
 800d5ec:	18fb      	adds	r3, r7, r3
 800d5ee:	1c02      	adds	r2, r0, #0
 800d5f0:	701a      	strb	r2, [r3, #0]
 800d5f2:	2408      	movs	r4, #8
 800d5f4:	193b      	adds	r3, r7, r4
 800d5f6:	1c0a      	adds	r2, r1, #0
 800d5f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5fa:	2117      	movs	r1, #23
 800d5fc:	187b      	adds	r3, r7, r1
 800d5fe:	2200      	movs	r2, #0
 800d600:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d602:	2516      	movs	r5, #22
 800d604:	197b      	adds	r3, r7, r5
 800d606:	2200      	movs	r2, #0
 800d608:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	23b0      	movs	r3, #176	; 0xb0
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	58d0      	ldr	r0, [r2, r3]
 800d612:	193b      	adds	r3, r7, r4
 800d614:	881d      	ldrh	r5, [r3, #0]
 800d616:	000e      	movs	r6, r1
 800d618:	187c      	adds	r4, r7, r1
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	230b      	movs	r3, #11
 800d61e:	18fb      	adds	r3, r7, r3
 800d620:	7819      	ldrb	r1, [r3, #0]
 800d622:	002b      	movs	r3, r5
 800d624:	f7f7 fb3e 	bl	8004ca4 <HAL_PCD_EP_Receive>
 800d628:	0003      	movs	r3, r0
 800d62a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d62c:	2516      	movs	r5, #22
 800d62e:	197c      	adds	r4, r7, r5
 800d630:	19bb      	adds	r3, r7, r6
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	0018      	movs	r0, r3
 800d636:	f000 f83a 	bl	800d6ae <USBD_Get_USB_Status>
 800d63a:	0003      	movs	r3, r0
 800d63c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d63e:	197b      	adds	r3, r7, r5
 800d640:	781b      	ldrb	r3, [r3, #0]
}
 800d642:	0018      	movs	r0, r3
 800d644:	46bd      	mov	sp, r7
 800d646:	b007      	add	sp, #28
 800d648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d64a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b082      	sub	sp, #8
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	000a      	movs	r2, r1
 800d654:	1cfb      	adds	r3, r7, #3
 800d656:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	23b0      	movs	r3, #176	; 0xb0
 800d65c:	009b      	lsls	r3, r3, #2
 800d65e:	58d2      	ldr	r2, [r2, r3]
 800d660:	1cfb      	adds	r3, r7, #3
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	0019      	movs	r1, r3
 800d666:	0010      	movs	r0, r2
 800d668:	f7f7 fb60 	bl	8004d2c <HAL_PCD_EP_GetRxCount>
 800d66c:	0003      	movs	r3, r0
}
 800d66e:	0018      	movs	r0, r3
 800d670:	46bd      	mov	sp, r7
 800d672:	b002      	add	sp, #8
 800d674:	bd80      	pop	{r7, pc}
	...

0800d678 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d680:	4b02      	ldr	r3, [pc, #8]	; (800d68c <USBD_static_malloc+0x14>)
}
 800d682:	0018      	movs	r0, r3
 800d684:	46bd      	mov	sp, r7
 800d686:	b002      	add	sp, #8
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	46c0      	nop			; (mov r8, r8)
 800d68c:	200013ac 	.word	0x200013ac

0800d690 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]

}
 800d698:	46c0      	nop			; (mov r8, r8)
 800d69a:	46bd      	mov	sp, r7
 800d69c:	b002      	add	sp, #8
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d6a4:	f7f3 ff44 	bl	8001530 <SystemClock_Config>
}
 800d6a8:	46c0      	nop			; (mov r8, r8)
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b084      	sub	sp, #16
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	0002      	movs	r2, r0
 800d6b6:	1dfb      	adds	r3, r7, #7
 800d6b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ba:	230f      	movs	r3, #15
 800d6bc:	18fb      	adds	r3, r7, r3
 800d6be:	2200      	movs	r2, #0
 800d6c0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d6c2:	1dfb      	adds	r3, r7, #7
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	2b03      	cmp	r3, #3
 800d6c8:	d017      	beq.n	800d6fa <USBD_Get_USB_Status+0x4c>
 800d6ca:	dc1b      	bgt.n	800d704 <USBD_Get_USB_Status+0x56>
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	d00f      	beq.n	800d6f0 <USBD_Get_USB_Status+0x42>
 800d6d0:	dc18      	bgt.n	800d704 <USBD_Get_USB_Status+0x56>
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d002      	beq.n	800d6dc <USBD_Get_USB_Status+0x2e>
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d005      	beq.n	800d6e6 <USBD_Get_USB_Status+0x38>
 800d6da:	e013      	b.n	800d704 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d6dc:	230f      	movs	r3, #15
 800d6de:	18fb      	adds	r3, r7, r3
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	701a      	strb	r2, [r3, #0]
    break;
 800d6e4:	e013      	b.n	800d70e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6e6:	230f      	movs	r3, #15
 800d6e8:	18fb      	adds	r3, r7, r3
 800d6ea:	2202      	movs	r2, #2
 800d6ec:	701a      	strb	r2, [r3, #0]
    break;
 800d6ee:	e00e      	b.n	800d70e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6f0:	230f      	movs	r3, #15
 800d6f2:	18fb      	adds	r3, r7, r3
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	701a      	strb	r2, [r3, #0]
    break;
 800d6f8:	e009      	b.n	800d70e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6fa:	230f      	movs	r3, #15
 800d6fc:	18fb      	adds	r3, r7, r3
 800d6fe:	2202      	movs	r2, #2
 800d700:	701a      	strb	r2, [r3, #0]
    break;
 800d702:	e004      	b.n	800d70e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800d704:	230f      	movs	r3, #15
 800d706:	18fb      	adds	r3, r7, r3
 800d708:	2202      	movs	r2, #2
 800d70a:	701a      	strb	r2, [r3, #0]
    break;
 800d70c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800d70e:	230f      	movs	r3, #15
 800d710:	18fb      	adds	r3, r7, r3
 800d712:	781b      	ldrb	r3, [r3, #0]
}
 800d714:	0018      	movs	r0, r3
 800d716:	46bd      	mov	sp, r7
 800d718:	b004      	add	sp, #16
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <__errno>:
 800d71c:	4b01      	ldr	r3, [pc, #4]	; (800d724 <__errno+0x8>)
 800d71e:	6818      	ldr	r0, [r3, #0]
 800d720:	4770      	bx	lr
 800d722:	46c0      	nop			; (mov r8, r8)
 800d724:	2000017c 	.word	0x2000017c

0800d728 <__libc_init_array>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	2600      	movs	r6, #0
 800d72c:	4d0c      	ldr	r5, [pc, #48]	; (800d760 <__libc_init_array+0x38>)
 800d72e:	4c0d      	ldr	r4, [pc, #52]	; (800d764 <__libc_init_array+0x3c>)
 800d730:	1b64      	subs	r4, r4, r5
 800d732:	10a4      	asrs	r4, r4, #2
 800d734:	42a6      	cmp	r6, r4
 800d736:	d109      	bne.n	800d74c <__libc_init_array+0x24>
 800d738:	2600      	movs	r6, #0
 800d73a:	f000 fc9f 	bl	800e07c <_init>
 800d73e:	4d0a      	ldr	r5, [pc, #40]	; (800d768 <__libc_init_array+0x40>)
 800d740:	4c0a      	ldr	r4, [pc, #40]	; (800d76c <__libc_init_array+0x44>)
 800d742:	1b64      	subs	r4, r4, r5
 800d744:	10a4      	asrs	r4, r4, #2
 800d746:	42a6      	cmp	r6, r4
 800d748:	d105      	bne.n	800d756 <__libc_init_array+0x2e>
 800d74a:	bd70      	pop	{r4, r5, r6, pc}
 800d74c:	00b3      	lsls	r3, r6, #2
 800d74e:	58eb      	ldr	r3, [r5, r3]
 800d750:	4798      	blx	r3
 800d752:	3601      	adds	r6, #1
 800d754:	e7ee      	b.n	800d734 <__libc_init_array+0xc>
 800d756:	00b3      	lsls	r3, r6, #2
 800d758:	58eb      	ldr	r3, [r5, r3]
 800d75a:	4798      	blx	r3
 800d75c:	3601      	adds	r6, #1
 800d75e:	e7f2      	b.n	800d746 <__libc_init_array+0x1e>
 800d760:	0800e3f0 	.word	0x0800e3f0
 800d764:	0800e3f0 	.word	0x0800e3f0
 800d768:	0800e3f0 	.word	0x0800e3f0
 800d76c:	0800e3f4 	.word	0x0800e3f4

0800d770 <malloc>:
 800d770:	b510      	push	{r4, lr}
 800d772:	4b03      	ldr	r3, [pc, #12]	; (800d780 <malloc+0x10>)
 800d774:	0001      	movs	r1, r0
 800d776:	6818      	ldr	r0, [r3, #0]
 800d778:	f000 f88c 	bl	800d894 <_malloc_r>
 800d77c:	bd10      	pop	{r4, pc}
 800d77e:	46c0      	nop			; (mov r8, r8)
 800d780:	2000017c 	.word	0x2000017c

0800d784 <free>:
 800d784:	b510      	push	{r4, lr}
 800d786:	4b03      	ldr	r3, [pc, #12]	; (800d794 <free+0x10>)
 800d788:	0001      	movs	r1, r0
 800d78a:	6818      	ldr	r0, [r3, #0]
 800d78c:	f000 f816 	bl	800d7bc <_free_r>
 800d790:	bd10      	pop	{r4, pc}
 800d792:	46c0      	nop			; (mov r8, r8)
 800d794:	2000017c 	.word	0x2000017c

0800d798 <memcpy>:
 800d798:	2300      	movs	r3, #0
 800d79a:	b510      	push	{r4, lr}
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d100      	bne.n	800d7a2 <memcpy+0xa>
 800d7a0:	bd10      	pop	{r4, pc}
 800d7a2:	5ccc      	ldrb	r4, [r1, r3]
 800d7a4:	54c4      	strb	r4, [r0, r3]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	e7f8      	b.n	800d79c <memcpy+0x4>

0800d7aa <memset>:
 800d7aa:	0003      	movs	r3, r0
 800d7ac:	1882      	adds	r2, r0, r2
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d100      	bne.n	800d7b4 <memset+0xa>
 800d7b2:	4770      	bx	lr
 800d7b4:	7019      	strb	r1, [r3, #0]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	e7f9      	b.n	800d7ae <memset+0x4>
	...

0800d7bc <_free_r>:
 800d7bc:	b570      	push	{r4, r5, r6, lr}
 800d7be:	0005      	movs	r5, r0
 800d7c0:	2900      	cmp	r1, #0
 800d7c2:	d010      	beq.n	800d7e6 <_free_r+0x2a>
 800d7c4:	1f0c      	subs	r4, r1, #4
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	da00      	bge.n	800d7ce <_free_r+0x12>
 800d7cc:	18e4      	adds	r4, r4, r3
 800d7ce:	0028      	movs	r0, r5
 800d7d0:	f000 f908 	bl	800d9e4 <__malloc_lock>
 800d7d4:	4a1d      	ldr	r2, [pc, #116]	; (800d84c <_free_r+0x90>)
 800d7d6:	6813      	ldr	r3, [r2, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d105      	bne.n	800d7e8 <_free_r+0x2c>
 800d7dc:	6063      	str	r3, [r4, #4]
 800d7de:	6014      	str	r4, [r2, #0]
 800d7e0:	0028      	movs	r0, r5
 800d7e2:	f000 f907 	bl	800d9f4 <__malloc_unlock>
 800d7e6:	bd70      	pop	{r4, r5, r6, pc}
 800d7e8:	42a3      	cmp	r3, r4
 800d7ea:	d908      	bls.n	800d7fe <_free_r+0x42>
 800d7ec:	6821      	ldr	r1, [r4, #0]
 800d7ee:	1860      	adds	r0, r4, r1
 800d7f0:	4283      	cmp	r3, r0
 800d7f2:	d1f3      	bne.n	800d7dc <_free_r+0x20>
 800d7f4:	6818      	ldr	r0, [r3, #0]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	1841      	adds	r1, r0, r1
 800d7fa:	6021      	str	r1, [r4, #0]
 800d7fc:	e7ee      	b.n	800d7dc <_free_r+0x20>
 800d7fe:	001a      	movs	r2, r3
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d001      	beq.n	800d80a <_free_r+0x4e>
 800d806:	42a3      	cmp	r3, r4
 800d808:	d9f9      	bls.n	800d7fe <_free_r+0x42>
 800d80a:	6811      	ldr	r1, [r2, #0]
 800d80c:	1850      	adds	r0, r2, r1
 800d80e:	42a0      	cmp	r0, r4
 800d810:	d10b      	bne.n	800d82a <_free_r+0x6e>
 800d812:	6820      	ldr	r0, [r4, #0]
 800d814:	1809      	adds	r1, r1, r0
 800d816:	1850      	adds	r0, r2, r1
 800d818:	6011      	str	r1, [r2, #0]
 800d81a:	4283      	cmp	r3, r0
 800d81c:	d1e0      	bne.n	800d7e0 <_free_r+0x24>
 800d81e:	6818      	ldr	r0, [r3, #0]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	1841      	adds	r1, r0, r1
 800d824:	6011      	str	r1, [r2, #0]
 800d826:	6053      	str	r3, [r2, #4]
 800d828:	e7da      	b.n	800d7e0 <_free_r+0x24>
 800d82a:	42a0      	cmp	r0, r4
 800d82c:	d902      	bls.n	800d834 <_free_r+0x78>
 800d82e:	230c      	movs	r3, #12
 800d830:	602b      	str	r3, [r5, #0]
 800d832:	e7d5      	b.n	800d7e0 <_free_r+0x24>
 800d834:	6821      	ldr	r1, [r4, #0]
 800d836:	1860      	adds	r0, r4, r1
 800d838:	4283      	cmp	r3, r0
 800d83a:	d103      	bne.n	800d844 <_free_r+0x88>
 800d83c:	6818      	ldr	r0, [r3, #0]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	1841      	adds	r1, r0, r1
 800d842:	6021      	str	r1, [r4, #0]
 800d844:	6063      	str	r3, [r4, #4]
 800d846:	6054      	str	r4, [r2, #4]
 800d848:	e7ca      	b.n	800d7e0 <_free_r+0x24>
 800d84a:	46c0      	nop			; (mov r8, r8)
 800d84c:	200015cc 	.word	0x200015cc

0800d850 <sbrk_aligned>:
 800d850:	b570      	push	{r4, r5, r6, lr}
 800d852:	4e0f      	ldr	r6, [pc, #60]	; (800d890 <sbrk_aligned+0x40>)
 800d854:	000d      	movs	r5, r1
 800d856:	6831      	ldr	r1, [r6, #0]
 800d858:	0004      	movs	r4, r0
 800d85a:	2900      	cmp	r1, #0
 800d85c:	d102      	bne.n	800d864 <sbrk_aligned+0x14>
 800d85e:	f000 f88f 	bl	800d980 <_sbrk_r>
 800d862:	6030      	str	r0, [r6, #0]
 800d864:	0029      	movs	r1, r5
 800d866:	0020      	movs	r0, r4
 800d868:	f000 f88a 	bl	800d980 <_sbrk_r>
 800d86c:	1c43      	adds	r3, r0, #1
 800d86e:	d00a      	beq.n	800d886 <sbrk_aligned+0x36>
 800d870:	2303      	movs	r3, #3
 800d872:	1cc5      	adds	r5, r0, #3
 800d874:	439d      	bics	r5, r3
 800d876:	42a8      	cmp	r0, r5
 800d878:	d007      	beq.n	800d88a <sbrk_aligned+0x3a>
 800d87a:	1a29      	subs	r1, r5, r0
 800d87c:	0020      	movs	r0, r4
 800d87e:	f000 f87f 	bl	800d980 <_sbrk_r>
 800d882:	1c43      	adds	r3, r0, #1
 800d884:	d101      	bne.n	800d88a <sbrk_aligned+0x3a>
 800d886:	2501      	movs	r5, #1
 800d888:	426d      	negs	r5, r5
 800d88a:	0028      	movs	r0, r5
 800d88c:	bd70      	pop	{r4, r5, r6, pc}
 800d88e:	46c0      	nop			; (mov r8, r8)
 800d890:	200015d0 	.word	0x200015d0

0800d894 <_malloc_r>:
 800d894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d896:	2203      	movs	r2, #3
 800d898:	1ccb      	adds	r3, r1, #3
 800d89a:	4393      	bics	r3, r2
 800d89c:	3308      	adds	r3, #8
 800d89e:	0006      	movs	r6, r0
 800d8a0:	001f      	movs	r7, r3
 800d8a2:	2b0c      	cmp	r3, #12
 800d8a4:	d232      	bcs.n	800d90c <_malloc_r+0x78>
 800d8a6:	270c      	movs	r7, #12
 800d8a8:	42b9      	cmp	r1, r7
 800d8aa:	d831      	bhi.n	800d910 <_malloc_r+0x7c>
 800d8ac:	0030      	movs	r0, r6
 800d8ae:	f000 f899 	bl	800d9e4 <__malloc_lock>
 800d8b2:	4d32      	ldr	r5, [pc, #200]	; (800d97c <_malloc_r+0xe8>)
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	001c      	movs	r4, r3
 800d8b8:	2c00      	cmp	r4, #0
 800d8ba:	d12e      	bne.n	800d91a <_malloc_r+0x86>
 800d8bc:	0039      	movs	r1, r7
 800d8be:	0030      	movs	r0, r6
 800d8c0:	f7ff ffc6 	bl	800d850 <sbrk_aligned>
 800d8c4:	0004      	movs	r4, r0
 800d8c6:	1c43      	adds	r3, r0, #1
 800d8c8:	d11e      	bne.n	800d908 <_malloc_r+0x74>
 800d8ca:	682c      	ldr	r4, [r5, #0]
 800d8cc:	0025      	movs	r5, r4
 800d8ce:	2d00      	cmp	r5, #0
 800d8d0:	d14a      	bne.n	800d968 <_malloc_r+0xd4>
 800d8d2:	6823      	ldr	r3, [r4, #0]
 800d8d4:	0029      	movs	r1, r5
 800d8d6:	18e3      	adds	r3, r4, r3
 800d8d8:	0030      	movs	r0, r6
 800d8da:	9301      	str	r3, [sp, #4]
 800d8dc:	f000 f850 	bl	800d980 <_sbrk_r>
 800d8e0:	9b01      	ldr	r3, [sp, #4]
 800d8e2:	4283      	cmp	r3, r0
 800d8e4:	d143      	bne.n	800d96e <_malloc_r+0xda>
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	3703      	adds	r7, #3
 800d8ea:	1aff      	subs	r7, r7, r3
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	439f      	bics	r7, r3
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	2f0c      	cmp	r7, #12
 800d8f4:	d200      	bcs.n	800d8f8 <_malloc_r+0x64>
 800d8f6:	270c      	movs	r7, #12
 800d8f8:	0039      	movs	r1, r7
 800d8fa:	0030      	movs	r0, r6
 800d8fc:	f7ff ffa8 	bl	800d850 <sbrk_aligned>
 800d900:	1c43      	adds	r3, r0, #1
 800d902:	d034      	beq.n	800d96e <_malloc_r+0xda>
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	19df      	adds	r7, r3, r7
 800d908:	6027      	str	r7, [r4, #0]
 800d90a:	e013      	b.n	800d934 <_malloc_r+0xa0>
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	dacb      	bge.n	800d8a8 <_malloc_r+0x14>
 800d910:	230c      	movs	r3, #12
 800d912:	2500      	movs	r5, #0
 800d914:	6033      	str	r3, [r6, #0]
 800d916:	0028      	movs	r0, r5
 800d918:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d91a:	6822      	ldr	r2, [r4, #0]
 800d91c:	1bd1      	subs	r1, r2, r7
 800d91e:	d420      	bmi.n	800d962 <_malloc_r+0xce>
 800d920:	290b      	cmp	r1, #11
 800d922:	d917      	bls.n	800d954 <_malloc_r+0xc0>
 800d924:	19e2      	adds	r2, r4, r7
 800d926:	6027      	str	r7, [r4, #0]
 800d928:	42a3      	cmp	r3, r4
 800d92a:	d111      	bne.n	800d950 <_malloc_r+0xbc>
 800d92c:	602a      	str	r2, [r5, #0]
 800d92e:	6863      	ldr	r3, [r4, #4]
 800d930:	6011      	str	r1, [r2, #0]
 800d932:	6053      	str	r3, [r2, #4]
 800d934:	0030      	movs	r0, r6
 800d936:	0025      	movs	r5, r4
 800d938:	f000 f85c 	bl	800d9f4 <__malloc_unlock>
 800d93c:	2207      	movs	r2, #7
 800d93e:	350b      	adds	r5, #11
 800d940:	1d23      	adds	r3, r4, #4
 800d942:	4395      	bics	r5, r2
 800d944:	1aea      	subs	r2, r5, r3
 800d946:	429d      	cmp	r5, r3
 800d948:	d0e5      	beq.n	800d916 <_malloc_r+0x82>
 800d94a:	1b5b      	subs	r3, r3, r5
 800d94c:	50a3      	str	r3, [r4, r2]
 800d94e:	e7e2      	b.n	800d916 <_malloc_r+0x82>
 800d950:	605a      	str	r2, [r3, #4]
 800d952:	e7ec      	b.n	800d92e <_malloc_r+0x9a>
 800d954:	6862      	ldr	r2, [r4, #4]
 800d956:	42a3      	cmp	r3, r4
 800d958:	d101      	bne.n	800d95e <_malloc_r+0xca>
 800d95a:	602a      	str	r2, [r5, #0]
 800d95c:	e7ea      	b.n	800d934 <_malloc_r+0xa0>
 800d95e:	605a      	str	r2, [r3, #4]
 800d960:	e7e8      	b.n	800d934 <_malloc_r+0xa0>
 800d962:	0023      	movs	r3, r4
 800d964:	6864      	ldr	r4, [r4, #4]
 800d966:	e7a7      	b.n	800d8b8 <_malloc_r+0x24>
 800d968:	002c      	movs	r4, r5
 800d96a:	686d      	ldr	r5, [r5, #4]
 800d96c:	e7af      	b.n	800d8ce <_malloc_r+0x3a>
 800d96e:	230c      	movs	r3, #12
 800d970:	0030      	movs	r0, r6
 800d972:	6033      	str	r3, [r6, #0]
 800d974:	f000 f83e 	bl	800d9f4 <__malloc_unlock>
 800d978:	e7cd      	b.n	800d916 <_malloc_r+0x82>
 800d97a:	46c0      	nop			; (mov r8, r8)
 800d97c:	200015cc 	.word	0x200015cc

0800d980 <_sbrk_r>:
 800d980:	2300      	movs	r3, #0
 800d982:	b570      	push	{r4, r5, r6, lr}
 800d984:	4d06      	ldr	r5, [pc, #24]	; (800d9a0 <_sbrk_r+0x20>)
 800d986:	0004      	movs	r4, r0
 800d988:	0008      	movs	r0, r1
 800d98a:	602b      	str	r3, [r5, #0]
 800d98c:	f7f5 f9bc 	bl	8002d08 <_sbrk>
 800d990:	1c43      	adds	r3, r0, #1
 800d992:	d103      	bne.n	800d99c <_sbrk_r+0x1c>
 800d994:	682b      	ldr	r3, [r5, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d000      	beq.n	800d99c <_sbrk_r+0x1c>
 800d99a:	6023      	str	r3, [r4, #0]
 800d99c:	bd70      	pop	{r4, r5, r6, pc}
 800d99e:	46c0      	nop			; (mov r8, r8)
 800d9a0:	200015d4 	.word	0x200015d4

0800d9a4 <siprintf>:
 800d9a4:	b40e      	push	{r1, r2, r3}
 800d9a6:	b500      	push	{lr}
 800d9a8:	490b      	ldr	r1, [pc, #44]	; (800d9d8 <siprintf+0x34>)
 800d9aa:	b09c      	sub	sp, #112	; 0x70
 800d9ac:	ab1d      	add	r3, sp, #116	; 0x74
 800d9ae:	9002      	str	r0, [sp, #8]
 800d9b0:	9006      	str	r0, [sp, #24]
 800d9b2:	9107      	str	r1, [sp, #28]
 800d9b4:	9104      	str	r1, [sp, #16]
 800d9b6:	4809      	ldr	r0, [pc, #36]	; (800d9dc <siprintf+0x38>)
 800d9b8:	4909      	ldr	r1, [pc, #36]	; (800d9e0 <siprintf+0x3c>)
 800d9ba:	cb04      	ldmia	r3!, {r2}
 800d9bc:	9105      	str	r1, [sp, #20]
 800d9be:	6800      	ldr	r0, [r0, #0]
 800d9c0:	a902      	add	r1, sp, #8
 800d9c2:	9301      	str	r3, [sp, #4]
 800d9c4:	f000 f880 	bl	800dac8 <_svfiprintf_r>
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	9a02      	ldr	r2, [sp, #8]
 800d9cc:	7013      	strb	r3, [r2, #0]
 800d9ce:	b01c      	add	sp, #112	; 0x70
 800d9d0:	bc08      	pop	{r3}
 800d9d2:	b003      	add	sp, #12
 800d9d4:	4718      	bx	r3
 800d9d6:	46c0      	nop			; (mov r8, r8)
 800d9d8:	7fffffff 	.word	0x7fffffff
 800d9dc:	2000017c 	.word	0x2000017c
 800d9e0:	ffff0208 	.word	0xffff0208

0800d9e4 <__malloc_lock>:
 800d9e4:	b510      	push	{r4, lr}
 800d9e6:	4802      	ldr	r0, [pc, #8]	; (800d9f0 <__malloc_lock+0xc>)
 800d9e8:	f000 faf0 	bl	800dfcc <__retarget_lock_acquire_recursive>
 800d9ec:	bd10      	pop	{r4, pc}
 800d9ee:	46c0      	nop			; (mov r8, r8)
 800d9f0:	200015d8 	.word	0x200015d8

0800d9f4 <__malloc_unlock>:
 800d9f4:	b510      	push	{r4, lr}
 800d9f6:	4802      	ldr	r0, [pc, #8]	; (800da00 <__malloc_unlock+0xc>)
 800d9f8:	f000 fae9 	bl	800dfce <__retarget_lock_release_recursive>
 800d9fc:	bd10      	pop	{r4, pc}
 800d9fe:	46c0      	nop			; (mov r8, r8)
 800da00:	200015d8 	.word	0x200015d8

0800da04 <__ssputs_r>:
 800da04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da06:	688e      	ldr	r6, [r1, #8]
 800da08:	b085      	sub	sp, #20
 800da0a:	0007      	movs	r7, r0
 800da0c:	000c      	movs	r4, r1
 800da0e:	9203      	str	r2, [sp, #12]
 800da10:	9301      	str	r3, [sp, #4]
 800da12:	429e      	cmp	r6, r3
 800da14:	d83c      	bhi.n	800da90 <__ssputs_r+0x8c>
 800da16:	2390      	movs	r3, #144	; 0x90
 800da18:	898a      	ldrh	r2, [r1, #12]
 800da1a:	00db      	lsls	r3, r3, #3
 800da1c:	421a      	tst	r2, r3
 800da1e:	d034      	beq.n	800da8a <__ssputs_r+0x86>
 800da20:	6909      	ldr	r1, [r1, #16]
 800da22:	6823      	ldr	r3, [r4, #0]
 800da24:	6960      	ldr	r0, [r4, #20]
 800da26:	1a5b      	subs	r3, r3, r1
 800da28:	9302      	str	r3, [sp, #8]
 800da2a:	2303      	movs	r3, #3
 800da2c:	4343      	muls	r3, r0
 800da2e:	0fdd      	lsrs	r5, r3, #31
 800da30:	18ed      	adds	r5, r5, r3
 800da32:	9b01      	ldr	r3, [sp, #4]
 800da34:	9802      	ldr	r0, [sp, #8]
 800da36:	3301      	adds	r3, #1
 800da38:	181b      	adds	r3, r3, r0
 800da3a:	106d      	asrs	r5, r5, #1
 800da3c:	42ab      	cmp	r3, r5
 800da3e:	d900      	bls.n	800da42 <__ssputs_r+0x3e>
 800da40:	001d      	movs	r5, r3
 800da42:	0553      	lsls	r3, r2, #21
 800da44:	d532      	bpl.n	800daac <__ssputs_r+0xa8>
 800da46:	0029      	movs	r1, r5
 800da48:	0038      	movs	r0, r7
 800da4a:	f7ff ff23 	bl	800d894 <_malloc_r>
 800da4e:	1e06      	subs	r6, r0, #0
 800da50:	d109      	bne.n	800da66 <__ssputs_r+0x62>
 800da52:	230c      	movs	r3, #12
 800da54:	603b      	str	r3, [r7, #0]
 800da56:	2340      	movs	r3, #64	; 0x40
 800da58:	2001      	movs	r0, #1
 800da5a:	89a2      	ldrh	r2, [r4, #12]
 800da5c:	4240      	negs	r0, r0
 800da5e:	4313      	orrs	r3, r2
 800da60:	81a3      	strh	r3, [r4, #12]
 800da62:	b005      	add	sp, #20
 800da64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da66:	9a02      	ldr	r2, [sp, #8]
 800da68:	6921      	ldr	r1, [r4, #16]
 800da6a:	f7ff fe95 	bl	800d798 <memcpy>
 800da6e:	89a3      	ldrh	r3, [r4, #12]
 800da70:	4a14      	ldr	r2, [pc, #80]	; (800dac4 <__ssputs_r+0xc0>)
 800da72:	401a      	ands	r2, r3
 800da74:	2380      	movs	r3, #128	; 0x80
 800da76:	4313      	orrs	r3, r2
 800da78:	81a3      	strh	r3, [r4, #12]
 800da7a:	9b02      	ldr	r3, [sp, #8]
 800da7c:	6126      	str	r6, [r4, #16]
 800da7e:	18f6      	adds	r6, r6, r3
 800da80:	6026      	str	r6, [r4, #0]
 800da82:	6165      	str	r5, [r4, #20]
 800da84:	9e01      	ldr	r6, [sp, #4]
 800da86:	1aed      	subs	r5, r5, r3
 800da88:	60a5      	str	r5, [r4, #8]
 800da8a:	9b01      	ldr	r3, [sp, #4]
 800da8c:	429e      	cmp	r6, r3
 800da8e:	d900      	bls.n	800da92 <__ssputs_r+0x8e>
 800da90:	9e01      	ldr	r6, [sp, #4]
 800da92:	0032      	movs	r2, r6
 800da94:	9903      	ldr	r1, [sp, #12]
 800da96:	6820      	ldr	r0, [r4, #0]
 800da98:	f000 faa5 	bl	800dfe6 <memmove>
 800da9c:	68a3      	ldr	r3, [r4, #8]
 800da9e:	2000      	movs	r0, #0
 800daa0:	1b9b      	subs	r3, r3, r6
 800daa2:	60a3      	str	r3, [r4, #8]
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	199e      	adds	r6, r3, r6
 800daa8:	6026      	str	r6, [r4, #0]
 800daaa:	e7da      	b.n	800da62 <__ssputs_r+0x5e>
 800daac:	002a      	movs	r2, r5
 800daae:	0038      	movs	r0, r7
 800dab0:	f000 faac 	bl	800e00c <_realloc_r>
 800dab4:	1e06      	subs	r6, r0, #0
 800dab6:	d1e0      	bne.n	800da7a <__ssputs_r+0x76>
 800dab8:	0038      	movs	r0, r7
 800daba:	6921      	ldr	r1, [r4, #16]
 800dabc:	f7ff fe7e 	bl	800d7bc <_free_r>
 800dac0:	e7c7      	b.n	800da52 <__ssputs_r+0x4e>
 800dac2:	46c0      	nop			; (mov r8, r8)
 800dac4:	fffffb7f 	.word	0xfffffb7f

0800dac8 <_svfiprintf_r>:
 800dac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daca:	b0a1      	sub	sp, #132	; 0x84
 800dacc:	9003      	str	r0, [sp, #12]
 800dace:	001d      	movs	r5, r3
 800dad0:	898b      	ldrh	r3, [r1, #12]
 800dad2:	000f      	movs	r7, r1
 800dad4:	0016      	movs	r6, r2
 800dad6:	061b      	lsls	r3, r3, #24
 800dad8:	d511      	bpl.n	800dafe <_svfiprintf_r+0x36>
 800dada:	690b      	ldr	r3, [r1, #16]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10e      	bne.n	800dafe <_svfiprintf_r+0x36>
 800dae0:	2140      	movs	r1, #64	; 0x40
 800dae2:	f7ff fed7 	bl	800d894 <_malloc_r>
 800dae6:	6038      	str	r0, [r7, #0]
 800dae8:	6138      	str	r0, [r7, #16]
 800daea:	2800      	cmp	r0, #0
 800daec:	d105      	bne.n	800dafa <_svfiprintf_r+0x32>
 800daee:	230c      	movs	r3, #12
 800daf0:	9a03      	ldr	r2, [sp, #12]
 800daf2:	3801      	subs	r0, #1
 800daf4:	6013      	str	r3, [r2, #0]
 800daf6:	b021      	add	sp, #132	; 0x84
 800daf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dafa:	2340      	movs	r3, #64	; 0x40
 800dafc:	617b      	str	r3, [r7, #20]
 800dafe:	2300      	movs	r3, #0
 800db00:	ac08      	add	r4, sp, #32
 800db02:	6163      	str	r3, [r4, #20]
 800db04:	3320      	adds	r3, #32
 800db06:	7663      	strb	r3, [r4, #25]
 800db08:	3310      	adds	r3, #16
 800db0a:	76a3      	strb	r3, [r4, #26]
 800db0c:	9507      	str	r5, [sp, #28]
 800db0e:	0035      	movs	r5, r6
 800db10:	782b      	ldrb	r3, [r5, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d001      	beq.n	800db1a <_svfiprintf_r+0x52>
 800db16:	2b25      	cmp	r3, #37	; 0x25
 800db18:	d147      	bne.n	800dbaa <_svfiprintf_r+0xe2>
 800db1a:	1bab      	subs	r3, r5, r6
 800db1c:	9305      	str	r3, [sp, #20]
 800db1e:	42b5      	cmp	r5, r6
 800db20:	d00c      	beq.n	800db3c <_svfiprintf_r+0x74>
 800db22:	0032      	movs	r2, r6
 800db24:	0039      	movs	r1, r7
 800db26:	9803      	ldr	r0, [sp, #12]
 800db28:	f7ff ff6c 	bl	800da04 <__ssputs_r>
 800db2c:	1c43      	adds	r3, r0, #1
 800db2e:	d100      	bne.n	800db32 <_svfiprintf_r+0x6a>
 800db30:	e0ae      	b.n	800dc90 <_svfiprintf_r+0x1c8>
 800db32:	6962      	ldr	r2, [r4, #20]
 800db34:	9b05      	ldr	r3, [sp, #20]
 800db36:	4694      	mov	ip, r2
 800db38:	4463      	add	r3, ip
 800db3a:	6163      	str	r3, [r4, #20]
 800db3c:	782b      	ldrb	r3, [r5, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d100      	bne.n	800db44 <_svfiprintf_r+0x7c>
 800db42:	e0a5      	b.n	800dc90 <_svfiprintf_r+0x1c8>
 800db44:	2201      	movs	r2, #1
 800db46:	2300      	movs	r3, #0
 800db48:	4252      	negs	r2, r2
 800db4a:	6062      	str	r2, [r4, #4]
 800db4c:	a904      	add	r1, sp, #16
 800db4e:	3254      	adds	r2, #84	; 0x54
 800db50:	1852      	adds	r2, r2, r1
 800db52:	1c6e      	adds	r6, r5, #1
 800db54:	6023      	str	r3, [r4, #0]
 800db56:	60e3      	str	r3, [r4, #12]
 800db58:	60a3      	str	r3, [r4, #8]
 800db5a:	7013      	strb	r3, [r2, #0]
 800db5c:	65a3      	str	r3, [r4, #88]	; 0x58
 800db5e:	2205      	movs	r2, #5
 800db60:	7831      	ldrb	r1, [r6, #0]
 800db62:	4854      	ldr	r0, [pc, #336]	; (800dcb4 <_svfiprintf_r+0x1ec>)
 800db64:	f000 fa34 	bl	800dfd0 <memchr>
 800db68:	1c75      	adds	r5, r6, #1
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d11f      	bne.n	800dbae <_svfiprintf_r+0xe6>
 800db6e:	6822      	ldr	r2, [r4, #0]
 800db70:	06d3      	lsls	r3, r2, #27
 800db72:	d504      	bpl.n	800db7e <_svfiprintf_r+0xb6>
 800db74:	2353      	movs	r3, #83	; 0x53
 800db76:	a904      	add	r1, sp, #16
 800db78:	185b      	adds	r3, r3, r1
 800db7a:	2120      	movs	r1, #32
 800db7c:	7019      	strb	r1, [r3, #0]
 800db7e:	0713      	lsls	r3, r2, #28
 800db80:	d504      	bpl.n	800db8c <_svfiprintf_r+0xc4>
 800db82:	2353      	movs	r3, #83	; 0x53
 800db84:	a904      	add	r1, sp, #16
 800db86:	185b      	adds	r3, r3, r1
 800db88:	212b      	movs	r1, #43	; 0x2b
 800db8a:	7019      	strb	r1, [r3, #0]
 800db8c:	7833      	ldrb	r3, [r6, #0]
 800db8e:	2b2a      	cmp	r3, #42	; 0x2a
 800db90:	d016      	beq.n	800dbc0 <_svfiprintf_r+0xf8>
 800db92:	0035      	movs	r5, r6
 800db94:	2100      	movs	r1, #0
 800db96:	200a      	movs	r0, #10
 800db98:	68e3      	ldr	r3, [r4, #12]
 800db9a:	782a      	ldrb	r2, [r5, #0]
 800db9c:	1c6e      	adds	r6, r5, #1
 800db9e:	3a30      	subs	r2, #48	; 0x30
 800dba0:	2a09      	cmp	r2, #9
 800dba2:	d94e      	bls.n	800dc42 <_svfiprintf_r+0x17a>
 800dba4:	2900      	cmp	r1, #0
 800dba6:	d111      	bne.n	800dbcc <_svfiprintf_r+0x104>
 800dba8:	e017      	b.n	800dbda <_svfiprintf_r+0x112>
 800dbaa:	3501      	adds	r5, #1
 800dbac:	e7b0      	b.n	800db10 <_svfiprintf_r+0x48>
 800dbae:	4b41      	ldr	r3, [pc, #260]	; (800dcb4 <_svfiprintf_r+0x1ec>)
 800dbb0:	6822      	ldr	r2, [r4, #0]
 800dbb2:	1ac0      	subs	r0, r0, r3
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	4083      	lsls	r3, r0
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	002e      	movs	r6, r5
 800dbbc:	6023      	str	r3, [r4, #0]
 800dbbe:	e7ce      	b.n	800db5e <_svfiprintf_r+0x96>
 800dbc0:	9b07      	ldr	r3, [sp, #28]
 800dbc2:	1d19      	adds	r1, r3, #4
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	9107      	str	r1, [sp, #28]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	db01      	blt.n	800dbd0 <_svfiprintf_r+0x108>
 800dbcc:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbce:	e004      	b.n	800dbda <_svfiprintf_r+0x112>
 800dbd0:	425b      	negs	r3, r3
 800dbd2:	60e3      	str	r3, [r4, #12]
 800dbd4:	2302      	movs	r3, #2
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	6023      	str	r3, [r4, #0]
 800dbda:	782b      	ldrb	r3, [r5, #0]
 800dbdc:	2b2e      	cmp	r3, #46	; 0x2e
 800dbde:	d10a      	bne.n	800dbf6 <_svfiprintf_r+0x12e>
 800dbe0:	786b      	ldrb	r3, [r5, #1]
 800dbe2:	2b2a      	cmp	r3, #42	; 0x2a
 800dbe4:	d135      	bne.n	800dc52 <_svfiprintf_r+0x18a>
 800dbe6:	9b07      	ldr	r3, [sp, #28]
 800dbe8:	3502      	adds	r5, #2
 800dbea:	1d1a      	adds	r2, r3, #4
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	9207      	str	r2, [sp, #28]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	db2b      	blt.n	800dc4c <_svfiprintf_r+0x184>
 800dbf4:	9309      	str	r3, [sp, #36]	; 0x24
 800dbf6:	4e30      	ldr	r6, [pc, #192]	; (800dcb8 <_svfiprintf_r+0x1f0>)
 800dbf8:	2203      	movs	r2, #3
 800dbfa:	0030      	movs	r0, r6
 800dbfc:	7829      	ldrb	r1, [r5, #0]
 800dbfe:	f000 f9e7 	bl	800dfd0 <memchr>
 800dc02:	2800      	cmp	r0, #0
 800dc04:	d006      	beq.n	800dc14 <_svfiprintf_r+0x14c>
 800dc06:	2340      	movs	r3, #64	; 0x40
 800dc08:	1b80      	subs	r0, r0, r6
 800dc0a:	4083      	lsls	r3, r0
 800dc0c:	6822      	ldr	r2, [r4, #0]
 800dc0e:	3501      	adds	r5, #1
 800dc10:	4313      	orrs	r3, r2
 800dc12:	6023      	str	r3, [r4, #0]
 800dc14:	7829      	ldrb	r1, [r5, #0]
 800dc16:	2206      	movs	r2, #6
 800dc18:	4828      	ldr	r0, [pc, #160]	; (800dcbc <_svfiprintf_r+0x1f4>)
 800dc1a:	1c6e      	adds	r6, r5, #1
 800dc1c:	7621      	strb	r1, [r4, #24]
 800dc1e:	f000 f9d7 	bl	800dfd0 <memchr>
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d03c      	beq.n	800dca0 <_svfiprintf_r+0x1d8>
 800dc26:	4b26      	ldr	r3, [pc, #152]	; (800dcc0 <_svfiprintf_r+0x1f8>)
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d125      	bne.n	800dc78 <_svfiprintf_r+0x1b0>
 800dc2c:	2207      	movs	r2, #7
 800dc2e:	9b07      	ldr	r3, [sp, #28]
 800dc30:	3307      	adds	r3, #7
 800dc32:	4393      	bics	r3, r2
 800dc34:	3308      	adds	r3, #8
 800dc36:	9307      	str	r3, [sp, #28]
 800dc38:	6963      	ldr	r3, [r4, #20]
 800dc3a:	9a04      	ldr	r2, [sp, #16]
 800dc3c:	189b      	adds	r3, r3, r2
 800dc3e:	6163      	str	r3, [r4, #20]
 800dc40:	e765      	b.n	800db0e <_svfiprintf_r+0x46>
 800dc42:	4343      	muls	r3, r0
 800dc44:	0035      	movs	r5, r6
 800dc46:	2101      	movs	r1, #1
 800dc48:	189b      	adds	r3, r3, r2
 800dc4a:	e7a6      	b.n	800db9a <_svfiprintf_r+0xd2>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	425b      	negs	r3, r3
 800dc50:	e7d0      	b.n	800dbf4 <_svfiprintf_r+0x12c>
 800dc52:	2300      	movs	r3, #0
 800dc54:	200a      	movs	r0, #10
 800dc56:	001a      	movs	r2, r3
 800dc58:	3501      	adds	r5, #1
 800dc5a:	6063      	str	r3, [r4, #4]
 800dc5c:	7829      	ldrb	r1, [r5, #0]
 800dc5e:	1c6e      	adds	r6, r5, #1
 800dc60:	3930      	subs	r1, #48	; 0x30
 800dc62:	2909      	cmp	r1, #9
 800dc64:	d903      	bls.n	800dc6e <_svfiprintf_r+0x1a6>
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d0c5      	beq.n	800dbf6 <_svfiprintf_r+0x12e>
 800dc6a:	9209      	str	r2, [sp, #36]	; 0x24
 800dc6c:	e7c3      	b.n	800dbf6 <_svfiprintf_r+0x12e>
 800dc6e:	4342      	muls	r2, r0
 800dc70:	0035      	movs	r5, r6
 800dc72:	2301      	movs	r3, #1
 800dc74:	1852      	adds	r2, r2, r1
 800dc76:	e7f1      	b.n	800dc5c <_svfiprintf_r+0x194>
 800dc78:	ab07      	add	r3, sp, #28
 800dc7a:	9300      	str	r3, [sp, #0]
 800dc7c:	003a      	movs	r2, r7
 800dc7e:	0021      	movs	r1, r4
 800dc80:	4b10      	ldr	r3, [pc, #64]	; (800dcc4 <_svfiprintf_r+0x1fc>)
 800dc82:	9803      	ldr	r0, [sp, #12]
 800dc84:	e000      	b.n	800dc88 <_svfiprintf_r+0x1c0>
 800dc86:	bf00      	nop
 800dc88:	9004      	str	r0, [sp, #16]
 800dc8a:	9b04      	ldr	r3, [sp, #16]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	d1d3      	bne.n	800dc38 <_svfiprintf_r+0x170>
 800dc90:	89bb      	ldrh	r3, [r7, #12]
 800dc92:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dc94:	065b      	lsls	r3, r3, #25
 800dc96:	d400      	bmi.n	800dc9a <_svfiprintf_r+0x1d2>
 800dc98:	e72d      	b.n	800daf6 <_svfiprintf_r+0x2e>
 800dc9a:	2001      	movs	r0, #1
 800dc9c:	4240      	negs	r0, r0
 800dc9e:	e72a      	b.n	800daf6 <_svfiprintf_r+0x2e>
 800dca0:	ab07      	add	r3, sp, #28
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	003a      	movs	r2, r7
 800dca6:	0021      	movs	r1, r4
 800dca8:	4b06      	ldr	r3, [pc, #24]	; (800dcc4 <_svfiprintf_r+0x1fc>)
 800dcaa:	9803      	ldr	r0, [sp, #12]
 800dcac:	f000 f87c 	bl	800dda8 <_printf_i>
 800dcb0:	e7ea      	b.n	800dc88 <_svfiprintf_r+0x1c0>
 800dcb2:	46c0      	nop			; (mov r8, r8)
 800dcb4:	0800e3bc 	.word	0x0800e3bc
 800dcb8:	0800e3c2 	.word	0x0800e3c2
 800dcbc:	0800e3c6 	.word	0x0800e3c6
 800dcc0:	00000000 	.word	0x00000000
 800dcc4:	0800da05 	.word	0x0800da05

0800dcc8 <_printf_common>:
 800dcc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcca:	0015      	movs	r5, r2
 800dccc:	9301      	str	r3, [sp, #4]
 800dcce:	688a      	ldr	r2, [r1, #8]
 800dcd0:	690b      	ldr	r3, [r1, #16]
 800dcd2:	000c      	movs	r4, r1
 800dcd4:	9000      	str	r0, [sp, #0]
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	da00      	bge.n	800dcdc <_printf_common+0x14>
 800dcda:	0013      	movs	r3, r2
 800dcdc:	0022      	movs	r2, r4
 800dcde:	602b      	str	r3, [r5, #0]
 800dce0:	3243      	adds	r2, #67	; 0x43
 800dce2:	7812      	ldrb	r2, [r2, #0]
 800dce4:	2a00      	cmp	r2, #0
 800dce6:	d001      	beq.n	800dcec <_printf_common+0x24>
 800dce8:	3301      	adds	r3, #1
 800dcea:	602b      	str	r3, [r5, #0]
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	069b      	lsls	r3, r3, #26
 800dcf0:	d502      	bpl.n	800dcf8 <_printf_common+0x30>
 800dcf2:	682b      	ldr	r3, [r5, #0]
 800dcf4:	3302      	adds	r3, #2
 800dcf6:	602b      	str	r3, [r5, #0]
 800dcf8:	6822      	ldr	r2, [r4, #0]
 800dcfa:	2306      	movs	r3, #6
 800dcfc:	0017      	movs	r7, r2
 800dcfe:	401f      	ands	r7, r3
 800dd00:	421a      	tst	r2, r3
 800dd02:	d027      	beq.n	800dd54 <_printf_common+0x8c>
 800dd04:	0023      	movs	r3, r4
 800dd06:	3343      	adds	r3, #67	; 0x43
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	1e5a      	subs	r2, r3, #1
 800dd0c:	4193      	sbcs	r3, r2
 800dd0e:	6822      	ldr	r2, [r4, #0]
 800dd10:	0692      	lsls	r2, r2, #26
 800dd12:	d430      	bmi.n	800dd76 <_printf_common+0xae>
 800dd14:	0022      	movs	r2, r4
 800dd16:	9901      	ldr	r1, [sp, #4]
 800dd18:	9800      	ldr	r0, [sp, #0]
 800dd1a:	9e08      	ldr	r6, [sp, #32]
 800dd1c:	3243      	adds	r2, #67	; 0x43
 800dd1e:	47b0      	blx	r6
 800dd20:	1c43      	adds	r3, r0, #1
 800dd22:	d025      	beq.n	800dd70 <_printf_common+0xa8>
 800dd24:	2306      	movs	r3, #6
 800dd26:	6820      	ldr	r0, [r4, #0]
 800dd28:	682a      	ldr	r2, [r5, #0]
 800dd2a:	68e1      	ldr	r1, [r4, #12]
 800dd2c:	2500      	movs	r5, #0
 800dd2e:	4003      	ands	r3, r0
 800dd30:	2b04      	cmp	r3, #4
 800dd32:	d103      	bne.n	800dd3c <_printf_common+0x74>
 800dd34:	1a8d      	subs	r5, r1, r2
 800dd36:	43eb      	mvns	r3, r5
 800dd38:	17db      	asrs	r3, r3, #31
 800dd3a:	401d      	ands	r5, r3
 800dd3c:	68a3      	ldr	r3, [r4, #8]
 800dd3e:	6922      	ldr	r2, [r4, #16]
 800dd40:	4293      	cmp	r3, r2
 800dd42:	dd01      	ble.n	800dd48 <_printf_common+0x80>
 800dd44:	1a9b      	subs	r3, r3, r2
 800dd46:	18ed      	adds	r5, r5, r3
 800dd48:	2700      	movs	r7, #0
 800dd4a:	42bd      	cmp	r5, r7
 800dd4c:	d120      	bne.n	800dd90 <_printf_common+0xc8>
 800dd4e:	2000      	movs	r0, #0
 800dd50:	e010      	b.n	800dd74 <_printf_common+0xac>
 800dd52:	3701      	adds	r7, #1
 800dd54:	68e3      	ldr	r3, [r4, #12]
 800dd56:	682a      	ldr	r2, [r5, #0]
 800dd58:	1a9b      	subs	r3, r3, r2
 800dd5a:	42bb      	cmp	r3, r7
 800dd5c:	ddd2      	ble.n	800dd04 <_printf_common+0x3c>
 800dd5e:	0022      	movs	r2, r4
 800dd60:	2301      	movs	r3, #1
 800dd62:	9901      	ldr	r1, [sp, #4]
 800dd64:	9800      	ldr	r0, [sp, #0]
 800dd66:	9e08      	ldr	r6, [sp, #32]
 800dd68:	3219      	adds	r2, #25
 800dd6a:	47b0      	blx	r6
 800dd6c:	1c43      	adds	r3, r0, #1
 800dd6e:	d1f0      	bne.n	800dd52 <_printf_common+0x8a>
 800dd70:	2001      	movs	r0, #1
 800dd72:	4240      	negs	r0, r0
 800dd74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd76:	2030      	movs	r0, #48	; 0x30
 800dd78:	18e1      	adds	r1, r4, r3
 800dd7a:	3143      	adds	r1, #67	; 0x43
 800dd7c:	7008      	strb	r0, [r1, #0]
 800dd7e:	0021      	movs	r1, r4
 800dd80:	1c5a      	adds	r2, r3, #1
 800dd82:	3145      	adds	r1, #69	; 0x45
 800dd84:	7809      	ldrb	r1, [r1, #0]
 800dd86:	18a2      	adds	r2, r4, r2
 800dd88:	3243      	adds	r2, #67	; 0x43
 800dd8a:	3302      	adds	r3, #2
 800dd8c:	7011      	strb	r1, [r2, #0]
 800dd8e:	e7c1      	b.n	800dd14 <_printf_common+0x4c>
 800dd90:	0022      	movs	r2, r4
 800dd92:	2301      	movs	r3, #1
 800dd94:	9901      	ldr	r1, [sp, #4]
 800dd96:	9800      	ldr	r0, [sp, #0]
 800dd98:	9e08      	ldr	r6, [sp, #32]
 800dd9a:	321a      	adds	r2, #26
 800dd9c:	47b0      	blx	r6
 800dd9e:	1c43      	adds	r3, r0, #1
 800dda0:	d0e6      	beq.n	800dd70 <_printf_common+0xa8>
 800dda2:	3701      	adds	r7, #1
 800dda4:	e7d1      	b.n	800dd4a <_printf_common+0x82>
	...

0800dda8 <_printf_i>:
 800dda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddaa:	b08b      	sub	sp, #44	; 0x2c
 800ddac:	9206      	str	r2, [sp, #24]
 800ddae:	000a      	movs	r2, r1
 800ddb0:	3243      	adds	r2, #67	; 0x43
 800ddb2:	9307      	str	r3, [sp, #28]
 800ddb4:	9005      	str	r0, [sp, #20]
 800ddb6:	9204      	str	r2, [sp, #16]
 800ddb8:	7e0a      	ldrb	r2, [r1, #24]
 800ddba:	000c      	movs	r4, r1
 800ddbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ddbe:	2a78      	cmp	r2, #120	; 0x78
 800ddc0:	d807      	bhi.n	800ddd2 <_printf_i+0x2a>
 800ddc2:	2a62      	cmp	r2, #98	; 0x62
 800ddc4:	d809      	bhi.n	800ddda <_printf_i+0x32>
 800ddc6:	2a00      	cmp	r2, #0
 800ddc8:	d100      	bne.n	800ddcc <_printf_i+0x24>
 800ddca:	e0c1      	b.n	800df50 <_printf_i+0x1a8>
 800ddcc:	2a58      	cmp	r2, #88	; 0x58
 800ddce:	d100      	bne.n	800ddd2 <_printf_i+0x2a>
 800ddd0:	e08c      	b.n	800deec <_printf_i+0x144>
 800ddd2:	0026      	movs	r6, r4
 800ddd4:	3642      	adds	r6, #66	; 0x42
 800ddd6:	7032      	strb	r2, [r6, #0]
 800ddd8:	e022      	b.n	800de20 <_printf_i+0x78>
 800ddda:	0010      	movs	r0, r2
 800dddc:	3863      	subs	r0, #99	; 0x63
 800ddde:	2815      	cmp	r0, #21
 800dde0:	d8f7      	bhi.n	800ddd2 <_printf_i+0x2a>
 800dde2:	f7f2 f999 	bl	8000118 <__gnu_thumb1_case_shi>
 800dde6:	0016      	.short	0x0016
 800dde8:	fff6001f 	.word	0xfff6001f
 800ddec:	fff6fff6 	.word	0xfff6fff6
 800ddf0:	001ffff6 	.word	0x001ffff6
 800ddf4:	fff6fff6 	.word	0xfff6fff6
 800ddf8:	fff6fff6 	.word	0xfff6fff6
 800ddfc:	003600a8 	.word	0x003600a8
 800de00:	fff6009a 	.word	0xfff6009a
 800de04:	00b9fff6 	.word	0x00b9fff6
 800de08:	0036fff6 	.word	0x0036fff6
 800de0c:	fff6fff6 	.word	0xfff6fff6
 800de10:	009e      	.short	0x009e
 800de12:	0026      	movs	r6, r4
 800de14:	681a      	ldr	r2, [r3, #0]
 800de16:	3642      	adds	r6, #66	; 0x42
 800de18:	1d11      	adds	r1, r2, #4
 800de1a:	6019      	str	r1, [r3, #0]
 800de1c:	6813      	ldr	r3, [r2, #0]
 800de1e:	7033      	strb	r3, [r6, #0]
 800de20:	2301      	movs	r3, #1
 800de22:	e0a7      	b.n	800df74 <_printf_i+0x1cc>
 800de24:	6808      	ldr	r0, [r1, #0]
 800de26:	6819      	ldr	r1, [r3, #0]
 800de28:	1d0a      	adds	r2, r1, #4
 800de2a:	0605      	lsls	r5, r0, #24
 800de2c:	d50b      	bpl.n	800de46 <_printf_i+0x9e>
 800de2e:	680d      	ldr	r5, [r1, #0]
 800de30:	601a      	str	r2, [r3, #0]
 800de32:	2d00      	cmp	r5, #0
 800de34:	da03      	bge.n	800de3e <_printf_i+0x96>
 800de36:	232d      	movs	r3, #45	; 0x2d
 800de38:	9a04      	ldr	r2, [sp, #16]
 800de3a:	426d      	negs	r5, r5
 800de3c:	7013      	strb	r3, [r2, #0]
 800de3e:	4b61      	ldr	r3, [pc, #388]	; (800dfc4 <_printf_i+0x21c>)
 800de40:	270a      	movs	r7, #10
 800de42:	9303      	str	r3, [sp, #12]
 800de44:	e01b      	b.n	800de7e <_printf_i+0xd6>
 800de46:	680d      	ldr	r5, [r1, #0]
 800de48:	601a      	str	r2, [r3, #0]
 800de4a:	0641      	lsls	r1, r0, #25
 800de4c:	d5f1      	bpl.n	800de32 <_printf_i+0x8a>
 800de4e:	b22d      	sxth	r5, r5
 800de50:	e7ef      	b.n	800de32 <_printf_i+0x8a>
 800de52:	680d      	ldr	r5, [r1, #0]
 800de54:	6819      	ldr	r1, [r3, #0]
 800de56:	1d08      	adds	r0, r1, #4
 800de58:	6018      	str	r0, [r3, #0]
 800de5a:	062e      	lsls	r6, r5, #24
 800de5c:	d501      	bpl.n	800de62 <_printf_i+0xba>
 800de5e:	680d      	ldr	r5, [r1, #0]
 800de60:	e003      	b.n	800de6a <_printf_i+0xc2>
 800de62:	066d      	lsls	r5, r5, #25
 800de64:	d5fb      	bpl.n	800de5e <_printf_i+0xb6>
 800de66:	680d      	ldr	r5, [r1, #0]
 800de68:	b2ad      	uxth	r5, r5
 800de6a:	4b56      	ldr	r3, [pc, #344]	; (800dfc4 <_printf_i+0x21c>)
 800de6c:	2708      	movs	r7, #8
 800de6e:	9303      	str	r3, [sp, #12]
 800de70:	2a6f      	cmp	r2, #111	; 0x6f
 800de72:	d000      	beq.n	800de76 <_printf_i+0xce>
 800de74:	3702      	adds	r7, #2
 800de76:	0023      	movs	r3, r4
 800de78:	2200      	movs	r2, #0
 800de7a:	3343      	adds	r3, #67	; 0x43
 800de7c:	701a      	strb	r2, [r3, #0]
 800de7e:	6863      	ldr	r3, [r4, #4]
 800de80:	60a3      	str	r3, [r4, #8]
 800de82:	2b00      	cmp	r3, #0
 800de84:	db03      	blt.n	800de8e <_printf_i+0xe6>
 800de86:	2204      	movs	r2, #4
 800de88:	6821      	ldr	r1, [r4, #0]
 800de8a:	4391      	bics	r1, r2
 800de8c:	6021      	str	r1, [r4, #0]
 800de8e:	2d00      	cmp	r5, #0
 800de90:	d102      	bne.n	800de98 <_printf_i+0xf0>
 800de92:	9e04      	ldr	r6, [sp, #16]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d00c      	beq.n	800deb2 <_printf_i+0x10a>
 800de98:	9e04      	ldr	r6, [sp, #16]
 800de9a:	0028      	movs	r0, r5
 800de9c:	0039      	movs	r1, r7
 800de9e:	f7f2 f9cb 	bl	8000238 <__aeabi_uidivmod>
 800dea2:	9b03      	ldr	r3, [sp, #12]
 800dea4:	3e01      	subs	r6, #1
 800dea6:	5c5b      	ldrb	r3, [r3, r1]
 800dea8:	7033      	strb	r3, [r6, #0]
 800deaa:	002b      	movs	r3, r5
 800deac:	0005      	movs	r5, r0
 800deae:	429f      	cmp	r7, r3
 800deb0:	d9f3      	bls.n	800de9a <_printf_i+0xf2>
 800deb2:	2f08      	cmp	r7, #8
 800deb4:	d109      	bne.n	800deca <_printf_i+0x122>
 800deb6:	6823      	ldr	r3, [r4, #0]
 800deb8:	07db      	lsls	r3, r3, #31
 800deba:	d506      	bpl.n	800deca <_printf_i+0x122>
 800debc:	6863      	ldr	r3, [r4, #4]
 800debe:	6922      	ldr	r2, [r4, #16]
 800dec0:	4293      	cmp	r3, r2
 800dec2:	dc02      	bgt.n	800deca <_printf_i+0x122>
 800dec4:	2330      	movs	r3, #48	; 0x30
 800dec6:	3e01      	subs	r6, #1
 800dec8:	7033      	strb	r3, [r6, #0]
 800deca:	9b04      	ldr	r3, [sp, #16]
 800decc:	1b9b      	subs	r3, r3, r6
 800dece:	6123      	str	r3, [r4, #16]
 800ded0:	9b07      	ldr	r3, [sp, #28]
 800ded2:	0021      	movs	r1, r4
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	9805      	ldr	r0, [sp, #20]
 800ded8:	9b06      	ldr	r3, [sp, #24]
 800deda:	aa09      	add	r2, sp, #36	; 0x24
 800dedc:	f7ff fef4 	bl	800dcc8 <_printf_common>
 800dee0:	1c43      	adds	r3, r0, #1
 800dee2:	d14c      	bne.n	800df7e <_printf_i+0x1d6>
 800dee4:	2001      	movs	r0, #1
 800dee6:	4240      	negs	r0, r0
 800dee8:	b00b      	add	sp, #44	; 0x2c
 800deea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deec:	3145      	adds	r1, #69	; 0x45
 800deee:	700a      	strb	r2, [r1, #0]
 800def0:	4a34      	ldr	r2, [pc, #208]	; (800dfc4 <_printf_i+0x21c>)
 800def2:	9203      	str	r2, [sp, #12]
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	6821      	ldr	r1, [r4, #0]
 800def8:	ca20      	ldmia	r2!, {r5}
 800defa:	601a      	str	r2, [r3, #0]
 800defc:	0608      	lsls	r0, r1, #24
 800defe:	d516      	bpl.n	800df2e <_printf_i+0x186>
 800df00:	07cb      	lsls	r3, r1, #31
 800df02:	d502      	bpl.n	800df0a <_printf_i+0x162>
 800df04:	2320      	movs	r3, #32
 800df06:	4319      	orrs	r1, r3
 800df08:	6021      	str	r1, [r4, #0]
 800df0a:	2710      	movs	r7, #16
 800df0c:	2d00      	cmp	r5, #0
 800df0e:	d1b2      	bne.n	800de76 <_printf_i+0xce>
 800df10:	2320      	movs	r3, #32
 800df12:	6822      	ldr	r2, [r4, #0]
 800df14:	439a      	bics	r2, r3
 800df16:	6022      	str	r2, [r4, #0]
 800df18:	e7ad      	b.n	800de76 <_printf_i+0xce>
 800df1a:	2220      	movs	r2, #32
 800df1c:	6809      	ldr	r1, [r1, #0]
 800df1e:	430a      	orrs	r2, r1
 800df20:	6022      	str	r2, [r4, #0]
 800df22:	0022      	movs	r2, r4
 800df24:	2178      	movs	r1, #120	; 0x78
 800df26:	3245      	adds	r2, #69	; 0x45
 800df28:	7011      	strb	r1, [r2, #0]
 800df2a:	4a27      	ldr	r2, [pc, #156]	; (800dfc8 <_printf_i+0x220>)
 800df2c:	e7e1      	b.n	800def2 <_printf_i+0x14a>
 800df2e:	0648      	lsls	r0, r1, #25
 800df30:	d5e6      	bpl.n	800df00 <_printf_i+0x158>
 800df32:	b2ad      	uxth	r5, r5
 800df34:	e7e4      	b.n	800df00 <_printf_i+0x158>
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	680d      	ldr	r5, [r1, #0]
 800df3a:	1d10      	adds	r0, r2, #4
 800df3c:	6949      	ldr	r1, [r1, #20]
 800df3e:	6018      	str	r0, [r3, #0]
 800df40:	6813      	ldr	r3, [r2, #0]
 800df42:	062e      	lsls	r6, r5, #24
 800df44:	d501      	bpl.n	800df4a <_printf_i+0x1a2>
 800df46:	6019      	str	r1, [r3, #0]
 800df48:	e002      	b.n	800df50 <_printf_i+0x1a8>
 800df4a:	066d      	lsls	r5, r5, #25
 800df4c:	d5fb      	bpl.n	800df46 <_printf_i+0x19e>
 800df4e:	8019      	strh	r1, [r3, #0]
 800df50:	2300      	movs	r3, #0
 800df52:	9e04      	ldr	r6, [sp, #16]
 800df54:	6123      	str	r3, [r4, #16]
 800df56:	e7bb      	b.n	800ded0 <_printf_i+0x128>
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	1d11      	adds	r1, r2, #4
 800df5c:	6019      	str	r1, [r3, #0]
 800df5e:	6816      	ldr	r6, [r2, #0]
 800df60:	2100      	movs	r1, #0
 800df62:	0030      	movs	r0, r6
 800df64:	6862      	ldr	r2, [r4, #4]
 800df66:	f000 f833 	bl	800dfd0 <memchr>
 800df6a:	2800      	cmp	r0, #0
 800df6c:	d001      	beq.n	800df72 <_printf_i+0x1ca>
 800df6e:	1b80      	subs	r0, r0, r6
 800df70:	6060      	str	r0, [r4, #4]
 800df72:	6863      	ldr	r3, [r4, #4]
 800df74:	6123      	str	r3, [r4, #16]
 800df76:	2300      	movs	r3, #0
 800df78:	9a04      	ldr	r2, [sp, #16]
 800df7a:	7013      	strb	r3, [r2, #0]
 800df7c:	e7a8      	b.n	800ded0 <_printf_i+0x128>
 800df7e:	6923      	ldr	r3, [r4, #16]
 800df80:	0032      	movs	r2, r6
 800df82:	9906      	ldr	r1, [sp, #24]
 800df84:	9805      	ldr	r0, [sp, #20]
 800df86:	9d07      	ldr	r5, [sp, #28]
 800df88:	47a8      	blx	r5
 800df8a:	1c43      	adds	r3, r0, #1
 800df8c:	d0aa      	beq.n	800dee4 <_printf_i+0x13c>
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	079b      	lsls	r3, r3, #30
 800df92:	d415      	bmi.n	800dfc0 <_printf_i+0x218>
 800df94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df96:	68e0      	ldr	r0, [r4, #12]
 800df98:	4298      	cmp	r0, r3
 800df9a:	daa5      	bge.n	800dee8 <_printf_i+0x140>
 800df9c:	0018      	movs	r0, r3
 800df9e:	e7a3      	b.n	800dee8 <_printf_i+0x140>
 800dfa0:	0022      	movs	r2, r4
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	9906      	ldr	r1, [sp, #24]
 800dfa6:	9805      	ldr	r0, [sp, #20]
 800dfa8:	9e07      	ldr	r6, [sp, #28]
 800dfaa:	3219      	adds	r2, #25
 800dfac:	47b0      	blx	r6
 800dfae:	1c43      	adds	r3, r0, #1
 800dfb0:	d098      	beq.n	800dee4 <_printf_i+0x13c>
 800dfb2:	3501      	adds	r5, #1
 800dfb4:	68e3      	ldr	r3, [r4, #12]
 800dfb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfb8:	1a9b      	subs	r3, r3, r2
 800dfba:	42ab      	cmp	r3, r5
 800dfbc:	dcf0      	bgt.n	800dfa0 <_printf_i+0x1f8>
 800dfbe:	e7e9      	b.n	800df94 <_printf_i+0x1ec>
 800dfc0:	2500      	movs	r5, #0
 800dfc2:	e7f7      	b.n	800dfb4 <_printf_i+0x20c>
 800dfc4:	0800e3cd 	.word	0x0800e3cd
 800dfc8:	0800e3de 	.word	0x0800e3de

0800dfcc <__retarget_lock_acquire_recursive>:
 800dfcc:	4770      	bx	lr

0800dfce <__retarget_lock_release_recursive>:
 800dfce:	4770      	bx	lr

0800dfd0 <memchr>:
 800dfd0:	b2c9      	uxtb	r1, r1
 800dfd2:	1882      	adds	r2, r0, r2
 800dfd4:	4290      	cmp	r0, r2
 800dfd6:	d101      	bne.n	800dfdc <memchr+0xc>
 800dfd8:	2000      	movs	r0, #0
 800dfda:	4770      	bx	lr
 800dfdc:	7803      	ldrb	r3, [r0, #0]
 800dfde:	428b      	cmp	r3, r1
 800dfe0:	d0fb      	beq.n	800dfda <memchr+0xa>
 800dfe2:	3001      	adds	r0, #1
 800dfe4:	e7f6      	b.n	800dfd4 <memchr+0x4>

0800dfe6 <memmove>:
 800dfe6:	b510      	push	{r4, lr}
 800dfe8:	4288      	cmp	r0, r1
 800dfea:	d902      	bls.n	800dff2 <memmove+0xc>
 800dfec:	188b      	adds	r3, r1, r2
 800dfee:	4298      	cmp	r0, r3
 800dff0:	d303      	bcc.n	800dffa <memmove+0x14>
 800dff2:	2300      	movs	r3, #0
 800dff4:	e007      	b.n	800e006 <memmove+0x20>
 800dff6:	5c8b      	ldrb	r3, [r1, r2]
 800dff8:	5483      	strb	r3, [r0, r2]
 800dffa:	3a01      	subs	r2, #1
 800dffc:	d2fb      	bcs.n	800dff6 <memmove+0x10>
 800dffe:	bd10      	pop	{r4, pc}
 800e000:	5ccc      	ldrb	r4, [r1, r3]
 800e002:	54c4      	strb	r4, [r0, r3]
 800e004:	3301      	adds	r3, #1
 800e006:	429a      	cmp	r2, r3
 800e008:	d1fa      	bne.n	800e000 <memmove+0x1a>
 800e00a:	e7f8      	b.n	800dffe <memmove+0x18>

0800e00c <_realloc_r>:
 800e00c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e00e:	0007      	movs	r7, r0
 800e010:	000e      	movs	r6, r1
 800e012:	0014      	movs	r4, r2
 800e014:	2900      	cmp	r1, #0
 800e016:	d105      	bne.n	800e024 <_realloc_r+0x18>
 800e018:	0011      	movs	r1, r2
 800e01a:	f7ff fc3b 	bl	800d894 <_malloc_r>
 800e01e:	0005      	movs	r5, r0
 800e020:	0028      	movs	r0, r5
 800e022:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e024:	2a00      	cmp	r2, #0
 800e026:	d103      	bne.n	800e030 <_realloc_r+0x24>
 800e028:	f7ff fbc8 	bl	800d7bc <_free_r>
 800e02c:	0025      	movs	r5, r4
 800e02e:	e7f7      	b.n	800e020 <_realloc_r+0x14>
 800e030:	f000 f81b 	bl	800e06a <_malloc_usable_size_r>
 800e034:	9001      	str	r0, [sp, #4]
 800e036:	4284      	cmp	r4, r0
 800e038:	d803      	bhi.n	800e042 <_realloc_r+0x36>
 800e03a:	0035      	movs	r5, r6
 800e03c:	0843      	lsrs	r3, r0, #1
 800e03e:	42a3      	cmp	r3, r4
 800e040:	d3ee      	bcc.n	800e020 <_realloc_r+0x14>
 800e042:	0021      	movs	r1, r4
 800e044:	0038      	movs	r0, r7
 800e046:	f7ff fc25 	bl	800d894 <_malloc_r>
 800e04a:	1e05      	subs	r5, r0, #0
 800e04c:	d0e8      	beq.n	800e020 <_realloc_r+0x14>
 800e04e:	9b01      	ldr	r3, [sp, #4]
 800e050:	0022      	movs	r2, r4
 800e052:	429c      	cmp	r4, r3
 800e054:	d900      	bls.n	800e058 <_realloc_r+0x4c>
 800e056:	001a      	movs	r2, r3
 800e058:	0031      	movs	r1, r6
 800e05a:	0028      	movs	r0, r5
 800e05c:	f7ff fb9c 	bl	800d798 <memcpy>
 800e060:	0031      	movs	r1, r6
 800e062:	0038      	movs	r0, r7
 800e064:	f7ff fbaa 	bl	800d7bc <_free_r>
 800e068:	e7da      	b.n	800e020 <_realloc_r+0x14>

0800e06a <_malloc_usable_size_r>:
 800e06a:	1f0b      	subs	r3, r1, #4
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	1f18      	subs	r0, r3, #4
 800e070:	2b00      	cmp	r3, #0
 800e072:	da01      	bge.n	800e078 <_malloc_usable_size_r+0xe>
 800e074:	580b      	ldr	r3, [r1, r0]
 800e076:	18c0      	adds	r0, r0, r3
 800e078:	4770      	bx	lr
	...

0800e07c <_init>:
 800e07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07e:	46c0      	nop			; (mov r8, r8)
 800e080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e082:	bc08      	pop	{r3}
 800e084:	469e      	mov	lr, r3
 800e086:	4770      	bx	lr

0800e088 <_fini>:
 800e088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e08a:	46c0      	nop			; (mov r8, r8)
 800e08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e08e:	bc08      	pop	{r3}
 800e090:	469e      	mov	lr, r3
 800e092:	4770      	bx	lr
