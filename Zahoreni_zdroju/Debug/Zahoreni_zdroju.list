
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  0800d860  0800d860  0001d860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dae4  0800dae4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800dae4  0800dae4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dae4  0800dae4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dae4  0800dae4  0001dae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dae8  0800dae8  0001dae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800daec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  200001e0  0800dccc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000163c  0800dccc  0002163c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bf43  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000515b  00000000  00000000  0004c14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  000512a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001590  00000000  00000000  00052a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020725  00000000  00000000  00053fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b35  00000000  00000000  000746d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4743  00000000  00000000  0009520a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013994d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000572c  00000000  00000000  001399a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d848 	.word	0x0800d848

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800d848 	.word	0x0800d848

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	46c6      	mov	lr, r8
 800041c:	b500      	push	{lr}
 800041e:	b0a4      	sub	sp, #144	; 0x90
 8000420:	af00      	add	r7, sp, #0
	//___Ošetření plného bufferu___//
	if(USB_Rx_Buffer->status == BUFFER_FULL)
 8000422:	4bbd      	ldr	r3, [pc, #756]	; (8000718 <comHandler+0x300>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	7d1b      	ldrb	r3, [r3, #20]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d109      	bne.n	8000440 <comHandler+0x28>
	{
		flags.data_received = 0;
 800042c:	4bbb      	ldr	r3, [pc, #748]	; (800071c <comHandler+0x304>)
 800042e:	7a1a      	ldrb	r2, [r3, #8]
 8000430:	2101      	movs	r1, #1
 8000432:	438a      	bics	r2, r1
 8000434:	721a      	strb	r2, [r3, #8]
		clearBuffer(USB_Rx_Buffer);
 8000436:	4bb8      	ldr	r3, [pc, #736]	; (8000718 <comHandler+0x300>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fd68 	bl	8001f10 <clearBuffer>
	}

	//___Příjem dat___//
	if(flags.data_received)
 8000440:	4bb6      	ldr	r3, [pc, #728]	; (800071c <comHandler+0x304>)
 8000442:	7a1b      	ldrb	r3, [r3, #8]
 8000444:	2201      	movs	r2, #1
 8000446:	4013      	ands	r3, r2
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	d100      	bne.n	8000450 <comHandler+0x38>
 800044e:	e0d0      	b.n	80005f2 <comHandler+0x1da>
	{
		int start = 0;	//flag o nalezení počátku paketu
 8000450:	2300      	movs	r3, #0
 8000452:	67fb      	str	r3, [r7, #124]	; 0x7c

		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000454:	2300      	movs	r3, #0
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	18ba      	adds	r2, r7, r2
 800045a:	6013      	str	r3, [r2, #0]
 800045c:	e04b      	b.n	80004f6 <comHandler+0xde>
		{
			//Přečti znaky na pozici i a i+1
			char tmp1, tmp2;
			at(USB_Rx_Buffer, i, &tmp1);
 800045e:	4bae      	ldr	r3, [pc, #696]	; (8000718 <comHandler+0x300>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	264b      	movs	r6, #75	; 0x4b
 8000464:	2218      	movs	r2, #24
 8000466:	18b9      	adds	r1, r7, r2
 8000468:	198a      	adds	r2, r1, r6
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	1878      	adds	r0, r7, r1
 800046e:	6801      	ldr	r1, [r0, #0]
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fdf5 	bl	8002060 <at>
			at(USB_Rx_Buffer, i+1, &tmp2);
 8000476:	4ba8      	ldr	r3, [pc, #672]	; (8000718 <comHandler+0x300>)
 8000478:	6818      	ldr	r0, [r3, #0]
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3301      	adds	r3, #1
 8000482:	224a      	movs	r2, #74	; 0x4a
 8000484:	2118      	movs	r1, #24
 8000486:	468c      	mov	ip, r1
 8000488:	44bc      	add	ip, r7
 800048a:	4462      	add	r2, ip
 800048c:	0019      	movs	r1, r3
 800048e:	f001 fde7 	bl	8002060 <at>

			if(tmp1 == '>' && tmp1 == '>')	//začátek paketu
 8000492:	2218      	movs	r2, #24
 8000494:	18bb      	adds	r3, r7, r2
 8000496:	199b      	adds	r3, r3, r6
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b3e      	cmp	r3, #62	; 0x3e
 800049c:	d125      	bne.n	80004ea <comHandler+0xd2>
 800049e:	18bb      	adds	r3, r7, r2
 80004a0:	199b      	adds	r3, r3, r6
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b3e      	cmp	r3, #62	; 0x3e
 80004a6:	d120      	bne.n	80004ea <comHandler+0xd2>
			{
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004a8:	2300      	movs	r3, #0
 80004aa:	2284      	movs	r2, #132	; 0x84
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	6013      	str	r3, [r2, #0]
 80004b0:	e010      	b.n	80004d4 <comHandler+0xbc>
				{
					char tmp;
					pop(USB_Rx_Buffer, &tmp);
 80004b2:	4b99      	ldr	r3, [pc, #612]	; (8000718 <comHandler+0x300>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2249      	movs	r2, #73	; 0x49
 80004b8:	2118      	movs	r1, #24
 80004ba:	468c      	mov	ip, r1
 80004bc:	44bc      	add	ip, r7
 80004be:	4462      	add	r2, ip
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fd99 	bl	8001ffa <pop>
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004c8:	2284      	movs	r2, #132	; 0x84
 80004ca:	18bb      	adds	r3, r7, r2
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	6013      	str	r3, [r2, #0]
 80004d4:	2384      	movs	r3, #132	; 0x84
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbe6      	blt.n	80004b2 <comHandler+0x9a>
				}
				start = 1;	//nastav flag o nalezení počátku
 80004e4:	2301      	movs	r3, #1
 80004e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80004e8:	e00d      	b.n	8000506 <comHandler+0xee>
		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	18bb      	adds	r3, r7, r2
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	18ba      	adds	r2, r7, r2
 80004f4:	6013      	str	r3, [r2, #0]
 80004f6:	4b88      	ldr	r3, [pc, #544]	; (8000718 <comHandler+0x300>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	18ba      	adds	r2, r7, r2
 8000500:	6812      	ldr	r2, [r2, #0]
 8000502:	429a      	cmp	r2, r3
 8000504:	dbab      	blt.n	800045e <comHandler+0x46>
				break;
			}
		}

		if(start)	//počátek byl nalezen
 8000506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000508:	2b00      	cmp	r3, #0
 800050a:	d06d      	beq.n	80005e8 <comHandler+0x1d0>
		{
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 800050c:	2300      	movs	r3, #0
 800050e:	2288      	movs	r2, #136	; 0x88
 8000510:	18ba      	adds	r2, r7, r2
 8000512:	6013      	str	r3, [r2, #0]
 8000514:	e060      	b.n	80005d8 <comHandler+0x1c0>
			{
				//Přečti znaky na pozici i a i+1
				char tmp1, tmp2;
				at(USB_Rx_Buffer, i, &tmp1);
 8000516:	4b80      	ldr	r3, [pc, #512]	; (8000718 <comHandler+0x300>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2648      	movs	r6, #72	; 0x48
 800051c:	2218      	movs	r2, #24
 800051e:	18b9      	adds	r1, r7, r2
 8000520:	198a      	adds	r2, r1, r6
 8000522:	2188      	movs	r1, #136	; 0x88
 8000524:	1878      	adds	r0, r7, r1
 8000526:	6801      	ldr	r1, [r0, #0]
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fd99 	bl	8002060 <at>
				at(USB_Rx_Buffer, i+1, &tmp2);
 800052e:	4b7a      	ldr	r3, [pc, #488]	; (8000718 <comHandler+0x300>)
 8000530:	6818      	ldr	r0, [r3, #0]
 8000532:	2388      	movs	r3, #136	; 0x88
 8000534:	18f9      	adds	r1, r7, r3
 8000536:	680b      	ldr	r3, [r1, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	2247      	movs	r2, #71	; 0x47
 800053c:	2118      	movs	r1, #24
 800053e:	468c      	mov	ip, r1
 8000540:	44bc      	add	ip, r7
 8000542:	4462      	add	r2, ip
 8000544:	0019      	movs	r1, r3
 8000546:	f001 fd8b 	bl	8002060 <at>

				if(tmp1 == '<' && tmp1 == '<')	//konec paketu
 800054a:	2218      	movs	r2, #24
 800054c:	18b9      	adds	r1, r7, r2
 800054e:	198b      	adds	r3, r1, r6
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b3c      	cmp	r3, #60	; 0x3c
 8000554:	d13a      	bne.n	80005cc <comHandler+0x1b4>
 8000556:	18ba      	adds	r2, r7, r2
 8000558:	1993      	adds	r3, r2, r6
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b3c      	cmp	r3, #60	; 0x3c
 800055e:	d135      	bne.n	80005cc <comHandler+0x1b4>
				{
					uint8_t* tmp = (uint8_t*)malloc((i+2)*sizeof(uint8_t));
 8000560:	2388      	movs	r3, #136	; 0x88
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3302      	adds	r3, #2
 8000568:	0018      	movs	r0, r3
 800056a:	f00c fd2b 	bl	800cfc4 <malloc>
 800056e:	0003      	movs	r3, r0
 8000570:	677b      	str	r3, [r7, #116]	; 0x74
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 8000572:	2300      	movs	r3, #0
 8000574:	228c      	movs	r2, #140	; 0x8c
 8000576:	18ba      	adds	r2, r7, r2
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	e00f      	b.n	800059c <comHandler+0x184>
					{
						pop(USB_Rx_Buffer, &tmp[y]);
 800057c:	4b66      	ldr	r3, [pc, #408]	; (8000718 <comHandler+0x300>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	268c      	movs	r6, #140	; 0x8c
 8000582:	19bb      	adds	r3, r7, r6
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000588:	18d3      	adds	r3, r2, r3
 800058a:	0019      	movs	r1, r3
 800058c:	f001 fd35 	bl	8001ffa <pop>
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 8000590:	0032      	movs	r2, r6
 8000592:	18bb      	adds	r3, r7, r2
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	2188      	movs	r1, #136	; 0x88
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	228c      	movs	r2, #140	; 0x8c
 80005a6:	18ba      	adds	r2, r7, r2
 80005a8:	6812      	ldr	r2, [r2, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	dde6      	ble.n	800057c <comHandler+0x164>
					}

					decodePaket(tmp, i+2);
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	3302      	adds	r3, #2
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 fa8d 	bl	8000adc <decodePaket>
					free(tmp);
 80005c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005c4:	0018      	movs	r0, r3
 80005c6:	f00c fd07 	bl	800cfd8 <free>
					break;
 80005ca:	e00d      	b.n	80005e8 <comHandler+0x1d0>
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80005cc:	2288      	movs	r2, #136	; 0x88
 80005ce:	18bb      	adds	r3, r7, r2
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	18ba      	adds	r2, r7, r2
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b4f      	ldr	r3, [pc, #316]	; (8000718 <comHandler+0x300>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	2288      	movs	r2, #136	; 0x88
 80005e0:	18ba      	adds	r2, r7, r2
 80005e2:	6812      	ldr	r2, [r2, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	db96      	blt.n	8000516 <comHandler+0xfe>
				}
			}
		}

		flags.data_received = 0;
 80005e8:	4b4c      	ldr	r3, [pc, #304]	; (800071c <comHandler+0x304>)
 80005ea:	7a1a      	ldrb	r2, [r3, #8]
 80005ec:	2101      	movs	r1, #1
 80005ee:	438a      	bics	r2, r1
 80005f0:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)	//Pokud test pokročil...
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <comHandler+0x304>)
 80005f4:	7e1b      	ldrb	r3, [r3, #24]
 80005f6:	2202      	movs	r2, #2
 80005f8:	4013      	ands	r3, r2
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d055      	beq.n	80006ac <comHandler+0x294>
	{
		//...zjisti v jaké je fázi...
		char testPhaseChr;
		switch(currentPhase())
 8000600:	f002 f844 	bl	800268c <currentPhase>
 8000604:	0003      	movs	r3, r0
 8000606:	2b06      	cmp	r3, #6
 8000608:	d834      	bhi.n	8000674 <comHandler+0x25c>
 800060a:	009a      	lsls	r2, r3, #2
 800060c:	4b44      	ldr	r3, [pc, #272]	; (8000720 <comHandler+0x308>)
 800060e:	18d3      	adds	r3, r2, r3
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 8000614:	2346      	movs	r3, #70	; 0x46
 8000616:	2218      	movs	r2, #24
 8000618:	4694      	mov	ip, r2
 800061a:	44bc      	add	ip, r7
 800061c:	4463      	add	r3, ip
 800061e:	2273      	movs	r2, #115	; 0x73
 8000620:	701a      	strb	r2, [r3, #0]
			break;
 8000622:	e02f      	b.n	8000684 <comHandler+0x26c>
		case START_DONE:
			testPhaseChr = 's';
 8000624:	2346      	movs	r3, #70	; 0x46
 8000626:	2218      	movs	r2, #24
 8000628:	4694      	mov	ip, r2
 800062a:	44bc      	add	ip, r7
 800062c:	4463      	add	r3, ip
 800062e:	2273      	movs	r2, #115	; 0x73
 8000630:	701a      	strb	r2, [r3, #0]
			break;
 8000632:	e027      	b.n	8000684 <comHandler+0x26c>
		case MAIN_TEST:
			testPhaseChr = 'm';
 8000634:	2346      	movs	r3, #70	; 0x46
 8000636:	2218      	movs	r2, #24
 8000638:	4694      	mov	ip, r2
 800063a:	44bc      	add	ip, r7
 800063c:	4463      	add	r3, ip
 800063e:	226d      	movs	r2, #109	; 0x6d
 8000640:	701a      	strb	r2, [r3, #0]
			break;
 8000642:	e01f      	b.n	8000684 <comHandler+0x26c>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 8000644:	2346      	movs	r3, #70	; 0x46
 8000646:	2218      	movs	r2, #24
 8000648:	4694      	mov	ip, r2
 800064a:	44bc      	add	ip, r7
 800064c:	4463      	add	r3, ip
 800064e:	226d      	movs	r2, #109	; 0x6d
 8000650:	701a      	strb	r2, [r3, #0]
			break;
 8000652:	e017      	b.n	8000684 <comHandler+0x26c>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 8000654:	2346      	movs	r3, #70	; 0x46
 8000656:	2218      	movs	r2, #24
 8000658:	4694      	mov	ip, r2
 800065a:	44bc      	add	ip, r7
 800065c:	4463      	add	r3, ip
 800065e:	2262      	movs	r2, #98	; 0x62
 8000660:	701a      	strb	r2, [r3, #0]
			break;
 8000662:	e00f      	b.n	8000684 <comHandler+0x26c>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 8000664:	2346      	movs	r3, #70	; 0x46
 8000666:	2218      	movs	r2, #24
 8000668:	4694      	mov	ip, r2
 800066a:	44bc      	add	ip, r7
 800066c:	4463      	add	r3, ip
 800066e:	224d      	movs	r2, #77	; 0x4d
 8000670:	701a      	strb	r2, [r3, #0]
			break;
 8000672:	e007      	b.n	8000684 <comHandler+0x26c>
		default:
			testPhaseChr = 'e';
 8000674:	2346      	movs	r3, #70	; 0x46
 8000676:	2218      	movs	r2, #24
 8000678:	4694      	mov	ip, r2
 800067a:	44bc      	add	ip, r7
 800067c:	4463      	add	r3, ip
 800067e:	2265      	movs	r2, #101	; 0x65
 8000680:	701a      	strb	r2, [r3, #0]
			break;
 8000682:	46c0      	nop			; (mov r8, r8)
		}

		//...a upozorni na to PC
		Paket paket;
		fillPaket(&paket, TEST_PHASE_PAKET, &testPhaseChr, 1);
 8000684:	2346      	movs	r3, #70	; 0x46
 8000686:	2118      	movs	r1, #24
 8000688:	187a      	adds	r2, r7, r1
 800068a:	18d2      	adds	r2, r2, r3
 800068c:	2638      	movs	r6, #56	; 0x38
 800068e:	187b      	adds	r3, r7, r1
 8000690:	1998      	adds	r0, r3, r6
 8000692:	2301      	movs	r3, #1
 8000694:	2104      	movs	r1, #4
 8000696:	f000 f925 	bl	80008e4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800069a:	4b22      	ldr	r3, [pc, #136]	; (8000724 <comHandler+0x30c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2118      	movs	r1, #24
 80006a0:	187a      	adds	r2, r7, r1
 80006a2:	1992      	adds	r2, r2, r6
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 f95c 	bl	8000964 <pushPaket>
	}

	if(flags.meas.measComplete)	//Jsou připravena data k odeslání
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <comHandler+0x304>)
 80006ae:	7d1b      	ldrb	r3, [r3, #20]
 80006b0:	2202      	movs	r2, #2
 80006b2:	4013      	ands	r3, r2
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d051      	beq.n	800075e <comHandler+0x346>
	{
		if(!flags.meas.calibMeas)
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <comHandler+0x304>)
 80006bc:	7d1b      	ldrb	r3, [r3, #20]
 80006be:	2240      	movs	r2, #64	; 0x40
 80006c0:	4013      	ands	r3, r2
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d117      	bne.n	80006f8 <comHandler+0x2e0>
		{
			//Nejde o kalibrační data -> pošli číslo dat
			Paket paket;
			fillPaket(&paket, TEST_NUM_PAKET, &testNum, 1);
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <comHandler+0x310>)
 80006ca:	2620      	movs	r6, #32
 80006cc:	2318      	movs	r3, #24
 80006ce:	18f9      	adds	r1, r7, r3
 80006d0:	1988      	adds	r0, r1, r6
 80006d2:	2301      	movs	r3, #1
 80006d4:	2103      	movs	r1, #3
 80006d6:	f000 f905 	bl	80008e4 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <comHandler+0x30c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2218      	movs	r2, #24
 80006e0:	18ba      	adds	r2, r7, r2
 80006e2:	1992      	adds	r2, r2, r6
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f93c 	bl	8000964 <pushPaket>
			testNum++;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <comHandler+0x310>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <comHandler+0x310>)
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	e004      	b.n	8000702 <comHandler+0x2ea>
		}
		else
		{
			flags.meas.calibMeas = 0;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <comHandler+0x304>)
 80006fa:	7d1a      	ldrb	r2, [r3, #20]
 80006fc:	2140      	movs	r1, #64	; 0x40
 80006fe:	438a      	bics	r2, r1
 8000700:	751a      	strb	r2, [r3, #20]
		}

		//___Připrav a odešli paket___//
		makeByteArray();
 8000702:	f000 f8c3 	bl	800088c <makeByteArray>
		Paket paket;
		outPaketType type = (flags.meas.onlyBattery)? DATA_BAT_PAKET : DATA_PAKET;
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <comHandler+0x304>)
 8000708:	7d1b      	ldrb	r3, [r3, #20]
 800070a:	2220      	movs	r2, #32
 800070c:	4013      	ands	r3, r2
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00b      	beq.n	800072c <comHandler+0x314>
 8000714:	2202      	movs	r2, #2
 8000716:	e00a      	b.n	800072e <comHandler+0x316>
 8000718:	20001134 	.word	0x20001134
 800071c:	20000630 	.word	0x20000630
 8000720:	0800d918 	.word	0x0800d918
 8000724:	20000490 	.word	0x20000490
 8000728:	20000260 	.word	0x20000260
 800072c:	2201      	movs	r2, #1
 800072e:	215b      	movs	r1, #91	; 0x5b
 8000730:	2018      	movs	r0, #24
 8000732:	183b      	adds	r3, r7, r0
 8000734:	185b      	adds	r3, r3, r1
 8000736:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, type, data, 14);
 8000738:	4a50      	ldr	r2, [pc, #320]	; (800087c <comHandler+0x464>)
 800073a:	183b      	adds	r3, r7, r0
 800073c:	185b      	adds	r3, r3, r1
 800073e:	7819      	ldrb	r1, [r3, #0]
 8000740:	262c      	movs	r6, #44	; 0x2c
 8000742:	183b      	adds	r3, r7, r0
 8000744:	1998      	adds	r0, r3, r6
 8000746:	230e      	movs	r3, #14
 8000748:	f000 f8cc 	bl	80008e4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800074c:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <comHandler+0x468>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2018      	movs	r0, #24
 8000752:	183a      	adds	r2, r7, r0
 8000754:	1992      	adds	r2, r2, r6
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f000 f903 	bl	8000964 <pushPaket>
	}

#ifdef __APP_COMPATIBILITY__
	//___Odesílání refresh zprávy___//
	if(flags.time.sec)
 800075e:	4b49      	ldr	r3, [pc, #292]	; (8000884 <comHandler+0x46c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2202      	movs	r2, #2
 8000764:	4013      	ands	r3, r2
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d011      	beq.n	8000790 <comHandler+0x378>
	{
		Paket paket;
		fillPaket(&paket, REFRESH_PAKET, NULL, 0);
 800076c:	2614      	movs	r6, #20
 800076e:	2218      	movs	r2, #24
 8000770:	18bb      	adds	r3, r7, r2
 8000772:	1998      	adds	r0, r3, r6
 8000774:	2300      	movs	r3, #0
 8000776:	2200      	movs	r2, #0
 8000778:	2106      	movs	r1, #6
 800077a:	f000 f8b3 	bl	80008e4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800077e:	4b40      	ldr	r3, [pc, #256]	; (8000880 <comHandler+0x468>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2218      	movs	r2, #24
 8000784:	18ba      	adds	r2, r7, r2
 8000786:	1992      	adds	r2, r2, r6
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f8ea 	bl	8000964 <pushPaket>
	}
#endif

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000790:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <comHandler+0x468>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	7d1b      	ldrb	r3, [r3, #20]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d11b      	bne.n	80007d2 <comHandler+0x3ba>
	{
		flags.ui.shortBeep = 1;
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <comHandler+0x46c>)
 800079c:	7c1a      	ldrb	r2, [r3, #16]
 800079e:	2101      	movs	r1, #1
 80007a0:	430a      	orrs	r2, r1
 80007a2:	741a      	strb	r2, [r3, #16]
		char msg[] = {"Buffer full\n"};
 80007a4:	261c      	movs	r6, #28
 80007a6:	19bb      	adds	r3, r7, r6
 80007a8:	4a37      	ldr	r2, [pc, #220]	; (8000888 <comHandler+0x470>)
 80007aa:	ca43      	ldmia	r2!, {r0, r1, r6}
 80007ac:	c343      	stmia	r3!, {r0, r1, r6}
 80007ae:	7812      	ldrb	r2, [r2, #0]
 80007b0:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 80007b2:	261c      	movs	r6, #28
 80007b4:	19bb      	adds	r3, r7, r6
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fca6 	bl	8000108 <strlen>
 80007bc:	0002      	movs	r2, r0
 80007be:	19bb      	adds	r3, r7, r6
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f00b ff18 	bl	800c5f8 <CDC_Transmit_FS>
		clearBuffer(USB_Tx_Buffer);
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <comHandler+0x468>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fb9f 	bl	8001f10 <clearBuffer>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <comHandler+0x468>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d048      	beq.n	800086e <comHandler+0x456>
	{
 80007dc:	466b      	mov	r3, sp
 80007de:	4698      	mov	r8, r3
		int size = USB_Tx_Buffer->filled;
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <comHandler+0x468>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	66fb      	str	r3, [r7, #108]	; 0x6c
		char tmpStr[size];
 80007e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ea:	1e5a      	subs	r2, r3, #1
 80007ec:	66ba      	str	r2, [r7, #104]	; 0x68
 80007ee:	001a      	movs	r2, r3
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	2200      	movs	r2, #0
 80007f4:	60fa      	str	r2, [r7, #12]
 80007f6:	68b8      	ldr	r0, [r7, #8]
 80007f8:	68f9      	ldr	r1, [r7, #12]
 80007fa:	0002      	movs	r2, r0
 80007fc:	0f52      	lsrs	r2, r2, #29
 80007fe:	000e      	movs	r6, r1
 8000800:	00f6      	lsls	r6, r6, #3
 8000802:	617e      	str	r6, [r7, #20]
 8000804:	697e      	ldr	r6, [r7, #20]
 8000806:	4316      	orrs	r6, r2
 8000808:	617e      	str	r6, [r7, #20]
 800080a:	0002      	movs	r2, r0
 800080c:	00d2      	lsls	r2, r2, #3
 800080e:	613a      	str	r2, [r7, #16]
 8000810:	001a      	movs	r2, r3
 8000812:	603a      	str	r2, [r7, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	6838      	ldr	r0, [r7, #0]
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	0002      	movs	r2, r0
 800081e:	0f52      	lsrs	r2, r2, #29
 8000820:	000e      	movs	r6, r1
 8000822:	00f5      	lsls	r5, r6, #3
 8000824:	4315      	orrs	r5, r2
 8000826:	0002      	movs	r2, r0
 8000828:	00d4      	lsls	r4, r2, #3
 800082a:	3307      	adds	r3, #7
 800082c:	08db      	lsrs	r3, r3, #3
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	466a      	mov	r2, sp
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	469d      	mov	sp, r3
 8000836:	466b      	mov	r3, sp
 8000838:	3300      	adds	r3, #0
 800083a:	667b      	str	r3, [r7, #100]	; 0x64
		for(int i = 0; i < size; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000840:	e00a      	b.n	8000858 <comHandler+0x440>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <comHandler+0x468>)
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800084a:	18d3      	adds	r3, r2, r3
 800084c:	0019      	movs	r1, r3
 800084e:	f001 fbd4 	bl	8001ffa <pop>
		for(int i = 0; i < size; i++)
 8000852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000854:	3301      	adds	r3, #1
 8000856:	67bb      	str	r3, [r7, #120]	; 0x78
 8000858:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800085a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800085c:	429a      	cmp	r2, r3
 800085e:	dbf0      	blt.n	8000842 <comHandler+0x42a>
		}
		CDC_Transmit_FS(tmpStr, size);
 8000860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000862:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f00b fec6 	bl	800c5f8 <CDC_Transmit_FS>
 800086c:	46c5      	mov	sp, r8
	}

}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b024      	add	sp, #144	; 0x90
 8000874:	bc80      	pop	{r7}
 8000876:	46b8      	mov	r8, r7
 8000878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	20000494 	.word	0x20000494
 8000880:	20000490 	.word	0x20000490
 8000884:	20000630 	.word	0x20000630
 8000888:	0800d860 	.word	0x0800d860

0800088c <makeByteArray>:

//_____Zpracuje ADC_Results do pole data_____//
static void makeByteArray()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e018      	b.n	80008ca <makeByteArray+0x3e>
	{
		data[2*i] = MaskByte(ADC_Results[2*i], 1);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	005a      	lsls	r2, r3, #1
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <makeByteArray+0x50>)
 800089e:	0092      	lsls	r2, r2, #2
 80008a0:	58d3      	ldr	r3, [r2, r3]
 80008a2:	0a1a      	lsrs	r2, r3, #8
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	b2d1      	uxtb	r1, r2
 80008aa:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <makeByteArray+0x54>)
 80008ac:	54d1      	strb	r1, [r2, r3]
		data[2*i+1] = MaskByte(ADC_Results[2*i], 0);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	005a      	lsls	r2, r3, #1
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <makeByteArray+0x50>)
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	58d2      	ldr	r2, [r2, r3]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	3301      	adds	r3, #1
 80008be:	b2d1      	uxtb	r1, r2
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <makeByteArray+0x54>)
 80008c2:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 7; i++)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3301      	adds	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b06      	cmp	r3, #6
 80008ce:	dde3      	ble.n	8000898 <makeByteArray+0xc>
	}
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200001fc 	.word	0x200001fc
 80008e0:	20000494 	.word	0x20000494

080008e4 <fillPaket>:

//_____Vytvoří strukturu Paket z dat v argumentech_____//
static void fillPaket(Paket* paket, outPaketType type, uint8_t* data, uint8_t dataLength)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	0008      	movs	r0, r1
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	0019      	movs	r1, r3
 80008f2:	240b      	movs	r4, #11
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	1c02      	adds	r2, r0, #0
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	200a      	movs	r0, #10
 80008fc:	183b      	adds	r3, r7, r0
 80008fe:	1c0a      	adds	r2, r1, #0
 8000900:	701a      	strb	r2, [r3, #0]
	paket->type = type;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	0021      	movs	r1, r4
 8000906:	187a      	adds	r2, r7, r1
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	701a      	strb	r2, [r3, #0]
	paket->data = data;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	605a      	str	r2, [r3, #4]
	paket->dataLength = dataLength;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	183a      	adds	r2, r7, r0
 8000916:	7812      	ldrb	r2, [r2, #0]
 8000918:	721a      	strb	r2, [r3, #8]
	uint8_t CA = type;
 800091a:	2317      	movs	r3, #23
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	187a      	adds	r2, r7, r1
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	e00c      	b.n	8000944 <fillPaket+0x60>
		CA += data[i];
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	18d3      	adds	r3, r2, r3
 8000930:	7819      	ldrb	r1, [r3, #0]
 8000932:	2217      	movs	r2, #23
 8000934:	18bb      	adds	r3, r7, r2
 8000936:	18ba      	adds	r2, r7, r2
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	188a      	adds	r2, r1, r2
 800093c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	3301      	adds	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	230a      	movs	r3, #10
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbec      	blt.n	800092a <fillPaket+0x46>
	paket->CA_value = CA;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2217      	movs	r2, #23
 8000954:	18ba      	adds	r2, r7, r2
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	725a      	strb	r2, [r3, #9]
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b007      	add	sp, #28
 8000960:	bd90      	pop	{r4, r7, pc}
	...

08000964 <pushPaket>:

//_____Vloží do bufferu řetězec odpovídající sestavenému paketu_____//
static void pushPaket(RING_BUFFER* buffer, Paket* paket)
{
 8000964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000966:	46c6      	mov	lr, r8
 8000968:	b500      	push	{lr}
 800096a:	b096      	sub	sp, #88	; 0x58
 800096c:	af00      	add	r7, sp, #0
 800096e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000970:	63b9      	str	r1, [r7, #56]	; 0x38
 8000972:	466b      	mov	r3, sp
 8000974:	4698      	mov	r8, r3
	uint8_t msg[paket->dataLength + 2];
 8000976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000978:	7a1b      	ldrb	r3, [r3, #8]
 800097a:	1c9a      	adds	r2, r3, #2
 800097c:	1e53      	subs	r3, r2, #1
 800097e:	657b      	str	r3, [r7, #84]	; 0x54
 8000980:	0013      	movs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69b8      	ldr	r0, [r7, #24]
 800098a:	69f9      	ldr	r1, [r7, #28]
 800098c:	0003      	movs	r3, r0
 800098e:	0f5b      	lsrs	r3, r3, #29
 8000990:	000e      	movs	r6, r1
 8000992:	00f5      	lsls	r5, r6, #3
 8000994:	431d      	orrs	r5, r3
 8000996:	0003      	movs	r3, r0
 8000998:	00dc      	lsls	r4, r3, #3
 800099a:	0013      	movs	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	6938      	ldr	r0, [r7, #16]
 80009a4:	6979      	ldr	r1, [r7, #20]
 80009a6:	0003      	movs	r3, r0
 80009a8:	0f5b      	lsrs	r3, r3, #29
 80009aa:	000c      	movs	r4, r1
 80009ac:	00e4      	lsls	r4, r4, #3
 80009ae:	637c      	str	r4, [r7, #52]	; 0x34
 80009b0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80009b2:	431c      	orrs	r4, r3
 80009b4:	637c      	str	r4, [r7, #52]	; 0x34
 80009b6:	0003      	movs	r3, r0
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
 80009bc:	0013      	movs	r3, r2
 80009be:	3307      	adds	r3, #7
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	466a      	mov	r2, sp
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	469d      	mov	sp, r3
 80009ca:	466b      	mov	r3, sp
 80009cc:	3300      	adds	r3, #0
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
	msg[0] = paket->type;
 80009d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d6:	701a      	strb	r2, [r3, #0]
	memcpy(msg+1, paket->data, paket->dataLength);
 80009d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009da:	1c58      	adds	r0, r3, #1
 80009dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009de:	6859      	ldr	r1, [r3, #4]
 80009e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009e2:	7a1b      	ldrb	r3, [r3, #8]
 80009e4:	001a      	movs	r2, r3
 80009e6:	f00c fb01 	bl	800cfec <memcpy>
	msg[paket->dataLength+1] = paket->CA_value;
 80009ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ec:	7a1b      	ldrb	r3, [r3, #8]
 80009ee:	3301      	adds	r3, #1
 80009f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009f2:	7a51      	ldrb	r1, [r2, #9]
 80009f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80009f6:	54d1      	strb	r1, [r2, r3]
	//msg[paket->dataLength+2] = 0U;

	uint8_t str[] = {">>"};
 80009f8:	200c      	movs	r0, #12
 80009fa:	2638      	movs	r6, #56	; 0x38
 80009fc:	19bb      	adds	r3, r7, r6
 80009fe:	181b      	adds	r3, r3, r0
 8000a00:	4a34      	ldr	r2, [pc, #208]	; (8000ad4 <pushPaket+0x170>)
 8000a02:	8811      	ldrh	r1, [r2, #0]
 8000a04:	8019      	strh	r1, [r3, #0]
 8000a06:	7892      	ldrb	r2, [r2, #2]
 8000a08:	709a      	strb	r2, [r3, #2]
	uint8_t end[] = {"<<\n"};
 8000a0a:	2508      	movs	r5, #8
 8000a0c:	19bb      	adds	r3, r7, r6
 8000a0e:	195b      	adds	r3, r3, r5
 8000a10:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <pushPaket+0x174>)
 8000a12:	601a      	str	r2, [r3, #0]

	uint8_t toSend[6+paket->dataLength + 2];
 8000a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a16:	7a1b      	ldrb	r3, [r3, #8]
 8000a18:	3308      	adds	r3, #8
 8000a1a:	001c      	movs	r4, r3
 8000a1c:	1e63      	subs	r3, r4, #1
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a20:	0023      	movs	r3, r4
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	000b      	movs	r3, r1
 8000a2e:	0f5b      	lsrs	r3, r3, #29
 8000a30:	0016      	movs	r6, r2
 8000a32:	00f6      	lsls	r6, r6, #3
 8000a34:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000a36:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8000a38:	431e      	orrs	r6, r3
 8000a3a:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000a3c:	000b      	movs	r3, r1
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a42:	0023      	movs	r3, r4
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	6839      	ldr	r1, [r7, #0]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	000b      	movs	r3, r1
 8000a50:	0f5b      	lsrs	r3, r3, #29
 8000a52:	0016      	movs	r6, r2
 8000a54:	00f6      	lsls	r6, r6, #3
 8000a56:	627e      	str	r6, [r7, #36]	; 0x24
 8000a58:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000a5a:	431e      	orrs	r6, r3
 8000a5c:	627e      	str	r6, [r7, #36]	; 0x24
 8000a5e:	000b      	movs	r3, r1
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	623b      	str	r3, [r7, #32]
 8000a64:	0023      	movs	r3, r4
 8000a66:	3307      	adds	r3, #7
 8000a68:	08db      	lsrs	r3, r3, #3
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	466a      	mov	r2, sp
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	469d      	mov	sp, r3
 8000a72:	466b      	mov	r3, sp
 8000a74:	3300      	adds	r3, #0
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
	//sprintf(toSend, "%s%s%s\n", str, msg, end);	//pro testNum = 0 se vytiskne jen paket->type, jelikož sprintf pak narazí na nulu
	memcpy(toSend, str, 2);
 8000a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a7a:	2638      	movs	r6, #56	; 0x38
 8000a7c:	19ba      	adds	r2, r7, r6
 8000a7e:	1811      	adds	r1, r2, r0
 8000a80:	2202      	movs	r2, #2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f00c fab2 	bl	800cfec <memcpy>
	memcpy(toSend+2, msg, paket->dataLength + 2);
 8000a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a8a:	1c98      	adds	r0, r3, #2
 8000a8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a90:	7a1b      	ldrb	r3, [r3, #8]
 8000a92:	3302      	adds	r3, #2
 8000a94:	001a      	movs	r2, r3
 8000a96:	f00c faa9 	bl	800cfec <memcpy>
	memcpy(toSend+2+paket->dataLength + 2, end, 4);
 8000a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a9e:	7a1b      	ldrb	r3, [r3, #8]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	18d2      	adds	r2, r2, r3
 8000aa4:	19bb      	adds	r3, r7, r6
 8000aa6:	195b      	adds	r3, r3, r5
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	0019      	movs	r1, r3
 8000aac:	2304      	movs	r3, #4
 8000aae:	001a      	movs	r2, r3
 8000ab0:	f00c fa9c 	bl	800cfec <memcpy>
	pushStr(buffer, toSend, sizeof(toSend)-1);
 8000ab4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000ab6:	0023      	movs	r3, r4
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	001a      	movs	r2, r3
 8000abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 fa73 	bl	8001faa <pushStr>
 8000ac4:	46c5      	mov	sp, r8
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b016      	add	sp, #88	; 0x58
 8000acc:	bc80      	pop	{r7}
 8000ace:	46b8      	mov	r8, r7
 8000ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	0800d870 	.word	0x0800d870
 8000ad8:	000a3c3c 	.word	0x000a3c3c

08000adc <decodePaket>:

//_____Příchozí řetězec přepracuje do struktury typu paket (pokud to lze)_____//
static uint8_t decodePaket(/*Paket* paket,*/ uint8_t* data, uint8_t dataLenght)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	000a      	movs	r2, r1
 8000ae6:	1cfb      	adds	r3, r7, #3
 8000ae8:	701a      	strb	r2, [r3, #0]
	int sum = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
	for(int i = 2; i < dataLenght - 3; i++)
 8000aee:	2302      	movs	r3, #2
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e00a      	b.n	8000b0a <decodePaket+0x2e>
	{
		sum += data[i];
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	001a      	movs	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	189b      	adds	r3, r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]
	for(int i = 2; i < dataLenght - 3; i++)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	1cfb      	adds	r3, r7, #3
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	3b03      	subs	r3, #3
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbee      	blt.n	8000af4 <decodePaket+0x18>
	}
	if(sum == data[dataLenght - 3])	//kontorlní součet odpovídá
 8000b16:	1cfb      	adds	r3, r7, #3
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3b03      	subs	r3, #3
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	18d3      	adds	r3, r2, r3
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	001a      	movs	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d13b      	bne.n	8000ba2 <decodePaket+0xc6>
	{
		switch(data[2])	//Na třetím místě je instrukce
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b73      	cmp	r3, #115	; 0x73
 8000b32:	d008      	beq.n	8000b46 <decodePaket+0x6a>
 8000b34:	dc2f      	bgt.n	8000b96 <decodePaket+0xba>
 8000b36:	2b70      	cmp	r3, #112	; 0x70
 8000b38:	d019      	beq.n	8000b6e <decodePaket+0x92>
 8000b3a:	dc2c      	bgt.n	8000b96 <decodePaket+0xba>
 8000b3c:	2b63      	cmp	r3, #99	; 0x63
 8000b3e:	d00c      	beq.n	8000b5a <decodePaket+0x7e>
 8000b40:	2b6b      	cmp	r3, #107	; 0x6b
 8000b42:	d01e      	beq.n	8000b82 <decodePaket+0xa6>
 8000b44:	e027      	b.n	8000b96 <decodePaket+0xba>
		{
		case 's': ;
			//___Start testu___//
			if(dataLenght == 7)
 8000b46:	1cfb      	adds	r3, r7, #3
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	d12b      	bne.n	8000ba6 <decodePaket+0xca>
			{
				flags.instructions.startRequest = 1;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <decodePaket+0xe4>)
 8000b50:	7b1a      	ldrb	r2, [r3, #12]
 8000b52:	2101      	movs	r1, #1
 8000b54:	430a      	orrs	r2, r1
 8000b56:	731a      	strb	r2, [r3, #12]
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				//Na pozici data je ukazatel na testovaný zdroj
			}
			break;
 8000b58:	e025      	b.n	8000ba6 <decodePaket+0xca>

		case'c': ;
			//___Ukončení___//
		if(dataLenght == 7)
 8000b5a:	1cfb      	adds	r3, r7, #3
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	d123      	bne.n	8000baa <decodePaket+0xce>
		{
			flags.instructions.stopRequest = 1;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <decodePaket+0xe4>)
 8000b64:	7b1a      	ldrb	r2, [r3, #12]
 8000b66:	2102      	movs	r1, #2
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Ukonceni\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000b6c:	e01d      	b.n	8000baa <decodePaket+0xce>

		case'p': ;
			//___Pauza___//
		if(dataLenght == 7)
 8000b6e:	1cfb      	adds	r3, r7, #3
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b07      	cmp	r3, #7
 8000b74:	d11b      	bne.n	8000bae <decodePaket+0xd2>
		{
			flags.instructions.pauseRequest = 1;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <decodePaket+0xe4>)
 8000b78:	7b1a      	ldrb	r2, [r3, #12]
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Pauza\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000b80:	e015      	b.n	8000bae <decodePaket+0xd2>

		case'k': ;
			//___Kalibrace___//
		if(dataLenght == 7)
 8000b82:	1cfb      	adds	r3, r7, #3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	d113      	bne.n	8000bb2 <decodePaket+0xd6>
		{
			flags.instructions.calibRequest = 1;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <decodePaket+0xe4>)
 8000b8c:	7b1a      	ldrb	r2, [r3, #12]
 8000b8e:	2108      	movs	r1, #8
 8000b90:	430a      	orrs	r2, r1
 8000b92:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Kalibrace\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000b94:	e00d      	b.n	8000bb2 <decodePaket+0xd6>

		default: ;
			//___Neplatný příkaz___//
			flags.instructions.unknownInst = 1;
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <decodePaket+0xe4>)
 8000b98:	7b1a      	ldrb	r2, [r3, #12]
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
			sprintf(txt, "Neplatna instrukce\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			break;
 8000ba0:	e008      	b.n	8000bb4 <decodePaket+0xd8>
		}
	}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	e006      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	e004      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	e002      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	e000      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000bb2:	46c0      	nop			; (mov r8, r8)
	return 1;
 8000bb4:	2301      	movs	r3, #1
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	20000630 	.word	0x20000630

08000bc4 <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	0002      	movs	r2, r0
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d033      	beq.n	8000c40 <setColour+0x7c>
 8000bd8:	dc49      	bgt.n	8000c6e <setColour+0xaa>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <setColour+0x20>
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d017      	beq.n	8000c12 <setColour+0x4e>
 8000be2:	e044      	b.n	8000c6e <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <setColour+0xe0>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	0019      	movs	r1, r3
 8000bee:	f003 f884 	bl	8003cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	0219      	lsls	r1, r3, #8
 8000bf6:	2390      	movs	r3, #144	; 0x90
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f003 f87c 	bl	8003cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4827      	ldr	r0, [pc, #156]	; (8000ca4 <setColour+0xe0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	f003 f875 	bl	8003cfa <HAL_GPIO_WritePin>
		break;
 8000c10:	e044      	b.n	8000c9c <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <setColour+0xe0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	f003 f86d 	bl	8003cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	0219      	lsls	r1, r3, #8
 8000c24:	2390      	movs	r3, #144	; 0x90
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	2200      	movs	r2, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f003 f865 	bl	8003cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <setColour+0xe0>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	0019      	movs	r1, r3
 8000c3a:	f003 f85e 	bl	8003cfa <HAL_GPIO_WritePin>
		break;
 8000c3e:	e02d      	b.n	8000c9c <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <setColour+0xe0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	0019      	movs	r1, r3
 8000c4a:	f003 f856 	bl	8003cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	0219      	lsls	r1, r3, #8
 8000c52:	2390      	movs	r3, #144	; 0x90
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	2201      	movs	r2, #1
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f003 f84e 	bl	8003cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <setColour+0xe0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	0019      	movs	r1, r3
 8000c68:	f003 f847 	bl	8003cfa <HAL_GPIO_WritePin>
		break;
 8000c6c:	e016      	b.n	8000c9c <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <setColour+0xe0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	0019      	movs	r1, r3
 8000c78:	f003 f83f 	bl	8003cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	0219      	lsls	r1, r3, #8
 8000c80:	2390      	movs	r3, #144	; 0x90
 8000c82:	05db      	lsls	r3, r3, #23
 8000c84:	2200      	movs	r2, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f003 f837 	bl	8003cfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <setColour+0xe0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	0019      	movs	r1, r3
 8000c96:	f003 f830 	bl	8003cfa <HAL_GPIO_WritePin>
		break;
 8000c9a:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b002      	add	sp, #8
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <sendByte>:

//_____Pošle byte dat_____//
//-> argumenty: char - posílaný byte, Start_byte definuje zda jde o instrukci nebo data
// !!! Pracuje v blokujícím módu !!!
static DISP_STATE sendByte(char byte, START_BYTE type)
{
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	0002      	movs	r2, r0
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	1c0a      	adds	r2, r1, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
		{
			return SPI_ERR;
		}
	}*/
	uint8_t buffer[3];
	switch(type)
 8000cba:	1dbb      	adds	r3, r7, #6
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d002      	beq.n	8000cc8 <sendByte+0x20>
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d005      	beq.n	8000cd2 <sendByte+0x2a>
 8000cc6:	e009      	b.n	8000cdc <sendByte+0x34>
	{
		case INSTRUCTION:
			buffer[0] = 0xF8;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	22f8      	movs	r2, #248	; 0xf8
 8000cce:	701a      	strb	r2, [r3, #0]
			break;
 8000cd0:	e006      	b.n	8000ce0 <sendByte+0x38>
		case DATA:
			buffer[0] = 0xFA;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	22fa      	movs	r2, #250	; 0xfa
 8000cd8:	701a      	strb	r2, [r3, #0]
			break;
 8000cda:	e001      	b.n	8000ce0 <sendByte+0x38>
		default:	//neošetřené možnosti
			return SPI_ERR;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	e077      	b.n	8000dd0 <sendByte+0x128>
			break;
	}
	uint8_t tmp1 = 0U, tmp2 = 0U;
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	230e      	movs	r3, #14
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000cf0:	230d      	movs	r3, #13
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	e03a      	b.n	8000d70 <sendByte+0xc8>
	{
		if(MaskBit(byte, i))
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	210d      	movs	r1, #13
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	411a      	asrs	r2, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	d00f      	beq.n	8000d2e <sendByte+0x86>
		{
			SetBit(tmp1, (7-i));
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2207      	movs	r2, #7
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2201      	movs	r2, #1
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	210f      	movs	r1, #15
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b25a      	sxtb	r2, r3
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
		}
		if(MaskBit(byte, (i+4)))
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	210d      	movs	r1, #13
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	411a      	asrs	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4013      	ands	r3, r2
 8000d42:	d00f      	beq.n	8000d64 <sendByte+0xbc>
		{
			SetBit(tmp2, (7-i));
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2207      	movs	r2, #7
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	210e      	movs	r1, #14
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b25a      	sxtb	r2, r3
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000d64:	210d      	movs	r1, #13
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	3201      	adds	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	230d      	movs	r3, #13
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d9bf      	bls.n	8000cfa <sendByte+0x52>
		}
	}
	buffer[1] = tmp1;
 8000d7a:	2508      	movs	r5, #8
 8000d7c:	197b      	adds	r3, r7, r5
 8000d7e:	220f      	movs	r2, #15
 8000d80:	18ba      	adds	r2, r7, r2
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	705a      	strb	r2, [r3, #1]
	buffer[2] = tmp2;
 8000d86:	197b      	adds	r3, r7, r5
 8000d88:	220e      	movs	r2, #14
 8000d8a:	18ba      	adds	r2, r7, r2
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	709a      	strb	r2, [r3, #2]

	DISP_CS_ON;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <sendByte+0x130>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	0018      	movs	r0, r3
 8000d98:	f002 ffaf 	bl	8003cfa <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, buffer, 3, 100);
 8000d9c:	260c      	movs	r6, #12
 8000d9e:	19bc      	adds	r4, r7, r6
 8000da0:	1979      	adds	r1, r7, r5
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <sendByte+0x134>)
 8000da4:	2364      	movs	r3, #100	; 0x64
 8000da6:	2203      	movs	r2, #3
 8000da8:	f005 fd26 	bl	80067f8 <HAL_SPI_Transmit>
 8000dac:	0003      	movs	r3, r0
 8000dae:	7023      	strb	r3, [r4, #0]
	DISP_CS_OFF;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <sendByte+0x130>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	0018      	movs	r0, r3
 8000db8:	f002 ff9f 	bl	8003cfa <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f001 ff67 	bl	8002c90 <HAL_Delay>
	if(ret == HAL_OK)
 8000dc2:	19bb      	adds	r3, r7, r6
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <sendByte+0x126>
		return DISP_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <sendByte+0x128>
	else
		return SPI_ERR;
 8000dce:	2302      	movs	r3, #2
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b005      	add	sp, #20
 8000dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	20000584 	.word	0x20000584

08000de0 <dispInit>:
}

//_____Provede reset displeje a defaultní nastavení_____//
// !!! Pracuje v blokujícím módu !!!
void dispInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	//_____Reset displeje po startu_____//
	HAL_Delay(10);
 8000de4:	200a      	movs	r0, #10
 8000de6:	f001 ff53 	bl	8002c90 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_RESET);
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <dispInit+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	0018      	movs	r0, r3
 8000df2:	f002 ff82 	bl	8003cfa <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000df6:	2014      	movs	r0, #20
 8000df8:	f001 ff4a 	bl	8002c90 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_SET);
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <dispInit+0x74>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0018      	movs	r0, r3
 8000e04:	f002 ff79 	bl	8003cfa <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000e08:	2005      	movs	r0, #5
 8000e0a:	f001 ff41 	bl	8002c90 <HAL_Delay>

	//_____Nastavit parametry_____//
	sendByte(0x31, INSTRUCTION);	//Function set
 8000e0e:	2101      	movs	r1, #1
 8000e10:	2031      	movs	r0, #49	; 0x31
 8000e12:	f7ff ff49 	bl	8000ca8 <sendByte>
	sendByte(0x01, INSTRUCTION);	//Clear display
 8000e16:	2101      	movs	r1, #1
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff ff45 	bl	8000ca8 <sendByte>
	sendByte(0x13, INSTRUCTION);	//Oscilator
 8000e1e:	2101      	movs	r1, #1
 8000e20:	2013      	movs	r0, #19
 8000e22:	f7ff ff41 	bl	8000ca8 <sendByte>
	sendByte(0x70, INSTRUCTION);	//Contrast
 8000e26:	2101      	movs	r1, #1
 8000e28:	2070      	movs	r0, #112	; 0x70
 8000e2a:	f7ff ff3d 	bl	8000ca8 <sendByte>
	sendByte(0x5C, INSTRUCTION);	//Power/Icon/Contrast
 8000e2e:	2101      	movs	r1, #1
 8000e30:	205c      	movs	r0, #92	; 0x5c
 8000e32:	f7ff ff39 	bl	8000ca8 <sendByte>
	sendByte(0x6B, INSTRUCTION);	//Follower control
 8000e36:	2101      	movs	r1, #1
 8000e38:	206b      	movs	r0, #107	; 0x6b
 8000e3a:	f7ff ff35 	bl	8000ca8 <sendByte>
	sendByte(0x0F, INSTRUCTION);	//Display on
 8000e3e:	2101      	movs	r1, #1
 8000e40:	200f      	movs	r0, #15
 8000e42:	f7ff ff31 	bl	8000ca8 <sendByte>

	//_____Zapnout podsvícení_____//
	setColour(BACKLIGHT_WHITE);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff febc 	bl	8000bc4 <setColour>
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	48000400 	.word	0x48000400

08000e58 <setCursor>:
//_____Nastaví kurzor_____//
//pozice počítána od nuly//
//-> argumenty: řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE setCursor(uint8_t row, uint8_t col)
{
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	701a      	strb	r2, [r3, #0]
 8000e64:	1dbb      	adds	r3, r7, #6
 8000e66:	1c0a      	adds	r2, r1, #0
 8000e68:	701a      	strb	r2, [r3, #0]
	uint8_t addres = 0x80;	//DDRAM adresa
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	701a      	strb	r2, [r3, #0]
	if(row > 3 || col > 15)	//displej 4x16
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d803      	bhi.n	8000e82 <setCursor+0x2a>
 8000e7a:	1dbb      	adds	r3, r7, #6
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b0f      	cmp	r3, #15
 8000e80:	d901      	bls.n	8000e86 <setCursor+0x2e>
		return DISP_ERR;
 8000e82:	2304      	movs	r3, #4
 8000e84:	e020      	b.n	8000ec8 <setCursor+0x70>
	addres += row*0x20;
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	015b      	lsls	r3, r3, #5
 8000e8c:	b2d9      	uxtb	r1, r3
 8000e8e:	250f      	movs	r5, #15
 8000e90:	197b      	adds	r3, r7, r5
 8000e92:	197a      	adds	r2, r7, r5
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	188a      	adds	r2, r1, r2
 8000e98:	701a      	strb	r2, [r3, #0]
	addres += col;
 8000e9a:	197b      	adds	r3, r7, r5
 8000e9c:	1979      	adds	r1, r7, r5
 8000e9e:	1dba      	adds	r2, r7, #6
 8000ea0:	7809      	ldrb	r1, [r1, #0]
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	188a      	adds	r2, r1, r2
 8000ea6:	701a      	strb	r2, [r3, #0]

	sendByte(0x38, INSTRUCTION);	//Function set RE = 0
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	2038      	movs	r0, #56	; 0x38
 8000eac:	f7ff fefc 	bl	8000ca8 <sendByte>
	//HAL_Delay(5);
	DISP_STATE ret = sendByte(addres, INSTRUCTION);
 8000eb0:	260e      	movs	r6, #14
 8000eb2:	19bc      	adds	r4, r7, r6
 8000eb4:	197b      	adds	r3, r7, r5
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff fef4 	bl	8000ca8 <sendByte>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(5);
	return ret;
 8000ec4:	19bb      	adds	r3, r7, r6
 8000ec6:	781b      	ldrb	r3, [r3, #0]
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b005      	add	sp, #20
 8000ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ed0 <writeChar>:

//_____Zapiš znak na dané souřadnice_____//
//-> argumenty: znak k zobrazení, řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeChar(char character, uint8_t row, uint8_t col)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	0004      	movs	r4, r0
 8000ed8:	0008      	movs	r0, r1
 8000eda:	0011      	movs	r1, r2
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	1c22      	adds	r2, r4, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	1dbb      	adds	r3, r7, #6
 8000ee4:	1c02      	adds	r2, r0, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	1d7b      	adds	r3, r7, #5
 8000eea:	1c0a      	adds	r2, r1, #0
 8000eec:	701a      	strb	r2, [r3, #0]
	DISP_STATE ret = setCursor(row, col);
 8000eee:	250f      	movs	r5, #15
 8000ef0:	197c      	adds	r4, r7, r5
 8000ef2:	1d7b      	adds	r3, r7, #5
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	1dbb      	adds	r3, r7, #6
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	0011      	movs	r1, r2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff ffab 	bl	8000e58 <setCursor>
 8000f02:	0003      	movs	r3, r0
 8000f04:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(5);
	if(ret == DISP_OK)
 8000f06:	197b      	adds	r3, r7, r5
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10b      	bne.n	8000f26 <writeChar+0x56>
	{
		//doplnit úpravu dat podle převodní tabulky displeje
		ret = sendByte(character, DATA);
 8000f0e:	197c      	adds	r4, r7, r5
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2102      	movs	r1, #2
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff fec6 	bl	8000ca8 <sendByte>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	7023      	strb	r3, [r4, #0]
		//HAL_Delay(5);
		return ret;
 8000f20:	197b      	adds	r3, r7, r5
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	e002      	b.n	8000f2c <writeChar+0x5c>
	}
	else
		return ret;
 8000f26:	230f      	movs	r3, #15
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	781b      	ldrb	r3, [r3, #0]
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b004      	add	sp, #16
 8000f32:	bdb0      	pop	{r4, r5, r7, pc}

08000f34 <writeRow>:
//_____Zapiš řetězec na daný řádek_____//
//znaky přečnívající znaky budou smazány//
//-> argumenty: pole znaků, délka řetězce, řádek, zarovnání
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeRow(char* string, uint8_t lenght, uint8_t row, ALIGN align)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	000c      	movs	r4, r1
 8000f3e:	0010      	movs	r0, r2
 8000f40:	0019      	movs	r1, r3
 8000f42:	1cfb      	adds	r3, r7, #3
 8000f44:	1c22      	adds	r2, r4, #0
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	1cbb      	adds	r3, r7, #2
 8000f4a:	1c02      	adds	r2, r0, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	1c7b      	adds	r3, r7, #1
 8000f50:	1c0a      	adds	r2, r1, #0
 8000f52:	701a      	strb	r2, [r3, #0]
	if(lenght > 16)	//neplatná délka řetězce
 8000f54:	1cfb      	adds	r3, r7, #3
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b10      	cmp	r3, #16
 8000f5a:	d901      	bls.n	8000f60 <writeRow+0x2c>
		return DISP_ERR;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	e080      	b.n	8001062 <writeRow+0x12e>
	uint8_t col;
	char newString[16];
	for(uint8_t i = 0; i < 16; i++)
 8000f60:	231e      	movs	r3, #30
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	e00b      	b.n	8000f82 <writeRow+0x4e>
	{
		newString[i] = ' ';
 8000f6a:	201e      	movs	r0, #30
 8000f6c:	183b      	adds	r3, r7, r0
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	220c      	movs	r2, #12
 8000f72:	18ba      	adds	r2, r7, r2
 8000f74:	2120      	movs	r1, #32
 8000f76:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 8000f78:	183b      	adds	r3, r7, r0
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	183b      	adds	r3, r7, r0
 8000f7e:	3201      	adds	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	231e      	movs	r3, #30
 8000f84:	18fb      	adds	r3, r7, r3
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d9ee      	bls.n	8000f6a <writeRow+0x36>
	}
	switch(align)
 8000f8c:	1c7b      	adds	r3, r7, #1
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d012      	beq.n	8000fba <writeRow+0x86>
 8000f94:	dc1e      	bgt.n	8000fd4 <writeRow+0xa0>
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <writeRow+0x6c>
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d005      	beq.n	8000faa <writeRow+0x76>
 8000f9e:	e019      	b.n	8000fd4 <writeRow+0xa0>
	{
		case LEFT:	//zarovnání doleva
			col = 0;
 8000fa0:	231f      	movs	r3, #31
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
			break;
 8000fa8:	e019      	b.n	8000fde <writeRow+0xaa>
		case RIGHT:
			col = 15 - lenght;
 8000faa:	231f      	movs	r3, #31
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	1cfa      	adds	r2, r7, #3
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	1a8a      	subs	r2, r1, r2
 8000fb6:	701a      	strb	r2, [r3, #0]
			break;
 8000fb8:	e011      	b.n	8000fde <writeRow+0xaa>
		case CENTER:
			col = (15 - lenght)/2 + 1;
 8000fba:	1cfb      	adds	r3, r7, #3
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	d500      	bpl.n	8000fc6 <writeRow+0x92>
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	105b      	asrs	r3, r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	231f      	movs	r3, #31
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	3201      	adds	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
			break;
 8000fd2:	e004      	b.n	8000fde <writeRow+0xaa>
		default:
			col = 0;
 8000fd4:	231f      	movs	r3, #31
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
			break;
 8000fdc:	46c0      	nop			; (mov r8, r8)
	}
	for(uint8_t i = 0; i < lenght; i++)
 8000fde:	231d      	movs	r3, #29
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e013      	b.n	8001010 <writeRow+0xdc>
	{
		newString[col + i] = string[i];
 8000fe8:	201d      	movs	r0, #29
 8000fea:	183b      	adds	r3, r7, r0
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	18d2      	adds	r2, r2, r3
 8000ff2:	231f      	movs	r3, #31
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	7819      	ldrb	r1, [r3, #0]
 8000ff8:	183b      	adds	r3, r7, r0
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	18cb      	adds	r3, r1, r3
 8000ffe:	7811      	ldrb	r1, [r2, #0]
 8001000:	220c      	movs	r2, #12
 8001002:	18ba      	adds	r2, r7, r2
 8001004:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < lenght; i++)
 8001006:	183b      	adds	r3, r7, r0
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	183b      	adds	r3, r7, r0
 800100c:	3201      	adds	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	231d      	movs	r3, #29
 8001012:	18fa      	adds	r2, r7, r3
 8001014:	1cfb      	adds	r3, r7, #3
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d3e4      	bcc.n	8000fe8 <writeRow+0xb4>
	}
	for(uint8_t i = 0; i < 16; i++)
 800101e:	231c      	movs	r3, #28
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e016      	b.n	8001056 <writeRow+0x122>
	{
		if(writeChar(newString[i], row, i) != DISP_OK)
 8001028:	211c      	movs	r1, #28
 800102a:	187b      	adds	r3, r7, r1
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	220c      	movs	r2, #12
 8001030:	18ba      	adds	r2, r7, r2
 8001032:	5cd0      	ldrb	r0, [r2, r3]
 8001034:	187b      	adds	r3, r7, r1
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	1cbb      	adds	r3, r7, #2
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	0019      	movs	r1, r3
 800103e:	f7ff ff47 	bl	8000ed0 <writeChar>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <writeRow+0x116>
					return SPI_ERR;
 8001046:	2302      	movs	r3, #2
 8001048:	e00b      	b.n	8001062 <writeRow+0x12e>
	for(uint8_t i = 0; i < 16; i++)
 800104a:	211c      	movs	r1, #28
 800104c:	187b      	adds	r3, r7, r1
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	187b      	adds	r3, r7, r1
 8001052:	3201      	adds	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	231c      	movs	r3, #28
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d9e3      	bls.n	8001028 <writeRow+0xf4>
	}
	return DISP_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b009      	add	sp, #36	; 0x24
 8001068:	bd90      	pop	{r4, r7, pc}
	...

0800106c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	0002      	movs	r2, r0
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8001078:	1dbb      	adds	r3, r7, #6
 800107a:	881a      	ldrh	r2, [r3, #0]
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	429a      	cmp	r2, r3
 8001082:	d104      	bne.n	800108e <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_GPIO_EXTI_Callback+0x40>)
 8001086:	791a      	ldrb	r2, [r3, #4]
 8001088:	2101      	movs	r1, #1
 800108a:	430a      	orrs	r2, r1
 800108c:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800108e:	1dbb      	adds	r3, r7, #6
 8001090:	881a      	ldrh	r2, [r3, #0]
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	429a      	cmp	r2, r3
 8001098:	d104      	bne.n	80010a4 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_GPIO_EXTI_Callback+0x40>)
 800109c:	791a      	ldrb	r2, [r3, #4]
 800109e:	2104      	movs	r1, #4
 80010a0:	430a      	orrs	r2, r1
 80010a2:	711a      	strb	r2, [r3, #4]
	}
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000630 	.word	0x20000630

080010b0 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010bc:	429a      	cmp	r2, r3
 80010be:	d104      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	2101      	movs	r1, #1
 80010c6:	430a      	orrs	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
	}
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	200005e8 	.word	0x200005e8
 80010d8:	20000630 	.word	0x20000630

080010dc <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	0018      	movs	r0, r3
 80010e8:	f001 ffa8 	bl	800303c <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <HAL_ADC_ConvCpltCallback+0x24>)
 80010ee:	7d1a      	ldrb	r2, [r3, #20]
 80010f0:	2104      	movs	r1, #4
 80010f2:	430a      	orrs	r2, r1
 80010f4:	751a      	strb	r2, [r3, #20]
}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	20000630 	.word	0x20000630

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110a:	f001 fd5d 	bl	8002bc8 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 800110e:	2064      	movs	r0, #100	; 0x64
 8001110:	f000 fec9 	bl	8001ea6 <createBuffer>
 8001114:	0002      	movs	r2, r0
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <main+0x128>)
 8001118:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 800111a:	2064      	movs	r0, #100	; 0x64
 800111c:	f000 fec3 	bl	8001ea6 <createBuffer>
 8001120:	0002      	movs	r2, r0
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <main+0x12c>)
 8001124:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 8001126:	23fa      	movs	r3, #250	; 0xfa
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	0018      	movs	r0, r3
 800112c:	f000 febb 	bl	8001ea6 <createBuffer>
 8001130:	0002      	movs	r2, r0
 8001132:	4b40      	ldr	r3, [pc, #256]	; (8001234 <main+0x130>)
 8001134:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 8001136:	23fa      	movs	r3, #250	; 0xfa
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	0018      	movs	r0, r3
 800113c:	f000 feb3 	bl	8001ea6 <createBuffer>
 8001140:	0002      	movs	r2, r0
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <main+0x134>)
 8001144:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001146:	f000 f883 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114a:	f000 facd 	bl	80016e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800114e:	f00b f9a9 	bl	800c4a4 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 8001152:	f000 f8e9 	bl	8001328 <MX_ADC_Init>
  MX_SPI1_Init();
 8001156:	f000 fa05 	bl	8001564 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800115a:	f000 fa95 	bl	8001688 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 800115e:	f000 fa47 	bl	80015f0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  dispInit();
 8001162:	f7ff fe3d 	bl	8000de0 <dispInit>
  char line1[] = "Zahoreni";
 8001166:	200c      	movs	r0, #12
 8001168:	183b      	adds	r3, r7, r0
 800116a:	4a34      	ldr	r2, [pc, #208]	; (800123c <main+0x138>)
 800116c:	ca12      	ldmia	r2!, {r1, r4}
 800116e:	c312      	stmia	r3!, {r1, r4}
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	701a      	strb	r2, [r3, #0]
  char line2[] = "zdroju";
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4a32      	ldr	r2, [pc, #200]	; (8001240 <main+0x13c>)
 8001178:	6811      	ldr	r1, [r2, #0]
 800117a:	6019      	str	r1, [r3, #0]
 800117c:	8891      	ldrh	r1, [r2, #4]
 800117e:	8099      	strh	r1, [r3, #4]
 8001180:	7992      	ldrb	r2, [r2, #6]
 8001182:	719a      	strb	r2, [r3, #6]
  writeRow(line1, 8, 1, CENTER);
 8001184:	1838      	adds	r0, r7, r0
 8001186:	2302      	movs	r3, #2
 8001188:	2201      	movs	r2, #1
 800118a:	2108      	movs	r1, #8
 800118c:	f7ff fed2 	bl	8000f34 <writeRow>
  writeRow(line2, 6, 2, CENTER);
 8001190:	1d38      	adds	r0, r7, #4
 8001192:	2302      	movs	r3, #2
 8001194:	2202      	movs	r2, #2
 8001196:	2106      	movs	r1, #6
 8001198:	f7ff fecc 	bl	8000f34 <writeRow>

  LOAD_MIN_OFF;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <main+0x140>)
 800119e:	2200      	movs	r2, #0
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	0018      	movs	r0, r3
 80011a4:	f002 fda9 	bl	8003cfa <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <main+0x140>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	0018      	movs	r0, r3
 80011b0:	f002 fda3 	bl	8003cfa <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 80011b4:	f000 ffc4 	bl	8002140 <regInit>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d004      	beq.n	80011c6 <main+0xc2>
  {
	  flags.conErr = 1;
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <main+0x144>)
 80011be:	7e1a      	ldrb	r2, [r3, #24]
 80011c0:	2104      	movs	r1, #4
 80011c2:	430a      	orrs	r2, r1
 80011c4:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <main+0x148>)
 80011c8:	0018      	movs	r0, r3
 80011ca:	f006 f805 	bl	80071d8 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <main+0x144>)
 80011d0:	7c1a      	ldrb	r2, [r3, #16]
 80011d2:	2102      	movs	r1, #2
 80011d4:	430a      	orrs	r2, r1
 80011d6:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <main+0x144>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	07db      	lsls	r3, r3, #31
 80011de:	0fdb      	lsrs	r3, r3, #31
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f8      	beq.n	80011d8 <main+0xd4>
	  {
		  clkHandler();
 80011e6:	f000 fb6b 	bl	80018c0 <clkHandler>
		  buttonDebounce();
 80011ea:	f000 fbe7 	bl	80019bc <buttonDebounce>
		  comHandler();
 80011ee:	f7ff f913 	bl	8000418 <comHandler>
		  if(flags.instructions.calibRequest)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <main+0x144>)
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	071b      	lsls	r3, r3, #28
 80011f8:	0fdb      	lsrs	r3, r3, #31
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00e      	beq.n	800121e <main+0x11a>
		  {
			  flags.meas.measRequest = 1;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <main+0x144>)
 8001202:	7d1a      	ldrb	r2, [r3, #20]
 8001204:	2101      	movs	r1, #1
 8001206:	430a      	orrs	r2, r1
 8001208:	751a      	strb	r2, [r3, #20]
			  flags.meas.calibMeas = 1;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <main+0x144>)
 800120c:	7d1a      	ldrb	r2, [r3, #20]
 800120e:	2140      	movs	r1, #64	; 0x40
 8001210:	430a      	orrs	r2, r1
 8001212:	751a      	strb	r2, [r3, #20]
			  flags.instructions.calibRequest = 0;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <main+0x144>)
 8001216:	7b1a      	ldrb	r2, [r3, #12]
 8001218:	2108      	movs	r1, #8
 800121a:	438a      	bics	r2, r1
 800121c:	731a      	strb	r2, [r3, #12]
		  }
		  UI_Handler();
 800121e:	f000 fc4b 	bl	8001ab8 <UI_Handler>
		  testHandler();
 8001222:	f001 fa3d 	bl	80026a0 <testHandler>
		  measHandler();
 8001226:	f000 fd87 	bl	8001d38 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 800122a:	e7d5      	b.n	80011d8 <main+0xd4>
 800122c:	200004a4 	.word	0x200004a4
 8001230:	20000694 	.word	0x20000694
 8001234:	20001134 	.word	0x20001134
 8001238:	20000490 	.word	0x20000490
 800123c:	0800d874 	.word	0x0800d874
 8001240:	0800d880 	.word	0x0800d880
 8001244:	48000800 	.word	0x48000800
 8001248:	20000630 	.word	0x20000630
 800124c:	200005e8 	.word	0x200005e8

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b099      	sub	sp, #100	; 0x64
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	242c      	movs	r4, #44	; 0x2c
 8001258:	193b      	adds	r3, r7, r4
 800125a:	0018      	movs	r0, r3
 800125c:	2334      	movs	r3, #52	; 0x34
 800125e:	001a      	movs	r2, r3
 8001260:	2100      	movs	r1, #0
 8001262:	f00b fecc 	bl	800cffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001266:	231c      	movs	r3, #28
 8001268:	18fb      	adds	r3, r7, r3
 800126a:	0018      	movs	r0, r3
 800126c:	2310      	movs	r3, #16
 800126e:	001a      	movs	r2, r3
 8001270:	2100      	movs	r1, #0
 8001272:	f00b fec4 	bl	800cffe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001276:	003b      	movs	r3, r7
 8001278:	0018      	movs	r0, r3
 800127a:	231c      	movs	r3, #28
 800127c:	001a      	movs	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	f00b febd 	bl	800cffe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001284:	0021      	movs	r1, r4
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2232      	movs	r2, #50	; 0x32
 800128a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2201      	movs	r2, #1
 8001290:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001292:	187b      	adds	r3, r7, r1
 8001294:	2201      	movs	r2, #1
 8001296:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2201      	movs	r2, #1
 800129c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2210      	movs	r2, #16
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2210      	movs	r2, #16
 80012a8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	2202      	movs	r2, #2
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0212      	lsls	r2, r2, #8
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2200      	movs	r2, #0
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2200      	movs	r2, #0
 80012c2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	0018      	movs	r0, r3
 80012c8:	f004 fbde 	bl	8005a88 <HAL_RCC_OscConfig>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012d0:	f000 fde4 	bl	8001e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d4:	211c      	movs	r1, #28
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	2202      	movs	r2, #2
 80012e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2100      	movs	r1, #0
 80012f2:	0018      	movs	r0, r3
 80012f4:	f004 ff4e 	bl	8006194 <HAL_RCC_ClockConfig>
 80012f8:	1e03      	subs	r3, r0, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80012fc:	f000 fdce 	bl	8001e9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001300:	003b      	movs	r3, r7
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	0292      	lsls	r2, r2, #10
 8001306:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001308:	003b      	movs	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130e:	003b      	movs	r3, r7
 8001310:	0018      	movs	r0, r3
 8001312:	f005 f8bb 	bl	800648c <HAL_RCCEx_PeriphCLKConfig>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800131a:	f000 fdbf 	bl	8001e9c <Error_Handler>
  }
}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b019      	add	sp, #100	; 0x64
 8001324:	bd90      	pop	{r4, r7, pc}
	...

08001328 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	0018      	movs	r0, r3
 8001332:	230c      	movs	r3, #12
 8001334:	001a      	movs	r2, r3
 8001336:	2100      	movs	r1, #0
 8001338:	f00b fe61 	bl	800cffe <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800133c:	4b87      	ldr	r3, [pc, #540]	; (800155c <MX_ADC_Init+0x234>)
 800133e:	4a88      	ldr	r2, [pc, #544]	; (8001560 <MX_ADC_Init+0x238>)
 8001340:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001342:	4b86      	ldr	r3, [pc, #536]	; (800155c <MX_ADC_Init+0x234>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001348:	4b84      	ldr	r3, [pc, #528]	; (800155c <MX_ADC_Init+0x234>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134e:	4b83      	ldr	r3, [pc, #524]	; (800155c <MX_ADC_Init+0x234>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001354:	4b81      	ldr	r3, [pc, #516]	; (800155c <MX_ADC_Init+0x234>)
 8001356:	2201      	movs	r2, #1
 8001358:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800135a:	4b80      	ldr	r3, [pc, #512]	; (800155c <MX_ADC_Init+0x234>)
 800135c:	2204      	movs	r2, #4
 800135e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001360:	4b7e      	ldr	r3, [pc, #504]	; (800155c <MX_ADC_Init+0x234>)
 8001362:	2200      	movs	r2, #0
 8001364:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001366:	4b7d      	ldr	r3, [pc, #500]	; (800155c <MX_ADC_Init+0x234>)
 8001368:	2200      	movs	r2, #0
 800136a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800136c:	4b7b      	ldr	r3, [pc, #492]	; (800155c <MX_ADC_Init+0x234>)
 800136e:	2200      	movs	r2, #0
 8001370:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001372:	4b7a      	ldr	r3, [pc, #488]	; (800155c <MX_ADC_Init+0x234>)
 8001374:	2200      	movs	r2, #0
 8001376:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001378:	4b78      	ldr	r3, [pc, #480]	; (800155c <MX_ADC_Init+0x234>)
 800137a:	22c2      	movs	r2, #194	; 0xc2
 800137c:	32ff      	adds	r2, #255	; 0xff
 800137e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001380:	4b76      	ldr	r3, [pc, #472]	; (800155c <MX_ADC_Init+0x234>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001386:	4b75      	ldr	r3, [pc, #468]	; (800155c <MX_ADC_Init+0x234>)
 8001388:	2224      	movs	r2, #36	; 0x24
 800138a:	2100      	movs	r1, #0
 800138c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800138e:	4b73      	ldr	r3, [pc, #460]	; (800155c <MX_ADC_Init+0x234>)
 8001390:	2201      	movs	r2, #1
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001394:	4b71      	ldr	r3, [pc, #452]	; (800155c <MX_ADC_Init+0x234>)
 8001396:	0018      	movs	r0, r3
 8001398:	f001 fc9e 	bl	8002cd8 <HAL_ADC_Init>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80013a0:	f000 fd7c 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	0152      	lsls	r2, r2, #5
 80013b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2205      	movs	r2, #5
 80013b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013b8:	1d3a      	adds	r2, r7, #4
 80013ba:	4b68      	ldr	r3, [pc, #416]	; (800155c <MX_ADC_Init+0x234>)
 80013bc:	0011      	movs	r1, r2
 80013be:	0018      	movs	r0, r3
 80013c0:	f001 ff5a 	bl	8003278 <HAL_ADC_ConfigChannel>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80013c8:	f000 fd68 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013d2:	1d3a      	adds	r2, r7, #4
 80013d4:	4b61      	ldr	r3, [pc, #388]	; (800155c <MX_ADC_Init+0x234>)
 80013d6:	0011      	movs	r1, r2
 80013d8:	0018      	movs	r0, r3
 80013da:	f001 ff4d 	bl	8003278 <HAL_ADC_ConfigChannel>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d001      	beq.n	80013e6 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80013e2:	f000 fd5b 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2202      	movs	r2, #2
 80013ea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013ec:	1d3a      	adds	r2, r7, #4
 80013ee:	4b5b      	ldr	r3, [pc, #364]	; (800155c <MX_ADC_Init+0x234>)
 80013f0:	0011      	movs	r1, r2
 80013f2:	0018      	movs	r0, r3
 80013f4:	f001 ff40 	bl	8003278 <HAL_ADC_ConfigChannel>
 80013f8:	1e03      	subs	r3, r0, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80013fc:	f000 fd4e 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2203      	movs	r2, #3
 8001404:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001406:	1d3a      	adds	r2, r7, #4
 8001408:	4b54      	ldr	r3, [pc, #336]	; (800155c <MX_ADC_Init+0x234>)
 800140a:	0011      	movs	r1, r2
 800140c:	0018      	movs	r0, r3
 800140e:	f001 ff33 	bl	8003278 <HAL_ADC_ConfigChannel>
 8001412:	1e03      	subs	r3, r0, #0
 8001414:	d001      	beq.n	800141a <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8001416:	f000 fd41 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2204      	movs	r2, #4
 800141e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001420:	1d3a      	adds	r2, r7, #4
 8001422:	4b4e      	ldr	r3, [pc, #312]	; (800155c <MX_ADC_Init+0x234>)
 8001424:	0011      	movs	r1, r2
 8001426:	0018      	movs	r0, r3
 8001428:	f001 ff26 	bl	8003278 <HAL_ADC_ConfigChannel>
 800142c:	1e03      	subs	r3, r0, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8001430:	f000 fd34 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2205      	movs	r2, #5
 8001438:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800143a:	1d3a      	adds	r2, r7, #4
 800143c:	4b47      	ldr	r3, [pc, #284]	; (800155c <MX_ADC_Init+0x234>)
 800143e:	0011      	movs	r1, r2
 8001440:	0018      	movs	r0, r3
 8001442:	f001 ff19 	bl	8003278 <HAL_ADC_ConfigChannel>
 8001446:	1e03      	subs	r3, r0, #0
 8001448:	d001      	beq.n	800144e <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800144a:	f000 fd27 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2206      	movs	r2, #6
 8001452:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001454:	1d3a      	adds	r2, r7, #4
 8001456:	4b41      	ldr	r3, [pc, #260]	; (800155c <MX_ADC_Init+0x234>)
 8001458:	0011      	movs	r1, r2
 800145a:	0018      	movs	r0, r3
 800145c:	f001 ff0c 	bl	8003278 <HAL_ADC_ConfigChannel>
 8001460:	1e03      	subs	r3, r0, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8001464:	f000 fd1a 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2207      	movs	r2, #7
 800146c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800146e:	1d3a      	adds	r2, r7, #4
 8001470:	4b3a      	ldr	r3, [pc, #232]	; (800155c <MX_ADC_Init+0x234>)
 8001472:	0011      	movs	r1, r2
 8001474:	0018      	movs	r0, r3
 8001476:	f001 feff 	bl	8003278 <HAL_ADC_ConfigChannel>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 800147e:	f000 fd0d 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2208      	movs	r2, #8
 8001486:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001488:	1d3a      	adds	r2, r7, #4
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <MX_ADC_Init+0x234>)
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f001 fef2 	bl	8003278 <HAL_ADC_ConfigChannel>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d001      	beq.n	800149c <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8001498:	f000 fd00 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2209      	movs	r2, #9
 80014a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014a2:	1d3a      	adds	r2, r7, #4
 80014a4:	4b2d      	ldr	r3, [pc, #180]	; (800155c <MX_ADC_Init+0x234>)
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f001 fee5 	bl	8003278 <HAL_ADC_ConfigChannel>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80014b2:	f000 fcf3 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	220a      	movs	r2, #10
 80014ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014bc:	1d3a      	adds	r2, r7, #4
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <MX_ADC_Init+0x234>)
 80014c0:	0011      	movs	r1, r2
 80014c2:	0018      	movs	r0, r3
 80014c4:	f001 fed8 	bl	8003278 <HAL_ADC_ConfigChannel>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 80014cc:	f000 fce6 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	220b      	movs	r2, #11
 80014d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014d6:	1d3a      	adds	r2, r7, #4
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <MX_ADC_Init+0x234>)
 80014da:	0011      	movs	r1, r2
 80014dc:	0018      	movs	r0, r3
 80014de:	f001 fecb 	bl	8003278 <HAL_ADC_ConfigChannel>
 80014e2:	1e03      	subs	r3, r0, #0
 80014e4:	d001      	beq.n	80014ea <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 80014e6:	f000 fcd9 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	220c      	movs	r2, #12
 80014ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014f0:	1d3a      	adds	r2, r7, #4
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_ADC_Init+0x234>)
 80014f4:	0011      	movs	r1, r2
 80014f6:	0018      	movs	r0, r3
 80014f8:	f001 febe 	bl	8003278 <HAL_ADC_ConfigChannel>
 80014fc:	1e03      	subs	r3, r0, #0
 80014fe:	d001      	beq.n	8001504 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 8001500:	f000 fccc 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	220d      	movs	r2, #13
 8001508:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800150a:	1d3a      	adds	r2, r7, #4
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_ADC_Init+0x234>)
 800150e:	0011      	movs	r1, r2
 8001510:	0018      	movs	r0, r3
 8001512:	f001 feb1 	bl	8003278 <HAL_ADC_ConfigChannel>
 8001516:	1e03      	subs	r3, r0, #0
 8001518:	d001      	beq.n	800151e <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 800151a:	f000 fcbf 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	220e      	movs	r2, #14
 8001522:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001524:	1d3a      	adds	r2, r7, #4
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <MX_ADC_Init+0x234>)
 8001528:	0011      	movs	r1, r2
 800152a:	0018      	movs	r0, r3
 800152c:	f001 fea4 	bl	8003278 <HAL_ADC_ConfigChannel>
 8001530:	1e03      	subs	r3, r0, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 8001534:	f000 fcb2 	bl	8001e9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	220f      	movs	r2, #15
 800153c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800153e:	1d3a      	adds	r2, r7, #4
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_ADC_Init+0x234>)
 8001542:	0011      	movs	r1, r2
 8001544:	0018      	movs	r0, r3
 8001546:	f001 fe97 	bl	8003278 <HAL_ADC_ConfigChannel>
 800154a:	1e03      	subs	r3, r0, #0
 800154c:	d001      	beq.n	8001552 <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 800154e:	f000 fca5 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	2000064c 	.word	0x2000064c
 8001560:	40012400 	.word	0x40012400

08001564 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <MX_SPI1_Init+0x80>)
 800156a:	4a1f      	ldr	r2, [pc, #124]	; (80015e8 <MX_SPI1_Init+0x84>)
 800156c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800156e:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_SPI1_Init+0x80>)
 8001570:	2282      	movs	r2, #130	; 0x82
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_SPI1_Init+0x80>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_SPI1_Init+0x80>)
 800157e:	22e0      	movs	r2, #224	; 0xe0
 8001580:	00d2      	lsls	r2, r2, #3
 8001582:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_SPI1_Init+0x80>)
 8001586:	2202      	movs	r2, #2
 8001588:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_SPI1_Init+0x80>)
 800158c:	2201      	movs	r2, #1
 800158e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_SPI1_Init+0x80>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	0092      	lsls	r2, r2, #2
 8001596:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_SPI1_Init+0x80>)
 800159a:	2238      	movs	r2, #56	; 0x38
 800159c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_SPI1_Init+0x80>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_SPI1_Init+0x80>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_SPI1_Init+0x80>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_SPI1_Init+0x80>)
 80015b2:	2207      	movs	r2, #7
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_SPI1_Init+0x80>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_SPI1_Init+0x80>)
 80015be:	2200      	movs	r2, #0
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_SPI1_Init+0x80>)
 80015c4:	0018      	movs	r0, r3
 80015c6:	f005 f85f 	bl	8006688 <HAL_SPI_Init>
 80015ca:	1e03      	subs	r3, r0, #0
 80015cc:	d001      	beq.n	80015d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015ce:	f000 fc65 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_SPI1_Init+0x88>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	2140      	movs	r1, #64	; 0x40
 80015d8:	0018      	movs	r0, r3
 80015da:	f002 fb8e 	bl	8003cfa <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000584 	.word	0x20000584
 80015e8:	40013000 	.word	0x40013000
 80015ec:	48000400 	.word	0x48000400

080015f0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	0018      	movs	r0, r3
 80015fa:	231c      	movs	r3, #28
 80015fc:	001a      	movs	r2, r3
 80015fe:	2100      	movs	r1, #0
 8001600:	f00b fcfd 	bl	800cffe <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <MX_TIM14_Init+0x8c>)
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <MX_TIM14_Init+0x90>)
 8001608:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <MX_TIM14_Init+0x8c>)
 800160c:	220f      	movs	r2, #15
 800160e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_TIM14_Init+0x8c>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <MX_TIM14_Init+0x8c>)
 8001618:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <MX_TIM14_Init+0x94>)
 800161a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_TIM14_Init+0x8c>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <MX_TIM14_Init+0x8c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_TIM14_Init+0x8c>)
 800162a:	0018      	movs	r0, r3
 800162c:	f005 fd84 	bl	8007138 <HAL_TIM_Base_Init>
 8001630:	1e03      	subs	r3, r0, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001634:	f000 fc32 	bl	8001e9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_TIM14_Init+0x8c>)
 800163a:	0018      	movs	r0, r3
 800163c:	f005 fe1e 	bl	800727c <HAL_TIM_OC_Init>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001644:	f000 fc2a 	bl	8001e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001660:	1d39      	adds	r1, r7, #4
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <MX_TIM14_Init+0x8c>)
 8001664:	2200      	movs	r2, #0
 8001666:	0018      	movs	r0, r3
 8001668:	f005 ff76 	bl	8007558 <HAL_TIM_OC_ConfigChannel>
 800166c:	1e03      	subs	r3, r0, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001670:	f000 fc14 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b008      	add	sp, #32
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200005e8 	.word	0x200005e8
 8001680:	40002000 	.word	0x40002000
 8001684:	0000270f 	.word	0x0000270f

08001688 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <MX_USART3_UART_Init+0x58>)
 800168e:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <MX_USART3_UART_Init+0x5c>)
 8001690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <MX_USART3_UART_Init+0x58>)
 8001694:	2296      	movs	r2, #150	; 0x96
 8001696:	0212      	lsls	r2, r2, #8
 8001698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_USART3_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_USART3_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_USART3_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_USART3_UART_Init+0x58>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <MX_USART3_UART_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_USART3_UART_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <MX_USART3_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_USART3_UART_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <MX_USART3_UART_Init+0x58>)
 80016cc:	0018      	movs	r0, r3
 80016ce:	f006 fa47 	bl	8007b60 <HAL_UART_Init>
 80016d2:	1e03      	subs	r3, r0, #0
 80016d4:	d001      	beq.n	80016da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016d6:	f000 fbe1 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000500 	.word	0x20000500
 80016e4:	40004800 	.word	0x40004800

080016e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b08b      	sub	sp, #44	; 0x2c
 80016ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	2414      	movs	r4, #20
 80016f0:	193b      	adds	r3, r7, r4
 80016f2:	0018      	movs	r0, r3
 80016f4:	2314      	movs	r3, #20
 80016f6:	001a      	movs	r2, r3
 80016f8:	2100      	movs	r1, #0
 80016fa:	f00b fc80 	bl	800cffe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fe:	4b6b      	ldr	r3, [pc, #428]	; (80018ac <MX_GPIO_Init+0x1c4>)
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <MX_GPIO_Init+0x1c4>)
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	03c9      	lsls	r1, r1, #15
 8001708:	430a      	orrs	r2, r1
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	4b67      	ldr	r3, [pc, #412]	; (80018ac <MX_GPIO_Init+0x1c4>)
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	03db      	lsls	r3, r3, #15
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	4b64      	ldr	r3, [pc, #400]	; (80018ac <MX_GPIO_Init+0x1c4>)
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <MX_GPIO_Init+0x1c4>)
 8001720:	2180      	movs	r1, #128	; 0x80
 8001722:	0309      	lsls	r1, r1, #12
 8001724:	430a      	orrs	r2, r1
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	4b60      	ldr	r3, [pc, #384]	; (80018ac <MX_GPIO_Init+0x1c4>)
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	031b      	lsls	r3, r3, #12
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b5d      	ldr	r3, [pc, #372]	; (80018ac <MX_GPIO_Init+0x1c4>)
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <MX_GPIO_Init+0x1c4>)
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	0289      	lsls	r1, r1, #10
 8001740:	430a      	orrs	r2, r1
 8001742:	615a      	str	r2, [r3, #20]
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <MX_GPIO_Init+0x1c4>)
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	029b      	lsls	r3, r3, #10
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b56      	ldr	r3, [pc, #344]	; (80018ac <MX_GPIO_Init+0x1c4>)
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	4b55      	ldr	r3, [pc, #340]	; (80018ac <MX_GPIO_Init+0x1c4>)
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	02c9      	lsls	r1, r1, #11
 800175c:	430a      	orrs	r2, r1
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	4b52      	ldr	r3, [pc, #328]	; (80018ac <MX_GPIO_Init+0x1c4>)
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	02db      	lsls	r3, r3, #11
 8001768:	4013      	ands	r3, r2
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800176e:	4b4f      	ldr	r3, [pc, #316]	; (80018ac <MX_GPIO_Init+0x1c4>)
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	4b4e      	ldr	r3, [pc, #312]	; (80018ac <MX_GPIO_Init+0x1c4>)
 8001774:	2180      	movs	r1, #128	; 0x80
 8001776:	0349      	lsls	r1, r1, #13
 8001778:	430a      	orrs	r2, r1
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <MX_GPIO_Init+0x1c4>)
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	035b      	lsls	r3, r3, #13
 8001784:	4013      	ands	r3, r2
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 800178a:	4949      	ldr	r1, [pc, #292]	; (80018b0 <MX_GPIO_Init+0x1c8>)
 800178c:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <MX_GPIO_Init+0x1cc>)
 800178e:	2200      	movs	r2, #0
 8001790:	0018      	movs	r0, r3
 8001792:	f002 fab2 	bl	8003cfa <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001796:	239e      	movs	r3, #158	; 0x9e
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	4847      	ldr	r0, [pc, #284]	; (80018b8 <MX_GPIO_Init+0x1d0>)
 800179c:	2200      	movs	r2, #0
 800179e:	0019      	movs	r1, r3
 80017a0:	f002 faab 	bl	8003cfa <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	0219      	lsls	r1, r3, #8
 80017a8:	2390      	movs	r3, #144	; 0x90
 80017aa:	05db      	lsls	r3, r3, #23
 80017ac:	2200      	movs	r2, #0
 80017ae:	0018      	movs	r0, r3
 80017b0:	f002 faa3 	bl	8003cfa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	4a3e      	ldr	r2, [pc, #248]	; (80018b0 <MX_GPIO_Init+0x1c8>)
 80017b8:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	2201      	movs	r2, #1
 80017be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	193b      	adds	r3, r7, r4
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	4a39      	ldr	r2, [pc, #228]	; (80018b4 <MX_GPIO_Init+0x1cc>)
 80017d0:	0019      	movs	r1, r3
 80017d2:	0010      	movs	r0, r2
 80017d4:	f002 f8fc 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 80017d8:	0021      	movs	r1, r4
 80017da:	187b      	adds	r3, r7, r1
 80017dc:	229e      	movs	r2, #158	; 0x9e
 80017de:	0152      	lsls	r2, r2, #5
 80017e0:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	000c      	movs	r4, r1
 80017e4:	193b      	adds	r3, r7, r4
 80017e6:	2201      	movs	r2, #1
 80017e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	193b      	adds	r3, r7, r4
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	4a2f      	ldr	r2, [pc, #188]	; (80018b8 <MX_GPIO_Init+0x1d0>)
 80017fa:	0019      	movs	r1, r3
 80017fc:	0010      	movs	r0, r2
 80017fe:	f002 f8e7 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8001802:	193b      	adds	r3, r7, r4
 8001804:	22c0      	movs	r2, #192	; 0xc0
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180a:	193b      	adds	r3, r7, r4
 800180c:	2288      	movs	r2, #136	; 0x88
 800180e:	0352      	lsls	r2, r2, #13
 8001810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001812:	193b      	adds	r3, r7, r4
 8001814:	2202      	movs	r2, #2
 8001816:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	193a      	adds	r2, r7, r4
 800181a:	2390      	movs	r3, #144	; 0x90
 800181c:	05db      	lsls	r3, r3, #23
 800181e:	0011      	movs	r1, r2
 8001820:	0018      	movs	r0, r3
 8001822:	f002 f8d5 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001826:	193b      	adds	r3, r7, r4
 8001828:	2280      	movs	r2, #128	; 0x80
 800182a:	00d2      	lsls	r2, r2, #3
 800182c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	193b      	adds	r3, r7, r4
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	193b      	adds	r3, r7, r4
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800183a:	193a      	adds	r2, r7, r4
 800183c:	2390      	movs	r3, #144	; 0x90
 800183e:	05db      	lsls	r3, r3, #23
 8001840:	0011      	movs	r1, r2
 8001842:	0018      	movs	r0, r3
 8001844:	f002 f8c4 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8001848:	0021      	movs	r1, r4
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	0212      	lsls	r2, r2, #8
 8001850:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	000c      	movs	r4, r1
 8001854:	193b      	adds	r3, r7, r4
 8001856:	2201      	movs	r2, #1
 8001858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	193b      	adds	r3, r7, r4
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	193b      	adds	r3, r7, r4
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8001866:	193a      	adds	r2, r7, r4
 8001868:	2390      	movs	r3, #144	; 0x90
 800186a:	05db      	lsls	r3, r3, #23
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f002 f8ae 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8001874:	193b      	adds	r3, r7, r4
 8001876:	2204      	movs	r2, #4
 8001878:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	193b      	adds	r3, r7, r4
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	193b      	adds	r3, r7, r4
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8001886:	193b      	adds	r3, r7, r4
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <MX_GPIO_Init+0x1d4>)
 800188a:	0019      	movs	r1, r3
 800188c:	0010      	movs	r0, r2
 800188e:	f002 f89f 	bl	80039d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2007      	movs	r0, #7
 8001898:	f001 ffea 	bl	8003870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800189c:	2007      	movs	r0, #7
 800189e:	f001 fffc 	bl	800389a <HAL_NVIC_EnableIRQ>

}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b00b      	add	sp, #44	; 0x2c
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	40021000 	.word	0x40021000
 80018b0:	0000f3c4 	.word	0x0000f3c4
 80018b4:	48000400 	.word	0x48000400
 80018b8:	48000800 	.word	0x48000800
 80018bc:	48000c00 	.word	0x48000c00

080018c0 <clkHandler>:

/* USER CODE BEGIN 4 */

//_____Hodiny_____//
void clkHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	//___nulování všech flagů___//
	flags.time.ten_ms = 0;
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <clkHandler+0xf4>)
 80018c6:	781a      	ldrb	r2, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	438a      	bics	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <clkHandler+0xf4>)
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	2102      	movs	r1, #2
 80018d4:	438a      	bics	r2, r1
 80018d6:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 80018d8:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <clkHandler+0xf4>)
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	2104      	movs	r1, #4
 80018de:	438a      	bics	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 80018e2:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <clkHandler+0xf4>)
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	2108      	movs	r1, #8
 80018e8:	438a      	bics	r2, r1
 80018ea:	701a      	strb	r2, [r3, #0]

	sysTime[SYSTIME_TEN_MS]++;	//uplynulo dalších 10 ms
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <clkHandler+0xf8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <clkHandler+0xf8>)
 80018f4:	601a      	str	r2, [r3, #0]

#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 80018f6:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <clkHandler+0xf8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2164      	movs	r1, #100	; 0x64
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7fe fc9b 	bl	8000238 <__aeabi_uidivmod>
 8001902:	1e0b      	subs	r3, r1, #0
 8001904:	d109      	bne.n	800191a <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 8001906:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <clkHandler+0xf8>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <clkHandler+0xf8>)
 800190e:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8001910:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <clkHandler+0xf4>)
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	2102      	movs	r1, #2
 8001916:	430a      	orrs	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)	//Uplynula 1 s
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <clkHandler+0xf4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	079b      	lsls	r3, r3, #30
 8001920:	0fdb      	lsrs	r3, r3, #31
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d042      	beq.n	80019ae <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <clkHandler+0xf8>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	213c      	movs	r1, #60	; 0x3c
 800192e:	0018      	movs	r0, r3
 8001930:	f7fe fc82 	bl	8000238 <__aeabi_uidivmod>
 8001934:	1e0b      	subs	r3, r1, #0
 8001936:	d110      	bne.n	800195a <clkHandler+0x9a>
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <clkHandler+0xf8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00c      	beq.n	800195a <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <clkHandler+0xf8>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <clkHandler+0xf8>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <clkHandler+0xf8>)
 800194e:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <clkHandler+0xf4>)
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	2104      	movs	r1, #4
 8001956:	430a      	orrs	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)	//Uplynula 1 min
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <clkHandler+0xf4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	075b      	lsls	r3, r3, #29
 8001960:	0fdb      	lsrs	r3, r3, #31
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d022      	beq.n	80019ae <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <clkHandler+0xf8>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	213c      	movs	r1, #60	; 0x3c
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe fc62 	bl	8000238 <__aeabi_uidivmod>
 8001974:	1e0b      	subs	r3, r1, #0
 8001976:	d11a      	bne.n	80019ae <clkHandler+0xee>
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <clkHandler+0xf8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d016      	beq.n	80019ae <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <clkHandler+0xf8>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <clkHandler+0xf8>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <clkHandler+0xf8>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <clkHandler+0xf8>)
 8001994:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <clkHandler+0xf4>)
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	2108      	movs	r1, #8
 800199c:	430a      	orrs	r2, r1
 800199e:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <clkHandler+0xf8>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b16      	cmp	r3, #22
 80019a6:	d902      	bls.n	80019ae <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <clkHandler+0xf8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000630 	.word	0x20000630
 80019b8:	2000023c 	.word	0x2000023c

080019bc <buttonDebounce>:

//_____Debounce tlačítek_____//
void buttonDebounce(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	//___nulování flagů___//
	flags.buttons.butt0_ver = 0;
 80019c0:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <buttonDebounce+0xf0>)
 80019c2:	791a      	ldrb	r2, [r3, #4]
 80019c4:	2102      	movs	r1, #2
 80019c6:	438a      	bics	r2, r1
 80019c8:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 80019ca:	4b38      	ldr	r3, [pc, #224]	; (8001aac <buttonDebounce+0xf0>)
 80019cc:	791a      	ldrb	r2, [r3, #4]
 80019ce:	2108      	movs	r1, #8
 80019d0:	438a      	bics	r2, r1
 80019d2:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)	//interrupt tlačítka 0
 80019d4:	4b35      	ldr	r3, [pc, #212]	; (8001aac <buttonDebounce+0xf0>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	07db      	lsls	r3, r3, #31
 80019da:	0fdb      	lsrs	r3, r3, #31
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d02c      	beq.n	8001a3c <buttonDebounce+0x80>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	009a      	lsls	r2, r3, #2
 80019e6:	2390      	movs	r3, #144	; 0x90
 80019e8:	05db      	lsls	r3, r3, #23
 80019ea:	0011      	movs	r1, r2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f002 f967 	bl	8003cc0 <HAL_GPIO_ReadPin>
 80019f2:	0003      	movs	r3, r0
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <buttonDebounce+0xf4>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	3301      	adds	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <buttonDebounce+0xf4>)
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	e007      	b.n	8001a18 <buttonDebounce+0x5c>
		}
		else	//pin tlačítka na Low -> šlo o zákmit
		{
			button0_Debounce = 0;
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <buttonDebounce+0xf4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8001a0e:	4b27      	ldr	r3, [pc, #156]	; (8001aac <buttonDebounce+0xf0>)
 8001a10:	791a      	ldrb	r2, [r3, #4]
 8001a12:	2101      	movs	r1, #1
 8001a14:	438a      	bics	r2, r1
 8001a16:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)	//pin tlačítka na High 5*10 ms -> ustálený stisk
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <buttonDebounce+0xf4>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d90c      	bls.n	8001a3c <buttonDebounce+0x80>
		{
			flags.buttons.butt0_ver = 1;
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <buttonDebounce+0xf0>)
 8001a24:	791a      	ldrb	r2, [r3, #4]
 8001a26:	2102      	movs	r1, #2
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <buttonDebounce+0xf0>)
 8001a2e:	791a      	ldrb	r2, [r3, #4]
 8001a30:	2101      	movs	r1, #1
 8001a32:	438a      	bics	r2, r1
 8001a34:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <buttonDebounce+0xf4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)	//interrupt tlačítka 1
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <buttonDebounce+0xf0>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	075b      	lsls	r3, r3, #29
 8001a42:	0fdb      	lsrs	r3, r3, #31
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d02c      	beq.n	8001aa4 <buttonDebounce+0xe8>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	005a      	lsls	r2, r3, #1
 8001a4e:	2390      	movs	r3, #144	; 0x90
 8001a50:	05db      	lsls	r3, r3, #23
 8001a52:	0011      	movs	r1, r2
 8001a54:	0018      	movs	r0, r3
 8001a56:	f002 f933 	bl	8003cc0 <HAL_GPIO_ReadPin>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <buttonDebounce+0xb4>
		{
			button1_Debounce++;
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <buttonDebounce+0xf8>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <buttonDebounce+0xf8>)
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e007      	b.n	8001a80 <buttonDebounce+0xc4>
		}
		else	//pin tlačítka na Low -> šlo o zákmit
		{
			button1_Debounce = 0;
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <buttonDebounce+0xf8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <buttonDebounce+0xf0>)
 8001a78:	791a      	ldrb	r2, [r3, #4]
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)	//pin tlačítka na High 5*10 ms -> ustálený stisk
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <buttonDebounce+0xf8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d90c      	bls.n	8001aa4 <buttonDebounce+0xe8>
		{
			flags.buttons.butt1_ver = 1;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <buttonDebounce+0xf0>)
 8001a8c:	791a      	ldrb	r2, [r3, #4]
 8001a8e:	2108      	movs	r1, #8
 8001a90:	430a      	orrs	r2, r1
 8001a92:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <buttonDebounce+0xf0>)
 8001a96:	791a      	ldrb	r2, [r3, #4]
 8001a98:	2104      	movs	r1, #4
 8001a9a:	438a      	bics	r2, r1
 8001a9c:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <buttonDebounce+0xf8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	20000630 	.word	0x20000630
 8001ab0:	2000024c 	.word	0x2000024c
 8001ab4:	2000024d 	.word	0x2000024d

08001ab8 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

	static uint32_t startTime;	//proměnná pro časování dějů

	//___Nastavení stavu podle požadavků___//
	//___Stavy výše mají vyšší prioritu (error nejvyšší)___//
	if(flags.ui.error && (UI_State != ERROR))
 8001abc:	4b97      	ldr	r3, [pc, #604]	; (8001d1c <UI_Handler+0x264>)
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	075b      	lsls	r3, r3, #29
 8001ac2:	0fdb      	lsrs	r3, r3, #31
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <UI_Handler+0x2a>
 8001aca:	4b95      	ldr	r3, [pc, #596]	; (8001d20 <UI_Handler+0x268>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d007      	beq.n	8001ae2 <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 8001ad2:	4b93      	ldr	r3, [pc, #588]	; (8001d20 <UI_Handler+0x268>)
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001ad8:	4b92      	ldr	r3, [pc, #584]	; (8001d24 <UI_Handler+0x26c>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b92      	ldr	r3, [pc, #584]	; (8001d28 <UI_Handler+0x270>)
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e05e      	b.n	8001ba0 <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 8001ae2:	4b8e      	ldr	r3, [pc, #568]	; (8001d1c <UI_Handler+0x264>)
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	071b      	lsls	r3, r3, #28
 8001ae8:	0fdb      	lsrs	r3, r3, #31
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d010      	beq.n	8001b12 <UI_Handler+0x5a>
 8001af0:	4b8b      	ldr	r3, [pc, #556]	; (8001d20 <UI_Handler+0x268>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10c      	bne.n	8001b12 <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 8001af8:	4b89      	ldr	r3, [pc, #548]	; (8001d20 <UI_Handler+0x268>)
 8001afa:	2204      	movs	r2, #4
 8001afc:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001afe:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <UI_Handler+0x26c>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b89      	ldr	r3, [pc, #548]	; (8001d28 <UI_Handler+0x270>)
 8001b04:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 8001b06:	4b85      	ldr	r3, [pc, #532]	; (8001d1c <UI_Handler+0x264>)
 8001b08:	7c1a      	ldrb	r2, [r3, #16]
 8001b0a:	2108      	movs	r1, #8
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	741a      	strb	r2, [r3, #16]
 8001b10:	e046      	b.n	8001ba0 <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 8001b12:	4b82      	ldr	r3, [pc, #520]	; (8001d1c <UI_Handler+0x264>)
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	06db      	lsls	r3, r3, #27
 8001b18:	0fdb      	lsrs	r3, r3, #31
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d010      	beq.n	8001b42 <UI_Handler+0x8a>
 8001b20:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <UI_Handler+0x268>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10c      	bne.n	8001b42 <UI_Handler+0x8a>
	{
		UI_State = DONE;
 8001b28:	4b7d      	ldr	r3, [pc, #500]	; (8001d20 <UI_Handler+0x268>)
 8001b2a:	2205      	movs	r2, #5
 8001b2c:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001b2e:	4b7d      	ldr	r3, [pc, #500]	; (8001d24 <UI_Handler+0x26c>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <UI_Handler+0x270>)
 8001b34:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 8001b36:	4b79      	ldr	r3, [pc, #484]	; (8001d1c <UI_Handler+0x264>)
 8001b38:	7c1a      	ldrb	r2, [r3, #16]
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	438a      	bics	r2, r1
 8001b3e:	741a      	strb	r2, [r3, #16]
 8001b40:	e02e      	b.n	8001ba0 <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 8001b42:	4b76      	ldr	r3, [pc, #472]	; (8001d1c <UI_Handler+0x264>)
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	079b      	lsls	r3, r3, #30
 8001b48:	0fdb      	lsrs	r3, r3, #31
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d010      	beq.n	8001b72 <UI_Handler+0xba>
 8001b50:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <UI_Handler+0x268>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10c      	bne.n	8001b72 <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 8001b58:	4b71      	ldr	r3, [pc, #452]	; (8001d20 <UI_Handler+0x268>)
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001b5e:	4b71      	ldr	r3, [pc, #452]	; (8001d24 <UI_Handler+0x26c>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b71      	ldr	r3, [pc, #452]	; (8001d28 <UI_Handler+0x270>)
 8001b64:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 8001b66:	4b6d      	ldr	r3, [pc, #436]	; (8001d1c <UI_Handler+0x264>)
 8001b68:	7c1a      	ldrb	r2, [r3, #16]
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	438a      	bics	r2, r1
 8001b6e:	741a      	strb	r2, [r3, #16]
 8001b70:	e016      	b.n	8001ba0 <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 8001b72:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <UI_Handler+0x264>)
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	07db      	lsls	r3, r3, #31
 8001b78:	0fdb      	lsrs	r3, r3, #31
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00f      	beq.n	8001ba0 <UI_Handler+0xe8>
 8001b80:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <UI_Handler+0x268>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10b      	bne.n	8001ba0 <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 8001b88:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <UI_Handler+0x268>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001b8e:	4b65      	ldr	r3, [pc, #404]	; (8001d24 <UI_Handler+0x26c>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <UI_Handler+0x270>)
 8001b94:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 8001b96:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <UI_Handler+0x264>)
 8001b98:	7c1a      	ldrb	r2, [r3, #16]
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	438a      	bics	r2, r1
 8001b9e:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 8001ba0:	4b5f      	ldr	r3, [pc, #380]	; (8001d20 <UI_Handler+0x268>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d900      	bls.n	8001baa <UI_Handler+0xf2>
 8001ba8:	e0a0      	b.n	8001cec <UI_Handler+0x234>
 8001baa:	009a      	lsls	r2, r3, #2
 8001bac:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <UI_Handler+0x274>)
 8001bae:	18d3      	adds	r3, r2, r3
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	015b      	lsls	r3, r3, #5
 8001bb8:	485d      	ldr	r0, [pc, #372]	; (8001d30 <UI_Handler+0x278>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	f002 f89c 	bl	8003cfa <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)		//0,5s
 8001bc2:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <UI_Handler+0x26c>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <UI_Handler+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b31      	cmp	r3, #49	; 0x31
 8001bce:	d800      	bhi.n	8001bd2 <UI_Handler+0x11a>
 8001bd0:	e097      	b.n	8001d02 <UI_Handler+0x24a>
		{
			UI_State = OFF;
 8001bd2:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <UI_Handler+0x268>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	015b      	lsls	r3, r3, #5
 8001bdc:	4854      	ldr	r0, [pc, #336]	; (8001d30 <UI_Handler+0x278>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	0019      	movs	r1, r3
 8001be2:	f002 f88a 	bl	8003cfa <HAL_GPIO_WritePin>
		}
		break;
 8001be6:	e08c      	b.n	8001d02 <UI_Handler+0x24a>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	4850      	ldr	r0, [pc, #320]	; (8001d30 <UI_Handler+0x278>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	f002 f882 	bl	8003cfa <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)	//1s
 8001bf6:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <UI_Handler+0x26c>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b4b      	ldr	r3, [pc, #300]	; (8001d28 <UI_Handler+0x270>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b63      	cmp	r3, #99	; 0x63
 8001c02:	d800      	bhi.n	8001c06 <UI_Handler+0x14e>
 8001c04:	e07f      	b.n	8001d06 <UI_Handler+0x24e>
		{
			UI_State = OFF;
 8001c06:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <UI_Handler+0x268>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	015b      	lsls	r3, r3, #5
 8001c10:	4847      	ldr	r0, [pc, #284]	; (8001d30 <UI_Handler+0x278>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	0019      	movs	r1, r3
 8001c16:	f002 f870 	bl	8003cfa <HAL_GPIO_WritePin>
		}
		break;
 8001c1a:	e074      	b.n	8001d06 <UI_Handler+0x24e>

	case ERROR:
		if(!flags.ui.error)	//dokud není požadavek zrušen provádí se error
 8001c1c:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <UI_Handler+0x264>)
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	075b      	lsls	r3, r3, #29
 8001c22:	0fdb      	lsrs	r3, r3, #31
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <UI_Handler+0x178>
			UI_State = OFF;
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <UI_Handler+0x268>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8001c30:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <UI_Handler+0x26c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <UI_Handler+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2132      	movs	r1, #50	; 0x32
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7fe fafb 	bl	8000238 <__aeabi_uidivmod>
 8001c42:	1e0b      	subs	r3, r1, #0
 8001c44:	d161      	bne.n	8001d0a <UI_Handler+0x252>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	015b      	lsls	r3, r3, #5
 8001c4a:	4a39      	ldr	r2, [pc, #228]	; (8001d30 <UI_Handler+0x278>)
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0010      	movs	r0, r2
 8001c50:	f002 f870 	bl	8003d34 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	021a      	lsls	r2, r3, #8
 8001c58:	2390      	movs	r3, #144	; 0x90
 8001c5a:	05db      	lsls	r3, r3, #23
 8001c5c:	0011      	movs	r1, r2
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f002 f868 	bl	8003d34 <HAL_GPIO_TogglePin>
		}
		break;
 8001c64:	e051      	b.n	8001d0a <UI_Handler+0x252>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))	//každých 0,35s
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <UI_Handler+0x26c>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <UI_Handler+0x270>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2123      	movs	r1, #35	; 0x23
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7fe fae0 	bl	8000238 <__aeabi_uidivmod>
 8001c78:	1e0b      	subs	r3, r1, #0
 8001c7a:	d106      	bne.n	8001c8a <UI_Handler+0x1d2>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	015b      	lsls	r3, r3, #5
 8001c80:	4a2b      	ldr	r2, [pc, #172]	; (8001d30 <UI_Handler+0x278>)
 8001c82:	0019      	movs	r1, r3
 8001c84:	0010      	movs	r0, r2
 8001c86:	f002 f855 	bl	8003d34 <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)	//Po 2,1s ukonči
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <UI_Handler+0x26c>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <UI_Handler+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2bd0      	cmp	r3, #208	; 0xd0
 8001c96:	d93a      	bls.n	8001d0e <UI_Handler+0x256>
			UI_State = OFF;
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <UI_Handler+0x268>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
		break;
 8001c9e:	e036      	b.n	8001d0e <UI_Handler+0x256>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <UI_Handler+0x26c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <UI_Handler+0x270>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2132      	movs	r1, #50	; 0x32
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7fe fac3 	bl	8000238 <__aeabi_uidivmod>
 8001cb2:	1e0b      	subs	r3, r1, #0
 8001cb4:	d10d      	bne.n	8001cd2 <UI_Handler+0x21a>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	015b      	lsls	r3, r3, #5
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <UI_Handler+0x278>)
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	0010      	movs	r0, r2
 8001cc0:	f002 f838 	bl	8003d34 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <UI_Handler+0x27c>)
 8001cca:	0019      	movs	r1, r3
 8001ccc:	0010      	movs	r0, r2
 8001cce:	f002 f831 	bl	8003d34 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)	//Po 3s ukonči
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <UI_Handler+0x26c>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <UI_Handler+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1ad2      	subs	r2, r2, r3
 8001cdc:	2395      	movs	r3, #149	; 0x95
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d916      	bls.n	8001d12 <UI_Handler+0x25a>
			UI_State = OFF;
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <UI_Handler+0x268>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
		break;
 8001cea:	e012      	b.n	8001d12 <UI_Handler+0x25a>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	015b      	lsls	r3, r3, #5
 8001cf0:	480f      	ldr	r0, [pc, #60]	; (8001d30 <UI_Handler+0x278>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	f002 f800 	bl	8003cfa <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
 8001cfa:	2003      	movs	r0, #3
 8001cfc:	f7fe ff62 	bl	8000bc4 <setColour>
#endif
		break;
 8001d00:	e008      	b.n	8001d14 <UI_Handler+0x25c>
		break;
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	e006      	b.n	8001d14 <UI_Handler+0x25c>
		break;
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	e004      	b.n	8001d14 <UI_Handler+0x25c>
		break;
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	e002      	b.n	8001d14 <UI_Handler+0x25c>
		break;
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	e000      	b.n	8001d14 <UI_Handler+0x25c>
		break;
 8001d12:	46c0      	nop			; (mov r8, r8)

	}
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	20000630 	.word	0x20000630
 8001d20:	2000024e 	.word	0x2000024e
 8001d24:	2000023c 	.word	0x2000023c
 8001d28:	20000250 	.word	0x20000250
 8001d2c:	0800d974 	.word	0x0800d974
 8001d30:	48000800 	.word	0x48000800
 8001d34:	48000400 	.word	0x48000400

08001d38 <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;

	//___Nulování flagů___//
	flags.meas.measComplete = 0;
 8001d3c:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <measHandler+0x14c>)
 8001d3e:	7d1a      	ldrb	r2, [r3, #20]
 8001d40:	2102      	movs	r1, #2
 8001d42:	438a      	bics	r2, r1
 8001d44:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 8001d46:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <measHandler+0x14c>)
 8001d48:	7d1a      	ldrb	r2, [r3, #20]
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	438a      	bics	r2, r1
 8001d4e:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 8001d50:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <measHandler+0x14c>)
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	07db      	lsls	r3, r3, #31
 8001d56:	0fdb      	lsrs	r3, r3, #31
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d045      	beq.n	8001dea <measHandler+0xb2>
	{
		if(!flags.meas.measRunning)
 8001d5e:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <measHandler+0x14c>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	071b      	lsls	r3, r3, #28
 8001d64:	0fdb      	lsrs	r3, r3, #31
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d134      	bne.n	8001dd6 <measHandler+0x9e>
		{
			flags.meas.measRunning = 1;
 8001d6c:	4b45      	ldr	r3, [pc, #276]	; (8001e84 <measHandler+0x14c>)
 8001d6e:	7d1a      	ldrb	r2, [r3, #20]
 8001d70:	2108      	movs	r1, #8
 8001d72:	430a      	orrs	r2, r1
 8001d74:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 8001d76:	f000 fc89 	bl	800268c <currentPhase>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d004      	beq.n	8001d8a <measHandler+0x52>
 8001d80:	f000 fc84 	bl	800268c <currentPhase>
 8001d84:	0003      	movs	r3, r0
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d110      	bne.n	8001dac <measHandler+0x74>
			{
				flags.meas.onlyBattery = 1;
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <measHandler+0x14c>)
 8001d8c:	7d1a      	ldrb	r2, [r3, #20]
 8001d8e:	2120      	movs	r1, #32
 8001d90:	430a      	orrs	r2, r1
 8001d92:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8001d94:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <measHandler+0x150>)
 8001d96:	220d      	movs	r2, #13
 8001d98:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <measHandler+0x150>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	1e59      	subs	r1, r3, #1
 8001da0:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <measHandler+0x154>)
 8001da2:	4a3b      	ldr	r2, [pc, #236]	; (8001e90 <measHandler+0x158>)
 8001da4:	0089      	lsls	r1, r1, #2
 8001da6:	588a      	ldr	r2, [r1, r2]
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28
 8001daa:	e00f      	b.n	8001dcc <measHandler+0x94>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 8001dac:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <measHandler+0x14c>)
 8001dae:	7d1a      	ldrb	r2, [r3, #20]
 8001db0:	2120      	movs	r1, #32
 8001db2:	438a      	bics	r2, r1
 8001db4:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <measHandler+0x150>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8001dbc:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <measHandler+0x150>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	1e59      	subs	r1, r3, #1
 8001dc2:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <measHandler+0x154>)
 8001dc4:	4a32      	ldr	r2, [pc, #200]	; (8001e90 <measHandler+0x158>)
 8001dc6:	0089      	lsls	r1, r1, #2
 8001dc8:	588a      	ldr	r2, [r1, r2]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
			}
			HAL_ADC_Start_IT(&hadc);
 8001dcc:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <measHandler+0x15c>)
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f001 f8c2 	bl	8002f58 <HAL_ADC_Start_IT>
 8001dd4:	e004      	b.n	8001de0 <measHandler+0xa8>
		}
		else
		{
			flags.meas.measConflict = 1;
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <measHandler+0x14c>)
 8001dd8:	7d1a      	ldrb	r2, [r3, #20]
 8001dda:	2110      	movs	r1, #16
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <measHandler+0x14c>)
 8001de2:	7d1a      	ldrb	r2, [r3, #20]
 8001de4:	2101      	movs	r1, #1
 8001de6:	438a      	bics	r2, r1
 8001de8:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING)
 8001dea:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <measHandler+0x150>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d045      	beq.n	8001e7e <measHandler+0x146>
	{
		if(flags.meas.measDataReady)
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <measHandler+0x14c>)
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	075b      	lsls	r3, r3, #29
 8001df8:	0fdb      	lsrs	r3, r3, #31
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03e      	beq.n	8001e7e <measHandler+0x146>
		{
			flags.meas.measDataReady = 0;
 8001e00:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <measHandler+0x14c>)
 8001e02:	7d1a      	ldrb	r2, [r3, #20]
 8001e04:	2104      	movs	r1, #4
 8001e06:	438a      	bics	r2, r1
 8001e08:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <measHandler+0x150>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b0d      	cmp	r3, #13
 8001e10:	d118      	bne.n	8001e44 <measHandler+0x10c>
			{
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <measHandler+0x150>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	1e5c      	subs	r4, r3, #1
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <measHandler+0x15c>)
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f001 f958 	bl	80030d0 <HAL_ADC_GetValue>
 8001e20:	0001      	movs	r1, r0
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <measHandler+0x160>)
 8001e24:	00a2      	lsls	r2, r4, #2
 8001e26:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <measHandler+0x14c>)
 8001e2a:	7d1a      	ldrb	r2, [r3, #20]
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <measHandler+0x14c>)
 8001e34:	7d1a      	ldrb	r2, [r3, #20]
 8001e36:	2108      	movs	r1, #8
 8001e38:	438a      	bics	r2, r1
 8001e3a:	751a      	strb	r2, [r3, #20]
				ADC_State = ADC_WAITING;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <measHandler+0x150>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_IT(&hadc);
			}
		}
	}
}
 8001e42:	e01c      	b.n	8001e7e <measHandler+0x146>
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <measHandler+0x150>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	1e5c      	subs	r4, r3, #1
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <measHandler+0x15c>)
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f001 f93f 	bl	80030d0 <HAL_ADC_GetValue>
 8001e52:	0001      	movs	r1, r0
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <measHandler+0x160>)
 8001e56:	00a2      	lsls	r2, r4, #2
 8001e58:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;	//Měř další kanál (měření proudů se přeskakuje)
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <measHandler+0x150>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	3302      	adds	r3, #2
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <measHandler+0x150>)
 8001e64:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];	//Nastav měřený kanál
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <measHandler+0x150>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	1e59      	subs	r1, r3, #1
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <measHandler+0x154>)
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <measHandler+0x158>)
 8001e70:	0089      	lsls	r1, r1, #2
 8001e72:	588a      	ldr	r2, [r1, r2]
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <measHandler+0x15c>)
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f001 f86d 	bl	8002f58 <HAL_ADC_Start_IT>
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bdb0      	pop	{r4, r5, r7, pc}
 8001e84:	20000630 	.word	0x20000630
 8001e88:	20000254 	.word	0x20000254
 8001e8c:	40012400 	.word	0x40012400
 8001e90:	0800d934 	.word	0x0800d934
 8001e94:	2000064c 	.word	0x2000064c
 8001e98:	200001fc 	.word	0x200001fc

08001e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <Error_Handler+0x8>

08001ea6 <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 8001eae:	2018      	movs	r0, #24
 8001eb0:	f00b f888 	bl	800cfc4 <malloc>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <createBuffer+0x1c>
	{
		return NULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e022      	b.n	8001f08 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f00b f87d 	bl	800cfc4 <malloc>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	001a      	movs	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <createBuffer+0x40>
	{
		free(buffer);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f00b f87b 	bl	800cfd8 <free>
		return NULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e010      	b.n	8001f08 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	1e5a      	subs	r2, r3, #1
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	751a      	strb	r2, [r3, #20]

	return buffer;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b004      	add	sp, #16
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <clearBuffer>:
	free(buffer);
}

//_____Uvede buffer do výchzího stavu_____//
void clearBuffer(RING_BUFFER* buffer)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	buffer->filled = 0;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
	buffer->last = buffer->bufferSize-1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	751a      	strb	r2, [r3, #20]
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	000a      	movs	r2, r1
 8001f46:	1cfb      	adds	r3, r7, #3
 8001f48:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7d1b      	ldrb	r3, [r3, #20]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d101      	bne.n	8001f56 <push+0x1a>
		return BUFFER_FULL;
 8001f52:	2302      	movs	r3, #2
 8001f54:	e025      	b.n	8001fa2 <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	0019      	movs	r1, r3
 8001f62:	0010      	movs	r0, r2
 8001f64:	f7fe fa52 	bl	800040c <__aeabi_idivmod>
 8001f68:	000b      	movs	r3, r1
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	18d3      	adds	r3, r2, r3
 8001f84:	1cfa      	adds	r2, r7, #3
 8001f86:	7812      	ldrb	r2, [r2, #0]
 8001f88:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	db01      	blt.n	8001f9a <push+0x5e>
 8001f96:	2202      	movs	r2, #2
 8001f98:	e000      	b.n	8001f9c <push+0x60>
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6899      	ldr	r1, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	18cb      	adds	r3, r1, r3
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	da01      	bge.n	8001fca <pushStr+0x20>
		return BUFFER_FULL;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e013      	b.n	8001ff2 <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	e00b      	b.n	8001fe8 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	18d3      	adds	r3, r2, r3
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	0011      	movs	r1, r2
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7ff ffad 	bl	8001f3c <push>
	for(int i = 0; i < len; i++)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dbef      	blt.n	8001fd0 <pushStr+0x26>
	}

	return BUFFER_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b006      	add	sp, #24
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7d1b      	ldrb	r3, [r3, #20]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <pop+0x16>
		return BUFFER_EMPTY;
 800200c:	2301      	movs	r3, #1
 800200e:	e023      	b.n	8002058 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	0019      	movs	r1, r3
 800202c:	0010      	movs	r0, r2
 800202e:	f7fe f9ed 	bl	800040c <__aeabi_idivmod>
 8002032:	000b      	movs	r3, r1
 8002034:	001a      	movs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	1e5a      	subs	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	1e5a      	subs	r2, r3, #1
 800204a:	4313      	orrs	r3, r2
 800204c:	0fdb      	lsrs	r3, r3, #31
 800204e:	b2db      	uxtb	r3, r3
 8002050:	001a      	movs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}

08002060 <at>:

//_____Přečte a zachová hodnotu na dané pozici od prvního uloženého znaku_____//
BUFFER_STATE at(RING_BUFFER* buffer, int index, char* character)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	if(buffer->status == BUFFER_EMPTY)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	7d1b      	ldrb	r3, [r3, #20]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <at+0x18>
		return BUFFER_EMPTY;
 8002074:	2301      	movs	r3, #1
 8002076:	e01a      	b.n	80020ae <at+0x4e>

	 if((index + 1) > buffer->filled)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	429a      	cmp	r2, r3
 8002080:	db01      	blt.n	8002086 <at+0x26>
		 return BUFFER_ERR;
 8002082:	2303      	movs	r3, #3
 8002084:	e013      	b.n	80020ae <at+0x4e>

	 int tmp = (buffer->first + index) % (buffer->bufferSize);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	18d2      	adds	r2, r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	0019      	movs	r1, r3
 8002094:	0010      	movs	r0, r2
 8002096:	f7fe f9b9 	bl	800040c <__aeabi_idivmod>
 800209a:	000b      	movs	r3, r1
 800209c:	617b      	str	r3, [r7, #20]
	 *character = buffer->buffer[tmp];
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	18d3      	adds	r3, r2, r3
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	701a      	strb	r2, [r3, #0]

	 return BUFFER_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b006      	add	sp, #24
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <getCount+0x7c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	222a      	movs	r2, #42	; 0x2a
 80020c8:	701a      	strb	r2, [r3, #0]
		answer = 0;
 80020ca:	1dbb      	adds	r3, r7, #6
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 80020d0:	1dba      	adds	r2, r7, #6
 80020d2:	1df9      	adds	r1, r7, #7
 80020d4:	4818      	ldr	r0, [pc, #96]	; (8002138 <getCount+0x80>)
 80020d6:	2364      	movs	r3, #100	; 0x64
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	f004 fce4 	bl	8006aa8 <HAL_SPI_TransmitReceive>
 80020e0:	1e03      	subs	r3, r0, #0
 80020e2:	d001      	beq.n	80020e8 <getCount+0x30>
			return 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e021      	b.n	800212c <getCount+0x74>
		regCount++;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <getCount+0x7c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <getCount+0x7c>)
 80020f2:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f000 fdcb 	bl	8002c90 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <getCount+0x7c>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b63      	cmp	r3, #99	; 0x63
 8002100:	d906      	bls.n	8002110 <getCount+0x58>
		{
			flags.conErr = 1;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <getCount+0x84>)
 8002104:	7e1a      	ldrb	r2, [r3, #24]
 8002106:	2104      	movs	r1, #4
 8002108:	430a      	orrs	r2, r1
 800210a:	761a      	strb	r2, [r3, #24]
			return 0;
 800210c:	2300      	movs	r3, #0
 800210e:	e00d      	b.n	800212c <getCount+0x74>
		}
	}
	while(answer != question);
 8002110:	1dbb      	adds	r3, r7, #6
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	1dfb      	adds	r3, r7, #7
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d1d3      	bne.n	80020c4 <getCount+0xc>

	regCount--;
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <getCount+0x7c>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	3b01      	subs	r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <getCount+0x7c>)
 8002126:	701a      	strb	r2, [r3, #0]

	return regCount;
 8002128:	4b02      	ldr	r3, [pc, #8]	; (8002134 <getCount+0x7c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	b002      	add	sp, #8
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000691 	.word	0x20000691
 8002138:	20000584 	.word	0x20000584
 800213c:	20000630 	.word	0x20000630

08002140 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
	//___Clear registrů___//
	REG_CLR_ACTIVE;
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	019b      	lsls	r3, r3, #6
 800214a:	4827      	ldr	r0, [pc, #156]	; (80021e8 <regInit+0xa8>)
 800214c:	2200      	movs	r2, #0
 800214e:	0019      	movs	r1, r3
 8002150:	f001 fdd3 	bl	8003cfa <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002154:	2005      	movs	r0, #5
 8002156:	f000 fd9b 	bl	8002c90 <HAL_Delay>
	REG_CLR_INACTIVE;
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	019b      	lsls	r3, r3, #6
 800215e:	4822      	ldr	r0, [pc, #136]	; (80021e8 <regInit+0xa8>)
 8002160:	2201      	movs	r2, #1
 8002162:	0019      	movs	r1, r3
 8002164:	f001 fdc9 	bl	8003cfa <HAL_GPIO_WritePin>

	REG_DISABLE;
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	481e      	ldr	r0, [pc, #120]	; (80021e8 <regInit+0xa8>)
 800216e:	2201      	movs	r2, #1
 8002170:	0019      	movs	r1, r3
 8002172:	f001 fdc2 	bl	8003cfa <HAL_GPIO_WritePin>

		if(getCount() == 0)
 8002176:	f7ff ff9f 	bl	80020b8 <getCount>
 800217a:	1e03      	subs	r3, r0, #0
 800217c:	d101      	bne.n	8002182 <regInit+0x42>
		{
			return REG_CON_ERR;	//Connection error
 800217e:	2301      	movs	r3, #1
 8002180:	e02e      	b.n	80021e0 <regInit+0xa0>
		}

		regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <regInit+0xac>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	0018      	movs	r0, r3
 8002188:	f00a ff1c 	bl	800cfc4 <malloc>
 800218c:	0003      	movs	r3, r0
 800218e:	001a      	movs	r2, r3
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <regInit+0xb0>)
 8002192:	601a      	str	r2, [r3, #0]
		if(regValues == NULL)
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <regInit+0xb0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d104      	bne.n	80021a6 <regInit+0x66>
		{
			regState = REG_ERR;
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <regInit+0xb4>)
 800219e:	2202      	movs	r2, #2
 80021a0:	701a      	strb	r2, [r3, #0]
			return REG_ERR;
 80021a2:	2302      	movs	r3, #2
 80021a4:	e01c      	b.n	80021e0 <regInit+0xa0>
		}

		for(int i = 0; i < regCount; i++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	e008      	b.n	80021be <regInit+0x7e>
		{
			regValues[i] = 0;
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <regInit+0xb0>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	18d3      	adds	r3, r2, r3
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3301      	adds	r3, #1
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <regInit+0xac>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	001a      	movs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4293      	cmp	r3, r2
 80021c8:	dbf0      	blt.n	80021ac <regInit+0x6c>
		}

		sendData();
 80021ca:	f000 f815 	bl	80021f8 <sendData>

	REG_ENABLE;
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <regInit+0xa8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	0019      	movs	r1, r3
 80021d8:	f001 fd8f 	bl	8003cfa <HAL_GPIO_WritePin>

	return regState;
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <regInit+0xb4>)
 80021de:	781b      	ldrb	r3, [r3, #0]
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	48000400 	.word	0x48000400
 80021ec:	20000691 	.word	0x20000691
 80021f0:	2000068c 	.word	0x2000068c
 80021f4:	20000690 	.word	0x20000690

080021f8 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <sendData+0x64>)
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <sendData+0x68>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b29a      	uxth	r2, r3
 8002206:	4817      	ldr	r0, [pc, #92]	; (8002264 <sendData+0x6c>)
 8002208:	2364      	movs	r3, #100	; 0x64
 800220a:	f004 faf5 	bl	80067f8 <HAL_SPI_Transmit>
 800220e:	1e03      	subs	r3, r0, #0
 8002210:	d114      	bne.n	800223c <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	01db      	lsls	r3, r3, #7
 8002216:	4814      	ldr	r0, [pc, #80]	; (8002268 <sendData+0x70>)
 8002218:	2201      	movs	r2, #1
 800221a:	0019      	movs	r1, r3
 800221c:	f001 fd6d 	bl	8003cfa <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002220:	2001      	movs	r0, #1
 8002222:	f000 fd35 	bl	8002c90 <HAL_Delay>
		REG_RCLK_LOW;
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	01db      	lsls	r3, r3, #7
 800222a:	480f      	ldr	r0, [pc, #60]	; (8002268 <sendData+0x70>)
 800222c:	2200      	movs	r2, #0
 800222e:	0019      	movs	r1, r3
 8002230:	f001 fd63 	bl	8003cfa <HAL_GPIO_WritePin>

		regState = REG_OK;
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <sendData+0x74>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e009      	b.n	8002250 <sendData+0x58>
	}
	else
	{
		regState = REG_ERR;
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <sendData+0x74>)
 800223e:	2202      	movs	r2, #2
 8002240:	701a      	strb	r2, [r3, #0]

		REG_DISABLE;	//výstup ve stavu vysoké impedance (zabrání nechtěnému nastavení relé)
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	4808      	ldr	r0, [pc, #32]	; (8002268 <sendData+0x70>)
 8002248:	2201      	movs	r2, #1
 800224a:	0019      	movs	r1, r3
 800224c:	f001 fd55 	bl	8003cfa <HAL_GPIO_WritePin>
	}

	return regState;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <sendData+0x74>)
 8002252:	781b      	ldrb	r3, [r3, #0]
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	2000068c 	.word	0x2000068c
 8002260:	20000691 	.word	0x20000691
 8002264:	20000584 	.word	0x20000584
 8002268:	48000400 	.word	0x48000400
 800226c:	20000690 	.word	0x20000690

08002270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_MspInit+0x44>)
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_MspInit+0x44>)
 800227c:	2101      	movs	r1, #1
 800227e:	430a      	orrs	r2, r1
 8002280:	619a      	str	r2, [r3, #24]
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <HAL_MspInit+0x44>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2201      	movs	r2, #1
 8002288:	4013      	ands	r3, r2
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_MspInit+0x44>)
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_MspInit+0x44>)
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	0549      	lsls	r1, r1, #21
 8002298:	430a      	orrs	r2, r1
 800229a:	61da      	str	r2, [r3, #28]
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_MspInit+0x44>)
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	055b      	lsls	r3, r3, #21
 80022a4:	4013      	ands	r3, r2
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	40021000 	.word	0x40021000

080022b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b08d      	sub	sp, #52	; 0x34
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	241c      	movs	r4, #28
 80022c2:	193b      	adds	r3, r7, r4
 80022c4:	0018      	movs	r0, r3
 80022c6:	2314      	movs	r3, #20
 80022c8:	001a      	movs	r2, r3
 80022ca:	2100      	movs	r1, #0
 80022cc:	f00a fe97 	bl	800cffe <memset>
  if(hadc->Instance==ADC1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a3a      	ldr	r2, [pc, #232]	; (80023c0 <HAL_ADC_MspInit+0x108>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d16d      	bne.n	80023b6 <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022da:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	0089      	lsls	r1, r1, #2
 80022e4:	430a      	orrs	r2, r1
 80022e6:	619a      	str	r2, [r3, #24]
 80022e8:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	4b32      	ldr	r3, [pc, #200]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0309      	lsls	r1, r1, #12
 8002300:	430a      	orrs	r2, r1
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	031b      	lsls	r3, r3, #12
 800230c:	4013      	ands	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	0289      	lsls	r1, r1, #10
 800231c:	430a      	orrs	r2, r1
 800231e:	615a      	str	r2, [r3, #20]
 8002320:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	029b      	lsls	r3, r3, #10
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	02c9      	lsls	r1, r1, #11
 8002338:	430a      	orrs	r2, r1
 800233a:	615a      	str	r2, [r3, #20]
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_ADC_MspInit+0x10c>)
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	02db      	lsls	r3, r3, #11
 8002344:	4013      	ands	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800234a:	193b      	adds	r3, r7, r4
 800234c:	223f      	movs	r2, #63	; 0x3f
 800234e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002350:	193b      	adds	r3, r7, r4
 8002352:	2203      	movs	r2, #3
 8002354:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	193b      	adds	r3, r7, r4
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800235c:	193b      	adds	r3, r7, r4
 800235e:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_ADC_MspInit+0x110>)
 8002360:	0019      	movs	r1, r3
 8002362:	0010      	movs	r0, r2
 8002364:	f001 fb34 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002368:	193b      	adds	r3, r7, r4
 800236a:	22ff      	movs	r2, #255	; 0xff
 800236c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800236e:	193b      	adds	r3, r7, r4
 8002370:	2203      	movs	r2, #3
 8002372:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	193b      	adds	r3, r7, r4
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	193a      	adds	r2, r7, r4
 800237c:	2390      	movs	r3, #144	; 0x90
 800237e:	05db      	lsls	r3, r3, #23
 8002380:	0011      	movs	r1, r2
 8002382:	0018      	movs	r0, r3
 8002384:	f001 fb24 	bl	80039d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002388:	193b      	adds	r3, r7, r4
 800238a:	2203      	movs	r2, #3
 800238c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238e:	193b      	adds	r3, r7, r4
 8002390:	2203      	movs	r2, #3
 8002392:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	193b      	adds	r3, r7, r4
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	193b      	adds	r3, r7, r4
 800239c:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <HAL_ADC_MspInit+0x114>)
 800239e:	0019      	movs	r1, r3
 80023a0:	0010      	movs	r0, r2
 80023a2:	f001 fb15 	bl	80039d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	200c      	movs	r0, #12
 80023ac:	f001 fa60 	bl	8003870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80023b0:	200c      	movs	r0, #12
 80023b2:	f001 fa72 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b00d      	add	sp, #52	; 0x34
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	40012400 	.word	0x40012400
 80023c4:	40021000 	.word	0x40021000
 80023c8:	48000800 	.word	0x48000800
 80023cc:	48000400 	.word	0x48000400

080023d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b08b      	sub	sp, #44	; 0x2c
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	2414      	movs	r4, #20
 80023da:	193b      	adds	r3, r7, r4
 80023dc:	0018      	movs	r0, r3
 80023de:	2314      	movs	r3, #20
 80023e0:	001a      	movs	r2, r3
 80023e2:	2100      	movs	r1, #0
 80023e4:	f00a fe0b 	bl	800cffe <memset>
  if(hspi->Instance==SPI1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <HAL_SPI_MspInit+0x90>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d131      	bne.n	8002456 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <HAL_SPI_MspInit+0x94>)
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_SPI_MspInit+0x94>)
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	0149      	lsls	r1, r1, #5
 80023fc:	430a      	orrs	r2, r1
 80023fe:	619a      	str	r2, [r3, #24]
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_SPI_MspInit+0x94>)
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	015b      	lsls	r3, r3, #5
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_SPI_MspInit+0x94>)
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_SPI_MspInit+0x94>)
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	02c9      	lsls	r1, r1, #11
 8002418:	430a      	orrs	r2, r1
 800241a:	615a      	str	r2, [r3, #20]
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_SPI_MspInit+0x94>)
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	02db      	lsls	r3, r3, #11
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800242a:	0021      	movs	r1, r4
 800242c:	187b      	adds	r3, r7, r1
 800242e:	2238      	movs	r2, #56	; 0x38
 8002430:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	187b      	adds	r3, r7, r1
 8002434:	2202      	movs	r2, #2
 8002436:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	187b      	adds	r3, r7, r1
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243e:	187b      	adds	r3, r7, r1
 8002440:	2203      	movs	r2, #3
 8002442:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002444:	187b      	adds	r3, r7, r1
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	187b      	adds	r3, r7, r1
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_SPI_MspInit+0x98>)
 800244e:	0019      	movs	r1, r3
 8002450:	0010      	movs	r0, r2
 8002452:	f001 fabd 	bl	80039d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b00b      	add	sp, #44	; 0x2c
 800245c:	bd90      	pop	{r4, r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	40013000 	.word	0x40013000
 8002464:	40021000 	.word	0x40021000
 8002468:	48000400 	.word	0x48000400

0800246c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <HAL_TIM_Base_MspInit+0x48>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d115      	bne.n	80024aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002480:	69da      	ldr	r2, [r3, #28]
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	0049      	lsls	r1, r1, #1
 8002488:	430a      	orrs	r2, r1
 800248a:	61da      	str	r2, [r3, #28]
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_TIM_Base_MspInit+0x4c>)
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	2013      	movs	r0, #19
 80024a0:	f001 f9e6 	bl	8003870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80024a4:	2013      	movs	r0, #19
 80024a6:	f001 f9f8 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b004      	add	sp, #16
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	40002000 	.word	0x40002000
 80024b8:	40021000 	.word	0x40021000

080024bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b08b      	sub	sp, #44	; 0x2c
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	2414      	movs	r4, #20
 80024c6:	193b      	adds	r3, r7, r4
 80024c8:	0018      	movs	r0, r3
 80024ca:	2314      	movs	r3, #20
 80024cc:	001a      	movs	r2, r3
 80024ce:	2100      	movs	r1, #0
 80024d0:	f00a fd95 	bl	800cffe <memset>
  if(huart->Instance==USART3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a20      	ldr	r2, [pc, #128]	; (800255c <HAL_UART_MspInit+0xa0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d13a      	bne.n	8002554 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_UART_MspInit+0xa4>)
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	4b1f      	ldr	r3, [pc, #124]	; (8002560 <HAL_UART_MspInit+0xa4>)
 80024e4:	2180      	movs	r1, #128	; 0x80
 80024e6:	02c9      	lsls	r1, r1, #11
 80024e8:	430a      	orrs	r2, r1
 80024ea:	61da      	str	r2, [r3, #28]
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <HAL_UART_MspInit+0xa4>)
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	02db      	lsls	r3, r3, #11
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_UART_MspInit+0xa4>)
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_UART_MspInit+0xa4>)
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	0309      	lsls	r1, r1, #12
 8002504:	430a      	orrs	r2, r1
 8002506:	615a      	str	r2, [r3, #20]
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_UART_MspInit+0xa4>)
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	031b      	lsls	r3, r3, #12
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002516:	193b      	adds	r3, r7, r4
 8002518:	22c0      	movs	r2, #192	; 0xc0
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	0021      	movs	r1, r4
 8002520:	187b      	adds	r3, r7, r1
 8002522:	2202      	movs	r2, #2
 8002524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	187b      	adds	r3, r7, r1
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252c:	187b      	adds	r3, r7, r1
 800252e:	2203      	movs	r2, #3
 8002530:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2201      	movs	r2, #1
 8002536:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002538:	187b      	adds	r3, r7, r1
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <HAL_UART_MspInit+0xa8>)
 800253c:	0019      	movs	r1, r3
 800253e:	0010      	movs	r0, r2
 8002540:	f001 fa46 	bl	80039d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002544:	2200      	movs	r2, #0
 8002546:	2100      	movs	r1, #0
 8002548:	201d      	movs	r0, #29
 800254a:	f001 f991 	bl	8003870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800254e:	201d      	movs	r0, #29
 8002550:	f001 f9a3 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b00b      	add	sp, #44	; 0x2c
 800255a:	bd90      	pop	{r4, r7, pc}
 800255c:	40004800 	.word	0x40004800
 8002560:	40021000 	.word	0x40021000
 8002564:	48000800 	.word	0x48000800

08002568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800256c:	e7fe      	b.n	800256c <NMI_Handler+0x4>

0800256e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002572:	e7fe      	b.n	8002572 <HardFault_Handler+0x4>

08002574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258c:	f000 fb64 	bl	8002c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	0018      	movs	r0, r3
 80025a0:	f001 fbe4 	bl	8003d6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	0018      	movs	r0, r3
 80025aa:	f001 fbdf 	bl	8003d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <ADC1_COMP_IRQHandler+0x14>)
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 fd94 	bl	80030e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	2000064c 	.word	0x2000064c

080025cc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <TIM14_IRQHandler+0x14>)
 80025d2:	0018      	movs	r0, r3
 80025d4:	f004 feaa 	bl	800732c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	200005e8 	.word	0x200005e8

080025e4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <USART3_4_IRQHandler+0x14>)
 80025ea:	0018      	movs	r0, r3
 80025ec:	f005 fb0c 	bl	8007c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	20000500 	.word	0x20000500

080025fc <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <USB_IRQHandler+0x14>)
 8002602:	0018      	movs	r0, r3
 8002604:	f001 fd04 	bl	8004010 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	20001338 	.word	0x20001338

08002614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <_sbrk+0x5c>)
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <_sbrk+0x60>)
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002628:	4b13      	ldr	r3, [pc, #76]	; (8002678 <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <_sbrk+0x64>)
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <_sbrk+0x68>)
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	18d3      	adds	r3, r2, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002644:	f00a fc94 	bl	800cf70 <__errno>
 8002648:	0003      	movs	r3, r0
 800264a:	220c      	movs	r2, #12
 800264c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800264e:	2301      	movs	r3, #1
 8002650:	425b      	negs	r3, r3
 8002652:	e009      	b.n	8002668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	18d2      	adds	r2, r2, r3
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <_sbrk+0x64>)
 8002664:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002666:	68fb      	ldr	r3, [r7, #12]
}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	b006      	add	sp, #24
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20004000 	.word	0x20004000
 8002674:	00000400 	.word	0x00000400
 8002678:	20000258 	.word	0x20000258
 800267c:	20001640 	.word	0x20001640

08002680 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	return testPhase;
 8002690:	4b02      	ldr	r3, [pc, #8]	; (800269c <currentPhase+0x10>)
 8002692:	781b      	ldrb	r3, [r3, #0]
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	2000025c 	.word	0x2000025c

080026a0 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 80026a0:	b5b0      	push	{r4, r5, r7, lr}
 80026a2:	b092      	sub	sp, #72	; 0x48
 80026a4:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 80026a6:	4bdb      	ldr	r3, [pc, #876]	; (8002a14 <testHandler+0x374>)
 80026a8:	7e1a      	ldrb	r2, [r3, #24]
 80026aa:	2102      	movs	r1, #2
 80026ac:	438a      	bics	r2, r1
 80026ae:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 80026b0:	4bd8      	ldr	r3, [pc, #864]	; (8002a14 <testHandler+0x374>)
 80026b2:	7b1b      	ldrb	r3, [r3, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	4013      	ands	r3, r2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d034      	beq.n	8002728 <testHandler+0x88>
	{
		if(testPhase == WAITING)
 80026be:	4bd6      	ldr	r3, [pc, #856]	; (8002a18 <testHandler+0x378>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d126      	bne.n	8002714 <testHandler+0x74>
		{
			if(flags.conErr)
 80026c6:	4bd3      	ldr	r3, [pc, #844]	; (8002a14 <testHandler+0x374>)
 80026c8:	7e1b      	ldrb	r3, [r3, #24]
 80026ca:	2204      	movs	r2, #4
 80026cc:	4013      	ands	r3, r2
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01c      	beq.n	800270e <testHandler+0x6e>
			{
				char txt[] = {"Relay PCB connection error\n"};
 80026d4:	211c      	movs	r1, #28
 80026d6:	187b      	adds	r3, r7, r1
 80026d8:	4ad0      	ldr	r2, [pc, #832]	; (8002a1c <testHandler+0x37c>)
 80026da:	ca31      	ldmia	r2!, {r0, r4, r5}
 80026dc:	c331      	stmia	r3!, {r0, r4, r5}
 80026de:	ca31      	ldmia	r2!, {r0, r4, r5}
 80026e0:	c331      	stmia	r3!, {r0, r4, r5}
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 80026e6:	4bce      	ldr	r3, [pc, #824]	; (8002a20 <testHandler+0x380>)
 80026e8:	681c      	ldr	r4, [r3, #0]
 80026ea:	000d      	movs	r5, r1
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7fd fd0a 	bl	8000108 <strlen>
 80026f4:	0003      	movs	r3, r0
 80026f6:	001a      	movs	r2, r3
 80026f8:	197b      	adds	r3, r7, r5
 80026fa:	0019      	movs	r1, r3
 80026fc:	0020      	movs	r0, r4
 80026fe:	f7ff fc54 	bl	8001faa <pushStr>
				flags.instructions.startRequest = 0;
 8002702:	4bc4      	ldr	r3, [pc, #784]	; (8002a14 <testHandler+0x374>)
 8002704:	7b1a      	ldrb	r2, [r3, #12]
 8002706:	2101      	movs	r1, #1
 8002708:	438a      	bics	r2, r1
 800270a:	731a      	strb	r2, [r3, #12]
 800270c:	e00c      	b.n	8002728 <testHandler+0x88>
			}
			else
			{
				startTest();
 800270e:	f000 f999 	bl	8002a44 <startTest>
 8002712:	e009      	b.n	8002728 <testHandler+0x88>
			}
		}
		else
		{
			flags.startConflict = 1;
 8002714:	4bbf      	ldr	r3, [pc, #764]	; (8002a14 <testHandler+0x374>)
 8002716:	7e1a      	ldrb	r2, [r3, #24]
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	761a      	strb	r2, [r3, #24]
			flags.instructions.startRequest = 0;
 800271e:	4bbd      	ldr	r3, [pc, #756]	; (8002a14 <testHandler+0x374>)
 8002720:	7b1a      	ldrb	r2, [r3, #12]
 8002722:	2101      	movs	r1, #1
 8002724:	438a      	bics	r2, r1
 8002726:	731a      	strb	r2, [r3, #12]
		}
	}
	if(flags.instructions.stopRequest)
 8002728:	4bba      	ldr	r3, [pc, #744]	; (8002a14 <testHandler+0x374>)
 800272a:	7b1b      	ldrb	r3, [r3, #12]
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <testHandler+0x9a>
	{
		stopTest();
 8002736:	f000 f9e7 	bl	8002b08 <stopTest>
	}

	switch(testPhase)
 800273a:	4bb7      	ldr	r3, [pc, #732]	; (8002a18 <testHandler+0x378>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b06      	cmp	r3, #6
 8002740:	d900      	bls.n	8002744 <testHandler+0xa4>
 8002742:	e17a      	b.n	8002a3a <testHandler+0x39a>
 8002744:	009a      	lsls	r2, r3, #2
 8002746:	4bb7      	ldr	r3, [pc, #732]	; (8002a24 <testHandler+0x384>)
 8002748:	18d3      	adds	r3, r2, r3
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 800274e:	4bb1      	ldr	r3, [pc, #708]	; (8002a14 <testHandler+0x374>)
 8002750:	7e1a      	ldrb	r2, [r3, #24]
 8002752:	2102      	movs	r1, #2
 8002754:	438a      	bics	r2, r1
 8002756:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 8002758:	e16f      	b.n	8002a3a <testHandler+0x39a>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 800275a:	4bae      	ldr	r3, [pc, #696]	; (8002a14 <testHandler+0x374>)
 800275c:	7d1b      	ldrb	r3, [r3, #20]
 800275e:	2202      	movs	r2, #2
 8002760:	4013      	ands	r3, r2
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d006      	beq.n	8002776 <testHandler+0xd6>
		{
			testPhase++;
 8002768:	4bab      	ldr	r3, [pc, #684]	; (8002a18 <testHandler+0x378>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	3301      	adds	r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4ba9      	ldr	r3, [pc, #676]	; (8002a18 <testHandler+0x378>)
 8002772:	701a      	strb	r2, [r3, #0]
		}
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
		{
			flags.meas.measRequest = 1;
		}
		break;
 8002774:	e146      	b.n	8002a04 <testHandler+0x364>
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
 8002776:	4bac      	ldr	r3, [pc, #688]	; (8002a28 <testHandler+0x388>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d000      	beq.n	8002780 <testHandler+0xe0>
 800277e:	e141      	b.n	8002a04 <testHandler+0x364>
			flags.meas.measRequest = 1;
 8002780:	4ba4      	ldr	r3, [pc, #656]	; (8002a14 <testHandler+0x374>)
 8002782:	7d1a      	ldrb	r2, [r3, #20]
 8002784:	2101      	movs	r1, #1
 8002786:	430a      	orrs	r2, r1
 8002788:	751a      	strb	r2, [r3, #20]
		break;
 800278a:	e13b      	b.n	8002a04 <testHandler+0x364>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 800278c:	4ba7      	ldr	r3, [pc, #668]	; (8002a2c <testHandler+0x38c>)
 800278e:	2201      	movs	r2, #1
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	0018      	movs	r0, r3
 8002794:	f001 fab1 	bl	8003cfa <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8002798:	4ba4      	ldr	r3, [pc, #656]	; (8002a2c <testHandler+0x38c>)
 800279a:	2201      	movs	r2, #1
 800279c:	2140      	movs	r1, #64	; 0x40
 800279e:	0018      	movs	r0, r3
 80027a0:	f001 faab 	bl	8003cfa <HAL_GPIO_WritePin>

		testPhase++;
 80027a4:	4b9c      	ldr	r3, [pc, #624]	; (8002a18 <testHandler+0x378>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b9a      	ldr	r3, [pc, #616]	; (8002a18 <testHandler+0x378>)
 80027ae:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 80027b0:	4b98      	ldr	r3, [pc, #608]	; (8002a14 <testHandler+0x374>)
 80027b2:	7e1a      	ldrb	r2, [r3, #24]
 80027b4:	2102      	movs	r1, #2
 80027b6:	430a      	orrs	r2, r1
 80027b8:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//blikání druhé progress led
 80027ba:	4b9d      	ldr	r3, [pc, #628]	; (8002a30 <testHandler+0x390>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	4b9b      	ldr	r3, [pc, #620]	; (8002a30 <testHandler+0x390>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2120      	movs	r1, #32
 80027c6:	430a      	orrs	r2, r1
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]
		sendData();
 80027cc:	f7ff fd14 	bl	80021f8 <sendData>

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 80027d0:	2301      	movs	r3, #1
 80027d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d4:	e007      	b.n	80027e6 <testHandler+0x146>
		{
			sysTime[i] = 0;
 80027d6:	4b94      	ldr	r3, [pc, #592]	; (8002a28 <testHandler+0x388>)
 80027d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027da:	0092      	lsls	r2, r2, #2
 80027dc:	2100      	movs	r1, #0
 80027de:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 80027e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e2:	3301      	adds	r3, #1
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	ddf4      	ble.n	80027d6 <testHandler+0x136>
		}
		break;
 80027ec:	e125      	b.n	8002a3a <testHandler+0x39a>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 80027ee:	4b89      	ldr	r3, [pc, #548]	; (8002a14 <testHandler+0x374>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d026      	beq.n	800284a <testHandler+0x1aa>
		{
			//___Zobrazení času na displej___//
			char time[9] = {0};
 80027fc:	2510      	movs	r5, #16
 80027fe:	197b      	adds	r3, r7, r5
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	3304      	adds	r3, #4
 8002806:	2205      	movs	r2, #5
 8002808:	2100      	movs	r1, #0
 800280a:	0018      	movs	r0, r3
 800280c:	f00a fbf7 	bl	800cffe <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8002810:	4b85      	ldr	r3, [pc, #532]	; (8002a28 <testHandler+0x388>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	223c      	movs	r2, #60	; 0x3c
 8002816:	1ad2      	subs	r2, r2, r3
 8002818:	4b83      	ldr	r3, [pc, #524]	; (8002a28 <testHandler+0x388>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	213c      	movs	r1, #60	; 0x3c
 800281e:	1acc      	subs	r4, r1, r3
 8002820:	4b81      	ldr	r3, [pc, #516]	; (8002a28 <testHandler+0x388>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2103      	movs	r1, #3
 8002826:	1acb      	subs	r3, r1, r3
 8002828:	4982      	ldr	r1, [pc, #520]	; (8002a34 <testHandler+0x394>)
 800282a:	1978      	adds	r0, r7, r5
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	0023      	movs	r3, r4
 8002830:	f00a fca8 	bl	800d184 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8002834:	4b7e      	ldr	r3, [pc, #504]	; (8002a30 <testHandler+0x390>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	4b7d      	ldr	r3, [pc, #500]	; (8002a30 <testHandler+0x390>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2110      	movs	r1, #16
 8002840:	404a      	eors	r2, r1
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
			sendData();
 8002846:	f7ff fcd7 	bl	80021f8 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 800284a:	4b77      	ldr	r3, [pc, #476]	; (8002a28 <testHandler+0x388>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <testHandler+0x1ca>
 8002852:	4b70      	ldr	r3, [pc, #448]	; (8002a14 <testHandler+0x374>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2204      	movs	r2, #4
 8002858:	4013      	ands	r3, r2
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d004      	beq.n	800286a <testHandler+0x1ca>
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8002860:	4b6c      	ldr	r3, [pc, #432]	; (8002a14 <testHandler+0x374>)
 8002862:	7d1a      	ldrb	r2, [r3, #20]
 8002864:	2101      	movs	r1, #1
 8002866:	430a      	orrs	r2, r1
 8002868:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 10)	//___Po deseti minutách je měření u konce___//
 800286a:	4b6f      	ldr	r3, [pc, #444]	; (8002a28 <testHandler+0x388>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b09      	cmp	r3, #9
 8002870:	dc00      	bgt.n	8002874 <testHandler+0x1d4>
 8002872:	e0c9      	b.n	8002a08 <testHandler+0x368>
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
#endif
		{
			testPhase++;
 8002874:	4b68      	ldr	r3, [pc, #416]	; (8002a18 <testHandler+0x378>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <testHandler+0x378>)
 800287e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002880:	e0c2      	b.n	8002a08 <testHandler+0x368>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8002882:	4b64      	ldr	r3, [pc, #400]	; (8002a14 <testHandler+0x374>)
 8002884:	7d1b      	ldrb	r3, [r3, #20]
 8002886:	2208      	movs	r2, #8
 8002888:	4013      	ands	r3, r2
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d000      	beq.n	8002892 <testHandler+0x1f2>
 8002890:	e0bc      	b.n	8002a0c <testHandler+0x36c>
		{
			flags.ui.notice = 1;
 8002892:	4b60      	ldr	r3, [pc, #384]	; (8002a14 <testHandler+0x374>)
 8002894:	7c1a      	ldrb	r2, [r3, #16]
 8002896:	2108      	movs	r1, #8
 8002898:	430a      	orrs	r2, r1
 800289a:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 800289c:	4b5d      	ldr	r3, [pc, #372]	; (8002a14 <testHandler+0x374>)
 800289e:	7e1a      	ldrb	r2, [r3, #24]
 80028a0:	2102      	movs	r1, #2
 80028a2:	430a      	orrs	r2, r1
 80028a4:	761a      	strb	r2, [r3, #24]

			testPhase++;
 80028a6:	4b5c      	ldr	r3, [pc, #368]	; (8002a18 <testHandler+0x378>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b5a      	ldr	r3, [pc, #360]	; (8002a18 <testHandler+0x378>)
 80028b0:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 80028b2:	4b5e      	ldr	r3, [pc, #376]	; (8002a2c <testHandler+0x38c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	0018      	movs	r0, r3
 80028ba:	f001 fa1e 	bl	8003cfa <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 80028be:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <testHandler+0x38c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	2140      	movs	r1, #64	; 0x40
 80028c4:	0018      	movs	r0, r3
 80028c6:	f001 fa18 	bl	8003cfa <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 80028ca:	4b59      	ldr	r3, [pc, #356]	; (8002a30 <testHandler+0x390>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	781a      	ldrb	r2, [r3, #0]
 80028d0:	4b57      	ldr	r3, [pc, #348]	; (8002a30 <testHandler+0x390>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2110      	movs	r1, #16
 80028d6:	430a      	orrs	r2, r1
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 80028dc:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <testHandler+0x390>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	4b53      	ldr	r3, [pc, #332]	; (8002a30 <testHandler+0x390>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2101      	movs	r1, #1
 80028e8:	430a      	orrs	r2, r1
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]
			sendData();
 80028ee:	f7ff fc83 	bl	80021f8 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 80028f2:	2301      	movs	r3, #1
 80028f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80028f6:	e007      	b.n	8002908 <testHandler+0x268>
			{
				sysTime[i] = 0;
 80028f8:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <testHandler+0x388>)
 80028fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	2100      	movs	r1, #0
 8002900:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	3301      	adds	r3, #1
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	2b03      	cmp	r3, #3
 800290c:	ddf4      	ble.n	80028f8 <testHandler+0x258>
			}
		}
		break;
 800290e:	e07d      	b.n	8002a0c <testHandler+0x36c>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002910:	4b40      	ldr	r3, [pc, #256]	; (8002a14 <testHandler+0x374>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2202      	movs	r2, #2
 8002916:	4013      	ands	r3, r2
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d025      	beq.n	800296a <testHandler+0x2ca>
		{
			char time[9] = {0};
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	3304      	adds	r3, #4
 8002926:	2205      	movs	r2, #5
 8002928:	2100      	movs	r1, #0
 800292a:	0018      	movs	r0, r3
 800292c:	f00a fb67 	bl	800cffe <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8002930:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <testHandler+0x388>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	223c      	movs	r2, #60	; 0x3c
 8002936:	1ad2      	subs	r2, r2, r3
 8002938:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <testHandler+0x388>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	213c      	movs	r1, #60	; 0x3c
 800293e:	1acc      	subs	r4, r1, r3
 8002940:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <testHandler+0x388>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2103      	movs	r1, #3
 8002946:	1acb      	subs	r3, r1, r3
 8002948:	493a      	ldr	r1, [pc, #232]	; (8002a34 <testHandler+0x394>)
 800294a:	1d38      	adds	r0, r7, #4
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	0023      	movs	r3, r4
 8002950:	f00a fc18 	bl	800d184 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <testHandler+0x390>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <testHandler+0x390>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2108      	movs	r1, #8
 8002960:	404a      	eors	r2, r1
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
			sendData();
 8002966:	f7ff fc47 	bl	80021f8 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <testHandler+0x388>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <testHandler+0x2ea>
 8002972:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <testHandler+0x374>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2204      	movs	r2, #4
 8002978:	4013      	ands	r3, r2
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <testHandler+0x2ea>
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <testHandler+0x374>)
 8002982:	7d1a      	ldrb	r2, [r3, #20]
 8002984:	2101      	movs	r1, #1
 8002986:	430a      	orrs	r2, r1
 8002988:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po třech minutách je měření u konce___//
 800298a:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <testHandler+0x388>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b02      	cmp	r3, #2
 8002990:	dd3e      	ble.n	8002a10 <testHandler+0x370>
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
#endif
		{
			testPhase++;
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <testHandler+0x378>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <testHandler+0x378>)
 800299c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800299e:	e037      	b.n	8002a10 <testHandler+0x370>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 80029a0:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <testHandler+0x374>)
 80029a2:	7d1b      	ldrb	r3, [r3, #20]
 80029a4:	2208      	movs	r2, #8
 80029a6:	4013      	ands	r3, r2
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d144      	bne.n	8002a38 <testHandler+0x398>
		{
			flags.ui.done = 1;
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <testHandler+0x374>)
 80029b0:	7c1a      	ldrb	r2, [r3, #16]
 80029b2:	2110      	movs	r1, #16
 80029b4:	430a      	orrs	r2, r1
 80029b6:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <testHandler+0x374>)
 80029ba:	7e1a      	ldrb	r2, [r3, #24]
 80029bc:	2102      	movs	r1, #2
 80029be:	430a      	orrs	r2, r1
 80029c0:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <testHandler+0x390>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	781a      	ldrb	r2, [r3, #0]
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <testHandler+0x390>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2108      	movs	r1, #8
 80029ce:	430a      	orrs	r2, r1
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 80029d4:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <testHandler+0x390>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <testHandler+0x390>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2102      	movs	r1, #2
 80029e0:	438a      	bics	r2, r1
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <testHandler+0x390>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <testHandler+0x390>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2101      	movs	r1, #1
 80029f2:	438a      	bics	r2, r1
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]
			sendData();
 80029f8:	f7ff fbfe 	bl	80021f8 <sendData>

			testPhase = WAITING;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <testHandler+0x378>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002a02:	e019      	b.n	8002a38 <testHandler+0x398>
		break;
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	e018      	b.n	8002a3a <testHandler+0x39a>
		break;
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	e016      	b.n	8002a3a <testHandler+0x39a>
		break;
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	e014      	b.n	8002a3a <testHandler+0x39a>
		break;
 8002a10:	46c0      	nop			; (mov r8, r8)
 8002a12:	e012      	b.n	8002a3a <testHandler+0x39a>
 8002a14:	20000630 	.word	0x20000630
 8002a18:	2000025c 	.word	0x2000025c
 8002a1c:	0800d894 	.word	0x0800d894
 8002a20:	20000490 	.word	0x20000490
 8002a24:	0800d9a4 	.word	0x0800d9a4
 8002a28:	2000023c 	.word	0x2000023c
 8002a2c:	48000800 	.word	0x48000800
 8002a30:	20000698 	.word	0x20000698
 8002a34:	0800d888 	.word	0x0800d888
		break;
 8002a38:	46c0      	nop			; (mov r8, r8)

	}
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b010      	add	sp, #64	; 0x40
 8002a40:	bdb0      	pop	{r4, r5, r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)

08002a44 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <startTest+0xa8>)
 8002a4c:	7c1a      	ldrb	r2, [r3, #16]
 8002a4e:	2101      	movs	r1, #1
 8002a50:	430a      	orrs	r2, r1
 8002a52:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 8002a54:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <startTest+0xac>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 8002a5a:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <startTest+0xb0>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 8002a60:	4b22      	ldr	r3, [pc, #136]	; (8002aec <startTest+0xa8>)
 8002a62:	7e1a      	ldrb	r2, [r3, #24]
 8002a64:	2102      	movs	r1, #2
 8002a66:	430a      	orrs	r2, r1
 8002a68:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <startTest+0xb4>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b23      	ldr	r3, [pc, #140]	; (8002afc <startTest+0xb8>)
 8002a70:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	e008      	b.n	8002a8a <startTest+0x46>
	{
		regValues[i] = 0;
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <startTest+0xb4>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	18d3      	adds	r3, r2, r3
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3301      	adds	r3, #1
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <startTest+0xbc>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	001a      	movs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4293      	cmp	r3, r2
 8002a94:	dbf0      	blt.n	8002a78 <startTest+0x34>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 8002a96:	4b19      	ldr	r3, [pc, #100]	; (8002afc <startTest+0xb8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	781a      	ldrb	r2, [r3, #0]
 8002a9c:	4b17      	ldr	r3, [pc, #92]	; (8002afc <startTest+0xb8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2120      	movs	r1, #32
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <startTest+0xb8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	781a      	ldrb	r2, [r3, #0]
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <startTest+0xb8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 8002aba:	f7ff fb9d 	bl	80021f8 <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 8002abe:	2301      	movs	r3, #1
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	e007      	b.n	8002ad4 <startTest+0x90>
	{
		sysTime[i] = 0;
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <startTest+0xc0>)
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	0092      	lsls	r2, r2, #2
 8002aca:	2100      	movs	r1, #0
 8002acc:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	ddf4      	ble.n	8002ac4 <startTest+0x80>
	}

	flags.instructions.startRequest = 0;
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <startTest+0xa8>)
 8002adc:	7b1a      	ldrb	r2, [r3, #12]
 8002ade:	2101      	movs	r1, #1
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	731a      	strb	r2, [r3, #12]
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000630 	.word	0x20000630
 8002af0:	2000025c 	.word	0x2000025c
 8002af4:	20000260 	.word	0x20000260
 8002af8:	2000068c 	.word	0x2000068c
 8002afc:	20000698 	.word	0x20000698
 8002b00:	20000691 	.word	0x20000691
 8002b04:	2000023c 	.word	0x2000023c

08002b08 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <stopTest+0x5c>)
 8002b0e:	7c1a      	ldrb	r2, [r3, #16]
 8002b10:	2102      	movs	r1, #2
 8002b12:	430a      	orrs	r2, r1
 8002b14:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <stopTest+0x60>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <stopTest+0x64>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	0018      	movs	r0, r3
 8002b24:	f001 f8e9 	bl	8003cfa <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8002b28:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <stopTest+0x64>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2140      	movs	r1, #64	; 0x40
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f001 f8e3 	bl	8003cfa <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <stopTest+0x68>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <stopTest+0x68>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	781a      	ldrb	r2, [r3, #0]
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <stopTest+0x68>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2104      	movs	r1, #4
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
	sendData();
 8002b4e:	f7ff fb53 	bl	80021f8 <sendData>

	flags.instructions.stopRequest = 0;
 8002b52:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <stopTest+0x5c>)
 8002b54:	7b1a      	ldrb	r2, [r3, #12]
 8002b56:	2102      	movs	r1, #2
 8002b58:	438a      	bics	r2, r1
 8002b5a:	731a      	strb	r2, [r3, #12]
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	20000630 	.word	0x20000630
 8002b68:	2000025c 	.word	0x2000025c
 8002b6c:	48000800 	.word	0x48000800
 8002b70:	20000698 	.word	0x20000698

08002b74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b74:	480d      	ldr	r0, [pc, #52]	; (8002bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b78:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b7a:	490e      	ldr	r1, [pc, #56]	; (8002bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b7c:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <LoopForever+0xe>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b80:	e002      	b.n	8002b88 <LoopCopyDataInit>

08002b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b86:	3304      	adds	r3, #4

08002b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b8c:	d3f9      	bcc.n	8002b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b8e:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b90:	4c0b      	ldr	r4, [pc, #44]	; (8002bc0 <LoopForever+0x16>)
  movs r3, #0
 8002b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b94:	e001      	b.n	8002b9a <LoopFillZerobss>

08002b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b98:	3204      	adds	r2, #4

08002b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b9c:	d3fb      	bcc.n	8002b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b9e:	f7ff fd6f 	bl	8002680 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ba2:	f00a f9eb 	bl	800cf7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ba6:	f7fe faad 	bl	8001104 <main>

08002baa <LoopForever>:

LoopForever:
    b LoopForever
 8002baa:	e7fe      	b.n	8002baa <LoopForever>
  ldr   r0, =_estack
 8002bac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002bb8:	0800daec 	.word	0x0800daec
  ldr r2, =_sbss
 8002bbc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002bc0:	2000163c 	.word	0x2000163c

08002bc4 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bc4:	e7fe      	b.n	8002bc4 <CEC_CAN_IRQHandler>
	...

08002bc8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bcc:	4b07      	ldr	r3, [pc, #28]	; (8002bec <HAL_Init+0x24>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_Init+0x24>)
 8002bd2:	2110      	movs	r1, #16
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd8:	2003      	movs	r0, #3
 8002bda:	f000 f809 	bl	8002bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bde:	f7ff fb47 	bl	8002270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	40022000 	.word	0x40022000

08002bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <HAL_InitTick+0x5c>)
 8002bfa:	681c      	ldr	r4, [r3, #0]
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <HAL_InitTick+0x60>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	0019      	movs	r1, r3
 8002c02:	23fa      	movs	r3, #250	; 0xfa
 8002c04:	0098      	lsls	r0, r3, #2
 8002c06:	f7fd fa91 	bl	800012c <__udivsi3>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	0020      	movs	r0, r4
 8002c10:	f7fd fa8c 	bl	800012c <__udivsi3>
 8002c14:	0003      	movs	r3, r0
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 fe4f 	bl	80038ba <HAL_SYSTICK_Config>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e00f      	b.n	8002c44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d80b      	bhi.n	8002c42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	425b      	negs	r3, r3
 8002c30:	2200      	movs	r2, #0
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 fe1c 	bl	8003870 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_InitTick+0x64>)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e000      	b.n	8002c44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b003      	add	sp, #12
 8002c4a:	bd90      	pop	{r4, r7, pc}
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000008 	.word	0x20000008
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_IncTick+0x1c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	001a      	movs	r2, r3
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_IncTick+0x20>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	18d2      	adds	r2, r2, r3
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_IncTick+0x20>)
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	20000008 	.word	0x20000008
 8002c78:	2000069c 	.word	0x2000069c

08002c7c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c80:	4b02      	ldr	r3, [pc, #8]	; (8002c8c <HAL_GetTick+0x10>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	2000069c 	.word	0x2000069c

08002c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7ff fff0 	bl	8002c7c <HAL_GetTick>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	d005      	beq.n	8002cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_Delay+0x44>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	001a      	movs	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	189b      	adds	r3, r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	f7ff ffe0 	bl	8002c7c <HAL_GetTick>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d8f7      	bhi.n	8002cb8 <HAL_Delay+0x28>
  {
  }
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b004      	add	sp, #16
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	20000008 	.word	0x20000008

08002cd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e125      	b.n	8002f42 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2234      	movs	r2, #52	; 0x34
 8002d08:	2100      	movs	r1, #0
 8002d0a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7ff fad2 	bl	80022b8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	2210      	movs	r2, #16
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d000      	beq.n	8002d20 <HAL_ADC_Init+0x48>
 8002d1e:	e103      	b.n	8002f28 <HAL_ADC_Init+0x250>
 8002d20:	230f      	movs	r3, #15
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d000      	beq.n	8002d2c <HAL_ADC_Init+0x54>
 8002d2a:	e0fd      	b.n	8002f28 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2204      	movs	r2, #4
 8002d34:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002d36:	d000      	beq.n	8002d3a <HAL_ADC_Init+0x62>
 8002d38:	e0f6      	b.n	8002f28 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	4a83      	ldr	r2, [pc, #524]	; (8002f4c <HAL_ADC_Init+0x274>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	2202      	movs	r2, #2
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2203      	movs	r2, #3
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d112      	bne.n	8002d7e <HAL_ADC_Init+0xa6>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d009      	beq.n	8002d7a <HAL_ADC_Init+0xa2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	401a      	ands	r2, r3
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_Init+0xa6>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_ADC_Init+0xa8>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d116      	bne.n	8002db2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2218      	movs	r2, #24
 8002d8c:	4393      	bics	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	0899      	lsrs	r1, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4964      	ldr	r1, [pc, #400]	; (8002f50 <HAL_ADC_Init+0x278>)
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7e1b      	ldrb	r3, [r3, #24]
 8002dc6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7e5b      	ldrb	r3, [r3, #25]
 8002dcc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dce:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7e9b      	ldrb	r3, [r3, #26]
 8002dd4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002dd6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d002      	beq.n	8002de6 <HAL_ADC_Init+0x10e>
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	015b      	lsls	r3, r3, #5
 8002de4:	e000      	b.n	8002de8 <HAL_ADC_Init+0x110>
 8002de6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002de8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002dee:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d101      	bne.n	8002dfc <HAL_ADC_Init+0x124>
 8002df8:	2304      	movs	r3, #4
 8002dfa:	e000      	b.n	8002dfe <HAL_ADC_Init+0x126>
 8002dfc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002dfe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2124      	movs	r1, #36	; 0x24
 8002e04:	5c5b      	ldrb	r3, [r3, r1]
 8002e06:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002e08:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7edb      	ldrb	r3, [r3, #27]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d115      	bne.n	8002e44 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7e9b      	ldrb	r3, [r3, #26]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d105      	bne.n	8002e2c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	0252      	lsls	r2, r2, #9
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	e00b      	b.n	8002e44 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	2220      	movs	r2, #32
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	23c2      	movs	r3, #194	; 0xc2
 8002e4a:	33ff      	adds	r3, #255	; 0xff
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d007      	beq.n	8002e60 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68d9      	ldr	r1, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	055b      	lsls	r3, r3, #21
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d01b      	beq.n	8002eb4 <HAL_ADC_Init+0x1dc>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d017      	beq.n	8002eb4 <HAL_ADC_Init+0x1dc>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d013      	beq.n	8002eb4 <HAL_ADC_Init+0x1dc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d00f      	beq.n	8002eb4 <HAL_ADC_Init+0x1dc>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_ADC_Init+0x1dc>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d007      	beq.n	8002eb4 <HAL_ADC_Init+0x1dc>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	2b06      	cmp	r3, #6
 8002eaa:	d003      	beq.n	8002eb4 <HAL_ADC_Init+0x1dc>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	2b07      	cmp	r3, #7
 8002eb2:	d112      	bne.n	8002eda <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2107      	movs	r1, #7
 8002ec0:	438a      	bics	r2, r1
 8002ec2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6959      	ldr	r1, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	2207      	movs	r2, #7
 8002ed0:	401a      	ands	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <HAL_ADC_Init+0x27c>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d10b      	bne.n	8002f02 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	4393      	bics	r3, r2
 8002ef8:	2201      	movs	r2, #1
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f00:	e01c      	b.n	8002f3c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	2212      	movs	r2, #18
 8002f08:	4393      	bics	r3, r2
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f16:	2201      	movs	r2, #1
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002f1e:	230f      	movs	r3, #15
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f26:	e009      	b.n	8002f3c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002f34:	230f      	movs	r3, #15
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f3c:	230f      	movs	r3, #15
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	781b      	ldrb	r3, [r3, #0]
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	fffffefd 	.word	0xfffffefd
 8002f50:	fffe0219 	.word	0xfffe0219
 8002f54:	833fffe7 	.word	0x833fffe7

08002f58 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f60:	230f      	movs	r3, #15
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	4013      	ands	r3, r2
 8002f72:	d156      	bne.n	8003022 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2234      	movs	r2, #52	; 0x34
 8002f78:	5c9b      	ldrb	r3, [r3, r2]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_Start_IT+0x2a>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e056      	b.n	8003030 <HAL_ADC_Start_IT+0xd8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2234      	movs	r2, #52	; 0x34
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7e5b      	ldrb	r3, [r3, #25]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d007      	beq.n	8002fa2 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002f92:	230f      	movs	r3, #15
 8002f94:	18fc      	adds	r4, r7, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 fa7b 	bl	8003494 <ADC_Enable>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d13e      	bne.n	800302a <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	4a21      	ldr	r2, [pc, #132]	; (8003038 <HAL_ADC_Start_IT+0xe0>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	0052      	lsls	r2, r2, #1
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2234      	movs	r2, #52	; 0x34
 8002fc8:	2100      	movs	r1, #0
 8002fca:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	221c      	movs	r2, #28
 8002fd2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d110      	bne.n	8002ffe <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2104      	movs	r1, #4
 8002fe8:	438a      	bics	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2118      	movs	r1, #24
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	605a      	str	r2, [r3, #4]
          break;
 8002ffc:	e008      	b.n	8003010 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	211c      	movs	r1, #28
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
          break;
 800300e:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2104      	movs	r1, #4
 800301c:	430a      	orrs	r2, r1
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	e003      	b.n	800302a <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003022:	230f      	movs	r3, #15
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	2202      	movs	r2, #2
 8003028:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800302a:	230f      	movs	r3, #15
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	781b      	ldrb	r3, [r3, #0]
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b005      	add	sp, #20
 8003036:	bd90      	pop	{r4, r7, pc}
 8003038:	fffff0fe 	.word	0xfffff0fe

0800303c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800303c:	b5b0      	push	{r4, r5, r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003044:	230f      	movs	r3, #15
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2234      	movs	r2, #52	; 0x34
 8003050:	5c9b      	ldrb	r3, [r3, r2]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_ADC_Stop_IT+0x1e>
 8003056:	2302      	movs	r3, #2
 8003058:	e033      	b.n	80030c2 <HAL_ADC_Stop_IT+0x86>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2234      	movs	r2, #52	; 0x34
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003062:	250f      	movs	r5, #15
 8003064:	197c      	adds	r4, r7, r5
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f000 fb08 	bl	800367e <ADC_ConversionStop>
 800306e:	0003      	movs	r3, r0
 8003070:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003072:	0028      	movs	r0, r5
 8003074:	183b      	adds	r3, r7, r0
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11b      	bne.n	80030b4 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	211c      	movs	r1, #28
 8003088:	438a      	bics	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800308c:	0005      	movs	r5, r0
 800308e:	183c      	adds	r4, r7, r0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	0018      	movs	r0, r3
 8003094:	f000 fa82 	bl	800359c <ADC_Disable>
 8003098:	0003      	movs	r3, r0
 800309a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800309c:	197b      	adds	r3, r7, r5
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d107      	bne.n	80030b4 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	4a08      	ldr	r2, [pc, #32]	; (80030cc <HAL_ADC_Stop_IT+0x90>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	2201      	movs	r2, #1
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2234      	movs	r2, #52	; 0x34
 80030b8:	2100      	movs	r1, #0
 80030ba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80030bc:	230f      	movs	r3, #15
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	781b      	ldrb	r3, [r3, #0]
}
 80030c2:	0018      	movs	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b004      	add	sp, #16
 80030c8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	fffffefe 	.word	0xfffffefe

080030d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b002      	add	sp, #8
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2204      	movs	r2, #4
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d106      	bne.n	800310c <HAL_ADC_IRQHandler+0x24>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2204      	movs	r2, #4
 8003106:	4013      	ands	r3, r2
 8003108:	2b04      	cmp	r3, #4
 800310a:	d00d      	beq.n	8003128 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2208      	movs	r2, #8
 8003114:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003116:	2b08      	cmp	r3, #8
 8003118:	d14f      	bne.n	80031ba <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2208      	movs	r2, #8
 8003122:	4013      	ands	r3, r2
 8003124:	2b08      	cmp	r3, #8
 8003126:	d148      	bne.n	80031ba <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	2210      	movs	r2, #16
 800312e:	4013      	ands	r3, r2
 8003130:	d106      	bne.n	8003140 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	0092      	lsls	r2, r2, #2
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	23c0      	movs	r3, #192	; 0xc0
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	4013      	ands	r3, r2
 800314c:	d12d      	bne.n	80031aa <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003152:	2b00      	cmp	r3, #0
 8003154:	d129      	bne.n	80031aa <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2208      	movs	r2, #8
 800315e:	4013      	ands	r3, r2
 8003160:	2b08      	cmp	r3, #8
 8003162:	d122      	bne.n	80031aa <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2204      	movs	r2, #4
 800316c:	4013      	ands	r3, r2
 800316e:	d110      	bne.n	8003192 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	210c      	movs	r1, #12
 800317c:	438a      	bics	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	4a33      	ldr	r2, [pc, #204]	; (8003254 <HAL_ADC_IRQHandler+0x16c>)
 8003186:	4013      	ands	r3, r2
 8003188:	2201      	movs	r2, #1
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	639a      	str	r2, [r3, #56]	; 0x38
 8003190:	e00b      	b.n	80031aa <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	2220      	movs	r2, #32
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	2201      	movs	r2, #1
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7fd ff95 	bl	80010dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	220c      	movs	r2, #12
 80031b8:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b80      	cmp	r3, #128	; 0x80
 80031c6:	d115      	bne.n	80031f4 <HAL_ADC_IRQHandler+0x10c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b80      	cmp	r3, #128	; 0x80
 80031d4:	d10e      	bne.n	80031f4 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	0252      	lsls	r2, r2, #9
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 f836 	bl	8003258 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2210      	movs	r2, #16
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d123      	bne.n	800324a <HAL_ADC_IRQHandler+0x162>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2210      	movs	r2, #16
 800320a:	4013      	ands	r3, r2
 800320c:	2b10      	cmp	r3, #16
 800320e:	d11c      	bne.n	800324a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	2b01      	cmp	r3, #1
 8003216:	d006      	beq.n	8003226 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003222:	2b01      	cmp	r3, #1
 8003224:	d10d      	bne.n	8003242 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	2202      	movs	r2, #2
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2210      	movs	r2, #16
 8003238:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f000 f813 	bl	8003268 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2210      	movs	r2, #16
 8003248:	601a      	str	r2, [r3, #0]
  }

}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	fffffefe 	.word	0xfffffefe

08003258 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003270:	46c0      	nop			; (mov r8, r8)
 8003272:	46bd      	mov	sp, r7
 8003274:	b002      	add	sp, #8
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003282:	230f      	movs	r3, #15
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	055b      	lsls	r3, r3, #21
 8003296:	429a      	cmp	r2, r3
 8003298:	d011      	beq.n	80032be <HAL_ADC_ConfigChannel+0x46>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d00d      	beq.n	80032be <HAL_ADC_ConfigChannel+0x46>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d009      	beq.n	80032be <HAL_ADC_ConfigChannel+0x46>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d005      	beq.n	80032be <HAL_ADC_ConfigChannel+0x46>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d001      	beq.n	80032be <HAL_ADC_ConfigChannel+0x46>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2234      	movs	r2, #52	; 0x34
 80032c2:	5c9b      	ldrb	r3, [r3, r2]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x54>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e0d0      	b.n	800346e <HAL_ADC_ConfigChannel+0x1f6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2234      	movs	r2, #52	; 0x34
 80032d0:	2101      	movs	r1, #1
 80032d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2204      	movs	r2, #4
 80032dc:	4013      	ands	r3, r2
 80032de:	d000      	beq.n	80032e2 <HAL_ADC_ConfigChannel+0x6a>
 80032e0:	e0b4      	b.n	800344c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4a64      	ldr	r2, [pc, #400]	; (8003478 <HAL_ADC_ConfigChannel+0x200>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x76>
 80032ec:	e082      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2201      	movs	r2, #1
 80032fa:	409a      	lsls	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	055b      	lsls	r3, r3, #21
 800330c:	429a      	cmp	r2, r3
 800330e:	d037      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x108>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d033      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x108>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	2b02      	cmp	r3, #2
 800331e:	d02f      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x108>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	2b03      	cmp	r3, #3
 8003326:	d02b      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x108>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	2b04      	cmp	r3, #4
 800332e:	d027      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x108>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	2b05      	cmp	r3, #5
 8003336:	d023      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x108>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2b06      	cmp	r3, #6
 800333e:	d01f      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x108>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2b07      	cmp	r3, #7
 8003346:	d01b      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	2107      	movs	r1, #7
 8003354:	400b      	ands	r3, r1
 8003356:	429a      	cmp	r2, r3
 8003358:	d012      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2107      	movs	r1, #7
 8003366:	438a      	bics	r2, r1
 8003368:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6959      	ldr	r1, [r3, #20]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2207      	movs	r2, #7
 8003376:	401a      	ands	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b10      	cmp	r3, #16
 8003386:	d007      	beq.n	8003398 <HAL_ADC_ConfigChannel+0x120>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b11      	cmp	r3, #17
 800338e:	d003      	beq.n	8003398 <HAL_ADC_ConfigChannel+0x120>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b12      	cmp	r3, #18
 8003396:	d163      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003398:	4b38      	ldr	r3, [pc, #224]	; (800347c <HAL_ADC_ConfigChannel+0x204>)
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d009      	beq.n	80033b8 <HAL_ADC_ConfigChannel+0x140>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b11      	cmp	r3, #17
 80033aa:	d102      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x13a>
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	03db      	lsls	r3, r3, #15
 80033b0:	e004      	b.n	80033bc <HAL_ADC_ConfigChannel+0x144>
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	045b      	lsls	r3, r3, #17
 80033b6:	e001      	b.n	80033bc <HAL_ADC_ConfigChannel+0x144>
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	041b      	lsls	r3, r3, #16
 80033bc:	4a2f      	ldr	r2, [pc, #188]	; (800347c <HAL_ADC_ConfigChannel+0x204>)
 80033be:	430b      	orrs	r3, r1
 80033c0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d14a      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_ADC_ConfigChannel+0x208>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	492d      	ldr	r1, [pc, #180]	; (8003484 <HAL_ADC_ConfigChannel+0x20c>)
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7fc feab 	bl	800012c <__udivsi3>
 80033d6:	0003      	movs	r3, r0
 80033d8:	001a      	movs	r2, r3
 80033da:	0013      	movs	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	189b      	adds	r3, r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033e4:	e002      	b.n	80033ec <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f9      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x16e>
 80033f2:	e035      	b.n	8003460 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2101      	movs	r1, #1
 8003400:	4099      	lsls	r1, r3
 8003402:	000b      	movs	r3, r1
 8003404:	43d9      	mvns	r1, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	400a      	ands	r2, r1
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b10      	cmp	r3, #16
 8003414:	d007      	beq.n	8003426 <HAL_ADC_ConfigChannel+0x1ae>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b11      	cmp	r3, #17
 800341c:	d003      	beq.n	8003426 <HAL_ADC_ConfigChannel+0x1ae>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b12      	cmp	r3, #18
 8003424:	d11c      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <HAL_ADC_ConfigChannel+0x204>)
 8003428:	6819      	ldr	r1, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b10      	cmp	r3, #16
 8003430:	d007      	beq.n	8003442 <HAL_ADC_ConfigChannel+0x1ca>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b11      	cmp	r3, #17
 8003438:	d101      	bne.n	800343e <HAL_ADC_ConfigChannel+0x1c6>
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_ADC_ConfigChannel+0x210>)
 800343c:	e002      	b.n	8003444 <HAL_ADC_ConfigChannel+0x1cc>
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <HAL_ADC_ConfigChannel+0x214>)
 8003440:	e000      	b.n	8003444 <HAL_ADC_ConfigChannel+0x1cc>
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <HAL_ADC_ConfigChannel+0x218>)
 8003444:	4a0d      	ldr	r2, [pc, #52]	; (800347c <HAL_ADC_ConfigChannel+0x204>)
 8003446:	400b      	ands	r3, r1
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e009      	b.n	8003460 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	2220      	movs	r2, #32
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003458:	230f      	movs	r3, #15
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2234      	movs	r2, #52	; 0x34
 8003464:	2100      	movs	r1, #0
 8003466:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003468:	230f      	movs	r3, #15
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	781b      	ldrb	r3, [r3, #0]
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b004      	add	sp, #16
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	00001001 	.word	0x00001001
 800347c:	40012708 	.word	0x40012708
 8003480:	20000000 	.word	0x20000000
 8003484:	000f4240 	.word	0x000f4240
 8003488:	ffbfffff 	.word	0xffbfffff
 800348c:	feffffff 	.word	0xfeffffff
 8003490:	ff7fffff 	.word	0xff7fffff

08003494 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2203      	movs	r2, #3
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d112      	bne.n	80034d8 <ADC_Enable+0x44>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2201      	movs	r2, #1
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d009      	beq.n	80034d4 <ADC_Enable+0x40>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	401a      	ands	r2, r3
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d101      	bne.n	80034d8 <ADC_Enable+0x44>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <ADC_Enable+0x46>
 80034d8:	2300      	movs	r3, #0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d152      	bne.n	8003584 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a2a      	ldr	r2, [pc, #168]	; (8003590 <ADC_Enable+0xfc>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	d00d      	beq.n	8003506 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	2210      	movs	r2, #16
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	2201      	movs	r2, #1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e03f      	b.n	8003586 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2101      	movs	r1, #1
 8003512:	430a      	orrs	r2, r1
 8003514:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003516:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <ADC_Enable+0x100>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	491f      	ldr	r1, [pc, #124]	; (8003598 <ADC_Enable+0x104>)
 800351c:	0018      	movs	r0, r3
 800351e:	f7fc fe05 	bl	800012c <__udivsi3>
 8003522:	0003      	movs	r3, r0
 8003524:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003526:	e002      	b.n	800352e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3b01      	subs	r3, #1
 800352c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f9      	bne.n	8003528 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003534:	f7ff fba2 	bl	8002c7c <HAL_GetTick>
 8003538:	0003      	movs	r3, r0
 800353a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800353c:	e01b      	b.n	8003576 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800353e:	f7ff fb9d 	bl	8002c7c <HAL_GetTick>
 8003542:	0002      	movs	r2, r0
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d914      	bls.n	8003576 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2201      	movs	r2, #1
 8003554:	4013      	ands	r3, r2
 8003556:	2b01      	cmp	r3, #1
 8003558:	d00d      	beq.n	8003576 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	2210      	movs	r2, #16
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	2201      	movs	r2, #1
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e007      	b.n	8003586 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2201      	movs	r2, #1
 800357e:	4013      	ands	r3, r2
 8003580:	2b01      	cmp	r3, #1
 8003582:	d1dc      	bne.n	800353e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b004      	add	sp, #16
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	80000017 	.word	0x80000017
 8003594:	20000000 	.word	0x20000000
 8003598:	000f4240 	.word	0x000f4240

0800359c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2203      	movs	r2, #3
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d112      	bne.n	80035dc <ADC_Disable+0x40>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2201      	movs	r2, #1
 80035be:	4013      	ands	r3, r2
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d009      	beq.n	80035d8 <ADC_Disable+0x3c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	401a      	ands	r2, r3
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d101      	bne.n	80035dc <ADC_Disable+0x40>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <ADC_Disable+0x42>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d048      	beq.n	8003674 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2205      	movs	r2, #5
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d110      	bne.n	8003612 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2102      	movs	r1, #2
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2203      	movs	r2, #3
 8003606:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003608:	f7ff fb38 	bl	8002c7c <HAL_GetTick>
 800360c:	0003      	movs	r3, r0
 800360e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003610:	e029      	b.n	8003666 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	2210      	movs	r2, #16
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	2201      	movs	r2, #1
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e023      	b.n	8003676 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800362e:	f7ff fb25 	bl	8002c7c <HAL_GetTick>
 8003632:	0002      	movs	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d914      	bls.n	8003666 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2201      	movs	r2, #1
 8003644:	4013      	ands	r3, r2
 8003646:	2b01      	cmp	r3, #1
 8003648:	d10d      	bne.n	8003666 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	2210      	movs	r2, #16
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	2201      	movs	r2, #1
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e007      	b.n	8003676 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2201      	movs	r2, #1
 800366e:	4013      	ands	r3, r2
 8003670:	2b01      	cmp	r3, #1
 8003672:	d0dc      	beq.n	800362e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	b004      	add	sp, #16
 800367c:	bd80      	pop	{r7, pc}

0800367e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2204      	movs	r2, #4
 8003692:	4013      	ands	r3, r2
 8003694:	d03a      	beq.n	800370c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2204      	movs	r2, #4
 800369e:	4013      	ands	r3, r2
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d10d      	bne.n	80036c0 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2202      	movs	r2, #2
 80036ac:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80036ae:	d107      	bne.n	80036c0 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2110      	movs	r1, #16
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036c0:	f7ff fadc 	bl	8002c7c <HAL_GetTick>
 80036c4:	0003      	movs	r3, r0
 80036c6:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80036c8:	e01a      	b.n	8003700 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036ca:	f7ff fad7 	bl	8002c7c <HAL_GetTick>
 80036ce:	0002      	movs	r2, r0
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d913      	bls.n	8003700 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2204      	movs	r2, #4
 80036e0:	4013      	ands	r3, r2
 80036e2:	d00d      	beq.n	8003700 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	2210      	movs	r2, #16
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	2201      	movs	r2, #1
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e006      	b.n	800370e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2204      	movs	r2, #4
 8003708:	4013      	ands	r3, r2
 800370a:	d1de      	bne.n	80036ca <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b004      	add	sp, #16
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	0002      	movs	r2, r0
 8003720:	1dfb      	adds	r3, r7, #7
 8003722:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003724:	1dfb      	adds	r3, r7, #7
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b7f      	cmp	r3, #127	; 0x7f
 800372a:	d809      	bhi.n	8003740 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372c:	1dfb      	adds	r3, r7, #7
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	001a      	movs	r2, r3
 8003732:	231f      	movs	r3, #31
 8003734:	401a      	ands	r2, r3
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <__NVIC_EnableIRQ+0x30>)
 8003738:	2101      	movs	r1, #1
 800373a:	4091      	lsls	r1, r2
 800373c:	000a      	movs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
  }
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b002      	add	sp, #8
 8003746:	bd80      	pop	{r7, pc}
 8003748:	e000e100 	.word	0xe000e100

0800374c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	0002      	movs	r2, r0
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b7f      	cmp	r3, #127	; 0x7f
 8003760:	d828      	bhi.n	80037b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003762:	4a2f      	ldr	r2, [pc, #188]	; (8003820 <__NVIC_SetPriority+0xd4>)
 8003764:	1dfb      	adds	r3, r7, #7
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b25b      	sxtb	r3, r3
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	33c0      	adds	r3, #192	; 0xc0
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	589b      	ldr	r3, [r3, r2]
 8003772:	1dfa      	adds	r2, r7, #7
 8003774:	7812      	ldrb	r2, [r2, #0]
 8003776:	0011      	movs	r1, r2
 8003778:	2203      	movs	r2, #3
 800377a:	400a      	ands	r2, r1
 800377c:	00d2      	lsls	r2, r2, #3
 800377e:	21ff      	movs	r1, #255	; 0xff
 8003780:	4091      	lsls	r1, r2
 8003782:	000a      	movs	r2, r1
 8003784:	43d2      	mvns	r2, r2
 8003786:	401a      	ands	r2, r3
 8003788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	019b      	lsls	r3, r3, #6
 800378e:	22ff      	movs	r2, #255	; 0xff
 8003790:	401a      	ands	r2, r3
 8003792:	1dfb      	adds	r3, r7, #7
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	0018      	movs	r0, r3
 8003798:	2303      	movs	r3, #3
 800379a:	4003      	ands	r3, r0
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a0:	481f      	ldr	r0, [pc, #124]	; (8003820 <__NVIC_SetPriority+0xd4>)
 80037a2:	1dfb      	adds	r3, r7, #7
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b25b      	sxtb	r3, r3
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	430a      	orrs	r2, r1
 80037ac:	33c0      	adds	r3, #192	; 0xc0
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037b2:	e031      	b.n	8003818 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <__NVIC_SetPriority+0xd8>)
 80037b6:	1dfb      	adds	r3, r7, #7
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	0019      	movs	r1, r3
 80037bc:	230f      	movs	r3, #15
 80037be:	400b      	ands	r3, r1
 80037c0:	3b08      	subs	r3, #8
 80037c2:	089b      	lsrs	r3, r3, #2
 80037c4:	3306      	adds	r3, #6
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	18d3      	adds	r3, r2, r3
 80037ca:	3304      	adds	r3, #4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1dfa      	adds	r2, r7, #7
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	0011      	movs	r1, r2
 80037d4:	2203      	movs	r2, #3
 80037d6:	400a      	ands	r2, r1
 80037d8:	00d2      	lsls	r2, r2, #3
 80037da:	21ff      	movs	r1, #255	; 0xff
 80037dc:	4091      	lsls	r1, r2
 80037de:	000a      	movs	r2, r1
 80037e0:	43d2      	mvns	r2, r2
 80037e2:	401a      	ands	r2, r3
 80037e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	019b      	lsls	r3, r3, #6
 80037ea:	22ff      	movs	r2, #255	; 0xff
 80037ec:	401a      	ands	r2, r3
 80037ee:	1dfb      	adds	r3, r7, #7
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	0018      	movs	r0, r3
 80037f4:	2303      	movs	r3, #3
 80037f6:	4003      	ands	r3, r0
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037fc:	4809      	ldr	r0, [pc, #36]	; (8003824 <__NVIC_SetPriority+0xd8>)
 80037fe:	1dfb      	adds	r3, r7, #7
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	001c      	movs	r4, r3
 8003804:	230f      	movs	r3, #15
 8003806:	4023      	ands	r3, r4
 8003808:	3b08      	subs	r3, #8
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	430a      	orrs	r2, r1
 800380e:	3306      	adds	r3, #6
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	18c3      	adds	r3, r0, r3
 8003814:	3304      	adds	r3, #4
 8003816:	601a      	str	r2, [r3, #0]
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b003      	add	sp, #12
 800381e:	bd90      	pop	{r4, r7, pc}
 8003820:	e000e100 	.word	0xe000e100
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	045b      	lsls	r3, r3, #17
 8003838:	429a      	cmp	r2, r3
 800383a:	d301      	bcc.n	8003840 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800383c:	2301      	movs	r3, #1
 800383e:	e010      	b.n	8003862 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <SysTick_Config+0x44>)
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	3a01      	subs	r2, #1
 8003846:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003848:	2301      	movs	r3, #1
 800384a:	425b      	negs	r3, r3
 800384c:	2103      	movs	r1, #3
 800384e:	0018      	movs	r0, r3
 8003850:	f7ff ff7c 	bl	800374c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <SysTick_Config+0x44>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800385a:	4b04      	ldr	r3, [pc, #16]	; (800386c <SysTick_Config+0x44>)
 800385c:	2207      	movs	r2, #7
 800385e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003860:	2300      	movs	r3, #0
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b002      	add	sp, #8
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	e000e010 	.word	0xe000e010

08003870 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	210f      	movs	r1, #15
 800387c:	187b      	adds	r3, r7, r1
 800387e:	1c02      	adds	r2, r0, #0
 8003880:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	187b      	adds	r3, r7, r1
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b25b      	sxtb	r3, r3
 800388a:	0011      	movs	r1, r2
 800388c:	0018      	movs	r0, r3
 800388e:	f7ff ff5d 	bl	800374c <__NVIC_SetPriority>
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b004      	add	sp, #16
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	0002      	movs	r2, r0
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b25b      	sxtb	r3, r3
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7ff ff33 	bl	8003718 <__NVIC_EnableIRQ>
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b002      	add	sp, #8
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f7ff ffaf 	bl	8003828 <SysTick_Config>
 80038ca:	0003      	movs	r3, r0
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b002      	add	sp, #8
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2221      	movs	r2, #33	; 0x21
 80038e0:	5c9b      	ldrb	r3, [r3, r2]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d008      	beq.n	80038fa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2204      	movs	r2, #4
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	2100      	movs	r1, #0
 80038f4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e020      	b.n	800393c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	210e      	movs	r1, #14
 8003906:	438a      	bics	r2, r1
 8003908:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2101      	movs	r1, #1
 8003916:	438a      	bics	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	2101      	movs	r1, #1
 8003924:	4091      	lsls	r1, r2
 8003926:	000a      	movs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2221      	movs	r2, #33	; 0x21
 800392e:	2101      	movs	r1, #1
 8003930:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2220      	movs	r2, #32
 8003936:	2100      	movs	r1, #0
 8003938:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b002      	add	sp, #8
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	210f      	movs	r1, #15
 800394e:	187b      	adds	r3, r7, r1
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2221      	movs	r2, #33	; 0x21
 8003958:	5c9b      	ldrb	r3, [r3, r2]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d006      	beq.n	800396e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2204      	movs	r2, #4
 8003964:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003966:	187b      	adds	r3, r7, r1
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	e028      	b.n	80039c0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	210e      	movs	r1, #14
 800397a:	438a      	bics	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2101      	movs	r1, #1
 800398a:	438a      	bics	r2, r1
 800398c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	2101      	movs	r1, #1
 8003998:	4091      	lsls	r1, r2
 800399a:	000a      	movs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2221      	movs	r2, #33	; 0x21
 80039a2:	2101      	movs	r1, #1
 80039a4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	2100      	movs	r1, #0
 80039ac:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d004      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	0010      	movs	r0, r2
 80039be:	4798      	blx	r3
    } 
  }
  return status;
 80039c0:	230f      	movs	r3, #15
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	781b      	ldrb	r3, [r3, #0]
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b004      	add	sp, #16
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039de:	e155      	b.n	8003c8c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2101      	movs	r1, #1
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4091      	lsls	r1, r2
 80039ea:	000a      	movs	r2, r1
 80039ec:	4013      	ands	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d100      	bne.n	80039f8 <HAL_GPIO_Init+0x28>
 80039f6:	e146      	b.n	8003c86 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2203      	movs	r2, #3
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d005      	beq.n	8003a10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2203      	movs	r2, #3
 8003a0a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d130      	bne.n	8003a72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	0013      	movs	r3, r2
 8003a20:	43da      	mvns	r2, r3
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	409a      	lsls	r2, r3
 8003a32:	0013      	movs	r3, r2
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a46:	2201      	movs	r2, #1
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	0013      	movs	r3, r2
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	401a      	ands	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	409a      	lsls	r2, r3
 8003a64:	0013      	movs	r3, r2
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2203      	movs	r2, #3
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d017      	beq.n	8003aae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	2203      	movs	r2, #3
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	0013      	movs	r3, r2
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	0013      	movs	r3, r2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d123      	bne.n	8003b02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	08da      	lsrs	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3208      	adds	r2, #8
 8003ac2:	0092      	lsls	r2, r2, #2
 8003ac4:	58d3      	ldr	r3, [r2, r3]
 8003ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2207      	movs	r2, #7
 8003acc:	4013      	ands	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	220f      	movs	r2, #15
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2107      	movs	r1, #7
 8003ae6:	400b      	ands	r3, r1
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	409a      	lsls	r2, r3
 8003aec:	0013      	movs	r3, r2
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	08da      	lsrs	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3208      	adds	r2, #8
 8003afc:	0092      	lsls	r2, r2, #2
 8003afe:	6939      	ldr	r1, [r7, #16]
 8003b00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	0013      	movs	r3, r2
 8003b12:	43da      	mvns	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2203      	movs	r2, #3
 8003b20:	401a      	ands	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	409a      	lsls	r2, r3
 8003b28:	0013      	movs	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	23c0      	movs	r3, #192	; 0xc0
 8003b3c:	029b      	lsls	r3, r3, #10
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d100      	bne.n	8003b44 <HAL_GPIO_Init+0x174>
 8003b42:	e0a0      	b.n	8003c86 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b44:	4b57      	ldr	r3, [pc, #348]	; (8003ca4 <HAL_GPIO_Init+0x2d4>)
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	4b56      	ldr	r3, [pc, #344]	; (8003ca4 <HAL_GPIO_Init+0x2d4>)
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	619a      	str	r2, [r3, #24]
 8003b50:	4b54      	ldr	r3, [pc, #336]	; (8003ca4 <HAL_GPIO_Init+0x2d4>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2201      	movs	r2, #1
 8003b56:	4013      	ands	r3, r2
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b5c:	4a52      	ldr	r2, [pc, #328]	; (8003ca8 <HAL_GPIO_Init+0x2d8>)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	089b      	lsrs	r3, r3, #2
 8003b62:	3302      	adds	r3, #2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	589b      	ldr	r3, [r3, r2]
 8003b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	4013      	ands	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	220f      	movs	r2, #15
 8003b74:	409a      	lsls	r2, r3
 8003b76:	0013      	movs	r3, r2
 8003b78:	43da      	mvns	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	2390      	movs	r3, #144	; 0x90
 8003b84:	05db      	lsls	r3, r3, #23
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d019      	beq.n	8003bbe <HAL_GPIO_Init+0x1ee>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a47      	ldr	r2, [pc, #284]	; (8003cac <HAL_GPIO_Init+0x2dc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <HAL_GPIO_Init+0x1ea>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a46      	ldr	r2, [pc, #280]	; (8003cb0 <HAL_GPIO_Init+0x2e0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00d      	beq.n	8003bb6 <HAL_GPIO_Init+0x1e6>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a45      	ldr	r2, [pc, #276]	; (8003cb4 <HAL_GPIO_Init+0x2e4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <HAL_GPIO_Init+0x1e2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a44      	ldr	r2, [pc, #272]	; (8003cb8 <HAL_GPIO_Init+0x2e8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <HAL_GPIO_Init+0x1de>
 8003baa:	2304      	movs	r3, #4
 8003bac:	e008      	b.n	8003bc0 <HAL_GPIO_Init+0x1f0>
 8003bae:	2305      	movs	r3, #5
 8003bb0:	e006      	b.n	8003bc0 <HAL_GPIO_Init+0x1f0>
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e004      	b.n	8003bc0 <HAL_GPIO_Init+0x1f0>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e002      	b.n	8003bc0 <HAL_GPIO_Init+0x1f0>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_GPIO_Init+0x1f0>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	2103      	movs	r1, #3
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	0092      	lsls	r2, r2, #2
 8003bc8:	4093      	lsls	r3, r2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bd0:	4935      	ldr	r1, [pc, #212]	; (8003ca8 <HAL_GPIO_Init+0x2d8>)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bde:	4b37      	ldr	r3, [pc, #220]	; (8003cbc <HAL_GPIO_Init+0x2ec>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43da      	mvns	r2, r3
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	2380      	movs	r3, #128	; 0x80
 8003bf4:	025b      	lsls	r3, r3, #9
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c02:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <HAL_GPIO_Init+0x2ec>)
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003c08:	4b2c      	ldr	r3, [pc, #176]	; (8003cbc <HAL_GPIO_Init+0x2ec>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4013      	ands	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	029b      	lsls	r3, r3, #10
 8003c20:	4013      	ands	r3, r2
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c2c:	4b23      	ldr	r3, [pc, #140]	; (8003cbc <HAL_GPIO_Init+0x2ec>)
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c32:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <HAL_GPIO_Init+0x2ec>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	43da      	mvns	r2, r3
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	035b      	lsls	r3, r3, #13
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c56:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <HAL_GPIO_Init+0x2ec>)
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c5c:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <HAL_GPIO_Init+0x2ec>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	43da      	mvns	r2, r3
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	039b      	lsls	r3, r3, #14
 8003c74:	4013      	ands	r3, r2
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c80:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <HAL_GPIO_Init+0x2ec>)
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	40da      	lsrs	r2, r3
 8003c94:	1e13      	subs	r3, r2, #0
 8003c96:	d000      	beq.n	8003c9a <HAL_GPIO_Init+0x2ca>
 8003c98:	e6a2      	b.n	80039e0 <HAL_GPIO_Init+0x10>
  } 
}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b006      	add	sp, #24
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	48000400 	.word	0x48000400
 8003cb0:	48000800 	.word	0x48000800
 8003cb4:	48000c00 	.word	0x48000c00
 8003cb8:	48001000 	.word	0x48001000
 8003cbc:	40010400 	.word	0x40010400

08003cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	000a      	movs	r2, r1
 8003cca:	1cbb      	adds	r3, r7, #2
 8003ccc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	1cba      	adds	r2, r7, #2
 8003cd4:	8812      	ldrh	r2, [r2, #0]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003cda:	230f      	movs	r3, #15
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e003      	b.n	8003cec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ce4:	230f      	movs	r3, #15
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003cec:	230f      	movs	r3, #15
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	781b      	ldrb	r3, [r3, #0]
  }
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	0008      	movs	r0, r1
 8003d04:	0011      	movs	r1, r2
 8003d06:	1cbb      	adds	r3, r7, #2
 8003d08:	1c02      	adds	r2, r0, #0
 8003d0a:	801a      	strh	r2, [r3, #0]
 8003d0c:	1c7b      	adds	r3, r7, #1
 8003d0e:	1c0a      	adds	r2, r1, #0
 8003d10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d12:	1c7b      	adds	r3, r7, #1
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d1a:	1cbb      	adds	r3, r7, #2
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d22:	e003      	b.n	8003d2c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d24:	1cbb      	adds	r3, r7, #2
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	b002      	add	sp, #8
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	000a      	movs	r2, r1
 8003d3e:	1cbb      	adds	r3, r7, #2
 8003d40:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d48:	1cbb      	adds	r3, r7, #2
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	041a      	lsls	r2, r3, #16
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	1cb9      	adds	r1, r7, #2
 8003d58:	8809      	ldrh	r1, [r1, #0]
 8003d5a:	400b      	ands	r3, r1
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	619a      	str	r2, [r3, #24]
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b004      	add	sp, #16
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	0002      	movs	r2, r0
 8003d74:	1dbb      	adds	r3, r7, #6
 8003d76:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	1dba      	adds	r2, r7, #6
 8003d7e:	8812      	ldrh	r2, [r2, #0]
 8003d80:	4013      	ands	r3, r2
 8003d82:	d008      	beq.n	8003d96 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003d86:	1dba      	adds	r2, r7, #6
 8003d88:	8812      	ldrh	r2, [r2, #0]
 8003d8a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d8c:	1dbb      	adds	r3, r7, #6
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7fd f96b 	bl	800106c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	40010400 	.word	0x40010400

08003da4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da6:	b08b      	sub	sp, #44	; 0x2c
 8003da8:	af06      	add	r7, sp, #24
 8003daa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e0ff      	b.n	8003fb6 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a81      	ldr	r2, [pc, #516]	; (8003fc0 <HAL_PCD_Init+0x21c>)
 8003dba:	5c9b      	ldrb	r3, [r3, r2]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d108      	bne.n	8003dd4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	23aa      	movs	r3, #170	; 0xaa
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	2100      	movs	r1, #0
 8003dca:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f008 fd70 	bl	800c8b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a7a      	ldr	r2, [pc, #488]	; (8003fc0 <HAL_PCD_Init+0x21c>)
 8003dd8:	2103      	movs	r1, #3
 8003dda:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f004 fe0f 	bl	8008a04 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de6:	230f      	movs	r3, #15
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e058      	b.n	8003ea2 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003df0:	200f      	movs	r0, #15
 8003df2:	183b      	adds	r3, r7, r0
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	0013      	movs	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	18cb      	adds	r3, r1, r3
 8003e04:	3301      	adds	r3, #1
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e0a:	183b      	adds	r3, r7, r0
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	0013      	movs	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	189b      	adds	r3, r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	183a      	adds	r2, r7, r0
 8003e1c:	7812      	ldrb	r2, [r2, #0]
 8003e1e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e20:	0004      	movs	r4, r0
 8003e22:	183b      	adds	r3, r7, r0
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	193b      	adds	r3, r7, r4
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	b298      	uxth	r0, r3
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	0013      	movs	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	189b      	adds	r3, r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	18cb      	adds	r3, r1, r3
 8003e38:	3336      	adds	r3, #54	; 0x36
 8003e3a:	1c02      	adds	r2, r0, #0
 8003e3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e3e:	193b      	adds	r3, r7, r4
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	0013      	movs	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	189b      	adds	r3, r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	18cb      	adds	r3, r1, r3
 8003e50:	3303      	adds	r3, #3
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e56:	193b      	adds	r3, r7, r4
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	0013      	movs	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	189b      	adds	r3, r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	18cb      	adds	r3, r1, r3
 8003e66:	3338      	adds	r3, #56	; 0x38
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e6c:	193b      	adds	r3, r7, r4
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	0013      	movs	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	189b      	adds	r3, r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	18cb      	adds	r3, r1, r3
 8003e7c:	333c      	adds	r3, #60	; 0x3c
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e82:	193b      	adds	r3, r7, r4
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	0013      	movs	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	18cb      	adds	r3, r1, r3
 8003e92:	3340      	adds	r3, #64	; 0x40
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e98:	193b      	adds	r3, r7, r4
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	193b      	adds	r3, r7, r4
 8003e9e:	3201      	adds	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	210f      	movs	r1, #15
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d39f      	bcc.n	8003df0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb0:	187b      	adds	r3, r7, r1
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e056      	b.n	8003f66 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003eb8:	240f      	movs	r4, #15
 8003eba:	193b      	adds	r3, r7, r4
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	236a      	movs	r3, #106	; 0x6a
 8003ec2:	33ff      	adds	r3, #255	; 0xff
 8003ec4:	0019      	movs	r1, r3
 8003ec6:	0013      	movs	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	18c3      	adds	r3, r0, r3
 8003ed0:	185b      	adds	r3, r3, r1
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ed6:	193b      	adds	r3, r7, r4
 8003ed8:	781a      	ldrb	r2, [r3, #0]
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	23b4      	movs	r3, #180	; 0xb4
 8003ede:	0059      	lsls	r1, r3, #1
 8003ee0:	0013      	movs	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	189b      	adds	r3, r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	18c3      	adds	r3, r0, r3
 8003eea:	185b      	adds	r3, r3, r1
 8003eec:	193a      	adds	r2, r7, r4
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ef2:	193b      	adds	r3, r7, r4
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	236c      	movs	r3, #108	; 0x6c
 8003efa:	33ff      	adds	r3, #255	; 0xff
 8003efc:	0019      	movs	r1, r3
 8003efe:	0013      	movs	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	18c3      	adds	r3, r0, r3
 8003f08:	185b      	adds	r3, r3, r1
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f0e:	193b      	adds	r3, r7, r4
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	23bc      	movs	r3, #188	; 0xbc
 8003f16:	0059      	lsls	r1, r3, #1
 8003f18:	0013      	movs	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	189b      	adds	r3, r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	18c3      	adds	r3, r0, r3
 8003f22:	185b      	adds	r3, r3, r1
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f28:	193b      	adds	r3, r7, r4
 8003f2a:	781a      	ldrb	r2, [r3, #0]
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	23be      	movs	r3, #190	; 0xbe
 8003f30:	0059      	lsls	r1, r3, #1
 8003f32:	0013      	movs	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	189b      	adds	r3, r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	18c3      	adds	r3, r0, r3
 8003f3c:	185b      	adds	r3, r3, r1
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f42:	193b      	adds	r3, r7, r4
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	23c0      	movs	r3, #192	; 0xc0
 8003f4a:	0059      	lsls	r1, r3, #1
 8003f4c:	0013      	movs	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	189b      	adds	r3, r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	18c3      	adds	r3, r0, r3
 8003f56:	185b      	adds	r3, r3, r1
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5c:	193b      	adds	r3, r7, r4
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	193b      	adds	r3, r7, r4
 8003f62:	3201      	adds	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	230f      	movs	r3, #15
 8003f68:	18fb      	adds	r3, r7, r3
 8003f6a:	781a      	ldrb	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d3a1      	bcc.n	8003eb8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	466a      	mov	r2, sp
 8003f7c:	0011      	movs	r1, r2
 8003f7e:	001a      	movs	r2, r3
 8003f80:	3210      	adds	r2, #16
 8003f82:	ca70      	ldmia	r2!, {r4, r5, r6}
 8003f84:	c170      	stmia	r1!, {r4, r5, r6}
 8003f86:	ca30      	ldmia	r2!, {r4, r5}
 8003f88:	c130      	stmia	r1!, {r4, r5}
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f004 fd52 	bl	8008a38 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2224      	movs	r2, #36	; 0x24
 8003f98:	2100      	movs	r1, #0
 8003f9a:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <HAL_PCD_Init+0x21c>)
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d103      	bne.n	8003fb4 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f001 fd34 	bl	8005a1c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b005      	add	sp, #20
 8003fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	000002a9 	.word	0x000002a9

08003fc4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	23aa      	movs	r3, #170	; 0xaa
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	5cd3      	ldrb	r3, [r2, r3]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_PCD_Start+0x18>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e014      	b.n	8004006 <HAL_PCD_Start+0x42>
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	23aa      	movs	r3, #170	; 0xaa
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f004 fcf4 	bl	80089d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f006 fc4f 	bl	800a898 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	23aa      	movs	r3, #170	; 0xaa
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	2100      	movs	r1, #0
 8004002:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b002      	add	sp, #8
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	0018      	movs	r0, r3
 800401e:	f006 fc51 	bl	800a8c4 <USB_ReadInterrupts>
 8004022:	0002      	movs	r2, r0
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	401a      	ands	r2, r3
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	429a      	cmp	r2, r3
 8004030:	d103      	bne.n	800403a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	0018      	movs	r0, r3
 8004036:	f000 fbbb 	bl	80047b0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	0018      	movs	r0, r3
 8004040:	f006 fc40 	bl	800a8c4 <USB_ReadInterrupts>
 8004044:	0002      	movs	r2, r0
 8004046:	2380      	movs	r3, #128	; 0x80
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	401a      	ands	r2, r3
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	429a      	cmp	r2, r3
 8004052:	d114      	bne.n	800407e <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2244      	movs	r2, #68	; 0x44
 800405a:	5a9b      	ldrh	r3, [r3, r2]
 800405c:	b29a      	uxth	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	49a2      	ldr	r1, [pc, #648]	; (80042ec <HAL_PCD_IRQHandler+0x2dc>)
 8004064:	400a      	ands	r2, r1
 8004066:	b291      	uxth	r1, r2
 8004068:	2244      	movs	r2, #68	; 0x44
 800406a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	0018      	movs	r0, r3
 8004070:	f008 fcab 	bl	800c9ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2100      	movs	r1, #0
 8004078:	0018      	movs	r0, r3
 800407a:	f000 f945 	bl	8004308 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	0018      	movs	r0, r3
 8004084:	f006 fc1e 	bl	800a8c4 <USB_ReadInterrupts>
 8004088:	0002      	movs	r2, r0
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	01db      	lsls	r3, r3, #7
 800408e:	401a      	ands	r2, r3
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	01db      	lsls	r3, r3, #7
 8004094:	429a      	cmp	r2, r3
 8004096:	d10b      	bne.n	80040b0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2244      	movs	r2, #68	; 0x44
 800409e:	5a9b      	ldrh	r3, [r3, r2]
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4992      	ldr	r1, [pc, #584]	; (80042f0 <HAL_PCD_IRQHandler+0x2e0>)
 80040a8:	400a      	ands	r2, r1
 80040aa:	b291      	uxth	r1, r2
 80040ac:	2244      	movs	r2, #68	; 0x44
 80040ae:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f006 fc05 	bl	800a8c4 <USB_ReadInterrupts>
 80040ba:	0002      	movs	r2, r0
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	019b      	lsls	r3, r3, #6
 80040c0:	401a      	ands	r2, r3
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	019b      	lsls	r3, r3, #6
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d10b      	bne.n	80040e2 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2244      	movs	r2, #68	; 0x44
 80040d0:	5a9b      	ldrh	r3, [r3, r2]
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4986      	ldr	r1, [pc, #536]	; (80042f4 <HAL_PCD_IRQHandler+0x2e4>)
 80040da:	400a      	ands	r2, r1
 80040dc:	b291      	uxth	r1, r2
 80040de:	2244      	movs	r2, #68	; 0x44
 80040e0:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	0018      	movs	r0, r3
 80040e8:	f006 fbec 	bl	800a8c4 <USB_ReadInterrupts>
 80040ec:	0002      	movs	r2, r0
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	015b      	lsls	r3, r3, #5
 80040f2:	401a      	ands	r2, r3
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	015b      	lsls	r3, r3, #5
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d137      	bne.n	800416c <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2240      	movs	r2, #64	; 0x40
 8004102:	5a9b      	ldrh	r3, [r3, r2]
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2104      	movs	r1, #4
 800410c:	438a      	bics	r2, r1
 800410e:	b291      	uxth	r1, r2
 8004110:	2240      	movs	r2, #64	; 0x40
 8004112:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2240      	movs	r2, #64	; 0x40
 800411a:	5a9b      	ldrh	r3, [r3, r2]
 800411c:	b29a      	uxth	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2108      	movs	r1, #8
 8004124:	438a      	bics	r2, r1
 8004126:	b291      	uxth	r1, r2
 8004128:	2240      	movs	r2, #64	; 0x40
 800412a:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	23b8      	movs	r3, #184	; 0xb8
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	5cd3      	ldrb	r3, [r2, r3]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d109      	bne.n	800414c <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	23b8      	movs	r3, #184	; 0xb8
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	2100      	movs	r1, #0
 8004140:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2100      	movs	r1, #0
 8004146:	0018      	movs	r0, r3
 8004148:	f001 fc92 	bl	8005a70 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	0018      	movs	r0, r3
 8004150:	f008 fc7c 	bl	800ca4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2244      	movs	r2, #68	; 0x44
 800415a:	5a9b      	ldrh	r3, [r3, r2]
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4965      	ldr	r1, [pc, #404]	; (80042f8 <HAL_PCD_IRQHandler+0x2e8>)
 8004164:	400a      	ands	r2, r1
 8004166:	b291      	uxth	r1, r2
 8004168:	2244      	movs	r2, #68	; 0x44
 800416a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	0018      	movs	r0, r3
 8004172:	f006 fba7 	bl	800a8c4 <USB_ReadInterrupts>
 8004176:	0002      	movs	r2, r0
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	401a      	ands	r2, r3
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	429a      	cmp	r2, r3
 8004184:	d127      	bne.n	80041d6 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2240      	movs	r2, #64	; 0x40
 800418c:	5a9b      	ldrh	r3, [r3, r2]
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2108      	movs	r1, #8
 8004196:	430a      	orrs	r2, r1
 8004198:	b291      	uxth	r1, r2
 800419a:	2240      	movs	r2, #64	; 0x40
 800419c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2244      	movs	r2, #68	; 0x44
 80041a4:	5a9b      	ldrh	r3, [r3, r2]
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4953      	ldr	r1, [pc, #332]	; (80042fc <HAL_PCD_IRQHandler+0x2ec>)
 80041ae:	400a      	ands	r2, r1
 80041b0:	b291      	uxth	r1, r2
 80041b2:	2244      	movs	r2, #68	; 0x44
 80041b4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2240      	movs	r2, #64	; 0x40
 80041bc:	5a9b      	ldrh	r3, [r3, r2]
 80041be:	b29a      	uxth	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2104      	movs	r1, #4
 80041c6:	430a      	orrs	r2, r1
 80041c8:	b291      	uxth	r1, r2
 80041ca:	2240      	movs	r2, #64	; 0x40
 80041cc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f008 fc1f 	bl	800ca14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	0018      	movs	r0, r3
 80041dc:	f006 fb72 	bl	800a8c4 <USB_ReadInterrupts>
 80041e0:	0003      	movs	r3, r0
 80041e2:	2280      	movs	r2, #128	; 0x80
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d145      	bne.n	8004276 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2244      	movs	r2, #68	; 0x44
 80041f0:	5a9b      	ldrh	r3, [r3, r2]
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	438a      	bics	r2, r1
 80041fc:	b291      	uxth	r1, r2
 80041fe:	2244      	movs	r2, #68	; 0x44
 8004200:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	23b8      	movs	r3, #184	; 0xb8
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	5cd3      	ldrb	r3, [r2, r3]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d12f      	bne.n	800426e <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2240      	movs	r2, #64	; 0x40
 8004214:	5a9b      	ldrh	r3, [r3, r2]
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2104      	movs	r1, #4
 800421e:	430a      	orrs	r2, r1
 8004220:	b291      	uxth	r1, r2
 8004222:	2240      	movs	r2, #64	; 0x40
 8004224:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2240      	movs	r2, #64	; 0x40
 800422c:	5a9b      	ldrh	r3, [r3, r2]
 800422e:	b29a      	uxth	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2108      	movs	r1, #8
 8004236:	430a      	orrs	r2, r1
 8004238:	b291      	uxth	r1, r2
 800423a:	2240      	movs	r2, #64	; 0x40
 800423c:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	23b8      	movs	r3, #184	; 0xb8
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	2101      	movs	r1, #1
 8004246:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2254      	movs	r2, #84	; 0x54
 800424e:	5a9b      	ldrh	r3, [r3, r2]
 8004250:	b29b      	uxth	r3, r3
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	223c      	movs	r2, #60	; 0x3c
 8004256:	4013      	ands	r3, r2
 8004258:	0019      	movs	r1, r3
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	23b9      	movs	r3, #185	; 0xb9
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2101      	movs	r1, #1
 8004266:	0018      	movs	r0, r3
 8004268:	f001 fc02 	bl	8005a70 <HAL_PCDEx_LPM_Callback>
 800426c:	e003      	b.n	8004276 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	0018      	movs	r0, r3
 8004272:	f008 fbcf 	bl	800ca14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	0018      	movs	r0, r3
 800427c:	f006 fb22 	bl	800a8c4 <USB_ReadInterrupts>
 8004280:	0002      	movs	r2, r0
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	401a      	ands	r2, r3
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	429a      	cmp	r2, r3
 800428e:	d10f      	bne.n	80042b0 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2244      	movs	r2, #68	; 0x44
 8004296:	5a9b      	ldrh	r3, [r3, r2]
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4918      	ldr	r1, [pc, #96]	; (8004300 <HAL_PCD_IRQHandler+0x2f0>)
 80042a0:	400a      	ands	r2, r1
 80042a2:	b291      	uxth	r1, r2
 80042a4:	2244      	movs	r2, #68	; 0x44
 80042a6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	0018      	movs	r0, r3
 80042ac:	f008 fb7e 	bl	800c9ac <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f006 fb05 	bl	800a8c4 <USB_ReadInterrupts>
 80042ba:	0002      	movs	r2, r0
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	401a      	ands	r2, r3
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d10b      	bne.n	80042e2 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2244      	movs	r2, #68	; 0x44
 80042d0:	5a9b      	ldrh	r3, [r3, r2]
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	490a      	ldr	r1, [pc, #40]	; (8004304 <HAL_PCD_IRQHandler+0x2f4>)
 80042da:	400a      	ands	r2, r1
 80042dc:	b291      	uxth	r1, r2
 80042de:	2244      	movs	r2, #68	; 0x44
 80042e0:	5299      	strh	r1, [r3, r2]
  }
}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b002      	add	sp, #8
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	fffffbff 	.word	0xfffffbff
 80042f0:	ffffbfff 	.word	0xffffbfff
 80042f4:	ffffdfff 	.word	0xffffdfff
 80042f8:	ffffefff 	.word	0xffffefff
 80042fc:	fffff7ff 	.word	0xfffff7ff
 8004300:	fffffdff 	.word	0xfffffdff
 8004304:	fffffeff 	.word	0xfffffeff

08004308 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	000a      	movs	r2, r1
 8004312:	1cfb      	adds	r3, r7, #3
 8004314:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	23aa      	movs	r3, #170	; 0xaa
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	5cd3      	ldrb	r3, [r2, r3]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_PCD_SetAddress+0x1e>
 8004322:	2302      	movs	r3, #2
 8004324:	e017      	b.n	8004356 <HAL_PCD_SetAddress+0x4e>
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	23aa      	movs	r3, #170	; 0xaa
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	2101      	movs	r1, #1
 800432e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	1cfa      	adds	r2, r7, #3
 8004334:	2124      	movs	r1, #36	; 0x24
 8004336:	7812      	ldrb	r2, [r2, #0]
 8004338:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	1cfb      	adds	r3, r7, #3
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	0019      	movs	r1, r3
 8004344:	0010      	movs	r0, r2
 8004346:	f006 fa93 	bl	800a870 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	23aa      	movs	r3, #170	; 0xaa
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	2100      	movs	r1, #0
 8004352:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	0018      	movs	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	b002      	add	sp, #8
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800435e:	b590      	push	{r4, r7, lr}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	000c      	movs	r4, r1
 8004368:	0010      	movs	r0, r2
 800436a:	0019      	movs	r1, r3
 800436c:	1cfb      	adds	r3, r7, #3
 800436e:	1c22      	adds	r2, r4, #0
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	003b      	movs	r3, r7
 8004374:	1c02      	adds	r2, r0, #0
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	1cbb      	adds	r3, r7, #2
 800437a:	1c0a      	adds	r2, r1, #0
 800437c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800437e:	230b      	movs	r3, #11
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004386:	1cfb      	adds	r3, r7, #3
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	b25b      	sxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	da0f      	bge.n	80043b0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004390:	1cfb      	adds	r3, r7, #3
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2207      	movs	r2, #7
 8004396:	4013      	ands	r3, r2
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	0013      	movs	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	705a      	strb	r2, [r3, #1]
 80043ae:	e00f      	b.n	80043d0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b0:	1cfb      	adds	r3, r7, #3
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2207      	movs	r2, #7
 80043b6:	401a      	ands	r2, r3
 80043b8:	0013      	movs	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	189b      	adds	r3, r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	3369      	adds	r3, #105	; 0x69
 80043c2:	33ff      	adds	r3, #255	; 0xff
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	18d3      	adds	r3, r2, r3
 80043c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043d0:	1cfb      	adds	r3, r7, #3
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2207      	movs	r2, #7
 80043d6:	4013      	ands	r3, r2
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043de:	003b      	movs	r3, r7
 80043e0:	881a      	ldrh	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1cba      	adds	r2, r7, #2
 80043ea:	7812      	ldrb	r2, [r2, #0]
 80043ec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	785b      	ldrb	r3, [r3, #1]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004400:	1cbb      	adds	r3, r7, #2
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d102      	bne.n	800440e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	23aa      	movs	r3, #170	; 0xaa
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	5cd3      	ldrb	r3, [r2, r3]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_PCD_EP_Open+0xc0>
 800441a:	2302      	movs	r3, #2
 800441c:	e013      	b.n	8004446 <HAL_PCD_EP_Open+0xe8>
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	23aa      	movs	r3, #170	; 0xaa
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	2101      	movs	r1, #1
 8004426:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	0011      	movs	r1, r2
 8004430:	0018      	movs	r0, r3
 8004432:	f004 fb2d 	bl	8008a90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	23aa      	movs	r3, #170	; 0xaa
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	2100      	movs	r1, #0
 800443e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004440:	230b      	movs	r3, #11
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	781b      	ldrb	r3, [r3, #0]
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b005      	add	sp, #20
 800444c:	bd90      	pop	{r4, r7, pc}

0800444e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	000a      	movs	r2, r1
 8004458:	1cfb      	adds	r3, r7, #3
 800445a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800445c:	1cfb      	adds	r3, r7, #3
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	b25b      	sxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	da0f      	bge.n	8004486 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004466:	1cfb      	adds	r3, r7, #3
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2207      	movs	r2, #7
 800446c:	4013      	ands	r3, r2
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	0013      	movs	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	189b      	adds	r3, r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	18d3      	adds	r3, r2, r3
 800447c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	705a      	strb	r2, [r3, #1]
 8004484:	e00f      	b.n	80044a6 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004486:	1cfb      	adds	r3, r7, #3
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2207      	movs	r2, #7
 800448c:	401a      	ands	r2, r3
 800448e:	0013      	movs	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	189b      	adds	r3, r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	3369      	adds	r3, #105	; 0x69
 8004498:	33ff      	adds	r3, #255	; 0xff
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	18d3      	adds	r3, r2, r3
 800449e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044a6:	1cfb      	adds	r3, r7, #3
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2207      	movs	r2, #7
 80044ac:	4013      	ands	r3, r2
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	23aa      	movs	r3, #170	; 0xaa
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	5cd3      	ldrb	r3, [r2, r3]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_PCD_EP_Close+0x76>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e011      	b.n	80044e8 <HAL_PCD_EP_Close+0x9a>
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	23aa      	movs	r3, #170	; 0xaa
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	2101      	movs	r1, #1
 80044cc:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	0011      	movs	r1, r2
 80044d6:	0018      	movs	r0, r3
 80044d8:	f004 fe4e 	bl	8009178 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	23aa      	movs	r3, #170	; 0xaa
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	2100      	movs	r1, #0
 80044e4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b004      	add	sp, #16
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	607a      	str	r2, [r7, #4]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	200b      	movs	r0, #11
 80044fe:	183b      	adds	r3, r7, r0
 8004500:	1c0a      	adds	r2, r1, #0
 8004502:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004504:	0001      	movs	r1, r0
 8004506:	187b      	adds	r3, r7, r1
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2207      	movs	r2, #7
 800450c:	401a      	ands	r2, r3
 800450e:	0013      	movs	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	189b      	adds	r3, r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	3369      	adds	r3, #105	; 0x69
 8004518:	33ff      	adds	r3, #255	; 0xff
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	18d3      	adds	r3, r2, r3
 800451e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2200      	movs	r2, #0
 8004536:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004538:	187b      	adds	r3, r7, r1
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2207      	movs	r2, #7
 800453e:	4013      	ands	r3, r2
 8004540:	b2da      	uxtb	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004546:	187b      	adds	r3, r7, r1
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2207      	movs	r2, #7
 800454c:	4013      	ands	r3, r2
 800454e:	d107      	bne.n	8004560 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	0011      	movs	r1, r2
 8004558:	0018      	movs	r0, r3
 800455a:	f004 ffcd 	bl	80094f8 <USB_EPStartXfer>
 800455e:	e006      	b.n	800456e <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	0011      	movs	r1, r2
 8004568:	0018      	movs	r0, r3
 800456a:	f004 ffc5 	bl	80094f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	b006      	add	sp, #24
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	000a      	movs	r2, r1
 8004582:	1cfb      	adds	r3, r7, #3
 8004584:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004586:	1cfb      	adds	r3, r7, #3
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2207      	movs	r2, #7
 800458c:	401a      	ands	r2, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	23c2      	movs	r3, #194	; 0xc2
 8004592:	0059      	lsls	r1, r3, #1
 8004594:	0013      	movs	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	189b      	adds	r3, r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	18c3      	adds	r3, r0, r3
 800459e:	185b      	adds	r3, r3, r1
 80045a0:	681b      	ldr	r3, [r3, #0]
}
 80045a2:	0018      	movs	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b002      	add	sp, #8
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b086      	sub	sp, #24
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	200b      	movs	r0, #11
 80045b8:	183b      	adds	r3, r7, r0
 80045ba:	1c0a      	adds	r2, r1, #0
 80045bc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045be:	183b      	adds	r3, r7, r0
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2207      	movs	r2, #7
 80045c4:	4013      	ands	r3, r2
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	0013      	movs	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	189b      	adds	r3, r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	18d3      	adds	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2224      	movs	r2, #36	; 0x24
 80045e6:	2101      	movs	r1, #1
 80045e8:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2200      	movs	r2, #0
 80045f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2201      	movs	r2, #1
 80045fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045fc:	183b      	adds	r3, r7, r0
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2207      	movs	r2, #7
 8004602:	4013      	ands	r3, r2
 8004604:	b2da      	uxtb	r2, r3
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800460a:	183b      	adds	r3, r7, r0
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2207      	movs	r2, #7
 8004610:	4013      	ands	r3, r2
 8004612:	d107      	bne.n	8004624 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	0011      	movs	r1, r2
 800461c:	0018      	movs	r0, r3
 800461e:	f004 ff6b 	bl	80094f8 <USB_EPStartXfer>
 8004622:	e006      	b.n	8004632 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	0011      	movs	r1, r2
 800462c:	0018      	movs	r0, r3
 800462e:	f004 ff63 	bl	80094f8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	0018      	movs	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	b006      	add	sp, #24
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	000a      	movs	r2, r1
 8004646:	1cfb      	adds	r3, r7, #3
 8004648:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800464a:	1cfb      	adds	r3, r7, #3
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2207      	movs	r2, #7
 8004650:	401a      	ands	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d901      	bls.n	800465e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e046      	b.n	80046ec <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800465e:	1cfb      	adds	r3, r7, #3
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b25b      	sxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	da0f      	bge.n	8004688 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004668:	1cfb      	adds	r3, r7, #3
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2207      	movs	r2, #7
 800466e:	4013      	ands	r3, r2
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	0013      	movs	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	189b      	adds	r3, r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	18d3      	adds	r3, r2, r3
 800467e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	705a      	strb	r2, [r3, #1]
 8004686:	e00d      	b.n	80046a4 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004688:	1cfb      	adds	r3, r7, #3
 800468a:	781a      	ldrb	r2, [r3, #0]
 800468c:	0013      	movs	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	189b      	adds	r3, r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	3369      	adds	r3, #105	; 0x69
 8004696:	33ff      	adds	r3, #255	; 0xff
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	18d3      	adds	r3, r2, r3
 800469c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046aa:	1cfb      	adds	r3, r7, #3
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2207      	movs	r2, #7
 80046b0:	4013      	ands	r3, r2
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	23aa      	movs	r3, #170	; 0xaa
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	5cd3      	ldrb	r3, [r2, r3]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_PCD_EP_SetStall+0x8c>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e011      	b.n	80046ec <HAL_PCD_EP_SetStall+0xb0>
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	23aa      	movs	r3, #170	; 0xaa
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	2101      	movs	r1, #1
 80046d0:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	0011      	movs	r1, r2
 80046da:	0018      	movs	r0, r3
 80046dc:	f005 ffc6 	bl	800a66c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	23aa      	movs	r3, #170	; 0xaa
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	2100      	movs	r1, #0
 80046e8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	0018      	movs	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b004      	add	sp, #16
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	000a      	movs	r2, r1
 80046fe:	1cfb      	adds	r3, r7, #3
 8004700:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004702:	1cfb      	adds	r3, r7, #3
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	220f      	movs	r2, #15
 8004708:	401a      	ands	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	429a      	cmp	r2, r3
 8004710:	d901      	bls.n	8004716 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e048      	b.n	80047a8 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004716:	1cfb      	adds	r3, r7, #3
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	b25b      	sxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	da0f      	bge.n	8004740 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004720:	1cfb      	adds	r3, r7, #3
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2207      	movs	r2, #7
 8004726:	4013      	ands	r3, r2
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	0013      	movs	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	189b      	adds	r3, r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	18d3      	adds	r3, r2, r3
 8004736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	705a      	strb	r2, [r3, #1]
 800473e:	e00f      	b.n	8004760 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004740:	1cfb      	adds	r3, r7, #3
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2207      	movs	r2, #7
 8004746:	401a      	ands	r2, r3
 8004748:	0013      	movs	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	189b      	adds	r3, r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	3369      	adds	r3, #105	; 0x69
 8004752:	33ff      	adds	r3, #255	; 0xff
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	18d3      	adds	r3, r2, r3
 8004758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004766:	1cfb      	adds	r3, r7, #3
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2207      	movs	r2, #7
 800476c:	4013      	ands	r3, r2
 800476e:	b2da      	uxtb	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	23aa      	movs	r3, #170	; 0xaa
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	5cd3      	ldrb	r3, [r2, r3]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_PCD_EP_ClrStall+0x90>
 8004780:	2302      	movs	r3, #2
 8004782:	e011      	b.n	80047a8 <HAL_PCD_EP_ClrStall+0xb4>
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	23aa      	movs	r3, #170	; 0xaa
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	2101      	movs	r1, #1
 800478c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	0011      	movs	r1, r2
 8004796:	0018      	movs	r0, r3
 8004798:	f005 ffb8 	bl	800a70c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	23aa      	movs	r3, #170	; 0xaa
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	2100      	movs	r1, #0
 80047a4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b004      	add	sp, #16
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80047b0:	b5b0      	push	{r4, r5, r7, lr}
 80047b2:	b096      	sub	sp, #88	; 0x58
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80047b8:	f000 fbd8 	bl	8004f6c <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	2056      	movs	r0, #86	; 0x56
 80047c2:	183b      	adds	r3, r7, r0
 80047c4:	2144      	movs	r1, #68	; 0x44
 80047c6:	5a52      	ldrh	r2, [r2, r1]
 80047c8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80047ca:	183b      	adds	r3, r7, r0
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	2455      	movs	r4, #85	; 0x55
 80047d2:	193b      	adds	r3, r7, r4
 80047d4:	210f      	movs	r1, #15
 80047d6:	400a      	ands	r2, r1
 80047d8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80047da:	193b      	adds	r3, r7, r4
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d000      	beq.n	80047e4 <PCD_EP_ISR_Handler+0x34>
 80047e2:	e179      	b.n	8004ad8 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80047e4:	183b      	adds	r3, r7, r0
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	2210      	movs	r2, #16
 80047ea:	4013      	ands	r3, r2
 80047ec:	d154      	bne.n	8004898 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	200e      	movs	r0, #14
 80047f8:	183b      	adds	r3, r7, r0
 80047fa:	49af      	ldr	r1, [pc, #700]	; (8004ab8 <PCD_EP_ISR_Handler+0x308>)
 80047fc:	400a      	ands	r2, r1
 80047fe:	801a      	strh	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	183a      	adds	r2, r7, r0
 8004806:	8812      	ldrh	r2, [r2, #0]
 8004808:	49ac      	ldr	r1, [pc, #688]	; (8004abc <PCD_EP_ISR_Handler+0x30c>)
 800480a:	430a      	orrs	r2, r1
 800480c:	b292      	uxth	r2, r2
 800480e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3328      	adds	r3, #40	; 0x28
 8004814:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2250      	movs	r2, #80	; 0x50
 800481c:	5a9b      	ldrh	r3, [r3, r2]
 800481e:	b29b      	uxth	r3, r3
 8004820:	001a      	movs	r2, r3
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	18d2      	adds	r2, r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	18d3      	adds	r3, r2, r3
 8004830:	4aa3      	ldr	r2, [pc, #652]	; (8004ac0 <PCD_EP_ISR_Handler+0x310>)
 8004832:	4694      	mov	ip, r2
 8004834:	4463      	add	r3, ip
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	059b      	lsls	r3, r3, #22
 800483a:	0d9a      	lsrs	r2, r3, #22
 800483c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	18d2      	adds	r2, r2, r3
 800484a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2100      	movs	r1, #0
 8004852:	0018      	movs	r0, r3
 8004854:	f008 f88c 	bl	800c970 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2224      	movs	r2, #36	; 0x24
 800485c:	5c9b      	ldrb	r3, [r3, r2]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <PCD_EP_ISR_Handler+0xb8>
 8004864:	f000 fb82 	bl	8004f6c <PCD_EP_ISR_Handler+0x7bc>
 8004868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <PCD_EP_ISR_Handler+0xc4>
 8004870:	f000 fb7c 	bl	8004f6c <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2224      	movs	r2, #36	; 0x24
 8004878:	5c9b      	ldrb	r3, [r3, r2]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2280      	movs	r2, #128	; 0x80
 800487e:	4252      	negs	r2, r2
 8004880:	4313      	orrs	r3, r2
 8004882:	b2da      	uxtb	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	b291      	uxth	r1, r2
 800488a:	224c      	movs	r2, #76	; 0x4c
 800488c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2224      	movs	r2, #36	; 0x24
 8004892:	2100      	movs	r1, #0
 8004894:	5499      	strb	r1, [r3, r2]
 8004896:	e369      	b.n	8004f6c <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3369      	adds	r3, #105	; 0x69
 800489c:	33ff      	adds	r3, #255	; 0xff
 800489e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	2152      	movs	r1, #82	; 0x52
 80048a6:	187b      	adds	r3, r7, r1
 80048a8:	8812      	ldrh	r2, [r2, #0]
 80048aa:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80048ac:	187b      	adds	r3, r7, r1
 80048ae:	881a      	ldrh	r2, [r3, #0]
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	4013      	ands	r3, r2
 80048b6:	d037      	beq.n	8004928 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2250      	movs	r2, #80	; 0x50
 80048be:	5a9b      	ldrh	r3, [r3, r2]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	001a      	movs	r2, r3
 80048c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	18d2      	adds	r2, r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	18d3      	adds	r3, r2, r3
 80048d2:	4a7c      	ldr	r2, [pc, #496]	; (8004ac4 <PCD_EP_ISR_Handler+0x314>)
 80048d4:	4694      	mov	ip, r2
 80048d6:	4463      	add	r3, ip
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	059b      	lsls	r3, r3, #22
 80048dc:	0d9a      	lsrs	r2, r3, #22
 80048de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	22ac      	movs	r2, #172	; 0xac
 80048ea:	0092      	lsls	r2, r2, #2
 80048ec:	1899      	adds	r1, r3, r2
 80048ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80048f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f006 f836 	bl	800a968 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29a      	uxth	r2, r3
 8004904:	2010      	movs	r0, #16
 8004906:	183b      	adds	r3, r7, r0
 8004908:	496f      	ldr	r1, [pc, #444]	; (8004ac8 <PCD_EP_ISR_Handler+0x318>)
 800490a:	400a      	ands	r2, r1
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	183a      	adds	r2, r7, r0
 8004914:	8812      	ldrh	r2, [r2, #0]
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	430a      	orrs	r2, r1
 800491a:	b292      	uxth	r2, r2
 800491c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	0018      	movs	r0, r3
 8004922:	f007 ffef 	bl	800c904 <HAL_PCD_SetupStageCallback>
 8004926:	e321      	b.n	8004f6c <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004928:	2352      	movs	r3, #82	; 0x52
 800492a:	18fb      	adds	r3, r7, r3
 800492c:	2200      	movs	r2, #0
 800492e:	5e9b      	ldrsh	r3, [r3, r2]
 8004930:	2b00      	cmp	r3, #0
 8004932:	db00      	blt.n	8004936 <PCD_EP_ISR_Handler+0x186>
 8004934:	e31a      	b.n	8004f6c <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29a      	uxth	r2, r3
 800493e:	201e      	movs	r0, #30
 8004940:	183b      	adds	r3, r7, r0
 8004942:	4961      	ldr	r1, [pc, #388]	; (8004ac8 <PCD_EP_ISR_Handler+0x318>)
 8004944:	400a      	ands	r2, r1
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	183a      	adds	r2, r7, r0
 800494e:	8812      	ldrh	r2, [r2, #0]
 8004950:	2180      	movs	r1, #128	; 0x80
 8004952:	430a      	orrs	r2, r1
 8004954:	b292      	uxth	r2, r2
 8004956:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2250      	movs	r2, #80	; 0x50
 800495e:	5a9b      	ldrh	r3, [r3, r2]
 8004960:	b29b      	uxth	r3, r3
 8004962:	001a      	movs	r2, r3
 8004964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	18d2      	adds	r2, r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	18d3      	adds	r3, r2, r3
 8004972:	4a54      	ldr	r2, [pc, #336]	; (8004ac4 <PCD_EP_ISR_Handler+0x314>)
 8004974:	4694      	mov	ip, r2
 8004976:	4463      	add	r3, ip
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	059b      	lsls	r3, r3, #22
 800497c:	0d9a      	lsrs	r2, r3, #22
 800497e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004980:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01a      	beq.n	80049c0 <PCD_EP_ISR_Handler+0x210>
 800498a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004998:	6959      	ldr	r1, [r3, #20]
 800499a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800499e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f005 ffe0 	bl	800a968 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80049a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	18d2      	adds	r2, r2, r3
 80049b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2100      	movs	r1, #0
 80049ba:	0018      	movs	r0, r3
 80049bc:	f007 ffb7 	bl	800c92e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	001a      	movs	r2, r3
 80049ca:	2380      	movs	r3, #128	; 0x80
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	4013      	ands	r3, r2
 80049d0:	d000      	beq.n	80049d4 <PCD_EP_ISR_Handler+0x224>
 80049d2:	e2cb      	b.n	8004f6c <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2250      	movs	r2, #80	; 0x50
 80049e0:	5a9b      	ldrh	r3, [r3, r2]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	001a      	movs	r2, r3
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	189b      	adds	r3, r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	4a35      	ldr	r2, [pc, #212]	; (8004ac4 <PCD_EP_ISR_Handler+0x314>)
 80049f0:	4694      	mov	ip, r2
 80049f2:	4463      	add	r3, ip
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d110      	bne.n	8004a20 <PCD_EP_ISR_Handler+0x270>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4a31      	ldr	r2, [pc, #196]	; (8004acc <PCD_EP_ISR_Handler+0x31c>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	4a29      	ldr	r2, [pc, #164]	; (8004abc <PCD_EP_ISR_Handler+0x30c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	e02b      	b.n	8004a78 <PCD_EP_ISR_Handler+0x2c8>
 8004a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b3e      	cmp	r3, #62	; 0x3e
 8004a26:	d812      	bhi.n	8004a4e <PCD_EP_ISR_Handler+0x29e>
 8004a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	085b      	lsrs	r3, r3, #1
 8004a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2201      	movs	r2, #1
 8004a36:	4013      	ands	r3, r2
 8004a38:	d002      	beq.n	8004a40 <PCD_EP_ISR_Handler+0x290>
 8004a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	029b      	lsls	r3, r3, #10
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	801a      	strh	r2, [r3, #0]
 8004a4c:	e014      	b.n	8004a78 <PCD_EP_ISR_Handler+0x2c8>
 8004a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	647b      	str	r3, [r7, #68]	; 0x44
 8004a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	221f      	movs	r2, #31
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d102      	bne.n	8004a66 <PCD_EP_ISR_Handler+0x2b6>
 8004a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a62:	3b01      	subs	r3, #1
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
 8004a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	029b      	lsls	r3, r3, #10
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	4a13      	ldr	r2, [pc, #76]	; (8004abc <PCD_EP_ISR_Handler+0x30c>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	2012      	movs	r0, #18
 8004a82:	183b      	adds	r3, r7, r0
 8004a84:	4912      	ldr	r1, [pc, #72]	; (8004ad0 <PCD_EP_ISR_Handler+0x320>)
 8004a86:	400a      	ands	r2, r1
 8004a88:	801a      	strh	r2, [r3, #0]
 8004a8a:	183b      	adds	r3, r7, r0
 8004a8c:	183a      	adds	r2, r7, r0
 8004a8e:	8812      	ldrh	r2, [r2, #0]
 8004a90:	2180      	movs	r1, #128	; 0x80
 8004a92:	0149      	lsls	r1, r1, #5
 8004a94:	404a      	eors	r2, r1
 8004a96:	801a      	strh	r2, [r3, #0]
 8004a98:	183b      	adds	r3, r7, r0
 8004a9a:	183a      	adds	r2, r7, r0
 8004a9c:	8812      	ldrh	r2, [r2, #0]
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	0189      	lsls	r1, r1, #6
 8004aa2:	404a      	eors	r2, r1
 8004aa4:	801a      	strh	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	183a      	adds	r2, r7, r0
 8004aac:	8812      	ldrh	r2, [r2, #0]
 8004aae:	4909      	ldr	r1, [pc, #36]	; (8004ad4 <PCD_EP_ISR_Handler+0x324>)
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	b292      	uxth	r2, r2
 8004ab4:	801a      	strh	r2, [r3, #0]
 8004ab6:	e259      	b.n	8004f6c <PCD_EP_ISR_Handler+0x7bc>
 8004ab8:	ffff8f0f 	.word	0xffff8f0f
 8004abc:	ffff8000 	.word	0xffff8000
 8004ac0:	00000402 	.word	0x00000402
 8004ac4:	00000406 	.word	0x00000406
 8004ac8:	00000f8f 	.word	0x00000f8f
 8004acc:	ffff83ff 	.word	0xffff83ff
 8004ad0:	ffffbf8f 	.word	0xffffbf8f
 8004ad4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	001a      	movs	r2, r3
 8004ade:	2055      	movs	r0, #85	; 0x55
 8004ae0:	183b      	adds	r3, r7, r0
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	18d2      	adds	r2, r2, r3
 8004ae8:	2152      	movs	r1, #82	; 0x52
 8004aea:	187b      	adds	r3, r7, r1
 8004aec:	8812      	ldrh	r2, [r2, #0]
 8004aee:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	2200      	movs	r2, #0
 8004af4:	5e9b      	ldrsh	r3, [r3, r2]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	db00      	blt.n	8004afc <PCD_EP_ISR_Handler+0x34c>
 8004afa:	e0fa      	b.n	8004cf2 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	001a      	movs	r2, r3
 8004b02:	183b      	adds	r3, r7, r0
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	18d3      	adds	r3, r2, r3
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	2450      	movs	r4, #80	; 0x50
 8004b10:	193b      	adds	r3, r7, r4
 8004b12:	49cf      	ldr	r1, [pc, #828]	; (8004e50 <PCD_EP_ISR_Handler+0x6a0>)
 8004b14:	400a      	ands	r2, r1
 8004b16:	801a      	strh	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	183b      	adds	r3, r7, r0
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	18d3      	adds	r3, r2, r3
 8004b26:	193a      	adds	r2, r7, r4
 8004b28:	8812      	ldrh	r2, [r2, #0]
 8004b2a:	2180      	movs	r1, #128	; 0x80
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	b292      	uxth	r2, r2
 8004b30:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004b32:	183b      	adds	r3, r7, r0
 8004b34:	781a      	ldrb	r2, [r3, #0]
 8004b36:	0013      	movs	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	189b      	adds	r3, r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	3369      	adds	r3, #105	; 0x69
 8004b40:	33ff      	adds	r3, #255	; 0xff
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	18d3      	adds	r3, r2, r3
 8004b46:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4a:	7b1b      	ldrb	r3, [r3, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d125      	bne.n	8004b9c <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2250      	movs	r2, #80	; 0x50
 8004b56:	5a9b      	ldrh	r3, [r3, r2]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	18d2      	adds	r2, r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	18d3      	adds	r3, r2, r3
 8004b6a:	4aba      	ldr	r2, [pc, #744]	; (8004e54 <PCD_EP_ISR_Handler+0x6a4>)
 8004b6c:	4694      	mov	ip, r2
 8004b6e:	4463      	add	r3, ip
 8004b70:	881a      	ldrh	r2, [r3, #0]
 8004b72:	2448      	movs	r4, #72	; 0x48
 8004b74:	193b      	adds	r3, r7, r4
 8004b76:	0592      	lsls	r2, r2, #22
 8004b78:	0d92      	lsrs	r2, r2, #22
 8004b7a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004b7c:	193b      	adds	r3, r7, r4
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d100      	bne.n	8004b86 <PCD_EP_ISR_Handler+0x3d6>
 8004b84:	e08d      	b.n	8004ca2 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8c:	6959      	ldr	r1, [r3, #20]
 8004b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b90:	88da      	ldrh	r2, [r3, #6]
 8004b92:	193b      	adds	r3, r7, r4
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	f005 fee7 	bl	800a968 <USB_ReadPMA>
 8004b9a:	e082      	b.n	8004ca2 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9e:	78db      	ldrb	r3, [r3, #3]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d10c      	bne.n	8004bbe <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ba4:	2348      	movs	r3, #72	; 0x48
 8004ba6:	18fc      	adds	r4, r7, r3
 8004ba8:	2352      	movs	r3, #82	; 0x52
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 f9ee 	bl	8004f94 <HAL_PCD_EP_DB_Receive>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	8023      	strh	r3, [r4, #0]
 8004bbc:	e071      	b.n	8004ca2 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	001a      	movs	r2, r3
 8004bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	18d3      	adds	r3, r2, r3
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	204a      	movs	r0, #74	; 0x4a
 8004bd2:	183b      	adds	r3, r7, r0
 8004bd4:	49a0      	ldr	r1, [pc, #640]	; (8004e58 <PCD_EP_ISR_Handler+0x6a8>)
 8004bd6:	400a      	ands	r2, r1
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	001a      	movs	r2, r3
 8004be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	18d3      	adds	r3, r2, r3
 8004be8:	183a      	adds	r2, r7, r0
 8004bea:	8812      	ldrh	r2, [r2, #0]
 8004bec:	499b      	ldr	r1, [pc, #620]	; (8004e5c <PCD_EP_ISR_Handler+0x6ac>)
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	b292      	uxth	r2, r2
 8004bf2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	18d3      	adds	r3, r2, r3
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	001a      	movs	r2, r3
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	01db      	lsls	r3, r3, #7
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d024      	beq.n	8004c5a <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2250      	movs	r2, #80	; 0x50
 8004c16:	5a9b      	ldrh	r3, [r3, r2]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	001a      	movs	r2, r3
 8004c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	18d2      	adds	r2, r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	18d3      	adds	r3, r2, r3
 8004c2a:	4a8d      	ldr	r2, [pc, #564]	; (8004e60 <PCD_EP_ISR_Handler+0x6b0>)
 8004c2c:	4694      	mov	ip, r2
 8004c2e:	4463      	add	r3, ip
 8004c30:	881a      	ldrh	r2, [r3, #0]
 8004c32:	2448      	movs	r4, #72	; 0x48
 8004c34:	193b      	adds	r3, r7, r4
 8004c36:	0592      	lsls	r2, r2, #22
 8004c38:	0d92      	lsrs	r2, r2, #22
 8004c3a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004c3c:	193b      	adds	r3, r7, r4
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d02e      	beq.n	8004ca2 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4a:	6959      	ldr	r1, [r3, #20]
 8004c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4e:	891a      	ldrh	r2, [r3, #8]
 8004c50:	193b      	adds	r3, r7, r4
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	f005 fe88 	bl	800a968 <USB_ReadPMA>
 8004c58:	e023      	b.n	8004ca2 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2250      	movs	r2, #80	; 0x50
 8004c60:	5a9b      	ldrh	r3, [r3, r2]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	001a      	movs	r2, r3
 8004c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	18d2      	adds	r2, r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	18d3      	adds	r3, r2, r3
 8004c74:	4a77      	ldr	r2, [pc, #476]	; (8004e54 <PCD_EP_ISR_Handler+0x6a4>)
 8004c76:	4694      	mov	ip, r2
 8004c78:	4463      	add	r3, ip
 8004c7a:	881a      	ldrh	r2, [r3, #0]
 8004c7c:	2448      	movs	r4, #72	; 0x48
 8004c7e:	193b      	adds	r3, r7, r4
 8004c80:	0592      	lsls	r2, r2, #22
 8004c82:	0d92      	lsrs	r2, r2, #22
 8004c84:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004c86:	193b      	adds	r3, r7, r4
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c94:	6959      	ldr	r1, [r3, #20]
 8004c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c98:	895a      	ldrh	r2, [r3, #10]
 8004c9a:	193b      	adds	r3, r7, r4
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	f005 fe63 	bl	800a968 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	2148      	movs	r1, #72	; 0x48
 8004ca8:	187b      	adds	r3, r7, r1
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	18d2      	adds	r2, r2, r3
 8004cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb4:	695a      	ldr	r2, [r3, #20]
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	18d2      	adds	r2, r2, r3
 8004cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <PCD_EP_ISR_Handler+0x524>
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	881a      	ldrh	r2, [r3, #0]
 8004ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d207      	bcs.n	8004ce4 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd6:	781a      	ldrb	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	0011      	movs	r1, r2
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f007 fe26 	bl	800c92e <HAL_PCD_DataOutStageCallback>
 8004ce2:	e006      	b.n	8004cf2 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cea:	0011      	movs	r1, r2
 8004cec:	0018      	movs	r0, r3
 8004cee:	f004 fc03 	bl	80094f8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004cf2:	2452      	movs	r4, #82	; 0x52
 8004cf4:	193b      	adds	r3, r7, r4
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	2280      	movs	r2, #128	; 0x80
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d100      	bne.n	8004d00 <PCD_EP_ISR_Handler+0x550>
 8004cfe:	e135      	b.n	8004f6c <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8004d00:	2055      	movs	r0, #85	; 0x55
 8004d02:	183b      	adds	r3, r7, r0
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	0013      	movs	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	189b      	adds	r3, r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	18d3      	adds	r3, r2, r3
 8004d14:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	001a      	movs	r2, r3
 8004d1c:	183b      	adds	r3, r7, r0
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	18d3      	adds	r3, r2, r3
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	2542      	movs	r5, #66	; 0x42
 8004d2a:	197b      	adds	r3, r7, r5
 8004d2c:	494d      	ldr	r1, [pc, #308]	; (8004e64 <PCD_EP_ISR_Handler+0x6b4>)
 8004d2e:	400a      	ands	r2, r1
 8004d30:	801a      	strh	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	001a      	movs	r2, r3
 8004d38:	183b      	adds	r3, r7, r0
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	18d3      	adds	r3, r2, r3
 8004d40:	197a      	adds	r2, r7, r5
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	4948      	ldr	r1, [pc, #288]	; (8004e68 <PCD_EP_ISR_Handler+0x6b8>)
 8004d46:	430a      	orrs	r2, r1
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8004d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4e:	78db      	ldrb	r3, [r3, #3]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d100      	bne.n	8004d56 <PCD_EP_ISR_Handler+0x5a6>
 8004d54:	e0ad      	b.n	8004eb2 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8004d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d58:	2200      	movs	r2, #0
 8004d5a:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d5c:	193b      	adds	r3, r7, r4
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	2240      	movs	r2, #64	; 0x40
 8004d62:	4013      	ands	r3, r2
 8004d64:	d046      	beq.n	8004df4 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d125      	bne.n	8004dba <PCD_EP_ISR_Handler+0x60a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2250      	movs	r2, #80	; 0x50
 8004d7a:	5a9b      	ldrh	r3, [r3, r2]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	001a      	movs	r2, r3
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	189b      	adds	r3, r3, r2
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
 8004d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	00da      	lsls	r2, r3, #3
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	18d3      	adds	r3, r2, r3
 8004d90:	4a33      	ldr	r2, [pc, #204]	; (8004e60 <PCD_EP_ISR_Handler+0x6b0>)
 8004d92:	4694      	mov	ip, r2
 8004d94:	4463      	add	r3, ip
 8004d96:	623b      	str	r3, [r7, #32]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	4a33      	ldr	r2, [pc, #204]	; (8004e6c <PCD_EP_ISR_Handler+0x6bc>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	4a2e      	ldr	r2, [pc, #184]	; (8004e68 <PCD_EP_ISR_Handler+0x6b8>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	801a      	strh	r2, [r3, #0]
 8004db8:	e073      	b.n	8004ea2 <PCD_EP_ISR_Handler+0x6f2>
 8004dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dbc:	785b      	ldrb	r3, [r3, #1]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d16f      	bne.n	8004ea2 <PCD_EP_ISR_Handler+0x6f2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2250      	movs	r2, #80	; 0x50
 8004dce:	5a9b      	ldrh	r3, [r3, r2]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	001a      	movs	r2, r3
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	189b      	adds	r3, r3, r2
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	00da      	lsls	r2, r3, #3
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	18d3      	adds	r3, r2, r3
 8004de4:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <PCD_EP_ISR_Handler+0x6b0>)
 8004de6:	4694      	mov	ip, r2
 8004de8:	4463      	add	r3, ip
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	2200      	movs	r2, #0
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	e056      	b.n	8004ea2 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d136      	bne.n	8004e70 <PCD_EP_ISR_Handler+0x6c0>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2250      	movs	r2, #80	; 0x50
 8004e0e:	5a9b      	ldrh	r3, [r3, r2]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	001a      	movs	r2, r3
 8004e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	00da      	lsls	r2, r3, #3
 8004e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e22:	18d3      	adds	r3, r2, r3
 8004e24:	4a0b      	ldr	r2, [pc, #44]	; (8004e54 <PCD_EP_ISR_Handler+0x6a4>)
 8004e26:	4694      	mov	ip, r2
 8004e28:	4463      	add	r3, ip
 8004e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <PCD_EP_ISR_Handler+0x6bc>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <PCD_EP_ISR_Handler+0x6b8>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	e029      	b.n	8004ea2 <PCD_EP_ISR_Handler+0x6f2>
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	00000f8f 	.word	0x00000f8f
 8004e54:	00000406 	.word	0x00000406
 8004e58:	ffff8f8f 	.word	0xffff8f8f
 8004e5c:	ffff80c0 	.word	0xffff80c0
 8004e60:	00000402 	.word	0x00000402
 8004e64:	ffff8f0f 	.word	0xffff8f0f
 8004e68:	ffff8000 	.word	0xffff8000
 8004e6c:	ffff83ff 	.word	0xffff83ff
 8004e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d114      	bne.n	8004ea2 <PCD_EP_ISR_Handler+0x6f2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2250      	movs	r2, #80	; 0x50
 8004e7e:	5a9b      	ldrh	r3, [r3, r2]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	001a      	movs	r2, r3
 8004e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	00da      	lsls	r2, r3, #3
 8004e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e92:	18d3      	adds	r3, r2, r3
 8004e94:	4a3d      	ldr	r2, [pc, #244]	; (8004f8c <PCD_EP_ISR_Handler+0x7dc>)
 8004e96:	4694      	mov	ip, r2
 8004e98:	4463      	add	r3, ip
 8004e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea4:	781a      	ldrb	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	0011      	movs	r1, r2
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f007 fd60 	bl	800c970 <HAL_PCD_DataInStageCallback>
 8004eb0:	e05c      	b.n	8004f6c <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8004eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb4:	78db      	ldrb	r3, [r3, #3]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d150      	bne.n	8004f5c <PCD_EP_ISR_Handler+0x7ac>
 8004eba:	2352      	movs	r3, #82	; 0x52
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	881a      	ldrh	r2, [r3, #0]
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d149      	bne.n	8004f5c <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2250      	movs	r2, #80	; 0x50
 8004ece:	5a9b      	ldrh	r3, [r3, r2]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	001a      	movs	r2, r3
 8004ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	18d2      	adds	r2, r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	18d3      	adds	r3, r2, r3
 8004ee2:	4a2b      	ldr	r2, [pc, #172]	; (8004f90 <PCD_EP_ISR_Handler+0x7e0>)
 8004ee4:	4694      	mov	ip, r2
 8004ee6:	4463      	add	r3, ip
 8004ee8:	881a      	ldrh	r2, [r3, #0]
 8004eea:	2140      	movs	r1, #64	; 0x40
 8004eec:	187b      	adds	r3, r7, r1
 8004eee:	0592      	lsls	r2, r2, #22
 8004ef0:	0d92      	lsrs	r2, r2, #22
 8004ef2:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8004ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef6:	699a      	ldr	r2, [r3, #24]
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d907      	bls.n	8004f10 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8004f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f02:	699a      	ldr	r2, [r3, #24]
 8004f04:	187b      	adds	r3, r7, r1
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	1ad2      	subs	r2, r2, r3
 8004f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0c:	619a      	str	r2, [r3, #24]
 8004f0e:	e002      	b.n	8004f16 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8004f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f12:	2200      	movs	r2, #0
 8004f14:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d107      	bne.n	8004f2e <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f20:	781a      	ldrb	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	0011      	movs	r1, r2
 8004f26:	0018      	movs	r0, r3
 8004f28:	f007 fd22 	bl	800c970 <HAL_PCD_DataInStageCallback>
 8004f2c:	e01e      	b.n	8004f6c <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	2140      	movs	r1, #64	; 0x40
 8004f34:	187b      	adds	r3, r7, r1
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	18d2      	adds	r2, r2, r3
 8004f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	187b      	adds	r3, r7, r1
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	18d2      	adds	r2, r2, r3
 8004f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f52:	0011      	movs	r1, r2
 8004f54:	0018      	movs	r0, r3
 8004f56:	f004 facf 	bl	80094f8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004f5a:	e007      	b.n	8004f6c <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f5c:	2352      	movs	r3, #82	; 0x52
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	881a      	ldrh	r2, [r3, #0]
 8004f62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	0018      	movs	r0, r3
 8004f68:	f000 f930 	bl	80051cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2244      	movs	r2, #68	; 0x44
 8004f72:	5a9b      	ldrh	r3, [r3, r2]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	b21b      	sxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	da01      	bge.n	8004f80 <PCD_EP_ISR_Handler+0x7d0>
 8004f7c:	f7ff fc1e 	bl	80047bc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	0018      	movs	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b016      	add	sp, #88	; 0x58
 8004f88:	bdb0      	pop	{r4, r5, r7, pc}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	00000406 	.word	0x00000406
 8004f90:	00000402 	.word	0x00000402

08004f94 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b089      	sub	sp, #36	; 0x24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	1dbb      	adds	r3, r7, #6
 8004fa0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fa2:	1dbb      	adds	r3, r7, #6
 8004fa4:	881a      	ldrh	r2, [r3, #0]
 8004fa6:	2380      	movs	r3, #128	; 0x80
 8004fa8:	01db      	lsls	r3, r3, #7
 8004faa:	4013      	ands	r3, r2
 8004fac:	d100      	bne.n	8004fb0 <HAL_PCD_EP_DB_Receive+0x1c>
 8004fae:	e07d      	b.n	80050ac <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2250      	movs	r2, #80	; 0x50
 8004fb6:	5a9b      	ldrh	r3, [r3, r2]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	001a      	movs	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	18d2      	adds	r2, r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	18d3      	adds	r3, r2, r3
 8004fca:	4a7a      	ldr	r2, [pc, #488]	; (80051b4 <HAL_PCD_EP_DB_Receive+0x220>)
 8004fcc:	4694      	mov	ip, r2
 8004fce:	4463      	add	r3, ip
 8004fd0:	881a      	ldrh	r2, [r3, #0]
 8004fd2:	211a      	movs	r1, #26
 8004fd4:	187b      	adds	r3, r7, r1
 8004fd6:	0592      	lsls	r2, r2, #22
 8004fd8:	0d92      	lsrs	r2, r2, #22
 8004fda:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	699a      	ldr	r2, [r3, #24]
 8004fe0:	187b      	adds	r3, r7, r1
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d307      	bcc.n	8004ff8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	187b      	adds	r3, r7, r1
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	1ad2      	subs	r2, r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	619a      	str	r2, [r3, #24]
 8004ff6:	e002      	b.n	8004ffe <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d121      	bne.n	800504a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	001a      	movs	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	18d3      	adds	r3, r2, r3
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29a      	uxth	r2, r3
 8005018:	2018      	movs	r0, #24
 800501a:	183b      	adds	r3, r7, r0
 800501c:	4966      	ldr	r1, [pc, #408]	; (80051b8 <HAL_PCD_EP_DB_Receive+0x224>)
 800501e:	400a      	ands	r2, r1
 8005020:	801a      	strh	r2, [r3, #0]
 8005022:	183b      	adds	r3, r7, r0
 8005024:	183a      	adds	r2, r7, r0
 8005026:	8812      	ldrh	r2, [r2, #0]
 8005028:	2180      	movs	r1, #128	; 0x80
 800502a:	0189      	lsls	r1, r1, #6
 800502c:	404a      	eors	r2, r1
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	001a      	movs	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	18d3      	adds	r3, r2, r3
 800503e:	183a      	adds	r2, r7, r0
 8005040:	8812      	ldrh	r2, [r2, #0]
 8005042:	495e      	ldr	r1, [pc, #376]	; (80051bc <HAL_PCD_EP_DB_Receive+0x228>)
 8005044:	430a      	orrs	r2, r1
 8005046:	b292      	uxth	r2, r2
 8005048:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800504a:	1dbb      	adds	r3, r7, #6
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	2240      	movs	r2, #64	; 0x40
 8005050:	4013      	ands	r3, r2
 8005052:	d01a      	beq.n	800508a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	001a      	movs	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	18d3      	adds	r3, r2, r3
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29a      	uxth	r2, r3
 8005066:	2016      	movs	r0, #22
 8005068:	183b      	adds	r3, r7, r0
 800506a:	4955      	ldr	r1, [pc, #340]	; (80051c0 <HAL_PCD_EP_DB_Receive+0x22c>)
 800506c:	400a      	ands	r2, r1
 800506e:	801a      	strh	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	001a      	movs	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	18d3      	adds	r3, r2, r3
 800507e:	183a      	adds	r2, r7, r0
 8005080:	8812      	ldrh	r2, [r2, #0]
 8005082:	4950      	ldr	r1, [pc, #320]	; (80051c4 <HAL_PCD_EP_DB_Receive+0x230>)
 8005084:	430a      	orrs	r2, r1
 8005086:	b292      	uxth	r2, r2
 8005088:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800508a:	241a      	movs	r4, #26
 800508c:	193b      	adds	r3, r7, r4
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d100      	bne.n	8005096 <HAL_PCD_EP_DB_Receive+0x102>
 8005094:	e086      	b.n	80051a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	6959      	ldr	r1, [r3, #20]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	891a      	ldrh	r2, [r3, #8]
 80050a2:	193b      	adds	r3, r7, r4
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	f005 fc5f 	bl	800a968 <USB_ReadPMA>
 80050aa:	e07b      	b.n	80051a4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2250      	movs	r2, #80	; 0x50
 80050b2:	5a9b      	ldrh	r3, [r3, r2]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	001a      	movs	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	18d2      	adds	r2, r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	18d3      	adds	r3, r2, r3
 80050c6:	4a40      	ldr	r2, [pc, #256]	; (80051c8 <HAL_PCD_EP_DB_Receive+0x234>)
 80050c8:	4694      	mov	ip, r2
 80050ca:	4463      	add	r3, ip
 80050cc:	881a      	ldrh	r2, [r3, #0]
 80050ce:	211a      	movs	r1, #26
 80050d0:	187b      	adds	r3, r7, r1
 80050d2:	0592      	lsls	r2, r2, #22
 80050d4:	0d92      	lsrs	r2, r2, #22
 80050d6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	187b      	adds	r3, r7, r1
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d307      	bcc.n	80050f4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	699a      	ldr	r2, [r3, #24]
 80050e8:	187b      	adds	r3, r7, r1
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	1ad2      	subs	r2, r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	619a      	str	r2, [r3, #24]
 80050f2:	e002      	b.n	80050fa <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d121      	bne.n	8005146 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	001a      	movs	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	18d3      	adds	r3, r2, r3
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29a      	uxth	r2, r3
 8005114:	201e      	movs	r0, #30
 8005116:	183b      	adds	r3, r7, r0
 8005118:	4927      	ldr	r1, [pc, #156]	; (80051b8 <HAL_PCD_EP_DB_Receive+0x224>)
 800511a:	400a      	ands	r2, r1
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	183b      	adds	r3, r7, r0
 8005120:	183a      	adds	r2, r7, r0
 8005122:	8812      	ldrh	r2, [r2, #0]
 8005124:	2180      	movs	r1, #128	; 0x80
 8005126:	0189      	lsls	r1, r1, #6
 8005128:	404a      	eors	r2, r1
 800512a:	801a      	strh	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	001a      	movs	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	18d3      	adds	r3, r2, r3
 800513a:	183a      	adds	r2, r7, r0
 800513c:	8812      	ldrh	r2, [r2, #0]
 800513e:	491f      	ldr	r1, [pc, #124]	; (80051bc <HAL_PCD_EP_DB_Receive+0x228>)
 8005140:	430a      	orrs	r2, r1
 8005142:	b292      	uxth	r2, r2
 8005144:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005146:	1dbb      	adds	r3, r7, #6
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	2240      	movs	r2, #64	; 0x40
 800514c:	4013      	ands	r3, r2
 800514e:	d11a      	bne.n	8005186 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	001a      	movs	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	18d3      	adds	r3, r2, r3
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29a      	uxth	r2, r3
 8005162:	201c      	movs	r0, #28
 8005164:	183b      	adds	r3, r7, r0
 8005166:	4916      	ldr	r1, [pc, #88]	; (80051c0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005168:	400a      	ands	r2, r1
 800516a:	801a      	strh	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	001a      	movs	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	18d3      	adds	r3, r2, r3
 800517a:	183a      	adds	r2, r7, r0
 800517c:	8812      	ldrh	r2, [r2, #0]
 800517e:	4911      	ldr	r1, [pc, #68]	; (80051c4 <HAL_PCD_EP_DB_Receive+0x230>)
 8005180:	430a      	orrs	r2, r1
 8005182:	b292      	uxth	r2, r2
 8005184:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005186:	241a      	movs	r4, #26
 8005188:	193b      	adds	r3, r7, r4
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d009      	beq.n	80051a4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6959      	ldr	r1, [r3, #20]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	895a      	ldrh	r2, [r3, #10]
 800519c:	193b      	adds	r3, r7, r4
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	f005 fbe2 	bl	800a968 <USB_ReadPMA>
    }
  }

  return count;
 80051a4:	231a      	movs	r3, #26
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	881b      	ldrh	r3, [r3, #0]
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b009      	add	sp, #36	; 0x24
 80051b0:	bd90      	pop	{r4, r7, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	00000402 	.word	0x00000402
 80051b8:	ffffbf8f 	.word	0xffffbf8f
 80051bc:	ffff8080 	.word	0xffff8080
 80051c0:	ffff8f8f 	.word	0xffff8f8f
 80051c4:	ffff80c0 	.word	0xffff80c0
 80051c8:	00000406 	.word	0x00000406

080051cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b0a2      	sub	sp, #136	; 0x88
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	1dbb      	adds	r3, r7, #6
 80051d8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051da:	1dbb      	adds	r3, r7, #6
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	2240      	movs	r2, #64	; 0x40
 80051e0:	4013      	ands	r3, r2
 80051e2:	d100      	bne.n	80051e6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80051e4:	e1c8      	b.n	8005578 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2250      	movs	r2, #80	; 0x50
 80051ec:	5a9b      	ldrh	r3, [r3, r2]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	001a      	movs	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	18d2      	adds	r2, r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	4ad7      	ldr	r2, [pc, #860]	; (8005560 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005202:	4694      	mov	ip, r2
 8005204:	4463      	add	r3, ip
 8005206:	881a      	ldrh	r2, [r3, #0]
 8005208:	214e      	movs	r1, #78	; 0x4e
 800520a:	187b      	adds	r3, r7, r1
 800520c:	0592      	lsls	r2, r2, #22
 800520e:	0d92      	lsrs	r2, r2, #22
 8005210:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	187b      	adds	r3, r7, r1
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d907      	bls.n	800522e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	187b      	adds	r3, r7, r1
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	1ad2      	subs	r2, r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	619a      	str	r2, [r3, #24]
 800522c:	e002      	b.n	8005234 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2200      	movs	r2, #0
 8005232:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d000      	beq.n	800523e <HAL_PCD_EP_DB_Transmit+0x72>
 800523c:	e0b5      	b.n	80053aa <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d125      	bne.n	8005292 <HAL_PCD_EP_DB_Transmit+0xc6>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2250      	movs	r2, #80	; 0x50
 8005252:	5a9b      	ldrh	r3, [r3, r2]
 8005254:	b29b      	uxth	r3, r3
 8005256:	001a      	movs	r2, r3
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	189b      	adds	r3, r3, r2
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	00da      	lsls	r2, r3, #3
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	18d3      	adds	r3, r2, r3
 8005268:	4abd      	ldr	r2, [pc, #756]	; (8005560 <HAL_PCD_EP_DB_Transmit+0x394>)
 800526a:	4694      	mov	ip, r2
 800526c:	4463      	add	r3, ip
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	4abb      	ldr	r2, [pc, #748]	; (8005564 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005278:	4013      	ands	r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	4ab8      	ldr	r2, [pc, #736]	; (8005568 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005288:	4313      	orrs	r3, r2
 800528a:	b29a      	uxth	r2, r3
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	e01b      	b.n	80052ca <HAL_PCD_EP_DB_Transmit+0xfe>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	785b      	ldrb	r3, [r3, #1]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d117      	bne.n	80052ca <HAL_PCD_EP_DB_Transmit+0xfe>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	633b      	str	r3, [r7, #48]	; 0x30
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2250      	movs	r2, #80	; 0x50
 80052a6:	5a9b      	ldrh	r3, [r3, r2]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	001a      	movs	r2, r3
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	189b      	adds	r3, r3, r2
 80052b0:	633b      	str	r3, [r7, #48]	; 0x30
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	00da      	lsls	r2, r3, #3
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	18d3      	adds	r3, r2, r3
 80052bc:	4aa8      	ldr	r2, [pc, #672]	; (8005560 <HAL_PCD_EP_DB_Transmit+0x394>)
 80052be:	4694      	mov	ip, r2
 80052c0:	4463      	add	r3, ip
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	2200      	movs	r2, #0
 80052c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d125      	bne.n	8005324 <HAL_PCD_EP_DB_Transmit+0x158>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2250      	movs	r2, #80	; 0x50
 80052e4:	5a9b      	ldrh	r3, [r3, r2]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	001a      	movs	r2, r3
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	189b      	adds	r3, r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	00da      	lsls	r2, r3, #3
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	18d3      	adds	r3, r2, r3
 80052fa:	4a9c      	ldr	r2, [pc, #624]	; (800556c <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80052fc:	4694      	mov	ip, r2
 80052fe:	4463      	add	r3, ip
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	4a96      	ldr	r2, [pc, #600]	; (8005564 <HAL_PCD_EP_DB_Transmit+0x398>)
 800530a:	4013      	ands	r3, r2
 800530c:	b29a      	uxth	r2, r3
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b29b      	uxth	r3, r3
 8005318:	4a93      	ldr	r2, [pc, #588]	; (8005568 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800531a:	4313      	orrs	r3, r2
 800531c:	b29a      	uxth	r2, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	801a      	strh	r2, [r3, #0]
 8005322:	e018      	b.n	8005356 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d114      	bne.n	8005356 <HAL_PCD_EP_DB_Transmit+0x18a>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2250      	movs	r2, #80	; 0x50
 8005332:	5a9b      	ldrh	r3, [r3, r2]
 8005334:	b29b      	uxth	r3, r3
 8005336:	001a      	movs	r2, r3
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	189b      	adds	r3, r3, r2
 800533c:	623b      	str	r3, [r7, #32]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	00da      	lsls	r2, r3, #3
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	18d3      	adds	r3, r2, r3
 8005348:	4a88      	ldr	r2, [pc, #544]	; (800556c <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800534a:	4694      	mov	ip, r2
 800534c:	4463      	add	r3, ip
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2200      	movs	r2, #0
 8005354:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	781a      	ldrb	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	0011      	movs	r1, r2
 800535e:	0018      	movs	r0, r3
 8005360:	f007 fb06 	bl	800c970 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005364:	1dbb      	adds	r3, r7, #6
 8005366:	881a      	ldrh	r2, [r3, #0]
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	01db      	lsls	r3, r3, #7
 800536c:	4013      	ands	r3, r2
 800536e:	d100      	bne.n	8005372 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005370:	e2d4      	b.n	800591c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	001a      	movs	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	18d3      	adds	r3, r2, r3
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29a      	uxth	r2, r3
 8005384:	2012      	movs	r0, #18
 8005386:	183b      	adds	r3, r7, r0
 8005388:	4979      	ldr	r1, [pc, #484]	; (8005570 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800538a:	400a      	ands	r2, r1
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	001a      	movs	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	18d3      	adds	r3, r2, r3
 800539c:	183a      	adds	r2, r7, r0
 800539e:	8812      	ldrh	r2, [r2, #0]
 80053a0:	4974      	ldr	r1, [pc, #464]	; (8005574 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80053a2:	430a      	orrs	r2, r1
 80053a4:	b292      	uxth	r2, r2
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e2b8      	b.n	800591c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053aa:	1dbb      	adds	r3, r7, #6
 80053ac:	881a      	ldrh	r2, [r3, #0]
 80053ae:	2380      	movs	r3, #128	; 0x80
 80053b0:	01db      	lsls	r3, r3, #7
 80053b2:	4013      	ands	r3, r2
 80053b4:	d01a      	beq.n	80053ec <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	001a      	movs	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	18d3      	adds	r3, r2, r3
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	2044      	movs	r0, #68	; 0x44
 80053ca:	183b      	adds	r3, r7, r0
 80053cc:	4968      	ldr	r1, [pc, #416]	; (8005570 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80053ce:	400a      	ands	r2, r1
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	001a      	movs	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	18d3      	adds	r3, r2, r3
 80053e0:	183a      	adds	r2, r7, r0
 80053e2:	8812      	ldrh	r2, [r2, #0]
 80053e4:	4963      	ldr	r1, [pc, #396]	; (8005574 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80053e6:	430a      	orrs	r2, r1
 80053e8:	b292      	uxth	r2, r2
 80053ea:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2224      	movs	r2, #36	; 0x24
 80053f0:	5c9b      	ldrb	r3, [r3, r2]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d000      	beq.n	80053f8 <HAL_PCD_EP_DB_Transmit+0x22c>
 80053f6:	e291      	b.n	800591c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	695a      	ldr	r2, [r3, #20]
 80053fc:	214e      	movs	r1, #78	; 0x4e
 80053fe:	187b      	adds	r3, r7, r1
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	18d2      	adds	r2, r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	187b      	adds	r3, r7, r1
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	18d2      	adds	r2, r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6a1a      	ldr	r2, [r3, #32]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	429a      	cmp	r2, r3
 8005420:	d309      	bcc.n	8005436 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	6a1a      	ldr	r2, [r3, #32]
 800542c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	621a      	str	r2, [r3, #32]
 8005434:	e016      	b.n	8005464 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d108      	bne.n	8005450 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 800543e:	234e      	movs	r3, #78	; 0x4e
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2224      	movs	r2, #36	; 0x24
 800544a:	2100      	movs	r1, #0
 800544c:	5499      	strb	r1, [r3, r2]
 800544e:	e009      	b.n	8005464 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2224      	movs	r2, #36	; 0x24
 8005454:	2100      	movs	r1, #0
 8005456:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2200      	movs	r2, #0
 8005462:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d150      	bne.n	800550e <HAL_PCD_EP_DB_Transmit+0x342>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	63bb      	str	r3, [r7, #56]	; 0x38
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2250      	movs	r2, #80	; 0x50
 8005478:	5a9b      	ldrh	r3, [r3, r2]
 800547a:	b29b      	uxth	r3, r3
 800547c:	001a      	movs	r2, r3
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	189b      	adds	r3, r3, r2
 8005482:	63bb      	str	r3, [r7, #56]	; 0x38
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	00da      	lsls	r2, r3, #3
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	18d3      	adds	r3, r2, r3
 800548e:	4a34      	ldr	r2, [pc, #208]	; (8005560 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005490:	4694      	mov	ip, r2
 8005492:	4463      	add	r3, ip
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
 8005496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005498:	2b00      	cmp	r3, #0
 800549a:	d110      	bne.n	80054be <HAL_PCD_EP_DB_Transmit+0x2f2>
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4a30      	ldr	r2, [pc, #192]	; (8005564 <HAL_PCD_EP_DB_Transmit+0x398>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	4a2d      	ldr	r2, [pc, #180]	; (8005568 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ba:	801a      	strh	r2, [r3, #0]
 80054bc:	e044      	b.n	8005548 <HAL_PCD_EP_DB_Transmit+0x37c>
 80054be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c0:	2b3e      	cmp	r3, #62	; 0x3e
 80054c2:	d810      	bhi.n	80054e6 <HAL_PCD_EP_DB_Transmit+0x31a>
 80054c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054cc:	2201      	movs	r2, #1
 80054ce:	4013      	ands	r3, r2
 80054d0:	d002      	beq.n	80054d8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80054d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054d4:	3301      	adds	r3, #1
 80054d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	e030      	b.n	8005548 <HAL_PCD_EP_DB_Transmit+0x37c>
 80054e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ee:	221f      	movs	r2, #31
 80054f0:	4013      	ands	r3, r2
 80054f2:	d102      	bne.n	80054fa <HAL_PCD_EP_DB_Transmit+0x32e>
 80054f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f6:	3b01      	subs	r3, #1
 80054f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80054fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	029b      	lsls	r3, r3, #10
 8005500:	b29b      	uxth	r3, r3
 8005502:	4a19      	ldr	r2, [pc, #100]	; (8005568 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	b29a      	uxth	r2, r3
 8005508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	e01c      	b.n	8005548 <HAL_PCD_EP_DB_Transmit+0x37c>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d118      	bne.n	8005548 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	643b      	str	r3, [r7, #64]	; 0x40
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2250      	movs	r2, #80	; 0x50
 8005522:	5a9b      	ldrh	r3, [r3, r2]
 8005524:	b29b      	uxth	r3, r3
 8005526:	001a      	movs	r2, r3
 8005528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800552a:	189b      	adds	r3, r3, r2
 800552c:	643b      	str	r3, [r7, #64]	; 0x40
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	00da      	lsls	r2, r3, #3
 8005534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005536:	18d3      	adds	r3, r2, r3
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <HAL_PCD_EP_DB_Transmit+0x394>)
 800553a:	4694      	mov	ip, r2
 800553c:	4463      	add	r3, ip
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005542:	b29a      	uxth	r2, r3
 8005544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005546:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	6959      	ldr	r1, [r3, #20]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	891a      	ldrh	r2, [r3, #8]
 8005554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005556:	b29b      	uxth	r3, r3
 8005558:	f005 f9c2 	bl	800a8e0 <USB_WritePMA>
 800555c:	e1de      	b.n	800591c <HAL_PCD_EP_DB_Transmit+0x750>
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	00000402 	.word	0x00000402
 8005564:	ffff83ff 	.word	0xffff83ff
 8005568:	ffff8000 	.word	0xffff8000
 800556c:	00000406 	.word	0x00000406
 8005570:	ffff8f8f 	.word	0xffff8f8f
 8005574:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2250      	movs	r2, #80	; 0x50
 800557e:	5a9b      	ldrh	r3, [r3, r2]
 8005580:	b29b      	uxth	r3, r3
 8005582:	001a      	movs	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	18d2      	adds	r2, r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	18d3      	adds	r3, r2, r3
 8005592:	4aca      	ldr	r2, [pc, #808]	; (80058bc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005594:	4694      	mov	ip, r2
 8005596:	4463      	add	r3, ip
 8005598:	881a      	ldrh	r2, [r3, #0]
 800559a:	214e      	movs	r1, #78	; 0x4e
 800559c:	187b      	adds	r3, r7, r1
 800559e:	0592      	lsls	r2, r2, #22
 80055a0:	0d92      	lsrs	r2, r2, #22
 80055a2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	699a      	ldr	r2, [r3, #24]
 80055a8:	187b      	adds	r3, r7, r1
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d307      	bcc.n	80055c0 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	187b      	adds	r3, r7, r1
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	1ad2      	subs	r2, r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	619a      	str	r2, [r3, #24]
 80055be:	e002      	b.n	80055c6 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2200      	movs	r2, #0
 80055c4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d000      	beq.n	80055d0 <HAL_PCD_EP_DB_Transmit+0x404>
 80055ce:	e0c0      	b.n	8005752 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d125      	bne.n	8005624 <HAL_PCD_EP_DB_Transmit+0x458>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2250      	movs	r2, #80	; 0x50
 80055e4:	5a9b      	ldrh	r3, [r3, r2]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	001a      	movs	r2, r3
 80055ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ec:	189b      	adds	r3, r3, r2
 80055ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	00da      	lsls	r2, r3, #3
 80055f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f8:	18d3      	adds	r3, r2, r3
 80055fa:	4ab1      	ldr	r2, [pc, #708]	; (80058c0 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80055fc:	4694      	mov	ip, r2
 80055fe:	4463      	add	r3, ip
 8005600:	66bb      	str	r3, [r7, #104]	; 0x68
 8005602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	4aae      	ldr	r2, [pc, #696]	; (80058c4 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800560a:	4013      	ands	r3, r2
 800560c:	b29a      	uxth	r2, r3
 800560e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	4aab      	ldr	r2, [pc, #684]	; (80058c8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800561a:	4313      	orrs	r3, r2
 800561c:	b29a      	uxth	r2, r3
 800561e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	e01b      	b.n	800565c <HAL_PCD_EP_DB_Transmit+0x490>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d117      	bne.n	800565c <HAL_PCD_EP_DB_Transmit+0x490>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	677b      	str	r3, [r7, #116]	; 0x74
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2250      	movs	r2, #80	; 0x50
 8005638:	5a9b      	ldrh	r3, [r3, r2]
 800563a:	b29b      	uxth	r3, r3
 800563c:	001a      	movs	r2, r3
 800563e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005640:	189b      	adds	r3, r3, r2
 8005642:	677b      	str	r3, [r7, #116]	; 0x74
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	00da      	lsls	r2, r3, #3
 800564a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800564c:	18d3      	adds	r3, r2, r3
 800564e:	4a9c      	ldr	r2, [pc, #624]	; (80058c0 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005650:	4694      	mov	ip, r2
 8005652:	4463      	add	r3, ip
 8005654:	673b      	str	r3, [r7, #112]	; 0x70
 8005656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005658:	2200      	movs	r2, #0
 800565a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	67bb      	str	r3, [r7, #120]	; 0x78
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d130      	bne.n	80056cc <HAL_PCD_EP_DB_Transmit+0x500>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	187a      	adds	r2, r7, r1
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2250      	movs	r2, #80	; 0x50
 800567a:	5a9b      	ldrh	r3, [r3, r2]
 800567c:	b29b      	uxth	r3, r3
 800567e:	001a      	movs	r2, r3
 8005680:	187b      	adds	r3, r7, r1
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	189b      	adds	r3, r3, r2
 8005686:	187a      	adds	r2, r7, r1
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	00da      	lsls	r2, r3, #3
 8005690:	187b      	adds	r3, r7, r1
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	18d3      	adds	r3, r2, r3
 8005696:	4a89      	ldr	r2, [pc, #548]	; (80058bc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005698:	4694      	mov	ip, r2
 800569a:	4463      	add	r3, ip
 800569c:	2184      	movs	r1, #132	; 0x84
 800569e:	187a      	adds	r2, r7, r1
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	187b      	adds	r3, r7, r1
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	4a86      	ldr	r2, [pc, #536]	; (80058c4 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	187b      	adds	r3, r7, r1
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	187b      	adds	r3, r7, r1
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	4a82      	ldr	r2, [pc, #520]	; (80058c8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	187b      	adds	r3, r7, r1
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	801a      	strh	r2, [r3, #0]
 80056ca:	e018      	b.n	80056fe <HAL_PCD_EP_DB_Transmit+0x532>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d114      	bne.n	80056fe <HAL_PCD_EP_DB_Transmit+0x532>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2250      	movs	r2, #80	; 0x50
 80056da:	5a9b      	ldrh	r3, [r3, r2]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	001a      	movs	r2, r3
 80056e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e2:	189b      	adds	r3, r3, r2
 80056e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	00da      	lsls	r2, r3, #3
 80056ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ee:	18d3      	adds	r3, r2, r3
 80056f0:	4a72      	ldr	r2, [pc, #456]	; (80058bc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80056f2:	4694      	mov	ip, r2
 80056f4:	4463      	add	r3, ip
 80056f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056fa:	2200      	movs	r2, #0
 80056fc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	0011      	movs	r1, r2
 8005706:	0018      	movs	r0, r3
 8005708:	f007 f932 	bl	800c970 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800570c:	1dbb      	adds	r3, r7, #6
 800570e:	881a      	ldrh	r2, [r3, #0]
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	01db      	lsls	r3, r3, #7
 8005714:	4013      	ands	r3, r2
 8005716:	d000      	beq.n	800571a <HAL_PCD_EP_DB_Transmit+0x54e>
 8005718:	e100      	b.n	800591c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	001a      	movs	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	18d3      	adds	r3, r2, r3
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29a      	uxth	r2, r3
 800572c:	2046      	movs	r0, #70	; 0x46
 800572e:	183b      	adds	r3, r7, r0
 8005730:	4966      	ldr	r1, [pc, #408]	; (80058cc <HAL_PCD_EP_DB_Transmit+0x700>)
 8005732:	400a      	ands	r2, r1
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	001a      	movs	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	18d3      	adds	r3, r2, r3
 8005744:	183a      	adds	r2, r7, r0
 8005746:	8812      	ldrh	r2, [r2, #0]
 8005748:	4961      	ldr	r1, [pc, #388]	; (80058d0 <HAL_PCD_EP_DB_Transmit+0x704>)
 800574a:	430a      	orrs	r2, r1
 800574c:	b292      	uxth	r2, r2
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	e0e4      	b.n	800591c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005752:	1dbb      	adds	r3, r7, #6
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	2380      	movs	r3, #128	; 0x80
 8005758:	01db      	lsls	r3, r3, #7
 800575a:	4013      	ands	r3, r2
 800575c:	d11a      	bne.n	8005794 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	001a      	movs	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	18d3      	adds	r3, r2, r3
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29a      	uxth	r2, r3
 8005770:	204c      	movs	r0, #76	; 0x4c
 8005772:	183b      	adds	r3, r7, r0
 8005774:	4955      	ldr	r1, [pc, #340]	; (80058cc <HAL_PCD_EP_DB_Transmit+0x700>)
 8005776:	400a      	ands	r2, r1
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	001a      	movs	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	18d3      	adds	r3, r2, r3
 8005788:	183a      	adds	r2, r7, r0
 800578a:	8812      	ldrh	r2, [r2, #0]
 800578c:	4950      	ldr	r1, [pc, #320]	; (80058d0 <HAL_PCD_EP_DB_Transmit+0x704>)
 800578e:	430a      	orrs	r2, r1
 8005790:	b292      	uxth	r2, r2
 8005792:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2224      	movs	r2, #36	; 0x24
 8005798:	5c9b      	ldrb	r3, [r3, r2]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d000      	beq.n	80057a0 <HAL_PCD_EP_DB_Transmit+0x5d4>
 800579e:	e0bd      	b.n	800591c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	695a      	ldr	r2, [r3, #20]
 80057a4:	214e      	movs	r1, #78	; 0x4e
 80057a6:	187b      	adds	r3, r7, r1
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	18d2      	adds	r2, r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	187b      	adds	r3, r7, r1
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	18d2      	adds	r2, r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6a1a      	ldr	r2, [r3, #32]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d309      	bcc.n	80057de <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6a1a      	ldr	r2, [r3, #32]
 80057d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d6:	1ad2      	subs	r2, r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	621a      	str	r2, [r3, #32]
 80057dc:	e016      	b.n	800580c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d108      	bne.n	80057f8 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 80057e6:	234e      	movs	r3, #78	; 0x4e
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2224      	movs	r2, #36	; 0x24
 80057f2:	2100      	movs	r1, #0
 80057f4:	5499      	strb	r1, [r3, r2]
 80057f6:	e009      	b.n	800580c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2200      	movs	r2, #0
 8005802:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2224      	movs	r2, #36	; 0x24
 8005808:	2100      	movs	r1, #0
 800580a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	667b      	str	r3, [r7, #100]	; 0x64
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d15c      	bne.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x708>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2250      	movs	r2, #80	; 0x50
 8005826:	5a9b      	ldrh	r3, [r3, r2]
 8005828:	b29b      	uxth	r3, r3
 800582a:	001a      	movs	r2, r3
 800582c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800582e:	189b      	adds	r3, r3, r2
 8005830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	00da      	lsls	r2, r3, #3
 8005838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583a:	18d3      	adds	r3, r2, r3
 800583c:	4a1f      	ldr	r2, [pc, #124]	; (80058bc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800583e:	4694      	mov	ip, r2
 8005840:	4463      	add	r3, ip
 8005842:	65bb      	str	r3, [r7, #88]	; 0x58
 8005844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005846:	2b00      	cmp	r3, #0
 8005848:	d110      	bne.n	800586c <HAL_PCD_EP_DB_Transmit+0x6a0>
 800584a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005852:	4013      	ands	r3, r2
 8005854:	b29a      	uxth	r2, r3
 8005856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	4a19      	ldr	r2, [pc, #100]	; (80058c8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005862:	4313      	orrs	r3, r2
 8005864:	b29a      	uxth	r2, r3
 8005866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005868:	801a      	strh	r2, [r3, #0]
 800586a:	e04d      	b.n	8005908 <HAL_PCD_EP_DB_Transmit+0x73c>
 800586c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586e:	2b3e      	cmp	r3, #62	; 0x3e
 8005870:	d810      	bhi.n	8005894 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	657b      	str	r3, [r7, #84]	; 0x54
 8005878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800587a:	2201      	movs	r2, #1
 800587c:	4013      	ands	r3, r2
 800587e:	d002      	beq.n	8005886 <HAL_PCD_EP_DB_Transmit+0x6ba>
 8005880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005882:	3301      	adds	r3, #1
 8005884:	657b      	str	r3, [r7, #84]	; 0x54
 8005886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005888:	b29b      	uxth	r3, r3
 800588a:	029b      	lsls	r3, r3, #10
 800588c:	b29a      	uxth	r2, r3
 800588e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	e039      	b.n	8005908 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	657b      	str	r3, [r7, #84]	; 0x54
 800589a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589c:	221f      	movs	r2, #31
 800589e:	4013      	ands	r3, r2
 80058a0:	d102      	bne.n	80058a8 <HAL_PCD_EP_DB_Transmit+0x6dc>
 80058a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a4:	3b01      	subs	r3, #1
 80058a6:	657b      	str	r3, [r7, #84]	; 0x54
 80058a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	029b      	lsls	r3, r3, #10
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	e025      	b.n	8005908 <HAL_PCD_EP_DB_Transmit+0x73c>
 80058bc:	00000406 	.word	0x00000406
 80058c0:	00000402 	.word	0x00000402
 80058c4:	ffff83ff 	.word	0xffff83ff
 80058c8:	ffff8000 	.word	0xffff8000
 80058cc:	ffff8f8f 	.word	0xffff8f8f
 80058d0:	ffffc080 	.word	0xffffc080
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d115      	bne.n	8005908 <HAL_PCD_EP_DB_Transmit+0x73c>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2250      	movs	r2, #80	; 0x50
 80058e2:	5a9b      	ldrh	r3, [r3, r2]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	001a      	movs	r2, r3
 80058e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ea:	189b      	adds	r3, r3, r2
 80058ec:	667b      	str	r3, [r7, #100]	; 0x64
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	00da      	lsls	r2, r3, #3
 80058f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058f6:	18d3      	adds	r3, r2, r3
 80058f8:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80058fa:	4694      	mov	ip, r2
 80058fc:	4463      	add	r3, ip
 80058fe:	663b      	str	r3, [r7, #96]	; 0x60
 8005900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005902:	b29a      	uxth	r2, r3
 8005904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005906:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	6959      	ldr	r1, [r3, #20]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	895a      	ldrh	r2, [r3, #10]
 8005914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005916:	b29b      	uxth	r3, r3
 8005918:	f004 ffe2 	bl	800a8e0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	001a      	movs	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	18d3      	adds	r3, r2, r3
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29a      	uxth	r2, r3
 800592e:	2010      	movs	r0, #16
 8005930:	183b      	adds	r3, r7, r0
 8005932:	4911      	ldr	r1, [pc, #68]	; (8005978 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8005934:	400a      	ands	r2, r1
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	183b      	adds	r3, r7, r0
 800593a:	183a      	adds	r2, r7, r0
 800593c:	8812      	ldrh	r2, [r2, #0]
 800593e:	2110      	movs	r1, #16
 8005940:	404a      	eors	r2, r1
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	183b      	adds	r3, r7, r0
 8005946:	183a      	adds	r2, r7, r0
 8005948:	8812      	ldrh	r2, [r2, #0]
 800594a:	2120      	movs	r1, #32
 800594c:	404a      	eors	r2, r1
 800594e:	801a      	strh	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	001a      	movs	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	18d3      	adds	r3, r2, r3
 800595e:	183a      	adds	r2, r7, r0
 8005960:	8812      	ldrh	r2, [r2, #0]
 8005962:	4906      	ldr	r1, [pc, #24]	; (800597c <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8005964:	430a      	orrs	r2, r1
 8005966:	b292      	uxth	r2, r2
 8005968:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	0018      	movs	r0, r3
 800596e:	46bd      	mov	sp, r7
 8005970:	b022      	add	sp, #136	; 0x88
 8005972:	bd80      	pop	{r7, pc}
 8005974:	00000406 	.word	0x00000406
 8005978:	ffff8fbf 	.word	0xffff8fbf
 800597c:	ffff8080 	.word	0xffff8080

08005980 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005980:	b590      	push	{r4, r7, lr}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	0008      	movs	r0, r1
 800598a:	0011      	movs	r1, r2
 800598c:	607b      	str	r3, [r7, #4]
 800598e:	240a      	movs	r4, #10
 8005990:	193b      	adds	r3, r7, r4
 8005992:	1c02      	adds	r2, r0, #0
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	2308      	movs	r3, #8
 8005998:	18fb      	adds	r3, r7, r3
 800599a:	1c0a      	adds	r2, r1, #0
 800599c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800599e:	0021      	movs	r1, r4
 80059a0:	187b      	adds	r3, r7, r1
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	2280      	movs	r2, #128	; 0x80
 80059a6:	4013      	ands	r3, r2
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00c      	beq.n	80059c8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ae:	187b      	adds	r3, r7, r1
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	2207      	movs	r2, #7
 80059b4:	4013      	ands	r3, r2
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	0013      	movs	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	189b      	adds	r3, r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	18d3      	adds	r3, r2, r3
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	e00b      	b.n	80059e0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059c8:	230a      	movs	r3, #10
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	881a      	ldrh	r2, [r3, #0]
 80059ce:	0013      	movs	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	3369      	adds	r3, #105	; 0x69
 80059d8:	33ff      	adds	r3, #255	; 0xff
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	18d3      	adds	r3, r2, r3
 80059de:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80059e0:	2308      	movs	r3, #8
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d107      	bne.n	80059fa <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	80da      	strh	r2, [r3, #6]
 80059f8:	e00b      	b.n	8005a12 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2201      	movs	r2, #1
 80059fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	0c1b      	lsrs	r3, r3, #16
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	0018      	movs	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b007      	add	sp, #28
 8005a1a:	bd90      	pop	{r4, r7, pc}

08005a1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	23ba      	movs	r3, #186	; 0xba
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	2101      	movs	r1, #1
 8005a32:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	23b8      	movs	r3, #184	; 0xb8
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2254      	movs	r2, #84	; 0x54
 8005a42:	5a9b      	ldrh	r3, [r3, r2]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2201      	movs	r2, #1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	b299      	uxth	r1, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2254      	movs	r2, #84	; 0x54
 8005a50:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2254      	movs	r2, #84	; 0x54
 8005a56:	5a9b      	ldrh	r3, [r3, r2]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b299      	uxth	r1, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2254      	movs	r2, #84	; 0x54
 8005a64:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	0018      	movs	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	b004      	add	sp, #16
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	000a      	movs	r2, r1
 8005a7a:	1cfb      	adds	r3, r7, #3
 8005a7c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b002      	add	sp, #8
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f000 fb76 	bl	8006188 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d100      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x20>
 8005aa6:	e08e      	b.n	8005bc6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005aa8:	4bc5      	ldr	r3, [pc, #788]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	220c      	movs	r2, #12
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ab4:	4bc2      	ldr	r3, [pc, #776]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	220c      	movs	r2, #12
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d117      	bne.n	8005af0 <HAL_RCC_OscConfig+0x68>
 8005ac0:	4bbf      	ldr	r3, [pc, #764]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	23c0      	movs	r3, #192	; 0xc0
 8005ac6:	025b      	lsls	r3, r3, #9
 8005ac8:	401a      	ands	r2, r3
 8005aca:	2380      	movs	r3, #128	; 0x80
 8005acc:	025b      	lsls	r3, r3, #9
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d10e      	bne.n	8005af0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad2:	4bbb      	ldr	r3, [pc, #748]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	2380      	movs	r3, #128	; 0x80
 8005ad8:	029b      	lsls	r3, r3, #10
 8005ada:	4013      	ands	r3, r2
 8005adc:	d100      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x58>
 8005ade:	e071      	b.n	8005bc4 <HAL_RCC_OscConfig+0x13c>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d000      	beq.n	8005aea <HAL_RCC_OscConfig+0x62>
 8005ae8:	e06c      	b.n	8005bc4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f000 fb4c 	bl	8006188 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d107      	bne.n	8005b08 <HAL_RCC_OscConfig+0x80>
 8005af8:	4bb1      	ldr	r3, [pc, #708]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	4bb0      	ldr	r3, [pc, #704]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005afe:	2180      	movs	r1, #128	; 0x80
 8005b00:	0249      	lsls	r1, r1, #9
 8005b02:	430a      	orrs	r2, r1
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	e02f      	b.n	8005b68 <HAL_RCC_OscConfig+0xe0>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10c      	bne.n	8005b2a <HAL_RCC_OscConfig+0xa2>
 8005b10:	4bab      	ldr	r3, [pc, #684]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	4baa      	ldr	r3, [pc, #680]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b16:	49ab      	ldr	r1, [pc, #684]	; (8005dc4 <HAL_RCC_OscConfig+0x33c>)
 8005b18:	400a      	ands	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	4ba8      	ldr	r3, [pc, #672]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	4ba7      	ldr	r3, [pc, #668]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b22:	49a9      	ldr	r1, [pc, #676]	; (8005dc8 <HAL_RCC_OscConfig+0x340>)
 8005b24:	400a      	ands	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e01e      	b.n	8005b68 <HAL_RCC_OscConfig+0xe0>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b05      	cmp	r3, #5
 8005b30:	d10e      	bne.n	8005b50 <HAL_RCC_OscConfig+0xc8>
 8005b32:	4ba3      	ldr	r3, [pc, #652]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4ba2      	ldr	r3, [pc, #648]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b38:	2180      	movs	r1, #128	; 0x80
 8005b3a:	02c9      	lsls	r1, r1, #11
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	4b9f      	ldr	r3, [pc, #636]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b9e      	ldr	r3, [pc, #632]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b46:	2180      	movs	r1, #128	; 0x80
 8005b48:	0249      	lsls	r1, r1, #9
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e00b      	b.n	8005b68 <HAL_RCC_OscConfig+0xe0>
 8005b50:	4b9b      	ldr	r3, [pc, #620]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4b9a      	ldr	r3, [pc, #616]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b56:	499b      	ldr	r1, [pc, #620]	; (8005dc4 <HAL_RCC_OscConfig+0x33c>)
 8005b58:	400a      	ands	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	4b98      	ldr	r3, [pc, #608]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	4b97      	ldr	r3, [pc, #604]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b62:	4999      	ldr	r1, [pc, #612]	; (8005dc8 <HAL_RCC_OscConfig+0x340>)
 8005b64:	400a      	ands	r2, r1
 8005b66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d014      	beq.n	8005b9a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b70:	f7fd f884 	bl	8002c7c <HAL_GetTick>
 8005b74:	0003      	movs	r3, r0
 8005b76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b7a:	f7fd f87f 	bl	8002c7c <HAL_GetTick>
 8005b7e:	0002      	movs	r2, r0
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b64      	cmp	r3, #100	; 0x64
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e2fd      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8c:	4b8c      	ldr	r3, [pc, #560]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	029b      	lsls	r3, r3, #10
 8005b94:	4013      	ands	r3, r2
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCC_OscConfig+0xf2>
 8005b98:	e015      	b.n	8005bc6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9a:	f7fd f86f 	bl	8002c7c <HAL_GetTick>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba4:	f7fd f86a 	bl	8002c7c <HAL_GetTick>
 8005ba8:	0002      	movs	r2, r0
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b64      	cmp	r3, #100	; 0x64
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e2e8      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bb6:	4b82      	ldr	r3, [pc, #520]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d1f0      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x11c>
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d100      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x14a>
 8005bd0:	e06c      	b.n	8005cac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005bd2:	4b7b      	ldr	r3, [pc, #492]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	220c      	movs	r2, #12
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d00e      	beq.n	8005bfa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005bdc:	4b78      	ldr	r3, [pc, #480]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	220c      	movs	r2, #12
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d11f      	bne.n	8005c28 <HAL_RCC_OscConfig+0x1a0>
 8005be8:	4b75      	ldr	r3, [pc, #468]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	23c0      	movs	r3, #192	; 0xc0
 8005bee:	025b      	lsls	r3, r3, #9
 8005bf0:	401a      	ands	r2, r3
 8005bf2:	2380      	movs	r3, #128	; 0x80
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d116      	bne.n	8005c28 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bfa:	4b71      	ldr	r3, [pc, #452]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	4013      	ands	r3, r2
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_OscConfig+0x188>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d001      	beq.n	8005c10 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e2bb      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c10:	4b6b      	ldr	r3, [pc, #428]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	22f8      	movs	r2, #248	; 0xf8
 8005c16:	4393      	bics	r3, r2
 8005c18:	0019      	movs	r1, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	00da      	lsls	r2, r3, #3
 8005c20:	4b67      	ldr	r3, [pc, #412]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005c22:	430a      	orrs	r2, r1
 8005c24:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c26:	e041      	b.n	8005cac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d024      	beq.n	8005c7a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c30:	4b63      	ldr	r3, [pc, #396]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	4b62      	ldr	r3, [pc, #392]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005c36:	2101      	movs	r1, #1
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3c:	f7fd f81e 	bl	8002c7c <HAL_GetTick>
 8005c40:	0003      	movs	r3, r0
 8005c42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c46:	f7fd f819 	bl	8002c7c <HAL_GetTick>
 8005c4a:	0002      	movs	r2, r0
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e297      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c58:	4b59      	ldr	r3, [pc, #356]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d0f1      	beq.n	8005c46 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c62:	4b57      	ldr	r3, [pc, #348]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	22f8      	movs	r2, #248	; 0xf8
 8005c68:	4393      	bics	r3, r2
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	00da      	lsls	r2, r3, #3
 8005c72:	4b53      	ldr	r3, [pc, #332]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005c74:	430a      	orrs	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	e018      	b.n	8005cac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c7a:	4b51      	ldr	r3, [pc, #324]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b50      	ldr	r3, [pc, #320]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005c80:	2101      	movs	r1, #1
 8005c82:	438a      	bics	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c86:	f7fc fff9 	bl	8002c7c <HAL_GetTick>
 8005c8a:	0003      	movs	r3, r0
 8005c8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c90:	f7fc fff4 	bl	8002c7c <HAL_GetTick>
 8005c94:	0002      	movs	r2, r0
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e272      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ca2:	4b47      	ldr	r3, [pc, #284]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	4013      	ands	r3, r2
 8005caa:	d1f1      	bne.n	8005c90 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2208      	movs	r2, #8
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d036      	beq.n	8005d24 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d019      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cbe:	4b40      	ldr	r3, [pc, #256]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cc2:	4b3f      	ldr	r3, [pc, #252]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cca:	f7fc ffd7 	bl	8002c7c <HAL_GetTick>
 8005cce:	0003      	movs	r3, r0
 8005cd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd4:	f7fc ffd2 	bl	8002c7c <HAL_GetTick>
 8005cd8:	0002      	movs	r2, r0
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e250      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ce6:	4b36      	ldr	r3, [pc, #216]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2202      	movs	r2, #2
 8005cec:	4013      	ands	r3, r2
 8005cee:	d0f1      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x24c>
 8005cf0:	e018      	b.n	8005d24 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cf2:	4b33      	ldr	r3, [pc, #204]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cf6:	4b32      	ldr	r3, [pc, #200]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	438a      	bics	r2, r1
 8005cfc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfe:	f7fc ffbd 	bl	8002c7c <HAL_GetTick>
 8005d02:	0003      	movs	r3, r0
 8005d04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d08:	f7fc ffb8 	bl	8002c7c <HAL_GetTick>
 8005d0c:	0002      	movs	r2, r0
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e236      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d1a:	4b29      	ldr	r3, [pc, #164]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	2202      	movs	r2, #2
 8005d20:	4013      	ands	r3, r2
 8005d22:	d1f1      	bne.n	8005d08 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2204      	movs	r2, #4
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d100      	bne.n	8005d30 <HAL_RCC_OscConfig+0x2a8>
 8005d2e:	e0b5      	b.n	8005e9c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d30:	201f      	movs	r0, #31
 8005d32:	183b      	adds	r3, r7, r0
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d38:	4b21      	ldr	r3, [pc, #132]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	055b      	lsls	r3, r3, #21
 8005d40:	4013      	ands	r3, r2
 8005d42:	d110      	bne.n	8005d66 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d44:	4b1e      	ldr	r3, [pc, #120]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005d46:	69da      	ldr	r2, [r3, #28]
 8005d48:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005d4a:	2180      	movs	r1, #128	; 0x80
 8005d4c:	0549      	lsls	r1, r1, #21
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	61da      	str	r2, [r3, #28]
 8005d52:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005d54:	69da      	ldr	r2, [r3, #28]
 8005d56:	2380      	movs	r3, #128	; 0x80
 8005d58:	055b      	lsls	r3, r3, #21
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d60:	183b      	adds	r3, r7, r0
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d66:	4b19      	ldr	r3, [pc, #100]	; (8005dcc <HAL_RCC_OscConfig+0x344>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	2380      	movs	r3, #128	; 0x80
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d11a      	bne.n	8005da8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d72:	4b16      	ldr	r3, [pc, #88]	; (8005dcc <HAL_RCC_OscConfig+0x344>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <HAL_RCC_OscConfig+0x344>)
 8005d78:	2180      	movs	r1, #128	; 0x80
 8005d7a:	0049      	lsls	r1, r1, #1
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d80:	f7fc ff7c 	bl	8002c7c <HAL_GetTick>
 8005d84:	0003      	movs	r3, r0
 8005d86:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d88:	e008      	b.n	8005d9c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8a:	f7fc ff77 	bl	8002c7c <HAL_GetTick>
 8005d8e:	0002      	movs	r2, r0
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b64      	cmp	r3, #100	; 0x64
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e1f5      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <HAL_RCC_OscConfig+0x344>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	2380      	movs	r3, #128	; 0x80
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4013      	ands	r3, r2
 8005da6:	d0f0      	beq.n	8005d8a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10f      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x348>
 8005db0:	4b03      	ldr	r3, [pc, #12]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	4b02      	ldr	r3, [pc, #8]	; (8005dc0 <HAL_RCC_OscConfig+0x338>)
 8005db6:	2101      	movs	r1, #1
 8005db8:	430a      	orrs	r2, r1
 8005dba:	621a      	str	r2, [r3, #32]
 8005dbc:	e036      	b.n	8005e2c <HAL_RCC_OscConfig+0x3a4>
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	fffeffff 	.word	0xfffeffff
 8005dc8:	fffbffff 	.word	0xfffbffff
 8005dcc:	40007000 	.word	0x40007000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10c      	bne.n	8005df2 <HAL_RCC_OscConfig+0x36a>
 8005dd8:	4bca      	ldr	r3, [pc, #808]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005dda:	6a1a      	ldr	r2, [r3, #32]
 8005ddc:	4bc9      	ldr	r3, [pc, #804]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005dde:	2101      	movs	r1, #1
 8005de0:	438a      	bics	r2, r1
 8005de2:	621a      	str	r2, [r3, #32]
 8005de4:	4bc7      	ldr	r3, [pc, #796]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005de6:	6a1a      	ldr	r2, [r3, #32]
 8005de8:	4bc6      	ldr	r3, [pc, #792]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005dea:	2104      	movs	r1, #4
 8005dec:	438a      	bics	r2, r1
 8005dee:	621a      	str	r2, [r3, #32]
 8005df0:	e01c      	b.n	8005e2c <HAL_RCC_OscConfig+0x3a4>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d10c      	bne.n	8005e14 <HAL_RCC_OscConfig+0x38c>
 8005dfa:	4bc2      	ldr	r3, [pc, #776]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005dfc:	6a1a      	ldr	r2, [r3, #32]
 8005dfe:	4bc1      	ldr	r3, [pc, #772]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005e00:	2104      	movs	r1, #4
 8005e02:	430a      	orrs	r2, r1
 8005e04:	621a      	str	r2, [r3, #32]
 8005e06:	4bbf      	ldr	r3, [pc, #764]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005e08:	6a1a      	ldr	r2, [r3, #32]
 8005e0a:	4bbe      	ldr	r3, [pc, #760]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	621a      	str	r2, [r3, #32]
 8005e12:	e00b      	b.n	8005e2c <HAL_RCC_OscConfig+0x3a4>
 8005e14:	4bbb      	ldr	r3, [pc, #748]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005e16:	6a1a      	ldr	r2, [r3, #32]
 8005e18:	4bba      	ldr	r3, [pc, #744]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	438a      	bics	r2, r1
 8005e1e:	621a      	str	r2, [r3, #32]
 8005e20:	4bb8      	ldr	r3, [pc, #736]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005e22:	6a1a      	ldr	r2, [r3, #32]
 8005e24:	4bb7      	ldr	r3, [pc, #732]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005e26:	2104      	movs	r1, #4
 8005e28:	438a      	bics	r2, r1
 8005e2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d014      	beq.n	8005e5e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e34:	f7fc ff22 	bl	8002c7c <HAL_GetTick>
 8005e38:	0003      	movs	r3, r0
 8005e3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e3c:	e009      	b.n	8005e52 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e3e:	f7fc ff1d 	bl	8002c7c <HAL_GetTick>
 8005e42:	0002      	movs	r2, r0
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	4aaf      	ldr	r2, [pc, #700]	; (8006108 <HAL_RCC_OscConfig+0x680>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e19a      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e52:	4bac      	ldr	r3, [pc, #688]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	2202      	movs	r2, #2
 8005e58:	4013      	ands	r3, r2
 8005e5a:	d0f0      	beq.n	8005e3e <HAL_RCC_OscConfig+0x3b6>
 8005e5c:	e013      	b.n	8005e86 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e5e:	f7fc ff0d 	bl	8002c7c <HAL_GetTick>
 8005e62:	0003      	movs	r3, r0
 8005e64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e66:	e009      	b.n	8005e7c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e68:	f7fc ff08 	bl	8002c7c <HAL_GetTick>
 8005e6c:	0002      	movs	r2, r0
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	4aa5      	ldr	r2, [pc, #660]	; (8006108 <HAL_RCC_OscConfig+0x680>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e185      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e7c:	4ba1      	ldr	r3, [pc, #644]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	2202      	movs	r2, #2
 8005e82:	4013      	ands	r3, r2
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e86:	231f      	movs	r3, #31
 8005e88:	18fb      	adds	r3, r7, r3
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d105      	bne.n	8005e9c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e90:	4b9c      	ldr	r3, [pc, #624]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	4b9b      	ldr	r3, [pc, #620]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005e96:	499d      	ldr	r1, [pc, #628]	; (800610c <HAL_RCC_OscConfig+0x684>)
 8005e98:	400a      	ands	r2, r1
 8005e9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2210      	movs	r2, #16
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	d063      	beq.n	8005f6e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d12a      	bne.n	8005f04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005eae:	4b95      	ldr	r3, [pc, #596]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb2:	4b94      	ldr	r3, [pc, #592]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005eb4:	2104      	movs	r1, #4
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005eba:	4b92      	ldr	r3, [pc, #584]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ebe:	4b91      	ldr	r3, [pc, #580]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ec6:	f7fc fed9 	bl	8002c7c <HAL_GetTick>
 8005eca:	0003      	movs	r3, r0
 8005ecc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005ed0:	f7fc fed4 	bl	8002c7c <HAL_GetTick>
 8005ed4:	0002      	movs	r2, r0
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e152      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005ee2:	4b88      	ldr	r3, [pc, #544]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d0f1      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005eec:	4b85      	ldr	r3, [pc, #532]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef0:	22f8      	movs	r2, #248	; 0xf8
 8005ef2:	4393      	bics	r3, r2
 8005ef4:	0019      	movs	r1, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	00da      	lsls	r2, r3, #3
 8005efc:	4b81      	ldr	r3, [pc, #516]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005efe:	430a      	orrs	r2, r1
 8005f00:	635a      	str	r2, [r3, #52]	; 0x34
 8005f02:	e034      	b.n	8005f6e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	3305      	adds	r3, #5
 8005f0a:	d111      	bne.n	8005f30 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005f0c:	4b7d      	ldr	r3, [pc, #500]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f10:	4b7c      	ldr	r3, [pc, #496]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f12:	2104      	movs	r1, #4
 8005f14:	438a      	bics	r2, r1
 8005f16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005f18:	4b7a      	ldr	r3, [pc, #488]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1c:	22f8      	movs	r2, #248	; 0xf8
 8005f1e:	4393      	bics	r3, r2
 8005f20:	0019      	movs	r1, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	00da      	lsls	r2, r3, #3
 8005f28:	4b76      	ldr	r3, [pc, #472]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8005f2e:	e01e      	b.n	8005f6e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005f30:	4b74      	ldr	r3, [pc, #464]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f34:	4b73      	ldr	r3, [pc, #460]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f36:	2104      	movs	r1, #4
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005f3c:	4b71      	ldr	r3, [pc, #452]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f40:	4b70      	ldr	r3, [pc, #448]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f42:	2101      	movs	r1, #1
 8005f44:	438a      	bics	r2, r1
 8005f46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f48:	f7fc fe98 	bl	8002c7c <HAL_GetTick>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005f52:	f7fc fe93 	bl	8002c7c <HAL_GetTick>
 8005f56:	0002      	movs	r2, r0
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e111      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005f64:	4b67      	ldr	r3, [pc, #412]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f68:	2202      	movs	r2, #2
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d1f1      	bne.n	8005f52 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2220      	movs	r2, #32
 8005f74:	4013      	ands	r3, r2
 8005f76:	d05c      	beq.n	8006032 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005f78:	4b62      	ldr	r3, [pc, #392]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	220c      	movs	r2, #12
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	d00e      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005f84:	4b5f      	ldr	r3, [pc, #380]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	220c      	movs	r2, #12
 8005f8a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d114      	bne.n	8005fba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005f90:	4b5c      	ldr	r3, [pc, #368]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	23c0      	movs	r3, #192	; 0xc0
 8005f96:	025b      	lsls	r3, r3, #9
 8005f98:	401a      	ands	r2, r3
 8005f9a:	23c0      	movs	r3, #192	; 0xc0
 8005f9c:	025b      	lsls	r3, r3, #9
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d10b      	bne.n	8005fba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005fa2:	4b58      	ldr	r3, [pc, #352]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa6:	2380      	movs	r3, #128	; 0x80
 8005fa8:	025b      	lsls	r3, r3, #9
 8005faa:	4013      	ands	r3, r2
 8005fac:	d040      	beq.n	8006030 <HAL_RCC_OscConfig+0x5a8>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d03c      	beq.n	8006030 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e0e6      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d01b      	beq.n	8005ffa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005fc2:	4b50      	ldr	r3, [pc, #320]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc6:	4b4f      	ldr	r3, [pc, #316]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005fc8:	2180      	movs	r1, #128	; 0x80
 8005fca:	0249      	lsls	r1, r1, #9
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd0:	f7fc fe54 	bl	8002c7c <HAL_GetTick>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fda:	f7fc fe4f 	bl	8002c7c <HAL_GetTick>
 8005fde:	0002      	movs	r2, r0
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e0cd      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005fec:	4b45      	ldr	r3, [pc, #276]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff0:	2380      	movs	r3, #128	; 0x80
 8005ff2:	025b      	lsls	r3, r3, #9
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x552>
 8005ff8:	e01b      	b.n	8006032 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005ffa:	4b42      	ldr	r3, [pc, #264]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8005ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ffe:	4b41      	ldr	r3, [pc, #260]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8006000:	4943      	ldr	r1, [pc, #268]	; (8006110 <HAL_RCC_OscConfig+0x688>)
 8006002:	400a      	ands	r2, r1
 8006004:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006006:	f7fc fe39 	bl	8002c7c <HAL_GetTick>
 800600a:	0003      	movs	r3, r0
 800600c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006010:	f7fc fe34 	bl	8002c7c <HAL_GetTick>
 8006014:	0002      	movs	r2, r0
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e0b2      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006022:	4b38      	ldr	r3, [pc, #224]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8006024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	025b      	lsls	r3, r3, #9
 800602a:	4013      	ands	r3, r2
 800602c:	d1f0      	bne.n	8006010 <HAL_RCC_OscConfig+0x588>
 800602e:	e000      	b.n	8006032 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006030:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d100      	bne.n	800603c <HAL_RCC_OscConfig+0x5b4>
 800603a:	e0a4      	b.n	8006186 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800603c:	4b31      	ldr	r3, [pc, #196]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	220c      	movs	r2, #12
 8006042:	4013      	ands	r3, r2
 8006044:	2b08      	cmp	r3, #8
 8006046:	d100      	bne.n	800604a <HAL_RCC_OscConfig+0x5c2>
 8006048:	e078      	b.n	800613c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b02      	cmp	r3, #2
 8006050:	d14c      	bne.n	80060ec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006052:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8006058:	492e      	ldr	r1, [pc, #184]	; (8006114 <HAL_RCC_OscConfig+0x68c>)
 800605a:	400a      	ands	r2, r1
 800605c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605e:	f7fc fe0d 	bl	8002c7c <HAL_GetTick>
 8006062:	0003      	movs	r3, r0
 8006064:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006068:	f7fc fe08 	bl	8002c7c <HAL_GetTick>
 800606c:	0002      	movs	r2, r0
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e086      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800607a:	4b22      	ldr	r3, [pc, #136]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	2380      	movs	r3, #128	; 0x80
 8006080:	049b      	lsls	r3, r3, #18
 8006082:	4013      	ands	r3, r2
 8006084:	d1f0      	bne.n	8006068 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006086:	4b1f      	ldr	r3, [pc, #124]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	220f      	movs	r2, #15
 800608c:	4393      	bics	r3, r2
 800608e:	0019      	movs	r1, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006094:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 8006096:	430a      	orrs	r2, r1
 8006098:	62da      	str	r2, [r3, #44]	; 0x2c
 800609a:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <HAL_RCC_OscConfig+0x690>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	0019      	movs	r1, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	431a      	orrs	r2, r3
 80060ae:	4b15      	ldr	r3, [pc, #84]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 80060b0:	430a      	orrs	r2, r1
 80060b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060b4:	4b13      	ldr	r3, [pc, #76]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b12      	ldr	r3, [pc, #72]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 80060ba:	2180      	movs	r1, #128	; 0x80
 80060bc:	0449      	lsls	r1, r1, #17
 80060be:	430a      	orrs	r2, r1
 80060c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c2:	f7fc fddb 	bl	8002c7c <HAL_GetTick>
 80060c6:	0003      	movs	r3, r0
 80060c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060cc:	f7fc fdd6 	bl	8002c7c <HAL_GetTick>
 80060d0:	0002      	movs	r2, r0
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e054      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060de:	4b09      	ldr	r3, [pc, #36]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	049b      	lsls	r3, r3, #18
 80060e6:	4013      	ands	r3, r2
 80060e8:	d0f0      	beq.n	80060cc <HAL_RCC_OscConfig+0x644>
 80060ea:	e04c      	b.n	8006186 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ec:	4b05      	ldr	r3, [pc, #20]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	4b04      	ldr	r3, [pc, #16]	; (8006104 <HAL_RCC_OscConfig+0x67c>)
 80060f2:	4908      	ldr	r1, [pc, #32]	; (8006114 <HAL_RCC_OscConfig+0x68c>)
 80060f4:	400a      	ands	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f8:	f7fc fdc0 	bl	8002c7c <HAL_GetTick>
 80060fc:	0003      	movs	r3, r0
 80060fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006100:	e015      	b.n	800612e <HAL_RCC_OscConfig+0x6a6>
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	40021000 	.word	0x40021000
 8006108:	00001388 	.word	0x00001388
 800610c:	efffffff 	.word	0xefffffff
 8006110:	fffeffff 	.word	0xfffeffff
 8006114:	feffffff 	.word	0xfeffffff
 8006118:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800611c:	f7fc fdae 	bl	8002c7c <HAL_GetTick>
 8006120:	0002      	movs	r2, r0
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e02c      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800612e:	4b18      	ldr	r3, [pc, #96]	; (8006190 <HAL_RCC_OscConfig+0x708>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	049b      	lsls	r3, r3, #18
 8006136:	4013      	ands	r3, r2
 8006138:	d1f0      	bne.n	800611c <HAL_RCC_OscConfig+0x694>
 800613a:	e024      	b.n	8006186 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e01f      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006148:	4b11      	ldr	r3, [pc, #68]	; (8006190 <HAL_RCC_OscConfig+0x708>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800614e:	4b10      	ldr	r3, [pc, #64]	; (8006190 <HAL_RCC_OscConfig+0x708>)
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	23c0      	movs	r3, #192	; 0xc0
 8006158:	025b      	lsls	r3, r3, #9
 800615a:	401a      	ands	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006160:	429a      	cmp	r2, r3
 8006162:	d10e      	bne.n	8006182 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	220f      	movs	r2, #15
 8006168:	401a      	ands	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800616e:	429a      	cmp	r2, r3
 8006170:	d107      	bne.n	8006182 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	23f0      	movs	r3, #240	; 0xf0
 8006176:	039b      	lsls	r3, r3, #14
 8006178:	401a      	ands	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800617e:	429a      	cmp	r2, r3
 8006180:	d001      	beq.n	8006186 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	0018      	movs	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	b008      	add	sp, #32
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40021000 	.word	0x40021000

08006194 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0bf      	b.n	8006328 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061a8:	4b61      	ldr	r3, [pc, #388]	; (8006330 <HAL_RCC_ClockConfig+0x19c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2201      	movs	r2, #1
 80061ae:	4013      	ands	r3, r2
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d911      	bls.n	80061da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b6:	4b5e      	ldr	r3, [pc, #376]	; (8006330 <HAL_RCC_ClockConfig+0x19c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2201      	movs	r2, #1
 80061bc:	4393      	bics	r3, r2
 80061be:	0019      	movs	r1, r3
 80061c0:	4b5b      	ldr	r3, [pc, #364]	; (8006330 <HAL_RCC_ClockConfig+0x19c>)
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c8:	4b59      	ldr	r3, [pc, #356]	; (8006330 <HAL_RCC_ClockConfig+0x19c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2201      	movs	r2, #1
 80061ce:	4013      	ands	r3, r2
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d001      	beq.n	80061da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e0a6      	b.n	8006328 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2202      	movs	r2, #2
 80061e0:	4013      	ands	r3, r2
 80061e2:	d015      	beq.n	8006210 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2204      	movs	r2, #4
 80061ea:	4013      	ands	r3, r2
 80061ec:	d006      	beq.n	80061fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80061ee:	4b51      	ldr	r3, [pc, #324]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	4b50      	ldr	r3, [pc, #320]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 80061f4:	21e0      	movs	r1, #224	; 0xe0
 80061f6:	00c9      	lsls	r1, r1, #3
 80061f8:	430a      	orrs	r2, r1
 80061fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061fc:	4b4d      	ldr	r3, [pc, #308]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	22f0      	movs	r2, #240	; 0xf0
 8006202:	4393      	bics	r3, r2
 8006204:	0019      	movs	r1, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	4b4a      	ldr	r3, [pc, #296]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2201      	movs	r2, #1
 8006216:	4013      	ands	r3, r2
 8006218:	d04c      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d107      	bne.n	8006232 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006222:	4b44      	ldr	r3, [pc, #272]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	2380      	movs	r3, #128	; 0x80
 8006228:	029b      	lsls	r3, r3, #10
 800622a:	4013      	ands	r3, r2
 800622c:	d120      	bne.n	8006270 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e07a      	b.n	8006328 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d107      	bne.n	800624a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800623a:	4b3e      	ldr	r3, [pc, #248]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	2380      	movs	r3, #128	; 0x80
 8006240:	049b      	lsls	r3, r3, #18
 8006242:	4013      	ands	r3, r2
 8006244:	d114      	bne.n	8006270 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e06e      	b.n	8006328 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b03      	cmp	r3, #3
 8006250:	d107      	bne.n	8006262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006252:	4b38      	ldr	r3, [pc, #224]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 8006254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006256:	2380      	movs	r3, #128	; 0x80
 8006258:	025b      	lsls	r3, r3, #9
 800625a:	4013      	ands	r3, r2
 800625c:	d108      	bne.n	8006270 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e062      	b.n	8006328 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006262:	4b34      	ldr	r3, [pc, #208]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2202      	movs	r2, #2
 8006268:	4013      	ands	r3, r2
 800626a:	d101      	bne.n	8006270 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e05b      	b.n	8006328 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006270:	4b30      	ldr	r3, [pc, #192]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2203      	movs	r2, #3
 8006276:	4393      	bics	r3, r2
 8006278:	0019      	movs	r1, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	4b2d      	ldr	r3, [pc, #180]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 8006280:	430a      	orrs	r2, r1
 8006282:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006284:	f7fc fcfa 	bl	8002c7c <HAL_GetTick>
 8006288:	0003      	movs	r3, r0
 800628a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628c:	e009      	b.n	80062a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800628e:	f7fc fcf5 	bl	8002c7c <HAL_GetTick>
 8006292:	0002      	movs	r2, r0
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	4a27      	ldr	r2, [pc, #156]	; (8006338 <HAL_RCC_ClockConfig+0x1a4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e042      	b.n	8006328 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a2:	4b24      	ldr	r3, [pc, #144]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	220c      	movs	r2, #12
 80062a8:	401a      	ands	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d1ec      	bne.n	800628e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062b4:	4b1e      	ldr	r3, [pc, #120]	; (8006330 <HAL_RCC_ClockConfig+0x19c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2201      	movs	r2, #1
 80062ba:	4013      	ands	r3, r2
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d211      	bcs.n	80062e6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062c2:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <HAL_RCC_ClockConfig+0x19c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2201      	movs	r2, #1
 80062c8:	4393      	bics	r3, r2
 80062ca:	0019      	movs	r1, r3
 80062cc:	4b18      	ldr	r3, [pc, #96]	; (8006330 <HAL_RCC_ClockConfig+0x19c>)
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d4:	4b16      	ldr	r3, [pc, #88]	; (8006330 <HAL_RCC_ClockConfig+0x19c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2201      	movs	r2, #1
 80062da:	4013      	ands	r3, r2
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d001      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e020      	b.n	8006328 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2204      	movs	r2, #4
 80062ec:	4013      	ands	r3, r2
 80062ee:	d009      	beq.n	8006304 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80062f0:	4b10      	ldr	r3, [pc, #64]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4a11      	ldr	r2, [pc, #68]	; (800633c <HAL_RCC_ClockConfig+0x1a8>)
 80062f6:	4013      	ands	r3, r2
 80062f8:	0019      	movs	r1, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 8006300:	430a      	orrs	r2, r1
 8006302:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006304:	f000 f820 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 8006308:	0001      	movs	r1, r0
 800630a:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <HAL_RCC_ClockConfig+0x1a0>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	091b      	lsrs	r3, r3, #4
 8006310:	220f      	movs	r2, #15
 8006312:	4013      	ands	r3, r2
 8006314:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <HAL_RCC_ClockConfig+0x1ac>)
 8006316:	5cd3      	ldrb	r3, [r2, r3]
 8006318:	000a      	movs	r2, r1
 800631a:	40da      	lsrs	r2, r3
 800631c:	4b09      	ldr	r3, [pc, #36]	; (8006344 <HAL_RCC_ClockConfig+0x1b0>)
 800631e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006320:	2003      	movs	r0, #3
 8006322:	f7fc fc65 	bl	8002bf0 <HAL_InitTick>
  
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	0018      	movs	r0, r3
 800632a:	46bd      	mov	sp, r7
 800632c:	b004      	add	sp, #16
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40022000 	.word	0x40022000
 8006334:	40021000 	.word	0x40021000
 8006338:	00001388 	.word	0x00001388
 800633c:	fffff8ff 	.word	0xfffff8ff
 8006340:	0800d98c 	.word	0x0800d98c
 8006344:	20000000 	.word	0x20000000

08006348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006348:	b590      	push	{r4, r7, lr}
 800634a:	b08f      	sub	sp, #60	; 0x3c
 800634c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800634e:	2314      	movs	r3, #20
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	4a38      	ldr	r2, [pc, #224]	; (8006434 <HAL_RCC_GetSysClockFreq+0xec>)
 8006354:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006356:	c313      	stmia	r3!, {r0, r1, r4}
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800635c:	1d3b      	adds	r3, r7, #4
 800635e:	4a36      	ldr	r2, [pc, #216]	; (8006438 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006360:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006362:	c313      	stmia	r3!, {r0, r1, r4}
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800636c:	2300      	movs	r3, #0
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006370:	2300      	movs	r3, #0
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
 8006374:	2300      	movs	r3, #0
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800637c:	4b2f      	ldr	r3, [pc, #188]	; (800643c <HAL_RCC_GetSysClockFreq+0xf4>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	220c      	movs	r2, #12
 8006386:	4013      	ands	r3, r2
 8006388:	2b0c      	cmp	r3, #12
 800638a:	d047      	beq.n	800641c <HAL_RCC_GetSysClockFreq+0xd4>
 800638c:	d849      	bhi.n	8006422 <HAL_RCC_GetSysClockFreq+0xda>
 800638e:	2b04      	cmp	r3, #4
 8006390:	d002      	beq.n	8006398 <HAL_RCC_GetSysClockFreq+0x50>
 8006392:	2b08      	cmp	r3, #8
 8006394:	d003      	beq.n	800639e <HAL_RCC_GetSysClockFreq+0x56>
 8006396:	e044      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006398:	4b29      	ldr	r3, [pc, #164]	; (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 800639a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800639c:	e044      	b.n	8006428 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	0c9b      	lsrs	r3, r3, #18
 80063a2:	220f      	movs	r2, #15
 80063a4:	4013      	ands	r3, r2
 80063a6:	2214      	movs	r2, #20
 80063a8:	18ba      	adds	r2, r7, r2
 80063aa:	5cd3      	ldrb	r3, [r2, r3]
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80063ae:	4b23      	ldr	r3, [pc, #140]	; (800643c <HAL_RCC_GetSysClockFreq+0xf4>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	220f      	movs	r2, #15
 80063b4:	4013      	ands	r3, r2
 80063b6:	1d3a      	adds	r2, r7, #4
 80063b8:	5cd3      	ldrb	r3, [r2, r3]
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80063bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063be:	23c0      	movs	r3, #192	; 0xc0
 80063c0:	025b      	lsls	r3, r3, #9
 80063c2:	401a      	ands	r2, r3
 80063c4:	2380      	movs	r3, #128	; 0x80
 80063c6:	025b      	lsls	r3, r3, #9
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d109      	bne.n	80063e0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80063cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ce:	481c      	ldr	r0, [pc, #112]	; (8006440 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063d0:	f7f9 feac 	bl	800012c <__udivsi3>
 80063d4:	0003      	movs	r3, r0
 80063d6:	001a      	movs	r2, r3
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	4353      	muls	r3, r2
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
 80063de:	e01a      	b.n	8006416 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80063e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e2:	23c0      	movs	r3, #192	; 0xc0
 80063e4:	025b      	lsls	r3, r3, #9
 80063e6:	401a      	ands	r2, r3
 80063e8:	23c0      	movs	r3, #192	; 0xc0
 80063ea:	025b      	lsls	r3, r3, #9
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d109      	bne.n	8006404 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80063f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f2:	4814      	ldr	r0, [pc, #80]	; (8006444 <HAL_RCC_GetSysClockFreq+0xfc>)
 80063f4:	f7f9 fe9a 	bl	800012c <__udivsi3>
 80063f8:	0003      	movs	r3, r0
 80063fa:	001a      	movs	r2, r3
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	4353      	muls	r3, r2
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
 8006402:	e008      	b.n	8006416 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006406:	4810      	ldr	r0, [pc, #64]	; (8006448 <HAL_RCC_GetSysClockFreq+0x100>)
 8006408:	f7f9 fe90 	bl	800012c <__udivsi3>
 800640c:	0003      	movs	r3, r0
 800640e:	001a      	movs	r2, r3
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	4353      	muls	r3, r2
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006418:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800641a:	e005      	b.n	8006428 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800641c:	4b09      	ldr	r3, [pc, #36]	; (8006444 <HAL_RCC_GetSysClockFreq+0xfc>)
 800641e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006420:	e002      	b.n	8006428 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <HAL_RCC_GetSysClockFreq+0x100>)
 8006424:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006426:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800642a:	0018      	movs	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	b00f      	add	sp, #60	; 0x3c
 8006430:	bd90      	pop	{r4, r7, pc}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	0800d8b0 	.word	0x0800d8b0
 8006438:	0800d8c0 	.word	0x0800d8c0
 800643c:	40021000 	.word	0x40021000
 8006440:	00f42400 	.word	0x00f42400
 8006444:	02dc6c00 	.word	0x02dc6c00
 8006448:	007a1200 	.word	0x007a1200

0800644c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006450:	4b02      	ldr	r3, [pc, #8]	; (800645c <HAL_RCC_GetHCLKFreq+0x10>)
 8006452:	681b      	ldr	r3, [r3, #0]
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	20000000 	.word	0x20000000

08006460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006464:	f7ff fff2 	bl	800644c <HAL_RCC_GetHCLKFreq>
 8006468:	0001      	movs	r1, r0
 800646a:	4b06      	ldr	r3, [pc, #24]	; (8006484 <HAL_RCC_GetPCLK1Freq+0x24>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	0a1b      	lsrs	r3, r3, #8
 8006470:	2207      	movs	r2, #7
 8006472:	4013      	ands	r3, r2
 8006474:	4a04      	ldr	r2, [pc, #16]	; (8006488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006476:	5cd3      	ldrb	r3, [r2, r3]
 8006478:	40d9      	lsrs	r1, r3
 800647a:	000b      	movs	r3, r1
}    
 800647c:	0018      	movs	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	40021000 	.word	0x40021000
 8006488:	0800d99c 	.word	0x0800d99c

0800648c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	2380      	movs	r3, #128	; 0x80
 80064a2:	025b      	lsls	r3, r3, #9
 80064a4:	4013      	ands	r3, r2
 80064a6:	d100      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80064a8:	e08e      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80064aa:	2017      	movs	r0, #23
 80064ac:	183b      	adds	r3, r7, r0
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064b2:	4b6e      	ldr	r3, [pc, #440]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064b4:	69da      	ldr	r2, [r3, #28]
 80064b6:	2380      	movs	r3, #128	; 0x80
 80064b8:	055b      	lsls	r3, r3, #21
 80064ba:	4013      	ands	r3, r2
 80064bc:	d110      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064be:	4b6b      	ldr	r3, [pc, #428]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064c0:	69da      	ldr	r2, [r3, #28]
 80064c2:	4b6a      	ldr	r3, [pc, #424]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064c4:	2180      	movs	r1, #128	; 0x80
 80064c6:	0549      	lsls	r1, r1, #21
 80064c8:	430a      	orrs	r2, r1
 80064ca:	61da      	str	r2, [r3, #28]
 80064cc:	4b67      	ldr	r3, [pc, #412]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	055b      	lsls	r3, r3, #21
 80064d4:	4013      	ands	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]
 80064d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064da:	183b      	adds	r3, r7, r0
 80064dc:	2201      	movs	r2, #1
 80064de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e0:	4b63      	ldr	r3, [pc, #396]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	2380      	movs	r3, #128	; 0x80
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	4013      	ands	r3, r2
 80064ea:	d11a      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064ec:	4b60      	ldr	r3, [pc, #384]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	4b5f      	ldr	r3, [pc, #380]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80064f2:	2180      	movs	r1, #128	; 0x80
 80064f4:	0049      	lsls	r1, r1, #1
 80064f6:	430a      	orrs	r2, r1
 80064f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064fa:	f7fc fbbf 	bl	8002c7c <HAL_GetTick>
 80064fe:	0003      	movs	r3, r0
 8006500:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006502:	e008      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006504:	f7fc fbba 	bl	8002c7c <HAL_GetTick>
 8006508:	0002      	movs	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	; 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e0a6      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006516:	4b56      	ldr	r3, [pc, #344]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	2380      	movs	r3, #128	; 0x80
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	4013      	ands	r3, r2
 8006520:	d0f0      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006522:	4b52      	ldr	r3, [pc, #328]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	23c0      	movs	r3, #192	; 0xc0
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4013      	ands	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d034      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	23c0      	movs	r3, #192	; 0xc0
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4013      	ands	r3, r2
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	429a      	cmp	r2, r3
 8006542:	d02c      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006544:	4b49      	ldr	r3, [pc, #292]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	4a4a      	ldr	r2, [pc, #296]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800654a:	4013      	ands	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800654e:	4b47      	ldr	r3, [pc, #284]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006550:	6a1a      	ldr	r2, [r3, #32]
 8006552:	4b46      	ldr	r3, [pc, #280]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006554:	2180      	movs	r1, #128	; 0x80
 8006556:	0249      	lsls	r1, r1, #9
 8006558:	430a      	orrs	r2, r1
 800655a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800655c:	4b43      	ldr	r3, [pc, #268]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800655e:	6a1a      	ldr	r2, [r3, #32]
 8006560:	4b42      	ldr	r3, [pc, #264]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006562:	4945      	ldr	r1, [pc, #276]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006564:	400a      	ands	r2, r1
 8006566:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006568:	4b40      	ldr	r3, [pc, #256]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	4013      	ands	r3, r2
 8006574:	d013      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006576:	f7fc fb81 	bl	8002c7c <HAL_GetTick>
 800657a:	0003      	movs	r3, r0
 800657c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800657e:	e009      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006580:	f7fc fb7c 	bl	8002c7c <HAL_GetTick>
 8006584:	0002      	movs	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	4a3c      	ldr	r2, [pc, #240]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d901      	bls.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e067      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006594:	4b35      	ldr	r3, [pc, #212]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	2202      	movs	r2, #2
 800659a:	4013      	ands	r3, r2
 800659c:	d0f0      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800659e:	4b33      	ldr	r3, [pc, #204]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	4a34      	ldr	r2, [pc, #208]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	0019      	movs	r1, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	4b2f      	ldr	r3, [pc, #188]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065ae:	430a      	orrs	r2, r1
 80065b0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065b2:	2317      	movs	r3, #23
 80065b4:	18fb      	adds	r3, r7, r3
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d105      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065bc:	4b2b      	ldr	r3, [pc, #172]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	4b2a      	ldr	r3, [pc, #168]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065c2:	492f      	ldr	r1, [pc, #188]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80065c4:	400a      	ands	r2, r1
 80065c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2201      	movs	r2, #1
 80065ce:	4013      	ands	r3, r2
 80065d0:	d009      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065d2:	4b26      	ldr	r3, [pc, #152]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	2203      	movs	r2, #3
 80065d8:	4393      	bics	r3, r2
 80065da:	0019      	movs	r1, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	4b22      	ldr	r3, [pc, #136]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065e2:	430a      	orrs	r2, r1
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2202      	movs	r2, #2
 80065ec:	4013      	ands	r3, r2
 80065ee:	d009      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065f0:	4b1e      	ldr	r3, [pc, #120]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	4a23      	ldr	r2, [pc, #140]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	0019      	movs	r1, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	4b1b      	ldr	r3, [pc, #108]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006600:	430a      	orrs	r2, r1
 8006602:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2220      	movs	r2, #32
 800660a:	4013      	ands	r3, r2
 800660c:	d009      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800660e:	4b17      	ldr	r3, [pc, #92]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	2210      	movs	r2, #16
 8006614:	4393      	bics	r3, r2
 8006616:	0019      	movs	r1, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	4b13      	ldr	r3, [pc, #76]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800661e:	430a      	orrs	r2, r1
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	2380      	movs	r3, #128	; 0x80
 8006628:	029b      	lsls	r3, r3, #10
 800662a:	4013      	ands	r3, r2
 800662c:	d009      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800662e:	4b0f      	ldr	r3, [pc, #60]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006632:	2280      	movs	r2, #128	; 0x80
 8006634:	4393      	bics	r3, r2
 8006636:	0019      	movs	r1, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699a      	ldr	r2, [r3, #24]
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800663e:	430a      	orrs	r2, r1
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	2380      	movs	r3, #128	; 0x80
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	4013      	ands	r3, r2
 800664c:	d009      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800664e:	4b07      	ldr	r3, [pc, #28]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	2240      	movs	r2, #64	; 0x40
 8006654:	4393      	bics	r3, r2
 8006656:	0019      	movs	r1, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	4b03      	ldr	r3, [pc, #12]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800665e:	430a      	orrs	r2, r1
 8006660:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	0018      	movs	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	b006      	add	sp, #24
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40021000 	.word	0x40021000
 8006670:	40007000 	.word	0x40007000
 8006674:	fffffcff 	.word	0xfffffcff
 8006678:	fffeffff 	.word	0xfffeffff
 800667c:	00001388 	.word	0x00001388
 8006680:	efffffff 	.word	0xefffffff
 8006684:	fffcffff 	.word	0xfffcffff

08006688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e0a8      	b.n	80067ec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	2382      	movs	r3, #130	; 0x82
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d009      	beq.n	80066c2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	61da      	str	r2, [r3, #28]
 80066b4:	e005      	b.n	80066c2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	225d      	movs	r2, #93	; 0x5d
 80066cc:	5c9b      	ldrb	r3, [r3, r2]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d107      	bne.n	80066e4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	225c      	movs	r2, #92	; 0x5c
 80066d8:	2100      	movs	r1, #0
 80066da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	0018      	movs	r0, r3
 80066e0:	f7fb fe76 	bl	80023d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	225d      	movs	r2, #93	; 0x5d
 80066e8:	2102      	movs	r1, #2
 80066ea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2140      	movs	r1, #64	; 0x40
 80066f8:	438a      	bics	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	23e0      	movs	r3, #224	; 0xe0
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	429a      	cmp	r2, r3
 8006706:	d902      	bls.n	800670e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e002      	b.n	8006714 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800670e:	2380      	movs	r3, #128	; 0x80
 8006710:	015b      	lsls	r3, r3, #5
 8006712:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	23f0      	movs	r3, #240	; 0xf0
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	429a      	cmp	r2, r3
 800671e:	d008      	beq.n	8006732 <HAL_SPI_Init+0xaa>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	23e0      	movs	r3, #224	; 0xe0
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	429a      	cmp	r2, r3
 800672a:	d002      	beq.n	8006732 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	2382      	movs	r3, #130	; 0x82
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	401a      	ands	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6899      	ldr	r1, [r3, #8]
 8006740:	2384      	movs	r3, #132	; 0x84
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	400b      	ands	r3, r1
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2102      	movs	r1, #2
 800674e:	400b      	ands	r3, r1
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	2101      	movs	r1, #1
 8006758:	400b      	ands	r3, r1
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6999      	ldr	r1, [r3, #24]
 8006760:	2380      	movs	r3, #128	; 0x80
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	400b      	ands	r3, r1
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	2138      	movs	r1, #56	; 0x38
 800676e:	400b      	ands	r3, r1
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	2180      	movs	r1, #128	; 0x80
 8006778:	400b      	ands	r3, r1
 800677a:	431a      	orrs	r2, r3
 800677c:	0011      	movs	r1, r2
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006782:	2380      	movs	r3, #128	; 0x80
 8006784:	019b      	lsls	r3, r3, #6
 8006786:	401a      	ands	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	2204      	movs	r2, #4
 8006798:	401a      	ands	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	2110      	movs	r1, #16
 80067a0:	400b      	ands	r3, r1
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a8:	2108      	movs	r1, #8
 80067aa:	400b      	ands	r3, r1
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68d9      	ldr	r1, [r3, #12]
 80067b2:	23f0      	movs	r3, #240	; 0xf0
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	400b      	ands	r3, r1
 80067b8:	431a      	orrs	r2, r3
 80067ba:	0011      	movs	r1, r2
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	2380      	movs	r3, #128	; 0x80
 80067c0:	015b      	lsls	r3, r3, #5
 80067c2:	401a      	ands	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69da      	ldr	r2, [r3, #28]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4907      	ldr	r1, [pc, #28]	; (80067f4 <HAL_SPI_Init+0x16c>)
 80067d8:	400a      	ands	r2, r1
 80067da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	225d      	movs	r2, #93	; 0x5d
 80067e6:	2101      	movs	r1, #1
 80067e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	0018      	movs	r0, r3
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b004      	add	sp, #16
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	fffff7ff 	.word	0xfffff7ff

080067f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	1dbb      	adds	r3, r7, #6
 8006806:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006808:	231f      	movs	r3, #31
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	2200      	movs	r2, #0
 800680e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	225c      	movs	r2, #92	; 0x5c
 8006814:	5c9b      	ldrb	r3, [r3, r2]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <HAL_SPI_Transmit+0x26>
 800681a:	2302      	movs	r3, #2
 800681c:	e140      	b.n	8006aa0 <HAL_SPI_Transmit+0x2a8>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	225c      	movs	r2, #92	; 0x5c
 8006822:	2101      	movs	r1, #1
 8006824:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006826:	f7fc fa29 	bl	8002c7c <HAL_GetTick>
 800682a:	0003      	movs	r3, r0
 800682c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800682e:	2316      	movs	r3, #22
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	1dba      	adds	r2, r7, #6
 8006834:	8812      	ldrh	r2, [r2, #0]
 8006836:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	225d      	movs	r2, #93	; 0x5d
 800683c:	5c9b      	ldrb	r3, [r3, r2]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b01      	cmp	r3, #1
 8006842:	d004      	beq.n	800684e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006844:	231f      	movs	r3, #31
 8006846:	18fb      	adds	r3, r7, r3
 8006848:	2202      	movs	r2, #2
 800684a:	701a      	strb	r2, [r3, #0]
    goto error;
 800684c:	e11d      	b.n	8006a8a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_SPI_Transmit+0x64>
 8006854:	1dbb      	adds	r3, r7, #6
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800685c:	231f      	movs	r3, #31
 800685e:	18fb      	adds	r3, r7, r3
 8006860:	2201      	movs	r2, #1
 8006862:	701a      	strb	r2, [r3, #0]
    goto error;
 8006864:	e111      	b.n	8006a8a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	225d      	movs	r2, #93	; 0x5d
 800686a:	2103      	movs	r1, #3
 800686c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1dba      	adds	r2, r7, #6
 800687e:	8812      	ldrh	r2, [r2, #0]
 8006880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1dba      	adds	r2, r7, #6
 8006886:	8812      	ldrh	r2, [r2, #0]
 8006888:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2244      	movs	r2, #68	; 0x44
 8006894:	2100      	movs	r1, #0
 8006896:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2246      	movs	r2, #70	; 0x46
 800689c:	2100      	movs	r1, #0
 800689e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	2380      	movs	r3, #128	; 0x80
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d110      	bne.n	80068da <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2140      	movs	r1, #64	; 0x40
 80068c4:	438a      	bics	r2, r1
 80068c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2180      	movs	r1, #128	; 0x80
 80068d4:	01c9      	lsls	r1, r1, #7
 80068d6:	430a      	orrs	r2, r1
 80068d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2240      	movs	r2, #64	; 0x40
 80068e2:	4013      	ands	r3, r2
 80068e4:	2b40      	cmp	r3, #64	; 0x40
 80068e6:	d007      	beq.n	80068f8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2140      	movs	r1, #64	; 0x40
 80068f4:	430a      	orrs	r2, r1
 80068f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	23e0      	movs	r3, #224	; 0xe0
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	429a      	cmp	r2, r3
 8006902:	d94e      	bls.n	80069a2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <HAL_SPI_Transmit+0x11e>
 800690c:	2316      	movs	r3, #22
 800690e:	18fb      	adds	r3, r7, r3
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d13f      	bne.n	8006996 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	881a      	ldrh	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	1c9a      	adds	r2, r3, #2
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800693a:	e02c      	b.n	8006996 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	2202      	movs	r2, #2
 8006944:	4013      	ands	r3, r2
 8006946:	2b02      	cmp	r3, #2
 8006948:	d112      	bne.n	8006970 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	881a      	ldrh	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	1c9a      	adds	r2, r3, #2
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800696e:	e012      	b.n	8006996 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006970:	f7fc f984 	bl	8002c7c <HAL_GetTick>
 8006974:	0002      	movs	r2, r0
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d802      	bhi.n	8006986 <HAL_SPI_Transmit+0x18e>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	d102      	bne.n	800698c <HAL_SPI_Transmit+0x194>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800698c:	231f      	movs	r3, #31
 800698e:	18fb      	adds	r3, r7, r3
 8006990:	2203      	movs	r2, #3
 8006992:	701a      	strb	r2, [r3, #0]
          goto error;
 8006994:	e079      	b.n	8006a8a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1cd      	bne.n	800693c <HAL_SPI_Transmit+0x144>
 80069a0:	e04f      	b.n	8006a42 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d004      	beq.n	80069b4 <HAL_SPI_Transmit+0x1bc>
 80069aa:	2316      	movs	r3, #22
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d141      	bne.n	8006a38 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	330c      	adds	r3, #12
 80069be:	7812      	ldrb	r2, [r2, #0]
 80069c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80069da:	e02d      	b.n	8006a38 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2202      	movs	r2, #2
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d113      	bne.n	8006a12 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	7812      	ldrb	r2, [r2, #0]
 80069f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a10:	e012      	b.n	8006a38 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a12:	f7fc f933 	bl	8002c7c <HAL_GetTick>
 8006a16:	0002      	movs	r2, r0
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d802      	bhi.n	8006a28 <HAL_SPI_Transmit+0x230>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	3301      	adds	r3, #1
 8006a26:	d102      	bne.n	8006a2e <HAL_SPI_Transmit+0x236>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006a2e:	231f      	movs	r3, #31
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	2203      	movs	r2, #3
 8006a34:	701a      	strb	r2, [r3, #0]
          goto error;
 8006a36:	e028      	b.n	8006a8a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1cc      	bne.n	80069dc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f000 fb2f 	bl	80070ac <SPI_EndRxTxTransaction>
 8006a4e:	1e03      	subs	r3, r0, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2220      	movs	r2, #32
 8006a56:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a60:	2300      	movs	r3, #0
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	613b      	str	r3, [r7, #16]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006a7e:	231f      	movs	r3, #31
 8006a80:	18fb      	adds	r3, r7, r3
 8006a82:	2201      	movs	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	e000      	b.n	8006a8a <HAL_SPI_Transmit+0x292>
  }

error:
 8006a88:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	225d      	movs	r2, #93	; 0x5d
 8006a8e:	2101      	movs	r1, #1
 8006a90:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	225c      	movs	r2, #92	; 0x5c
 8006a96:	2100      	movs	r1, #0
 8006a98:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006a9a:	231f      	movs	r3, #31
 8006a9c:	18fb      	adds	r3, r7, r3
 8006a9e:	781b      	ldrb	r3, [r3, #0]
}
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	b008      	add	sp, #32
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	; 0x28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	001a      	movs	r2, r3
 8006ab6:	1cbb      	adds	r3, r7, #2
 8006ab8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006aba:	2301      	movs	r3, #1
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006abe:	2323      	movs	r3, #35	; 0x23
 8006ac0:	18fb      	adds	r3, r7, r3
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	225c      	movs	r2, #92	; 0x5c
 8006aca:	5c9b      	ldrb	r3, [r3, r2]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_SPI_TransmitReceive+0x2c>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e1b5      	b.n	8006e40 <HAL_SPI_TransmitReceive+0x398>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	225c      	movs	r2, #92	; 0x5c
 8006ad8:	2101      	movs	r1, #1
 8006ada:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006adc:	f7fc f8ce 	bl	8002c7c <HAL_GetTick>
 8006ae0:	0003      	movs	r3, r0
 8006ae2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ae4:	201b      	movs	r0, #27
 8006ae6:	183b      	adds	r3, r7, r0
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	215d      	movs	r1, #93	; 0x5d
 8006aec:	5c52      	ldrb	r2, [r2, r1]
 8006aee:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006af6:	2312      	movs	r3, #18
 8006af8:	18fb      	adds	r3, r7, r3
 8006afa:	1cba      	adds	r2, r7, #2
 8006afc:	8812      	ldrh	r2, [r2, #0]
 8006afe:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b00:	183b      	adds	r3, r7, r0
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d011      	beq.n	8006b2c <HAL_SPI_TransmitReceive+0x84>
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	2382      	movs	r3, #130	; 0x82
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d107      	bne.n	8006b22 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d103      	bne.n	8006b22 <HAL_SPI_TransmitReceive+0x7a>
 8006b1a:	183b      	adds	r3, r7, r0
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d004      	beq.n	8006b2c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006b22:	2323      	movs	r3, #35	; 0x23
 8006b24:	18fb      	adds	r3, r7, r3
 8006b26:	2202      	movs	r2, #2
 8006b28:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b2a:	e17e      	b.n	8006e2a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d006      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x98>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x98>
 8006b38:	1cbb      	adds	r3, r7, #2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006b40:	2323      	movs	r3, #35	; 0x23
 8006b42:	18fb      	adds	r3, r7, r3
 8006b44:	2201      	movs	r2, #1
 8006b46:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b48:	e16f      	b.n	8006e2a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	225d      	movs	r2, #93	; 0x5d
 8006b4e:	5c9b      	ldrb	r3, [r3, r2]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d003      	beq.n	8006b5e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	225d      	movs	r2, #93	; 0x5d
 8006b5a:	2105      	movs	r1, #5
 8006b5c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1cba      	adds	r2, r7, #2
 8006b6e:	2146      	movs	r1, #70	; 0x46
 8006b70:	8812      	ldrh	r2, [r2, #0]
 8006b72:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	1cba      	adds	r2, r7, #2
 8006b78:	2144      	movs	r1, #68	; 0x44
 8006b7a:	8812      	ldrh	r2, [r2, #0]
 8006b7c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1cba      	adds	r2, r7, #2
 8006b88:	8812      	ldrh	r2, [r2, #0]
 8006b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	1cba      	adds	r2, r7, #2
 8006b90:	8812      	ldrh	r2, [r2, #0]
 8006b92:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	23e0      	movs	r3, #224	; 0xe0
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d908      	bls.n	8006bbe <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	49a4      	ldr	r1, [pc, #656]	; (8006e48 <HAL_SPI_TransmitReceive+0x3a0>)
 8006bb8:	400a      	ands	r2, r1
 8006bba:	605a      	str	r2, [r3, #4]
 8006bbc:	e008      	b.n	8006bd0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2180      	movs	r1, #128	; 0x80
 8006bca:	0149      	lsls	r1, r1, #5
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2240      	movs	r2, #64	; 0x40
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d007      	beq.n	8006bee <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2140      	movs	r1, #64	; 0x40
 8006bea:	430a      	orrs	r2, r1
 8006bec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	23e0      	movs	r3, #224	; 0xe0
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d800      	bhi.n	8006bfc <HAL_SPI_TransmitReceive+0x154>
 8006bfa:	e07f      	b.n	8006cfc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <HAL_SPI_TransmitReceive+0x168>
 8006c04:	2312      	movs	r3, #18
 8006c06:	18fb      	adds	r3, r7, r3
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d000      	beq.n	8006c10 <HAL_SPI_TransmitReceive+0x168>
 8006c0e:	e069      	b.n	8006ce4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	881a      	ldrh	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	1c9a      	adds	r2, r3, #2
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c34:	e056      	b.n	8006ce4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	4013      	ands	r3, r2
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d11b      	bne.n	8006c7c <HAL_SPI_TransmitReceive+0x1d4>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d016      	beq.n	8006c7c <HAL_SPI_TransmitReceive+0x1d4>
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d113      	bne.n	8006c7c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	881a      	ldrh	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	1c9a      	adds	r2, r3, #2
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2201      	movs	r2, #1
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d11c      	bne.n	8006cc4 <HAL_SPI_TransmitReceive+0x21c>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2246      	movs	r2, #70	; 0x46
 8006c8e:	5a9b      	ldrh	r3, [r3, r2]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d016      	beq.n	8006cc4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca0:	b292      	uxth	r2, r2
 8006ca2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	1c9a      	adds	r2, r3, #2
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2246      	movs	r2, #70	; 0x46
 8006cb2:	5a9b      	ldrh	r3, [r3, r2]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b299      	uxth	r1, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2246      	movs	r2, #70	; 0x46
 8006cbe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cc4:	f7fb ffda 	bl	8002c7c <HAL_GetTick>
 8006cc8:	0002      	movs	r2, r0
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d807      	bhi.n	8006ce4 <HAL_SPI_TransmitReceive+0x23c>
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	d004      	beq.n	8006ce4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006cda:	2323      	movs	r3, #35	; 0x23
 8006cdc:	18fb      	adds	r3, r7, r3
 8006cde:	2203      	movs	r2, #3
 8006ce0:	701a      	strb	r2, [r3, #0]
        goto error;
 8006ce2:	e0a2      	b.n	8006e2a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1a3      	bne.n	8006c36 <HAL_SPI_TransmitReceive+0x18e>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2246      	movs	r2, #70	; 0x46
 8006cf2:	5a9b      	ldrh	r3, [r3, r2]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d19d      	bne.n	8006c36 <HAL_SPI_TransmitReceive+0x18e>
 8006cfa:	e085      	b.n	8006e08 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <HAL_SPI_TransmitReceive+0x268>
 8006d04:	2312      	movs	r3, #18
 8006d06:	18fb      	adds	r3, r7, r3
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d000      	beq.n	8006d10 <HAL_SPI_TransmitReceive+0x268>
 8006d0e:	e070      	b.n	8006df2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	330c      	adds	r3, #12
 8006d1a:	7812      	ldrb	r2, [r2, #0]
 8006d1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d36:	e05c      	b.n	8006df2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d11c      	bne.n	8006d80 <HAL_SPI_TransmitReceive+0x2d8>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d017      	beq.n	8006d80 <HAL_SPI_TransmitReceive+0x2d8>
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d114      	bne.n	8006d80 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	330c      	adds	r3, #12
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	2201      	movs	r2, #1
 8006d88:	4013      	ands	r3, r2
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d11e      	bne.n	8006dcc <HAL_SPI_TransmitReceive+0x324>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2246      	movs	r2, #70	; 0x46
 8006d92:	5a9b      	ldrh	r3, [r3, r2]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d018      	beq.n	8006dcc <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	330c      	adds	r3, #12
 8006da0:	001a      	movs	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	7812      	ldrb	r2, [r2, #0]
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2246      	movs	r2, #70	; 0x46
 8006dba:	5a9b      	ldrh	r3, [r3, r2]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b299      	uxth	r1, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2246      	movs	r2, #70	; 0x46
 8006dc6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006dcc:	f7fb ff56 	bl	8002c7c <HAL_GetTick>
 8006dd0:	0002      	movs	r2, r0
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d802      	bhi.n	8006de2 <HAL_SPI_TransmitReceive+0x33a>
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	3301      	adds	r3, #1
 8006de0:	d102      	bne.n	8006de8 <HAL_SPI_TransmitReceive+0x340>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d104      	bne.n	8006df2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006de8:	2323      	movs	r3, #35	; 0x23
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	2203      	movs	r2, #3
 8006dee:	701a      	strb	r2, [r3, #0]
        goto error;
 8006df0:	e01b      	b.n	8006e2a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d19d      	bne.n	8006d38 <HAL_SPI_TransmitReceive+0x290>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2246      	movs	r2, #70	; 0x46
 8006e00:	5a9b      	ldrh	r3, [r3, r2]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d197      	bne.n	8006d38 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f000 f94c 	bl	80070ac <SPI_EndRxTxTransaction>
 8006e14:	1e03      	subs	r3, r0, #0
 8006e16:	d007      	beq.n	8006e28 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006e18:	2323      	movs	r3, #35	; 0x23
 8006e1a:	18fb      	adds	r3, r7, r3
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	661a      	str	r2, [r3, #96]	; 0x60
 8006e26:	e000      	b.n	8006e2a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006e28:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	225d      	movs	r2, #93	; 0x5d
 8006e2e:	2101      	movs	r1, #1
 8006e30:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	225c      	movs	r2, #92	; 0x5c
 8006e36:	2100      	movs	r1, #0
 8006e38:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006e3a:	2323      	movs	r3, #35	; 0x23
 8006e3c:	18fb      	adds	r3, r7, r3
 8006e3e:	781b      	ldrb	r3, [r3, #0]
}
 8006e40:	0018      	movs	r0, r3
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b00a      	add	sp, #40	; 0x28
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	ffffefff 	.word	0xffffefff

08006e4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	1dfb      	adds	r3, r7, #7
 8006e5a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e5c:	f7fb ff0e 	bl	8002c7c <HAL_GetTick>
 8006e60:	0002      	movs	r2, r0
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	18d3      	adds	r3, r2, r3
 8006e6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e6c:	f7fb ff06 	bl	8002c7c <HAL_GetTick>
 8006e70:	0003      	movs	r3, r0
 8006e72:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e74:	4b3a      	ldr	r3, [pc, #232]	; (8006f60 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	015b      	lsls	r3, r3, #5
 8006e7a:	0d1b      	lsrs	r3, r3, #20
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	4353      	muls	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e82:	e058      	b.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	3301      	adds	r3, #1
 8006e88:	d055      	beq.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e8a:	f7fb fef7 	bl	8002c7c <HAL_GetTick>
 8006e8e:	0002      	movs	r2, r0
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d902      	bls.n	8006ea0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d142      	bne.n	8006f26 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	21e0      	movs	r1, #224	; 0xe0
 8006eac:	438a      	bics	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	2382      	movs	r3, #130	; 0x82
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d113      	bne.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	2380      	movs	r3, #128	; 0x80
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d005      	beq.n	8006ed4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	2380      	movs	r3, #128	; 0x80
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d107      	bne.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2140      	movs	r1, #64	; 0x40
 8006ee0:	438a      	bics	r2, r1
 8006ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ee8:	2380      	movs	r3, #128	; 0x80
 8006eea:	019b      	lsls	r3, r3, #6
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d110      	bne.n	8006f12 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	491a      	ldr	r1, [pc, #104]	; (8006f64 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006efc:	400a      	ands	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2180      	movs	r1, #128	; 0x80
 8006f0c:	0189      	lsls	r1, r1, #6
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	225d      	movs	r2, #93	; 0x5d
 8006f16:	2101      	movs	r1, #1
 8006f18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	225c      	movs	r2, #92	; 0x5c
 8006f1e:	2100      	movs	r1, #0
 8006f20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e017      	b.n	8006f56 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	425a      	negs	r2, r3
 8006f46:	4153      	adcs	r3, r2
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	001a      	movs	r2, r3
 8006f4c:	1dfb      	adds	r3, r7, #7
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d197      	bne.n	8006e84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	0018      	movs	r0, r3
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	b008      	add	sp, #32
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	20000000 	.word	0x20000000
 8006f64:	ffffdfff 	.word	0xffffdfff

08006f68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f76:	2317      	movs	r3, #23
 8006f78:	18fb      	adds	r3, r7, r3
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f7e:	f7fb fe7d 	bl	8002c7c <HAL_GetTick>
 8006f82:	0002      	movs	r2, r0
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	1a9b      	subs	r3, r3, r2
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	18d3      	adds	r3, r2, r3
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f8e:	f7fb fe75 	bl	8002c7c <HAL_GetTick>
 8006f92:	0003      	movs	r3, r0
 8006f94:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f9e:	4b41      	ldr	r3, [pc, #260]	; (80070a4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	0013      	movs	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	189b      	adds	r3, r3, r2
 8006fa8:	00da      	lsls	r2, r3, #3
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	0d1b      	lsrs	r3, r3, #20
 8006fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb0:	4353      	muls	r3, r2
 8006fb2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fb4:	e068      	b.n	8007088 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	23c0      	movs	r3, #192	; 0xc0
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d10a      	bne.n	8006fd6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d107      	bne.n	8006fd6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	2117      	movs	r1, #23
 8006fce:	187b      	adds	r3, r7, r1
 8006fd0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006fd2:	187b      	adds	r3, r7, r1
 8006fd4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	d055      	beq.n	8007088 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fdc:	f7fb fe4e 	bl	8002c7c <HAL_GetTick>
 8006fe0:	0002      	movs	r2, r0
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d902      	bls.n	8006ff2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d142      	bne.n	8007078 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	21e0      	movs	r1, #224	; 0xe0
 8006ffe:	438a      	bics	r2, r1
 8007000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	2382      	movs	r3, #130	; 0x82
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	429a      	cmp	r2, r3
 800700c:	d113      	bne.n	8007036 <SPI_WaitFifoStateUntilTimeout+0xce>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	2380      	movs	r3, #128	; 0x80
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	429a      	cmp	r2, r3
 8007018:	d005      	beq.n	8007026 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	2380      	movs	r3, #128	; 0x80
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	429a      	cmp	r2, r3
 8007024:	d107      	bne.n	8007036 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2140      	movs	r1, #64	; 0x40
 8007032:	438a      	bics	r2, r1
 8007034:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800703a:	2380      	movs	r3, #128	; 0x80
 800703c:	019b      	lsls	r3, r3, #6
 800703e:	429a      	cmp	r2, r3
 8007040:	d110      	bne.n	8007064 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4916      	ldr	r1, [pc, #88]	; (80070a8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800704e:	400a      	ands	r2, r1
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2180      	movs	r1, #128	; 0x80
 800705e:	0189      	lsls	r1, r1, #6
 8007060:	430a      	orrs	r2, r1
 8007062:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	225d      	movs	r2, #93	; 0x5d
 8007068:	2101      	movs	r1, #1
 800706a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	225c      	movs	r2, #92	; 0x5c
 8007070:	2100      	movs	r1, #0
 8007072:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e010      	b.n	800709a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	3b01      	subs	r3, #1
 8007086:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	4013      	ands	r3, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	429a      	cmp	r2, r3
 8007096:	d18e      	bne.n	8006fb6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	0018      	movs	r0, r3
 800709c:	46bd      	mov	sp, r7
 800709e:	b00a      	add	sp, #40	; 0x28
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	20000000 	.word	0x20000000
 80070a8:	ffffdfff 	.word	0xffffdfff

080070ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	23c0      	movs	r3, #192	; 0xc0
 80070bc:	0159      	lsls	r1, r3, #5
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	0013      	movs	r3, r2
 80070c6:	2200      	movs	r2, #0
 80070c8:	f7ff ff4e 	bl	8006f68 <SPI_WaitFifoStateUntilTimeout>
 80070cc:	1e03      	subs	r3, r0, #0
 80070ce:	d007      	beq.n	80070e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d4:	2220      	movs	r2, #32
 80070d6:	431a      	orrs	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e027      	b.n	8007130 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	0013      	movs	r3, r2
 80070ea:	2200      	movs	r2, #0
 80070ec:	2180      	movs	r1, #128	; 0x80
 80070ee:	f7ff fead 	bl	8006e4c <SPI_WaitFlagStateUntilTimeout>
 80070f2:	1e03      	subs	r3, r0, #0
 80070f4:	d007      	beq.n	8007106 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fa:	2220      	movs	r2, #32
 80070fc:	431a      	orrs	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e014      	b.n	8007130 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	23c0      	movs	r3, #192	; 0xc0
 800710a:	00d9      	lsls	r1, r3, #3
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	0013      	movs	r3, r2
 8007114:	2200      	movs	r2, #0
 8007116:	f7ff ff27 	bl	8006f68 <SPI_WaitFifoStateUntilTimeout>
 800711a:	1e03      	subs	r3, r0, #0
 800711c:	d007      	beq.n	800712e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007122:	2220      	movs	r2, #32
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e000      	b.n	8007130 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	0018      	movs	r0, r3
 8007132:	46bd      	mov	sp, r7
 8007134:	b004      	add	sp, #16
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e042      	b.n	80071d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	223d      	movs	r2, #61	; 0x3d
 800714e:	5c9b      	ldrb	r3, [r3, r2]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d107      	bne.n	8007166 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	223c      	movs	r2, #60	; 0x3c
 800715a:	2100      	movs	r1, #0
 800715c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	0018      	movs	r0, r3
 8007162:	f7fb f983 	bl	800246c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	223d      	movs	r2, #61	; 0x3d
 800716a:	2102      	movs	r1, #2
 800716c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3304      	adds	r3, #4
 8007176:	0019      	movs	r1, r3
 8007178:	0010      	movs	r0, r2
 800717a:	f000 fa65 	bl	8007648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2246      	movs	r2, #70	; 0x46
 8007182:	2101      	movs	r1, #1
 8007184:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	223e      	movs	r2, #62	; 0x3e
 800718a:	2101      	movs	r1, #1
 800718c:	5499      	strb	r1, [r3, r2]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	223f      	movs	r2, #63	; 0x3f
 8007192:	2101      	movs	r1, #1
 8007194:	5499      	strb	r1, [r3, r2]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2240      	movs	r2, #64	; 0x40
 800719a:	2101      	movs	r1, #1
 800719c:	5499      	strb	r1, [r3, r2]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2241      	movs	r2, #65	; 0x41
 80071a2:	2101      	movs	r1, #1
 80071a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2242      	movs	r2, #66	; 0x42
 80071aa:	2101      	movs	r1, #1
 80071ac:	5499      	strb	r1, [r3, r2]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2243      	movs	r2, #67	; 0x43
 80071b2:	2101      	movs	r1, #1
 80071b4:	5499      	strb	r1, [r3, r2]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2244      	movs	r2, #68	; 0x44
 80071ba:	2101      	movs	r1, #1
 80071bc:	5499      	strb	r1, [r3, r2]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2245      	movs	r2, #69	; 0x45
 80071c2:	2101      	movs	r1, #1
 80071c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	223d      	movs	r2, #61	; 0x3d
 80071ca:	2101      	movs	r1, #1
 80071cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	0018      	movs	r0, r3
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b002      	add	sp, #8
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	223d      	movs	r2, #61	; 0x3d
 80071e4:	5c9b      	ldrb	r3, [r3, r2]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d001      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e03b      	b.n	8007268 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	223d      	movs	r2, #61	; 0x3d
 80071f4:	2102      	movs	r1, #2
 80071f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2101      	movs	r1, #1
 8007204:	430a      	orrs	r2, r1
 8007206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a18      	ldr	r2, [pc, #96]	; (8007270 <HAL_TIM_Base_Start_IT+0x98>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00f      	beq.n	8007232 <HAL_TIM_Base_Start_IT+0x5a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	2380      	movs	r3, #128	; 0x80
 8007218:	05db      	lsls	r3, r3, #23
 800721a:	429a      	cmp	r2, r3
 800721c:	d009      	beq.n	8007232 <HAL_TIM_Base_Start_IT+0x5a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a14      	ldr	r2, [pc, #80]	; (8007274 <HAL_TIM_Base_Start_IT+0x9c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d004      	beq.n	8007232 <HAL_TIM_Base_Start_IT+0x5a>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a12      	ldr	r2, [pc, #72]	; (8007278 <HAL_TIM_Base_Start_IT+0xa0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d111      	bne.n	8007256 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2207      	movs	r2, #7
 800723a:	4013      	ands	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b06      	cmp	r3, #6
 8007242:	d010      	beq.n	8007266 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2101      	movs	r1, #1
 8007250:	430a      	orrs	r2, r1
 8007252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007254:	e007      	b.n	8007266 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2101      	movs	r1, #1
 8007262:	430a      	orrs	r2, r1
 8007264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	0018      	movs	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	b004      	add	sp, #16
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40012c00 	.word	0x40012c00
 8007274:	40000400 	.word	0x40000400
 8007278:	40014000 	.word	0x40014000

0800727c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e042      	b.n	8007314 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	223d      	movs	r2, #61	; 0x3d
 8007292:	5c9b      	ldrb	r3, [r3, r2]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d107      	bne.n	80072aa <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	223c      	movs	r2, #60	; 0x3c
 800729e:	2100      	movs	r1, #0
 80072a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	0018      	movs	r0, r3
 80072a6:	f000 f839 	bl	800731c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	223d      	movs	r2, #61	; 0x3d
 80072ae:	2102      	movs	r1, #2
 80072b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3304      	adds	r3, #4
 80072ba:	0019      	movs	r1, r3
 80072bc:	0010      	movs	r0, r2
 80072be:	f000 f9c3 	bl	8007648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2246      	movs	r2, #70	; 0x46
 80072c6:	2101      	movs	r1, #1
 80072c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	223e      	movs	r2, #62	; 0x3e
 80072ce:	2101      	movs	r1, #1
 80072d0:	5499      	strb	r1, [r3, r2]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	223f      	movs	r2, #63	; 0x3f
 80072d6:	2101      	movs	r1, #1
 80072d8:	5499      	strb	r1, [r3, r2]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2240      	movs	r2, #64	; 0x40
 80072de:	2101      	movs	r1, #1
 80072e0:	5499      	strb	r1, [r3, r2]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2241      	movs	r2, #65	; 0x41
 80072e6:	2101      	movs	r1, #1
 80072e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2242      	movs	r2, #66	; 0x42
 80072ee:	2101      	movs	r1, #1
 80072f0:	5499      	strb	r1, [r3, r2]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2243      	movs	r2, #67	; 0x43
 80072f6:	2101      	movs	r1, #1
 80072f8:	5499      	strb	r1, [r3, r2]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2244      	movs	r2, #68	; 0x44
 80072fe:	2101      	movs	r1, #1
 8007300:	5499      	strb	r1, [r3, r2]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2245      	movs	r2, #69	; 0x45
 8007306:	2101      	movs	r1, #1
 8007308:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	223d      	movs	r2, #61	; 0x3d
 800730e:	2101      	movs	r1, #1
 8007310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	0018      	movs	r0, r3
 8007316:	46bd      	mov	sp, r7
 8007318:	b002      	add	sp, #8
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007324:	46c0      	nop			; (mov r8, r8)
 8007326:	46bd      	mov	sp, r7
 8007328:	b002      	add	sp, #8
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2202      	movs	r2, #2
 800733c:	4013      	ands	r3, r2
 800733e:	2b02      	cmp	r3, #2
 8007340:	d124      	bne.n	800738c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2202      	movs	r2, #2
 800734a:	4013      	ands	r3, r2
 800734c:	2b02      	cmp	r3, #2
 800734e:	d11d      	bne.n	800738c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2203      	movs	r2, #3
 8007356:	4252      	negs	r2, r2
 8007358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	2203      	movs	r2, #3
 8007368:	4013      	ands	r3, r2
 800736a:	d004      	beq.n	8007376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	0018      	movs	r0, r3
 8007370:	f000 f952 	bl	8007618 <HAL_TIM_IC_CaptureCallback>
 8007374:	e007      	b.n	8007386 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	0018      	movs	r0, r3
 800737a:	f000 f945 	bl	8007608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	0018      	movs	r0, r3
 8007382:	f000 f951 	bl	8007628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2204      	movs	r2, #4
 8007394:	4013      	ands	r3, r2
 8007396:	2b04      	cmp	r3, #4
 8007398:	d125      	bne.n	80073e6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	2204      	movs	r2, #4
 80073a2:	4013      	ands	r3, r2
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d11e      	bne.n	80073e6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2205      	movs	r2, #5
 80073ae:	4252      	negs	r2, r2
 80073b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699a      	ldr	r2, [r3, #24]
 80073be:	23c0      	movs	r3, #192	; 0xc0
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4013      	ands	r3, r2
 80073c4:	d004      	beq.n	80073d0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	0018      	movs	r0, r3
 80073ca:	f000 f925 	bl	8007618 <HAL_TIM_IC_CaptureCallback>
 80073ce:	e007      	b.n	80073e0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	0018      	movs	r0, r3
 80073d4:	f000 f918 	bl	8007608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	0018      	movs	r0, r3
 80073dc:	f000 f924 	bl	8007628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	2208      	movs	r2, #8
 80073ee:	4013      	ands	r3, r2
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d124      	bne.n	800743e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2208      	movs	r2, #8
 80073fc:	4013      	ands	r3, r2
 80073fe:	2b08      	cmp	r3, #8
 8007400:	d11d      	bne.n	800743e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2209      	movs	r2, #9
 8007408:	4252      	negs	r2, r2
 800740a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2204      	movs	r2, #4
 8007410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	2203      	movs	r2, #3
 800741a:	4013      	ands	r3, r2
 800741c:	d004      	beq.n	8007428 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	0018      	movs	r0, r3
 8007422:	f000 f8f9 	bl	8007618 <HAL_TIM_IC_CaptureCallback>
 8007426:	e007      	b.n	8007438 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	0018      	movs	r0, r3
 800742c:	f000 f8ec 	bl	8007608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	0018      	movs	r0, r3
 8007434:	f000 f8f8 	bl	8007628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2210      	movs	r2, #16
 8007446:	4013      	ands	r3, r2
 8007448:	2b10      	cmp	r3, #16
 800744a:	d125      	bne.n	8007498 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	2210      	movs	r2, #16
 8007454:	4013      	ands	r3, r2
 8007456:	2b10      	cmp	r3, #16
 8007458:	d11e      	bne.n	8007498 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2211      	movs	r2, #17
 8007460:	4252      	negs	r2, r2
 8007462:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2208      	movs	r2, #8
 8007468:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69da      	ldr	r2, [r3, #28]
 8007470:	23c0      	movs	r3, #192	; 0xc0
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4013      	ands	r3, r2
 8007476:	d004      	beq.n	8007482 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	0018      	movs	r0, r3
 800747c:	f000 f8cc 	bl	8007618 <HAL_TIM_IC_CaptureCallback>
 8007480:	e007      	b.n	8007492 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	0018      	movs	r0, r3
 8007486:	f000 f8bf 	bl	8007608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	0018      	movs	r0, r3
 800748e:	f000 f8cb 	bl	8007628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2201      	movs	r2, #1
 80074a0:	4013      	ands	r3, r2
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d10f      	bne.n	80074c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d108      	bne.n	80074c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2202      	movs	r2, #2
 80074ba:	4252      	negs	r2, r2
 80074bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	0018      	movs	r0, r3
 80074c2:	f7f9 fdf5 	bl	80010b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2280      	movs	r2, #128	; 0x80
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b80      	cmp	r3, #128	; 0x80
 80074d2:	d10f      	bne.n	80074f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	2280      	movs	r2, #128	; 0x80
 80074dc:	4013      	ands	r3, r2
 80074de:	2b80      	cmp	r3, #128	; 0x80
 80074e0:	d108      	bne.n	80074f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2281      	movs	r2, #129	; 0x81
 80074e8:	4252      	negs	r2, r2
 80074ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	0018      	movs	r0, r3
 80074f0:	f000 fb2e 	bl	8007b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	2240      	movs	r2, #64	; 0x40
 80074fc:	4013      	ands	r3, r2
 80074fe:	2b40      	cmp	r3, #64	; 0x40
 8007500:	d10f      	bne.n	8007522 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2240      	movs	r2, #64	; 0x40
 800750a:	4013      	ands	r3, r2
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d108      	bne.n	8007522 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2241      	movs	r2, #65	; 0x41
 8007516:	4252      	negs	r2, r2
 8007518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	0018      	movs	r0, r3
 800751e:	f000 f88b 	bl	8007638 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	2220      	movs	r2, #32
 800752a:	4013      	ands	r3, r2
 800752c:	2b20      	cmp	r3, #32
 800752e:	d10f      	bne.n	8007550 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2220      	movs	r2, #32
 8007538:	4013      	ands	r3, r2
 800753a:	2b20      	cmp	r3, #32
 800753c:	d108      	bne.n	8007550 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2221      	movs	r2, #33	; 0x21
 8007544:	4252      	negs	r2, r2
 8007546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	0018      	movs	r0, r3
 800754c:	f000 faf8 	bl	8007b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007550:	46c0      	nop			; (mov r8, r8)
 8007552:	46bd      	mov	sp, r7
 8007554:	b002      	add	sp, #8
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007564:	2317      	movs	r3, #23
 8007566:	18fb      	adds	r3, r7, r3
 8007568:	2200      	movs	r2, #0
 800756a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	223c      	movs	r2, #60	; 0x3c
 8007570:	5c9b      	ldrb	r3, [r3, r2]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_TIM_OC_ConfigChannel+0x22>
 8007576:	2302      	movs	r3, #2
 8007578:	e042      	b.n	8007600 <HAL_TIM_OC_ConfigChannel+0xa8>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	223c      	movs	r2, #60	; 0x3c
 800757e:	2101      	movs	r1, #1
 8007580:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b0c      	cmp	r3, #12
 8007586:	d027      	beq.n	80075d8 <HAL_TIM_OC_ConfigChannel+0x80>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b0c      	cmp	r3, #12
 800758c:	d82c      	bhi.n	80075e8 <HAL_TIM_OC_ConfigChannel+0x90>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d019      	beq.n	80075c8 <HAL_TIM_OC_ConfigChannel+0x70>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b08      	cmp	r3, #8
 8007598:	d826      	bhi.n	80075e8 <HAL_TIM_OC_ConfigChannel+0x90>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <HAL_TIM_OC_ConfigChannel+0x50>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d008      	beq.n	80075b8 <HAL_TIM_OC_ConfigChannel+0x60>
 80075a6:	e01f      	b.n	80075e8 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	0011      	movs	r1, r2
 80075b0:	0018      	movs	r0, r3
 80075b2:	f000 f8c9 	bl	8007748 <TIM_OC1_SetConfig>
      break;
 80075b6:	e01c      	b.n	80075f2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	0011      	movs	r1, r2
 80075c0:	0018      	movs	r0, r3
 80075c2:	f000 f949 	bl	8007858 <TIM_OC2_SetConfig>
      break;
 80075c6:	e014      	b.n	80075f2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	0011      	movs	r1, r2
 80075d0:	0018      	movs	r0, r3
 80075d2:	f000 f9c5 	bl	8007960 <TIM_OC3_SetConfig>
      break;
 80075d6:	e00c      	b.n	80075f2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	0011      	movs	r1, r2
 80075e0:	0018      	movs	r0, r3
 80075e2:	f000 fa43 	bl	8007a6c <TIM_OC4_SetConfig>
      break;
 80075e6:	e004      	b.n	80075f2 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80075e8:	2317      	movs	r3, #23
 80075ea:	18fb      	adds	r3, r7, r3
 80075ec:	2201      	movs	r2, #1
 80075ee:	701a      	strb	r2, [r3, #0]
      break;
 80075f0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	223c      	movs	r2, #60	; 0x3c
 80075f6:	2100      	movs	r1, #0
 80075f8:	5499      	strb	r1, [r3, r2]

  return status;
 80075fa:	2317      	movs	r3, #23
 80075fc:	18fb      	adds	r3, r7, r3
 80075fe:	781b      	ldrb	r3, [r3, #0]
}
 8007600:	0018      	movs	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	b006      	add	sp, #24
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007610:	46c0      	nop			; (mov r8, r8)
 8007612:	46bd      	mov	sp, r7
 8007614:	b002      	add	sp, #8
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007620:	46c0      	nop			; (mov r8, r8)
 8007622:	46bd      	mov	sp, r7
 8007624:	b002      	add	sp, #8
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007630:	46c0      	nop			; (mov r8, r8)
 8007632:	46bd      	mov	sp, r7
 8007634:	b002      	add	sp, #8
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007640:	46c0      	nop			; (mov r8, r8)
 8007642:	46bd      	mov	sp, r7
 8007644:	b002      	add	sp, #8
 8007646:	bd80      	pop	{r7, pc}

08007648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a34      	ldr	r2, [pc, #208]	; (800772c <TIM_Base_SetConfig+0xe4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d008      	beq.n	8007672 <TIM_Base_SetConfig+0x2a>
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	2380      	movs	r3, #128	; 0x80
 8007664:	05db      	lsls	r3, r3, #23
 8007666:	429a      	cmp	r2, r3
 8007668:	d003      	beq.n	8007672 <TIM_Base_SetConfig+0x2a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a30      	ldr	r2, [pc, #192]	; (8007730 <TIM_Base_SetConfig+0xe8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d108      	bne.n	8007684 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2270      	movs	r2, #112	; 0x70
 8007676:	4393      	bics	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a29      	ldr	r2, [pc, #164]	; (800772c <TIM_Base_SetConfig+0xe4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d018      	beq.n	80076be <TIM_Base_SetConfig+0x76>
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	2380      	movs	r3, #128	; 0x80
 8007690:	05db      	lsls	r3, r3, #23
 8007692:	429a      	cmp	r2, r3
 8007694:	d013      	beq.n	80076be <TIM_Base_SetConfig+0x76>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a25      	ldr	r2, [pc, #148]	; (8007730 <TIM_Base_SetConfig+0xe8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00f      	beq.n	80076be <TIM_Base_SetConfig+0x76>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a24      	ldr	r2, [pc, #144]	; (8007734 <TIM_Base_SetConfig+0xec>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00b      	beq.n	80076be <TIM_Base_SetConfig+0x76>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a23      	ldr	r2, [pc, #140]	; (8007738 <TIM_Base_SetConfig+0xf0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d007      	beq.n	80076be <TIM_Base_SetConfig+0x76>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a22      	ldr	r2, [pc, #136]	; (800773c <TIM_Base_SetConfig+0xf4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d003      	beq.n	80076be <TIM_Base_SetConfig+0x76>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a21      	ldr	r2, [pc, #132]	; (8007740 <TIM_Base_SetConfig+0xf8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d108      	bne.n	80076d0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4a20      	ldr	r2, [pc, #128]	; (8007744 <TIM_Base_SetConfig+0xfc>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2280      	movs	r2, #128	; 0x80
 80076d4:	4393      	bics	r3, r2
 80076d6:	001a      	movs	r2, r3
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a0c      	ldr	r2, [pc, #48]	; (800772c <TIM_Base_SetConfig+0xe4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00b      	beq.n	8007716 <TIM_Base_SetConfig+0xce>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a0d      	ldr	r2, [pc, #52]	; (8007738 <TIM_Base_SetConfig+0xf0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d007      	beq.n	8007716 <TIM_Base_SetConfig+0xce>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a0c      	ldr	r2, [pc, #48]	; (800773c <TIM_Base_SetConfig+0xf4>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d003      	beq.n	8007716 <TIM_Base_SetConfig+0xce>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a0b      	ldr	r2, [pc, #44]	; (8007740 <TIM_Base_SetConfig+0xf8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d103      	bne.n	800771e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	691a      	ldr	r2, [r3, #16]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	615a      	str	r2, [r3, #20]
}
 8007724:	46c0      	nop			; (mov r8, r8)
 8007726:	46bd      	mov	sp, r7
 8007728:	b004      	add	sp, #16
 800772a:	bd80      	pop	{r7, pc}
 800772c:	40012c00 	.word	0x40012c00
 8007730:	40000400 	.word	0x40000400
 8007734:	40002000 	.word	0x40002000
 8007738:	40014000 	.word	0x40014000
 800773c:	40014400 	.word	0x40014400
 8007740:	40014800 	.word	0x40014800
 8007744:	fffffcff 	.word	0xfffffcff

08007748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	2201      	movs	r2, #1
 8007758:	4393      	bics	r3, r2
 800775a:	001a      	movs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2270      	movs	r2, #112	; 0x70
 8007776:	4393      	bics	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2203      	movs	r2, #3
 800777e:	4393      	bics	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2202      	movs	r2, #2
 8007790:	4393      	bics	r3, r2
 8007792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a27      	ldr	r2, [pc, #156]	; (8007840 <TIM_OC1_SetConfig+0xf8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00b      	beq.n	80077be <TIM_OC1_SetConfig+0x76>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a26      	ldr	r2, [pc, #152]	; (8007844 <TIM_OC1_SetConfig+0xfc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d007      	beq.n	80077be <TIM_OC1_SetConfig+0x76>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a25      	ldr	r2, [pc, #148]	; (8007848 <TIM_OC1_SetConfig+0x100>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d003      	beq.n	80077be <TIM_OC1_SetConfig+0x76>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a24      	ldr	r2, [pc, #144]	; (800784c <TIM_OC1_SetConfig+0x104>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d10c      	bne.n	80077d8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2208      	movs	r2, #8
 80077c2:	4393      	bics	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2204      	movs	r2, #4
 80077d4:	4393      	bics	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a19      	ldr	r2, [pc, #100]	; (8007840 <TIM_OC1_SetConfig+0xf8>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00b      	beq.n	80077f8 <TIM_OC1_SetConfig+0xb0>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a18      	ldr	r2, [pc, #96]	; (8007844 <TIM_OC1_SetConfig+0xfc>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d007      	beq.n	80077f8 <TIM_OC1_SetConfig+0xb0>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a17      	ldr	r2, [pc, #92]	; (8007848 <TIM_OC1_SetConfig+0x100>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_OC1_SetConfig+0xb0>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a16      	ldr	r2, [pc, #88]	; (800784c <TIM_OC1_SetConfig+0x104>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d111      	bne.n	800781c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4a15      	ldr	r2, [pc, #84]	; (8007850 <TIM_OC1_SetConfig+0x108>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	4a14      	ldr	r2, [pc, #80]	; (8007854 <TIM_OC1_SetConfig+0x10c>)
 8007804:	4013      	ands	r3, r2
 8007806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	4313      	orrs	r3, r2
 8007810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	4313      	orrs	r3, r2
 800781a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	621a      	str	r2, [r3, #32]
}
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	46bd      	mov	sp, r7
 800783a:	b006      	add	sp, #24
 800783c:	bd80      	pop	{r7, pc}
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	40012c00 	.word	0x40012c00
 8007844:	40014000 	.word	0x40014000
 8007848:	40014400 	.word	0x40014400
 800784c:	40014800 	.word	0x40014800
 8007850:	fffffeff 	.word	0xfffffeff
 8007854:	fffffdff 	.word	0xfffffdff

08007858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	2210      	movs	r2, #16
 8007868:	4393      	bics	r3, r2
 800786a:	001a      	movs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4a2e      	ldr	r2, [pc, #184]	; (8007940 <TIM_OC2_SetConfig+0xe8>)
 8007886:	4013      	ands	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4a2d      	ldr	r2, [pc, #180]	; (8007944 <TIM_OC2_SetConfig+0xec>)
 800788e:	4013      	ands	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	4313      	orrs	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2220      	movs	r2, #32
 80078a2:	4393      	bics	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a24      	ldr	r2, [pc, #144]	; (8007948 <TIM_OC2_SetConfig+0xf0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d10d      	bne.n	80078d6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2280      	movs	r2, #128	; 0x80
 80078be:	4393      	bics	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2240      	movs	r2, #64	; 0x40
 80078d2:	4393      	bics	r3, r2
 80078d4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a1b      	ldr	r2, [pc, #108]	; (8007948 <TIM_OC2_SetConfig+0xf0>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00b      	beq.n	80078f6 <TIM_OC2_SetConfig+0x9e>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a1a      	ldr	r2, [pc, #104]	; (800794c <TIM_OC2_SetConfig+0xf4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d007      	beq.n	80078f6 <TIM_OC2_SetConfig+0x9e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a19      	ldr	r2, [pc, #100]	; (8007950 <TIM_OC2_SetConfig+0xf8>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d003      	beq.n	80078f6 <TIM_OC2_SetConfig+0x9e>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a18      	ldr	r2, [pc, #96]	; (8007954 <TIM_OC2_SetConfig+0xfc>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d113      	bne.n	800791e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	4a17      	ldr	r2, [pc, #92]	; (8007958 <TIM_OC2_SetConfig+0x100>)
 80078fa:	4013      	ands	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	4a16      	ldr	r2, [pc, #88]	; (800795c <TIM_OC2_SetConfig+0x104>)
 8007902:	4013      	ands	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	4313      	orrs	r3, r2
 8007910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	621a      	str	r2, [r3, #32]
}
 8007938:	46c0      	nop			; (mov r8, r8)
 800793a:	46bd      	mov	sp, r7
 800793c:	b006      	add	sp, #24
 800793e:	bd80      	pop	{r7, pc}
 8007940:	ffff8fff 	.word	0xffff8fff
 8007944:	fffffcff 	.word	0xfffffcff
 8007948:	40012c00 	.word	0x40012c00
 800794c:	40014000 	.word	0x40014000
 8007950:	40014400 	.word	0x40014400
 8007954:	40014800 	.word	0x40014800
 8007958:	fffffbff 	.word	0xfffffbff
 800795c:	fffff7ff 	.word	0xfffff7ff

08007960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	4a35      	ldr	r2, [pc, #212]	; (8007a44 <TIM_OC3_SetConfig+0xe4>)
 8007970:	401a      	ands	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2270      	movs	r2, #112	; 0x70
 800798c:	4393      	bics	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2203      	movs	r2, #3
 8007994:	4393      	bics	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	4a28      	ldr	r2, [pc, #160]	; (8007a48 <TIM_OC3_SetConfig+0xe8>)
 80079a6:	4013      	ands	r3, r2
 80079a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	021b      	lsls	r3, r3, #8
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a24      	ldr	r2, [pc, #144]	; (8007a4c <TIM_OC3_SetConfig+0xec>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d10d      	bne.n	80079da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	4a23      	ldr	r2, [pc, #140]	; (8007a50 <TIM_OC3_SetConfig+0xf0>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	021b      	lsls	r3, r3, #8
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	4a1f      	ldr	r2, [pc, #124]	; (8007a54 <TIM_OC3_SetConfig+0xf4>)
 80079d6:	4013      	ands	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a1b      	ldr	r2, [pc, #108]	; (8007a4c <TIM_OC3_SetConfig+0xec>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00b      	beq.n	80079fa <TIM_OC3_SetConfig+0x9a>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a1c      	ldr	r2, [pc, #112]	; (8007a58 <TIM_OC3_SetConfig+0xf8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d007      	beq.n	80079fa <TIM_OC3_SetConfig+0x9a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a1b      	ldr	r2, [pc, #108]	; (8007a5c <TIM_OC3_SetConfig+0xfc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d003      	beq.n	80079fa <TIM_OC3_SetConfig+0x9a>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a1a      	ldr	r2, [pc, #104]	; (8007a60 <TIM_OC3_SetConfig+0x100>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d113      	bne.n	8007a22 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	4a19      	ldr	r2, [pc, #100]	; (8007a64 <TIM_OC3_SetConfig+0x104>)
 80079fe:	4013      	ands	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4a18      	ldr	r2, [pc, #96]	; (8007a68 <TIM_OC3_SetConfig+0x108>)
 8007a06:	4013      	ands	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	621a      	str	r2, [r3, #32]
}
 8007a3c:	46c0      	nop			; (mov r8, r8)
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b006      	add	sp, #24
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	fffffeff 	.word	0xfffffeff
 8007a48:	fffffdff 	.word	0xfffffdff
 8007a4c:	40012c00 	.word	0x40012c00
 8007a50:	fffff7ff 	.word	0xfffff7ff
 8007a54:	fffffbff 	.word	0xfffffbff
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40014400 	.word	0x40014400
 8007a60:	40014800 	.word	0x40014800
 8007a64:	ffffefff 	.word	0xffffefff
 8007a68:	ffffdfff 	.word	0xffffdfff

08007a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	4a28      	ldr	r2, [pc, #160]	; (8007b1c <TIM_OC4_SetConfig+0xb0>)
 8007a7c:	401a      	ands	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4a22      	ldr	r2, [pc, #136]	; (8007b20 <TIM_OC4_SetConfig+0xb4>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4a21      	ldr	r2, [pc, #132]	; (8007b24 <TIM_OC4_SetConfig+0xb8>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	021b      	lsls	r3, r3, #8
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	4a1d      	ldr	r2, [pc, #116]	; (8007b28 <TIM_OC4_SetConfig+0xbc>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	031b      	lsls	r3, r3, #12
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a19      	ldr	r2, [pc, #100]	; (8007b2c <TIM_OC4_SetConfig+0xc0>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00b      	beq.n	8007ae4 <TIM_OC4_SetConfig+0x78>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a18      	ldr	r2, [pc, #96]	; (8007b30 <TIM_OC4_SetConfig+0xc4>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d007      	beq.n	8007ae4 <TIM_OC4_SetConfig+0x78>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a17      	ldr	r2, [pc, #92]	; (8007b34 <TIM_OC4_SetConfig+0xc8>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_OC4_SetConfig+0x78>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a16      	ldr	r2, [pc, #88]	; (8007b38 <TIM_OC4_SetConfig+0xcc>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d109      	bne.n	8007af8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	4a15      	ldr	r2, [pc, #84]	; (8007b3c <TIM_OC4_SetConfig+0xd0>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	019b      	lsls	r3, r3, #6
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	621a      	str	r2, [r3, #32]
}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b006      	add	sp, #24
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	ffffefff 	.word	0xffffefff
 8007b20:	ffff8fff 	.word	0xffff8fff
 8007b24:	fffffcff 	.word	0xfffffcff
 8007b28:	ffffdfff 	.word	0xffffdfff
 8007b2c:	40012c00 	.word	0x40012c00
 8007b30:	40014000 	.word	0x40014000
 8007b34:	40014400 	.word	0x40014400
 8007b38:	40014800 	.word	0x40014800
 8007b3c:	ffffbfff 	.word	0xffffbfff

08007b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b48:	46c0      	nop			; (mov r8, r8)
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b002      	add	sp, #8
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b58:	46c0      	nop			; (mov r8, r8)
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b002      	add	sp, #8
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e044      	b.n	8007bfc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d107      	bne.n	8007b8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2274      	movs	r2, #116	; 0x74
 8007b7e:	2100      	movs	r1, #0
 8007b80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	0018      	movs	r0, r3
 8007b86:	f7fa fc99 	bl	80024bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2224      	movs	r2, #36	; 0x24
 8007b8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	438a      	bics	r2, r1
 8007b9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f000 fb24 	bl	80081f0 <UART_SetConfig>
 8007ba8:	0003      	movs	r3, r0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d101      	bne.n	8007bb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e024      	b.n	8007bfc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	f000 fc9f 	bl	8008500 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	490d      	ldr	r1, [pc, #52]	; (8007c04 <HAL_UART_Init+0xa4>)
 8007bce:	400a      	ands	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	212a      	movs	r1, #42	; 0x2a
 8007bde:	438a      	bics	r2, r1
 8007be0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2101      	movs	r1, #1
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	f000 fd37 	bl	8008668 <UART_CheckIdleState>
 8007bfa:	0003      	movs	r3, r0
}
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	b002      	add	sp, #8
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	ffffb7ff 	.word	0xffffb7ff

08007c08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c08:	b590      	push	{r4, r7, lr}
 8007c0a:	b0ab      	sub	sp, #172	; 0xac
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	22a4      	movs	r2, #164	; 0xa4
 8007c18:	18b9      	adds	r1, r7, r2
 8007c1a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	20a0      	movs	r0, #160	; 0xa0
 8007c24:	1839      	adds	r1, r7, r0
 8007c26:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	219c      	movs	r1, #156	; 0x9c
 8007c30:	1879      	adds	r1, r7, r1
 8007c32:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c34:	0011      	movs	r1, r2
 8007c36:	18bb      	adds	r3, r7, r2
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a99      	ldr	r2, [pc, #612]	; (8007ea0 <HAL_UART_IRQHandler+0x298>)
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	2298      	movs	r2, #152	; 0x98
 8007c40:	18bc      	adds	r4, r7, r2
 8007c42:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007c44:	18bb      	adds	r3, r7, r2
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d114      	bne.n	8007c76 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c4c:	187b      	adds	r3, r7, r1
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2220      	movs	r2, #32
 8007c52:	4013      	ands	r3, r2
 8007c54:	d00f      	beq.n	8007c76 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c56:	183b      	adds	r3, r7, r0
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	d00a      	beq.n	8007c76 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d100      	bne.n	8007c6a <HAL_UART_IRQHandler+0x62>
 8007c68:	e296      	b.n	8008198 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	0010      	movs	r0, r2
 8007c72:	4798      	blx	r3
      }
      return;
 8007c74:	e290      	b.n	8008198 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c76:	2398      	movs	r3, #152	; 0x98
 8007c78:	18fb      	adds	r3, r7, r3
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d100      	bne.n	8007c82 <HAL_UART_IRQHandler+0x7a>
 8007c80:	e114      	b.n	8007eac <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007c82:	239c      	movs	r3, #156	; 0x9c
 8007c84:	18fb      	adds	r3, r7, r3
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	d106      	bne.n	8007c9c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007c8e:	23a0      	movs	r3, #160	; 0xa0
 8007c90:	18fb      	adds	r3, r7, r3
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a83      	ldr	r2, [pc, #524]	; (8007ea4 <HAL_UART_IRQHandler+0x29c>)
 8007c96:	4013      	ands	r3, r2
 8007c98:	d100      	bne.n	8007c9c <HAL_UART_IRQHandler+0x94>
 8007c9a:	e107      	b.n	8007eac <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c9c:	23a4      	movs	r3, #164	; 0xa4
 8007c9e:	18fb      	adds	r3, r7, r3
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	d012      	beq.n	8007cce <HAL_UART_IRQHandler+0xc6>
 8007ca8:	23a0      	movs	r3, #160	; 0xa0
 8007caa:	18fb      	adds	r3, r7, r3
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	2380      	movs	r3, #128	; 0x80
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	d00b      	beq.n	8007cce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2280      	movs	r2, #128	; 0x80
 8007cc2:	589b      	ldr	r3, [r3, r2]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2180      	movs	r1, #128	; 0x80
 8007ccc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cce:	23a4      	movs	r3, #164	; 0xa4
 8007cd0:	18fb      	adds	r3, r7, r3
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	d011      	beq.n	8007cfe <HAL_UART_IRQHandler+0xf6>
 8007cda:	239c      	movs	r3, #156	; 0x9c
 8007cdc:	18fb      	adds	r3, r7, r3
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	d00b      	beq.n	8007cfe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2202      	movs	r2, #2
 8007cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2280      	movs	r2, #128	; 0x80
 8007cf2:	589b      	ldr	r3, [r3, r2]
 8007cf4:	2204      	movs	r2, #4
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2180      	movs	r1, #128	; 0x80
 8007cfc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cfe:	23a4      	movs	r3, #164	; 0xa4
 8007d00:	18fb      	adds	r3, r7, r3
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2204      	movs	r2, #4
 8007d06:	4013      	ands	r3, r2
 8007d08:	d011      	beq.n	8007d2e <HAL_UART_IRQHandler+0x126>
 8007d0a:	239c      	movs	r3, #156	; 0x9c
 8007d0c:	18fb      	adds	r3, r7, r3
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2201      	movs	r2, #1
 8007d12:	4013      	ands	r3, r2
 8007d14:	d00b      	beq.n	8007d2e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2204      	movs	r2, #4
 8007d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2280      	movs	r2, #128	; 0x80
 8007d22:	589b      	ldr	r3, [r3, r2]
 8007d24:	2202      	movs	r2, #2
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2180      	movs	r1, #128	; 0x80
 8007d2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d2e:	23a4      	movs	r3, #164	; 0xa4
 8007d30:	18fb      	adds	r3, r7, r3
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2208      	movs	r2, #8
 8007d36:	4013      	ands	r3, r2
 8007d38:	d017      	beq.n	8007d6a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d3a:	23a0      	movs	r3, #160	; 0xa0
 8007d3c:	18fb      	adds	r3, r7, r3
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2220      	movs	r2, #32
 8007d42:	4013      	ands	r3, r2
 8007d44:	d105      	bne.n	8007d52 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007d46:	239c      	movs	r3, #156	; 0x9c
 8007d48:	18fb      	adds	r3, r7, r3
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d50:	d00b      	beq.n	8007d6a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2208      	movs	r2, #8
 8007d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2280      	movs	r2, #128	; 0x80
 8007d5e:	589b      	ldr	r3, [r3, r2]
 8007d60:	2208      	movs	r2, #8
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2180      	movs	r1, #128	; 0x80
 8007d68:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d6a:	23a4      	movs	r3, #164	; 0xa4
 8007d6c:	18fb      	adds	r3, r7, r3
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	2380      	movs	r3, #128	; 0x80
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	4013      	ands	r3, r2
 8007d76:	d013      	beq.n	8007da0 <HAL_UART_IRQHandler+0x198>
 8007d78:	23a0      	movs	r3, #160	; 0xa0
 8007d7a:	18fb      	adds	r3, r7, r3
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	2380      	movs	r3, #128	; 0x80
 8007d80:	04db      	lsls	r3, r3, #19
 8007d82:	4013      	ands	r3, r2
 8007d84:	d00c      	beq.n	8007da0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2280      	movs	r2, #128	; 0x80
 8007d8c:	0112      	lsls	r2, r2, #4
 8007d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2280      	movs	r2, #128	; 0x80
 8007d94:	589b      	ldr	r3, [r3, r2]
 8007d96:	2220      	movs	r2, #32
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2180      	movs	r1, #128	; 0x80
 8007d9e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2280      	movs	r2, #128	; 0x80
 8007da4:	589b      	ldr	r3, [r3, r2]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d100      	bne.n	8007dac <HAL_UART_IRQHandler+0x1a4>
 8007daa:	e1f7      	b.n	800819c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007dac:	23a4      	movs	r3, #164	; 0xa4
 8007dae:	18fb      	adds	r3, r7, r3
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2220      	movs	r2, #32
 8007db4:	4013      	ands	r3, r2
 8007db6:	d00e      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007db8:	23a0      	movs	r3, #160	; 0xa0
 8007dba:	18fb      	adds	r3, r7, r3
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	d008      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	0010      	movs	r0, r2
 8007dd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2280      	movs	r2, #128	; 0x80
 8007dda:	589b      	ldr	r3, [r3, r2]
 8007ddc:	2194      	movs	r1, #148	; 0x94
 8007dde:	187a      	adds	r2, r7, r1
 8007de0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	2240      	movs	r2, #64	; 0x40
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b40      	cmp	r3, #64	; 0x40
 8007dee:	d004      	beq.n	8007dfa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007df0:	187b      	adds	r3, r7, r1
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2228      	movs	r2, #40	; 0x28
 8007df6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007df8:	d047      	beq.n	8007e8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f000 fd3f 	bl	8008880 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2240      	movs	r2, #64	; 0x40
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b40      	cmp	r3, #64	; 0x40
 8007e0e:	d137      	bne.n	8007e80 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e10:	f3ef 8310 	mrs	r3, PRIMASK
 8007e14:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e18:	2090      	movs	r0, #144	; 0x90
 8007e1a:	183a      	adds	r2, r7, r0
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	2301      	movs	r3, #1
 8007e20:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e24:	f383 8810 	msr	PRIMASK, r3
}
 8007e28:	46c0      	nop			; (mov r8, r8)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2140      	movs	r1, #64	; 0x40
 8007e36:	438a      	bics	r2, r1
 8007e38:	609a      	str	r2, [r3, #8]
 8007e3a:	183b      	adds	r3, r7, r0
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e42:	f383 8810 	msr	PRIMASK, r3
}
 8007e46:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d012      	beq.n	8007e76 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e54:	4a14      	ldr	r2, [pc, #80]	; (8007ea8 <HAL_UART_IRQHandler+0x2a0>)
 8007e56:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f7fb fd71 	bl	8003944 <HAL_DMA_Abort_IT>
 8007e62:	1e03      	subs	r3, r0, #0
 8007e64:	d01a      	beq.n	8007e9c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e70:	0018      	movs	r0, r3
 8007e72:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e74:	e012      	b.n	8007e9c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	0018      	movs	r0, r3
 8007e7a:	f000 f9a5 	bl	80081c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7e:	e00d      	b.n	8007e9c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	0018      	movs	r0, r3
 8007e84:	f000 f9a0 	bl	80081c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e88:	e008      	b.n	8007e9c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	f000 f99b 	bl	80081c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2280      	movs	r2, #128	; 0x80
 8007e96:	2100      	movs	r1, #0
 8007e98:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007e9a:	e17f      	b.n	800819c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9c:	46c0      	nop			; (mov r8, r8)
    return;
 8007e9e:	e17d      	b.n	800819c <HAL_UART_IRQHandler+0x594>
 8007ea0:	0000080f 	.word	0x0000080f
 8007ea4:	04000120 	.word	0x04000120
 8007ea8:	08008945 	.word	0x08008945

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d000      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x2ae>
 8007eb4:	e131      	b.n	800811a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007eb6:	23a4      	movs	r3, #164	; 0xa4
 8007eb8:	18fb      	adds	r3, r7, r3
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2210      	movs	r2, #16
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	d100      	bne.n	8007ec4 <HAL_UART_IRQHandler+0x2bc>
 8007ec2:	e12a      	b.n	800811a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ec4:	23a0      	movs	r3, #160	; 0xa0
 8007ec6:	18fb      	adds	r3, r7, r3
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2210      	movs	r2, #16
 8007ecc:	4013      	ands	r3, r2
 8007ece:	d100      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x2ca>
 8007ed0:	e123      	b.n	800811a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2210      	movs	r2, #16
 8007ed8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	2240      	movs	r2, #64	; 0x40
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	d000      	beq.n	8007eea <HAL_UART_IRQHandler+0x2e2>
 8007ee8:	e09b      	b.n	8008022 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	217e      	movs	r1, #126	; 0x7e
 8007ef4:	187b      	adds	r3, r7, r1
 8007ef6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007ef8:	187b      	adds	r3, r7, r1
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d100      	bne.n	8007f02 <HAL_UART_IRQHandler+0x2fa>
 8007f00:	e14e      	b.n	80081a0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2258      	movs	r2, #88	; 0x58
 8007f06:	5a9b      	ldrh	r3, [r3, r2]
 8007f08:	187a      	adds	r2, r7, r1
 8007f0a:	8812      	ldrh	r2, [r2, #0]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d300      	bcc.n	8007f12 <HAL_UART_IRQHandler+0x30a>
 8007f10:	e146      	b.n	80081a0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	187a      	adds	r2, r7, r1
 8007f16:	215a      	movs	r1, #90	; 0x5a
 8007f18:	8812      	ldrh	r2, [r2, #0]
 8007f1a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	2b20      	cmp	r3, #32
 8007f24:	d06e      	beq.n	8008004 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f26:	f3ef 8310 	mrs	r3, PRIMASK
 8007f2a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f30:	2301      	movs	r3, #1
 8007f32:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f36:	f383 8810 	msr	PRIMASK, r3
}
 8007f3a:	46c0      	nop			; (mov r8, r8)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	499a      	ldr	r1, [pc, #616]	; (80081b0 <HAL_UART_IRQHandler+0x5a8>)
 8007f48:	400a      	ands	r2, r1
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	f383 8810 	msr	PRIMASK, r3
}
 8007f56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f58:	f3ef 8310 	mrs	r3, PRIMASK
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f60:	677b      	str	r3, [r7, #116]	; 0x74
 8007f62:	2301      	movs	r3, #1
 8007f64:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f68:	f383 8810 	msr	PRIMASK, r3
}
 8007f6c:	46c0      	nop			; (mov r8, r8)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2101      	movs	r1, #1
 8007f7a:	438a      	bics	r2, r1
 8007f7c:	609a      	str	r2, [r3, #8]
 8007f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f80:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f84:	f383 8810 	msr	PRIMASK, r3
}
 8007f88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f92:	673b      	str	r3, [r7, #112]	; 0x70
 8007f94:	2301      	movs	r3, #1
 8007f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f9a:	f383 8810 	msr	PRIMASK, r3
}
 8007f9e:	46c0      	nop			; (mov r8, r8)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2140      	movs	r1, #64	; 0x40
 8007fac:	438a      	bics	r2, r1
 8007fae:	609a      	str	r2, [r3, #8]
 8007fb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fb2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fb6:	f383 8810 	msr	PRIMASK, r3
}
 8007fba:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fcc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fd8:	f383 8810 	msr	PRIMASK, r3
}
 8007fdc:	46c0      	nop			; (mov r8, r8)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2110      	movs	r1, #16
 8007fea:	438a      	bics	r2, r1
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ff4:	f383 8810 	msr	PRIMASK, r3
}
 8007ff8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffe:	0018      	movs	r0, r3
 8008000:	f7fb fc68 	bl	80038d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2258      	movs	r2, #88	; 0x58
 8008008:	5a9a      	ldrh	r2, [r3, r2]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	215a      	movs	r1, #90	; 0x5a
 800800e:	5a5b      	ldrh	r3, [r3, r1]
 8008010:	b29b      	uxth	r3, r3
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	b29a      	uxth	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	0011      	movs	r1, r2
 800801a:	0018      	movs	r0, r3
 800801c:	f000 f8dc 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008020:	e0be      	b.n	80081a0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2258      	movs	r2, #88	; 0x58
 8008026:	5a99      	ldrh	r1, [r3, r2]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	225a      	movs	r2, #90	; 0x5a
 800802c:	5a9b      	ldrh	r3, [r3, r2]
 800802e:	b29a      	uxth	r2, r3
 8008030:	208e      	movs	r0, #142	; 0x8e
 8008032:	183b      	adds	r3, r7, r0
 8008034:	1a8a      	subs	r2, r1, r2
 8008036:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	225a      	movs	r2, #90	; 0x5a
 800803c:	5a9b      	ldrh	r3, [r3, r2]
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d100      	bne.n	8008046 <HAL_UART_IRQHandler+0x43e>
 8008044:	e0ae      	b.n	80081a4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8008046:	183b      	adds	r3, r7, r0
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d100      	bne.n	8008050 <HAL_UART_IRQHandler+0x448>
 800804e:	e0a9      	b.n	80081a4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008050:	f3ef 8310 	mrs	r3, PRIMASK
 8008054:	60fb      	str	r3, [r7, #12]
  return(result);
 8008056:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008058:	2488      	movs	r4, #136	; 0x88
 800805a:	193a      	adds	r2, r7, r4
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	2301      	movs	r3, #1
 8008060:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f383 8810 	msr	PRIMASK, r3
}
 8008068:	46c0      	nop			; (mov r8, r8)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	494f      	ldr	r1, [pc, #316]	; (80081b4 <HAL_UART_IRQHandler+0x5ac>)
 8008076:	400a      	ands	r2, r1
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	193b      	adds	r3, r7, r4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f383 8810 	msr	PRIMASK, r3
}
 8008086:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008088:	f3ef 8310 	mrs	r3, PRIMASK
 800808c:	61bb      	str	r3, [r7, #24]
  return(result);
 800808e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008090:	2484      	movs	r4, #132	; 0x84
 8008092:	193a      	adds	r2, r7, r4
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	2301      	movs	r3, #1
 8008098:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	f383 8810 	msr	PRIMASK, r3
}
 80080a0:	46c0      	nop			; (mov r8, r8)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2101      	movs	r1, #1
 80080ae:	438a      	bics	r2, r1
 80080b0:	609a      	str	r2, [r3, #8]
 80080b2:	193b      	adds	r3, r7, r4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	f383 8810 	msr	PRIMASK, r3
}
 80080be:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080d2:	f3ef 8310 	mrs	r3, PRIMASK
 80080d6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080da:	2480      	movs	r4, #128	; 0x80
 80080dc:	193a      	adds	r2, r7, r4
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	2301      	movs	r3, #1
 80080e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	f383 8810 	msr	PRIMASK, r3
}
 80080ea:	46c0      	nop			; (mov r8, r8)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2110      	movs	r1, #16
 80080f8:	438a      	bics	r2, r1
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	193b      	adds	r3, r7, r4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	f383 8810 	msr	PRIMASK, r3
}
 8008108:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800810a:	183b      	adds	r3, r7, r0
 800810c:	881a      	ldrh	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	0011      	movs	r1, r2
 8008112:	0018      	movs	r0, r3
 8008114:	f000 f860 	bl	80081d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008118:	e044      	b.n	80081a4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800811a:	23a4      	movs	r3, #164	; 0xa4
 800811c:	18fb      	adds	r3, r7, r3
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	2380      	movs	r3, #128	; 0x80
 8008122:	035b      	lsls	r3, r3, #13
 8008124:	4013      	ands	r3, r2
 8008126:	d010      	beq.n	800814a <HAL_UART_IRQHandler+0x542>
 8008128:	239c      	movs	r3, #156	; 0x9c
 800812a:	18fb      	adds	r3, r7, r3
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	2380      	movs	r3, #128	; 0x80
 8008130:	03db      	lsls	r3, r3, #15
 8008132:	4013      	ands	r3, r2
 8008134:	d009      	beq.n	800814a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2280      	movs	r2, #128	; 0x80
 800813c:	0352      	lsls	r2, r2, #13
 800813e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	0018      	movs	r0, r3
 8008144:	f000 fc40 	bl	80089c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008148:	e02f      	b.n	80081aa <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800814a:	23a4      	movs	r3, #164	; 0xa4
 800814c:	18fb      	adds	r3, r7, r3
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2280      	movs	r2, #128	; 0x80
 8008152:	4013      	ands	r3, r2
 8008154:	d00f      	beq.n	8008176 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008156:	23a0      	movs	r3, #160	; 0xa0
 8008158:	18fb      	adds	r3, r7, r3
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2280      	movs	r2, #128	; 0x80
 800815e:	4013      	ands	r3, r2
 8008160:	d009      	beq.n	8008176 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008166:	2b00      	cmp	r3, #0
 8008168:	d01e      	beq.n	80081a8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	0010      	movs	r0, r2
 8008172:	4798      	blx	r3
    }
    return;
 8008174:	e018      	b.n	80081a8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008176:	23a4      	movs	r3, #164	; 0xa4
 8008178:	18fb      	adds	r3, r7, r3
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2240      	movs	r2, #64	; 0x40
 800817e:	4013      	ands	r3, r2
 8008180:	d013      	beq.n	80081aa <HAL_UART_IRQHandler+0x5a2>
 8008182:	23a0      	movs	r3, #160	; 0xa0
 8008184:	18fb      	adds	r3, r7, r3
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2240      	movs	r2, #64	; 0x40
 800818a:	4013      	ands	r3, r2
 800818c:	d00d      	beq.n	80081aa <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	0018      	movs	r0, r3
 8008192:	f000 fbee 	bl	8008972 <UART_EndTransmit_IT>
    return;
 8008196:	e008      	b.n	80081aa <HAL_UART_IRQHandler+0x5a2>
      return;
 8008198:	46c0      	nop			; (mov r8, r8)
 800819a:	e006      	b.n	80081aa <HAL_UART_IRQHandler+0x5a2>
    return;
 800819c:	46c0      	nop			; (mov r8, r8)
 800819e:	e004      	b.n	80081aa <HAL_UART_IRQHandler+0x5a2>
      return;
 80081a0:	46c0      	nop			; (mov r8, r8)
 80081a2:	e002      	b.n	80081aa <HAL_UART_IRQHandler+0x5a2>
      return;
 80081a4:	46c0      	nop			; (mov r8, r8)
 80081a6:	e000      	b.n	80081aa <HAL_UART_IRQHandler+0x5a2>
    return;
 80081a8:	46c0      	nop			; (mov r8, r8)
  }

}
 80081aa:	46bd      	mov	sp, r7
 80081ac:	b02b      	add	sp, #172	; 0xac
 80081ae:	bd90      	pop	{r4, r7, pc}
 80081b0:	fffffeff 	.word	0xfffffeff
 80081b4:	fffffedf 	.word	0xfffffedf

080081b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081c0:	46c0      	nop			; (mov r8, r8)
 80081c2:	46bd      	mov	sp, r7
 80081c4:	b002      	add	sp, #8
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081d0:	46c0      	nop			; (mov r8, r8)
 80081d2:	46bd      	mov	sp, r7
 80081d4:	b002      	add	sp, #8
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	000a      	movs	r2, r1
 80081e2:	1cbb      	adds	r3, r7, #2
 80081e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	46bd      	mov	sp, r7
 80081ea:	b002      	add	sp, #8
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081f8:	231e      	movs	r3, #30
 80081fa:	18fb      	adds	r3, r7, r3
 80081fc:	2200      	movs	r2, #0
 80081fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	431a      	orrs	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	4313      	orrs	r3, r2
 8008216:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4aaf      	ldr	r2, [pc, #700]	; (80084dc <UART_SetConfig+0x2ec>)
 8008220:	4013      	ands	r3, r2
 8008222:	0019      	movs	r1, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	430a      	orrs	r2, r1
 800822c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	4aaa      	ldr	r2, [pc, #680]	; (80084e0 <UART_SetConfig+0x2f0>)
 8008236:	4013      	ands	r3, r2
 8008238:	0019      	movs	r1, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	4aa1      	ldr	r2, [pc, #644]	; (80084e4 <UART_SetConfig+0x2f4>)
 800825e:	4013      	ands	r3, r2
 8008260:	0019      	movs	r1, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	430a      	orrs	r2, r1
 800826a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a9d      	ldr	r2, [pc, #628]	; (80084e8 <UART_SetConfig+0x2f8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d127      	bne.n	80082c6 <UART_SetConfig+0xd6>
 8008276:	4b9d      	ldr	r3, [pc, #628]	; (80084ec <UART_SetConfig+0x2fc>)
 8008278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827a:	2203      	movs	r2, #3
 800827c:	4013      	ands	r3, r2
 800827e:	2b03      	cmp	r3, #3
 8008280:	d00d      	beq.n	800829e <UART_SetConfig+0xae>
 8008282:	d81b      	bhi.n	80082bc <UART_SetConfig+0xcc>
 8008284:	2b02      	cmp	r3, #2
 8008286:	d014      	beq.n	80082b2 <UART_SetConfig+0xc2>
 8008288:	d818      	bhi.n	80082bc <UART_SetConfig+0xcc>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <UART_SetConfig+0xa4>
 800828e:	2b01      	cmp	r3, #1
 8008290:	d00a      	beq.n	80082a8 <UART_SetConfig+0xb8>
 8008292:	e013      	b.n	80082bc <UART_SetConfig+0xcc>
 8008294:	231f      	movs	r3, #31
 8008296:	18fb      	adds	r3, r7, r3
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	e065      	b.n	800836a <UART_SetConfig+0x17a>
 800829e:	231f      	movs	r3, #31
 80082a0:	18fb      	adds	r3, r7, r3
 80082a2:	2202      	movs	r2, #2
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	e060      	b.n	800836a <UART_SetConfig+0x17a>
 80082a8:	231f      	movs	r3, #31
 80082aa:	18fb      	adds	r3, r7, r3
 80082ac:	2204      	movs	r2, #4
 80082ae:	701a      	strb	r2, [r3, #0]
 80082b0:	e05b      	b.n	800836a <UART_SetConfig+0x17a>
 80082b2:	231f      	movs	r3, #31
 80082b4:	18fb      	adds	r3, r7, r3
 80082b6:	2208      	movs	r2, #8
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	e056      	b.n	800836a <UART_SetConfig+0x17a>
 80082bc:	231f      	movs	r3, #31
 80082be:	18fb      	adds	r3, r7, r3
 80082c0:	2210      	movs	r2, #16
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	e051      	b.n	800836a <UART_SetConfig+0x17a>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a89      	ldr	r2, [pc, #548]	; (80084f0 <UART_SetConfig+0x300>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d134      	bne.n	800833a <UART_SetConfig+0x14a>
 80082d0:	4b86      	ldr	r3, [pc, #536]	; (80084ec <UART_SetConfig+0x2fc>)
 80082d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082d4:	23c0      	movs	r3, #192	; 0xc0
 80082d6:	029b      	lsls	r3, r3, #10
 80082d8:	4013      	ands	r3, r2
 80082da:	22c0      	movs	r2, #192	; 0xc0
 80082dc:	0292      	lsls	r2, r2, #10
 80082de:	4293      	cmp	r3, r2
 80082e0:	d017      	beq.n	8008312 <UART_SetConfig+0x122>
 80082e2:	22c0      	movs	r2, #192	; 0xc0
 80082e4:	0292      	lsls	r2, r2, #10
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d822      	bhi.n	8008330 <UART_SetConfig+0x140>
 80082ea:	2280      	movs	r2, #128	; 0x80
 80082ec:	0292      	lsls	r2, r2, #10
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d019      	beq.n	8008326 <UART_SetConfig+0x136>
 80082f2:	2280      	movs	r2, #128	; 0x80
 80082f4:	0292      	lsls	r2, r2, #10
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d81a      	bhi.n	8008330 <UART_SetConfig+0x140>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <UART_SetConfig+0x118>
 80082fe:	2280      	movs	r2, #128	; 0x80
 8008300:	0252      	lsls	r2, r2, #9
 8008302:	4293      	cmp	r3, r2
 8008304:	d00a      	beq.n	800831c <UART_SetConfig+0x12c>
 8008306:	e013      	b.n	8008330 <UART_SetConfig+0x140>
 8008308:	231f      	movs	r3, #31
 800830a:	18fb      	adds	r3, r7, r3
 800830c:	2200      	movs	r2, #0
 800830e:	701a      	strb	r2, [r3, #0]
 8008310:	e02b      	b.n	800836a <UART_SetConfig+0x17a>
 8008312:	231f      	movs	r3, #31
 8008314:	18fb      	adds	r3, r7, r3
 8008316:	2202      	movs	r2, #2
 8008318:	701a      	strb	r2, [r3, #0]
 800831a:	e026      	b.n	800836a <UART_SetConfig+0x17a>
 800831c:	231f      	movs	r3, #31
 800831e:	18fb      	adds	r3, r7, r3
 8008320:	2204      	movs	r2, #4
 8008322:	701a      	strb	r2, [r3, #0]
 8008324:	e021      	b.n	800836a <UART_SetConfig+0x17a>
 8008326:	231f      	movs	r3, #31
 8008328:	18fb      	adds	r3, r7, r3
 800832a:	2208      	movs	r2, #8
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	e01c      	b.n	800836a <UART_SetConfig+0x17a>
 8008330:	231f      	movs	r3, #31
 8008332:	18fb      	adds	r3, r7, r3
 8008334:	2210      	movs	r2, #16
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	e017      	b.n	800836a <UART_SetConfig+0x17a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a6d      	ldr	r2, [pc, #436]	; (80084f4 <UART_SetConfig+0x304>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d104      	bne.n	800834e <UART_SetConfig+0x15e>
 8008344:	231f      	movs	r3, #31
 8008346:	18fb      	adds	r3, r7, r3
 8008348:	2200      	movs	r2, #0
 800834a:	701a      	strb	r2, [r3, #0]
 800834c:	e00d      	b.n	800836a <UART_SetConfig+0x17a>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a69      	ldr	r2, [pc, #420]	; (80084f8 <UART_SetConfig+0x308>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d104      	bne.n	8008362 <UART_SetConfig+0x172>
 8008358:	231f      	movs	r3, #31
 800835a:	18fb      	adds	r3, r7, r3
 800835c:	2200      	movs	r2, #0
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e003      	b.n	800836a <UART_SetConfig+0x17a>
 8008362:	231f      	movs	r3, #31
 8008364:	18fb      	adds	r3, r7, r3
 8008366:	2210      	movs	r2, #16
 8008368:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	69da      	ldr	r2, [r3, #28]
 800836e:	2380      	movs	r3, #128	; 0x80
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	429a      	cmp	r2, r3
 8008374:	d15d      	bne.n	8008432 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8008376:	231f      	movs	r3, #31
 8008378:	18fb      	adds	r3, r7, r3
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b08      	cmp	r3, #8
 800837e:	d015      	beq.n	80083ac <UART_SetConfig+0x1bc>
 8008380:	dc18      	bgt.n	80083b4 <UART_SetConfig+0x1c4>
 8008382:	2b04      	cmp	r3, #4
 8008384:	d00d      	beq.n	80083a2 <UART_SetConfig+0x1b2>
 8008386:	dc15      	bgt.n	80083b4 <UART_SetConfig+0x1c4>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <UART_SetConfig+0x1a2>
 800838c:	2b02      	cmp	r3, #2
 800838e:	d005      	beq.n	800839c <UART_SetConfig+0x1ac>
 8008390:	e010      	b.n	80083b4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008392:	f7fe f865 	bl	8006460 <HAL_RCC_GetPCLK1Freq>
 8008396:	0003      	movs	r3, r0
 8008398:	61bb      	str	r3, [r7, #24]
        break;
 800839a:	e012      	b.n	80083c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800839c:	4b57      	ldr	r3, [pc, #348]	; (80084fc <UART_SetConfig+0x30c>)
 800839e:	61bb      	str	r3, [r7, #24]
        break;
 80083a0:	e00f      	b.n	80083c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083a2:	f7fd ffd1 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 80083a6:	0003      	movs	r3, r0
 80083a8:	61bb      	str	r3, [r7, #24]
        break;
 80083aa:	e00a      	b.n	80083c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ac:	2380      	movs	r3, #128	; 0x80
 80083ae:	021b      	lsls	r3, r3, #8
 80083b0:	61bb      	str	r3, [r7, #24]
        break;
 80083b2:	e006      	b.n	80083c2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083b8:	231e      	movs	r3, #30
 80083ba:	18fb      	adds	r3, r7, r3
 80083bc:	2201      	movs	r2, #1
 80083be:	701a      	strb	r2, [r3, #0]
        break;
 80083c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d100      	bne.n	80083ca <UART_SetConfig+0x1da>
 80083c8:	e07b      	b.n	80084c2 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	005a      	lsls	r2, r3, #1
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	085b      	lsrs	r3, r3, #1
 80083d4:	18d2      	adds	r2, r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	0019      	movs	r1, r3
 80083dc:	0010      	movs	r0, r2
 80083de:	f7f7 fea5 	bl	800012c <__udivsi3>
 80083e2:	0003      	movs	r3, r0
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	2b0f      	cmp	r3, #15
 80083ec:	d91c      	bls.n	8008428 <UART_SetConfig+0x238>
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	2380      	movs	r3, #128	; 0x80
 80083f2:	025b      	lsls	r3, r3, #9
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d217      	bcs.n	8008428 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	200e      	movs	r0, #14
 80083fe:	183b      	adds	r3, r7, r0
 8008400:	210f      	movs	r1, #15
 8008402:	438a      	bics	r2, r1
 8008404:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	085b      	lsrs	r3, r3, #1
 800840a:	b29b      	uxth	r3, r3
 800840c:	2207      	movs	r2, #7
 800840e:	4013      	ands	r3, r2
 8008410:	b299      	uxth	r1, r3
 8008412:	183b      	adds	r3, r7, r0
 8008414:	183a      	adds	r2, r7, r0
 8008416:	8812      	ldrh	r2, [r2, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	183a      	adds	r2, r7, r0
 8008422:	8812      	ldrh	r2, [r2, #0]
 8008424:	60da      	str	r2, [r3, #12]
 8008426:	e04c      	b.n	80084c2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008428:	231e      	movs	r3, #30
 800842a:	18fb      	adds	r3, r7, r3
 800842c:	2201      	movs	r2, #1
 800842e:	701a      	strb	r2, [r3, #0]
 8008430:	e047      	b.n	80084c2 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008432:	231f      	movs	r3, #31
 8008434:	18fb      	adds	r3, r7, r3
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2b08      	cmp	r3, #8
 800843a:	d015      	beq.n	8008468 <UART_SetConfig+0x278>
 800843c:	dc18      	bgt.n	8008470 <UART_SetConfig+0x280>
 800843e:	2b04      	cmp	r3, #4
 8008440:	d00d      	beq.n	800845e <UART_SetConfig+0x26e>
 8008442:	dc15      	bgt.n	8008470 <UART_SetConfig+0x280>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <UART_SetConfig+0x25e>
 8008448:	2b02      	cmp	r3, #2
 800844a:	d005      	beq.n	8008458 <UART_SetConfig+0x268>
 800844c:	e010      	b.n	8008470 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800844e:	f7fe f807 	bl	8006460 <HAL_RCC_GetPCLK1Freq>
 8008452:	0003      	movs	r3, r0
 8008454:	61bb      	str	r3, [r7, #24]
        break;
 8008456:	e012      	b.n	800847e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008458:	4b28      	ldr	r3, [pc, #160]	; (80084fc <UART_SetConfig+0x30c>)
 800845a:	61bb      	str	r3, [r7, #24]
        break;
 800845c:	e00f      	b.n	800847e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800845e:	f7fd ff73 	bl	8006348 <HAL_RCC_GetSysClockFreq>
 8008462:	0003      	movs	r3, r0
 8008464:	61bb      	str	r3, [r7, #24]
        break;
 8008466:	e00a      	b.n	800847e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008468:	2380      	movs	r3, #128	; 0x80
 800846a:	021b      	lsls	r3, r3, #8
 800846c:	61bb      	str	r3, [r7, #24]
        break;
 800846e:	e006      	b.n	800847e <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008474:	231e      	movs	r3, #30
 8008476:	18fb      	adds	r3, r7, r3
 8008478:	2201      	movs	r2, #1
 800847a:	701a      	strb	r2, [r3, #0]
        break;
 800847c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01e      	beq.n	80084c2 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	085a      	lsrs	r2, r3, #1
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	18d2      	adds	r2, r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	0019      	movs	r1, r3
 8008494:	0010      	movs	r0, r2
 8008496:	f7f7 fe49 	bl	800012c <__udivsi3>
 800849a:	0003      	movs	r3, r0
 800849c:	b29b      	uxth	r3, r3
 800849e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	2b0f      	cmp	r3, #15
 80084a4:	d909      	bls.n	80084ba <UART_SetConfig+0x2ca>
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	2380      	movs	r3, #128	; 0x80
 80084aa:	025b      	lsls	r3, r3, #9
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d204      	bcs.n	80084ba <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	60da      	str	r2, [r3, #12]
 80084b8:	e003      	b.n	80084c2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80084ba:	231e      	movs	r3, #30
 80084bc:	18fb      	adds	r3, r7, r3
 80084be:	2201      	movs	r2, #1
 80084c0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80084ce:	231e      	movs	r3, #30
 80084d0:	18fb      	adds	r3, r7, r3
 80084d2:	781b      	ldrb	r3, [r3, #0]
}
 80084d4:	0018      	movs	r0, r3
 80084d6:	46bd      	mov	sp, r7
 80084d8:	b008      	add	sp, #32
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	efff69f3 	.word	0xefff69f3
 80084e0:	ffffcfff 	.word	0xffffcfff
 80084e4:	fffff4ff 	.word	0xfffff4ff
 80084e8:	40013800 	.word	0x40013800
 80084ec:	40021000 	.word	0x40021000
 80084f0:	40004400 	.word	0x40004400
 80084f4:	40004800 	.word	0x40004800
 80084f8:	40004c00 	.word	0x40004c00
 80084fc:	007a1200 	.word	0x007a1200

08008500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850c:	2201      	movs	r2, #1
 800850e:	4013      	ands	r3, r2
 8008510:	d00b      	beq.n	800852a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	4a4a      	ldr	r2, [pc, #296]	; (8008644 <UART_AdvFeatureConfig+0x144>)
 800851a:	4013      	ands	r3, r2
 800851c:	0019      	movs	r1, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2202      	movs	r2, #2
 8008530:	4013      	ands	r3, r2
 8008532:	d00b      	beq.n	800854c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	4a43      	ldr	r2, [pc, #268]	; (8008648 <UART_AdvFeatureConfig+0x148>)
 800853c:	4013      	ands	r3, r2
 800853e:	0019      	movs	r1, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	430a      	orrs	r2, r1
 800854a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	2204      	movs	r2, #4
 8008552:	4013      	ands	r3, r2
 8008554:	d00b      	beq.n	800856e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	4a3b      	ldr	r2, [pc, #236]	; (800864c <UART_AdvFeatureConfig+0x14c>)
 800855e:	4013      	ands	r3, r2
 8008560:	0019      	movs	r1, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	2208      	movs	r2, #8
 8008574:	4013      	ands	r3, r2
 8008576:	d00b      	beq.n	8008590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	4a34      	ldr	r2, [pc, #208]	; (8008650 <UART_AdvFeatureConfig+0x150>)
 8008580:	4013      	ands	r3, r2
 8008582:	0019      	movs	r1, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	430a      	orrs	r2, r1
 800858e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	2210      	movs	r2, #16
 8008596:	4013      	ands	r3, r2
 8008598:	d00b      	beq.n	80085b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	4a2c      	ldr	r2, [pc, #176]	; (8008654 <UART_AdvFeatureConfig+0x154>)
 80085a2:	4013      	ands	r3, r2
 80085a4:	0019      	movs	r1, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2220      	movs	r2, #32
 80085b8:	4013      	ands	r3, r2
 80085ba:	d00b      	beq.n	80085d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	4a25      	ldr	r2, [pc, #148]	; (8008658 <UART_AdvFeatureConfig+0x158>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	0019      	movs	r1, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	2240      	movs	r2, #64	; 0x40
 80085da:	4013      	ands	r3, r2
 80085dc:	d01d      	beq.n	800861a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	4a1d      	ldr	r2, [pc, #116]	; (800865c <UART_AdvFeatureConfig+0x15c>)
 80085e6:	4013      	ands	r3, r2
 80085e8:	0019      	movs	r1, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085fa:	2380      	movs	r3, #128	; 0x80
 80085fc:	035b      	lsls	r3, r3, #13
 80085fe:	429a      	cmp	r2, r3
 8008600:	d10b      	bne.n	800861a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	4a15      	ldr	r2, [pc, #84]	; (8008660 <UART_AdvFeatureConfig+0x160>)
 800860a:	4013      	ands	r3, r2
 800860c:	0019      	movs	r1, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861e:	2280      	movs	r2, #128	; 0x80
 8008620:	4013      	ands	r3, r2
 8008622:	d00b      	beq.n	800863c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	4a0e      	ldr	r2, [pc, #56]	; (8008664 <UART_AdvFeatureConfig+0x164>)
 800862c:	4013      	ands	r3, r2
 800862e:	0019      	movs	r1, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	605a      	str	r2, [r3, #4]
  }
}
 800863c:	46c0      	nop			; (mov r8, r8)
 800863e:	46bd      	mov	sp, r7
 8008640:	b002      	add	sp, #8
 8008642:	bd80      	pop	{r7, pc}
 8008644:	fffdffff 	.word	0xfffdffff
 8008648:	fffeffff 	.word	0xfffeffff
 800864c:	fffbffff 	.word	0xfffbffff
 8008650:	ffff7fff 	.word	0xffff7fff
 8008654:	ffffefff 	.word	0xffffefff
 8008658:	ffffdfff 	.word	0xffffdfff
 800865c:	ffefffff 	.word	0xffefffff
 8008660:	ff9fffff 	.word	0xff9fffff
 8008664:	fff7ffff 	.word	0xfff7ffff

08008668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af02      	add	r7, sp, #8
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2280      	movs	r2, #128	; 0x80
 8008674:	2100      	movs	r1, #0
 8008676:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008678:	f7fa fb00 	bl	8002c7c <HAL_GetTick>
 800867c:	0003      	movs	r3, r0
 800867e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2208      	movs	r2, #8
 8008688:	4013      	ands	r3, r2
 800868a:	2b08      	cmp	r3, #8
 800868c:	d10c      	bne.n	80086a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2280      	movs	r2, #128	; 0x80
 8008692:	0391      	lsls	r1, r2, #14
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	4a17      	ldr	r2, [pc, #92]	; (80086f4 <UART_CheckIdleState+0x8c>)
 8008698:	9200      	str	r2, [sp, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	f000 f82c 	bl	80086f8 <UART_WaitOnFlagUntilTimeout>
 80086a0:	1e03      	subs	r3, r0, #0
 80086a2:	d001      	beq.n	80086a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e021      	b.n	80086ec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2204      	movs	r2, #4
 80086b0:	4013      	ands	r3, r2
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	d10c      	bne.n	80086d0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2280      	movs	r2, #128	; 0x80
 80086ba:	03d1      	lsls	r1, r2, #15
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	4a0d      	ldr	r2, [pc, #52]	; (80086f4 <UART_CheckIdleState+0x8c>)
 80086c0:	9200      	str	r2, [sp, #0]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f000 f818 	bl	80086f8 <UART_WaitOnFlagUntilTimeout>
 80086c8:	1e03      	subs	r3, r0, #0
 80086ca:	d001      	beq.n	80086d0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e00d      	b.n	80086ec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2220      	movs	r2, #32
 80086d4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2220      	movs	r2, #32
 80086da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2274      	movs	r2, #116	; 0x74
 80086e6:	2100      	movs	r1, #0
 80086e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	0018      	movs	r0, r3
 80086ee:	46bd      	mov	sp, r7
 80086f0:	b004      	add	sp, #16
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	01ffffff 	.word	0x01ffffff

080086f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b094      	sub	sp, #80	; 0x50
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	1dfb      	adds	r3, r7, #7
 8008706:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008708:	e0a3      	b.n	8008852 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800870a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800870c:	3301      	adds	r3, #1
 800870e:	d100      	bne.n	8008712 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008710:	e09f      	b.n	8008852 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008712:	f7fa fab3 	bl	8002c7c <HAL_GetTick>
 8008716:	0002      	movs	r2, r0
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800871e:	429a      	cmp	r2, r3
 8008720:	d302      	bcc.n	8008728 <UART_WaitOnFlagUntilTimeout+0x30>
 8008722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008724:	2b00      	cmp	r3, #0
 8008726:	d13d      	bne.n	80087a4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008728:	f3ef 8310 	mrs	r3, PRIMASK
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008730:	647b      	str	r3, [r7, #68]	; 0x44
 8008732:	2301      	movs	r3, #1
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008738:	f383 8810 	msr	PRIMASK, r3
}
 800873c:	46c0      	nop			; (mov r8, r8)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	494c      	ldr	r1, [pc, #304]	; (800887c <UART_WaitOnFlagUntilTimeout+0x184>)
 800874a:	400a      	ands	r2, r1
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008750:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	f383 8810 	msr	PRIMASK, r3
}
 8008758:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800875a:	f3ef 8310 	mrs	r3, PRIMASK
 800875e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008762:	643b      	str	r3, [r7, #64]	; 0x40
 8008764:	2301      	movs	r3, #1
 8008766:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	f383 8810 	msr	PRIMASK, r3
}
 800876e:	46c0      	nop			; (mov r8, r8)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2101      	movs	r1, #1
 800877c:	438a      	bics	r2, r1
 800877e:	609a      	str	r2, [r3, #8]
 8008780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008786:	f383 8810 	msr	PRIMASK, r3
}
 800878a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2220      	movs	r2, #32
 8008790:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2220      	movs	r2, #32
 8008796:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2274      	movs	r2, #116	; 0x74
 800879c:	2100      	movs	r1, #0
 800879e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e067      	b.n	8008874 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2204      	movs	r2, #4
 80087ac:	4013      	ands	r3, r2
 80087ae:	d050      	beq.n	8008852 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	69da      	ldr	r2, [r3, #28]
 80087b6:	2380      	movs	r3, #128	; 0x80
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	401a      	ands	r2, r3
 80087bc:	2380      	movs	r3, #128	; 0x80
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d146      	bne.n	8008852 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2280      	movs	r2, #128	; 0x80
 80087ca:	0112      	lsls	r2, r2, #4
 80087cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ce:	f3ef 8310 	mrs	r3, PRIMASK
 80087d2:	613b      	str	r3, [r7, #16]
  return(result);
 80087d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087d8:	2301      	movs	r3, #1
 80087da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f383 8810 	msr	PRIMASK, r3
}
 80087e2:	46c0      	nop			; (mov r8, r8)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4923      	ldr	r1, [pc, #140]	; (800887c <UART_WaitOnFlagUntilTimeout+0x184>)
 80087f0:	400a      	ands	r2, r1
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	f383 8810 	msr	PRIMASK, r3
}
 80087fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008800:	f3ef 8310 	mrs	r3, PRIMASK
 8008804:	61fb      	str	r3, [r7, #28]
  return(result);
 8008806:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008808:	64bb      	str	r3, [r7, #72]	; 0x48
 800880a:	2301      	movs	r3, #1
 800880c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	f383 8810 	msr	PRIMASK, r3
}
 8008814:	46c0      	nop			; (mov r8, r8)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2101      	movs	r1, #1
 8008822:	438a      	bics	r2, r1
 8008824:	609a      	str	r2, [r3, #8]
 8008826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	f383 8810 	msr	PRIMASK, r3
}
 8008830:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2220      	movs	r2, #32
 8008836:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2220      	movs	r2, #32
 800883c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2280      	movs	r2, #128	; 0x80
 8008842:	2120      	movs	r1, #32
 8008844:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2274      	movs	r2, #116	; 0x74
 800884a:	2100      	movs	r1, #0
 800884c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e010      	b.n	8008874 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	4013      	ands	r3, r2
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	425a      	negs	r2, r3
 8008862:	4153      	adcs	r3, r2
 8008864:	b2db      	uxtb	r3, r3
 8008866:	001a      	movs	r2, r3
 8008868:	1dfb      	adds	r3, r7, #7
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	429a      	cmp	r2, r3
 800886e:	d100      	bne.n	8008872 <UART_WaitOnFlagUntilTimeout+0x17a>
 8008870:	e74b      	b.n	800870a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	0018      	movs	r0, r3
 8008876:	46bd      	mov	sp, r7
 8008878:	b014      	add	sp, #80	; 0x50
 800887a:	bd80      	pop	{r7, pc}
 800887c:	fffffe5f 	.word	0xfffffe5f

08008880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08e      	sub	sp, #56	; 0x38
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008888:	f3ef 8310 	mrs	r3, PRIMASK
 800888c:	617b      	str	r3, [r7, #20]
  return(result);
 800888e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008890:	637b      	str	r3, [r7, #52]	; 0x34
 8008892:	2301      	movs	r3, #1
 8008894:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	f383 8810 	msr	PRIMASK, r3
}
 800889c:	46c0      	nop			; (mov r8, r8)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4925      	ldr	r1, [pc, #148]	; (8008940 <UART_EndRxTransfer+0xc0>)
 80088aa:	400a      	ands	r2, r1
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	f383 8810 	msr	PRIMASK, r3
}
 80088b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ba:	f3ef 8310 	mrs	r3, PRIMASK
 80088be:	623b      	str	r3, [r7, #32]
  return(result);
 80088c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c2:	633b      	str	r3, [r7, #48]	; 0x30
 80088c4:	2301      	movs	r3, #1
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	f383 8810 	msr	PRIMASK, r3
}
 80088ce:	46c0      	nop			; (mov r8, r8)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2101      	movs	r1, #1
 80088dc:	438a      	bics	r2, r1
 80088de:	609a      	str	r2, [r3, #8]
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e6:	f383 8810 	msr	PRIMASK, r3
}
 80088ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d118      	bne.n	8008926 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088f4:	f3ef 8310 	mrs	r3, PRIMASK
 80088f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80088fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088fe:	2301      	movs	r3, #1
 8008900:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f383 8810 	msr	PRIMASK, r3
}
 8008908:	46c0      	nop			; (mov r8, r8)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2110      	movs	r1, #16
 8008916:	438a      	bics	r2, r1
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f383 8810 	msr	PRIMASK, r3
}
 8008924:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008938:	46c0      	nop			; (mov r8, r8)
 800893a:	46bd      	mov	sp, r7
 800893c:	b00e      	add	sp, #56	; 0x38
 800893e:	bd80      	pop	{r7, pc}
 8008940:	fffffedf 	.word	0xfffffedf

08008944 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	225a      	movs	r2, #90	; 0x5a
 8008956:	2100      	movs	r1, #0
 8008958:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2252      	movs	r2, #82	; 0x52
 800895e:	2100      	movs	r1, #0
 8008960:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	0018      	movs	r0, r3
 8008966:	f7ff fc2f 	bl	80081c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800896a:	46c0      	nop			; (mov r8, r8)
 800896c:	46bd      	mov	sp, r7
 800896e:	b004      	add	sp, #16
 8008970:	bd80      	pop	{r7, pc}

08008972 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b086      	sub	sp, #24
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800897a:	f3ef 8310 	mrs	r3, PRIMASK
 800897e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008980:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	2301      	movs	r3, #1
 8008986:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f383 8810 	msr	PRIMASK, r3
}
 800898e:	46c0      	nop			; (mov r8, r8)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2140      	movs	r1, #64	; 0x40
 800899c:	438a      	bics	r2, r1
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f383 8810 	msr	PRIMASK, r3
}
 80089aa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2220      	movs	r2, #32
 80089b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	0018      	movs	r0, r3
 80089bc:	f7ff fbfc 	bl	80081b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089c0:	46c0      	nop			; (mov r8, r8)
 80089c2:	46bd      	mov	sp, r7
 80089c4:	b006      	add	sp, #24
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089d0:	46c0      	nop			; (mov r8, r8)
 80089d2:	46bd      	mov	sp, r7
 80089d4:	b002      	add	sp, #8
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2244      	movs	r2, #68	; 0x44
 80089e4:	2100      	movs	r1, #0
 80089e6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <USB_EnableGlobalInt+0x28>)
 80089ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	b299      	uxth	r1, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2240      	movs	r2, #64	; 0x40
 80089f4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	0018      	movs	r0, r3
 80089fa:	46bd      	mov	sp, r7
 80089fc:	b004      	add	sp, #16
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	0000bf80 	.word	0x0000bf80

08008a04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008a0c:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <USB_DisableGlobalInt+0x30>)
 8008a0e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2240      	movs	r2, #64	; 0x40
 8008a14:	5a9b      	ldrh	r3, [r3, r2]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	b292      	uxth	r2, r2
 8008a1c:	43d2      	mvns	r2, r2
 8008a1e:	b292      	uxth	r2, r2
 8008a20:	4013      	ands	r3, r2
 8008a22:	b299      	uxth	r1, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2240      	movs	r2, #64	; 0x40
 8008a28:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	0018      	movs	r0, r3
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	b004      	add	sp, #16
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	0000bf80 	.word	0x0000bf80

08008a38 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008a38:	b084      	sub	sp, #16
 8008a3a:	b590      	push	{r4, r7, lr}
 8008a3c:	46c6      	mov	lr, r8
 8008a3e:	b500      	push	{lr}
 8008a40:	b082      	sub	sp, #8
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	2004      	movs	r0, #4
 8008a48:	2410      	movs	r4, #16
 8008a4a:	46a4      	mov	ip, r4
 8008a4c:	2408      	movs	r4, #8
 8008a4e:	46a0      	mov	r8, r4
 8008a50:	44b8      	add	r8, r7
 8008a52:	44c4      	add	ip, r8
 8008a54:	4460      	add	r0, ip
 8008a56:	6001      	str	r1, [r0, #0]
 8008a58:	6042      	str	r2, [r0, #4]
 8008a5a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2240      	movs	r2, #64	; 0x40
 8008a60:	2101      	movs	r1, #1
 8008a62:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2240      	movs	r2, #64	; 0x40
 8008a68:	2100      	movs	r1, #0
 8008a6a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2244      	movs	r2, #68	; 0x44
 8008a70:	2100      	movs	r1, #0
 8008a72:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2250      	movs	r2, #80	; 0x50
 8008a78:	2100      	movs	r1, #0
 8008a7a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	0018      	movs	r0, r3
 8008a80:	46bd      	mov	sp, r7
 8008a82:	b002      	add	sp, #8
 8008a84:	bc80      	pop	{r7}
 8008a86:	46b8      	mov	r8, r7
 8008a88:	bc90      	pop	{r4, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	b004      	add	sp, #16
 8008a8e:	4718      	bx	r3

08008a90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b09c      	sub	sp, #112	; 0x70
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a9a:	236f      	movs	r3, #111	; 0x6f
 8008a9c:	18fb      	adds	r3, r7, r3
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	18d3      	adds	r3, r2, r3
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	236c      	movs	r3, #108	; 0x6c
 8008ab2:	18fb      	adds	r3, r7, r3
 8008ab4:	49cf      	ldr	r1, [pc, #828]	; (8008df4 <USB_ActivateEndpoint+0x364>)
 8008ab6:	400a      	ands	r2, r1
 8008ab8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	78db      	ldrb	r3, [r3, #3]
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d017      	beq.n	8008af2 <USB_ActivateEndpoint+0x62>
 8008ac2:	dc28      	bgt.n	8008b16 <USB_ActivateEndpoint+0x86>
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d00e      	beq.n	8008ae6 <USB_ActivateEndpoint+0x56>
 8008ac8:	dc25      	bgt.n	8008b16 <USB_ActivateEndpoint+0x86>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <USB_ActivateEndpoint+0x44>
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d018      	beq.n	8008b04 <USB_ActivateEndpoint+0x74>
 8008ad2:	e020      	b.n	8008b16 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008ad4:	226c      	movs	r2, #108	; 0x6c
 8008ad6:	18bb      	adds	r3, r7, r2
 8008ad8:	18ba      	adds	r2, r7, r2
 8008ada:	8812      	ldrh	r2, [r2, #0]
 8008adc:	2180      	movs	r1, #128	; 0x80
 8008ade:	0089      	lsls	r1, r1, #2
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	801a      	strh	r2, [r3, #0]
      break;
 8008ae4:	e01c      	b.n	8008b20 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8008ae6:	226c      	movs	r2, #108	; 0x6c
 8008ae8:	18bb      	adds	r3, r7, r2
 8008aea:	18ba      	adds	r2, r7, r2
 8008aec:	8812      	ldrh	r2, [r2, #0]
 8008aee:	801a      	strh	r2, [r3, #0]
      break;
 8008af0:	e016      	b.n	8008b20 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008af2:	226c      	movs	r2, #108	; 0x6c
 8008af4:	18bb      	adds	r3, r7, r2
 8008af6:	18ba      	adds	r2, r7, r2
 8008af8:	8812      	ldrh	r2, [r2, #0]
 8008afa:	21c0      	movs	r1, #192	; 0xc0
 8008afc:	00c9      	lsls	r1, r1, #3
 8008afe:	430a      	orrs	r2, r1
 8008b00:	801a      	strh	r2, [r3, #0]
      break;
 8008b02:	e00d      	b.n	8008b20 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008b04:	226c      	movs	r2, #108	; 0x6c
 8008b06:	18bb      	adds	r3, r7, r2
 8008b08:	18ba      	adds	r2, r7, r2
 8008b0a:	8812      	ldrh	r2, [r2, #0]
 8008b0c:	2180      	movs	r1, #128	; 0x80
 8008b0e:	00c9      	lsls	r1, r1, #3
 8008b10:	430a      	orrs	r2, r1
 8008b12:	801a      	strh	r2, [r3, #0]
      break;
 8008b14:	e004      	b.n	8008b20 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8008b16:	236f      	movs	r3, #111	; 0x6f
 8008b18:	18fb      	adds	r3, r7, r3
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	701a      	strb	r2, [r3, #0]
      break;
 8008b1e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	18d3      	adds	r3, r2, r3
 8008b2a:	226c      	movs	r2, #108	; 0x6c
 8008b2c:	18ba      	adds	r2, r7, r2
 8008b2e:	8812      	ldrh	r2, [r2, #0]
 8008b30:	49b1      	ldr	r1, [pc, #708]	; (8008df8 <USB_ActivateEndpoint+0x368>)
 8008b32:	430a      	orrs	r2, r1
 8008b34:	b292      	uxth	r2, r2
 8008b36:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	18d3      	adds	r3, r2, r3
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	b21b      	sxth	r3, r3
 8008b48:	4aac      	ldr	r2, [pc, #688]	; (8008dfc <USB_ActivateEndpoint+0x36c>)
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	b21a      	sxth	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	b21b      	sxth	r3, r3
 8008b54:	4313      	orrs	r3, r2
 8008b56:	b21a      	sxth	r2, r3
 8008b58:	2166      	movs	r1, #102	; 0x66
 8008b5a:	187b      	adds	r3, r7, r1
 8008b5c:	801a      	strh	r2, [r3, #0]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	18d3      	adds	r3, r2, r3
 8008b68:	187a      	adds	r2, r7, r1
 8008b6a:	8812      	ldrh	r2, [r2, #0]
 8008b6c:	49a2      	ldr	r1, [pc, #648]	; (8008df8 <USB_ActivateEndpoint+0x368>)
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	b292      	uxth	r2, r2
 8008b72:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	7b1b      	ldrb	r3, [r3, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d000      	beq.n	8008b7e <USB_ActivateEndpoint+0xee>
 8008b7c:	e150      	b.n	8008e20 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	785b      	ldrb	r3, [r3, #1]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d100      	bne.n	8008b88 <USB_ActivateEndpoint+0xf8>
 8008b86:	e07a      	b.n	8008c7e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2250      	movs	r2, #80	; 0x50
 8008b90:	5a9b      	ldrh	r3, [r3, r2]
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	001a      	movs	r2, r3
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	189b      	adds	r3, r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	00da      	lsls	r2, r3, #3
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	18d3      	adds	r3, r2, r3
 8008ba6:	2280      	movs	r2, #128	; 0x80
 8008ba8:	00d2      	lsls	r2, r2, #3
 8008baa:	4694      	mov	ip, r2
 8008bac:	4463      	add	r3, ip
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	88db      	ldrh	r3, [r3, #6]
 8008bb4:	085b      	lsrs	r3, r3, #1
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	18db      	adds	r3, r3, r3
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	18d2      	adds	r2, r2, r3
 8008bca:	2112      	movs	r1, #18
 8008bcc:	187b      	adds	r3, r7, r1
 8008bce:	8812      	ldrh	r2, [r2, #0]
 8008bd0:	801a      	strh	r2, [r3, #0]
 8008bd2:	187b      	adds	r3, r7, r1
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	2240      	movs	r2, #64	; 0x40
 8008bd8:	4013      	ands	r3, r2
 8008bda:	d016      	beq.n	8008c0a <USB_ActivateEndpoint+0x17a>
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	18d3      	adds	r3, r2, r3
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	2010      	movs	r0, #16
 8008bec:	183b      	adds	r3, r7, r0
 8008bee:	4983      	ldr	r1, [pc, #524]	; (8008dfc <USB_ActivateEndpoint+0x36c>)
 8008bf0:	400a      	ands	r2, r1
 8008bf2:	801a      	strh	r2, [r3, #0]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	18d3      	adds	r3, r2, r3
 8008bfe:	183a      	adds	r2, r7, r0
 8008c00:	8812      	ldrh	r2, [r2, #0]
 8008c02:	497f      	ldr	r1, [pc, #508]	; (8008e00 <USB_ActivateEndpoint+0x370>)
 8008c04:	430a      	orrs	r2, r1
 8008c06:	b292      	uxth	r2, r2
 8008c08:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	78db      	ldrb	r3, [r3, #3]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d01d      	beq.n	8008c4e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	18d3      	adds	r3, r2, r3
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	200c      	movs	r0, #12
 8008c22:	183b      	adds	r3, r7, r0
 8008c24:	4977      	ldr	r1, [pc, #476]	; (8008e04 <USB_ActivateEndpoint+0x374>)
 8008c26:	400a      	ands	r2, r1
 8008c28:	801a      	strh	r2, [r3, #0]
 8008c2a:	183b      	adds	r3, r7, r0
 8008c2c:	183a      	adds	r2, r7, r0
 8008c2e:	8812      	ldrh	r2, [r2, #0]
 8008c30:	2120      	movs	r1, #32
 8008c32:	404a      	eors	r2, r1
 8008c34:	801a      	strh	r2, [r3, #0]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	18d3      	adds	r3, r2, r3
 8008c40:	183a      	adds	r2, r7, r0
 8008c42:	8812      	ldrh	r2, [r2, #0]
 8008c44:	496c      	ldr	r1, [pc, #432]	; (8008df8 <USB_ActivateEndpoint+0x368>)
 8008c46:	430a      	orrs	r2, r1
 8008c48:	b292      	uxth	r2, r2
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	e27a      	b.n	8009144 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	18d3      	adds	r3, r2, r3
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	200e      	movs	r0, #14
 8008c5e:	183b      	adds	r3, r7, r0
 8008c60:	4968      	ldr	r1, [pc, #416]	; (8008e04 <USB_ActivateEndpoint+0x374>)
 8008c62:	400a      	ands	r2, r1
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	18d3      	adds	r3, r2, r3
 8008c70:	183a      	adds	r2, r7, r0
 8008c72:	8812      	ldrh	r2, [r2, #0]
 8008c74:	4960      	ldr	r1, [pc, #384]	; (8008df8 <USB_ActivateEndpoint+0x368>)
 8008c76:	430a      	orrs	r2, r1
 8008c78:	b292      	uxth	r2, r2
 8008c7a:	801a      	strh	r2, [r3, #0]
 8008c7c:	e262      	b.n	8009144 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	633b      	str	r3, [r7, #48]	; 0x30
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2250      	movs	r2, #80	; 0x50
 8008c86:	5a9b      	ldrh	r3, [r3, r2]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	001a      	movs	r2, r3
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	189b      	adds	r3, r3, r2
 8008c90:	633b      	str	r3, [r7, #48]	; 0x30
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	00da      	lsls	r2, r3, #3
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	18d3      	adds	r3, r2, r3
 8008c9c:	4a5a      	ldr	r2, [pc, #360]	; (8008e08 <USB_ActivateEndpoint+0x378>)
 8008c9e:	4694      	mov	ip, r2
 8008ca0:	4463      	add	r3, ip
 8008ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	88db      	ldrh	r3, [r3, #6]
 8008ca8:	085b      	lsrs	r3, r3, #1
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	18db      	adds	r3, r3, r3
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2250      	movs	r2, #80	; 0x50
 8008cbc:	5a9b      	ldrh	r3, [r3, r2]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	001a      	movs	r2, r3
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	189b      	adds	r3, r3, r2
 8008cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	00da      	lsls	r2, r3, #3
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	18d3      	adds	r3, r2, r3
 8008cd2:	4a4e      	ldr	r2, [pc, #312]	; (8008e0c <USB_ActivateEndpoint+0x37c>)
 8008cd4:	4694      	mov	ip, r2
 8008cd6:	4463      	add	r3, ip
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d110      	bne.n	8008d04 <USB_ActivateEndpoint+0x274>
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	4a49      	ldr	r2, [pc, #292]	; (8008e10 <USB_ActivateEndpoint+0x380>)
 8008cea:	4013      	ands	r3, r2
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	801a      	strh	r2, [r3, #0]
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	4a46      	ldr	r2, [pc, #280]	; (8008e14 <USB_ActivateEndpoint+0x384>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	801a      	strh	r2, [r3, #0]
 8008d02:	e02b      	b.n	8008d5c <USB_ActivateEndpoint+0x2cc>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b3e      	cmp	r3, #62	; 0x3e
 8008d0a:	d812      	bhi.n	8008d32 <USB_ActivateEndpoint+0x2a2>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	085b      	lsrs	r3, r3, #1
 8008d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	d002      	beq.n	8008d24 <USB_ActivateEndpoint+0x294>
 8008d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d20:	3301      	adds	r3, #1
 8008d22:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	029b      	lsls	r3, r3, #10
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	801a      	strh	r2, [r3, #0]
 8008d30:	e014      	b.n	8008d5c <USB_ActivateEndpoint+0x2cc>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	095b      	lsrs	r3, r3, #5
 8008d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	221f      	movs	r2, #31
 8008d40:	4013      	ands	r3, r2
 8008d42:	d102      	bne.n	8008d4a <USB_ActivateEndpoint+0x2ba>
 8008d44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d46:	3b01      	subs	r3, #1
 8008d48:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	029b      	lsls	r3, r3, #10
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	4a30      	ldr	r2, [pc, #192]	; (8008e14 <USB_ActivateEndpoint+0x384>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	18d2      	adds	r2, r2, r3
 8008d66:	2122      	movs	r1, #34	; 0x22
 8008d68:	187b      	adds	r3, r7, r1
 8008d6a:	8812      	ldrh	r2, [r2, #0]
 8008d6c:	801a      	strh	r2, [r3, #0]
 8008d6e:	187b      	adds	r3, r7, r1
 8008d70:	881a      	ldrh	r2, [r3, #0]
 8008d72:	2380      	movs	r3, #128	; 0x80
 8008d74:	01db      	lsls	r3, r3, #7
 8008d76:	4013      	ands	r3, r2
 8008d78:	d016      	beq.n	8008da8 <USB_ActivateEndpoint+0x318>
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	18d3      	adds	r3, r2, r3
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	2020      	movs	r0, #32
 8008d8a:	183b      	adds	r3, r7, r0
 8008d8c:	491b      	ldr	r1, [pc, #108]	; (8008dfc <USB_ActivateEndpoint+0x36c>)
 8008d8e:	400a      	ands	r2, r1
 8008d90:	801a      	strh	r2, [r3, #0]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	18d3      	adds	r3, r2, r3
 8008d9c:	183a      	adds	r2, r7, r0
 8008d9e:	8812      	ldrh	r2, [r2, #0]
 8008da0:	491d      	ldr	r1, [pc, #116]	; (8008e18 <USB_ActivateEndpoint+0x388>)
 8008da2:	430a      	orrs	r2, r1
 8008da4:	b292      	uxth	r2, r2
 8008da6:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	18d3      	adds	r3, r2, r3
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	201e      	movs	r0, #30
 8008db8:	183b      	adds	r3, r7, r0
 8008dba:	4918      	ldr	r1, [pc, #96]	; (8008e1c <USB_ActivateEndpoint+0x38c>)
 8008dbc:	400a      	ands	r2, r1
 8008dbe:	801a      	strh	r2, [r3, #0]
 8008dc0:	183b      	adds	r3, r7, r0
 8008dc2:	183a      	adds	r2, r7, r0
 8008dc4:	8812      	ldrh	r2, [r2, #0]
 8008dc6:	2180      	movs	r1, #128	; 0x80
 8008dc8:	0149      	lsls	r1, r1, #5
 8008dca:	404a      	eors	r2, r1
 8008dcc:	801a      	strh	r2, [r3, #0]
 8008dce:	183b      	adds	r3, r7, r0
 8008dd0:	183a      	adds	r2, r7, r0
 8008dd2:	8812      	ldrh	r2, [r2, #0]
 8008dd4:	2180      	movs	r1, #128	; 0x80
 8008dd6:	0189      	lsls	r1, r1, #6
 8008dd8:	404a      	eors	r2, r1
 8008dda:	801a      	strh	r2, [r3, #0]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	18d3      	adds	r3, r2, r3
 8008de6:	183a      	adds	r2, r7, r0
 8008de8:	8812      	ldrh	r2, [r2, #0]
 8008dea:	4903      	ldr	r1, [pc, #12]	; (8008df8 <USB_ActivateEndpoint+0x368>)
 8008dec:	430a      	orrs	r2, r1
 8008dee:	b292      	uxth	r2, r2
 8008df0:	801a      	strh	r2, [r3, #0]
 8008df2:	e1a7      	b.n	8009144 <USB_ActivateEndpoint+0x6b4>
 8008df4:	ffff898f 	.word	0xffff898f
 8008df8:	ffff8080 	.word	0xffff8080
 8008dfc:	ffff8f8f 	.word	0xffff8f8f
 8008e00:	ffff80c0 	.word	0xffff80c0
 8008e04:	ffff8fbf 	.word	0xffff8fbf
 8008e08:	00000404 	.word	0x00000404
 8008e0c:	00000406 	.word	0x00000406
 8008e10:	ffff83ff 	.word	0xffff83ff
 8008e14:	ffff8000 	.word	0xffff8000
 8008e18:	ffffc080 	.word	0xffffc080
 8008e1c:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	78db      	ldrb	r3, [r3, #3]
 8008e24:	2b02      	cmp	r3, #2
 8008e26:	d117      	bne.n	8008e58 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	18d3      	adds	r3, r2, r3
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	2062      	movs	r0, #98	; 0x62
 8008e38:	183b      	adds	r3, r7, r0
 8008e3a:	49c6      	ldr	r1, [pc, #792]	; (8009154 <USB_ActivateEndpoint+0x6c4>)
 8008e3c:	400a      	ands	r2, r1
 8008e3e:	801a      	strh	r2, [r3, #0]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	18d3      	adds	r3, r2, r3
 8008e4a:	183a      	adds	r2, r7, r0
 8008e4c:	8812      	ldrh	r2, [r2, #0]
 8008e4e:	49c2      	ldr	r1, [pc, #776]	; (8009158 <USB_ActivateEndpoint+0x6c8>)
 8008e50:	430a      	orrs	r2, r1
 8008e52:	b292      	uxth	r2, r2
 8008e54:	801a      	strh	r2, [r3, #0]
 8008e56:	e016      	b.n	8008e86 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	18d3      	adds	r3, r2, r3
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	2064      	movs	r0, #100	; 0x64
 8008e68:	183b      	adds	r3, r7, r0
 8008e6a:	49bc      	ldr	r1, [pc, #752]	; (800915c <USB_ActivateEndpoint+0x6cc>)
 8008e6c:	400a      	ands	r2, r1
 8008e6e:	801a      	strh	r2, [r3, #0]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	18d3      	adds	r3, r2, r3
 8008e7a:	183a      	adds	r2, r7, r0
 8008e7c:	8812      	ldrh	r2, [r2, #0]
 8008e7e:	49b8      	ldr	r1, [pc, #736]	; (8009160 <USB_ActivateEndpoint+0x6d0>)
 8008e80:	430a      	orrs	r2, r1
 8008e82:	b292      	uxth	r2, r2
 8008e84:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2250      	movs	r2, #80	; 0x50
 8008e8e:	5a9b      	ldrh	r3, [r3, r2]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	001a      	movs	r2, r3
 8008e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e96:	189b      	adds	r3, r3, r2
 8008e98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	00da      	lsls	r2, r3, #3
 8008ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ea2:	18d3      	adds	r3, r2, r3
 8008ea4:	2280      	movs	r2, #128	; 0x80
 8008ea6:	00d2      	lsls	r2, r2, #3
 8008ea8:	4694      	mov	ip, r2
 8008eaa:	4463      	add	r3, ip
 8008eac:	65bb      	str	r3, [r7, #88]	; 0x58
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	891b      	ldrh	r3, [r3, #8]
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	18db      	adds	r3, r3, r3
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ebc:	801a      	strh	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	657b      	str	r3, [r7, #84]	; 0x54
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2250      	movs	r2, #80	; 0x50
 8008ec6:	5a9b      	ldrh	r3, [r3, r2]
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	001a      	movs	r2, r3
 8008ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ece:	189b      	adds	r3, r3, r2
 8008ed0:	657b      	str	r3, [r7, #84]	; 0x54
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	00da      	lsls	r2, r3, #3
 8008ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eda:	18d3      	adds	r3, r2, r3
 8008edc:	4aa1      	ldr	r2, [pc, #644]	; (8009164 <USB_ActivateEndpoint+0x6d4>)
 8008ede:	4694      	mov	ip, r2
 8008ee0:	4463      	add	r3, ip
 8008ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	895b      	ldrh	r3, [r3, #10]
 8008ee8:	085b      	lsrs	r3, r3, #1
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	18db      	adds	r3, r3, r3
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ef2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d000      	beq.n	8008efe <USB_ActivateEndpoint+0x46e>
 8008efc:	e087      	b.n	800900e <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	18d2      	adds	r2, r2, r3
 8008f08:	2140      	movs	r1, #64	; 0x40
 8008f0a:	187b      	adds	r3, r7, r1
 8008f0c:	8812      	ldrh	r2, [r2, #0]
 8008f0e:	801a      	strh	r2, [r3, #0]
 8008f10:	187b      	adds	r3, r7, r1
 8008f12:	881a      	ldrh	r2, [r3, #0]
 8008f14:	2380      	movs	r3, #128	; 0x80
 8008f16:	01db      	lsls	r3, r3, #7
 8008f18:	4013      	ands	r3, r2
 8008f1a:	d016      	beq.n	8008f4a <USB_ActivateEndpoint+0x4ba>
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	18d3      	adds	r3, r2, r3
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	203e      	movs	r0, #62	; 0x3e
 8008f2c:	183b      	adds	r3, r7, r0
 8008f2e:	4989      	ldr	r1, [pc, #548]	; (8009154 <USB_ActivateEndpoint+0x6c4>)
 8008f30:	400a      	ands	r2, r1
 8008f32:	801a      	strh	r2, [r3, #0]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	18d3      	adds	r3, r2, r3
 8008f3e:	183a      	adds	r2, r7, r0
 8008f40:	8812      	ldrh	r2, [r2, #0]
 8008f42:	4989      	ldr	r1, [pc, #548]	; (8009168 <USB_ActivateEndpoint+0x6d8>)
 8008f44:	430a      	orrs	r2, r1
 8008f46:	b292      	uxth	r2, r2
 8008f48:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	18d2      	adds	r2, r2, r3
 8008f54:	213c      	movs	r1, #60	; 0x3c
 8008f56:	187b      	adds	r3, r7, r1
 8008f58:	8812      	ldrh	r2, [r2, #0]
 8008f5a:	801a      	strh	r2, [r3, #0]
 8008f5c:	187b      	adds	r3, r7, r1
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	2240      	movs	r2, #64	; 0x40
 8008f62:	4013      	ands	r3, r2
 8008f64:	d016      	beq.n	8008f94 <USB_ActivateEndpoint+0x504>
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	18d3      	adds	r3, r2, r3
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	203a      	movs	r0, #58	; 0x3a
 8008f76:	183b      	adds	r3, r7, r0
 8008f78:	4976      	ldr	r1, [pc, #472]	; (8009154 <USB_ActivateEndpoint+0x6c4>)
 8008f7a:	400a      	ands	r2, r1
 8008f7c:	801a      	strh	r2, [r3, #0]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	18d3      	adds	r3, r2, r3
 8008f88:	183a      	adds	r2, r7, r0
 8008f8a:	8812      	ldrh	r2, [r2, #0]
 8008f8c:	4977      	ldr	r1, [pc, #476]	; (800916c <USB_ActivateEndpoint+0x6dc>)
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	b292      	uxth	r2, r2
 8008f92:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	18d3      	adds	r3, r2, r3
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	2038      	movs	r0, #56	; 0x38
 8008fa4:	183b      	adds	r3, r7, r0
 8008fa6:	4972      	ldr	r1, [pc, #456]	; (8009170 <USB_ActivateEndpoint+0x6e0>)
 8008fa8:	400a      	ands	r2, r1
 8008faa:	801a      	strh	r2, [r3, #0]
 8008fac:	183b      	adds	r3, r7, r0
 8008fae:	183a      	adds	r2, r7, r0
 8008fb0:	8812      	ldrh	r2, [r2, #0]
 8008fb2:	2180      	movs	r1, #128	; 0x80
 8008fb4:	0149      	lsls	r1, r1, #5
 8008fb6:	404a      	eors	r2, r1
 8008fb8:	801a      	strh	r2, [r3, #0]
 8008fba:	183b      	adds	r3, r7, r0
 8008fbc:	183a      	adds	r2, r7, r0
 8008fbe:	8812      	ldrh	r2, [r2, #0]
 8008fc0:	2180      	movs	r1, #128	; 0x80
 8008fc2:	0189      	lsls	r1, r1, #6
 8008fc4:	404a      	eors	r2, r1
 8008fc6:	801a      	strh	r2, [r3, #0]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	18d3      	adds	r3, r2, r3
 8008fd2:	183a      	adds	r2, r7, r0
 8008fd4:	8812      	ldrh	r2, [r2, #0]
 8008fd6:	4962      	ldr	r1, [pc, #392]	; (8009160 <USB_ActivateEndpoint+0x6d0>)
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	b292      	uxth	r2, r2
 8008fdc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	18d3      	adds	r3, r2, r3
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	2036      	movs	r0, #54	; 0x36
 8008fee:	183b      	adds	r3, r7, r0
 8008ff0:	4960      	ldr	r1, [pc, #384]	; (8009174 <USB_ActivateEndpoint+0x6e4>)
 8008ff2:	400a      	ands	r2, r1
 8008ff4:	801a      	strh	r2, [r3, #0]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	18d3      	adds	r3, r2, r3
 8009000:	183a      	adds	r2, r7, r0
 8009002:	8812      	ldrh	r2, [r2, #0]
 8009004:	4956      	ldr	r1, [pc, #344]	; (8009160 <USB_ActivateEndpoint+0x6d0>)
 8009006:	430a      	orrs	r2, r1
 8009008:	b292      	uxth	r2, r2
 800900a:	801a      	strh	r2, [r3, #0]
 800900c:	e09a      	b.n	8009144 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	18d2      	adds	r2, r2, r3
 8009018:	214e      	movs	r1, #78	; 0x4e
 800901a:	187b      	adds	r3, r7, r1
 800901c:	8812      	ldrh	r2, [r2, #0]
 800901e:	801a      	strh	r2, [r3, #0]
 8009020:	187b      	adds	r3, r7, r1
 8009022:	881a      	ldrh	r2, [r3, #0]
 8009024:	2380      	movs	r3, #128	; 0x80
 8009026:	01db      	lsls	r3, r3, #7
 8009028:	4013      	ands	r3, r2
 800902a:	d016      	beq.n	800905a <USB_ActivateEndpoint+0x5ca>
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	18d3      	adds	r3, r2, r3
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	b29a      	uxth	r2, r3
 800903a:	204c      	movs	r0, #76	; 0x4c
 800903c:	183b      	adds	r3, r7, r0
 800903e:	4945      	ldr	r1, [pc, #276]	; (8009154 <USB_ActivateEndpoint+0x6c4>)
 8009040:	400a      	ands	r2, r1
 8009042:	801a      	strh	r2, [r3, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	18d3      	adds	r3, r2, r3
 800904e:	183a      	adds	r2, r7, r0
 8009050:	8812      	ldrh	r2, [r2, #0]
 8009052:	4945      	ldr	r1, [pc, #276]	; (8009168 <USB_ActivateEndpoint+0x6d8>)
 8009054:	430a      	orrs	r2, r1
 8009056:	b292      	uxth	r2, r2
 8009058:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	18d2      	adds	r2, r2, r3
 8009064:	214a      	movs	r1, #74	; 0x4a
 8009066:	187b      	adds	r3, r7, r1
 8009068:	8812      	ldrh	r2, [r2, #0]
 800906a:	801a      	strh	r2, [r3, #0]
 800906c:	187b      	adds	r3, r7, r1
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	2240      	movs	r2, #64	; 0x40
 8009072:	4013      	ands	r3, r2
 8009074:	d016      	beq.n	80090a4 <USB_ActivateEndpoint+0x614>
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	18d3      	adds	r3, r2, r3
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	b29a      	uxth	r2, r3
 8009084:	2048      	movs	r0, #72	; 0x48
 8009086:	183b      	adds	r3, r7, r0
 8009088:	4932      	ldr	r1, [pc, #200]	; (8009154 <USB_ActivateEndpoint+0x6c4>)
 800908a:	400a      	ands	r2, r1
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	18d3      	adds	r3, r2, r3
 8009098:	183a      	adds	r2, r7, r0
 800909a:	8812      	ldrh	r2, [r2, #0]
 800909c:	4933      	ldr	r1, [pc, #204]	; (800916c <USB_ActivateEndpoint+0x6dc>)
 800909e:	430a      	orrs	r2, r1
 80090a0:	b292      	uxth	r2, r2
 80090a2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	78db      	ldrb	r3, [r3, #3]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d01d      	beq.n	80090e8 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	18d3      	adds	r3, r2, r3
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	2044      	movs	r0, #68	; 0x44
 80090bc:	183b      	adds	r3, r7, r0
 80090be:	492d      	ldr	r1, [pc, #180]	; (8009174 <USB_ActivateEndpoint+0x6e4>)
 80090c0:	400a      	ands	r2, r1
 80090c2:	801a      	strh	r2, [r3, #0]
 80090c4:	183b      	adds	r3, r7, r0
 80090c6:	183a      	adds	r2, r7, r0
 80090c8:	8812      	ldrh	r2, [r2, #0]
 80090ca:	2120      	movs	r1, #32
 80090cc:	404a      	eors	r2, r1
 80090ce:	801a      	strh	r2, [r3, #0]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	18d3      	adds	r3, r2, r3
 80090da:	183a      	adds	r2, r7, r0
 80090dc:	8812      	ldrh	r2, [r2, #0]
 80090de:	4920      	ldr	r1, [pc, #128]	; (8009160 <USB_ActivateEndpoint+0x6d0>)
 80090e0:	430a      	orrs	r2, r1
 80090e2:	b292      	uxth	r2, r2
 80090e4:	801a      	strh	r2, [r3, #0]
 80090e6:	e016      	b.n	8009116 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	18d3      	adds	r3, r2, r3
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	2046      	movs	r0, #70	; 0x46
 80090f8:	183b      	adds	r3, r7, r0
 80090fa:	491e      	ldr	r1, [pc, #120]	; (8009174 <USB_ActivateEndpoint+0x6e4>)
 80090fc:	400a      	ands	r2, r1
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	18d3      	adds	r3, r2, r3
 800910a:	183a      	adds	r2, r7, r0
 800910c:	8812      	ldrh	r2, [r2, #0]
 800910e:	4914      	ldr	r1, [pc, #80]	; (8009160 <USB_ActivateEndpoint+0x6d0>)
 8009110:	430a      	orrs	r2, r1
 8009112:	b292      	uxth	r2, r2
 8009114:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	18d3      	adds	r3, r2, r3
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	b29a      	uxth	r2, r3
 8009124:	2042      	movs	r0, #66	; 0x42
 8009126:	183b      	adds	r3, r7, r0
 8009128:	4911      	ldr	r1, [pc, #68]	; (8009170 <USB_ActivateEndpoint+0x6e0>)
 800912a:	400a      	ands	r2, r1
 800912c:	801a      	strh	r2, [r3, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	18d3      	adds	r3, r2, r3
 8009138:	183a      	adds	r2, r7, r0
 800913a:	8812      	ldrh	r2, [r2, #0]
 800913c:	4908      	ldr	r1, [pc, #32]	; (8009160 <USB_ActivateEndpoint+0x6d0>)
 800913e:	430a      	orrs	r2, r1
 8009140:	b292      	uxth	r2, r2
 8009142:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8009144:	236f      	movs	r3, #111	; 0x6f
 8009146:	18fb      	adds	r3, r7, r3
 8009148:	781b      	ldrb	r3, [r3, #0]
}
 800914a:	0018      	movs	r0, r3
 800914c:	46bd      	mov	sp, r7
 800914e:	b01c      	add	sp, #112	; 0x70
 8009150:	bd80      	pop	{r7, pc}
 8009152:	46c0      	nop			; (mov r8, r8)
 8009154:	ffff8f8f 	.word	0xffff8f8f
 8009158:	ffff8180 	.word	0xffff8180
 800915c:	ffff8e8f 	.word	0xffff8e8f
 8009160:	ffff8080 	.word	0xffff8080
 8009164:	00000404 	.word	0x00000404
 8009168:	ffffc080 	.word	0xffffc080
 800916c:	ffff80c0 	.word	0xffff80c0
 8009170:	ffffbf8f 	.word	0xffffbf8f
 8009174:	ffff8fbf 	.word	0xffff8fbf

08009178 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08c      	sub	sp, #48	; 0x30
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	7b1b      	ldrb	r3, [r3, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d000      	beq.n	800918c <USB_DeactivateEndpoint+0x14>
 800918a:	e07e      	b.n	800928a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	785b      	ldrb	r3, [r3, #1]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d03c      	beq.n	800920e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	18d2      	adds	r2, r2, r3
 800919e:	210c      	movs	r1, #12
 80091a0:	187b      	adds	r3, r7, r1
 80091a2:	8812      	ldrh	r2, [r2, #0]
 80091a4:	801a      	strh	r2, [r3, #0]
 80091a6:	187b      	adds	r3, r7, r1
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	2240      	movs	r2, #64	; 0x40
 80091ac:	4013      	ands	r3, r2
 80091ae:	d016      	beq.n	80091de <USB_DeactivateEndpoint+0x66>
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	18d3      	adds	r3, r2, r3
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	b29a      	uxth	r2, r3
 80091be:	200a      	movs	r0, #10
 80091c0:	183b      	adds	r3, r7, r0
 80091c2:	49c7      	ldr	r1, [pc, #796]	; (80094e0 <USB_DeactivateEndpoint+0x368>)
 80091c4:	400a      	ands	r2, r1
 80091c6:	801a      	strh	r2, [r3, #0]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	18d3      	adds	r3, r2, r3
 80091d2:	183a      	adds	r2, r7, r0
 80091d4:	8812      	ldrh	r2, [r2, #0]
 80091d6:	49c3      	ldr	r1, [pc, #780]	; (80094e4 <USB_DeactivateEndpoint+0x36c>)
 80091d8:	430a      	orrs	r2, r1
 80091da:	b292      	uxth	r2, r2
 80091dc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	18d3      	adds	r3, r2, r3
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	2008      	movs	r0, #8
 80091ee:	183b      	adds	r3, r7, r0
 80091f0:	49bd      	ldr	r1, [pc, #756]	; (80094e8 <USB_DeactivateEndpoint+0x370>)
 80091f2:	400a      	ands	r2, r1
 80091f4:	801a      	strh	r2, [r3, #0]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	18d3      	adds	r3, r2, r3
 8009200:	183a      	adds	r2, r7, r0
 8009202:	8812      	ldrh	r2, [r2, #0]
 8009204:	49b9      	ldr	r1, [pc, #740]	; (80094ec <USB_DeactivateEndpoint+0x374>)
 8009206:	430a      	orrs	r2, r1
 8009208:	b292      	uxth	r2, r2
 800920a:	801a      	strh	r2, [r3, #0]
 800920c:	e163      	b.n	80094d6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	18d2      	adds	r2, r2, r3
 8009218:	2112      	movs	r1, #18
 800921a:	187b      	adds	r3, r7, r1
 800921c:	8812      	ldrh	r2, [r2, #0]
 800921e:	801a      	strh	r2, [r3, #0]
 8009220:	187b      	adds	r3, r7, r1
 8009222:	881a      	ldrh	r2, [r3, #0]
 8009224:	2380      	movs	r3, #128	; 0x80
 8009226:	01db      	lsls	r3, r3, #7
 8009228:	4013      	ands	r3, r2
 800922a:	d016      	beq.n	800925a <USB_DeactivateEndpoint+0xe2>
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	18d3      	adds	r3, r2, r3
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	b29a      	uxth	r2, r3
 800923a:	2010      	movs	r0, #16
 800923c:	183b      	adds	r3, r7, r0
 800923e:	49a8      	ldr	r1, [pc, #672]	; (80094e0 <USB_DeactivateEndpoint+0x368>)
 8009240:	400a      	ands	r2, r1
 8009242:	801a      	strh	r2, [r3, #0]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	18d3      	adds	r3, r2, r3
 800924e:	183a      	adds	r2, r7, r0
 8009250:	8812      	ldrh	r2, [r2, #0]
 8009252:	49a7      	ldr	r1, [pc, #668]	; (80094f0 <USB_DeactivateEndpoint+0x378>)
 8009254:	430a      	orrs	r2, r1
 8009256:	b292      	uxth	r2, r2
 8009258:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	18d3      	adds	r3, r2, r3
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	b29a      	uxth	r2, r3
 8009268:	200e      	movs	r0, #14
 800926a:	183b      	adds	r3, r7, r0
 800926c:	49a1      	ldr	r1, [pc, #644]	; (80094f4 <USB_DeactivateEndpoint+0x37c>)
 800926e:	400a      	ands	r2, r1
 8009270:	801a      	strh	r2, [r3, #0]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	18d3      	adds	r3, r2, r3
 800927c:	183a      	adds	r2, r7, r0
 800927e:	8812      	ldrh	r2, [r2, #0]
 8009280:	499a      	ldr	r1, [pc, #616]	; (80094ec <USB_DeactivateEndpoint+0x374>)
 8009282:	430a      	orrs	r2, r1
 8009284:	b292      	uxth	r2, r2
 8009286:	801a      	strh	r2, [r3, #0]
 8009288:	e125      	b.n	80094d6 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	785b      	ldrb	r3, [r3, #1]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d000      	beq.n	8009294 <USB_DeactivateEndpoint+0x11c>
 8009292:	e090      	b.n	80093b6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	18d2      	adds	r2, r2, r3
 800929e:	2120      	movs	r1, #32
 80092a0:	187b      	adds	r3, r7, r1
 80092a2:	8812      	ldrh	r2, [r2, #0]
 80092a4:	801a      	strh	r2, [r3, #0]
 80092a6:	187b      	adds	r3, r7, r1
 80092a8:	881a      	ldrh	r2, [r3, #0]
 80092aa:	2380      	movs	r3, #128	; 0x80
 80092ac:	01db      	lsls	r3, r3, #7
 80092ae:	4013      	ands	r3, r2
 80092b0:	d016      	beq.n	80092e0 <USB_DeactivateEndpoint+0x168>
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	18d3      	adds	r3, r2, r3
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	b29a      	uxth	r2, r3
 80092c0:	201e      	movs	r0, #30
 80092c2:	183b      	adds	r3, r7, r0
 80092c4:	4986      	ldr	r1, [pc, #536]	; (80094e0 <USB_DeactivateEndpoint+0x368>)
 80092c6:	400a      	ands	r2, r1
 80092c8:	801a      	strh	r2, [r3, #0]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	18d3      	adds	r3, r2, r3
 80092d4:	183a      	adds	r2, r7, r0
 80092d6:	8812      	ldrh	r2, [r2, #0]
 80092d8:	4985      	ldr	r1, [pc, #532]	; (80094f0 <USB_DeactivateEndpoint+0x378>)
 80092da:	430a      	orrs	r2, r1
 80092dc:	b292      	uxth	r2, r2
 80092de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	18d2      	adds	r2, r2, r3
 80092ea:	211c      	movs	r1, #28
 80092ec:	187b      	adds	r3, r7, r1
 80092ee:	8812      	ldrh	r2, [r2, #0]
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	187b      	adds	r3, r7, r1
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	2240      	movs	r2, #64	; 0x40
 80092f8:	4013      	ands	r3, r2
 80092fa:	d016      	beq.n	800932a <USB_DeactivateEndpoint+0x1b2>
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	18d3      	adds	r3, r2, r3
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	b29a      	uxth	r2, r3
 800930a:	201a      	movs	r0, #26
 800930c:	183b      	adds	r3, r7, r0
 800930e:	4974      	ldr	r1, [pc, #464]	; (80094e0 <USB_DeactivateEndpoint+0x368>)
 8009310:	400a      	ands	r2, r1
 8009312:	801a      	strh	r2, [r3, #0]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	18d3      	adds	r3, r2, r3
 800931e:	183a      	adds	r2, r7, r0
 8009320:	8812      	ldrh	r2, [r2, #0]
 8009322:	4970      	ldr	r1, [pc, #448]	; (80094e4 <USB_DeactivateEndpoint+0x36c>)
 8009324:	430a      	orrs	r2, r1
 8009326:	b292      	uxth	r2, r2
 8009328:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	18d3      	adds	r3, r2, r3
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	b29a      	uxth	r2, r3
 8009338:	2018      	movs	r0, #24
 800933a:	183b      	adds	r3, r7, r0
 800933c:	4968      	ldr	r1, [pc, #416]	; (80094e0 <USB_DeactivateEndpoint+0x368>)
 800933e:	400a      	ands	r2, r1
 8009340:	801a      	strh	r2, [r3, #0]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	18d3      	adds	r3, r2, r3
 800934c:	183a      	adds	r2, r7, r0
 800934e:	8812      	ldrh	r2, [r2, #0]
 8009350:	4964      	ldr	r1, [pc, #400]	; (80094e4 <USB_DeactivateEndpoint+0x36c>)
 8009352:	430a      	orrs	r2, r1
 8009354:	b292      	uxth	r2, r2
 8009356:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	18d3      	adds	r3, r2, r3
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	b29a      	uxth	r2, r3
 8009366:	2016      	movs	r0, #22
 8009368:	183b      	adds	r3, r7, r0
 800936a:	4962      	ldr	r1, [pc, #392]	; (80094f4 <USB_DeactivateEndpoint+0x37c>)
 800936c:	400a      	ands	r2, r1
 800936e:	801a      	strh	r2, [r3, #0]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	18d3      	adds	r3, r2, r3
 800937a:	183a      	adds	r2, r7, r0
 800937c:	8812      	ldrh	r2, [r2, #0]
 800937e:	495b      	ldr	r1, [pc, #364]	; (80094ec <USB_DeactivateEndpoint+0x374>)
 8009380:	430a      	orrs	r2, r1
 8009382:	b292      	uxth	r2, r2
 8009384:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	18d3      	adds	r3, r2, r3
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b29a      	uxth	r2, r3
 8009394:	2014      	movs	r0, #20
 8009396:	183b      	adds	r3, r7, r0
 8009398:	4953      	ldr	r1, [pc, #332]	; (80094e8 <USB_DeactivateEndpoint+0x370>)
 800939a:	400a      	ands	r2, r1
 800939c:	801a      	strh	r2, [r3, #0]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	18d3      	adds	r3, r2, r3
 80093a8:	183a      	adds	r2, r7, r0
 80093aa:	8812      	ldrh	r2, [r2, #0]
 80093ac:	494f      	ldr	r1, [pc, #316]	; (80094ec <USB_DeactivateEndpoint+0x374>)
 80093ae:	430a      	orrs	r2, r1
 80093b0:	b292      	uxth	r2, r2
 80093b2:	801a      	strh	r2, [r3, #0]
 80093b4:	e08f      	b.n	80094d6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	18d2      	adds	r2, r2, r3
 80093c0:	212e      	movs	r1, #46	; 0x2e
 80093c2:	187b      	adds	r3, r7, r1
 80093c4:	8812      	ldrh	r2, [r2, #0]
 80093c6:	801a      	strh	r2, [r3, #0]
 80093c8:	187b      	adds	r3, r7, r1
 80093ca:	881a      	ldrh	r2, [r3, #0]
 80093cc:	2380      	movs	r3, #128	; 0x80
 80093ce:	01db      	lsls	r3, r3, #7
 80093d0:	4013      	ands	r3, r2
 80093d2:	d016      	beq.n	8009402 <USB_DeactivateEndpoint+0x28a>
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	18d3      	adds	r3, r2, r3
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	202c      	movs	r0, #44	; 0x2c
 80093e4:	183b      	adds	r3, r7, r0
 80093e6:	493e      	ldr	r1, [pc, #248]	; (80094e0 <USB_DeactivateEndpoint+0x368>)
 80093e8:	400a      	ands	r2, r1
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	18d3      	adds	r3, r2, r3
 80093f6:	183a      	adds	r2, r7, r0
 80093f8:	8812      	ldrh	r2, [r2, #0]
 80093fa:	493d      	ldr	r1, [pc, #244]	; (80094f0 <USB_DeactivateEndpoint+0x378>)
 80093fc:	430a      	orrs	r2, r1
 80093fe:	b292      	uxth	r2, r2
 8009400:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	18d2      	adds	r2, r2, r3
 800940c:	212a      	movs	r1, #42	; 0x2a
 800940e:	187b      	adds	r3, r7, r1
 8009410:	8812      	ldrh	r2, [r2, #0]
 8009412:	801a      	strh	r2, [r3, #0]
 8009414:	187b      	adds	r3, r7, r1
 8009416:	881b      	ldrh	r3, [r3, #0]
 8009418:	2240      	movs	r2, #64	; 0x40
 800941a:	4013      	ands	r3, r2
 800941c:	d016      	beq.n	800944c <USB_DeactivateEndpoint+0x2d4>
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	18d3      	adds	r3, r2, r3
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b29a      	uxth	r2, r3
 800942c:	2028      	movs	r0, #40	; 0x28
 800942e:	183b      	adds	r3, r7, r0
 8009430:	492b      	ldr	r1, [pc, #172]	; (80094e0 <USB_DeactivateEndpoint+0x368>)
 8009432:	400a      	ands	r2, r1
 8009434:	801a      	strh	r2, [r3, #0]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	18d3      	adds	r3, r2, r3
 8009440:	183a      	adds	r2, r7, r0
 8009442:	8812      	ldrh	r2, [r2, #0]
 8009444:	4927      	ldr	r1, [pc, #156]	; (80094e4 <USB_DeactivateEndpoint+0x36c>)
 8009446:	430a      	orrs	r2, r1
 8009448:	b292      	uxth	r2, r2
 800944a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	18d3      	adds	r3, r2, r3
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	b29a      	uxth	r2, r3
 800945a:	2026      	movs	r0, #38	; 0x26
 800945c:	183b      	adds	r3, r7, r0
 800945e:	4920      	ldr	r1, [pc, #128]	; (80094e0 <USB_DeactivateEndpoint+0x368>)
 8009460:	400a      	ands	r2, r1
 8009462:	801a      	strh	r2, [r3, #0]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	18d3      	adds	r3, r2, r3
 800946e:	183a      	adds	r2, r7, r0
 8009470:	8812      	ldrh	r2, [r2, #0]
 8009472:	491f      	ldr	r1, [pc, #124]	; (80094f0 <USB_DeactivateEndpoint+0x378>)
 8009474:	430a      	orrs	r2, r1
 8009476:	b292      	uxth	r2, r2
 8009478:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	18d3      	adds	r3, r2, r3
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	b29a      	uxth	r2, r3
 8009488:	2024      	movs	r0, #36	; 0x24
 800948a:	183b      	adds	r3, r7, r0
 800948c:	4916      	ldr	r1, [pc, #88]	; (80094e8 <USB_DeactivateEndpoint+0x370>)
 800948e:	400a      	ands	r2, r1
 8009490:	801a      	strh	r2, [r3, #0]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	18d3      	adds	r3, r2, r3
 800949c:	183a      	adds	r2, r7, r0
 800949e:	8812      	ldrh	r2, [r2, #0]
 80094a0:	4912      	ldr	r1, [pc, #72]	; (80094ec <USB_DeactivateEndpoint+0x374>)
 80094a2:	430a      	orrs	r2, r1
 80094a4:	b292      	uxth	r2, r2
 80094a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	18d3      	adds	r3, r2, r3
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	2022      	movs	r0, #34	; 0x22
 80094b8:	183b      	adds	r3, r7, r0
 80094ba:	490e      	ldr	r1, [pc, #56]	; (80094f4 <USB_DeactivateEndpoint+0x37c>)
 80094bc:	400a      	ands	r2, r1
 80094be:	801a      	strh	r2, [r3, #0]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	18d3      	adds	r3, r2, r3
 80094ca:	183a      	adds	r2, r7, r0
 80094cc:	8812      	ldrh	r2, [r2, #0]
 80094ce:	4907      	ldr	r1, [pc, #28]	; (80094ec <USB_DeactivateEndpoint+0x374>)
 80094d0:	430a      	orrs	r2, r1
 80094d2:	b292      	uxth	r2, r2
 80094d4:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	0018      	movs	r0, r3
 80094da:	46bd      	mov	sp, r7
 80094dc:	b00c      	add	sp, #48	; 0x30
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	ffff8f8f 	.word	0xffff8f8f
 80094e4:	ffff80c0 	.word	0xffff80c0
 80094e8:	ffff8fbf 	.word	0xffff8fbf
 80094ec:	ffff8080 	.word	0xffff8080
 80094f0:	ffffc080 	.word	0xffffc080
 80094f4:	ffffbf8f 	.word	0xffffbf8f

080094f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094f8:	b590      	push	{r4, r7, lr}
 80094fa:	b0c3      	sub	sp, #268	; 0x10c
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	785b      	ldrb	r3, [r3, #1]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d001      	beq.n	800950e <USB_EPStartXfer+0x16>
 800950a:	f000 fcef 	bl	8009eec <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	699a      	ldr	r2, [r3, #24]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	429a      	cmp	r2, r3
 8009518:	d905      	bls.n	8009526 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	1d7a      	adds	r2, r7, #5
 8009520:	32ff      	adds	r2, #255	; 0xff
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	e004      	b.n	8009530 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	1d7a      	adds	r2, r7, #5
 800952c:	32ff      	adds	r2, #255	; 0xff
 800952e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	7b1b      	ldrb	r3, [r3, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d125      	bne.n	8009584 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	6959      	ldr	r1, [r3, #20]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	88da      	ldrh	r2, [r3, #6]
 8009540:	1d7b      	adds	r3, r7, #5
 8009542:	33ff      	adds	r3, #255	; 0xff
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	b29b      	uxth	r3, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 f9c9 	bl	800a8e0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	613b      	str	r3, [r7, #16]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2250      	movs	r2, #80	; 0x50
 8009556:	5a9b      	ldrh	r3, [r3, r2]
 8009558:	b29b      	uxth	r3, r3
 800955a:	001a      	movs	r2, r3
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	189b      	adds	r3, r3, r2
 8009560:	613b      	str	r3, [r7, #16]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	00da      	lsls	r2, r3, #3
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	18d3      	adds	r3, r2, r3
 800956c:	4acc      	ldr	r2, [pc, #816]	; (80098a0 <USB_EPStartXfer+0x3a8>)
 800956e:	4694      	mov	ip, r2
 8009570:	4463      	add	r3, ip
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	1d7b      	adds	r3, r7, #5
 8009576:	33ff      	adds	r3, #255	; 0xff
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	b29a      	uxth	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	801a      	strh	r2, [r3, #0]
 8009580:	f000 fc8f 	bl	8009ea2 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	78db      	ldrb	r3, [r3, #3]
 8009588:	2b02      	cmp	r3, #2
 800958a:	d000      	beq.n	800958e <USB_EPStartXfer+0x96>
 800958c:	e33a      	b.n	8009c04 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	6a1a      	ldr	r2, [r3, #32]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	429a      	cmp	r2, r3
 8009598:	d800      	bhi.n	800959c <USB_EPStartXfer+0xa4>
 800959a:	e2df      	b.n	8009b5c <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	18d3      	adds	r3, r2, r3
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	2056      	movs	r0, #86	; 0x56
 80095ac:	183b      	adds	r3, r7, r0
 80095ae:	49bd      	ldr	r1, [pc, #756]	; (80098a4 <USB_EPStartXfer+0x3ac>)
 80095b0:	400a      	ands	r2, r1
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	18d3      	adds	r3, r2, r3
 80095be:	183a      	adds	r2, r7, r0
 80095c0:	8812      	ldrh	r2, [r2, #0]
 80095c2:	49b9      	ldr	r1, [pc, #740]	; (80098a8 <USB_EPStartXfer+0x3b0>)
 80095c4:	430a      	orrs	r2, r1
 80095c6:	b292      	uxth	r2, r2
 80095c8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	6a1a      	ldr	r2, [r3, #32]
 80095ce:	1d7b      	adds	r3, r7, #5
 80095d0:	33ff      	adds	r3, #255	; 0xff
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	1ad2      	subs	r2, r2, r3
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	18d3      	adds	r3, r2, r3
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	001a      	movs	r2, r3
 80095ea:	2340      	movs	r3, #64	; 0x40
 80095ec:	4013      	ands	r3, r2
 80095ee:	d100      	bne.n	80095f2 <USB_EPStartXfer+0xfa>
 80095f0:	e162      	b.n	80098b8 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	633b      	str	r3, [r7, #48]	; 0x30
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	785b      	ldrb	r3, [r3, #1]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d16a      	bne.n	80096d4 <USB_EPStartXfer+0x1dc>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	62bb      	str	r3, [r7, #40]	; 0x28
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2250      	movs	r2, #80	; 0x50
 8009606:	5a9b      	ldrh	r3, [r3, r2]
 8009608:	b29b      	uxth	r3, r3
 800960a:	001a      	movs	r2, r3
 800960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960e:	189b      	adds	r3, r3, r2
 8009610:	62bb      	str	r3, [r7, #40]	; 0x28
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	00da      	lsls	r2, r3, #3
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	18d3      	adds	r3, r2, r3
 800961c:	4aa3      	ldr	r2, [pc, #652]	; (80098ac <USB_EPStartXfer+0x3b4>)
 800961e:	4694      	mov	ip, r2
 8009620:	4463      	add	r3, ip
 8009622:	627b      	str	r3, [r7, #36]	; 0x24
 8009624:	1d7b      	adds	r3, r7, #5
 8009626:	33ff      	adds	r3, #255	; 0xff
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d110      	bne.n	8009650 <USB_EPStartXfer+0x158>
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	4a9e      	ldr	r2, [pc, #632]	; (80098b0 <USB_EPStartXfer+0x3b8>)
 8009636:	4013      	ands	r3, r2
 8009638:	b29a      	uxth	r2, r3
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	801a      	strh	r2, [r3, #0]
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	b29b      	uxth	r3, r3
 8009644:	4a9b      	ldr	r2, [pc, #620]	; (80098b4 <USB_EPStartXfer+0x3bc>)
 8009646:	4313      	orrs	r3, r2
 8009648:	b29a      	uxth	r2, r3
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	801a      	strh	r2, [r3, #0]
 800964e:	e05c      	b.n	800970a <USB_EPStartXfer+0x212>
 8009650:	1d7b      	adds	r3, r7, #5
 8009652:	33ff      	adds	r3, #255	; 0xff
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b3e      	cmp	r3, #62	; 0x3e
 8009658:	d81c      	bhi.n	8009694 <USB_EPStartXfer+0x19c>
 800965a:	1d7b      	adds	r3, r7, #5
 800965c:	33ff      	adds	r3, #255	; 0xff
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	085b      	lsrs	r3, r3, #1
 8009662:	1c7a      	adds	r2, r7, #1
 8009664:	32ff      	adds	r2, #255	; 0xff
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	1d7b      	adds	r3, r7, #5
 800966a:	33ff      	adds	r3, #255	; 0xff
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2201      	movs	r2, #1
 8009670:	4013      	ands	r3, r2
 8009672:	d006      	beq.n	8009682 <USB_EPStartXfer+0x18a>
 8009674:	1c7b      	adds	r3, r7, #1
 8009676:	33ff      	adds	r3, #255	; 0xff
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	1c7a      	adds	r2, r7, #1
 800967e:	32ff      	adds	r2, #255	; 0xff
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	1c7b      	adds	r3, r7, #1
 8009684:	33ff      	adds	r3, #255	; 0xff
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	b29b      	uxth	r3, r3
 800968a:	029b      	lsls	r3, r3, #10
 800968c:	b29a      	uxth	r2, r3
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	801a      	strh	r2, [r3, #0]
 8009692:	e03a      	b.n	800970a <USB_EPStartXfer+0x212>
 8009694:	1d7b      	adds	r3, r7, #5
 8009696:	33ff      	adds	r3, #255	; 0xff
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	095b      	lsrs	r3, r3, #5
 800969c:	1c7a      	adds	r2, r7, #1
 800969e:	32ff      	adds	r2, #255	; 0xff
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	1d7b      	adds	r3, r7, #5
 80096a4:	33ff      	adds	r3, #255	; 0xff
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	221f      	movs	r2, #31
 80096aa:	4013      	ands	r3, r2
 80096ac:	d106      	bne.n	80096bc <USB_EPStartXfer+0x1c4>
 80096ae:	1c7b      	adds	r3, r7, #1
 80096b0:	33ff      	adds	r3, #255	; 0xff
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3b01      	subs	r3, #1
 80096b6:	1c7a      	adds	r2, r7, #1
 80096b8:	32ff      	adds	r2, #255	; 0xff
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	1c7b      	adds	r3, r7, #1
 80096be:	33ff      	adds	r3, #255	; 0xff
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	029b      	lsls	r3, r3, #10
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	4a7a      	ldr	r2, [pc, #488]	; (80098b4 <USB_EPStartXfer+0x3bc>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d0:	801a      	strh	r2, [r3, #0]
 80096d2:	e01a      	b.n	800970a <USB_EPStartXfer+0x212>
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	785b      	ldrb	r3, [r3, #1]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d116      	bne.n	800970a <USB_EPStartXfer+0x212>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2250      	movs	r2, #80	; 0x50
 80096e0:	5a9b      	ldrh	r3, [r3, r2]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	001a      	movs	r2, r3
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	189b      	adds	r3, r3, r2
 80096ea:	633b      	str	r3, [r7, #48]	; 0x30
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	00da      	lsls	r2, r3, #3
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	18d3      	adds	r3, r2, r3
 80096f6:	4a6d      	ldr	r2, [pc, #436]	; (80098ac <USB_EPStartXfer+0x3b4>)
 80096f8:	4694      	mov	ip, r2
 80096fa:	4463      	add	r3, ip
 80096fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096fe:	1d7b      	adds	r3, r7, #5
 8009700:	33ff      	adds	r3, #255	; 0xff
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	b29a      	uxth	r2, r3
 8009706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009708:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800970a:	2076      	movs	r0, #118	; 0x76
 800970c:	183b      	adds	r3, r7, r0
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	8952      	ldrh	r2, [r2, #10]
 8009712:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	6959      	ldr	r1, [r3, #20]
 8009718:	1d7b      	adds	r3, r7, #5
 800971a:	33ff      	adds	r3, #255	; 0xff
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	b29c      	uxth	r4, r3
 8009720:	183b      	adds	r3, r7, r0
 8009722:	881a      	ldrh	r2, [r3, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	0023      	movs	r3, r4
 8009728:	f001 f8da 	bl	800a8e0 <USB_WritePMA>
            ep->xfer_buff += len;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	695a      	ldr	r2, [r3, #20]
 8009730:	1d7b      	adds	r3, r7, #5
 8009732:	33ff      	adds	r3, #255	; 0xff
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	18d2      	adds	r2, r2, r3
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	6a1a      	ldr	r2, [r3, #32]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	429a      	cmp	r2, r3
 8009746:	d908      	bls.n	800975a <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	6a1a      	ldr	r2, [r3, #32]
 800974c:	1d7b      	adds	r3, r7, #5
 800974e:	33ff      	adds	r3, #255	; 0xff
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	1ad2      	subs	r2, r2, r3
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	621a      	str	r2, [r3, #32]
 8009758:	e007      	b.n	800976a <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	1d7a      	adds	r2, r7, #5
 8009760:	32ff      	adds	r2, #255	; 0xff
 8009762:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2200      	movs	r2, #0
 8009768:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d166      	bne.n	8009840 <USB_EPStartXfer+0x348>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	61bb      	str	r3, [r7, #24]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2250      	movs	r2, #80	; 0x50
 800977a:	5a9b      	ldrh	r3, [r3, r2]
 800977c:	b29b      	uxth	r3, r3
 800977e:	001a      	movs	r2, r3
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	189b      	adds	r3, r3, r2
 8009784:	61bb      	str	r3, [r7, #24]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	00da      	lsls	r2, r3, #3
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	18d3      	adds	r3, r2, r3
 8009790:	4a43      	ldr	r2, [pc, #268]	; (80098a0 <USB_EPStartXfer+0x3a8>)
 8009792:	4694      	mov	ip, r2
 8009794:	4463      	add	r3, ip
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	1d7b      	adds	r3, r7, #5
 800979a:	33ff      	adds	r3, #255	; 0xff
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d110      	bne.n	80097c4 <USB_EPStartXfer+0x2cc>
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	4a41      	ldr	r2, [pc, #260]	; (80098b0 <USB_EPStartXfer+0x3b8>)
 80097aa:	4013      	ands	r3, r2
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	801a      	strh	r2, [r3, #0]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	4a3e      	ldr	r2, [pc, #248]	; (80098b4 <USB_EPStartXfer+0x3bc>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	b29a      	uxth	r2, r3
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	801a      	strh	r2, [r3, #0]
 80097c2:	e05a      	b.n	800987a <USB_EPStartXfer+0x382>
 80097c4:	1d7b      	adds	r3, r7, #5
 80097c6:	33ff      	adds	r3, #255	; 0xff
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b3e      	cmp	r3, #62	; 0x3e
 80097cc:	d81a      	bhi.n	8009804 <USB_EPStartXfer+0x30c>
 80097ce:	1d7b      	adds	r3, r7, #5
 80097d0:	33ff      	adds	r3, #255	; 0xff
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	085b      	lsrs	r3, r3, #1
 80097d6:	21fc      	movs	r1, #252	; 0xfc
 80097d8:	187a      	adds	r2, r7, r1
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	1d7b      	adds	r3, r7, #5
 80097de:	33ff      	adds	r3, #255	; 0xff
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2201      	movs	r2, #1
 80097e4:	4013      	ands	r3, r2
 80097e6:	d004      	beq.n	80097f2 <USB_EPStartXfer+0x2fa>
 80097e8:	187b      	adds	r3, r7, r1
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3301      	adds	r3, #1
 80097ee:	187a      	adds	r2, r7, r1
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	23fc      	movs	r3, #252	; 0xfc
 80097f4:	18fb      	adds	r3, r7, r3
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	029b      	lsls	r3, r3, #10
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	801a      	strh	r2, [r3, #0]
 8009802:	e03a      	b.n	800987a <USB_EPStartXfer+0x382>
 8009804:	1d7b      	adds	r3, r7, #5
 8009806:	33ff      	adds	r3, #255	; 0xff
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	095b      	lsrs	r3, r3, #5
 800980c:	21fc      	movs	r1, #252	; 0xfc
 800980e:	187a      	adds	r2, r7, r1
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	1d7b      	adds	r3, r7, #5
 8009814:	33ff      	adds	r3, #255	; 0xff
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	221f      	movs	r2, #31
 800981a:	4013      	ands	r3, r2
 800981c:	d104      	bne.n	8009828 <USB_EPStartXfer+0x330>
 800981e:	187b      	adds	r3, r7, r1
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3b01      	subs	r3, #1
 8009824:	187a      	adds	r2, r7, r1
 8009826:	6013      	str	r3, [r2, #0]
 8009828:	23fc      	movs	r3, #252	; 0xfc
 800982a:	18fb      	adds	r3, r7, r3
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	b29b      	uxth	r3, r3
 8009830:	029b      	lsls	r3, r3, #10
 8009832:	b29b      	uxth	r3, r3
 8009834:	4a1f      	ldr	r2, [pc, #124]	; (80098b4 <USB_EPStartXfer+0x3bc>)
 8009836:	4313      	orrs	r3, r2
 8009838:	b29a      	uxth	r2, r3
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	801a      	strh	r2, [r3, #0]
 800983e:	e01c      	b.n	800987a <USB_EPStartXfer+0x382>
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	785b      	ldrb	r3, [r3, #1]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d118      	bne.n	800987a <USB_EPStartXfer+0x382>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	623b      	str	r3, [r7, #32]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2250      	movs	r2, #80	; 0x50
 8009850:	5a9b      	ldrh	r3, [r3, r2]
 8009852:	b29b      	uxth	r3, r3
 8009854:	001a      	movs	r2, r3
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	189b      	adds	r3, r3, r2
 800985a:	623b      	str	r3, [r7, #32]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	00da      	lsls	r2, r3, #3
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	18d3      	adds	r3, r2, r3
 8009866:	4a0e      	ldr	r2, [pc, #56]	; (80098a0 <USB_EPStartXfer+0x3a8>)
 8009868:	4694      	mov	ip, r2
 800986a:	4463      	add	r3, ip
 800986c:	61fb      	str	r3, [r7, #28]
 800986e:	1d7b      	adds	r3, r7, #5
 8009870:	33ff      	adds	r3, #255	; 0xff
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	b29a      	uxth	r2, r3
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800987a:	2076      	movs	r0, #118	; 0x76
 800987c:	183b      	adds	r3, r7, r0
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	8912      	ldrh	r2, [r2, #8]
 8009882:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	6959      	ldr	r1, [r3, #20]
 8009888:	1d7b      	adds	r3, r7, #5
 800988a:	33ff      	adds	r3, #255	; 0xff
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	b29c      	uxth	r4, r3
 8009890:	183b      	adds	r3, r7, r0
 8009892:	881a      	ldrh	r2, [r3, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	0023      	movs	r3, r4
 8009898:	f001 f822 	bl	800a8e0 <USB_WritePMA>
 800989c:	e301      	b.n	8009ea2 <USB_EPStartXfer+0x9aa>
 800989e:	46c0      	nop			; (mov r8, r8)
 80098a0:	00000402 	.word	0x00000402
 80098a4:	ffff8f8f 	.word	0xffff8f8f
 80098a8:	ffff8180 	.word	0xffff8180
 80098ac:	00000406 	.word	0x00000406
 80098b0:	ffff83ff 	.word	0xffff83ff
 80098b4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	785b      	ldrb	r3, [r3, #1]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d166      	bne.n	800998e <USB_EPStartXfer+0x496>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2250      	movs	r2, #80	; 0x50
 80098c8:	5a9b      	ldrh	r3, [r3, r2]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	001a      	movs	r2, r3
 80098ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d0:	189b      	adds	r3, r3, r2
 80098d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	00da      	lsls	r2, r3, #3
 80098da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098dc:	18d3      	adds	r3, r2, r3
 80098de:	4ac3      	ldr	r2, [pc, #780]	; (8009bec <USB_EPStartXfer+0x6f4>)
 80098e0:	4694      	mov	ip, r2
 80098e2:	4463      	add	r3, ip
 80098e4:	647b      	str	r3, [r7, #68]	; 0x44
 80098e6:	1d7b      	adds	r3, r7, #5
 80098e8:	33ff      	adds	r3, #255	; 0xff
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d110      	bne.n	8009912 <USB_EPStartXfer+0x41a>
 80098f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	4abe      	ldr	r2, [pc, #760]	; (8009bf0 <USB_EPStartXfer+0x6f8>)
 80098f8:	4013      	ands	r3, r2
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098fe:	801a      	strh	r2, [r3, #0]
 8009900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	b29b      	uxth	r3, r3
 8009906:	4abb      	ldr	r2, [pc, #748]	; (8009bf4 <USB_EPStartXfer+0x6fc>)
 8009908:	4313      	orrs	r3, r2
 800990a:	b29a      	uxth	r2, r3
 800990c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800990e:	801a      	strh	r2, [r3, #0]
 8009910:	e05a      	b.n	80099c8 <USB_EPStartXfer+0x4d0>
 8009912:	1d7b      	adds	r3, r7, #5
 8009914:	33ff      	adds	r3, #255	; 0xff
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b3e      	cmp	r3, #62	; 0x3e
 800991a:	d81a      	bhi.n	8009952 <USB_EPStartXfer+0x45a>
 800991c:	1d7b      	adds	r3, r7, #5
 800991e:	33ff      	adds	r3, #255	; 0xff
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	085b      	lsrs	r3, r3, #1
 8009924:	21f8      	movs	r1, #248	; 0xf8
 8009926:	187a      	adds	r2, r7, r1
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	1d7b      	adds	r3, r7, #5
 800992c:	33ff      	adds	r3, #255	; 0xff
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2201      	movs	r2, #1
 8009932:	4013      	ands	r3, r2
 8009934:	d004      	beq.n	8009940 <USB_EPStartXfer+0x448>
 8009936:	187b      	adds	r3, r7, r1
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3301      	adds	r3, #1
 800993c:	187a      	adds	r2, r7, r1
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	23f8      	movs	r3, #248	; 0xf8
 8009942:	18fb      	adds	r3, r7, r3
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	b29b      	uxth	r3, r3
 8009948:	029b      	lsls	r3, r3, #10
 800994a:	b29a      	uxth	r2, r3
 800994c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800994e:	801a      	strh	r2, [r3, #0]
 8009950:	e03a      	b.n	80099c8 <USB_EPStartXfer+0x4d0>
 8009952:	1d7b      	adds	r3, r7, #5
 8009954:	33ff      	adds	r3, #255	; 0xff
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	095b      	lsrs	r3, r3, #5
 800995a:	21f8      	movs	r1, #248	; 0xf8
 800995c:	187a      	adds	r2, r7, r1
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	1d7b      	adds	r3, r7, #5
 8009962:	33ff      	adds	r3, #255	; 0xff
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	221f      	movs	r2, #31
 8009968:	4013      	ands	r3, r2
 800996a:	d104      	bne.n	8009976 <USB_EPStartXfer+0x47e>
 800996c:	187b      	adds	r3, r7, r1
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	3b01      	subs	r3, #1
 8009972:	187a      	adds	r2, r7, r1
 8009974:	6013      	str	r3, [r2, #0]
 8009976:	23f8      	movs	r3, #248	; 0xf8
 8009978:	18fb      	adds	r3, r7, r3
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	b29b      	uxth	r3, r3
 800997e:	029b      	lsls	r3, r3, #10
 8009980:	b29b      	uxth	r3, r3
 8009982:	4a9c      	ldr	r2, [pc, #624]	; (8009bf4 <USB_EPStartXfer+0x6fc>)
 8009984:	4313      	orrs	r3, r2
 8009986:	b29a      	uxth	r2, r3
 8009988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800998a:	801a      	strh	r2, [r3, #0]
 800998c:	e01c      	b.n	80099c8 <USB_EPStartXfer+0x4d0>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	785b      	ldrb	r3, [r3, #1]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d118      	bne.n	80099c8 <USB_EPStartXfer+0x4d0>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	653b      	str	r3, [r7, #80]	; 0x50
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2250      	movs	r2, #80	; 0x50
 800999e:	5a9b      	ldrh	r3, [r3, r2]
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	001a      	movs	r2, r3
 80099a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099a6:	189b      	adds	r3, r3, r2
 80099a8:	653b      	str	r3, [r7, #80]	; 0x50
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	00da      	lsls	r2, r3, #3
 80099b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099b2:	18d3      	adds	r3, r2, r3
 80099b4:	4a8d      	ldr	r2, [pc, #564]	; (8009bec <USB_EPStartXfer+0x6f4>)
 80099b6:	4694      	mov	ip, r2
 80099b8:	4463      	add	r3, ip
 80099ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099bc:	1d7b      	adds	r3, r7, #5
 80099be:	33ff      	adds	r3, #255	; 0xff
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80099c8:	2076      	movs	r0, #118	; 0x76
 80099ca:	183b      	adds	r3, r7, r0
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	8912      	ldrh	r2, [r2, #8]
 80099d0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	6959      	ldr	r1, [r3, #20]
 80099d6:	1d7b      	adds	r3, r7, #5
 80099d8:	33ff      	adds	r3, #255	; 0xff
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	b29c      	uxth	r4, r3
 80099de:	183b      	adds	r3, r7, r0
 80099e0:	881a      	ldrh	r2, [r3, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	0023      	movs	r3, r4
 80099e6:	f000 ff7b 	bl	800a8e0 <USB_WritePMA>
            ep->xfer_buff += len;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	695a      	ldr	r2, [r3, #20]
 80099ee:	1d7b      	adds	r3, r7, #5
 80099f0:	33ff      	adds	r3, #255	; 0xff
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	18d2      	adds	r2, r2, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	6a1a      	ldr	r2, [r3, #32]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d908      	bls.n	8009a18 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	6a1a      	ldr	r2, [r3, #32]
 8009a0a:	1d7b      	adds	r3, r7, #5
 8009a0c:	33ff      	adds	r3, #255	; 0xff
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	1ad2      	subs	r2, r2, r3
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	621a      	str	r2, [r3, #32]
 8009a16:	e007      	b.n	8009a28 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	1d7a      	adds	r2, r7, #5
 8009a1e:	32ff      	adds	r2, #255	; 0xff
 8009a20:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2200      	movs	r2, #0
 8009a26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	785b      	ldrb	r3, [r3, #1]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d166      	bne.n	8009b02 <USB_EPStartXfer+0x60a>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2250      	movs	r2, #80	; 0x50
 8009a3c:	5a9b      	ldrh	r3, [r3, r2]
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	001a      	movs	r2, r3
 8009a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a44:	189b      	adds	r3, r3, r2
 8009a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	00da      	lsls	r2, r3, #3
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	18d3      	adds	r3, r2, r3
 8009a52:	4a69      	ldr	r2, [pc, #420]	; (8009bf8 <USB_EPStartXfer+0x700>)
 8009a54:	4694      	mov	ip, r2
 8009a56:	4463      	add	r3, ip
 8009a58:	637b      	str	r3, [r7, #52]	; 0x34
 8009a5a:	1d7b      	adds	r3, r7, #5
 8009a5c:	33ff      	adds	r3, #255	; 0xff
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d110      	bne.n	8009a86 <USB_EPStartXfer+0x58e>
 8009a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	4a61      	ldr	r2, [pc, #388]	; (8009bf0 <USB_EPStartXfer+0x6f8>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a72:	801a      	strh	r2, [r3, #0]
 8009a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	4a5e      	ldr	r2, [pc, #376]	; (8009bf4 <USB_EPStartXfer+0x6fc>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	e058      	b.n	8009b38 <USB_EPStartXfer+0x640>
 8009a86:	1d7b      	adds	r3, r7, #5
 8009a88:	33ff      	adds	r3, #255	; 0xff
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b3e      	cmp	r3, #62	; 0x3e
 8009a8e:	d81a      	bhi.n	8009ac6 <USB_EPStartXfer+0x5ce>
 8009a90:	1d7b      	adds	r3, r7, #5
 8009a92:	33ff      	adds	r3, #255	; 0xff
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	085b      	lsrs	r3, r3, #1
 8009a98:	21f4      	movs	r1, #244	; 0xf4
 8009a9a:	187a      	adds	r2, r7, r1
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	1d7b      	adds	r3, r7, #5
 8009aa0:	33ff      	adds	r3, #255	; 0xff
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	d004      	beq.n	8009ab4 <USB_EPStartXfer+0x5bc>
 8009aaa:	187b      	adds	r3, r7, r1
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	187a      	adds	r2, r7, r1
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	23f4      	movs	r3, #244	; 0xf4
 8009ab6:	18fb      	adds	r3, r7, r3
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	029b      	lsls	r3, r3, #10
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	e038      	b.n	8009b38 <USB_EPStartXfer+0x640>
 8009ac6:	1d7b      	adds	r3, r7, #5
 8009ac8:	33ff      	adds	r3, #255	; 0xff
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	095b      	lsrs	r3, r3, #5
 8009ace:	21f4      	movs	r1, #244	; 0xf4
 8009ad0:	187a      	adds	r2, r7, r1
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	1d7b      	adds	r3, r7, #5
 8009ad6:	33ff      	adds	r3, #255	; 0xff
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	221f      	movs	r2, #31
 8009adc:	4013      	ands	r3, r2
 8009ade:	d104      	bne.n	8009aea <USB_EPStartXfer+0x5f2>
 8009ae0:	187b      	adds	r3, r7, r1
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	187a      	adds	r2, r7, r1
 8009ae8:	6013      	str	r3, [r2, #0]
 8009aea:	23f4      	movs	r3, #244	; 0xf4
 8009aec:	18fb      	adds	r3, r7, r3
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	029b      	lsls	r3, r3, #10
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	4a3f      	ldr	r2, [pc, #252]	; (8009bf4 <USB_EPStartXfer+0x6fc>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afe:	801a      	strh	r2, [r3, #0]
 8009b00:	e01a      	b.n	8009b38 <USB_EPStartXfer+0x640>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d116      	bne.n	8009b38 <USB_EPStartXfer+0x640>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2250      	movs	r2, #80	; 0x50
 8009b0e:	5a9b      	ldrh	r3, [r3, r2]
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	001a      	movs	r2, r3
 8009b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b16:	189b      	adds	r3, r3, r2
 8009b18:	643b      	str	r3, [r7, #64]	; 0x40
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	00da      	lsls	r2, r3, #3
 8009b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b22:	18d3      	adds	r3, r2, r3
 8009b24:	4a34      	ldr	r2, [pc, #208]	; (8009bf8 <USB_EPStartXfer+0x700>)
 8009b26:	4694      	mov	ip, r2
 8009b28:	4463      	add	r3, ip
 8009b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b2c:	1d7b      	adds	r3, r7, #5
 8009b2e:	33ff      	adds	r3, #255	; 0xff
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b38:	2076      	movs	r0, #118	; 0x76
 8009b3a:	183b      	adds	r3, r7, r0
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	8952      	ldrh	r2, [r2, #10]
 8009b40:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	6959      	ldr	r1, [r3, #20]
 8009b46:	1d7b      	adds	r3, r7, #5
 8009b48:	33ff      	adds	r3, #255	; 0xff
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	b29c      	uxth	r4, r3
 8009b4e:	183b      	adds	r3, r7, r0
 8009b50:	881a      	ldrh	r2, [r3, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	0023      	movs	r3, r4
 8009b56:	f000 fec3 	bl	800a8e0 <USB_WritePMA>
 8009b5a:	e1a2      	b.n	8009ea2 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	1d7a      	adds	r2, r7, #5
 8009b62:	32ff      	adds	r2, #255	; 0xff
 8009b64:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	18d3      	adds	r3, r2, r3
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	2062      	movs	r0, #98	; 0x62
 8009b76:	183b      	adds	r3, r7, r0
 8009b78:	4920      	ldr	r1, [pc, #128]	; (8009bfc <USB_EPStartXfer+0x704>)
 8009b7a:	400a      	ands	r2, r1
 8009b7c:	801a      	strh	r2, [r3, #0]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	18d3      	adds	r3, r2, r3
 8009b88:	183a      	adds	r2, r7, r0
 8009b8a:	8812      	ldrh	r2, [r2, #0]
 8009b8c:	491c      	ldr	r1, [pc, #112]	; (8009c00 <USB_EPStartXfer+0x708>)
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	b292      	uxth	r2, r2
 8009b92:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2250      	movs	r2, #80	; 0x50
 8009b9c:	5a9b      	ldrh	r3, [r3, r2]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	001a      	movs	r2, r3
 8009ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ba4:	189b      	adds	r3, r3, r2
 8009ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	00da      	lsls	r2, r3, #3
 8009bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bb0:	18d3      	adds	r3, r2, r3
 8009bb2:	4a0e      	ldr	r2, [pc, #56]	; (8009bec <USB_EPStartXfer+0x6f4>)
 8009bb4:	4694      	mov	ip, r2
 8009bb6:	4463      	add	r3, ip
 8009bb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bba:	1d7b      	adds	r3, r7, #5
 8009bbc:	33ff      	adds	r3, #255	; 0xff
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009bc6:	2076      	movs	r0, #118	; 0x76
 8009bc8:	183b      	adds	r3, r7, r0
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	8912      	ldrh	r2, [r2, #8]
 8009bce:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	6959      	ldr	r1, [r3, #20]
 8009bd4:	1d7b      	adds	r3, r7, #5
 8009bd6:	33ff      	adds	r3, #255	; 0xff
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	b29c      	uxth	r4, r3
 8009bdc:	183b      	adds	r3, r7, r0
 8009bde:	881a      	ldrh	r2, [r3, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	0023      	movs	r3, r4
 8009be4:	f000 fe7c 	bl	800a8e0 <USB_WritePMA>
 8009be8:	e15b      	b.n	8009ea2 <USB_EPStartXfer+0x9aa>
 8009bea:	46c0      	nop			; (mov r8, r8)
 8009bec:	00000402 	.word	0x00000402
 8009bf0:	ffff83ff 	.word	0xffff83ff
 8009bf4:	ffff8000 	.word	0xffff8000
 8009bf8:	00000406 	.word	0x00000406
 8009bfc:	ffff8e8f 	.word	0xffff8e8f
 8009c00:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	6a1a      	ldr	r2, [r3, #32]
 8009c08:	1d7b      	adds	r3, r7, #5
 8009c0a:	33ff      	adds	r3, #255	; 0xff
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	1ad2      	subs	r2, r2, r3
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	18d3      	adds	r3, r2, r3
 8009c1e:	881b      	ldrh	r3, [r3, #0]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	001a      	movs	r2, r3
 8009c24:	2340      	movs	r3, #64	; 0x40
 8009c26:	4013      	ands	r3, r2
 8009c28:	d100      	bne.n	8009c2c <USB_EPStartXfer+0x734>
 8009c2a:	e099      	b.n	8009d60 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	673b      	str	r3, [r7, #112]	; 0x70
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d166      	bne.n	8009d06 <USB_EPStartXfer+0x80e>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2250      	movs	r2, #80	; 0x50
 8009c40:	5a9b      	ldrh	r3, [r3, r2]
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	001a      	movs	r2, r3
 8009c46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c48:	189b      	adds	r3, r3, r2
 8009c4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	00da      	lsls	r2, r3, #3
 8009c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c54:	18d3      	adds	r3, r2, r3
 8009c56:	4ad0      	ldr	r2, [pc, #832]	; (8009f98 <USB_EPStartXfer+0xaa0>)
 8009c58:	4694      	mov	ip, r2
 8009c5a:	4463      	add	r3, ip
 8009c5c:	667b      	str	r3, [r7, #100]	; 0x64
 8009c5e:	1d7b      	adds	r3, r7, #5
 8009c60:	33ff      	adds	r3, #255	; 0xff
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d110      	bne.n	8009c8a <USB_EPStartXfer+0x792>
 8009c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	4acb      	ldr	r2, [pc, #812]	; (8009f9c <USB_EPStartXfer+0xaa4>)
 8009c70:	4013      	ands	r3, r2
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c76:	801a      	strh	r2, [r3, #0]
 8009c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	4ac8      	ldr	r2, [pc, #800]	; (8009fa0 <USB_EPStartXfer+0xaa8>)
 8009c80:	4313      	orrs	r3, r2
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c86:	801a      	strh	r2, [r3, #0]
 8009c88:	e058      	b.n	8009d3c <USB_EPStartXfer+0x844>
 8009c8a:	1d7b      	adds	r3, r7, #5
 8009c8c:	33ff      	adds	r3, #255	; 0xff
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b3e      	cmp	r3, #62	; 0x3e
 8009c92:	d81a      	bhi.n	8009cca <USB_EPStartXfer+0x7d2>
 8009c94:	1d7b      	adds	r3, r7, #5
 8009c96:	33ff      	adds	r3, #255	; 0xff
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	085b      	lsrs	r3, r3, #1
 8009c9c:	21f0      	movs	r1, #240	; 0xf0
 8009c9e:	187a      	adds	r2, r7, r1
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	1d7b      	adds	r3, r7, #5
 8009ca4:	33ff      	adds	r3, #255	; 0xff
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	4013      	ands	r3, r2
 8009cac:	d004      	beq.n	8009cb8 <USB_EPStartXfer+0x7c0>
 8009cae:	187b      	adds	r3, r7, r1
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	187a      	adds	r2, r7, r1
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	23f0      	movs	r3, #240	; 0xf0
 8009cba:	18fb      	adds	r3, r7, r3
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	029b      	lsls	r3, r3, #10
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cc6:	801a      	strh	r2, [r3, #0]
 8009cc8:	e038      	b.n	8009d3c <USB_EPStartXfer+0x844>
 8009cca:	1d7b      	adds	r3, r7, #5
 8009ccc:	33ff      	adds	r3, #255	; 0xff
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	095b      	lsrs	r3, r3, #5
 8009cd2:	21f0      	movs	r1, #240	; 0xf0
 8009cd4:	187a      	adds	r2, r7, r1
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	1d7b      	adds	r3, r7, #5
 8009cda:	33ff      	adds	r3, #255	; 0xff
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	221f      	movs	r2, #31
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	d104      	bne.n	8009cee <USB_EPStartXfer+0x7f6>
 8009ce4:	187b      	adds	r3, r7, r1
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	187a      	adds	r2, r7, r1
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	23f0      	movs	r3, #240	; 0xf0
 8009cf0:	18fb      	adds	r3, r7, r3
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	029b      	lsls	r3, r3, #10
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	4aa9      	ldr	r2, [pc, #676]	; (8009fa0 <USB_EPStartXfer+0xaa8>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d02:	801a      	strh	r2, [r3, #0]
 8009d04:	e01a      	b.n	8009d3c <USB_EPStartXfer+0x844>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	785b      	ldrb	r3, [r3, #1]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d116      	bne.n	8009d3c <USB_EPStartXfer+0x844>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2250      	movs	r2, #80	; 0x50
 8009d12:	5a9b      	ldrh	r3, [r3, r2]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	001a      	movs	r2, r3
 8009d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d1a:	189b      	adds	r3, r3, r2
 8009d1c:	673b      	str	r3, [r7, #112]	; 0x70
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	00da      	lsls	r2, r3, #3
 8009d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d26:	18d3      	adds	r3, r2, r3
 8009d28:	4a9b      	ldr	r2, [pc, #620]	; (8009f98 <USB_EPStartXfer+0xaa0>)
 8009d2a:	4694      	mov	ip, r2
 8009d2c:	4463      	add	r3, ip
 8009d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d30:	1d7b      	adds	r3, r7, #5
 8009d32:	33ff      	adds	r3, #255	; 0xff
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d3c:	2076      	movs	r0, #118	; 0x76
 8009d3e:	183b      	adds	r3, r7, r0
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	8952      	ldrh	r2, [r2, #10]
 8009d44:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	6959      	ldr	r1, [r3, #20]
 8009d4a:	1d7b      	adds	r3, r7, #5
 8009d4c:	33ff      	adds	r3, #255	; 0xff
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	b29c      	uxth	r4, r3
 8009d52:	183b      	adds	r3, r7, r0
 8009d54:	881a      	ldrh	r2, [r3, #0]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	0023      	movs	r3, r4
 8009d5a:	f000 fdc1 	bl	800a8e0 <USB_WritePMA>
 8009d5e:	e0a0      	b.n	8009ea2 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	785b      	ldrb	r3, [r3, #1]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d166      	bne.n	8009e36 <USB_EPStartXfer+0x93e>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2250      	movs	r2, #80	; 0x50
 8009d70:	5a9b      	ldrh	r3, [r3, r2]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	001a      	movs	r2, r3
 8009d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d78:	189b      	adds	r3, r3, r2
 8009d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	00da      	lsls	r2, r3, #3
 8009d82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d84:	18d3      	adds	r3, r2, r3
 8009d86:	4a87      	ldr	r2, [pc, #540]	; (8009fa4 <USB_EPStartXfer+0xaac>)
 8009d88:	4694      	mov	ip, r2
 8009d8a:	4463      	add	r3, ip
 8009d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d8e:	1d7b      	adds	r3, r7, #5
 8009d90:	33ff      	adds	r3, #255	; 0xff
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d110      	bne.n	8009dba <USB_EPStartXfer+0x8c2>
 8009d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	4a7f      	ldr	r2, [pc, #508]	; (8009f9c <USB_EPStartXfer+0xaa4>)
 8009da0:	4013      	ands	r3, r2
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009da6:	801a      	strh	r2, [r3, #0]
 8009da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	4a7c      	ldr	r2, [pc, #496]	; (8009fa0 <USB_EPStartXfer+0xaa8>)
 8009db0:	4313      	orrs	r3, r2
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009db6:	801a      	strh	r2, [r3, #0]
 8009db8:	e062      	b.n	8009e80 <USB_EPStartXfer+0x988>
 8009dba:	1d7b      	adds	r3, r7, #5
 8009dbc:	33ff      	adds	r3, #255	; 0xff
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b3e      	cmp	r3, #62	; 0x3e
 8009dc2:	d81a      	bhi.n	8009dfa <USB_EPStartXfer+0x902>
 8009dc4:	1d7b      	adds	r3, r7, #5
 8009dc6:	33ff      	adds	r3, #255	; 0xff
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	21ec      	movs	r1, #236	; 0xec
 8009dce:	187a      	adds	r2, r7, r1
 8009dd0:	6013      	str	r3, [r2, #0]
 8009dd2:	1d7b      	adds	r3, r7, #5
 8009dd4:	33ff      	adds	r3, #255	; 0xff
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	4013      	ands	r3, r2
 8009ddc:	d004      	beq.n	8009de8 <USB_EPStartXfer+0x8f0>
 8009dde:	187b      	adds	r3, r7, r1
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3301      	adds	r3, #1
 8009de4:	187a      	adds	r2, r7, r1
 8009de6:	6013      	str	r3, [r2, #0]
 8009de8:	23ec      	movs	r3, #236	; 0xec
 8009dea:	18fb      	adds	r3, r7, r3
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	029b      	lsls	r3, r3, #10
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009df6:	801a      	strh	r2, [r3, #0]
 8009df8:	e042      	b.n	8009e80 <USB_EPStartXfer+0x988>
 8009dfa:	1d7b      	adds	r3, r7, #5
 8009dfc:	33ff      	adds	r3, #255	; 0xff
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	095b      	lsrs	r3, r3, #5
 8009e02:	21ec      	movs	r1, #236	; 0xec
 8009e04:	187a      	adds	r2, r7, r1
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	1d7b      	adds	r3, r7, #5
 8009e0a:	33ff      	adds	r3, #255	; 0xff
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	221f      	movs	r2, #31
 8009e10:	4013      	ands	r3, r2
 8009e12:	d104      	bne.n	8009e1e <USB_EPStartXfer+0x926>
 8009e14:	187b      	adds	r3, r7, r1
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	187a      	adds	r2, r7, r1
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	23ec      	movs	r3, #236	; 0xec
 8009e20:	18fb      	adds	r3, r7, r3
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	029b      	lsls	r3, r3, #10
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	4a5d      	ldr	r2, [pc, #372]	; (8009fa0 <USB_EPStartXfer+0xaa8>)
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e32:	801a      	strh	r2, [r3, #0]
 8009e34:	e024      	b.n	8009e80 <USB_EPStartXfer+0x988>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	785b      	ldrb	r3, [r3, #1]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d120      	bne.n	8009e80 <USB_EPStartXfer+0x988>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2184      	movs	r1, #132	; 0x84
 8009e42:	187a      	adds	r2, r7, r1
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2250      	movs	r2, #80	; 0x50
 8009e4a:	5a9b      	ldrh	r3, [r3, r2]
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	001a      	movs	r2, r3
 8009e50:	187b      	adds	r3, r7, r1
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	189b      	adds	r3, r3, r2
 8009e56:	187a      	adds	r2, r7, r1
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	00da      	lsls	r2, r3, #3
 8009e60:	187b      	adds	r3, r7, r1
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	18d3      	adds	r3, r2, r3
 8009e66:	4a4f      	ldr	r2, [pc, #316]	; (8009fa4 <USB_EPStartXfer+0xaac>)
 8009e68:	4694      	mov	ip, r2
 8009e6a:	4463      	add	r3, ip
 8009e6c:	2180      	movs	r1, #128	; 0x80
 8009e6e:	187a      	adds	r2, r7, r1
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	1d7b      	adds	r3, r7, #5
 8009e74:	33ff      	adds	r3, #255	; 0xff
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	187b      	adds	r3, r7, r1
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e80:	2076      	movs	r0, #118	; 0x76
 8009e82:	183b      	adds	r3, r7, r0
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	8912      	ldrh	r2, [r2, #8]
 8009e88:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	6959      	ldr	r1, [r3, #20]
 8009e8e:	1d7b      	adds	r3, r7, #5
 8009e90:	33ff      	adds	r3, #255	; 0xff
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	b29c      	uxth	r4, r3
 8009e96:	183b      	adds	r3, r7, r0
 8009e98:	881a      	ldrh	r2, [r3, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	0023      	movs	r3, r4
 8009e9e:	f000 fd1f 	bl	800a8e0 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	18d3      	adds	r3, r2, r3
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	200a      	movs	r0, #10
 8009eb2:	183b      	adds	r3, r7, r0
 8009eb4:	493c      	ldr	r1, [pc, #240]	; (8009fa8 <USB_EPStartXfer+0xab0>)
 8009eb6:	400a      	ands	r2, r1
 8009eb8:	801a      	strh	r2, [r3, #0]
 8009eba:	183b      	adds	r3, r7, r0
 8009ebc:	183a      	adds	r2, r7, r0
 8009ebe:	8812      	ldrh	r2, [r2, #0]
 8009ec0:	2110      	movs	r1, #16
 8009ec2:	404a      	eors	r2, r1
 8009ec4:	801a      	strh	r2, [r3, #0]
 8009ec6:	183b      	adds	r3, r7, r0
 8009ec8:	183a      	adds	r2, r7, r0
 8009eca:	8812      	ldrh	r2, [r2, #0]
 8009ecc:	2120      	movs	r1, #32
 8009ece:	404a      	eors	r2, r1
 8009ed0:	801a      	strh	r2, [r3, #0]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	18d3      	adds	r3, r2, r3
 8009edc:	183a      	adds	r2, r7, r0
 8009ede:	8812      	ldrh	r2, [r2, #0]
 8009ee0:	4932      	ldr	r1, [pc, #200]	; (8009fac <USB_EPStartXfer+0xab4>)
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	b292      	uxth	r2, r2
 8009ee6:	801a      	strh	r2, [r3, #0]
 8009ee8:	f000 fbaf 	bl	800a64a <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	7b1b      	ldrb	r3, [r3, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d000      	beq.n	8009ef6 <USB_EPStartXfer+0x9fe>
 8009ef4:	e09e      	b.n	800a034 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	699a      	ldr	r2, [r3, #24]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d90d      	bls.n	8009f1e <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	1d7a      	adds	r2, r7, #5
 8009f08:	32ff      	adds	r2, #255	; 0xff
 8009f0a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	699a      	ldr	r2, [r3, #24]
 8009f10:	1d7b      	adds	r3, r7, #5
 8009f12:	33ff      	adds	r3, #255	; 0xff
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	1ad2      	subs	r2, r2, r3
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	619a      	str	r2, [r3, #24]
 8009f1c:	e007      	b.n	8009f2e <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	1d7a      	adds	r2, r7, #5
 8009f24:	32ff      	adds	r2, #255	; 0xff
 8009f26:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2190      	movs	r1, #144	; 0x90
 8009f32:	187a      	adds	r2, r7, r1
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2250      	movs	r2, #80	; 0x50
 8009f3a:	5a9b      	ldrh	r3, [r3, r2]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	001a      	movs	r2, r3
 8009f40:	187b      	adds	r3, r7, r1
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	189b      	adds	r3, r3, r2
 8009f46:	187a      	adds	r2, r7, r1
 8009f48:	6013      	str	r3, [r2, #0]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	00da      	lsls	r2, r3, #3
 8009f50:	187b      	adds	r3, r7, r1
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	18d3      	adds	r3, r2, r3
 8009f56:	4a10      	ldr	r2, [pc, #64]	; (8009f98 <USB_EPStartXfer+0xaa0>)
 8009f58:	4694      	mov	ip, r2
 8009f5a:	4463      	add	r3, ip
 8009f5c:	218c      	movs	r1, #140	; 0x8c
 8009f5e:	187a      	adds	r2, r7, r1
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	1d7b      	adds	r3, r7, #5
 8009f64:	33ff      	adds	r3, #255	; 0xff
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d121      	bne.n	8009fb0 <USB_EPStartXfer+0xab8>
 8009f6c:	187b      	adds	r3, r7, r1
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	4a09      	ldr	r2, [pc, #36]	; (8009f9c <USB_EPStartXfer+0xaa4>)
 8009f76:	4013      	ands	r3, r2
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	187b      	adds	r3, r7, r1
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	801a      	strh	r2, [r3, #0]
 8009f80:	187b      	adds	r3, r7, r1
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	4a05      	ldr	r2, [pc, #20]	; (8009fa0 <USB_EPStartXfer+0xaa8>)
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	187b      	adds	r3, r7, r1
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	801a      	strh	r2, [r3, #0]
 8009f94:	e334      	b.n	800a600 <USB_EPStartXfer+0x1108>
 8009f96:	46c0      	nop			; (mov r8, r8)
 8009f98:	00000406 	.word	0x00000406
 8009f9c:	ffff83ff 	.word	0xffff83ff
 8009fa0:	ffff8000 	.word	0xffff8000
 8009fa4:	00000402 	.word	0x00000402
 8009fa8:	ffff8fbf 	.word	0xffff8fbf
 8009fac:	ffff8080 	.word	0xffff8080
 8009fb0:	1d7b      	adds	r3, r7, #5
 8009fb2:	33ff      	adds	r3, #255	; 0xff
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8009fb8:	d81c      	bhi.n	8009ff4 <USB_EPStartXfer+0xafc>
 8009fba:	1d7b      	adds	r3, r7, #5
 8009fbc:	33ff      	adds	r3, #255	; 0xff
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	085b      	lsrs	r3, r3, #1
 8009fc2:	21e8      	movs	r1, #232	; 0xe8
 8009fc4:	187a      	adds	r2, r7, r1
 8009fc6:	6013      	str	r3, [r2, #0]
 8009fc8:	1d7b      	adds	r3, r7, #5
 8009fca:	33ff      	adds	r3, #255	; 0xff
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	d004      	beq.n	8009fde <USB_EPStartXfer+0xae6>
 8009fd4:	187b      	adds	r3, r7, r1
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	187a      	adds	r2, r7, r1
 8009fdc:	6013      	str	r3, [r2, #0]
 8009fde:	23e8      	movs	r3, #232	; 0xe8
 8009fe0:	18fb      	adds	r3, r7, r3
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	029b      	lsls	r3, r3, #10
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	238c      	movs	r3, #140	; 0x8c
 8009fec:	18fb      	adds	r3, r7, r3
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	801a      	strh	r2, [r3, #0]
 8009ff2:	e305      	b.n	800a600 <USB_EPStartXfer+0x1108>
 8009ff4:	1d7b      	adds	r3, r7, #5
 8009ff6:	33ff      	adds	r3, #255	; 0xff
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	095b      	lsrs	r3, r3, #5
 8009ffc:	21e8      	movs	r1, #232	; 0xe8
 8009ffe:	187a      	adds	r2, r7, r1
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	1d7b      	adds	r3, r7, #5
 800a004:	33ff      	adds	r3, #255	; 0xff
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	221f      	movs	r2, #31
 800a00a:	4013      	ands	r3, r2
 800a00c:	d104      	bne.n	800a018 <USB_EPStartXfer+0xb20>
 800a00e:	187b      	adds	r3, r7, r1
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3b01      	subs	r3, #1
 800a014:	187a      	adds	r2, r7, r1
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	23e8      	movs	r3, #232	; 0xe8
 800a01a:	18fb      	adds	r3, r7, r3
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	029b      	lsls	r3, r3, #10
 800a022:	b29b      	uxth	r3, r3
 800a024:	4aca      	ldr	r2, [pc, #808]	; (800a350 <USB_EPStartXfer+0xe58>)
 800a026:	4313      	orrs	r3, r2
 800a028:	b29a      	uxth	r2, r3
 800a02a:	238c      	movs	r3, #140	; 0x8c
 800a02c:	18fb      	adds	r3, r7, r3
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	801a      	strh	r2, [r3, #0]
 800a032:	e2e5      	b.n	800a600 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	78db      	ldrb	r3, [r3, #3]
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d000      	beq.n	800a03e <USB_EPStartXfer+0xb46>
 800a03c:	e16f      	b.n	800a31e <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	785b      	ldrb	r3, [r3, #1]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d16f      	bne.n	800a126 <USB_EPStartXfer+0xc2e>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	21ac      	movs	r1, #172	; 0xac
 800a04a:	187a      	adds	r2, r7, r1
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2250      	movs	r2, #80	; 0x50
 800a052:	5a9b      	ldrh	r3, [r3, r2]
 800a054:	b29b      	uxth	r3, r3
 800a056:	001a      	movs	r2, r3
 800a058:	187b      	adds	r3, r7, r1
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	189b      	adds	r3, r3, r2
 800a05e:	187a      	adds	r2, r7, r1
 800a060:	6013      	str	r3, [r2, #0]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	00da      	lsls	r2, r3, #3
 800a068:	187b      	adds	r3, r7, r1
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	18d3      	adds	r3, r2, r3
 800a06e:	4ab9      	ldr	r2, [pc, #740]	; (800a354 <USB_EPStartXfer+0xe5c>)
 800a070:	4694      	mov	ip, r2
 800a072:	4463      	add	r3, ip
 800a074:	21a8      	movs	r1, #168	; 0xa8
 800a076:	187a      	adds	r2, r7, r1
 800a078:	6013      	str	r3, [r2, #0]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d114      	bne.n	800a0ac <USB_EPStartXfer+0xbb4>
 800a082:	187b      	adds	r3, r7, r1
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	4ab3      	ldr	r2, [pc, #716]	; (800a358 <USB_EPStartXfer+0xe60>)
 800a08c:	4013      	ands	r3, r2
 800a08e:	b29a      	uxth	r2, r3
 800a090:	187b      	adds	r3, r7, r1
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	801a      	strh	r2, [r3, #0]
 800a096:	187b      	adds	r3, r7, r1
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	4aac      	ldr	r2, [pc, #688]	; (800a350 <USB_EPStartXfer+0xe58>)
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	187b      	adds	r3, r7, r1
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	801a      	strh	r2, [r3, #0]
 800a0aa:	e060      	b.n	800a16e <USB_EPStartXfer+0xc76>
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	2b3e      	cmp	r3, #62	; 0x3e
 800a0b2:	d81a      	bhi.n	800a0ea <USB_EPStartXfer+0xbf2>
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	085b      	lsrs	r3, r3, #1
 800a0ba:	21e4      	movs	r1, #228	; 0xe4
 800a0bc:	187a      	adds	r2, r7, r1
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	d004      	beq.n	800a0d4 <USB_EPStartXfer+0xbdc>
 800a0ca:	187b      	adds	r3, r7, r1
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	187a      	adds	r2, r7, r1
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	23e4      	movs	r3, #228	; 0xe4
 800a0d6:	18fb      	adds	r3, r7, r3
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	029b      	lsls	r3, r3, #10
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	23a8      	movs	r3, #168	; 0xa8
 800a0e2:	18fb      	adds	r3, r7, r3
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	801a      	strh	r2, [r3, #0]
 800a0e8:	e041      	b.n	800a16e <USB_EPStartXfer+0xc76>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	095b      	lsrs	r3, r3, #5
 800a0f0:	21e4      	movs	r1, #228	; 0xe4
 800a0f2:	187a      	adds	r2, r7, r1
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	221f      	movs	r2, #31
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	d104      	bne.n	800a10a <USB_EPStartXfer+0xc12>
 800a100:	187b      	adds	r3, r7, r1
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3b01      	subs	r3, #1
 800a106:	187a      	adds	r2, r7, r1
 800a108:	6013      	str	r3, [r2, #0]
 800a10a:	23e4      	movs	r3, #228	; 0xe4
 800a10c:	18fb      	adds	r3, r7, r3
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	b29b      	uxth	r3, r3
 800a112:	029b      	lsls	r3, r3, #10
 800a114:	b29b      	uxth	r3, r3
 800a116:	4a8e      	ldr	r2, [pc, #568]	; (800a350 <USB_EPStartXfer+0xe58>)
 800a118:	4313      	orrs	r3, r2
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	23a8      	movs	r3, #168	; 0xa8
 800a11e:	18fb      	adds	r3, r7, r3
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	801a      	strh	r2, [r3, #0]
 800a124:	e023      	b.n	800a16e <USB_EPStartXfer+0xc76>
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	785b      	ldrb	r3, [r3, #1]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d11f      	bne.n	800a16e <USB_EPStartXfer+0xc76>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	21b4      	movs	r1, #180	; 0xb4
 800a132:	187a      	adds	r2, r7, r1
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2250      	movs	r2, #80	; 0x50
 800a13a:	5a9b      	ldrh	r3, [r3, r2]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	001a      	movs	r2, r3
 800a140:	187b      	adds	r3, r7, r1
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	189b      	adds	r3, r3, r2
 800a146:	187a      	adds	r2, r7, r1
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	00da      	lsls	r2, r3, #3
 800a150:	187b      	adds	r3, r7, r1
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	18d3      	adds	r3, r2, r3
 800a156:	4a7f      	ldr	r2, [pc, #508]	; (800a354 <USB_EPStartXfer+0xe5c>)
 800a158:	4694      	mov	ip, r2
 800a15a:	4463      	add	r3, ip
 800a15c:	21b0      	movs	r1, #176	; 0xb0
 800a15e:	187a      	adds	r2, r7, r1
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	b29a      	uxth	r2, r3
 800a168:	187b      	adds	r3, r7, r1
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	801a      	strh	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	22a4      	movs	r2, #164	; 0xa4
 800a172:	18ba      	adds	r2, r7, r2
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	785b      	ldrb	r3, [r3, #1]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d16f      	bne.n	800a25e <USB_EPStartXfer+0xd66>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	219c      	movs	r1, #156	; 0x9c
 800a182:	187a      	adds	r2, r7, r1
 800a184:	6013      	str	r3, [r2, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2250      	movs	r2, #80	; 0x50
 800a18a:	5a9b      	ldrh	r3, [r3, r2]
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	001a      	movs	r2, r3
 800a190:	187b      	adds	r3, r7, r1
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	189b      	adds	r3, r3, r2
 800a196:	187a      	adds	r2, r7, r1
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	00da      	lsls	r2, r3, #3
 800a1a0:	187b      	adds	r3, r7, r1
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	18d3      	adds	r3, r2, r3
 800a1a6:	4a6d      	ldr	r2, [pc, #436]	; (800a35c <USB_EPStartXfer+0xe64>)
 800a1a8:	4694      	mov	ip, r2
 800a1aa:	4463      	add	r3, ip
 800a1ac:	2198      	movs	r1, #152	; 0x98
 800a1ae:	187a      	adds	r2, r7, r1
 800a1b0:	6013      	str	r3, [r2, #0]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d114      	bne.n	800a1e4 <USB_EPStartXfer+0xcec>
 800a1ba:	187b      	adds	r3, r7, r1
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	4a65      	ldr	r2, [pc, #404]	; (800a358 <USB_EPStartXfer+0xe60>)
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	187b      	adds	r3, r7, r1
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	801a      	strh	r2, [r3, #0]
 800a1ce:	187b      	adds	r3, r7, r1
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	4a5e      	ldr	r2, [pc, #376]	; (800a350 <USB_EPStartXfer+0xe58>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	187b      	adds	r3, r7, r1
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	801a      	strh	r2, [r3, #0]
 800a1e2:	e05d      	b.n	800a2a0 <USB_EPStartXfer+0xda8>
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	2b3e      	cmp	r3, #62	; 0x3e
 800a1ea:	d81a      	bhi.n	800a222 <USB_EPStartXfer+0xd2a>
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	085b      	lsrs	r3, r3, #1
 800a1f2:	21e0      	movs	r1, #224	; 0xe0
 800a1f4:	187a      	adds	r2, r7, r1
 800a1f6:	6013      	str	r3, [r2, #0]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	4013      	ands	r3, r2
 800a200:	d004      	beq.n	800a20c <USB_EPStartXfer+0xd14>
 800a202:	187b      	adds	r3, r7, r1
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3301      	adds	r3, #1
 800a208:	187a      	adds	r2, r7, r1
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	23e0      	movs	r3, #224	; 0xe0
 800a20e:	18fb      	adds	r3, r7, r3
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	b29b      	uxth	r3, r3
 800a214:	029b      	lsls	r3, r3, #10
 800a216:	b29a      	uxth	r2, r3
 800a218:	2398      	movs	r3, #152	; 0x98
 800a21a:	18fb      	adds	r3, r7, r3
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	801a      	strh	r2, [r3, #0]
 800a220:	e03e      	b.n	800a2a0 <USB_EPStartXfer+0xda8>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	095b      	lsrs	r3, r3, #5
 800a228:	21e0      	movs	r1, #224	; 0xe0
 800a22a:	187a      	adds	r2, r7, r1
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	221f      	movs	r2, #31
 800a234:	4013      	ands	r3, r2
 800a236:	d104      	bne.n	800a242 <USB_EPStartXfer+0xd4a>
 800a238:	187b      	adds	r3, r7, r1
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	187a      	adds	r2, r7, r1
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	23e0      	movs	r3, #224	; 0xe0
 800a244:	18fb      	adds	r3, r7, r3
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	b29b      	uxth	r3, r3
 800a24a:	029b      	lsls	r3, r3, #10
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	4a40      	ldr	r2, [pc, #256]	; (800a350 <USB_EPStartXfer+0xe58>)
 800a250:	4313      	orrs	r3, r2
 800a252:	b29a      	uxth	r2, r3
 800a254:	2398      	movs	r3, #152	; 0x98
 800a256:	18fb      	adds	r3, r7, r3
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	801a      	strh	r2, [r3, #0]
 800a25c:	e020      	b.n	800a2a0 <USB_EPStartXfer+0xda8>
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	785b      	ldrb	r3, [r3, #1]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d11c      	bne.n	800a2a0 <USB_EPStartXfer+0xda8>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2250      	movs	r2, #80	; 0x50
 800a26a:	5a9b      	ldrh	r3, [r3, r2]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	001a      	movs	r2, r3
 800a270:	21a4      	movs	r1, #164	; 0xa4
 800a272:	187b      	adds	r3, r7, r1
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	189b      	adds	r3, r3, r2
 800a278:	187a      	adds	r2, r7, r1
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	00da      	lsls	r2, r3, #3
 800a282:	187b      	adds	r3, r7, r1
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	18d3      	adds	r3, r2, r3
 800a288:	4a34      	ldr	r2, [pc, #208]	; (800a35c <USB_EPStartXfer+0xe64>)
 800a28a:	4694      	mov	ip, r2
 800a28c:	4463      	add	r3, ip
 800a28e:	21a0      	movs	r1, #160	; 0xa0
 800a290:	187a      	adds	r2, r7, r1
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	b29a      	uxth	r2, r3
 800a29a:	187b      	adds	r3, r7, r1
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	69db      	ldr	r3, [r3, #28]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d100      	bne.n	800a2aa <USB_EPStartXfer+0xdb2>
 800a2a8:	e1aa      	b.n	800a600 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	18d2      	adds	r2, r2, r3
 800a2b4:	2196      	movs	r1, #150	; 0x96
 800a2b6:	187b      	adds	r3, r7, r1
 800a2b8:	8812      	ldrh	r2, [r2, #0]
 800a2ba:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a2bc:	187b      	adds	r3, r7, r1
 800a2be:	881a      	ldrh	r2, [r3, #0]
 800a2c0:	2380      	movs	r3, #128	; 0x80
 800a2c2:	01db      	lsls	r3, r3, #7
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	d004      	beq.n	800a2d2 <USB_EPStartXfer+0xdda>
 800a2c8:	187b      	adds	r3, r7, r1
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	2240      	movs	r2, #64	; 0x40
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	d10d      	bne.n	800a2ee <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a2d2:	2196      	movs	r1, #150	; 0x96
 800a2d4:	187b      	adds	r3, r7, r1
 800a2d6:	881a      	ldrh	r2, [r3, #0]
 800a2d8:	2380      	movs	r3, #128	; 0x80
 800a2da:	01db      	lsls	r3, r3, #7
 800a2dc:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a2de:	d000      	beq.n	800a2e2 <USB_EPStartXfer+0xdea>
 800a2e0:	e18e      	b.n	800a600 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a2e2:	187b      	adds	r3, r7, r1
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	2240      	movs	r2, #64	; 0x40
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	d000      	beq.n	800a2ee <USB_EPStartXfer+0xdf6>
 800a2ec:	e188      	b.n	800a600 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	18d3      	adds	r3, r2, r3
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	2094      	movs	r0, #148	; 0x94
 800a2fe:	183b      	adds	r3, r7, r0
 800a300:	4917      	ldr	r1, [pc, #92]	; (800a360 <USB_EPStartXfer+0xe68>)
 800a302:	400a      	ands	r2, r1
 800a304:	801a      	strh	r2, [r3, #0]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	18d3      	adds	r3, r2, r3
 800a310:	183a      	adds	r2, r7, r0
 800a312:	8812      	ldrh	r2, [r2, #0]
 800a314:	4913      	ldr	r1, [pc, #76]	; (800a364 <USB_EPStartXfer+0xe6c>)
 800a316:	430a      	orrs	r2, r1
 800a318:	b292      	uxth	r2, r2
 800a31a:	801a      	strh	r2, [r3, #0]
 800a31c:	e170      	b.n	800a600 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	78db      	ldrb	r3, [r3, #3]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d000      	beq.n	800a328 <USB_EPStartXfer+0xe30>
 800a326:	e169      	b.n	800a5fc <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	699a      	ldr	r2, [r3, #24]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	429a      	cmp	r2, r3
 800a332:	d919      	bls.n	800a368 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	1d7a      	adds	r2, r7, #5
 800a33a:	32ff      	adds	r2, #255	; 0xff
 800a33c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	699a      	ldr	r2, [r3, #24]
 800a342:	1d7b      	adds	r3, r7, #5
 800a344:	33ff      	adds	r3, #255	; 0xff
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	1ad2      	subs	r2, r2, r3
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	619a      	str	r2, [r3, #24]
 800a34e:	e013      	b.n	800a378 <USB_EPStartXfer+0xe80>
 800a350:	ffff8000 	.word	0xffff8000
 800a354:	00000402 	.word	0x00000402
 800a358:	ffff83ff 	.word	0xffff83ff
 800a35c:	00000406 	.word	0x00000406
 800a360:	ffff8f8f 	.word	0xffff8f8f
 800a364:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	1d7a      	adds	r2, r7, #5
 800a36e:	32ff      	adds	r2, #255	; 0xff
 800a370:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2200      	movs	r2, #0
 800a376:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	785b      	ldrb	r3, [r3, #1]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d000      	beq.n	800a382 <USB_EPStartXfer+0xe8a>
 800a380:	e075      	b.n	800a46e <USB_EPStartXfer+0xf76>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	21cc      	movs	r1, #204	; 0xcc
 800a386:	187a      	adds	r2, r7, r1
 800a388:	6013      	str	r3, [r2, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2250      	movs	r2, #80	; 0x50
 800a38e:	5a9b      	ldrh	r3, [r3, r2]
 800a390:	b29b      	uxth	r3, r3
 800a392:	001a      	movs	r2, r3
 800a394:	187b      	adds	r3, r7, r1
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	189b      	adds	r3, r3, r2
 800a39a:	187a      	adds	r2, r7, r1
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	00da      	lsls	r2, r3, #3
 800a3a4:	187b      	adds	r3, r7, r1
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	18d3      	adds	r3, r2, r3
 800a3aa:	4aaa      	ldr	r2, [pc, #680]	; (800a654 <USB_EPStartXfer+0x115c>)
 800a3ac:	4694      	mov	ip, r2
 800a3ae:	4463      	add	r3, ip
 800a3b0:	21c8      	movs	r1, #200	; 0xc8
 800a3b2:	187a      	adds	r2, r7, r1
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	1d7b      	adds	r3, r7, #5
 800a3b8:	33ff      	adds	r3, #255	; 0xff
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d114      	bne.n	800a3ea <USB_EPStartXfer+0xef2>
 800a3c0:	187b      	adds	r3, r7, r1
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	4aa3      	ldr	r2, [pc, #652]	; (800a658 <USB_EPStartXfer+0x1160>)
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	187b      	adds	r3, r7, r1
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	801a      	strh	r2, [r3, #0]
 800a3d4:	187b      	adds	r3, r7, r1
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	881b      	ldrh	r3, [r3, #0]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	4a9f      	ldr	r2, [pc, #636]	; (800a65c <USB_EPStartXfer+0x1164>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	187b      	adds	r3, r7, r1
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	801a      	strh	r2, [r3, #0]
 800a3e8:	e066      	b.n	800a4b8 <USB_EPStartXfer+0xfc0>
 800a3ea:	1d7b      	adds	r3, r7, #5
 800a3ec:	33ff      	adds	r3, #255	; 0xff
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b3e      	cmp	r3, #62	; 0x3e
 800a3f2:	d81c      	bhi.n	800a42e <USB_EPStartXfer+0xf36>
 800a3f4:	1d7b      	adds	r3, r7, #5
 800a3f6:	33ff      	adds	r3, #255	; 0xff
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	085b      	lsrs	r3, r3, #1
 800a3fc:	21dc      	movs	r1, #220	; 0xdc
 800a3fe:	187a      	adds	r2, r7, r1
 800a400:	6013      	str	r3, [r2, #0]
 800a402:	1d7b      	adds	r3, r7, #5
 800a404:	33ff      	adds	r3, #255	; 0xff
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2201      	movs	r2, #1
 800a40a:	4013      	ands	r3, r2
 800a40c:	d004      	beq.n	800a418 <USB_EPStartXfer+0xf20>
 800a40e:	187b      	adds	r3, r7, r1
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	3301      	adds	r3, #1
 800a414:	187a      	adds	r2, r7, r1
 800a416:	6013      	str	r3, [r2, #0]
 800a418:	23dc      	movs	r3, #220	; 0xdc
 800a41a:	18fb      	adds	r3, r7, r3
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	b29b      	uxth	r3, r3
 800a420:	029b      	lsls	r3, r3, #10
 800a422:	b29a      	uxth	r2, r3
 800a424:	23c8      	movs	r3, #200	; 0xc8
 800a426:	18fb      	adds	r3, r7, r3
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	801a      	strh	r2, [r3, #0]
 800a42c:	e044      	b.n	800a4b8 <USB_EPStartXfer+0xfc0>
 800a42e:	1d7b      	adds	r3, r7, #5
 800a430:	33ff      	adds	r3, #255	; 0xff
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	095b      	lsrs	r3, r3, #5
 800a436:	21dc      	movs	r1, #220	; 0xdc
 800a438:	187a      	adds	r2, r7, r1
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	1d7b      	adds	r3, r7, #5
 800a43e:	33ff      	adds	r3, #255	; 0xff
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	221f      	movs	r2, #31
 800a444:	4013      	ands	r3, r2
 800a446:	d104      	bne.n	800a452 <USB_EPStartXfer+0xf5a>
 800a448:	187b      	adds	r3, r7, r1
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	187a      	adds	r2, r7, r1
 800a450:	6013      	str	r3, [r2, #0]
 800a452:	23dc      	movs	r3, #220	; 0xdc
 800a454:	18fb      	adds	r3, r7, r3
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	b29b      	uxth	r3, r3
 800a45a:	029b      	lsls	r3, r3, #10
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	4a7f      	ldr	r2, [pc, #508]	; (800a65c <USB_EPStartXfer+0x1164>)
 800a460:	4313      	orrs	r3, r2
 800a462:	b29a      	uxth	r2, r3
 800a464:	23c8      	movs	r3, #200	; 0xc8
 800a466:	18fb      	adds	r3, r7, r3
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	801a      	strh	r2, [r3, #0]
 800a46c:	e024      	b.n	800a4b8 <USB_EPStartXfer+0xfc0>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	785b      	ldrb	r3, [r3, #1]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d120      	bne.n	800a4b8 <USB_EPStartXfer+0xfc0>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	21d4      	movs	r1, #212	; 0xd4
 800a47a:	187a      	adds	r2, r7, r1
 800a47c:	6013      	str	r3, [r2, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2250      	movs	r2, #80	; 0x50
 800a482:	5a9b      	ldrh	r3, [r3, r2]
 800a484:	b29b      	uxth	r3, r3
 800a486:	001a      	movs	r2, r3
 800a488:	187b      	adds	r3, r7, r1
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	189b      	adds	r3, r3, r2
 800a48e:	187a      	adds	r2, r7, r1
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	00da      	lsls	r2, r3, #3
 800a498:	187b      	adds	r3, r7, r1
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	18d3      	adds	r3, r2, r3
 800a49e:	4a6d      	ldr	r2, [pc, #436]	; (800a654 <USB_EPStartXfer+0x115c>)
 800a4a0:	4694      	mov	ip, r2
 800a4a2:	4463      	add	r3, ip
 800a4a4:	21d0      	movs	r1, #208	; 0xd0
 800a4a6:	187a      	adds	r2, r7, r1
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	1d7b      	adds	r3, r7, #5
 800a4ac:	33ff      	adds	r3, #255	; 0xff
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	187b      	adds	r3, r7, r1
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	801a      	strh	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	22c4      	movs	r2, #196	; 0xc4
 800a4bc:	18ba      	adds	r2, r7, r2
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	785b      	ldrb	r3, [r3, #1]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d000      	beq.n	800a4ca <USB_EPStartXfer+0xfd2>
 800a4c8:	e075      	b.n	800a5b6 <USB_EPStartXfer+0x10be>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	21bc      	movs	r1, #188	; 0xbc
 800a4ce:	187a      	adds	r2, r7, r1
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2250      	movs	r2, #80	; 0x50
 800a4d6:	5a9b      	ldrh	r3, [r3, r2]
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	001a      	movs	r2, r3
 800a4dc:	187b      	adds	r3, r7, r1
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	189b      	adds	r3, r3, r2
 800a4e2:	187a      	adds	r2, r7, r1
 800a4e4:	6013      	str	r3, [r2, #0]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	00da      	lsls	r2, r3, #3
 800a4ec:	187b      	adds	r3, r7, r1
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	18d3      	adds	r3, r2, r3
 800a4f2:	4a5b      	ldr	r2, [pc, #364]	; (800a660 <USB_EPStartXfer+0x1168>)
 800a4f4:	4694      	mov	ip, r2
 800a4f6:	4463      	add	r3, ip
 800a4f8:	21b8      	movs	r1, #184	; 0xb8
 800a4fa:	187a      	adds	r2, r7, r1
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	1d7b      	adds	r3, r7, #5
 800a500:	33ff      	adds	r3, #255	; 0xff
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d114      	bne.n	800a532 <USB_EPStartXfer+0x103a>
 800a508:	187b      	adds	r3, r7, r1
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	b29b      	uxth	r3, r3
 800a510:	4a51      	ldr	r2, [pc, #324]	; (800a658 <USB_EPStartXfer+0x1160>)
 800a512:	4013      	ands	r3, r2
 800a514:	b29a      	uxth	r2, r3
 800a516:	187b      	adds	r3, r7, r1
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	801a      	strh	r2, [r3, #0]
 800a51c:	187b      	adds	r3, r7, r1
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	881b      	ldrh	r3, [r3, #0]
 800a522:	b29b      	uxth	r3, r3
 800a524:	4a4d      	ldr	r2, [pc, #308]	; (800a65c <USB_EPStartXfer+0x1164>)
 800a526:	4313      	orrs	r3, r2
 800a528:	b29a      	uxth	r2, r3
 800a52a:	187b      	adds	r3, r7, r1
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	801a      	strh	r2, [r3, #0]
 800a530:	e066      	b.n	800a600 <USB_EPStartXfer+0x1108>
 800a532:	1d7b      	adds	r3, r7, #5
 800a534:	33ff      	adds	r3, #255	; 0xff
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b3e      	cmp	r3, #62	; 0x3e
 800a53a:	d81c      	bhi.n	800a576 <USB_EPStartXfer+0x107e>
 800a53c:	1d7b      	adds	r3, r7, #5
 800a53e:	33ff      	adds	r3, #255	; 0xff
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	085b      	lsrs	r3, r3, #1
 800a544:	21d8      	movs	r1, #216	; 0xd8
 800a546:	187a      	adds	r2, r7, r1
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	1d7b      	adds	r3, r7, #5
 800a54c:	33ff      	adds	r3, #255	; 0xff
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2201      	movs	r2, #1
 800a552:	4013      	ands	r3, r2
 800a554:	d004      	beq.n	800a560 <USB_EPStartXfer+0x1068>
 800a556:	187b      	adds	r3, r7, r1
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	187a      	adds	r2, r7, r1
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	23d8      	movs	r3, #216	; 0xd8
 800a562:	18fb      	adds	r3, r7, r3
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	b29b      	uxth	r3, r3
 800a568:	029b      	lsls	r3, r3, #10
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	23b8      	movs	r3, #184	; 0xb8
 800a56e:	18fb      	adds	r3, r7, r3
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	801a      	strh	r2, [r3, #0]
 800a574:	e044      	b.n	800a600 <USB_EPStartXfer+0x1108>
 800a576:	1d7b      	adds	r3, r7, #5
 800a578:	33ff      	adds	r3, #255	; 0xff
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	095b      	lsrs	r3, r3, #5
 800a57e:	21d8      	movs	r1, #216	; 0xd8
 800a580:	187a      	adds	r2, r7, r1
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	1d7b      	adds	r3, r7, #5
 800a586:	33ff      	adds	r3, #255	; 0xff
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	221f      	movs	r2, #31
 800a58c:	4013      	ands	r3, r2
 800a58e:	d104      	bne.n	800a59a <USB_EPStartXfer+0x10a2>
 800a590:	187b      	adds	r3, r7, r1
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3b01      	subs	r3, #1
 800a596:	187a      	adds	r2, r7, r1
 800a598:	6013      	str	r3, [r2, #0]
 800a59a:	23d8      	movs	r3, #216	; 0xd8
 800a59c:	18fb      	adds	r3, r7, r3
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	029b      	lsls	r3, r3, #10
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	4a2d      	ldr	r2, [pc, #180]	; (800a65c <USB_EPStartXfer+0x1164>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	23b8      	movs	r3, #184	; 0xb8
 800a5ae:	18fb      	adds	r3, r7, r3
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	801a      	strh	r2, [r3, #0]
 800a5b4:	e024      	b.n	800a600 <USB_EPStartXfer+0x1108>
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	785b      	ldrb	r3, [r3, #1]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d120      	bne.n	800a600 <USB_EPStartXfer+0x1108>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2250      	movs	r2, #80	; 0x50
 800a5c2:	5a9b      	ldrh	r3, [r3, r2]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	001a      	movs	r2, r3
 800a5c8:	21c4      	movs	r1, #196	; 0xc4
 800a5ca:	187b      	adds	r3, r7, r1
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	189b      	adds	r3, r3, r2
 800a5d0:	187a      	adds	r2, r7, r1
 800a5d2:	6013      	str	r3, [r2, #0]
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	00da      	lsls	r2, r3, #3
 800a5da:	187b      	adds	r3, r7, r1
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	18d3      	adds	r3, r2, r3
 800a5e0:	4a1f      	ldr	r2, [pc, #124]	; (800a660 <USB_EPStartXfer+0x1168>)
 800a5e2:	4694      	mov	ip, r2
 800a5e4:	4463      	add	r3, ip
 800a5e6:	21c0      	movs	r1, #192	; 0xc0
 800a5e8:	187a      	adds	r2, r7, r1
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	1d7b      	adds	r3, r7, #5
 800a5ee:	33ff      	adds	r3, #255	; 0xff
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	187b      	adds	r3, r7, r1
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	801a      	strh	r2, [r3, #0]
 800a5fa:	e001      	b.n	800a600 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e025      	b.n	800a64c <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	18d3      	adds	r3, r2, r3
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	208a      	movs	r0, #138	; 0x8a
 800a610:	183b      	adds	r3, r7, r0
 800a612:	4914      	ldr	r1, [pc, #80]	; (800a664 <USB_EPStartXfer+0x116c>)
 800a614:	400a      	ands	r2, r1
 800a616:	801a      	strh	r2, [r3, #0]
 800a618:	183b      	adds	r3, r7, r0
 800a61a:	183a      	adds	r2, r7, r0
 800a61c:	8812      	ldrh	r2, [r2, #0]
 800a61e:	2180      	movs	r1, #128	; 0x80
 800a620:	0149      	lsls	r1, r1, #5
 800a622:	404a      	eors	r2, r1
 800a624:	801a      	strh	r2, [r3, #0]
 800a626:	183b      	adds	r3, r7, r0
 800a628:	183a      	adds	r2, r7, r0
 800a62a:	8812      	ldrh	r2, [r2, #0]
 800a62c:	2180      	movs	r1, #128	; 0x80
 800a62e:	0189      	lsls	r1, r1, #6
 800a630:	404a      	eors	r2, r1
 800a632:	801a      	strh	r2, [r3, #0]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	18d3      	adds	r3, r2, r3
 800a63e:	183a      	adds	r2, r7, r0
 800a640:	8812      	ldrh	r2, [r2, #0]
 800a642:	4909      	ldr	r1, [pc, #36]	; (800a668 <USB_EPStartXfer+0x1170>)
 800a644:	430a      	orrs	r2, r1
 800a646:	b292      	uxth	r2, r2
 800a648:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	0018      	movs	r0, r3
 800a64e:	46bd      	mov	sp, r7
 800a650:	b043      	add	sp, #268	; 0x10c
 800a652:	bd90      	pop	{r4, r7, pc}
 800a654:	00000402 	.word	0x00000402
 800a658:	ffff83ff 	.word	0xffff83ff
 800a65c:	ffff8000 	.word	0xffff8000
 800a660:	00000406 	.word	0x00000406
 800a664:	ffffbf8f 	.word	0xffffbf8f
 800a668:	ffff8080 	.word	0xffff8080

0800a66c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	785b      	ldrb	r3, [r3, #1]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d01d      	beq.n	800a6ba <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	18d3      	adds	r3, r2, r3
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	200c      	movs	r0, #12
 800a68e:	183b      	adds	r3, r7, r0
 800a690:	491b      	ldr	r1, [pc, #108]	; (800a700 <USB_EPSetStall+0x94>)
 800a692:	400a      	ands	r2, r1
 800a694:	801a      	strh	r2, [r3, #0]
 800a696:	183b      	adds	r3, r7, r0
 800a698:	183a      	adds	r2, r7, r0
 800a69a:	8812      	ldrh	r2, [r2, #0]
 800a69c:	2110      	movs	r1, #16
 800a69e:	404a      	eors	r2, r1
 800a6a0:	801a      	strh	r2, [r3, #0]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	18d3      	adds	r3, r2, r3
 800a6ac:	183a      	adds	r2, r7, r0
 800a6ae:	8812      	ldrh	r2, [r2, #0]
 800a6b0:	4914      	ldr	r1, [pc, #80]	; (800a704 <USB_EPSetStall+0x98>)
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	b292      	uxth	r2, r2
 800a6b6:	801a      	strh	r2, [r3, #0]
 800a6b8:	e01d      	b.n	800a6f6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	18d3      	adds	r3, r2, r3
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	200e      	movs	r0, #14
 800a6ca:	183b      	adds	r3, r7, r0
 800a6cc:	490e      	ldr	r1, [pc, #56]	; (800a708 <USB_EPSetStall+0x9c>)
 800a6ce:	400a      	ands	r2, r1
 800a6d0:	801a      	strh	r2, [r3, #0]
 800a6d2:	183b      	adds	r3, r7, r0
 800a6d4:	183a      	adds	r2, r7, r0
 800a6d6:	8812      	ldrh	r2, [r2, #0]
 800a6d8:	2180      	movs	r1, #128	; 0x80
 800a6da:	0149      	lsls	r1, r1, #5
 800a6dc:	404a      	eors	r2, r1
 800a6de:	801a      	strh	r2, [r3, #0]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	18d3      	adds	r3, r2, r3
 800a6ea:	183a      	adds	r2, r7, r0
 800a6ec:	8812      	ldrh	r2, [r2, #0]
 800a6ee:	4905      	ldr	r1, [pc, #20]	; (800a704 <USB_EPSetStall+0x98>)
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	b292      	uxth	r2, r2
 800a6f4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	b004      	add	sp, #16
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	ffff8fbf 	.word	0xffff8fbf
 800a704:	ffff8080 	.word	0xffff8080
 800a708:	ffffbf8f 	.word	0xffffbf8f

0800a70c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b086      	sub	sp, #24
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	7b1b      	ldrb	r3, [r3, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d000      	beq.n	800a720 <USB_EPClearStall+0x14>
 800a71e:	e095      	b.n	800a84c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	785b      	ldrb	r3, [r3, #1]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d046      	beq.n	800a7b6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	18d2      	adds	r2, r2, r3
 800a732:	2110      	movs	r1, #16
 800a734:	187b      	adds	r3, r7, r1
 800a736:	8812      	ldrh	r2, [r2, #0]
 800a738:	801a      	strh	r2, [r3, #0]
 800a73a:	187b      	adds	r3, r7, r1
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	2240      	movs	r2, #64	; 0x40
 800a740:	4013      	ands	r3, r2
 800a742:	d016      	beq.n	800a772 <USB_EPClearStall+0x66>
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	18d3      	adds	r3, r2, r3
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29a      	uxth	r2, r3
 800a752:	200e      	movs	r0, #14
 800a754:	183b      	adds	r3, r7, r0
 800a756:	4940      	ldr	r1, [pc, #256]	; (800a858 <USB_EPClearStall+0x14c>)
 800a758:	400a      	ands	r2, r1
 800a75a:	801a      	strh	r2, [r3, #0]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	18d3      	adds	r3, r2, r3
 800a766:	183a      	adds	r2, r7, r0
 800a768:	8812      	ldrh	r2, [r2, #0]
 800a76a:	493c      	ldr	r1, [pc, #240]	; (800a85c <USB_EPClearStall+0x150>)
 800a76c:	430a      	orrs	r2, r1
 800a76e:	b292      	uxth	r2, r2
 800a770:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	78db      	ldrb	r3, [r3, #3]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d068      	beq.n	800a84c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	18d3      	adds	r3, r2, r3
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	b29a      	uxth	r2, r3
 800a788:	200c      	movs	r0, #12
 800a78a:	183b      	adds	r3, r7, r0
 800a78c:	4934      	ldr	r1, [pc, #208]	; (800a860 <USB_EPClearStall+0x154>)
 800a78e:	400a      	ands	r2, r1
 800a790:	801a      	strh	r2, [r3, #0]
 800a792:	183b      	adds	r3, r7, r0
 800a794:	183a      	adds	r2, r7, r0
 800a796:	8812      	ldrh	r2, [r2, #0]
 800a798:	2120      	movs	r1, #32
 800a79a:	404a      	eors	r2, r1
 800a79c:	801a      	strh	r2, [r3, #0]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	18d3      	adds	r3, r2, r3
 800a7a8:	183a      	adds	r2, r7, r0
 800a7aa:	8812      	ldrh	r2, [r2, #0]
 800a7ac:	492d      	ldr	r1, [pc, #180]	; (800a864 <USB_EPClearStall+0x158>)
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	b292      	uxth	r2, r2
 800a7b2:	801a      	strh	r2, [r3, #0]
 800a7b4:	e04a      	b.n	800a84c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	18d2      	adds	r2, r2, r3
 800a7c0:	2116      	movs	r1, #22
 800a7c2:	187b      	adds	r3, r7, r1
 800a7c4:	8812      	ldrh	r2, [r2, #0]
 800a7c6:	801a      	strh	r2, [r3, #0]
 800a7c8:	187b      	adds	r3, r7, r1
 800a7ca:	881a      	ldrh	r2, [r3, #0]
 800a7cc:	2380      	movs	r3, #128	; 0x80
 800a7ce:	01db      	lsls	r3, r3, #7
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	d016      	beq.n	800a802 <USB_EPClearStall+0xf6>
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	18d3      	adds	r3, r2, r3
 800a7de:	881b      	ldrh	r3, [r3, #0]
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	2014      	movs	r0, #20
 800a7e4:	183b      	adds	r3, r7, r0
 800a7e6:	491c      	ldr	r1, [pc, #112]	; (800a858 <USB_EPClearStall+0x14c>)
 800a7e8:	400a      	ands	r2, r1
 800a7ea:	801a      	strh	r2, [r3, #0]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	18d3      	adds	r3, r2, r3
 800a7f6:	183a      	adds	r2, r7, r0
 800a7f8:	8812      	ldrh	r2, [r2, #0]
 800a7fa:	491b      	ldr	r1, [pc, #108]	; (800a868 <USB_EPClearStall+0x15c>)
 800a7fc:	430a      	orrs	r2, r1
 800a7fe:	b292      	uxth	r2, r2
 800a800:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	18d3      	adds	r3, r2, r3
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	b29a      	uxth	r2, r3
 800a810:	2012      	movs	r0, #18
 800a812:	183b      	adds	r3, r7, r0
 800a814:	4915      	ldr	r1, [pc, #84]	; (800a86c <USB_EPClearStall+0x160>)
 800a816:	400a      	ands	r2, r1
 800a818:	801a      	strh	r2, [r3, #0]
 800a81a:	183b      	adds	r3, r7, r0
 800a81c:	183a      	adds	r2, r7, r0
 800a81e:	8812      	ldrh	r2, [r2, #0]
 800a820:	2180      	movs	r1, #128	; 0x80
 800a822:	0149      	lsls	r1, r1, #5
 800a824:	404a      	eors	r2, r1
 800a826:	801a      	strh	r2, [r3, #0]
 800a828:	183b      	adds	r3, r7, r0
 800a82a:	183a      	adds	r2, r7, r0
 800a82c:	8812      	ldrh	r2, [r2, #0]
 800a82e:	2180      	movs	r1, #128	; 0x80
 800a830:	0189      	lsls	r1, r1, #6
 800a832:	404a      	eors	r2, r1
 800a834:	801a      	strh	r2, [r3, #0]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	18d3      	adds	r3, r2, r3
 800a840:	183a      	adds	r2, r7, r0
 800a842:	8812      	ldrh	r2, [r2, #0]
 800a844:	4907      	ldr	r1, [pc, #28]	; (800a864 <USB_EPClearStall+0x158>)
 800a846:	430a      	orrs	r2, r1
 800a848:	b292      	uxth	r2, r2
 800a84a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	0018      	movs	r0, r3
 800a850:	46bd      	mov	sp, r7
 800a852:	b006      	add	sp, #24
 800a854:	bd80      	pop	{r7, pc}
 800a856:	46c0      	nop			; (mov r8, r8)
 800a858:	ffff8f8f 	.word	0xffff8f8f
 800a85c:	ffff80c0 	.word	0xffff80c0
 800a860:	ffff8fbf 	.word	0xffff8fbf
 800a864:	ffff8080 	.word	0xffff8080
 800a868:	ffffc080 	.word	0xffffc080
 800a86c:	ffffbf8f 	.word	0xffffbf8f

0800a870 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	000a      	movs	r2, r1
 800a87a:	1cfb      	adds	r3, r7, #3
 800a87c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a87e:	1cfb      	adds	r3, r7, #3
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d103      	bne.n	800a88e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	224c      	movs	r2, #76	; 0x4c
 800a88a:	2180      	movs	r1, #128	; 0x80
 800a88c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	0018      	movs	r0, r3
 800a892:	46bd      	mov	sp, r7
 800a894:	b002      	add	sp, #8
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2258      	movs	r2, #88	; 0x58
 800a8a4:	5a9b      	ldrh	r3, [r3, r2]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	4a05      	ldr	r2, [pc, #20]	; (800a8c0 <USB_DevConnect+0x28>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	b299      	uxth	r1, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2258      	movs	r2, #88	; 0x58
 800a8b2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	0018      	movs	r0, r3
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	b002      	add	sp, #8
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	46c0      	nop			; (mov r8, r8)
 800a8c0:	ffff8000 	.word	0xffff8000

0800a8c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2244      	movs	r2, #68	; 0x44
 800a8d0:	5a9b      	ldrh	r3, [r3, r2]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
}
 800a8d8:	0018      	movs	r0, r3
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	b004      	add	sp, #16
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08c      	sub	sp, #48	; 0x30
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	0019      	movs	r1, r3
 800a8ec:	1dbb      	adds	r3, r7, #6
 800a8ee:	801a      	strh	r2, [r3, #0]
 800a8f0:	1d3b      	adds	r3, r7, #4
 800a8f2:	1c0a      	adds	r2, r1, #0
 800a8f4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a8f6:	1d3b      	adds	r3, r7, #4
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	085b      	lsrs	r3, r3, #1
 800a8fe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a908:	1dbb      	adds	r3, r7, #6
 800a90a:	881a      	ldrh	r2, [r3, #0]
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	18d3      	adds	r3, r2, r3
 800a910:	2280      	movs	r2, #128	; 0x80
 800a912:	00d2      	lsls	r2, r2, #3
 800a914:	4694      	mov	ip, r2
 800a916:	4463      	add	r3, ip
 800a918:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a91e:	e01b      	b.n	800a958 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	3301      	adds	r3, #1
 800a92a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	b29b      	uxth	r3, r3
 800a932:	021b      	lsls	r3, r3, #8
 800a934:	b29b      	uxth	r3, r3
 800a936:	001a      	movs	r2, r3
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	b29a      	uxth	r2, r3
 800a942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a944:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	3302      	adds	r3, #2
 800a94a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	3301      	adds	r3, #1
 800a950:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	3b01      	subs	r3, #1
 800a956:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1e0      	bne.n	800a920 <USB_WritePMA+0x40>
  }
}
 800a95e:	46c0      	nop			; (mov r8, r8)
 800a960:	46c0      	nop			; (mov r8, r8)
 800a962:	46bd      	mov	sp, r7
 800a964:	b00c      	add	sp, #48	; 0x30
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b08a      	sub	sp, #40	; 0x28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	0019      	movs	r1, r3
 800a974:	1dbb      	adds	r3, r7, #6
 800a976:	801a      	strh	r2, [r3, #0]
 800a978:	1d3b      	adds	r3, r7, #4
 800a97a:	1c0a      	adds	r2, r1, #0
 800a97c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a97e:	1d3b      	adds	r3, r7, #4
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	085b      	lsrs	r3, r3, #1
 800a984:	b29b      	uxth	r3, r3
 800a986:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a990:	1dbb      	adds	r3, r7, #6
 800a992:	881a      	ldrh	r2, [r3, #0]
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	18d3      	adds	r3, r2, r3
 800a998:	2280      	movs	r2, #128	; 0x80
 800a99a:	00d2      	lsls	r2, r2, #3
 800a99c:	4694      	mov	ip, r2
 800a99e:	4463      	add	r3, ip
 800a9a0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a6:	e018      	b.n	800a9da <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
 800a9b2:	3302      	adds	r3, #2
 800a9b4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	0a1b      	lsrs	r3, r3, #8
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1e3      	bne.n	800a9a8 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a9e0:	1d3b      	adds	r3, r7, #4
 800a9e2:	881b      	ldrh	r3, [r3, #0]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d007      	beq.n	800a9fe <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800a9ee:	6a3b      	ldr	r3, [r7, #32]
 800a9f0:	881b      	ldrh	r3, [r3, #0]
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	701a      	strb	r2, [r3, #0]
  }
}
 800a9fe:	46c0      	nop			; (mov r8, r8)
 800aa00:	46bd      	mov	sp, r7
 800aa02:	b00a      	add	sp, #40	; 0x28
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	000a      	movs	r2, r1
 800aa10:	1cfb      	adds	r3, r7, #3
 800aa12:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800aa14:	230f      	movs	r3, #15
 800aa16:	18fb      	adds	r3, r7, r3
 800aa18:	2200      	movs	r2, #0
 800aa1a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	7c1b      	ldrb	r3, [r3, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d116      	bne.n	800aa52 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa24:	2380      	movs	r3, #128	; 0x80
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	2181      	movs	r1, #129	; 0x81
 800aa2e:	f002 f8b4 	bl	800cb9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa38:	2380      	movs	r3, #128	; 0x80
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	2202      	movs	r2, #2
 800aa40:	2101      	movs	r1, #1
 800aa42:	f002 f8aa 	bl	800cb9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	23b6      	movs	r3, #182	; 0xb6
 800aa4a:	005b      	lsls	r3, r3, #1
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	50d1      	str	r1, [r2, r3]
 800aa50:	e013      	b.n	800aa7a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	2340      	movs	r3, #64	; 0x40
 800aa56:	2202      	movs	r2, #2
 800aa58:	2181      	movs	r1, #129	; 0x81
 800aa5a:	f002 f89e 	bl	800cb9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	2340      	movs	r3, #64	; 0x40
 800aa68:	2202      	movs	r2, #2
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	f002 f895 	bl	800cb9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	23b6      	movs	r3, #182	; 0xb6
 800aa74:	005b      	lsls	r3, r3, #1
 800aa76:	2101      	movs	r1, #1
 800aa78:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	2308      	movs	r3, #8
 800aa7e:	2203      	movs	r2, #3
 800aa80:	2182      	movs	r1, #130	; 0x82
 800aa82:	f002 f88a 	bl	800cb9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa8c:	2387      	movs	r3, #135	; 0x87
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	0018      	movs	r0, r3
 800aa92:	f002 fa1b 	bl	800cecc <USBD_static_malloc>
 800aa96:	0001      	movs	r1, r0
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	23ae      	movs	r3, #174	; 0xae
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	23ae      	movs	r3, #174	; 0xae
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	58d3      	ldr	r3, [r2, r3]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d104      	bne.n	800aab6 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800aaac:	230f      	movs	r3, #15
 800aaae:	18fb      	adds	r3, r7, r3
 800aab0:	2201      	movs	r2, #1
 800aab2:	701a      	strb	r2, [r3, #0]
 800aab4:	e02c      	b.n	800ab10 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	23ae      	movs	r3, #174	; 0xae
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	58d3      	ldr	r3, [r2, r3]
 800aabe:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	23af      	movs	r3, #175	; 0xaf
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	58d3      	ldr	r3, [r2, r3]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	2385      	movs	r3, #133	; 0x85
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	2100      	movs	r1, #0
 800aad4:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	2386      	movs	r3, #134	; 0x86
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	2100      	movs	r1, #0
 800aade:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	7c1b      	ldrb	r3, [r3, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	2381      	movs	r3, #129	; 0x81
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	58d2      	ldr	r2, [r2, r3]
 800aaf0:	2380      	movs	r3, #128	; 0x80
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	f002 f99a 	bl	800ce30 <USBD_LL_PrepareReceive>
 800aafc:	e008      	b.n	800ab10 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	2381      	movs	r3, #129	; 0x81
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	58d2      	ldr	r2, [r2, r3]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	2340      	movs	r3, #64	; 0x40
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	f002 f990 	bl	800ce30 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ab10:	230f      	movs	r3, #15
 800ab12:	18fb      	adds	r3, r7, r3
 800ab14:	781b      	ldrb	r3, [r3, #0]
}
 800ab16:	0018      	movs	r0, r3
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	b004      	add	sp, #16
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	000a      	movs	r2, r1
 800ab28:	1cfb      	adds	r3, r7, #3
 800ab2a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800ab2c:	230f      	movs	r3, #15
 800ab2e:	18fb      	adds	r3, r7, r3
 800ab30:	2200      	movs	r2, #0
 800ab32:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2181      	movs	r1, #129	; 0x81
 800ab38:	0018      	movs	r0, r3
 800ab3a:	f002 f865 	bl	800cc08 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2101      	movs	r1, #1
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f002 f85d 	bl	800cc08 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	23b6      	movs	r3, #182	; 0xb6
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	2100      	movs	r1, #0
 800ab56:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2182      	movs	r1, #130	; 0x82
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	f002 f853 	bl	800cc08 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	23ae      	movs	r3, #174	; 0xae
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	58d3      	ldr	r3, [r2, r3]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d011      	beq.n	800ab98 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	23af      	movs	r3, #175	; 0xaf
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	58d3      	ldr	r3, [r2, r3]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	23ae      	movs	r3, #174	; 0xae
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	58d3      	ldr	r3, [r2, r3]
 800ab88:	0018      	movs	r0, r3
 800ab8a:	f002 f9ab 	bl	800cee4 <USBD_static_free>
    pdev->pClassData = NULL;
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	23ae      	movs	r3, #174	; 0xae
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	2100      	movs	r1, #0
 800ab96:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800ab98:	230f      	movs	r3, #15
 800ab9a:	18fb      	adds	r3, r7, r3
 800ab9c:	781b      	ldrb	r3, [r3, #0]
}
 800ab9e:	0018      	movs	r0, r3
 800aba0:	46bd      	mov	sp, r7
 800aba2:	b004      	add	sp, #16
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	23ae      	movs	r3, #174	; 0xae
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	58d3      	ldr	r3, [r2, r3]
 800abba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800abbc:	230f      	movs	r3, #15
 800abbe:	18fb      	adds	r3, r7, r3
 800abc0:	2200      	movs	r2, #0
 800abc2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800abc4:	230c      	movs	r3, #12
 800abc6:	18fb      	adds	r3, r7, r3
 800abc8:	2200      	movs	r2, #0
 800abca:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800abcc:	2317      	movs	r3, #23
 800abce:	18fb      	adds	r3, r7, r3
 800abd0:	2200      	movs	r2, #0
 800abd2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	001a      	movs	r2, r3
 800abda:	2360      	movs	r3, #96	; 0x60
 800abdc:	4013      	ands	r3, r2
 800abde:	d03d      	beq.n	800ac5c <USBD_CDC_Setup+0xb4>
 800abe0:	2b20      	cmp	r3, #32
 800abe2:	d000      	beq.n	800abe6 <USBD_CDC_Setup+0x3e>
 800abe4:	e094      	b.n	800ad10 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	88db      	ldrh	r3, [r3, #6]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d02b      	beq.n	800ac46 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	b25b      	sxtb	r3, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	da12      	bge.n	800ac1e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	23af      	movs	r3, #175	; 0xaf
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	58d3      	ldr	r3, [r2, r3]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ac06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac08:	683a      	ldr	r2, [r7, #0]
 800ac0a:	88d2      	ldrh	r2, [r2, #6]
 800ac0c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ac0e:	6939      	ldr	r1, [r7, #16]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	88da      	ldrh	r2, [r3, #6]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	0018      	movs	r0, r3
 800ac18:	f001 fbb2 	bl	800c380 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800ac1c:	e083      	b.n	800ad26 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	7859      	ldrb	r1, [r3, #1]
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	2380      	movs	r3, #128	; 0x80
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	88db      	ldrh	r3, [r3, #6]
 800ac2e:	b2d9      	uxtb	r1, r3
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	4a40      	ldr	r2, [pc, #256]	; (800ad34 <USBD_CDC_Setup+0x18c>)
 800ac34:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ac36:	6939      	ldr	r1, [r7, #16]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	88da      	ldrh	r2, [r3, #6]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f001 fbd1 	bl	800c3e6 <USBD_CtlPrepareRx>
      break;
 800ac44:	e06f      	b.n	800ad26 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	23af      	movs	r3, #175	; 0xaf
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	58d3      	ldr	r3, [r2, r3]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	7850      	ldrb	r0, [r2, #1]
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	2200      	movs	r2, #0
 800ac58:	4798      	blx	r3
      break;
 800ac5a:	e064      	b.n	800ad26 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	785b      	ldrb	r3, [r3, #1]
 800ac60:	2b0b      	cmp	r3, #11
 800ac62:	d037      	beq.n	800acd4 <USBD_CDC_Setup+0x12c>
 800ac64:	dc47      	bgt.n	800acf6 <USBD_CDC_Setup+0x14e>
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d002      	beq.n	800ac70 <USBD_CDC_Setup+0xc8>
 800ac6a:	2b0a      	cmp	r3, #10
 800ac6c:	d019      	beq.n	800aca2 <USBD_CDC_Setup+0xfa>
 800ac6e:	e042      	b.n	800acf6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	23a7      	movs	r3, #167	; 0xa7
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	5cd3      	ldrb	r3, [r2, r3]
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d107      	bne.n	800ac8c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ac7c:	230c      	movs	r3, #12
 800ac7e:	18f9      	adds	r1, r7, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	0018      	movs	r0, r3
 800ac86:	f001 fb7b 	bl	800c380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac8a:	e040      	b.n	800ad0e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	0011      	movs	r1, r2
 800ac92:	0018      	movs	r0, r3
 800ac94:	f001 faf6 	bl	800c284 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac98:	2317      	movs	r3, #23
 800ac9a:	18fb      	adds	r3, r7, r3
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	701a      	strb	r2, [r3, #0]
          break;
 800aca0:	e035      	b.n	800ad0e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	23a7      	movs	r3, #167	; 0xa7
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	5cd3      	ldrb	r3, [r2, r3]
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d107      	bne.n	800acbe <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800acae:	230f      	movs	r3, #15
 800acb0:	18f9      	adds	r1, r7, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	0018      	movs	r0, r3
 800acb8:	f001 fb62 	bl	800c380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800acbc:	e027      	b.n	800ad0e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	0011      	movs	r1, r2
 800acc4:	0018      	movs	r0, r3
 800acc6:	f001 fadd 	bl	800c284 <USBD_CtlError>
            ret = USBD_FAIL;
 800acca:	2317      	movs	r3, #23
 800accc:	18fb      	adds	r3, r7, r3
 800acce:	2202      	movs	r2, #2
 800acd0:	701a      	strb	r2, [r3, #0]
          break;
 800acd2:	e01c      	b.n	800ad0e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	23a7      	movs	r3, #167	; 0xa7
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	5cd3      	ldrb	r3, [r2, r3]
 800acdc:	2b03      	cmp	r3, #3
 800acde:	d015      	beq.n	800ad0c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	0011      	movs	r1, r2
 800ace6:	0018      	movs	r0, r3
 800ace8:	f001 facc 	bl	800c284 <USBD_CtlError>
            ret = USBD_FAIL;
 800acec:	2317      	movs	r3, #23
 800acee:	18fb      	adds	r3, r7, r3
 800acf0:	2202      	movs	r2, #2
 800acf2:	701a      	strb	r2, [r3, #0]
          }
          break;
 800acf4:	e00a      	b.n	800ad0c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	0011      	movs	r1, r2
 800acfc:	0018      	movs	r0, r3
 800acfe:	f001 fac1 	bl	800c284 <USBD_CtlError>
          ret = USBD_FAIL;
 800ad02:	2317      	movs	r3, #23
 800ad04:	18fb      	adds	r3, r7, r3
 800ad06:	2202      	movs	r2, #2
 800ad08:	701a      	strb	r2, [r3, #0]
          break;
 800ad0a:	e000      	b.n	800ad0e <USBD_CDC_Setup+0x166>
          break;
 800ad0c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800ad0e:	e00a      	b.n	800ad26 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	0011      	movs	r1, r2
 800ad16:	0018      	movs	r0, r3
 800ad18:	f001 fab4 	bl	800c284 <USBD_CtlError>
      ret = USBD_FAIL;
 800ad1c:	2317      	movs	r3, #23
 800ad1e:	18fb      	adds	r3, r7, r3
 800ad20:	2202      	movs	r2, #2
 800ad22:	701a      	strb	r2, [r3, #0]
      break;
 800ad24:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800ad26:	2317      	movs	r3, #23
 800ad28:	18fb      	adds	r3, r7, r3
 800ad2a:	781b      	ldrb	r3, [r3, #0]
}
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	b006      	add	sp, #24
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	00000201 	.word	0x00000201

0800ad38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	000a      	movs	r2, r1
 800ad42:	1cfb      	adds	r3, r7, #3
 800ad44:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	23ae      	movs	r3, #174	; 0xae
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	58d3      	ldr	r3, [r2, r3]
 800ad4e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	23b0      	movs	r3, #176	; 0xb0
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	58d3      	ldr	r3, [r2, r3]
 800ad58:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	23ae      	movs	r3, #174	; 0xae
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	58d3      	ldr	r3, [r2, r3]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d03e      	beq.n	800ade4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ad66:	1cfb      	adds	r3, r7, #3
 800ad68:	781a      	ldrb	r2, [r3, #0]
 800ad6a:	6879      	ldr	r1, [r7, #4]
 800ad6c:	0013      	movs	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	189b      	adds	r3, r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	18cb      	adds	r3, r1, r3
 800ad76:	331c      	adds	r3, #28
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d02b      	beq.n	800add6 <USBD_CDC_DataIn+0x9e>
 800ad7e:	1cfb      	adds	r3, r7, #3
 800ad80:	781a      	ldrb	r2, [r3, #0]
 800ad82:	6879      	ldr	r1, [r7, #4]
 800ad84:	0013      	movs	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	189b      	adds	r3, r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	18cb      	adds	r3, r1, r3
 800ad8e:	331c      	adds	r3, #28
 800ad90:	6818      	ldr	r0, [r3, #0]
 800ad92:	1cfb      	adds	r3, r7, #3
 800ad94:	781a      	ldrb	r2, [r3, #0]
 800ad96:	68b9      	ldr	r1, [r7, #8]
 800ad98:	0013      	movs	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	189b      	adds	r3, r3, r2
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	18cb      	adds	r3, r1, r3
 800ada2:	3338      	adds	r3, #56	; 0x38
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	0019      	movs	r1, r3
 800ada8:	f7f5 fa46 	bl	8000238 <__aeabi_uidivmod>
 800adac:	1e0b      	subs	r3, r1, #0
 800adae:	d112      	bne.n	800add6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800adb0:	1cfb      	adds	r3, r7, #3
 800adb2:	781a      	ldrb	r2, [r3, #0]
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	0013      	movs	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	189b      	adds	r3, r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	18cb      	adds	r3, r1, r3
 800adc0:	331c      	adds	r3, #28
 800adc2:	2200      	movs	r2, #0
 800adc4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800adc6:	1cfb      	adds	r3, r7, #3
 800adc8:	7819      	ldrb	r1, [r3, #0]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	2300      	movs	r3, #0
 800adce:	2200      	movs	r2, #0
 800add0:	f001 fff7 	bl	800cdc2 <USBD_LL_Transmit>
 800add4:	e004      	b.n	800ade0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	2385      	movs	r3, #133	; 0x85
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	2100      	movs	r1, #0
 800adde:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	e000      	b.n	800ade6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800ade4:	2302      	movs	r3, #2
  }
}
 800ade6:	0018      	movs	r0, r3
 800ade8:	46bd      	mov	sp, r7
 800adea:	b004      	add	sp, #16
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b084      	sub	sp, #16
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	000a      	movs	r2, r1
 800adf8:	1cfb      	adds	r3, r7, #3
 800adfa:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	23ae      	movs	r3, #174	; 0xae
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	58d3      	ldr	r3, [r2, r3]
 800ae04:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae06:	1cfb      	adds	r3, r7, #3
 800ae08:	781a      	ldrb	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	0011      	movs	r1, r2
 800ae0e:	0018      	movs	r0, r3
 800ae10:	f002 f845 	bl	800ce9e <USBD_LL_GetRxDataSize>
 800ae14:	0001      	movs	r1, r0
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	2383      	movs	r3, #131	; 0x83
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	23ae      	movs	r3, #174	; 0xae
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	58d3      	ldr	r3, [r2, r3]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d011      	beq.n	800ae4e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	23af      	movs	r3, #175	; 0xaf
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	58d3      	ldr	r3, [r2, r3]
 800ae32:	68da      	ldr	r2, [r3, #12]
 800ae34:	68f9      	ldr	r1, [r7, #12]
 800ae36:	2381      	movs	r3, #129	; 0x81
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	58c8      	ldr	r0, [r1, r3]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2183      	movs	r1, #131	; 0x83
 800ae40:	0089      	lsls	r1, r1, #2
 800ae42:	468c      	mov	ip, r1
 800ae44:	4463      	add	r3, ip
 800ae46:	0019      	movs	r1, r3
 800ae48:	4790      	blx	r2

    return USBD_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e000      	b.n	800ae50 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800ae4e:	2302      	movs	r3, #2
  }
}
 800ae50:	0018      	movs	r0, r3
 800ae52:	46bd      	mov	sp, r7
 800ae54:	b004      	add	sp, #16
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae58:	b590      	push	{r4, r7, lr}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	23ae      	movs	r3, #174	; 0xae
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	58d3      	ldr	r3, [r2, r3]
 800ae68:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	23af      	movs	r3, #175	; 0xaf
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	58d3      	ldr	r3, [r2, r3]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d019      	beq.n	800aeaa <USBD_CDC_EP0_RxReady+0x52>
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	2380      	movs	r3, #128	; 0x80
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	5cd3      	ldrb	r3, [r2, r3]
 800ae7e:	2bff      	cmp	r3, #255	; 0xff
 800ae80:	d013      	beq.n	800aeaa <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	23af      	movs	r3, #175	; 0xaf
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	58d3      	ldr	r3, [r2, r3]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	68f9      	ldr	r1, [r7, #12]
 800ae8e:	2280      	movs	r2, #128	; 0x80
 800ae90:	0092      	lsls	r2, r2, #2
 800ae92:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800ae94:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	4c06      	ldr	r4, [pc, #24]	; (800aeb4 <USBD_CDC_EP0_RxReady+0x5c>)
 800ae9a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae9c:	b292      	uxth	r2, r2
 800ae9e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	2380      	movs	r3, #128	; 0x80
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	21ff      	movs	r1, #255	; 0xff
 800aea8:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	0018      	movs	r0, r3
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	b005      	add	sp, #20
 800aeb2:	bd90      	pop	{r4, r7, pc}
 800aeb4:	00000201 	.word	0x00000201

0800aeb8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2243      	movs	r2, #67	; 0x43
 800aec4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800aec6:	4b02      	ldr	r3, [pc, #8]	; (800aed0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800aec8:	0018      	movs	r0, r3
 800aeca:	46bd      	mov	sp, r7
 800aecc:	b002      	add	sp, #8
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	20000094 	.word	0x20000094

0800aed4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2243      	movs	r2, #67	; 0x43
 800aee0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800aee2:	4b02      	ldr	r3, [pc, #8]	; (800aeec <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800aee4:	0018      	movs	r0, r3
 800aee6:	46bd      	mov	sp, r7
 800aee8:	b002      	add	sp, #8
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	20000050 	.word	0x20000050

0800aef0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2243      	movs	r2, #67	; 0x43
 800aefc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800aefe:	4b02      	ldr	r3, [pc, #8]	; (800af08 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800af00:	0018      	movs	r0, r3
 800af02:	46bd      	mov	sp, r7
 800af04:	b002      	add	sp, #8
 800af06:	bd80      	pop	{r7, pc}
 800af08:	200000d8 	.word	0x200000d8

0800af0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	220a      	movs	r2, #10
 800af18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800af1a:	4b02      	ldr	r3, [pc, #8]	; (800af24 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800af1c:	0018      	movs	r0, r3
 800af1e:	46bd      	mov	sp, r7
 800af20:	b002      	add	sp, #8
 800af22:	bd80      	pop	{r7, pc}
 800af24:	2000000c 	.word	0x2000000c

0800af28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800af32:	200f      	movs	r0, #15
 800af34:	183b      	adds	r3, r7, r0
 800af36:	2202      	movs	r2, #2
 800af38:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d007      	beq.n	800af50 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	23af      	movs	r3, #175	; 0xaf
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800af4a:	183b      	adds	r3, r7, r0
 800af4c:	2200      	movs	r2, #0
 800af4e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800af50:	230f      	movs	r3, #15
 800af52:	18fb      	adds	r3, r7, r3
 800af54:	781b      	ldrb	r3, [r3, #0]
}
 800af56:	0018      	movs	r0, r3
 800af58:	46bd      	mov	sp, r7
 800af5a:	b004      	add	sp, #16
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b086      	sub	sp, #24
 800af62:	af00      	add	r7, sp, #0
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	60b9      	str	r1, [r7, #8]
 800af68:	1dbb      	adds	r3, r7, #6
 800af6a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	23ae      	movs	r3, #174	; 0xae
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	58d3      	ldr	r3, [r2, r3]
 800af74:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	2382      	movs	r3, #130	; 0x82
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	68b9      	ldr	r1, [r7, #8]
 800af7e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800af80:	1dbb      	adds	r3, r7, #6
 800af82:	8819      	ldrh	r1, [r3, #0]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	2384      	movs	r3, #132	; 0x84
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	0018      	movs	r0, r3
 800af90:	46bd      	mov	sp, r7
 800af92:	b006      	add	sp, #24
 800af94:	bd80      	pop	{r7, pc}

0800af96 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b084      	sub	sp, #16
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	23ae      	movs	r3, #174	; 0xae
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	58d3      	ldr	r3, [r2, r3]
 800afa8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	2381      	movs	r3, #129	; 0x81
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	0018      	movs	r0, r3
 800afb8:	46bd      	mov	sp, r7
 800afba:	b004      	add	sp, #16
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	23ae      	movs	r3, #174	; 0xae
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	58d3      	ldr	r3, [r2, r3]
 800afce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	23ae      	movs	r3, #174	; 0xae
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	58d3      	ldr	r3, [r2, r3]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d022      	beq.n	800b022 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	2385      	movs	r3, #133	; 0x85
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	58d3      	ldr	r3, [r2, r3]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d11a      	bne.n	800b01e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	2385      	movs	r3, #133	; 0x85
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	2101      	movs	r1, #1
 800aff0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	2384      	movs	r3, #132	; 0x84
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	58d2      	ldr	r2, [r2, r3]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	2382      	movs	r3, #130	; 0x82
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	2384      	movs	r3, #132	; 0x84
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b00e:	b29b      	uxth	r3, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	000a      	movs	r2, r1
 800b014:	2181      	movs	r1, #129	; 0x81
 800b016:	f001 fed4 	bl	800cdc2 <USBD_LL_Transmit>

      return USBD_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	e002      	b.n	800b024 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800b01e:	2301      	movs	r3, #1
 800b020:	e000      	b.n	800b024 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800b022:	2302      	movs	r3, #2
  }
}
 800b024:	0018      	movs	r0, r3
 800b026:	46bd      	mov	sp, r7
 800b028:	b004      	add	sp, #16
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	23ae      	movs	r3, #174	; 0xae
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	58d3      	ldr	r3, [r2, r3]
 800b03c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	23ae      	movs	r3, #174	; 0xae
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	58d3      	ldr	r3, [r2, r3]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d019      	beq.n	800b07e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	7c1b      	ldrb	r3, [r3, #16]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d10a      	bne.n	800b068 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	2381      	movs	r3, #129	; 0x81
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	58d2      	ldr	r2, [r2, r3]
 800b05a:	2380      	movs	r3, #128	; 0x80
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	2101      	movs	r1, #1
 800b062:	f001 fee5 	bl	800ce30 <USBD_LL_PrepareReceive>
 800b066:	e008      	b.n	800b07a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	2381      	movs	r3, #129	; 0x81
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	58d2      	ldr	r2, [r2, r3]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	2340      	movs	r3, #64	; 0x40
 800b074:	2101      	movs	r1, #1
 800b076:	f001 fedb 	bl	800ce30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	e000      	b.n	800b080 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800b07e:	2302      	movs	r3, #2
  }
}
 800b080:	0018      	movs	r0, r3
 800b082:	46bd      	mov	sp, r7
 800b084:	b004      	add	sp, #16
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	1dfb      	adds	r3, r7, #7
 800b094:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d101      	bne.n	800b0a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b09c:	2302      	movs	r3, #2
 800b09e:	e020      	b.n	800b0e2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	23ad      	movs	r3, #173	; 0xad
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	58d3      	ldr	r3, [r2, r3]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d004      	beq.n	800b0b6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	23ad      	movs	r3, #173	; 0xad
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d004      	beq.n	800b0c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	23ac      	movs	r3, #172	; 0xac
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	68b9      	ldr	r1, [r7, #8]
 800b0c4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	23a7      	movs	r3, #167	; 0xa7
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	2101      	movs	r1, #1
 800b0ce:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	1dfa      	adds	r2, r7, #7
 800b0d4:	7812      	ldrb	r2, [r2, #0]
 800b0d6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	0018      	movs	r0, r3
 800b0dc:	f001 fcd4 	bl	800ca88 <USBD_LL_Init>

  return USBD_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	b004      	add	sp, #16
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b0f4:	200f      	movs	r0, #15
 800b0f6:	183b      	adds	r3, r7, r0
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d008      	beq.n	800b114 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	23ad      	movs	r3, #173	; 0xad
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800b10c:	183b      	adds	r3, r7, r0
 800b10e:	2200      	movs	r2, #0
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	e003      	b.n	800b11c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b114:	230f      	movs	r3, #15
 800b116:	18fb      	adds	r3, r7, r3
 800b118:	2202      	movs	r2, #2
 800b11a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b11c:	230f      	movs	r3, #15
 800b11e:	18fb      	adds	r3, r7, r3
 800b120:	781b      	ldrb	r3, [r3, #0]
}
 800b122:	0018      	movs	r0, r3
 800b124:	46bd      	mov	sp, r7
 800b126:	b004      	add	sp, #16
 800b128:	bd80      	pop	{r7, pc}

0800b12a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b082      	sub	sp, #8
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	0018      	movs	r0, r3
 800b136:	f001 fd0b 	bl	800cb50 <USBD_LL_Start>

  return USBD_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	0018      	movs	r0, r3
 800b13e:	46bd      	mov	sp, r7
 800b140:	b002      	add	sp, #8
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	0018      	movs	r0, r3
 800b150:	46bd      	mov	sp, r7
 800b152:	b002      	add	sp, #8
 800b154:	bd80      	pop	{r7, pc}

0800b156 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b156:	b590      	push	{r4, r7, lr}
 800b158:	b085      	sub	sp, #20
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	000a      	movs	r2, r1
 800b160:	1cfb      	adds	r3, r7, #3
 800b162:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b164:	240f      	movs	r4, #15
 800b166:	193b      	adds	r3, r7, r4
 800b168:	2202      	movs	r2, #2
 800b16a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	23ad      	movs	r3, #173	; 0xad
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	58d3      	ldr	r3, [r2, r3]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00e      	beq.n	800b196 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	23ad      	movs	r3, #173	; 0xad
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	58d3      	ldr	r3, [r2, r3]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	1cfa      	adds	r2, r7, #3
 800b184:	7811      	ldrb	r1, [r2, #0]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	0010      	movs	r0, r2
 800b18a:	4798      	blx	r3
 800b18c:	1e03      	subs	r3, r0, #0
 800b18e:	d102      	bne.n	800b196 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800b190:	193b      	adds	r3, r7, r4
 800b192:	2200      	movs	r2, #0
 800b194:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800b196:	230f      	movs	r3, #15
 800b198:	18fb      	adds	r3, r7, r3
 800b19a:	781b      	ldrb	r3, [r3, #0]
}
 800b19c:	0018      	movs	r0, r3
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	b005      	add	sp, #20
 800b1a2:	bd90      	pop	{r4, r7, pc}

0800b1a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	000a      	movs	r2, r1
 800b1ae:	1cfb      	adds	r3, r7, #3
 800b1b0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	23ad      	movs	r3, #173	; 0xad
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	58d3      	ldr	r3, [r2, r3]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	1cfa      	adds	r2, r7, #3
 800b1be:	7811      	ldrb	r1, [r2, #0]
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	0010      	movs	r0, r2
 800b1c4:	4798      	blx	r3

  return USBD_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	b002      	add	sp, #8
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	22aa      	movs	r2, #170	; 0xaa
 800b1de:	0092      	lsls	r2, r2, #2
 800b1e0:	4694      	mov	ip, r2
 800b1e2:	4463      	add	r3, ip
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	0011      	movs	r1, r2
 800b1e8:	0018      	movs	r0, r3
 800b1ea:	f001 f810 	bl	800c20e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	23a5      	movs	r3, #165	; 0xa5
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a23      	ldr	r2, [pc, #140]	; (800b288 <USBD_LL_SetupStage+0xb8>)
 800b1fc:	5a9b      	ldrh	r3, [r3, r2]
 800b1fe:	0019      	movs	r1, r3
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	23a6      	movs	r3, #166	; 0xa6
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	23aa      	movs	r3, #170	; 0xaa
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	5cd3      	ldrb	r3, [r2, r3]
 800b210:	001a      	movs	r2, r3
 800b212:	231f      	movs	r3, #31
 800b214:	4013      	ands	r3, r2
 800b216:	2b02      	cmp	r3, #2
 800b218:	d019      	beq.n	800b24e <USBD_LL_SetupStage+0x7e>
 800b21a:	d822      	bhi.n	800b262 <USBD_LL_SetupStage+0x92>
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <USBD_LL_SetupStage+0x56>
 800b220:	2b01      	cmp	r3, #1
 800b222:	d00a      	beq.n	800b23a <USBD_LL_SetupStage+0x6a>
 800b224:	e01d      	b.n	800b262 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	22aa      	movs	r2, #170	; 0xaa
 800b22a:	0092      	lsls	r2, r2, #2
 800b22c:	189a      	adds	r2, r3, r2
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	0011      	movs	r1, r2
 800b232:	0018      	movs	r0, r3
 800b234:	f000 fa10 	bl	800b658 <USBD_StdDevReq>
      break;
 800b238:	e020      	b.n	800b27c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	22aa      	movs	r2, #170	; 0xaa
 800b23e:	0092      	lsls	r2, r2, #2
 800b240:	189a      	adds	r2, r3, r2
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	0011      	movs	r1, r2
 800b246:	0018      	movs	r0, r3
 800b248:	f000 fa78 	bl	800b73c <USBD_StdItfReq>
      break;
 800b24c:	e016      	b.n	800b27c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	22aa      	movs	r2, #170	; 0xaa
 800b252:	0092      	lsls	r2, r2, #2
 800b254:	189a      	adds	r2, r3, r2
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	0011      	movs	r1, r2
 800b25a:	0018      	movs	r0, r3
 800b25c:	f000 fac5 	bl	800b7ea <USBD_StdEPReq>
      break;
 800b260:	e00c      	b.n	800b27c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	23aa      	movs	r3, #170	; 0xaa
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	5cd3      	ldrb	r3, [r2, r3]
 800b26a:	227f      	movs	r2, #127	; 0x7f
 800b26c:	4393      	bics	r3, r2
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	0011      	movs	r1, r2
 800b274:	0018      	movs	r0, r3
 800b276:	f001 fcf2 	bl	800cc5e <USBD_LL_StallEP>
      break;
 800b27a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	0018      	movs	r0, r3
 800b280:	46bd      	mov	sp, r7
 800b282:	b002      	add	sp, #8
 800b284:	bd80      	pop	{r7, pc}
 800b286:	46c0      	nop			; (mov r8, r8)
 800b288:	000002ae 	.word	0x000002ae

0800b28c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	607a      	str	r2, [r7, #4]
 800b296:	200b      	movs	r0, #11
 800b298:	183b      	adds	r3, r7, r0
 800b29a:	1c0a      	adds	r2, r1, #0
 800b29c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b29e:	183b      	adds	r3, r7, r0
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d154      	bne.n	800b350 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	3355      	adds	r3, #85	; 0x55
 800b2aa:	33ff      	adds	r3, #255	; 0xff
 800b2ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	23a5      	movs	r3, #165	; 0xa5
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	58d3      	ldr	r3, [r2, r3]
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d139      	bne.n	800b32e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d919      	bls.n	800b2fa <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	68da      	ldr	r2, [r3, #12]
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	1ad2      	subs	r2, r2, r3
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	68da      	ldr	r2, [r3, #12]
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d203      	bcs.n	800b2e8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	e002      	b.n	800b2ee <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	001a      	movs	r2, r3
 800b2f4:	f001 f89b 	bl	800c42e <USBD_CtlContinueRx>
 800b2f8:	e045      	b.n	800b386 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	23ad      	movs	r3, #173	; 0xad
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	58d3      	ldr	r3, [r2, r3]
 800b302:	691b      	ldr	r3, [r3, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00d      	beq.n	800b324 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	23a7      	movs	r3, #167	; 0xa7
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b310:	2b03      	cmp	r3, #3
 800b312:	d107      	bne.n	800b324 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	23ad      	movs	r3, #173	; 0xad
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	58d3      	ldr	r3, [r2, r3]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	0010      	movs	r0, r2
 800b322:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	0018      	movs	r0, r3
 800b328:	f001 f894 	bl	800c454 <USBD_CtlSendStatus>
 800b32c:	e02b      	b.n	800b386 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	23a5      	movs	r3, #165	; 0xa5
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	58d3      	ldr	r3, [r2, r3]
 800b336:	2b05      	cmp	r3, #5
 800b338:	d125      	bne.n	800b386 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	23a5      	movs	r3, #165	; 0xa5
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	2100      	movs	r1, #0
 800b342:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2100      	movs	r1, #0
 800b348:	0018      	movs	r0, r3
 800b34a:	f001 fc88 	bl	800cc5e <USBD_LL_StallEP>
 800b34e:	e01a      	b.n	800b386 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	23ad      	movs	r3, #173	; 0xad
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	58d3      	ldr	r3, [r2, r3]
 800b358:	699b      	ldr	r3, [r3, #24]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d011      	beq.n	800b382 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	23a7      	movs	r3, #167	; 0xa7
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800b366:	2b03      	cmp	r3, #3
 800b368:	d10b      	bne.n	800b382 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	23ad      	movs	r3, #173	; 0xad
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	58d3      	ldr	r3, [r2, r3]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	220b      	movs	r2, #11
 800b376:	18ba      	adds	r2, r7, r2
 800b378:	7811      	ldrb	r1, [r2, #0]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	0010      	movs	r0, r2
 800b37e:	4798      	blx	r3
 800b380:	e001      	b.n	800b386 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b382:	2302      	movs	r3, #2
 800b384:	e000      	b.n	800b388 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	0018      	movs	r0, r3
 800b38a:	46bd      	mov	sp, r7
 800b38c:	b006      	add	sp, #24
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	607a      	str	r2, [r7, #4]
 800b39a:	200b      	movs	r0, #11
 800b39c:	183b      	adds	r3, r7, r0
 800b39e:	1c0a      	adds	r2, r1, #0
 800b3a0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b3a2:	183b      	adds	r3, r7, r0
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d000      	beq.n	800b3ac <USBD_LL_DataInStage+0x1c>
 800b3aa:	e08e      	b.n	800b4ca <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3314      	adds	r3, #20
 800b3b0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	23a5      	movs	r3, #165	; 0xa5
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	58d3      	ldr	r3, [r2, r3]
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d164      	bne.n	800b488 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d915      	bls.n	800b3f6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	68da      	ldr	r2, [r3, #12]
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	1ad2      	subs	r2, r2, r3
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	0018      	movs	r0, r3
 800b3e4:	f000 ffec 	bl	800c3c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	f001 fd1e 	bl	800ce30 <USBD_LL_PrepareReceive>
 800b3f4:	e059      	b.n	800b4aa <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	689a      	ldr	r2, [r3, #8]
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	0019      	movs	r1, r3
 800b400:	0010      	movs	r0, r2
 800b402:	f7f4 ff19 	bl	8000238 <__aeabi_uidivmod>
 800b406:	1e0b      	subs	r3, r1, #0
 800b408:	d11f      	bne.n	800b44a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	689a      	ldr	r2, [r3, #8]
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b412:	429a      	cmp	r2, r3
 800b414:	d319      	bcc.n	800b44a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	689a      	ldr	r2, [r3, #8]
 800b41a:	68f9      	ldr	r1, [r7, #12]
 800b41c:	23a6      	movs	r3, #166	; 0xa6
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800b422:	429a      	cmp	r2, r3
 800b424:	d211      	bcs.n	800b44a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2200      	movs	r2, #0
 800b42a:	2100      	movs	r1, #0
 800b42c:	0018      	movs	r0, r3
 800b42e:	f000 ffc7 	bl	800c3c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	23a6      	movs	r3, #166	; 0xa6
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	2100      	movs	r1, #0
 800b43a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	2300      	movs	r3, #0
 800b440:	2200      	movs	r2, #0
 800b442:	2100      	movs	r1, #0
 800b444:	f001 fcf4 	bl	800ce30 <USBD_LL_PrepareReceive>
 800b448:	e02f      	b.n	800b4aa <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	23ad      	movs	r3, #173	; 0xad
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	58d3      	ldr	r3, [r2, r3]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00d      	beq.n	800b474 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	23a7      	movs	r3, #167	; 0xa7
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b460:	2b03      	cmp	r3, #3
 800b462:	d107      	bne.n	800b474 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	23ad      	movs	r3, #173	; 0xad
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	58d3      	ldr	r3, [r2, r3]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	0010      	movs	r0, r2
 800b472:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2180      	movs	r1, #128	; 0x80
 800b478:	0018      	movs	r0, r3
 800b47a:	f001 fbf0 	bl	800cc5e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	0018      	movs	r0, r3
 800b482:	f000 fffb 	bl	800c47c <USBD_CtlReceiveStatus>
 800b486:	e010      	b.n	800b4aa <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	23a5      	movs	r3, #165	; 0xa5
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	58d3      	ldr	r3, [r2, r3]
 800b490:	2b04      	cmp	r3, #4
 800b492:	d005      	beq.n	800b4a0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	23a5      	movs	r3, #165	; 0xa5
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d104      	bne.n	800b4aa <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2180      	movs	r1, #128	; 0x80
 800b4a4:	0018      	movs	r0, r3
 800b4a6:	f001 fbda 	bl	800cc5e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	23a8      	movs	r3, #168	; 0xa8
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	5cd3      	ldrb	r3, [r2, r3]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d124      	bne.n	800b500 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	0018      	movs	r0, r3
 800b4ba:	f7ff fe43 	bl	800b144 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	23a8      	movs	r3, #168	; 0xa8
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	54d1      	strb	r1, [r2, r3]
 800b4c8:	e01a      	b.n	800b500 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	23ad      	movs	r3, #173	; 0xad
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	58d3      	ldr	r3, [r2, r3]
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d011      	beq.n	800b4fc <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	23a7      	movs	r3, #167	; 0xa7
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4e0:	2b03      	cmp	r3, #3
 800b4e2:	d10b      	bne.n	800b4fc <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	23ad      	movs	r3, #173	; 0xad
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	58d3      	ldr	r3, [r2, r3]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	220b      	movs	r2, #11
 800b4f0:	18ba      	adds	r2, r7, r2
 800b4f2:	7811      	ldrb	r1, [r2, #0]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	0010      	movs	r0, r2
 800b4f8:	4798      	blx	r3
 800b4fa:	e001      	b.n	800b500 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	e000      	b.n	800b502 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	0018      	movs	r0, r3
 800b504:	46bd      	mov	sp, r7
 800b506:	b006      	add	sp, #24
 800b508:	bd80      	pop	{r7, pc}

0800b50a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b082      	sub	sp, #8
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	2340      	movs	r3, #64	; 0x40
 800b516:	2200      	movs	r2, #0
 800b518:	2100      	movs	r1, #0
 800b51a:	f001 fb3e 	bl	800cb9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	23ac      	movs	r3, #172	; 0xac
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	2101      	movs	r1, #1
 800b526:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	23b2      	movs	r3, #178	; 0xb2
 800b52c:	005b      	lsls	r3, r3, #1
 800b52e:	2140      	movs	r1, #64	; 0x40
 800b530:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	2340      	movs	r3, #64	; 0x40
 800b536:	2200      	movs	r2, #0
 800b538:	2180      	movs	r1, #128	; 0x80
 800b53a:	f001 fb2e 	bl	800cb9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2240      	movs	r2, #64	; 0x40
 800b548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	23a7      	movs	r3, #167	; 0xa7
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	2101      	movs	r1, #1
 800b552:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	23a5      	movs	r3, #165	; 0xa5
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	2100      	movs	r1, #0
 800b55c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	23a9      	movs	r3, #169	; 0xa9
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	2100      	movs	r1, #0
 800b56c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	23ae      	movs	r3, #174	; 0xae
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	58d3      	ldr	r3, [r2, r3]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00a      	beq.n	800b590 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	23ad      	movs	r3, #173	; 0xad
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	58d3      	ldr	r3, [r2, r3]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	b2d9      	uxtb	r1, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	0018      	movs	r0, r3
 800b58e:	4790      	blx	r2
  }

  return USBD_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	0018      	movs	r0, r3
 800b594:	46bd      	mov	sp, r7
 800b596:	b002      	add	sp, #8
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b082      	sub	sp, #8
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	000a      	movs	r2, r1
 800b5a4:	1cfb      	adds	r3, r7, #3
 800b5a6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	1cfa      	adds	r2, r7, #3
 800b5ac:	7812      	ldrb	r2, [r2, #0]
 800b5ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	0018      	movs	r0, r3
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	b002      	add	sp, #8
 800b5b8:	bd80      	pop	{r7, pc}
	...

0800b5bc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	23a7      	movs	r3, #167	; 0xa7
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	5cd1      	ldrb	r1, [r2, r3]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a06      	ldr	r2, [pc, #24]	; (800b5e8 <USBD_LL_Suspend+0x2c>)
 800b5d0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	23a7      	movs	r3, #167	; 0xa7
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	2104      	movs	r1, #4
 800b5da:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	0018      	movs	r0, r3
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	b002      	add	sp, #8
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	46c0      	nop			; (mov r8, r8)
 800b5e8:	0000029d 	.word	0x0000029d

0800b5ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	23a7      	movs	r3, #167	; 0xa7
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	5cd3      	ldrb	r3, [r2, r3]
 800b5fc:	2b04      	cmp	r3, #4
 800b5fe:	d106      	bne.n	800b60e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4a05      	ldr	r2, [pc, #20]	; (800b618 <USBD_LL_Resume+0x2c>)
 800b604:	5c99      	ldrb	r1, [r3, r2]
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	23a7      	movs	r3, #167	; 0xa7
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	0018      	movs	r0, r3
 800b612:	46bd      	mov	sp, r7
 800b614:	b002      	add	sp, #8
 800b616:	bd80      	pop	{r7, pc}
 800b618:	0000029d 	.word	0x0000029d

0800b61c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	23a7      	movs	r3, #167	; 0xa7
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	5cd3      	ldrb	r3, [r2, r3]
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d10e      	bne.n	800b64e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	23ad      	movs	r3, #173	; 0xad
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	58d3      	ldr	r3, [r2, r3]
 800b638:	69db      	ldr	r3, [r3, #28]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d007      	beq.n	800b64e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	23ad      	movs	r3, #173	; 0xad
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	58d3      	ldr	r3, [r2, r3]
 800b646:	69db      	ldr	r3, [r3, #28]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	0010      	movs	r0, r2
 800b64c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	0018      	movs	r0, r3
 800b652:	46bd      	mov	sp, r7
 800b654:	b002      	add	sp, #8
 800b656:	bd80      	pop	{r7, pc}

0800b658 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b662:	230f      	movs	r3, #15
 800b664:	18fb      	adds	r3, r7, r3
 800b666:	2200      	movs	r2, #0
 800b668:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	001a      	movs	r2, r3
 800b670:	2360      	movs	r3, #96	; 0x60
 800b672:	4013      	ands	r3, r2
 800b674:	2b40      	cmp	r3, #64	; 0x40
 800b676:	d004      	beq.n	800b682 <USBD_StdDevReq+0x2a>
 800b678:	d84f      	bhi.n	800b71a <USBD_StdDevReq+0xc2>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00b      	beq.n	800b696 <USBD_StdDevReq+0x3e>
 800b67e:	2b20      	cmp	r3, #32
 800b680:	d14b      	bne.n	800b71a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	23ad      	movs	r3, #173	; 0xad
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	58d3      	ldr	r3, [r2, r3]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	0010      	movs	r0, r2
 800b692:	4798      	blx	r3
      break;
 800b694:	e048      	b.n	800b728 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	785b      	ldrb	r3, [r3, #1]
 800b69a:	2b09      	cmp	r3, #9
 800b69c:	d835      	bhi.n	800b70a <USBD_StdDevReq+0xb2>
 800b69e:	009a      	lsls	r2, r3, #2
 800b6a0:	4b25      	ldr	r3, [pc, #148]	; (800b738 <USBD_StdDevReq+0xe0>)
 800b6a2:	18d3      	adds	r3, r2, r3
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	0011      	movs	r1, r2
 800b6ae:	0018      	movs	r0, r3
 800b6b0:	f000 fa52 	bl	800bb58 <USBD_GetDescriptor>
          break;
 800b6b4:	e030      	b.n	800b718 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	0011      	movs	r1, r2
 800b6bc:	0018      	movs	r0, r3
 800b6be:	f000 fbfd 	bl	800bebc <USBD_SetAddress>
          break;
 800b6c2:	e029      	b.n	800b718 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	0011      	movs	r1, r2
 800b6ca:	0018      	movs	r0, r3
 800b6cc:	f000 fc4a 	bl	800bf64 <USBD_SetConfig>
          break;
 800b6d0:	e022      	b.n	800b718 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	0011      	movs	r1, r2
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f000 fce7 	bl	800c0ac <USBD_GetConfig>
          break;
 800b6de:	e01b      	b.n	800b718 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	0011      	movs	r1, r2
 800b6e6:	0018      	movs	r0, r3
 800b6e8:	f000 fd1b 	bl	800c122 <USBD_GetStatus>
          break;
 800b6ec:	e014      	b.n	800b718 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	0011      	movs	r1, r2
 800b6f4:	0018      	movs	r0, r3
 800b6f6:	f000 fd4e 	bl	800c196 <USBD_SetFeature>
          break;
 800b6fa:	e00d      	b.n	800b718 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	0011      	movs	r1, r2
 800b702:	0018      	movs	r0, r3
 800b704:	f000 fd5d 	bl	800c1c2 <USBD_ClrFeature>
          break;
 800b708:	e006      	b.n	800b718 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	0011      	movs	r1, r2
 800b710:	0018      	movs	r0, r3
 800b712:	f000 fdb7 	bl	800c284 <USBD_CtlError>
          break;
 800b716:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b718:	e006      	b.n	800b728 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	0011      	movs	r1, r2
 800b720:	0018      	movs	r0, r3
 800b722:	f000 fdaf 	bl	800c284 <USBD_CtlError>
      break;
 800b726:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b728:	230f      	movs	r3, #15
 800b72a:	18fb      	adds	r3, r7, r3
 800b72c:	781b      	ldrb	r3, [r3, #0]
}
 800b72e:	0018      	movs	r0, r3
 800b730:	46bd      	mov	sp, r7
 800b732:	b004      	add	sp, #16
 800b734:	bd80      	pop	{r7, pc}
 800b736:	46c0      	nop			; (mov r8, r8)
 800b738:	0800d9c0 	.word	0x0800d9c0

0800b73c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b73c:	b5b0      	push	{r4, r5, r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b746:	230f      	movs	r3, #15
 800b748:	18fb      	adds	r3, r7, r3
 800b74a:	2200      	movs	r2, #0
 800b74c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	001a      	movs	r2, r3
 800b754:	2360      	movs	r3, #96	; 0x60
 800b756:	4013      	ands	r3, r2
 800b758:	2b40      	cmp	r3, #64	; 0x40
 800b75a:	d004      	beq.n	800b766 <USBD_StdItfReq+0x2a>
 800b75c:	d839      	bhi.n	800b7d2 <USBD_StdItfReq+0x96>
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <USBD_StdItfReq+0x2a>
 800b762:	2b20      	cmp	r3, #32
 800b764:	d135      	bne.n	800b7d2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	23a7      	movs	r3, #167	; 0xa7
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	5cd3      	ldrb	r3, [r2, r3]
 800b76e:	3b01      	subs	r3, #1
 800b770:	2b02      	cmp	r3, #2
 800b772:	d825      	bhi.n	800b7c0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	889b      	ldrh	r3, [r3, #4]
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d819      	bhi.n	800b7b2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	23ad      	movs	r3, #173	; 0xad
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	58d3      	ldr	r3, [r2, r3]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	250f      	movs	r5, #15
 800b78a:	197c      	adds	r4, r7, r5
 800b78c:	6839      	ldr	r1, [r7, #0]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	0010      	movs	r0, r2
 800b792:	4798      	blx	r3
 800b794:	0003      	movs	r3, r0
 800b796:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	88db      	ldrh	r3, [r3, #6]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d116      	bne.n	800b7ce <USBD_StdItfReq+0x92>
 800b7a0:	197b      	adds	r3, r7, r5
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d112      	bne.n	800b7ce <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	0018      	movs	r0, r3
 800b7ac:	f000 fe52 	bl	800c454 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b7b0:	e00d      	b.n	800b7ce <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	0011      	movs	r1, r2
 800b7b8:	0018      	movs	r0, r3
 800b7ba:	f000 fd63 	bl	800c284 <USBD_CtlError>
          break;
 800b7be:	e006      	b.n	800b7ce <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	0011      	movs	r1, r2
 800b7c6:	0018      	movs	r0, r3
 800b7c8:	f000 fd5c 	bl	800c284 <USBD_CtlError>
          break;
 800b7cc:	e000      	b.n	800b7d0 <USBD_StdItfReq+0x94>
          break;
 800b7ce:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b7d0:	e006      	b.n	800b7e0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	0011      	movs	r1, r2
 800b7d8:	0018      	movs	r0, r3
 800b7da:	f000 fd53 	bl	800c284 <USBD_CtlError>
      break;
 800b7de:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	0018      	movs	r0, r3
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	b004      	add	sp, #16
 800b7e8:	bdb0      	pop	{r4, r5, r7, pc}

0800b7ea <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b7ea:	b5b0      	push	{r4, r5, r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7f4:	230f      	movs	r3, #15
 800b7f6:	18fb      	adds	r3, r7, r3
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	889a      	ldrh	r2, [r3, #4]
 800b800:	230e      	movs	r3, #14
 800b802:	18fb      	adds	r3, r7, r3
 800b804:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	001a      	movs	r2, r3
 800b80c:	2360      	movs	r3, #96	; 0x60
 800b80e:	4013      	ands	r3, r2
 800b810:	2b40      	cmp	r3, #64	; 0x40
 800b812:	d006      	beq.n	800b822 <USBD_StdEPReq+0x38>
 800b814:	d900      	bls.n	800b818 <USBD_StdEPReq+0x2e>
 800b816:	e190      	b.n	800bb3a <USBD_StdEPReq+0x350>
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00c      	beq.n	800b836 <USBD_StdEPReq+0x4c>
 800b81c:	2b20      	cmp	r3, #32
 800b81e:	d000      	beq.n	800b822 <USBD_StdEPReq+0x38>
 800b820:	e18b      	b.n	800bb3a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	23ad      	movs	r3, #173	; 0xad
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	58d3      	ldr	r3, [r2, r3]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	0010      	movs	r0, r2
 800b832:	4798      	blx	r3
      break;
 800b834:	e188      	b.n	800bb48 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	001a      	movs	r2, r3
 800b83c:	2360      	movs	r3, #96	; 0x60
 800b83e:	4013      	ands	r3, r2
 800b840:	2b20      	cmp	r3, #32
 800b842:	d10f      	bne.n	800b864 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	23ad      	movs	r3, #173	; 0xad
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	58d3      	ldr	r3, [r2, r3]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	250f      	movs	r5, #15
 800b850:	197c      	adds	r4, r7, r5
 800b852:	6839      	ldr	r1, [r7, #0]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	0010      	movs	r0, r2
 800b858:	4798      	blx	r3
 800b85a:	0003      	movs	r3, r0
 800b85c:	7023      	strb	r3, [r4, #0]

        return ret;
 800b85e:	197b      	adds	r3, r7, r5
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	e174      	b.n	800bb4e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	785b      	ldrb	r3, [r3, #1]
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d007      	beq.n	800b87c <USBD_StdEPReq+0x92>
 800b86c:	dd00      	ble.n	800b870 <USBD_StdEPReq+0x86>
 800b86e:	e15c      	b.n	800bb2a <USBD_StdEPReq+0x340>
 800b870:	2b00      	cmp	r3, #0
 800b872:	d100      	bne.n	800b876 <USBD_StdEPReq+0x8c>
 800b874:	e092      	b.n	800b99c <USBD_StdEPReq+0x1b2>
 800b876:	2b01      	cmp	r3, #1
 800b878:	d04b      	beq.n	800b912 <USBD_StdEPReq+0x128>
 800b87a:	e156      	b.n	800bb2a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	23a7      	movs	r3, #167	; 0xa7
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	5cd3      	ldrb	r3, [r2, r3]
 800b884:	2b02      	cmp	r3, #2
 800b886:	d002      	beq.n	800b88e <USBD_StdEPReq+0xa4>
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d01d      	beq.n	800b8c8 <USBD_StdEPReq+0xde>
 800b88c:	e039      	b.n	800b902 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b88e:	220e      	movs	r2, #14
 800b890:	18bb      	adds	r3, r7, r2
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d010      	beq.n	800b8ba <USBD_StdEPReq+0xd0>
 800b898:	18bb      	adds	r3, r7, r2
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2b80      	cmp	r3, #128	; 0x80
 800b89e:	d00c      	beq.n	800b8ba <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b8a0:	18bb      	adds	r3, r7, r2
 800b8a2:	781a      	ldrb	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	0011      	movs	r1, r2
 800b8a8:	0018      	movs	r0, r3
 800b8aa:	f001 f9d8 	bl	800cc5e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2180      	movs	r1, #128	; 0x80
 800b8b2:	0018      	movs	r0, r3
 800b8b4:	f001 f9d3 	bl	800cc5e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8b8:	e02a      	b.n	800b910 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	0011      	movs	r1, r2
 800b8c0:	0018      	movs	r0, r3
 800b8c2:	f000 fcdf 	bl	800c284 <USBD_CtlError>
              break;
 800b8c6:	e023      	b.n	800b910 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	885b      	ldrh	r3, [r3, #2]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d113      	bne.n	800b8f8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b8d0:	220e      	movs	r2, #14
 800b8d2:	18bb      	adds	r3, r7, r2
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00e      	beq.n	800b8f8 <USBD_StdEPReq+0x10e>
 800b8da:	18bb      	adds	r3, r7, r2
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	2b80      	cmp	r3, #128	; 0x80
 800b8e0:	d00a      	beq.n	800b8f8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	88db      	ldrh	r3, [r3, #6]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d106      	bne.n	800b8f8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b8ea:	18bb      	adds	r3, r7, r2
 800b8ec:	781a      	ldrb	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	0011      	movs	r1, r2
 800b8f2:	0018      	movs	r0, r3
 800b8f4:	f001 f9b3 	bl	800cc5e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	0018      	movs	r0, r3
 800b8fc:	f000 fdaa 	bl	800c454 <USBD_CtlSendStatus>

              break;
 800b900:	e006      	b.n	800b910 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	0011      	movs	r1, r2
 800b908:	0018      	movs	r0, r3
 800b90a:	f000 fcbb 	bl	800c284 <USBD_CtlError>
              break;
 800b90e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b910:	e112      	b.n	800bb38 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	23a7      	movs	r3, #167	; 0xa7
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	5cd3      	ldrb	r3, [r2, r3]
 800b91a:	2b02      	cmp	r3, #2
 800b91c:	d002      	beq.n	800b924 <USBD_StdEPReq+0x13a>
 800b91e:	2b03      	cmp	r3, #3
 800b920:	d01d      	beq.n	800b95e <USBD_StdEPReq+0x174>
 800b922:	e032      	b.n	800b98a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b924:	220e      	movs	r2, #14
 800b926:	18bb      	adds	r3, r7, r2
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d010      	beq.n	800b950 <USBD_StdEPReq+0x166>
 800b92e:	18bb      	adds	r3, r7, r2
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	2b80      	cmp	r3, #128	; 0x80
 800b934:	d00c      	beq.n	800b950 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b936:	18bb      	adds	r3, r7, r2
 800b938:	781a      	ldrb	r2, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	0011      	movs	r1, r2
 800b93e:	0018      	movs	r0, r3
 800b940:	f001 f98d 	bl	800cc5e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2180      	movs	r1, #128	; 0x80
 800b948:	0018      	movs	r0, r3
 800b94a:	f001 f988 	bl	800cc5e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b94e:	e024      	b.n	800b99a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b950:	683a      	ldr	r2, [r7, #0]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	0011      	movs	r1, r2
 800b956:	0018      	movs	r0, r3
 800b958:	f000 fc94 	bl	800c284 <USBD_CtlError>
              break;
 800b95c:	e01d      	b.n	800b99a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	885b      	ldrh	r3, [r3, #2]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d118      	bne.n	800b998 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b966:	210e      	movs	r1, #14
 800b968:	187b      	adds	r3, r7, r1
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	227f      	movs	r2, #127	; 0x7f
 800b96e:	4013      	ands	r3, r2
 800b970:	d006      	beq.n	800b980 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b972:	187b      	adds	r3, r7, r1
 800b974:	781a      	ldrb	r2, [r3, #0]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	0011      	movs	r1, r2
 800b97a:	0018      	movs	r0, r3
 800b97c:	f001 f99a 	bl	800ccb4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	0018      	movs	r0, r3
 800b984:	f000 fd66 	bl	800c454 <USBD_CtlSendStatus>
              }
              break;
 800b988:	e006      	b.n	800b998 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	0011      	movs	r1, r2
 800b990:	0018      	movs	r0, r3
 800b992:	f000 fc77 	bl	800c284 <USBD_CtlError>
              break;
 800b996:	e000      	b.n	800b99a <USBD_StdEPReq+0x1b0>
              break;
 800b998:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b99a:	e0cd      	b.n	800bb38 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	23a7      	movs	r3, #167	; 0xa7
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	5cd3      	ldrb	r3, [r2, r3]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d002      	beq.n	800b9ae <USBD_StdEPReq+0x1c4>
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d03c      	beq.n	800ba26 <USBD_StdEPReq+0x23c>
 800b9ac:	e0b5      	b.n	800bb1a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9ae:	220e      	movs	r2, #14
 800b9b0:	18bb      	adds	r3, r7, r2
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00a      	beq.n	800b9ce <USBD_StdEPReq+0x1e4>
 800b9b8:	18bb      	adds	r3, r7, r2
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	2b80      	cmp	r3, #128	; 0x80
 800b9be:	d006      	beq.n	800b9ce <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b9c0:	683a      	ldr	r2, [r7, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	0011      	movs	r1, r2
 800b9c6:	0018      	movs	r0, r3
 800b9c8:	f000 fc5c 	bl	800c284 <USBD_CtlError>
                break;
 800b9cc:	e0ac      	b.n	800bb28 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9ce:	220e      	movs	r2, #14
 800b9d0:	18bb      	adds	r3, r7, r2
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	b25b      	sxtb	r3, r3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	da0c      	bge.n	800b9f4 <USBD_StdEPReq+0x20a>
 800b9da:	18bb      	adds	r3, r7, r2
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	227f      	movs	r2, #127	; 0x7f
 800b9e0:	401a      	ands	r2, r3
 800b9e2:	0013      	movs	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	189b      	adds	r3, r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	3310      	adds	r3, #16
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	18d3      	adds	r3, r2, r3
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	e00d      	b.n	800ba10 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9f4:	230e      	movs	r3, #14
 800b9f6:	18fb      	adds	r3, r7, r3
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	227f      	movs	r2, #127	; 0x7f
 800b9fc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9fe:	0013      	movs	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	189b      	adds	r3, r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	3351      	adds	r3, #81	; 0x51
 800ba08:	33ff      	adds	r3, #255	; 0xff
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	18d3      	adds	r3, r2, r3
 800ba0e:	3304      	adds	r3, #4
 800ba10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2200      	movs	r2, #0
 800ba16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ba18:	68b9      	ldr	r1, [r7, #8]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	0018      	movs	r0, r3
 800ba20:	f000 fcae 	bl	800c380 <USBD_CtlSendData>
              break;
 800ba24:	e080      	b.n	800bb28 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba26:	220e      	movs	r2, #14
 800ba28:	18bb      	adds	r3, r7, r2
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	b25b      	sxtb	r3, r3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	da14      	bge.n	800ba5c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba32:	18bb      	adds	r3, r7, r2
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	220f      	movs	r2, #15
 800ba38:	401a      	ands	r2, r3
 800ba3a:	6879      	ldr	r1, [r7, #4]
 800ba3c:	0013      	movs	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	189b      	adds	r3, r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	18cb      	adds	r3, r1, r3
 800ba46:	3318      	adds	r3, #24
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d11e      	bne.n	800ba8c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	0011      	movs	r1, r2
 800ba54:	0018      	movs	r0, r3
 800ba56:	f000 fc15 	bl	800c284 <USBD_CtlError>
                  break;
 800ba5a:	e065      	b.n	800bb28 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba5c:	230e      	movs	r3, #14
 800ba5e:	18fb      	adds	r3, r7, r3
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	220f      	movs	r2, #15
 800ba64:	401a      	ands	r2, r3
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	23ac      	movs	r3, #172	; 0xac
 800ba6a:	0059      	lsls	r1, r3, #1
 800ba6c:	0013      	movs	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	189b      	adds	r3, r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	18c3      	adds	r3, r0, r3
 800ba76:	185b      	adds	r3, r3, r1
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d106      	bne.n	800ba8c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ba7e:	683a      	ldr	r2, [r7, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	0011      	movs	r1, r2
 800ba84:	0018      	movs	r0, r3
 800ba86:	f000 fbfd 	bl	800c284 <USBD_CtlError>
                  break;
 800ba8a:	e04d      	b.n	800bb28 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba8c:	220e      	movs	r2, #14
 800ba8e:	18bb      	adds	r3, r7, r2
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	b25b      	sxtb	r3, r3
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	da0c      	bge.n	800bab2 <USBD_StdEPReq+0x2c8>
 800ba98:	18bb      	adds	r3, r7, r2
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	227f      	movs	r2, #127	; 0x7f
 800ba9e:	401a      	ands	r2, r3
 800baa0:	0013      	movs	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	189b      	adds	r3, r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	3310      	adds	r3, #16
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	18d3      	adds	r3, r2, r3
 800baae:	3304      	adds	r3, #4
 800bab0:	e00d      	b.n	800bace <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bab2:	230e      	movs	r3, #14
 800bab4:	18fb      	adds	r3, r7, r3
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	227f      	movs	r2, #127	; 0x7f
 800baba:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800babc:	0013      	movs	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	189b      	adds	r3, r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	3351      	adds	r3, #81	; 0x51
 800bac6:	33ff      	adds	r3, #255	; 0xff
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	18d3      	adds	r3, r2, r3
 800bacc:	3304      	adds	r3, #4
 800bace:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bad0:	220e      	movs	r2, #14
 800bad2:	18bb      	adds	r3, r7, r2
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <USBD_StdEPReq+0x2f8>
 800bada:	18bb      	adds	r3, r7, r2
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	2b80      	cmp	r3, #128	; 0x80
 800bae0:	d103      	bne.n	800baea <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	2200      	movs	r2, #0
 800bae6:	601a      	str	r2, [r3, #0]
 800bae8:	e010      	b.n	800bb0c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800baea:	230e      	movs	r3, #14
 800baec:	18fb      	adds	r3, r7, r3
 800baee:	781a      	ldrb	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	0011      	movs	r1, r2
 800baf4:	0018      	movs	r0, r3
 800baf6:	f001 f908 	bl	800cd0a <USBD_LL_IsStallEP>
 800bafa:	1e03      	subs	r3, r0, #0
 800bafc:	d003      	beq.n	800bb06 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	2201      	movs	r2, #1
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	e002      	b.n	800bb0c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bb0c:	68b9      	ldr	r1, [r7, #8]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2202      	movs	r2, #2
 800bb12:	0018      	movs	r0, r3
 800bb14:	f000 fc34 	bl	800c380 <USBD_CtlSendData>
              break;
 800bb18:	e006      	b.n	800bb28 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	0011      	movs	r1, r2
 800bb20:	0018      	movs	r0, r3
 800bb22:	f000 fbaf 	bl	800c284 <USBD_CtlError>
              break;
 800bb26:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800bb28:	e006      	b.n	800bb38 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	0011      	movs	r1, r2
 800bb30:	0018      	movs	r0, r3
 800bb32:	f000 fba7 	bl	800c284 <USBD_CtlError>
          break;
 800bb36:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800bb38:	e006      	b.n	800bb48 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	0011      	movs	r1, r2
 800bb40:	0018      	movs	r0, r3
 800bb42:	f000 fb9f 	bl	800c284 <USBD_CtlError>
      break;
 800bb46:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800bb48:	230f      	movs	r3, #15
 800bb4a:	18fb      	adds	r3, r7, r3
 800bb4c:	781b      	ldrb	r3, [r3, #0]
}
 800bb4e:	0018      	movs	r0, r3
 800bb50:	46bd      	mov	sp, r7
 800bb52:	b004      	add	sp, #16
 800bb54:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bb58 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb62:	2308      	movs	r3, #8
 800bb64:	18fb      	adds	r3, r7, r3
 800bb66:	2200      	movs	r2, #0
 800bb68:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb6e:	230b      	movs	r3, #11
 800bb70:	18fb      	adds	r3, r7, r3
 800bb72:	2200      	movs	r2, #0
 800bb74:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	885b      	ldrh	r3, [r3, #2]
 800bb7a:	0a1b      	lsrs	r3, r3, #8
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	2b07      	cmp	r3, #7
 800bb80:	d900      	bls.n	800bb84 <USBD_GetDescriptor+0x2c>
 800bb82:	e159      	b.n	800be38 <USBD_GetDescriptor+0x2e0>
 800bb84:	009a      	lsls	r2, r3, #2
 800bb86:	4bcb      	ldr	r3, [pc, #812]	; (800beb4 <USBD_GetDescriptor+0x35c>)
 800bb88:	18d3      	adds	r3, r2, r3
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	23ac      	movs	r3, #172	; 0xac
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	58d3      	ldr	r3, [r2, r3]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	7c12      	ldrb	r2, [r2, #16]
 800bb9c:	2108      	movs	r1, #8
 800bb9e:	1879      	adds	r1, r7, r1
 800bba0:	0010      	movs	r0, r2
 800bba2:	4798      	blx	r3
 800bba4:	0003      	movs	r3, r0
 800bba6:	60fb      	str	r3, [r7, #12]
      break;
 800bba8:	e153      	b.n	800be52 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	7c1b      	ldrb	r3, [r3, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10f      	bne.n	800bbd2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	23ad      	movs	r3, #173	; 0xad
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	58d3      	ldr	r3, [r2, r3]
 800bbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbbc:	2208      	movs	r2, #8
 800bbbe:	18ba      	adds	r2, r7, r2
 800bbc0:	0010      	movs	r0, r2
 800bbc2:	4798      	blx	r3
 800bbc4:	0003      	movs	r3, r0
 800bbc6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	2202      	movs	r2, #2
 800bbce:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bbd0:	e13f      	b.n	800be52 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	23ad      	movs	r3, #173	; 0xad
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	58d3      	ldr	r3, [r2, r3]
 800bbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbdc:	2208      	movs	r2, #8
 800bbde:	18ba      	adds	r2, r7, r2
 800bbe0:	0010      	movs	r0, r2
 800bbe2:	4798      	blx	r3
 800bbe4:	0003      	movs	r3, r0
 800bbe6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	3301      	adds	r3, #1
 800bbec:	2202      	movs	r2, #2
 800bbee:	701a      	strb	r2, [r3, #0]
      break;
 800bbf0:	e12f      	b.n	800be52 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	885b      	ldrh	r3, [r3, #2]
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b05      	cmp	r3, #5
 800bbfa:	d900      	bls.n	800bbfe <USBD_GetDescriptor+0xa6>
 800bbfc:	e0d0      	b.n	800bda0 <USBD_GetDescriptor+0x248>
 800bbfe:	009a      	lsls	r2, r3, #2
 800bc00:	4bad      	ldr	r3, [pc, #692]	; (800beb8 <USBD_GetDescriptor+0x360>)
 800bc02:	18d3      	adds	r3, r2, r3
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	23ac      	movs	r3, #172	; 0xac
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	58d3      	ldr	r3, [r2, r3]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00d      	beq.n	800bc32 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	23ac      	movs	r3, #172	; 0xac
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	58d3      	ldr	r3, [r2, r3]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	7c12      	ldrb	r2, [r2, #16]
 800bc24:	2108      	movs	r1, #8
 800bc26:	1879      	adds	r1, r7, r1
 800bc28:	0010      	movs	r0, r2
 800bc2a:	4798      	blx	r3
 800bc2c:	0003      	movs	r3, r0
 800bc2e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc30:	e0c3      	b.n	800bdba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	0011      	movs	r1, r2
 800bc38:	0018      	movs	r0, r3
 800bc3a:	f000 fb23 	bl	800c284 <USBD_CtlError>
            err++;
 800bc3e:	210b      	movs	r1, #11
 800bc40:	187b      	adds	r3, r7, r1
 800bc42:	781a      	ldrb	r2, [r3, #0]
 800bc44:	187b      	adds	r3, r7, r1
 800bc46:	3201      	adds	r2, #1
 800bc48:	701a      	strb	r2, [r3, #0]
          break;
 800bc4a:	e0b6      	b.n	800bdba <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	23ac      	movs	r3, #172	; 0xac
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	58d3      	ldr	r3, [r2, r3]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00d      	beq.n	800bc76 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	23ac      	movs	r3, #172	; 0xac
 800bc5e:	009b      	lsls	r3, r3, #2
 800bc60:	58d3      	ldr	r3, [r2, r3]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	7c12      	ldrb	r2, [r2, #16]
 800bc68:	2108      	movs	r1, #8
 800bc6a:	1879      	adds	r1, r7, r1
 800bc6c:	0010      	movs	r0, r2
 800bc6e:	4798      	blx	r3
 800bc70:	0003      	movs	r3, r0
 800bc72:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc74:	e0a1      	b.n	800bdba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	0011      	movs	r1, r2
 800bc7c:	0018      	movs	r0, r3
 800bc7e:	f000 fb01 	bl	800c284 <USBD_CtlError>
            err++;
 800bc82:	210b      	movs	r1, #11
 800bc84:	187b      	adds	r3, r7, r1
 800bc86:	781a      	ldrb	r2, [r3, #0]
 800bc88:	187b      	adds	r3, r7, r1
 800bc8a:	3201      	adds	r2, #1
 800bc8c:	701a      	strb	r2, [r3, #0]
          break;
 800bc8e:	e094      	b.n	800bdba <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	23ac      	movs	r3, #172	; 0xac
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	58d3      	ldr	r3, [r2, r3]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00d      	beq.n	800bcba <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	23ac      	movs	r3, #172	; 0xac
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	58d3      	ldr	r3, [r2, r3]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	7c12      	ldrb	r2, [r2, #16]
 800bcac:	2108      	movs	r1, #8
 800bcae:	1879      	adds	r1, r7, r1
 800bcb0:	0010      	movs	r0, r2
 800bcb2:	4798      	blx	r3
 800bcb4:	0003      	movs	r3, r0
 800bcb6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcb8:	e07f      	b.n	800bdba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	0011      	movs	r1, r2
 800bcc0:	0018      	movs	r0, r3
 800bcc2:	f000 fadf 	bl	800c284 <USBD_CtlError>
            err++;
 800bcc6:	210b      	movs	r1, #11
 800bcc8:	187b      	adds	r3, r7, r1
 800bcca:	781a      	ldrb	r2, [r3, #0]
 800bccc:	187b      	adds	r3, r7, r1
 800bcce:	3201      	adds	r2, #1
 800bcd0:	701a      	strb	r2, [r3, #0]
          break;
 800bcd2:	e072      	b.n	800bdba <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	23ac      	movs	r3, #172	; 0xac
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	58d3      	ldr	r3, [r2, r3]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00d      	beq.n	800bcfe <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	23ac      	movs	r3, #172	; 0xac
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	58d3      	ldr	r3, [r2, r3]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	7c12      	ldrb	r2, [r2, #16]
 800bcf0:	2108      	movs	r1, #8
 800bcf2:	1879      	adds	r1, r7, r1
 800bcf4:	0010      	movs	r0, r2
 800bcf6:	4798      	blx	r3
 800bcf8:	0003      	movs	r3, r0
 800bcfa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcfc:	e05d      	b.n	800bdba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	0011      	movs	r1, r2
 800bd04:	0018      	movs	r0, r3
 800bd06:	f000 fabd 	bl	800c284 <USBD_CtlError>
            err++;
 800bd0a:	210b      	movs	r1, #11
 800bd0c:	187b      	adds	r3, r7, r1
 800bd0e:	781a      	ldrb	r2, [r3, #0]
 800bd10:	187b      	adds	r3, r7, r1
 800bd12:	3201      	adds	r2, #1
 800bd14:	701a      	strb	r2, [r3, #0]
          break;
 800bd16:	e050      	b.n	800bdba <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	23ac      	movs	r3, #172	; 0xac
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	58d3      	ldr	r3, [r2, r3]
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00d      	beq.n	800bd42 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	23ac      	movs	r3, #172	; 0xac
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	58d3      	ldr	r3, [r2, r3]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	7c12      	ldrb	r2, [r2, #16]
 800bd34:	2108      	movs	r1, #8
 800bd36:	1879      	adds	r1, r7, r1
 800bd38:	0010      	movs	r0, r2
 800bd3a:	4798      	blx	r3
 800bd3c:	0003      	movs	r3, r0
 800bd3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd40:	e03b      	b.n	800bdba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	0011      	movs	r1, r2
 800bd48:	0018      	movs	r0, r3
 800bd4a:	f000 fa9b 	bl	800c284 <USBD_CtlError>
            err++;
 800bd4e:	210b      	movs	r1, #11
 800bd50:	187b      	adds	r3, r7, r1
 800bd52:	781a      	ldrb	r2, [r3, #0]
 800bd54:	187b      	adds	r3, r7, r1
 800bd56:	3201      	adds	r2, #1
 800bd58:	701a      	strb	r2, [r3, #0]
          break;
 800bd5a:	e02e      	b.n	800bdba <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	23ac      	movs	r3, #172	; 0xac
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	58d3      	ldr	r3, [r2, r3]
 800bd64:	699b      	ldr	r3, [r3, #24]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00d      	beq.n	800bd86 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	23ac      	movs	r3, #172	; 0xac
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	58d3      	ldr	r3, [r2, r3]
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	7c12      	ldrb	r2, [r2, #16]
 800bd78:	2108      	movs	r1, #8
 800bd7a:	1879      	adds	r1, r7, r1
 800bd7c:	0010      	movs	r0, r2
 800bd7e:	4798      	blx	r3
 800bd80:	0003      	movs	r3, r0
 800bd82:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd84:	e019      	b.n	800bdba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bd86:	683a      	ldr	r2, [r7, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	0011      	movs	r1, r2
 800bd8c:	0018      	movs	r0, r3
 800bd8e:	f000 fa79 	bl	800c284 <USBD_CtlError>
            err++;
 800bd92:	210b      	movs	r1, #11
 800bd94:	187b      	adds	r3, r7, r1
 800bd96:	781a      	ldrb	r2, [r3, #0]
 800bd98:	187b      	adds	r3, r7, r1
 800bd9a:	3201      	adds	r2, #1
 800bd9c:	701a      	strb	r2, [r3, #0]
          break;
 800bd9e:	e00c      	b.n	800bdba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bda0:	683a      	ldr	r2, [r7, #0]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	0011      	movs	r1, r2
 800bda6:	0018      	movs	r0, r3
 800bda8:	f000 fa6c 	bl	800c284 <USBD_CtlError>
          err++;
 800bdac:	210b      	movs	r1, #11
 800bdae:	187b      	adds	r3, r7, r1
 800bdb0:	781a      	ldrb	r2, [r3, #0]
 800bdb2:	187b      	adds	r3, r7, r1
 800bdb4:	3201      	adds	r2, #1
 800bdb6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800bdb8:	e04b      	b.n	800be52 <USBD_GetDescriptor+0x2fa>
 800bdba:	e04a      	b.n	800be52 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	7c1b      	ldrb	r3, [r3, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10b      	bne.n	800bddc <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	23ad      	movs	r3, #173	; 0xad
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	58d3      	ldr	r3, [r2, r3]
 800bdcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdce:	2208      	movs	r2, #8
 800bdd0:	18ba      	adds	r2, r7, r2
 800bdd2:	0010      	movs	r0, r2
 800bdd4:	4798      	blx	r3
 800bdd6:	0003      	movs	r3, r0
 800bdd8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdda:	e03a      	b.n	800be52 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800bddc:	683a      	ldr	r2, [r7, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	0011      	movs	r1, r2
 800bde2:	0018      	movs	r0, r3
 800bde4:	f000 fa4e 	bl	800c284 <USBD_CtlError>
        err++;
 800bde8:	210b      	movs	r1, #11
 800bdea:	187b      	adds	r3, r7, r1
 800bdec:	781a      	ldrb	r2, [r3, #0]
 800bdee:	187b      	adds	r3, r7, r1
 800bdf0:	3201      	adds	r2, #1
 800bdf2:	701a      	strb	r2, [r3, #0]
      break;
 800bdf4:	e02d      	b.n	800be52 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	7c1b      	ldrb	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10f      	bne.n	800be1e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	23ad      	movs	r3, #173	; 0xad
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	58d3      	ldr	r3, [r2, r3]
 800be06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be08:	2208      	movs	r2, #8
 800be0a:	18ba      	adds	r2, r7, r2
 800be0c:	0010      	movs	r0, r2
 800be0e:	4798      	blx	r3
 800be10:	0003      	movs	r3, r0
 800be12:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	3301      	adds	r3, #1
 800be18:	2207      	movs	r2, #7
 800be1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be1c:	e019      	b.n	800be52 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	0011      	movs	r1, r2
 800be24:	0018      	movs	r0, r3
 800be26:	f000 fa2d 	bl	800c284 <USBD_CtlError>
        err++;
 800be2a:	210b      	movs	r1, #11
 800be2c:	187b      	adds	r3, r7, r1
 800be2e:	781a      	ldrb	r2, [r3, #0]
 800be30:	187b      	adds	r3, r7, r1
 800be32:	3201      	adds	r2, #1
 800be34:	701a      	strb	r2, [r3, #0]
      break;
 800be36:	e00c      	b.n	800be52 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	0011      	movs	r1, r2
 800be3e:	0018      	movs	r0, r3
 800be40:	f000 fa20 	bl	800c284 <USBD_CtlError>
      err++;
 800be44:	210b      	movs	r1, #11
 800be46:	187b      	adds	r3, r7, r1
 800be48:	781a      	ldrb	r2, [r3, #0]
 800be4a:	187b      	adds	r3, r7, r1
 800be4c:	3201      	adds	r2, #1
 800be4e:	701a      	strb	r2, [r3, #0]
      break;
 800be50:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800be52:	230b      	movs	r3, #11
 800be54:	18fb      	adds	r3, r7, r3
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d127      	bne.n	800beac <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800be5c:	2108      	movs	r1, #8
 800be5e:	187b      	adds	r3, r7, r1
 800be60:	881b      	ldrh	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d019      	beq.n	800be9a <USBD_GetDescriptor+0x342>
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	88db      	ldrh	r3, [r3, #6]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d015      	beq.n	800be9a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	88da      	ldrh	r2, [r3, #6]
 800be72:	187b      	adds	r3, r7, r1
 800be74:	881b      	ldrh	r3, [r3, #0]
 800be76:	1c18      	adds	r0, r3, #0
 800be78:	1c11      	adds	r1, r2, #0
 800be7a:	b28a      	uxth	r2, r1
 800be7c:	b283      	uxth	r3, r0
 800be7e:	429a      	cmp	r2, r3
 800be80:	d900      	bls.n	800be84 <USBD_GetDescriptor+0x32c>
 800be82:	1c01      	adds	r1, r0, #0
 800be84:	b28a      	uxth	r2, r1
 800be86:	2108      	movs	r1, #8
 800be88:	187b      	adds	r3, r7, r1
 800be8a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be8c:	187b      	adds	r3, r7, r1
 800be8e:	881a      	ldrh	r2, [r3, #0]
 800be90:	68f9      	ldr	r1, [r7, #12]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	0018      	movs	r0, r3
 800be96:	f000 fa73 	bl	800c380 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	88db      	ldrh	r3, [r3, #6]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d105      	bne.n	800beae <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	0018      	movs	r0, r3
 800bea6:	f000 fad5 	bl	800c454 <USBD_CtlSendStatus>
 800beaa:	e000      	b.n	800beae <USBD_GetDescriptor+0x356>
    return;
 800beac:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800beae:	46bd      	mov	sp, r7
 800beb0:	b004      	add	sp, #16
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	0800d9e8 	.word	0x0800d9e8
 800beb8:	0800da08 	.word	0x0800da08

0800bebc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bebc:	b590      	push	{r4, r7, lr}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	889b      	ldrh	r3, [r3, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d13d      	bne.n	800bf4a <USBD_SetAddress+0x8e>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	88db      	ldrh	r3, [r3, #6]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d139      	bne.n	800bf4a <USBD_SetAddress+0x8e>
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	885b      	ldrh	r3, [r3, #2]
 800beda:	2b7f      	cmp	r3, #127	; 0x7f
 800bedc:	d835      	bhi.n	800bf4a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	885b      	ldrh	r3, [r3, #2]
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	230f      	movs	r3, #15
 800bee6:	18fb      	adds	r3, r7, r3
 800bee8:	217f      	movs	r1, #127	; 0x7f
 800beea:	400a      	ands	r2, r1
 800beec:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	23a7      	movs	r3, #167	; 0xa7
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	5cd3      	ldrb	r3, [r2, r3]
 800bef6:	2b03      	cmp	r3, #3
 800bef8:	d106      	bne.n	800bf08 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	0011      	movs	r1, r2
 800bf00:	0018      	movs	r0, r3
 800bf02:	f000 f9bf 	bl	800c284 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf06:	e027      	b.n	800bf58 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	240f      	movs	r4, #15
 800bf0c:	193a      	adds	r2, r7, r4
 800bf0e:	4914      	ldr	r1, [pc, #80]	; (800bf60 <USBD_SetAddress+0xa4>)
 800bf10:	7812      	ldrb	r2, [r2, #0]
 800bf12:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf14:	193b      	adds	r3, r7, r4
 800bf16:	781a      	ldrb	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	0011      	movs	r1, r2
 800bf1c:	0018      	movs	r0, r3
 800bf1e:	f000 ff25 	bl	800cd6c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	0018      	movs	r0, r3
 800bf26:	f000 fa95 	bl	800c454 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf2a:	193b      	adds	r3, r7, r4
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d005      	beq.n	800bf3e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	23a7      	movs	r3, #167	; 0xa7
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	2102      	movs	r1, #2
 800bf3a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf3c:	e00c      	b.n	800bf58 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	23a7      	movs	r3, #167	; 0xa7
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	2101      	movs	r1, #1
 800bf46:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf48:	e006      	b.n	800bf58 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	0011      	movs	r1, r2
 800bf50:	0018      	movs	r0, r3
 800bf52:	f000 f997 	bl	800c284 <USBD_CtlError>
  }
}
 800bf56:	46c0      	nop			; (mov r8, r8)
 800bf58:	46c0      	nop			; (mov r8, r8)
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	b005      	add	sp, #20
 800bf5e:	bd90      	pop	{r4, r7, pc}
 800bf60:	0000029e 	.word	0x0000029e

0800bf64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	885b      	ldrh	r3, [r3, #2]
 800bf72:	b2da      	uxtb	r2, r3
 800bf74:	4b4c      	ldr	r3, [pc, #304]	; (800c0a8 <USBD_SetConfig+0x144>)
 800bf76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf78:	4b4b      	ldr	r3, [pc, #300]	; (800c0a8 <USBD_SetConfig+0x144>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d906      	bls.n	800bf8e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	0011      	movs	r1, r2
 800bf86:	0018      	movs	r0, r3
 800bf88:	f000 f97c 	bl	800c284 <USBD_CtlError>
 800bf8c:	e088      	b.n	800c0a0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	23a7      	movs	r3, #167	; 0xa7
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	5cd3      	ldrb	r3, [r2, r3]
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d002      	beq.n	800bfa0 <USBD_SetConfig+0x3c>
 800bf9a:	2b03      	cmp	r3, #3
 800bf9c:	d029      	beq.n	800bff2 <USBD_SetConfig+0x8e>
 800bf9e:	e071      	b.n	800c084 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bfa0:	4b41      	ldr	r3, [pc, #260]	; (800c0a8 <USBD_SetConfig+0x144>)
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d01f      	beq.n	800bfe8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800bfa8:	4b3f      	ldr	r3, [pc, #252]	; (800c0a8 <USBD_SetConfig+0x144>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	001a      	movs	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	23a7      	movs	r3, #167	; 0xa7
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	2103      	movs	r1, #3
 800bfba:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bfbc:	4b3a      	ldr	r3, [pc, #232]	; (800c0a8 <USBD_SetConfig+0x144>)
 800bfbe:	781a      	ldrb	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	0011      	movs	r1, r2
 800bfc4:	0018      	movs	r0, r3
 800bfc6:	f7ff f8c6 	bl	800b156 <USBD_SetClassConfig>
 800bfca:	0003      	movs	r3, r0
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d106      	bne.n	800bfde <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800bfd0:	683a      	ldr	r2, [r7, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	0011      	movs	r1, r2
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	f000 f954 	bl	800c284 <USBD_CtlError>
            return;
 800bfdc:	e060      	b.n	800c0a0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	0018      	movs	r0, r3
 800bfe2:	f000 fa37 	bl	800c454 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bfe6:	e05b      	b.n	800c0a0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	0018      	movs	r0, r3
 800bfec:	f000 fa32 	bl	800c454 <USBD_CtlSendStatus>
        break;
 800bff0:	e056      	b.n	800c0a0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bff2:	4b2d      	ldr	r3, [pc, #180]	; (800c0a8 <USBD_SetConfig+0x144>)
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d115      	bne.n	800c026 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	23a7      	movs	r3, #167	; 0xa7
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	2102      	movs	r1, #2
 800c002:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800c004:	4b28      	ldr	r3, [pc, #160]	; (800c0a8 <USBD_SetConfig+0x144>)
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	001a      	movs	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c00e:	4b26      	ldr	r3, [pc, #152]	; (800c0a8 <USBD_SetConfig+0x144>)
 800c010:	781a      	ldrb	r2, [r3, #0]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	0011      	movs	r1, r2
 800c016:	0018      	movs	r0, r3
 800c018:	f7ff f8c4 	bl	800b1a4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	0018      	movs	r0, r3
 800c020:	f000 fa18 	bl	800c454 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c024:	e03c      	b.n	800c0a0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c026:	4b20      	ldr	r3, [pc, #128]	; (800c0a8 <USBD_SetConfig+0x144>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	001a      	movs	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d022      	beq.n	800c07a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	0011      	movs	r1, r2
 800c03e:	0018      	movs	r0, r3
 800c040:	f7ff f8b0 	bl	800b1a4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c044:	4b18      	ldr	r3, [pc, #96]	; (800c0a8 <USBD_SetConfig+0x144>)
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	001a      	movs	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c04e:	4b16      	ldr	r3, [pc, #88]	; (800c0a8 <USBD_SetConfig+0x144>)
 800c050:	781a      	ldrb	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	0011      	movs	r1, r2
 800c056:	0018      	movs	r0, r3
 800c058:	f7ff f87d 	bl	800b156 <USBD_SetClassConfig>
 800c05c:	0003      	movs	r3, r0
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d106      	bne.n	800c070 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	0011      	movs	r1, r2
 800c068:	0018      	movs	r0, r3
 800c06a:	f000 f90b 	bl	800c284 <USBD_CtlError>
            return;
 800c06e:	e017      	b.n	800c0a0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	0018      	movs	r0, r3
 800c074:	f000 f9ee 	bl	800c454 <USBD_CtlSendStatus>
        break;
 800c078:	e012      	b.n	800c0a0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	0018      	movs	r0, r3
 800c07e:	f000 f9e9 	bl	800c454 <USBD_CtlSendStatus>
        break;
 800c082:	e00d      	b.n	800c0a0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c084:	683a      	ldr	r2, [r7, #0]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	0011      	movs	r1, r2
 800c08a:	0018      	movs	r0, r3
 800c08c:	f000 f8fa 	bl	800c284 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c090:	4b05      	ldr	r3, [pc, #20]	; (800c0a8 <USBD_SetConfig+0x144>)
 800c092:	781a      	ldrb	r2, [r3, #0]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	0011      	movs	r1, r2
 800c098:	0018      	movs	r0, r3
 800c09a:	f7ff f883 	bl	800b1a4 <USBD_ClrClassConfig>
        break;
 800c09e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	b002      	add	sp, #8
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	46c0      	nop			; (mov r8, r8)
 800c0a8:	20000264 	.word	0x20000264

0800c0ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	88db      	ldrh	r3, [r3, #6]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d006      	beq.n	800c0cc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	0011      	movs	r1, r2
 800c0c4:	0018      	movs	r0, r3
 800c0c6:	f000 f8dd 	bl	800c284 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c0ca:	e026      	b.n	800c11a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	23a7      	movs	r3, #167	; 0xa7
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	5cd3      	ldrb	r3, [r2, r3]
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	dc02      	bgt.n	800c0de <USBD_GetConfig+0x32>
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	dc03      	bgt.n	800c0e4 <USBD_GetConfig+0x38>
 800c0dc:	e016      	b.n	800c10c <USBD_GetConfig+0x60>
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d00c      	beq.n	800c0fc <USBD_GetConfig+0x50>
 800c0e2:	e013      	b.n	800c10c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	3308      	adds	r3, #8
 800c0ee:	0019      	movs	r1, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	0018      	movs	r0, r3
 800c0f6:	f000 f943 	bl	800c380 <USBD_CtlSendData>
        break;
 800c0fa:	e00e      	b.n	800c11a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	1d19      	adds	r1, r3, #4
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	0018      	movs	r0, r3
 800c106:	f000 f93b 	bl	800c380 <USBD_CtlSendData>
        break;
 800c10a:	e006      	b.n	800c11a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	0011      	movs	r1, r2
 800c112:	0018      	movs	r0, r3
 800c114:	f000 f8b6 	bl	800c284 <USBD_CtlError>
        break;
 800c118:	46c0      	nop			; (mov r8, r8)
}
 800c11a:	46c0      	nop			; (mov r8, r8)
 800c11c:	46bd      	mov	sp, r7
 800c11e:	b002      	add	sp, #8
 800c120:	bd80      	pop	{r7, pc}

0800c122 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b082      	sub	sp, #8
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	23a7      	movs	r3, #167	; 0xa7
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	5cd3      	ldrb	r3, [r2, r3]
 800c134:	3b01      	subs	r3, #1
 800c136:	2b02      	cmp	r3, #2
 800c138:	d822      	bhi.n	800c180 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	88db      	ldrh	r3, [r3, #6]
 800c13e:	2b02      	cmp	r3, #2
 800c140:	d006      	beq.n	800c150 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800c142:	683a      	ldr	r2, [r7, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	0011      	movs	r1, r2
 800c148:	0018      	movs	r0, r3
 800c14a:	f000 f89b 	bl	800c284 <USBD_CtlError>
        break;
 800c14e:	e01e      	b.n	800c18e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	23a9      	movs	r3, #169	; 0xa9
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	58d3      	ldr	r3, [r2, r3]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d005      	beq.n	800c16e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	2202      	movs	r2, #2
 800c168:	431a      	orrs	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	330c      	adds	r3, #12
 800c172:	0019      	movs	r1, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2202      	movs	r2, #2
 800c178:	0018      	movs	r0, r3
 800c17a:	f000 f901 	bl	800c380 <USBD_CtlSendData>
      break;
 800c17e:	e006      	b.n	800c18e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	0011      	movs	r1, r2
 800c186:	0018      	movs	r0, r3
 800c188:	f000 f87c 	bl	800c284 <USBD_CtlError>
      break;
 800c18c:	46c0      	nop			; (mov r8, r8)
  }
}
 800c18e:	46c0      	nop			; (mov r8, r8)
 800c190:	46bd      	mov	sp, r7
 800c192:	b002      	add	sp, #8
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b082      	sub	sp, #8
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	885b      	ldrh	r3, [r3, #2]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d108      	bne.n	800c1ba <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	23a9      	movs	r3, #169	; 0xa9
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	0018      	movs	r0, r3
 800c1b6:	f000 f94d 	bl	800c454 <USBD_CtlSendStatus>
  }
}
 800c1ba:	46c0      	nop			; (mov r8, r8)
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	b002      	add	sp, #8
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	23a7      	movs	r3, #167	; 0xa7
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	5cd3      	ldrb	r3, [r2, r3]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	d80d      	bhi.n	800c1f6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	885b      	ldrh	r3, [r3, #2]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d110      	bne.n	800c204 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	23a9      	movs	r3, #169	; 0xa9
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	0018      	movs	r0, r3
 800c1f0:	f000 f930 	bl	800c454 <USBD_CtlSendStatus>
      }
      break;
 800c1f4:	e006      	b.n	800c204 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	0011      	movs	r1, r2
 800c1fc:	0018      	movs	r0, r3
 800c1fe:	f000 f841 	bl	800c284 <USBD_CtlError>
      break;
 800c202:	e000      	b.n	800c206 <USBD_ClrFeature+0x44>
      break;
 800c204:	46c0      	nop			; (mov r8, r8)
  }
}
 800c206:	46c0      	nop			; (mov r8, r8)
 800c208:	46bd      	mov	sp, r7
 800c20a:	b002      	add	sp, #8
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b082      	sub	sp, #8
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	781a      	ldrb	r2, [r3, #0]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	785a      	ldrb	r2, [r3, #1]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	3302      	adds	r3, #2
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	b29a      	uxth	r2, r3
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	3303      	adds	r3, #3
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	b29b      	uxth	r3, r3
 800c238:	021b      	lsls	r3, r3, #8
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	18d3      	adds	r3, r2, r3
 800c23e:	b29a      	uxth	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	3304      	adds	r3, #4
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	3305      	adds	r3, #5
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	b29b      	uxth	r3, r3
 800c254:	021b      	lsls	r3, r3, #8
 800c256:	b29b      	uxth	r3, r3
 800c258:	18d3      	adds	r3, r2, r3
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	3306      	adds	r3, #6
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	b29a      	uxth	r2, r3
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	3307      	adds	r3, #7
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	b29b      	uxth	r3, r3
 800c270:	021b      	lsls	r3, r3, #8
 800c272:	b29b      	uxth	r3, r3
 800c274:	18d3      	adds	r3, r2, r3
 800c276:	b29a      	uxth	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	80da      	strh	r2, [r3, #6]

}
 800c27c:	46c0      	nop			; (mov r8, r8)
 800c27e:	46bd      	mov	sp, r7
 800c280:	b002      	add	sp, #8
 800c282:	bd80      	pop	{r7, pc}

0800c284 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2180      	movs	r1, #128	; 0x80
 800c292:	0018      	movs	r0, r3
 800c294:	f000 fce3 	bl	800cc5e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2100      	movs	r1, #0
 800c29c:	0018      	movs	r0, r3
 800c29e:	f000 fcde 	bl	800cc5e <USBD_LL_StallEP>
}
 800c2a2:	46c0      	nop			; (mov r8, r8)
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	b002      	add	sp, #8
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c2aa:	b590      	push	{r4, r7, lr}
 800c2ac:	b087      	sub	sp, #28
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	60f8      	str	r0, [r7, #12]
 800c2b2:	60b9      	str	r1, [r7, #8]
 800c2b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2b6:	2417      	movs	r4, #23
 800c2b8:	193b      	adds	r3, r7, r4
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d03c      	beq.n	800c33e <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	0018      	movs	r0, r3
 800c2c8:	f000 f83d 	bl	800c346 <USBD_GetLen>
 800c2cc:	0003      	movs	r3, r0
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	18db      	adds	r3, r3, r3
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c2da:	193b      	adds	r3, r7, r4
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	193a      	adds	r2, r7, r4
 800c2e0:	1c59      	adds	r1, r3, #1
 800c2e2:	7011      	strb	r1, [r2, #0]
 800c2e4:	001a      	movs	r2, r3
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	189b      	adds	r3, r3, r2
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	7812      	ldrb	r2, [r2, #0]
 800c2ee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c2f0:	193b      	adds	r3, r7, r4
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	193a      	adds	r2, r7, r4
 800c2f6:	1c59      	adds	r1, r3, #1
 800c2f8:	7011      	strb	r1, [r2, #0]
 800c2fa:	001a      	movs	r2, r3
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	189b      	adds	r3, r3, r2
 800c300:	2203      	movs	r2, #3
 800c302:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c304:	e017      	b.n	800c336 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	1c5a      	adds	r2, r3, #1
 800c30a:	60fa      	str	r2, [r7, #12]
 800c30c:	2417      	movs	r4, #23
 800c30e:	193a      	adds	r2, r7, r4
 800c310:	7812      	ldrb	r2, [r2, #0]
 800c312:	1939      	adds	r1, r7, r4
 800c314:	1c50      	adds	r0, r2, #1
 800c316:	7008      	strb	r0, [r1, #0]
 800c318:	0011      	movs	r1, r2
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	1852      	adds	r2, r2, r1
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c322:	193b      	adds	r3, r7, r4
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	193a      	adds	r2, r7, r4
 800c328:	1c59      	adds	r1, r3, #1
 800c32a:	7011      	strb	r1, [r2, #0]
 800c32c:	001a      	movs	r2, r3
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	189b      	adds	r3, r3, r2
 800c332:	2200      	movs	r2, #0
 800c334:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1e3      	bne.n	800c306 <USBD_GetString+0x5c>
    }
  }
}
 800c33e:	46c0      	nop			; (mov r8, r8)
 800c340:	46bd      	mov	sp, r7
 800c342:	b007      	add	sp, #28
 800c344:	bd90      	pop	{r4, r7, pc}

0800c346 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c34e:	230f      	movs	r3, #15
 800c350:	18fb      	adds	r3, r7, r3
 800c352:	2200      	movs	r2, #0
 800c354:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800c356:	e008      	b.n	800c36a <USBD_GetLen+0x24>
  {
    len++;
 800c358:	210f      	movs	r1, #15
 800c35a:	187b      	adds	r3, r7, r1
 800c35c:	781a      	ldrb	r2, [r3, #0]
 800c35e:	187b      	adds	r3, r7, r1
 800c360:	3201      	adds	r2, #1
 800c362:	701a      	strb	r2, [r3, #0]
    buf++;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	3301      	adds	r3, #1
 800c368:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1f2      	bne.n	800c358 <USBD_GetLen+0x12>
  }

  return len;
 800c372:	230f      	movs	r3, #15
 800c374:	18fb      	adds	r3, r7, r3
 800c376:	781b      	ldrb	r3, [r3, #0]
}
 800c378:	0018      	movs	r0, r3
 800c37a:	46bd      	mov	sp, r7
 800c37c:	b004      	add	sp, #16
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	1dbb      	adds	r3, r7, #6
 800c38c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	23a5      	movs	r3, #165	; 0xa5
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	2102      	movs	r1, #2
 800c396:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800c398:	1dbb      	adds	r3, r7, #6
 800c39a:	881a      	ldrh	r2, [r3, #0]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c3a0:	1dbb      	adds	r3, r7, #6
 800c3a2:	881a      	ldrh	r2, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3a8:	1dbb      	adds	r3, r7, #6
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	f000 fd06 	bl	800cdc2 <USBD_LL_Transmit>

  return USBD_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	0018      	movs	r0, r3
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	b004      	add	sp, #16
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	1dbb      	adds	r3, r7, #6
 800c3cc:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3ce:	1dbb      	adds	r3, r7, #6
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	f000 fcf3 	bl	800cdc2 <USBD_LL_Transmit>

  return USBD_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	0018      	movs	r0, r3
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	b004      	add	sp, #16
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	60f8      	str	r0, [r7, #12]
 800c3ee:	60b9      	str	r1, [r7, #8]
 800c3f0:	1dbb      	adds	r3, r7, #6
 800c3f2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	23a5      	movs	r3, #165	; 0xa5
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	2103      	movs	r1, #3
 800c3fc:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800c3fe:	1dbb      	adds	r3, r7, #6
 800c400:	8819      	ldrh	r1, [r3, #0]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	23ae      	movs	r3, #174	; 0xae
 800c406:	005b      	lsls	r3, r3, #1
 800c408:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800c40a:	1dbb      	adds	r3, r7, #6
 800c40c:	8819      	ldrh	r1, [r3, #0]
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	23b0      	movs	r3, #176	; 0xb0
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c416:	1dbb      	adds	r3, r7, #6
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	2100      	movs	r1, #0
 800c420:	f000 fd06 	bl	800ce30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	0018      	movs	r0, r3
 800c428:	46bd      	mov	sp, r7
 800c42a:	b004      	add	sp, #16
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b084      	sub	sp, #16
 800c432:	af00      	add	r7, sp, #0
 800c434:	60f8      	str	r0, [r7, #12]
 800c436:	60b9      	str	r1, [r7, #8]
 800c438:	1dbb      	adds	r3, r7, #6
 800c43a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c43c:	1dbb      	adds	r3, r7, #6
 800c43e:	881b      	ldrh	r3, [r3, #0]
 800c440:	68ba      	ldr	r2, [r7, #8]
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	2100      	movs	r1, #0
 800c446:	f000 fcf3 	bl	800ce30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	0018      	movs	r0, r3
 800c44e:	46bd      	mov	sp, r7
 800c450:	b004      	add	sp, #16
 800c452:	bd80      	pop	{r7, pc}

0800c454 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	23a5      	movs	r3, #165	; 0xa5
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	2104      	movs	r1, #4
 800c464:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	2300      	movs	r3, #0
 800c46a:	2200      	movs	r2, #0
 800c46c:	2100      	movs	r1, #0
 800c46e:	f000 fca8 	bl	800cdc2 <USBD_LL_Transmit>

  return USBD_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	0018      	movs	r0, r3
 800c476:	46bd      	mov	sp, r7
 800c478:	b002      	add	sp, #8
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	23a5      	movs	r3, #165	; 0xa5
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	2105      	movs	r1, #5
 800c48c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	2300      	movs	r3, #0
 800c492:	2200      	movs	r2, #0
 800c494:	2100      	movs	r1, #0
 800c496:	f000 fccb 	bl	800ce30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	0018      	movs	r0, r3
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	b002      	add	sp, #8
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c4a8:	4914      	ldr	r1, [pc, #80]	; (800c4fc <MX_USB_DEVICE_Init+0x58>)
 800c4aa:	4b15      	ldr	r3, [pc, #84]	; (800c500 <MX_USB_DEVICE_Init+0x5c>)
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	0018      	movs	r0, r3
 800c4b0:	f7fe fdea 	bl	800b088 <USBD_Init>
 800c4b4:	1e03      	subs	r3, r0, #0
 800c4b6:	d001      	beq.n	800c4bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c4b8:	f7f5 fcf0 	bl	8001e9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c4bc:	4a11      	ldr	r2, [pc, #68]	; (800c504 <MX_USB_DEVICE_Init+0x60>)
 800c4be:	4b10      	ldr	r3, [pc, #64]	; (800c500 <MX_USB_DEVICE_Init+0x5c>)
 800c4c0:	0011      	movs	r1, r2
 800c4c2:	0018      	movs	r0, r3
 800c4c4:	f7fe fe11 	bl	800b0ea <USBD_RegisterClass>
 800c4c8:	1e03      	subs	r3, r0, #0
 800c4ca:	d001      	beq.n	800c4d0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800c4cc:	f7f5 fce6 	bl	8001e9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4d0:	4a0d      	ldr	r2, [pc, #52]	; (800c508 <MX_USB_DEVICE_Init+0x64>)
 800c4d2:	4b0b      	ldr	r3, [pc, #44]	; (800c500 <MX_USB_DEVICE_Init+0x5c>)
 800c4d4:	0011      	movs	r1, r2
 800c4d6:	0018      	movs	r0, r3
 800c4d8:	f7fe fd26 	bl	800af28 <USBD_CDC_RegisterInterface>
 800c4dc:	1e03      	subs	r3, r0, #0
 800c4de:	d001      	beq.n	800c4e4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800c4e0:	f7f5 fcdc 	bl	8001e9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c4e4:	4b06      	ldr	r3, [pc, #24]	; (800c500 <MX_USB_DEVICE_Init+0x5c>)
 800c4e6:	0018      	movs	r0, r3
 800c4e8:	f7fe fe1f 	bl	800b12a <USBD_Start>
 800c4ec:	1e03      	subs	r3, r0, #0
 800c4ee:	d001      	beq.n	800c4f4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800c4f0:	f7f5 fcd4 	bl	8001e9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c4f4:	46c0      	nop			; (mov r8, r8)
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	46c0      	nop			; (mov r8, r8)
 800c4fc:	2000012c 	.word	0x2000012c
 800c500:	200006a0 	.word	0x200006a0
 800c504:	20000018 	.word	0x20000018
 800c508:	2000011c 	.word	0x2000011c

0800c50c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c510:	4907      	ldr	r1, [pc, #28]	; (800c530 <CDC_Init_FS+0x24>)
 800c512:	4b08      	ldr	r3, [pc, #32]	; (800c534 <CDC_Init_FS+0x28>)
 800c514:	2200      	movs	r2, #0
 800c516:	0018      	movs	r0, r3
 800c518:	f7fe fd21 	bl	800af5e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c51c:	4a06      	ldr	r2, [pc, #24]	; (800c538 <CDC_Init_FS+0x2c>)
 800c51e:	4b05      	ldr	r3, [pc, #20]	; (800c534 <CDC_Init_FS+0x28>)
 800c520:	0011      	movs	r1, r2
 800c522:	0018      	movs	r0, r3
 800c524:	f7fe fd37 	bl	800af96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c528:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c52a:	0018      	movs	r0, r3
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	20000d4c 	.word	0x20000d4c
 800c534:	200006a0 	.word	0x200006a0
 800c538:	20000964 	.word	0x20000964

0800c53c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c540:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c542:	0018      	movs	r0, r3
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6039      	str	r1, [r7, #0]
 800c550:	0011      	movs	r1, r2
 800c552:	1dfb      	adds	r3, r7, #7
 800c554:	1c02      	adds	r2, r0, #0
 800c556:	701a      	strb	r2, [r3, #0]
 800c558:	1d3b      	adds	r3, r7, #4
 800c55a:	1c0a      	adds	r2, r1, #0
 800c55c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c55e:	1dfb      	adds	r3, r7, #7
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	2b23      	cmp	r3, #35	; 0x23
 800c564:	d804      	bhi.n	800c570 <CDC_Control_FS+0x28>
 800c566:	009a      	lsls	r2, r3, #2
 800c568:	4b04      	ldr	r3, [pc, #16]	; (800c57c <CDC_Control_FS+0x34>)
 800c56a:	18d3      	adds	r3, r2, r3
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c570:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800c572:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c574:	0018      	movs	r0, r3
 800c576:	46bd      	mov	sp, r7
 800c578:	b002      	add	sp, #8
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	0800da20 	.word	0x0800da20

0800c580 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c580:	b590      	push	{r4, r7, lr}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800c58a:	4b18      	ldr	r3, [pc, #96]	; (800c5ec <CDC_Receive_FS+0x6c>)
 800c58c:	7a1a      	ldrb	r2, [r3, #8]
 800c58e:	2101      	movs	r1, #1
 800c590:	430a      	orrs	r2, r1
 800c592:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800c594:	230f      	movs	r3, #15
 800c596:	18fb      	adds	r3, r7, r3
 800c598:	2200      	movs	r2, #0
 800c59a:	701a      	strb	r2, [r3, #0]
 800c59c:	e00f      	b.n	800c5be <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800c59e:	4b14      	ldr	r3, [pc, #80]	; (800c5f0 <CDC_Receive_FS+0x70>)
 800c5a0:	6818      	ldr	r0, [r3, #0]
 800c5a2:	240f      	movs	r4, #15
 800c5a4:	193b      	adds	r3, r7, r4
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	18d3      	adds	r3, r2, r3
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	0019      	movs	r1, r3
 800c5b0:	f7f5 fcc4 	bl	8001f3c <push>
  for(uint8_t i = 0; i < *Len; i++)
 800c5b4:	193b      	adds	r3, r7, r4
 800c5b6:	781a      	ldrb	r2, [r3, #0]
 800c5b8:	193b      	adds	r3, r7, r4
 800c5ba:	3201      	adds	r2, #1
 800c5bc:	701a      	strb	r2, [r3, #0]
 800c5be:	230f      	movs	r3, #15
 800c5c0:	18fb      	adds	r3, r7, r3
 800c5c2:	781a      	ldrb	r2, [r3, #0]
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d3e8      	bcc.n	800c59e <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	4b09      	ldr	r3, [pc, #36]	; (800c5f4 <CDC_Receive_FS+0x74>)
 800c5d0:	0011      	movs	r1, r2
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	f7fe fcdf 	bl	800af96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c5d8:	4b06      	ldr	r3, [pc, #24]	; (800c5f4 <CDC_Receive_FS+0x74>)
 800c5da:	0018      	movs	r0, r3
 800c5dc:	f7fe fd26 	bl	800b02c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c5e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c5e2:	0018      	movs	r0, r3
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	b005      	add	sp, #20
 800c5e8:	bd90      	pop	{r4, r7, pc}
 800c5ea:	46c0      	nop			; (mov r8, r8)
 800c5ec:	20000630 	.word	0x20000630
 800c5f0:	20001134 	.word	0x20001134
 800c5f4:	200006a0 	.word	0x200006a0

0800c5f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c5f8:	b5b0      	push	{r4, r5, r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	000a      	movs	r2, r1
 800c602:	1cbb      	adds	r3, r7, #2
 800c604:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800c606:	230f      	movs	r3, #15
 800c608:	18fb      	adds	r3, r7, r3
 800c60a:	2200      	movs	r2, #0
 800c60c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c60e:	4a11      	ldr	r2, [pc, #68]	; (800c654 <CDC_Transmit_FS+0x5c>)
 800c610:	23ae      	movs	r3, #174	; 0xae
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	58d3      	ldr	r3, [r2, r3]
 800c616:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	2385      	movs	r3, #133	; 0x85
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	58d3      	ldr	r3, [r2, r3]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d001      	beq.n	800c628 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800c624:	2301      	movs	r3, #1
 800c626:	e010      	b.n	800c64a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c628:	1cbb      	adds	r3, r7, #2
 800c62a:	881a      	ldrh	r2, [r3, #0]
 800c62c:	6879      	ldr	r1, [r7, #4]
 800c62e:	4b09      	ldr	r3, [pc, #36]	; (800c654 <CDC_Transmit_FS+0x5c>)
 800c630:	0018      	movs	r0, r3
 800c632:	f7fe fc94 	bl	800af5e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c636:	250f      	movs	r5, #15
 800c638:	197c      	adds	r4, r7, r5
 800c63a:	4b06      	ldr	r3, [pc, #24]	; (800c654 <CDC_Transmit_FS+0x5c>)
 800c63c:	0018      	movs	r0, r3
 800c63e:	f7fe fcbe 	bl	800afbe <USBD_CDC_TransmitPacket>
 800c642:	0003      	movs	r3, r0
 800c644:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800c646:	197b      	adds	r3, r7, r5
 800c648:	781b      	ldrb	r3, [r3, #0]
}
 800c64a:	0018      	movs	r0, r3
 800c64c:	46bd      	mov	sp, r7
 800c64e:	b004      	add	sp, #16
 800c650:	bdb0      	pop	{r4, r5, r7, pc}
 800c652:	46c0      	nop			; (mov r8, r8)
 800c654:	200006a0 	.word	0x200006a0

0800c658 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	0002      	movs	r2, r0
 800c660:	6039      	str	r1, [r7, #0]
 800c662:	1dfb      	adds	r3, r7, #7
 800c664:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	2212      	movs	r2, #18
 800c66a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c66c:	4b02      	ldr	r3, [pc, #8]	; (800c678 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c66e:	0018      	movs	r0, r3
 800c670:	46bd      	mov	sp, r7
 800c672:	b002      	add	sp, #8
 800c674:	bd80      	pop	{r7, pc}
 800c676:	46c0      	nop			; (mov r8, r8)
 800c678:	20000148 	.word	0x20000148

0800c67c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	0002      	movs	r2, r0
 800c684:	6039      	str	r1, [r7, #0]
 800c686:	1dfb      	adds	r3, r7, #7
 800c688:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2204      	movs	r2, #4
 800c68e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c690:	4b02      	ldr	r3, [pc, #8]	; (800c69c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c692:	0018      	movs	r0, r3
 800c694:	46bd      	mov	sp, r7
 800c696:	b002      	add	sp, #8
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	46c0      	nop			; (mov r8, r8)
 800c69c:	2000015c 	.word	0x2000015c

0800c6a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	0002      	movs	r2, r0
 800c6a8:	6039      	str	r1, [r7, #0]
 800c6aa:	1dfb      	adds	r3, r7, #7
 800c6ac:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c6ae:	1dfb      	adds	r3, r7, #7
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d106      	bne.n	800c6c4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	4908      	ldr	r1, [pc, #32]	; (800c6dc <USBD_FS_ProductStrDescriptor+0x3c>)
 800c6ba:	4b09      	ldr	r3, [pc, #36]	; (800c6e0 <USBD_FS_ProductStrDescriptor+0x40>)
 800c6bc:	0018      	movs	r0, r3
 800c6be:	f7ff fdf4 	bl	800c2aa <USBD_GetString>
 800c6c2:	e005      	b.n	800c6d0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	4905      	ldr	r1, [pc, #20]	; (800c6dc <USBD_FS_ProductStrDescriptor+0x3c>)
 800c6c8:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <USBD_FS_ProductStrDescriptor+0x40>)
 800c6ca:	0018      	movs	r0, r3
 800c6cc:	f7ff fded 	bl	800c2aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6d0:	4b02      	ldr	r3, [pc, #8]	; (800c6dc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800c6d2:	0018      	movs	r0, r3
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	b002      	add	sp, #8
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	46c0      	nop			; (mov r8, r8)
 800c6dc:	20001138 	.word	0x20001138
 800c6e0:	0800d8d0 	.word	0x0800d8d0

0800c6e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	0002      	movs	r2, r0
 800c6ec:	6039      	str	r1, [r7, #0]
 800c6ee:	1dfb      	adds	r3, r7, #7
 800c6f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	4904      	ldr	r1, [pc, #16]	; (800c708 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c6f6:	4b05      	ldr	r3, [pc, #20]	; (800c70c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800c6f8:	0018      	movs	r0, r3
 800c6fa:	f7ff fdd6 	bl	800c2aa <USBD_GetString>
  return USBD_StrDesc;
 800c6fe:	4b02      	ldr	r3, [pc, #8]	; (800c708 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800c700:	0018      	movs	r0, r3
 800c702:	46bd      	mov	sp, r7
 800c704:	b002      	add	sp, #8
 800c706:	bd80      	pop	{r7, pc}
 800c708:	20001138 	.word	0x20001138
 800c70c:	0800d8e8 	.word	0x0800d8e8

0800c710 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	0002      	movs	r2, r0
 800c718:	6039      	str	r1, [r7, #0]
 800c71a:	1dfb      	adds	r3, r7, #7
 800c71c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	221a      	movs	r2, #26
 800c722:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c724:	f000 f84c 	bl	800c7c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c728:	4b02      	ldr	r3, [pc, #8]	; (800c734 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800c72a:	0018      	movs	r0, r3
 800c72c:	46bd      	mov	sp, r7
 800c72e:	b002      	add	sp, #8
 800c730:	bd80      	pop	{r7, pc}
 800c732:	46c0      	nop			; (mov r8, r8)
 800c734:	20000160 	.word	0x20000160

0800c738 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	0002      	movs	r2, r0
 800c740:	6039      	str	r1, [r7, #0]
 800c742:	1dfb      	adds	r3, r7, #7
 800c744:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800c746:	1dfb      	adds	r3, r7, #7
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d106      	bne.n	800c75c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c74e:	683a      	ldr	r2, [r7, #0]
 800c750:	4908      	ldr	r1, [pc, #32]	; (800c774 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c752:	4b09      	ldr	r3, [pc, #36]	; (800c778 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c754:	0018      	movs	r0, r3
 800c756:	f7ff fda8 	bl	800c2aa <USBD_GetString>
 800c75a:	e005      	b.n	800c768 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c75c:	683a      	ldr	r2, [r7, #0]
 800c75e:	4905      	ldr	r1, [pc, #20]	; (800c774 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c760:	4b05      	ldr	r3, [pc, #20]	; (800c778 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c762:	0018      	movs	r0, r3
 800c764:	f7ff fda1 	bl	800c2aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800c768:	4b02      	ldr	r3, [pc, #8]	; (800c774 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800c76a:	0018      	movs	r0, r3
 800c76c:	46bd      	mov	sp, r7
 800c76e:	b002      	add	sp, #8
 800c770:	bd80      	pop	{r7, pc}
 800c772:	46c0      	nop			; (mov r8, r8)
 800c774:	20001138 	.word	0x20001138
 800c778:	0800d8fc 	.word	0x0800d8fc

0800c77c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	0002      	movs	r2, r0
 800c784:	6039      	str	r1, [r7, #0]
 800c786:	1dfb      	adds	r3, r7, #7
 800c788:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c78a:	1dfb      	adds	r3, r7, #7
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d106      	bne.n	800c7a0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	4908      	ldr	r1, [pc, #32]	; (800c7b8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c796:	4b09      	ldr	r3, [pc, #36]	; (800c7bc <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c798:	0018      	movs	r0, r3
 800c79a:	f7ff fd86 	bl	800c2aa <USBD_GetString>
 800c79e:	e005      	b.n	800c7ac <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	4905      	ldr	r1, [pc, #20]	; (800c7b8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c7a4:	4b05      	ldr	r3, [pc, #20]	; (800c7bc <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c7a6:	0018      	movs	r0, r3
 800c7a8:	f7ff fd7f 	bl	800c2aa <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7ac:	4b02      	ldr	r3, [pc, #8]	; (800c7b8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800c7ae:	0018      	movs	r0, r3
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	b002      	add	sp, #8
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	46c0      	nop			; (mov r8, r8)
 800c7b8:	20001138 	.word	0x20001138
 800c7bc:	0800d908 	.word	0x0800d908

0800c7c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7c6:	4b10      	ldr	r3, [pc, #64]	; (800c808 <Get_SerialNum+0x48>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7cc:	4b0f      	ldr	r3, [pc, #60]	; (800c80c <Get_SerialNum+0x4c>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7d2:	4b0f      	ldr	r3, [pc, #60]	; (800c810 <Get_SerialNum+0x50>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	18d3      	adds	r3, r2, r3
 800c7de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00b      	beq.n	800c7fe <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7e6:	490b      	ldr	r1, [pc, #44]	; (800c814 <Get_SerialNum+0x54>)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2208      	movs	r2, #8
 800c7ec:	0018      	movs	r0, r3
 800c7ee:	f000 f815 	bl	800c81c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7f2:	4909      	ldr	r1, [pc, #36]	; (800c818 <Get_SerialNum+0x58>)
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2204      	movs	r2, #4
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	f000 f80f 	bl	800c81c <IntToUnicode>
  }
}
 800c7fe:	46c0      	nop			; (mov r8, r8)
 800c800:	46bd      	mov	sp, r7
 800c802:	b004      	add	sp, #16
 800c804:	bd80      	pop	{r7, pc}
 800c806:	46c0      	nop			; (mov r8, r8)
 800c808:	1ffff7ac 	.word	0x1ffff7ac
 800c80c:	1ffff7b0 	.word	0x1ffff7b0
 800c810:	1ffff7b4 	.word	0x1ffff7b4
 800c814:	20000162 	.word	0x20000162
 800c818:	20000172 	.word	0x20000172

0800c81c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	1dfb      	adds	r3, r7, #7
 800c828:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800c82a:	2117      	movs	r1, #23
 800c82c:	187b      	adds	r3, r7, r1
 800c82e:	2200      	movs	r2, #0
 800c830:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800c832:	187b      	adds	r3, r7, r1
 800c834:	2200      	movs	r2, #0
 800c836:	701a      	strb	r2, [r3, #0]
 800c838:	e02f      	b.n	800c89a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	0f1b      	lsrs	r3, r3, #28
 800c83e:	2b09      	cmp	r3, #9
 800c840:	d80d      	bhi.n	800c85e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	0f1b      	lsrs	r3, r3, #28
 800c846:	b2da      	uxtb	r2, r3
 800c848:	2317      	movs	r3, #23
 800c84a:	18fb      	adds	r3, r7, r3
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	005b      	lsls	r3, r3, #1
 800c850:	0019      	movs	r1, r3
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	185b      	adds	r3, r3, r1
 800c856:	3230      	adds	r2, #48	; 0x30
 800c858:	b2d2      	uxtb	r2, r2
 800c85a:	701a      	strb	r2, [r3, #0]
 800c85c:	e00c      	b.n	800c878 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	0f1b      	lsrs	r3, r3, #28
 800c862:	b2da      	uxtb	r2, r3
 800c864:	2317      	movs	r3, #23
 800c866:	18fb      	adds	r3, r7, r3
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	005b      	lsls	r3, r3, #1
 800c86c:	0019      	movs	r1, r3
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	185b      	adds	r3, r3, r1
 800c872:	3237      	adds	r2, #55	; 0x37
 800c874:	b2d2      	uxtb	r2, r2
 800c876:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	011b      	lsls	r3, r3, #4
 800c87c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c87e:	2117      	movs	r1, #23
 800c880:	187b      	adds	r3, r7, r1
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	005b      	lsls	r3, r3, #1
 800c886:	3301      	adds	r3, #1
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	18d3      	adds	r3, r2, r3
 800c88c:	2200      	movs	r2, #0
 800c88e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c890:	187b      	adds	r3, r7, r1
 800c892:	781a      	ldrb	r2, [r3, #0]
 800c894:	187b      	adds	r3, r7, r1
 800c896:	3201      	adds	r2, #1
 800c898:	701a      	strb	r2, [r3, #0]
 800c89a:	2317      	movs	r3, #23
 800c89c:	18fa      	adds	r2, r7, r3
 800c89e:	1dfb      	adds	r3, r7, #7
 800c8a0:	7812      	ldrb	r2, [r2, #0]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d3c8      	bcc.n	800c83a <IntToUnicode+0x1e>
  }
}
 800c8a8:	46c0      	nop			; (mov r8, r8)
 800c8aa:	46c0      	nop			; (mov r8, r8)
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	b006      	add	sp, #24
 800c8b0:	bd80      	pop	{r7, pc}
	...

0800c8b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a0e      	ldr	r2, [pc, #56]	; (800c8fc <HAL_PCD_MspInit+0x48>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d115      	bne.n	800c8f2 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c8c6:	4b0e      	ldr	r3, [pc, #56]	; (800c900 <HAL_PCD_MspInit+0x4c>)
 800c8c8:	69da      	ldr	r2, [r3, #28]
 800c8ca:	4b0d      	ldr	r3, [pc, #52]	; (800c900 <HAL_PCD_MspInit+0x4c>)
 800c8cc:	2180      	movs	r1, #128	; 0x80
 800c8ce:	0409      	lsls	r1, r1, #16
 800c8d0:	430a      	orrs	r2, r1
 800c8d2:	61da      	str	r2, [r3, #28]
 800c8d4:	4b0a      	ldr	r3, [pc, #40]	; (800c900 <HAL_PCD_MspInit+0x4c>)
 800c8d6:	69da      	ldr	r2, [r3, #28]
 800c8d8:	2380      	movs	r3, #128	; 0x80
 800c8da:	041b      	lsls	r3, r3, #16
 800c8dc:	4013      	ands	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]
 800c8e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	201f      	movs	r0, #31
 800c8e8:	f7f6 ffc2 	bl	8003870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c8ec:	201f      	movs	r0, #31
 800c8ee:	f7f6 ffd4 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c8f2:	46c0      	nop			; (mov r8, r8)
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	b004      	add	sp, #16
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	46c0      	nop			; (mov r8, r8)
 800c8fc:	40005c00 	.word	0x40005c00
 800c900:	40021000 	.word	0x40021000

0800c904 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	23bc      	movs	r3, #188	; 0xbc
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	58d2      	ldr	r2, [r2, r3]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	21ac      	movs	r1, #172	; 0xac
 800c918:	0089      	lsls	r1, r1, #2
 800c91a:	468c      	mov	ip, r1
 800c91c:	4463      	add	r3, ip
 800c91e:	0019      	movs	r1, r3
 800c920:	0010      	movs	r0, r2
 800c922:	f7fe fc55 	bl	800b1d0 <USBD_LL_SetupStage>
}
 800c926:	46c0      	nop			; (mov r8, r8)
 800c928:	46bd      	mov	sp, r7
 800c92a:	b002      	add	sp, #8
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c92e:	b590      	push	{r4, r7, lr}
 800c930:	b083      	sub	sp, #12
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	000a      	movs	r2, r1
 800c938:	1cfb      	adds	r3, r7, #3
 800c93a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	23bc      	movs	r3, #188	; 0xbc
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	58d4      	ldr	r4, [r2, r3]
 800c944:	1cfb      	adds	r3, r7, #3
 800c946:	781a      	ldrb	r2, [r3, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	23be      	movs	r3, #190	; 0xbe
 800c94c:	0059      	lsls	r1, r3, #1
 800c94e:	0013      	movs	r3, r2
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	189b      	adds	r3, r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	18c3      	adds	r3, r0, r3
 800c958:	185b      	adds	r3, r3, r1
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	1cfb      	adds	r3, r7, #3
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	0019      	movs	r1, r3
 800c962:	0020      	movs	r0, r4
 800c964:	f7fe fc92 	bl	800b28c <USBD_LL_DataOutStage>
}
 800c968:	46c0      	nop			; (mov r8, r8)
 800c96a:	46bd      	mov	sp, r7
 800c96c:	b003      	add	sp, #12
 800c96e:	bd90      	pop	{r4, r7, pc}

0800c970 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	000a      	movs	r2, r1
 800c97a:	1cfb      	adds	r3, r7, #3
 800c97c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	23bc      	movs	r3, #188	; 0xbc
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	58d0      	ldr	r0, [r2, r3]
 800c986:	1cfb      	adds	r3, r7, #3
 800c988:	781a      	ldrb	r2, [r3, #0]
 800c98a:	6879      	ldr	r1, [r7, #4]
 800c98c:	0013      	movs	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	189b      	adds	r3, r3, r2
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	18cb      	adds	r3, r1, r3
 800c996:	333c      	adds	r3, #60	; 0x3c
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	1cfb      	adds	r3, r7, #3
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	0019      	movs	r1, r3
 800c9a0:	f7fe fcf6 	bl	800b390 <USBD_LL_DataInStage>
}
 800c9a4:	46c0      	nop			; (mov r8, r8)
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	b002      	add	sp, #8
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	23bc      	movs	r3, #188	; 0xbc
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	58d3      	ldr	r3, [r2, r3]
 800c9bc:	0018      	movs	r0, r3
 800c9be:	f7fe fe2d 	bl	800b61c <USBD_LL_SOF>
}
 800c9c2:	46c0      	nop			; (mov r8, r8)
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	b002      	add	sp, #8
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b084      	sub	sp, #16
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9d2:	230f      	movs	r3, #15
 800c9d4:	18fb      	adds	r3, r7, r3
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d001      	beq.n	800c9e6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c9e2:	f7f5 fa5b 	bl	8001e9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	23bc      	movs	r3, #188	; 0xbc
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	58d2      	ldr	r2, [r2, r3]
 800c9ee:	230f      	movs	r3, #15
 800c9f0:	18fb      	adds	r3, r7, r3
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	0019      	movs	r1, r3
 800c9f6:	0010      	movs	r0, r2
 800c9f8:	f7fe fdcf 	bl	800b59a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	23bc      	movs	r3, #188	; 0xbc
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	58d3      	ldr	r3, [r2, r3]
 800ca04:	0018      	movs	r0, r3
 800ca06:	f7fe fd80 	bl	800b50a <USBD_LL_Reset>
}
 800ca0a:	46c0      	nop			; (mov r8, r8)
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	b004      	add	sp, #16
 800ca10:	bd80      	pop	{r7, pc}
	...

0800ca14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	23bc      	movs	r3, #188	; 0xbc
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	58d3      	ldr	r3, [r2, r3]
 800ca24:	0018      	movs	r0, r3
 800ca26:	f7fe fdc9 	bl	800b5bc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d005      	beq.n	800ca3e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca32:	4b05      	ldr	r3, [pc, #20]	; (800ca48 <HAL_PCD_SuspendCallback+0x34>)
 800ca34:	691a      	ldr	r2, [r3, #16]
 800ca36:	4b04      	ldr	r3, [pc, #16]	; (800ca48 <HAL_PCD_SuspendCallback+0x34>)
 800ca38:	2106      	movs	r1, #6
 800ca3a:	430a      	orrs	r2, r1
 800ca3c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800ca3e:	46c0      	nop			; (mov r8, r8)
 800ca40:	46bd      	mov	sp, r7
 800ca42:	b002      	add	sp, #8
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	46c0      	nop			; (mov r8, r8)
 800ca48:	e000ed00 	.word	0xe000ed00

0800ca4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	699b      	ldr	r3, [r3, #24]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d007      	beq.n	800ca6c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca5c:	4b09      	ldr	r3, [pc, #36]	; (800ca84 <HAL_PCD_ResumeCallback+0x38>)
 800ca5e:	691a      	ldr	r2, [r3, #16]
 800ca60:	4b08      	ldr	r3, [pc, #32]	; (800ca84 <HAL_PCD_ResumeCallback+0x38>)
 800ca62:	2106      	movs	r1, #6
 800ca64:	438a      	bics	r2, r1
 800ca66:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800ca68:	f000 fa44 	bl	800cef4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	23bc      	movs	r3, #188	; 0xbc
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	58d3      	ldr	r3, [r2, r3]
 800ca74:	0018      	movs	r0, r3
 800ca76:	f7fe fdb9 	bl	800b5ec <USBD_LL_Resume>
}
 800ca7a:	46c0      	nop			; (mov r8, r8)
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	b002      	add	sp, #8
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	46c0      	nop			; (mov r8, r8)
 800ca84:	e000ed00 	.word	0xe000ed00

0800ca88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca90:	4a2d      	ldr	r2, [pc, #180]	; (800cb48 <USBD_LL_Init+0xc0>)
 800ca92:	23bc      	movs	r3, #188	; 0xbc
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	6879      	ldr	r1, [r7, #4]
 800ca98:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	23b0      	movs	r3, #176	; 0xb0
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	4929      	ldr	r1, [pc, #164]	; (800cb48 <USBD_LL_Init+0xc0>)
 800caa2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800caa4:	4b28      	ldr	r3, [pc, #160]	; (800cb48 <USBD_LL_Init+0xc0>)
 800caa6:	4a29      	ldr	r2, [pc, #164]	; (800cb4c <USBD_LL_Init+0xc4>)
 800caa8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800caaa:	4b27      	ldr	r3, [pc, #156]	; (800cb48 <USBD_LL_Init+0xc0>)
 800caac:	2208      	movs	r2, #8
 800caae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cab0:	4b25      	ldr	r3, [pc, #148]	; (800cb48 <USBD_LL_Init+0xc0>)
 800cab2:	2202      	movs	r2, #2
 800cab4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cab6:	4b24      	ldr	r3, [pc, #144]	; (800cb48 <USBD_LL_Init+0xc0>)
 800cab8:	2202      	movs	r2, #2
 800caba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cabc:	4b22      	ldr	r3, [pc, #136]	; (800cb48 <USBD_LL_Init+0xc0>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cac2:	4b21      	ldr	r3, [pc, #132]	; (800cb48 <USBD_LL_Init+0xc0>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cac8:	4b1f      	ldr	r3, [pc, #124]	; (800cb48 <USBD_LL_Init+0xc0>)
 800caca:	2200      	movs	r2, #0
 800cacc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cace:	4b1e      	ldr	r3, [pc, #120]	; (800cb48 <USBD_LL_Init+0xc0>)
 800cad0:	0018      	movs	r0, r3
 800cad2:	f7f7 f967 	bl	8003da4 <HAL_PCD_Init>
 800cad6:	1e03      	subs	r3, r0, #0
 800cad8:	d001      	beq.n	800cade <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800cada:	f7f5 f9df 	bl	8001e9c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	23b0      	movs	r3, #176	; 0xb0
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	58d0      	ldr	r0, [r2, r3]
 800cae6:	2318      	movs	r3, #24
 800cae8:	2200      	movs	r2, #0
 800caea:	2100      	movs	r1, #0
 800caec:	f7f8 ff48 	bl	8005980 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	23b0      	movs	r3, #176	; 0xb0
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	58d0      	ldr	r0, [r2, r3]
 800caf8:	2358      	movs	r3, #88	; 0x58
 800cafa:	2200      	movs	r2, #0
 800cafc:	2180      	movs	r1, #128	; 0x80
 800cafe:	f7f8 ff3f 	bl	8005980 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	23b0      	movs	r3, #176	; 0xb0
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	58d0      	ldr	r0, [r2, r3]
 800cb0a:	23c0      	movs	r3, #192	; 0xc0
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	2181      	movs	r1, #129	; 0x81
 800cb10:	f7f8 ff36 	bl	8005980 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	23b0      	movs	r3, #176	; 0xb0
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	58d0      	ldr	r0, [r2, r3]
 800cb1c:	2388      	movs	r3, #136	; 0x88
 800cb1e:	005b      	lsls	r3, r3, #1
 800cb20:	2200      	movs	r2, #0
 800cb22:	2101      	movs	r1, #1
 800cb24:	f7f8 ff2c 	bl	8005980 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	23b0      	movs	r3, #176	; 0xb0
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	58d0      	ldr	r0, [r2, r3]
 800cb30:	2380      	movs	r3, #128	; 0x80
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	2200      	movs	r2, #0
 800cb36:	2182      	movs	r1, #130	; 0x82
 800cb38:	f7f8 ff22 	bl	8005980 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	0018      	movs	r0, r3
 800cb40:	46bd      	mov	sp, r7
 800cb42:	b002      	add	sp, #8
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	46c0      	nop			; (mov r8, r8)
 800cb48:	20001338 	.word	0x20001338
 800cb4c:	40005c00 	.word	0x40005c00

0800cb50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb58:	210f      	movs	r1, #15
 800cb5a:	187b      	adds	r3, r7, r1
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb60:	260e      	movs	r6, #14
 800cb62:	19bb      	adds	r3, r7, r6
 800cb64:	2200      	movs	r2, #0
 800cb66:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	23b0      	movs	r3, #176	; 0xb0
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	58d3      	ldr	r3, [r2, r3]
 800cb70:	000d      	movs	r5, r1
 800cb72:	187c      	adds	r4, r7, r1
 800cb74:	0018      	movs	r0, r3
 800cb76:	f7f7 fa25 	bl	8003fc4 <HAL_PCD_Start>
 800cb7a:	0003      	movs	r3, r0
 800cb7c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb7e:	19bc      	adds	r4, r7, r6
 800cb80:	197b      	adds	r3, r7, r5
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	0018      	movs	r0, r3
 800cb86:	f000 f9bc 	bl	800cf02 <USBD_Get_USB_Status>
 800cb8a:	0003      	movs	r3, r0
 800cb8c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cb8e:	19bb      	adds	r3, r7, r6
 800cb90:	781b      	ldrb	r3, [r3, #0]
}
 800cb92:	0018      	movs	r0, r3
 800cb94:	46bd      	mov	sp, r7
 800cb96:	b005      	add	sp, #20
 800cb98:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb9c:	b085      	sub	sp, #20
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
 800cba2:	000c      	movs	r4, r1
 800cba4:	0010      	movs	r0, r2
 800cba6:	0019      	movs	r1, r3
 800cba8:	1cfb      	adds	r3, r7, #3
 800cbaa:	1c22      	adds	r2, r4, #0
 800cbac:	701a      	strb	r2, [r3, #0]
 800cbae:	1cbb      	adds	r3, r7, #2
 800cbb0:	1c02      	adds	r2, r0, #0
 800cbb2:	701a      	strb	r2, [r3, #0]
 800cbb4:	003b      	movs	r3, r7
 800cbb6:	1c0a      	adds	r2, r1, #0
 800cbb8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbba:	260f      	movs	r6, #15
 800cbbc:	19bb      	adds	r3, r7, r6
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbc2:	250e      	movs	r5, #14
 800cbc4:	197b      	adds	r3, r7, r5
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	23b0      	movs	r3, #176	; 0xb0
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	58d0      	ldr	r0, [r2, r3]
 800cbd2:	19bc      	adds	r4, r7, r6
 800cbd4:	1cbb      	adds	r3, r7, #2
 800cbd6:	781d      	ldrb	r5, [r3, #0]
 800cbd8:	003b      	movs	r3, r7
 800cbda:	881a      	ldrh	r2, [r3, #0]
 800cbdc:	1cfb      	adds	r3, r7, #3
 800cbde:	7819      	ldrb	r1, [r3, #0]
 800cbe0:	002b      	movs	r3, r5
 800cbe2:	f7f7 fbbc 	bl	800435e <HAL_PCD_EP_Open>
 800cbe6:	0003      	movs	r3, r0
 800cbe8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbea:	250e      	movs	r5, #14
 800cbec:	197c      	adds	r4, r7, r5
 800cbee:	19bb      	adds	r3, r7, r6
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	0018      	movs	r0, r3
 800cbf4:	f000 f985 	bl	800cf02 <USBD_Get_USB_Status>
 800cbf8:	0003      	movs	r3, r0
 800cbfa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cbfc:	197b      	adds	r3, r7, r5
 800cbfe:	781b      	ldrb	r3, [r3, #0]
}
 800cc00:	0018      	movs	r0, r3
 800cc02:	46bd      	mov	sp, r7
 800cc04:	b005      	add	sp, #20
 800cc06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc08 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	000a      	movs	r2, r1
 800cc12:	1cfb      	adds	r3, r7, #3
 800cc14:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc16:	210f      	movs	r1, #15
 800cc18:	187b      	adds	r3, r7, r1
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc1e:	260e      	movs	r6, #14
 800cc20:	19bb      	adds	r3, r7, r6
 800cc22:	2200      	movs	r2, #0
 800cc24:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	23b0      	movs	r3, #176	; 0xb0
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	58d2      	ldr	r2, [r2, r3]
 800cc2e:	000d      	movs	r5, r1
 800cc30:	187c      	adds	r4, r7, r1
 800cc32:	1cfb      	adds	r3, r7, #3
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	0019      	movs	r1, r3
 800cc38:	0010      	movs	r0, r2
 800cc3a:	f7f7 fc08 	bl	800444e <HAL_PCD_EP_Close>
 800cc3e:	0003      	movs	r3, r0
 800cc40:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc42:	19bc      	adds	r4, r7, r6
 800cc44:	197b      	adds	r3, r7, r5
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	0018      	movs	r0, r3
 800cc4a:	f000 f95a 	bl	800cf02 <USBD_Get_USB_Status>
 800cc4e:	0003      	movs	r3, r0
 800cc50:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cc52:	19bb      	adds	r3, r7, r6
 800cc54:	781b      	ldrb	r3, [r3, #0]
}
 800cc56:	0018      	movs	r0, r3
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	b005      	add	sp, #20
 800cc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc5e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc60:	b085      	sub	sp, #20
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	000a      	movs	r2, r1
 800cc68:	1cfb      	adds	r3, r7, #3
 800cc6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc6c:	210f      	movs	r1, #15
 800cc6e:	187b      	adds	r3, r7, r1
 800cc70:	2200      	movs	r2, #0
 800cc72:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc74:	260e      	movs	r6, #14
 800cc76:	19bb      	adds	r3, r7, r6
 800cc78:	2200      	movs	r2, #0
 800cc7a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	23b0      	movs	r3, #176	; 0xb0
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	58d2      	ldr	r2, [r2, r3]
 800cc84:	000d      	movs	r5, r1
 800cc86:	187c      	adds	r4, r7, r1
 800cc88:	1cfb      	adds	r3, r7, #3
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	0019      	movs	r1, r3
 800cc8e:	0010      	movs	r0, r2
 800cc90:	f7f7 fcd4 	bl	800463c <HAL_PCD_EP_SetStall>
 800cc94:	0003      	movs	r3, r0
 800cc96:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc98:	19bc      	adds	r4, r7, r6
 800cc9a:	197b      	adds	r3, r7, r5
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	0018      	movs	r0, r3
 800cca0:	f000 f92f 	bl	800cf02 <USBD_Get_USB_Status>
 800cca4:	0003      	movs	r3, r0
 800cca6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cca8:	19bb      	adds	r3, r7, r6
 800ccaa:	781b      	ldrb	r3, [r3, #0]
}
 800ccac:	0018      	movs	r0, r3
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	b005      	add	sp, #20
 800ccb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ccb4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	000a      	movs	r2, r1
 800ccbe:	1cfb      	adds	r3, r7, #3
 800ccc0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc2:	210f      	movs	r1, #15
 800ccc4:	187b      	adds	r3, r7, r1
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccca:	260e      	movs	r6, #14
 800cccc:	19bb      	adds	r3, r7, r6
 800ccce:	2200      	movs	r2, #0
 800ccd0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	23b0      	movs	r3, #176	; 0xb0
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	58d2      	ldr	r2, [r2, r3]
 800ccda:	000d      	movs	r5, r1
 800ccdc:	187c      	adds	r4, r7, r1
 800ccde:	1cfb      	adds	r3, r7, #3
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	0019      	movs	r1, r3
 800cce4:	0010      	movs	r0, r2
 800cce6:	f7f7 fd05 	bl	80046f4 <HAL_PCD_EP_ClrStall>
 800ccea:	0003      	movs	r3, r0
 800ccec:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccee:	19bc      	adds	r4, r7, r6
 800ccf0:	197b      	adds	r3, r7, r5
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	0018      	movs	r0, r3
 800ccf6:	f000 f904 	bl	800cf02 <USBD_Get_USB_Status>
 800ccfa:	0003      	movs	r3, r0
 800ccfc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ccfe:	19bb      	adds	r3, r7, r6
 800cd00:	781b      	ldrb	r3, [r3, #0]
}
 800cd02:	0018      	movs	r0, r3
 800cd04:	46bd      	mov	sp, r7
 800cd06:	b005      	add	sp, #20
 800cd08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd0a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	000a      	movs	r2, r1
 800cd14:	1cfb      	adds	r3, r7, #3
 800cd16:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	23b0      	movs	r3, #176	; 0xb0
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	58d3      	ldr	r3, [r2, r3]
 800cd20:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd22:	1cfb      	adds	r3, r7, #3
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	b25b      	sxtb	r3, r3
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	da0d      	bge.n	800cd48 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd2c:	1cfb      	adds	r3, r7, #3
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	227f      	movs	r2, #127	; 0x7f
 800cd32:	4013      	ands	r3, r2
 800cd34:	68f9      	ldr	r1, [r7, #12]
 800cd36:	1c5a      	adds	r2, r3, #1
 800cd38:	0013      	movs	r3, r2
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	189b      	adds	r3, r3, r2
 800cd3e:	00db      	lsls	r3, r3, #3
 800cd40:	18cb      	adds	r3, r1, r3
 800cd42:	3302      	adds	r3, #2
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	e00d      	b.n	800cd64 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd48:	1cfb      	adds	r3, r7, #3
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	227f      	movs	r2, #127	; 0x7f
 800cd4e:	401a      	ands	r2, r3
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	23b5      	movs	r3, #181	; 0xb5
 800cd54:	0059      	lsls	r1, r3, #1
 800cd56:	0013      	movs	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	189b      	adds	r3, r3, r2
 800cd5c:	00db      	lsls	r3, r3, #3
 800cd5e:	18c3      	adds	r3, r0, r3
 800cd60:	185b      	adds	r3, r3, r1
 800cd62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd64:	0018      	movs	r0, r3
 800cd66:	46bd      	mov	sp, r7
 800cd68:	b004      	add	sp, #16
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	000a      	movs	r2, r1
 800cd76:	1cfb      	adds	r3, r7, #3
 800cd78:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd7a:	210f      	movs	r1, #15
 800cd7c:	187b      	adds	r3, r7, r1
 800cd7e:	2200      	movs	r2, #0
 800cd80:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd82:	260e      	movs	r6, #14
 800cd84:	19bb      	adds	r3, r7, r6
 800cd86:	2200      	movs	r2, #0
 800cd88:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	23b0      	movs	r3, #176	; 0xb0
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	58d2      	ldr	r2, [r2, r3]
 800cd92:	000d      	movs	r5, r1
 800cd94:	187c      	adds	r4, r7, r1
 800cd96:	1cfb      	adds	r3, r7, #3
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	0019      	movs	r1, r3
 800cd9c:	0010      	movs	r0, r2
 800cd9e:	f7f7 fab3 	bl	8004308 <HAL_PCD_SetAddress>
 800cda2:	0003      	movs	r3, r0
 800cda4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cda6:	19bc      	adds	r4, r7, r6
 800cda8:	197b      	adds	r3, r7, r5
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	0018      	movs	r0, r3
 800cdae:	f000 f8a8 	bl	800cf02 <USBD_Get_USB_Status>
 800cdb2:	0003      	movs	r3, r0
 800cdb4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cdb6:	19bb      	adds	r3, r7, r6
 800cdb8:	781b      	ldrb	r3, [r3, #0]
}
 800cdba:	0018      	movs	r0, r3
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	b005      	add	sp, #20
 800cdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cdc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cdc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdc4:	b087      	sub	sp, #28
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	60f8      	str	r0, [r7, #12]
 800cdca:	0008      	movs	r0, r1
 800cdcc:	607a      	str	r2, [r7, #4]
 800cdce:	0019      	movs	r1, r3
 800cdd0:	230b      	movs	r3, #11
 800cdd2:	18fb      	adds	r3, r7, r3
 800cdd4:	1c02      	adds	r2, r0, #0
 800cdd6:	701a      	strb	r2, [r3, #0]
 800cdd8:	2408      	movs	r4, #8
 800cdda:	193b      	adds	r3, r7, r4
 800cddc:	1c0a      	adds	r2, r1, #0
 800cdde:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cde0:	2117      	movs	r1, #23
 800cde2:	187b      	adds	r3, r7, r1
 800cde4:	2200      	movs	r2, #0
 800cde6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde8:	2516      	movs	r5, #22
 800cdea:	197b      	adds	r3, r7, r5
 800cdec:	2200      	movs	r2, #0
 800cdee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	23b0      	movs	r3, #176	; 0xb0
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	58d0      	ldr	r0, [r2, r3]
 800cdf8:	193b      	adds	r3, r7, r4
 800cdfa:	881d      	ldrh	r5, [r3, #0]
 800cdfc:	000e      	movs	r6, r1
 800cdfe:	187c      	adds	r4, r7, r1
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	230b      	movs	r3, #11
 800ce04:	18fb      	adds	r3, r7, r3
 800ce06:	7819      	ldrb	r1, [r3, #0]
 800ce08:	002b      	movs	r3, r5
 800ce0a:	f7f7 fbce 	bl	80045aa <HAL_PCD_EP_Transmit>
 800ce0e:	0003      	movs	r3, r0
 800ce10:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce12:	2516      	movs	r5, #22
 800ce14:	197c      	adds	r4, r7, r5
 800ce16:	19bb      	adds	r3, r7, r6
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	0018      	movs	r0, r3
 800ce1c:	f000 f871 	bl	800cf02 <USBD_Get_USB_Status>
 800ce20:	0003      	movs	r3, r0
 800ce22:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ce24:	197b      	adds	r3, r7, r5
 800ce26:	781b      	ldrb	r3, [r3, #0]
}
 800ce28:	0018      	movs	r0, r3
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	b007      	add	sp, #28
 800ce2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce32:	b087      	sub	sp, #28
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	0008      	movs	r0, r1
 800ce3a:	607a      	str	r2, [r7, #4]
 800ce3c:	0019      	movs	r1, r3
 800ce3e:	230b      	movs	r3, #11
 800ce40:	18fb      	adds	r3, r7, r3
 800ce42:	1c02      	adds	r2, r0, #0
 800ce44:	701a      	strb	r2, [r3, #0]
 800ce46:	2408      	movs	r4, #8
 800ce48:	193b      	adds	r3, r7, r4
 800ce4a:	1c0a      	adds	r2, r1, #0
 800ce4c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce4e:	2117      	movs	r1, #23
 800ce50:	187b      	adds	r3, r7, r1
 800ce52:	2200      	movs	r2, #0
 800ce54:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce56:	2516      	movs	r5, #22
 800ce58:	197b      	adds	r3, r7, r5
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	23b0      	movs	r3, #176	; 0xb0
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	58d0      	ldr	r0, [r2, r3]
 800ce66:	193b      	adds	r3, r7, r4
 800ce68:	881d      	ldrh	r5, [r3, #0]
 800ce6a:	000e      	movs	r6, r1
 800ce6c:	187c      	adds	r4, r7, r1
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	230b      	movs	r3, #11
 800ce72:	18fb      	adds	r3, r7, r3
 800ce74:	7819      	ldrb	r1, [r3, #0]
 800ce76:	002b      	movs	r3, r5
 800ce78:	f7f7 fb3a 	bl	80044f0 <HAL_PCD_EP_Receive>
 800ce7c:	0003      	movs	r3, r0
 800ce7e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce80:	2516      	movs	r5, #22
 800ce82:	197c      	adds	r4, r7, r5
 800ce84:	19bb      	adds	r3, r7, r6
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	0018      	movs	r0, r3
 800ce8a:	f000 f83a 	bl	800cf02 <USBD_Get_USB_Status>
 800ce8e:	0003      	movs	r3, r0
 800ce90:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ce92:	197b      	adds	r3, r7, r5
 800ce94:	781b      	ldrb	r3, [r3, #0]
}
 800ce96:	0018      	movs	r0, r3
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	b007      	add	sp, #28
 800ce9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b082      	sub	sp, #8
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	000a      	movs	r2, r1
 800cea8:	1cfb      	adds	r3, r7, #3
 800ceaa:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	23b0      	movs	r3, #176	; 0xb0
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	58d2      	ldr	r2, [r2, r3]
 800ceb4:	1cfb      	adds	r3, r7, #3
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	0019      	movs	r1, r3
 800ceba:	0010      	movs	r0, r2
 800cebc:	f7f7 fb5c 	bl	8004578 <HAL_PCD_EP_GetRxCount>
 800cec0:	0003      	movs	r3, r0
}
 800cec2:	0018      	movs	r0, r3
 800cec4:	46bd      	mov	sp, r7
 800cec6:	b002      	add	sp, #8
 800cec8:	bd80      	pop	{r7, pc}
	...

0800cecc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ced4:	4b02      	ldr	r3, [pc, #8]	; (800cee0 <USBD_static_malloc+0x14>)
}
 800ced6:	0018      	movs	r0, r3
 800ced8:	46bd      	mov	sp, r7
 800ceda:	b002      	add	sp, #8
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	46c0      	nop			; (mov r8, r8)
 800cee0:	20000268 	.word	0x20000268

0800cee4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]

}
 800ceec:	46c0      	nop			; (mov r8, r8)
 800ceee:	46bd      	mov	sp, r7
 800cef0:	b002      	add	sp, #8
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cef8:	f7f4 f9aa 	bl	8001250 <SystemClock_Config>
}
 800cefc:	46c0      	nop			; (mov r8, r8)
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b084      	sub	sp, #16
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	0002      	movs	r2, r0
 800cf0a:	1dfb      	adds	r3, r7, #7
 800cf0c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf0e:	230f      	movs	r3, #15
 800cf10:	18fb      	adds	r3, r7, r3
 800cf12:	2200      	movs	r2, #0
 800cf14:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800cf16:	1dfb      	adds	r3, r7, #7
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	2b03      	cmp	r3, #3
 800cf1c:	d017      	beq.n	800cf4e <USBD_Get_USB_Status+0x4c>
 800cf1e:	dc1b      	bgt.n	800cf58 <USBD_Get_USB_Status+0x56>
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d00f      	beq.n	800cf44 <USBD_Get_USB_Status+0x42>
 800cf24:	dc18      	bgt.n	800cf58 <USBD_Get_USB_Status+0x56>
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d002      	beq.n	800cf30 <USBD_Get_USB_Status+0x2e>
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d005      	beq.n	800cf3a <USBD_Get_USB_Status+0x38>
 800cf2e:	e013      	b.n	800cf58 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf30:	230f      	movs	r3, #15
 800cf32:	18fb      	adds	r3, r7, r3
 800cf34:	2200      	movs	r2, #0
 800cf36:	701a      	strb	r2, [r3, #0]
    break;
 800cf38:	e013      	b.n	800cf62 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf3a:	230f      	movs	r3, #15
 800cf3c:	18fb      	adds	r3, r7, r3
 800cf3e:	2202      	movs	r2, #2
 800cf40:	701a      	strb	r2, [r3, #0]
    break;
 800cf42:	e00e      	b.n	800cf62 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf44:	230f      	movs	r3, #15
 800cf46:	18fb      	adds	r3, r7, r3
 800cf48:	2201      	movs	r2, #1
 800cf4a:	701a      	strb	r2, [r3, #0]
    break;
 800cf4c:	e009      	b.n	800cf62 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf4e:	230f      	movs	r3, #15
 800cf50:	18fb      	adds	r3, r7, r3
 800cf52:	2202      	movs	r2, #2
 800cf54:	701a      	strb	r2, [r3, #0]
    break;
 800cf56:	e004      	b.n	800cf62 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800cf58:	230f      	movs	r3, #15
 800cf5a:	18fb      	adds	r3, r7, r3
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	701a      	strb	r2, [r3, #0]
    break;
 800cf60:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800cf62:	230f      	movs	r3, #15
 800cf64:	18fb      	adds	r3, r7, r3
 800cf66:	781b      	ldrb	r3, [r3, #0]
}
 800cf68:	0018      	movs	r0, r3
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	b004      	add	sp, #16
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <__errno>:
 800cf70:	4b01      	ldr	r3, [pc, #4]	; (800cf78 <__errno+0x8>)
 800cf72:	6818      	ldr	r0, [r3, #0]
 800cf74:	4770      	bx	lr
 800cf76:	46c0      	nop			; (mov r8, r8)
 800cf78:	2000017c 	.word	0x2000017c

0800cf7c <__libc_init_array>:
 800cf7c:	b570      	push	{r4, r5, r6, lr}
 800cf7e:	2600      	movs	r6, #0
 800cf80:	4d0c      	ldr	r5, [pc, #48]	; (800cfb4 <__libc_init_array+0x38>)
 800cf82:	4c0d      	ldr	r4, [pc, #52]	; (800cfb8 <__libc_init_array+0x3c>)
 800cf84:	1b64      	subs	r4, r4, r5
 800cf86:	10a4      	asrs	r4, r4, #2
 800cf88:	42a6      	cmp	r6, r4
 800cf8a:	d109      	bne.n	800cfa0 <__libc_init_array+0x24>
 800cf8c:	2600      	movs	r6, #0
 800cf8e:	f000 fc5b 	bl	800d848 <_init>
 800cf92:	4d0a      	ldr	r5, [pc, #40]	; (800cfbc <__libc_init_array+0x40>)
 800cf94:	4c0a      	ldr	r4, [pc, #40]	; (800cfc0 <__libc_init_array+0x44>)
 800cf96:	1b64      	subs	r4, r4, r5
 800cf98:	10a4      	asrs	r4, r4, #2
 800cf9a:	42a6      	cmp	r6, r4
 800cf9c:	d105      	bne.n	800cfaa <__libc_init_array+0x2e>
 800cf9e:	bd70      	pop	{r4, r5, r6, pc}
 800cfa0:	00b3      	lsls	r3, r6, #2
 800cfa2:	58eb      	ldr	r3, [r5, r3]
 800cfa4:	4798      	blx	r3
 800cfa6:	3601      	adds	r6, #1
 800cfa8:	e7ee      	b.n	800cf88 <__libc_init_array+0xc>
 800cfaa:	00b3      	lsls	r3, r6, #2
 800cfac:	58eb      	ldr	r3, [r5, r3]
 800cfae:	4798      	blx	r3
 800cfb0:	3601      	adds	r6, #1
 800cfb2:	e7f2      	b.n	800cf9a <__libc_init_array+0x1e>
 800cfb4:	0800dae4 	.word	0x0800dae4
 800cfb8:	0800dae4 	.word	0x0800dae4
 800cfbc:	0800dae4 	.word	0x0800dae4
 800cfc0:	0800dae8 	.word	0x0800dae8

0800cfc4 <malloc>:
 800cfc4:	b510      	push	{r4, lr}
 800cfc6:	4b03      	ldr	r3, [pc, #12]	; (800cfd4 <malloc+0x10>)
 800cfc8:	0001      	movs	r1, r0
 800cfca:	6818      	ldr	r0, [r3, #0]
 800cfcc:	f000 f86a 	bl	800d0a4 <_malloc_r>
 800cfd0:	bd10      	pop	{r4, pc}
 800cfd2:	46c0      	nop			; (mov r8, r8)
 800cfd4:	2000017c 	.word	0x2000017c

0800cfd8 <free>:
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	4b03      	ldr	r3, [pc, #12]	; (800cfe8 <free+0x10>)
 800cfdc:	0001      	movs	r1, r0
 800cfde:	6818      	ldr	r0, [r3, #0]
 800cfe0:	f000 f816 	bl	800d010 <_free_r>
 800cfe4:	bd10      	pop	{r4, pc}
 800cfe6:	46c0      	nop			; (mov r8, r8)
 800cfe8:	2000017c 	.word	0x2000017c

0800cfec <memcpy>:
 800cfec:	2300      	movs	r3, #0
 800cfee:	b510      	push	{r4, lr}
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d100      	bne.n	800cff6 <memcpy+0xa>
 800cff4:	bd10      	pop	{r4, pc}
 800cff6:	5ccc      	ldrb	r4, [r1, r3]
 800cff8:	54c4      	strb	r4, [r0, r3]
 800cffa:	3301      	adds	r3, #1
 800cffc:	e7f8      	b.n	800cff0 <memcpy+0x4>

0800cffe <memset>:
 800cffe:	0003      	movs	r3, r0
 800d000:	1882      	adds	r2, r0, r2
 800d002:	4293      	cmp	r3, r2
 800d004:	d100      	bne.n	800d008 <memset+0xa>
 800d006:	4770      	bx	lr
 800d008:	7019      	strb	r1, [r3, #0]
 800d00a:	3301      	adds	r3, #1
 800d00c:	e7f9      	b.n	800d002 <memset+0x4>
	...

0800d010 <_free_r>:
 800d010:	b570      	push	{r4, r5, r6, lr}
 800d012:	0005      	movs	r5, r0
 800d014:	2900      	cmp	r1, #0
 800d016:	d010      	beq.n	800d03a <_free_r+0x2a>
 800d018:	1f0c      	subs	r4, r1, #4
 800d01a:	6823      	ldr	r3, [r4, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	da00      	bge.n	800d022 <_free_r+0x12>
 800d020:	18e4      	adds	r4, r4, r3
 800d022:	0028      	movs	r0, r5
 800d024:	f000 f8ce 	bl	800d1c4 <__malloc_lock>
 800d028:	4a1d      	ldr	r2, [pc, #116]	; (800d0a0 <_free_r+0x90>)
 800d02a:	6813      	ldr	r3, [r2, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d105      	bne.n	800d03c <_free_r+0x2c>
 800d030:	6063      	str	r3, [r4, #4]
 800d032:	6014      	str	r4, [r2, #0]
 800d034:	0028      	movs	r0, r5
 800d036:	f000 f8cd 	bl	800d1d4 <__malloc_unlock>
 800d03a:	bd70      	pop	{r4, r5, r6, pc}
 800d03c:	42a3      	cmp	r3, r4
 800d03e:	d908      	bls.n	800d052 <_free_r+0x42>
 800d040:	6821      	ldr	r1, [r4, #0]
 800d042:	1860      	adds	r0, r4, r1
 800d044:	4283      	cmp	r3, r0
 800d046:	d1f3      	bne.n	800d030 <_free_r+0x20>
 800d048:	6818      	ldr	r0, [r3, #0]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	1841      	adds	r1, r0, r1
 800d04e:	6021      	str	r1, [r4, #0]
 800d050:	e7ee      	b.n	800d030 <_free_r+0x20>
 800d052:	001a      	movs	r2, r3
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <_free_r+0x4e>
 800d05a:	42a3      	cmp	r3, r4
 800d05c:	d9f9      	bls.n	800d052 <_free_r+0x42>
 800d05e:	6811      	ldr	r1, [r2, #0]
 800d060:	1850      	adds	r0, r2, r1
 800d062:	42a0      	cmp	r0, r4
 800d064:	d10b      	bne.n	800d07e <_free_r+0x6e>
 800d066:	6820      	ldr	r0, [r4, #0]
 800d068:	1809      	adds	r1, r1, r0
 800d06a:	1850      	adds	r0, r2, r1
 800d06c:	6011      	str	r1, [r2, #0]
 800d06e:	4283      	cmp	r3, r0
 800d070:	d1e0      	bne.n	800d034 <_free_r+0x24>
 800d072:	6818      	ldr	r0, [r3, #0]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	1841      	adds	r1, r0, r1
 800d078:	6011      	str	r1, [r2, #0]
 800d07a:	6053      	str	r3, [r2, #4]
 800d07c:	e7da      	b.n	800d034 <_free_r+0x24>
 800d07e:	42a0      	cmp	r0, r4
 800d080:	d902      	bls.n	800d088 <_free_r+0x78>
 800d082:	230c      	movs	r3, #12
 800d084:	602b      	str	r3, [r5, #0]
 800d086:	e7d5      	b.n	800d034 <_free_r+0x24>
 800d088:	6821      	ldr	r1, [r4, #0]
 800d08a:	1860      	adds	r0, r4, r1
 800d08c:	4283      	cmp	r3, r0
 800d08e:	d103      	bne.n	800d098 <_free_r+0x88>
 800d090:	6818      	ldr	r0, [r3, #0]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	1841      	adds	r1, r0, r1
 800d096:	6021      	str	r1, [r4, #0]
 800d098:	6063      	str	r3, [r4, #4]
 800d09a:	6054      	str	r4, [r2, #4]
 800d09c:	e7ca      	b.n	800d034 <_free_r+0x24>
 800d09e:	46c0      	nop			; (mov r8, r8)
 800d0a0:	20000488 	.word	0x20000488

0800d0a4 <_malloc_r>:
 800d0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a6:	2303      	movs	r3, #3
 800d0a8:	1ccd      	adds	r5, r1, #3
 800d0aa:	439d      	bics	r5, r3
 800d0ac:	3508      	adds	r5, #8
 800d0ae:	0006      	movs	r6, r0
 800d0b0:	2d0c      	cmp	r5, #12
 800d0b2:	d21f      	bcs.n	800d0f4 <_malloc_r+0x50>
 800d0b4:	250c      	movs	r5, #12
 800d0b6:	42a9      	cmp	r1, r5
 800d0b8:	d81e      	bhi.n	800d0f8 <_malloc_r+0x54>
 800d0ba:	0030      	movs	r0, r6
 800d0bc:	f000 f882 	bl	800d1c4 <__malloc_lock>
 800d0c0:	4925      	ldr	r1, [pc, #148]	; (800d158 <_malloc_r+0xb4>)
 800d0c2:	680a      	ldr	r2, [r1, #0]
 800d0c4:	0014      	movs	r4, r2
 800d0c6:	2c00      	cmp	r4, #0
 800d0c8:	d11a      	bne.n	800d100 <_malloc_r+0x5c>
 800d0ca:	4f24      	ldr	r7, [pc, #144]	; (800d15c <_malloc_r+0xb8>)
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d104      	bne.n	800d0dc <_malloc_r+0x38>
 800d0d2:	0021      	movs	r1, r4
 800d0d4:	0030      	movs	r0, r6
 800d0d6:	f000 f843 	bl	800d160 <_sbrk_r>
 800d0da:	6038      	str	r0, [r7, #0]
 800d0dc:	0029      	movs	r1, r5
 800d0de:	0030      	movs	r0, r6
 800d0e0:	f000 f83e 	bl	800d160 <_sbrk_r>
 800d0e4:	1c43      	adds	r3, r0, #1
 800d0e6:	d12b      	bne.n	800d140 <_malloc_r+0x9c>
 800d0e8:	230c      	movs	r3, #12
 800d0ea:	0030      	movs	r0, r6
 800d0ec:	6033      	str	r3, [r6, #0]
 800d0ee:	f000 f871 	bl	800d1d4 <__malloc_unlock>
 800d0f2:	e003      	b.n	800d0fc <_malloc_r+0x58>
 800d0f4:	2d00      	cmp	r5, #0
 800d0f6:	dade      	bge.n	800d0b6 <_malloc_r+0x12>
 800d0f8:	230c      	movs	r3, #12
 800d0fa:	6033      	str	r3, [r6, #0]
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d100:	6823      	ldr	r3, [r4, #0]
 800d102:	1b5b      	subs	r3, r3, r5
 800d104:	d419      	bmi.n	800d13a <_malloc_r+0x96>
 800d106:	2b0b      	cmp	r3, #11
 800d108:	d903      	bls.n	800d112 <_malloc_r+0x6e>
 800d10a:	6023      	str	r3, [r4, #0]
 800d10c:	18e4      	adds	r4, r4, r3
 800d10e:	6025      	str	r5, [r4, #0]
 800d110:	e003      	b.n	800d11a <_malloc_r+0x76>
 800d112:	6863      	ldr	r3, [r4, #4]
 800d114:	42a2      	cmp	r2, r4
 800d116:	d10e      	bne.n	800d136 <_malloc_r+0x92>
 800d118:	600b      	str	r3, [r1, #0]
 800d11a:	0030      	movs	r0, r6
 800d11c:	f000 f85a 	bl	800d1d4 <__malloc_unlock>
 800d120:	0020      	movs	r0, r4
 800d122:	2207      	movs	r2, #7
 800d124:	300b      	adds	r0, #11
 800d126:	1d23      	adds	r3, r4, #4
 800d128:	4390      	bics	r0, r2
 800d12a:	1ac2      	subs	r2, r0, r3
 800d12c:	4298      	cmp	r0, r3
 800d12e:	d0e6      	beq.n	800d0fe <_malloc_r+0x5a>
 800d130:	1a1b      	subs	r3, r3, r0
 800d132:	50a3      	str	r3, [r4, r2]
 800d134:	e7e3      	b.n	800d0fe <_malloc_r+0x5a>
 800d136:	6053      	str	r3, [r2, #4]
 800d138:	e7ef      	b.n	800d11a <_malloc_r+0x76>
 800d13a:	0022      	movs	r2, r4
 800d13c:	6864      	ldr	r4, [r4, #4]
 800d13e:	e7c2      	b.n	800d0c6 <_malloc_r+0x22>
 800d140:	2303      	movs	r3, #3
 800d142:	1cc4      	adds	r4, r0, #3
 800d144:	439c      	bics	r4, r3
 800d146:	42a0      	cmp	r0, r4
 800d148:	d0e1      	beq.n	800d10e <_malloc_r+0x6a>
 800d14a:	1a21      	subs	r1, r4, r0
 800d14c:	0030      	movs	r0, r6
 800d14e:	f000 f807 	bl	800d160 <_sbrk_r>
 800d152:	1c43      	adds	r3, r0, #1
 800d154:	d1db      	bne.n	800d10e <_malloc_r+0x6a>
 800d156:	e7c7      	b.n	800d0e8 <_malloc_r+0x44>
 800d158:	20000488 	.word	0x20000488
 800d15c:	2000048c 	.word	0x2000048c

0800d160 <_sbrk_r>:
 800d160:	2300      	movs	r3, #0
 800d162:	b570      	push	{r4, r5, r6, lr}
 800d164:	4d06      	ldr	r5, [pc, #24]	; (800d180 <_sbrk_r+0x20>)
 800d166:	0004      	movs	r4, r0
 800d168:	0008      	movs	r0, r1
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	f7f5 fa52 	bl	8002614 <_sbrk>
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	d103      	bne.n	800d17c <_sbrk_r+0x1c>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d000      	beq.n	800d17c <_sbrk_r+0x1c>
 800d17a:	6023      	str	r3, [r4, #0]
 800d17c:	bd70      	pop	{r4, r5, r6, pc}
 800d17e:	46c0      	nop			; (mov r8, r8)
 800d180:	2000162c 	.word	0x2000162c

0800d184 <siprintf>:
 800d184:	b40e      	push	{r1, r2, r3}
 800d186:	b500      	push	{lr}
 800d188:	490b      	ldr	r1, [pc, #44]	; (800d1b8 <siprintf+0x34>)
 800d18a:	b09c      	sub	sp, #112	; 0x70
 800d18c:	ab1d      	add	r3, sp, #116	; 0x74
 800d18e:	9002      	str	r0, [sp, #8]
 800d190:	9006      	str	r0, [sp, #24]
 800d192:	9107      	str	r1, [sp, #28]
 800d194:	9104      	str	r1, [sp, #16]
 800d196:	4809      	ldr	r0, [pc, #36]	; (800d1bc <siprintf+0x38>)
 800d198:	4909      	ldr	r1, [pc, #36]	; (800d1c0 <siprintf+0x3c>)
 800d19a:	cb04      	ldmia	r3!, {r2}
 800d19c:	9105      	str	r1, [sp, #20]
 800d19e:	6800      	ldr	r0, [r0, #0]
 800d1a0:	a902      	add	r1, sp, #8
 800d1a2:	9301      	str	r3, [sp, #4]
 800d1a4:	f000 f880 	bl	800d2a8 <_svfiprintf_r>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	9a02      	ldr	r2, [sp, #8]
 800d1ac:	7013      	strb	r3, [r2, #0]
 800d1ae:	b01c      	add	sp, #112	; 0x70
 800d1b0:	bc08      	pop	{r3}
 800d1b2:	b003      	add	sp, #12
 800d1b4:	4718      	bx	r3
 800d1b6:	46c0      	nop			; (mov r8, r8)
 800d1b8:	7fffffff 	.word	0x7fffffff
 800d1bc:	2000017c 	.word	0x2000017c
 800d1c0:	ffff0208 	.word	0xffff0208

0800d1c4 <__malloc_lock>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	4802      	ldr	r0, [pc, #8]	; (800d1d0 <__malloc_lock+0xc>)
 800d1c8:	f000 faf0 	bl	800d7ac <__retarget_lock_acquire_recursive>
 800d1cc:	bd10      	pop	{r4, pc}
 800d1ce:	46c0      	nop			; (mov r8, r8)
 800d1d0:	20001634 	.word	0x20001634

0800d1d4 <__malloc_unlock>:
 800d1d4:	b510      	push	{r4, lr}
 800d1d6:	4802      	ldr	r0, [pc, #8]	; (800d1e0 <__malloc_unlock+0xc>)
 800d1d8:	f000 fae9 	bl	800d7ae <__retarget_lock_release_recursive>
 800d1dc:	bd10      	pop	{r4, pc}
 800d1de:	46c0      	nop			; (mov r8, r8)
 800d1e0:	20001634 	.word	0x20001634

0800d1e4 <__ssputs_r>:
 800d1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1e6:	688e      	ldr	r6, [r1, #8]
 800d1e8:	b085      	sub	sp, #20
 800d1ea:	0007      	movs	r7, r0
 800d1ec:	000c      	movs	r4, r1
 800d1ee:	9203      	str	r2, [sp, #12]
 800d1f0:	9301      	str	r3, [sp, #4]
 800d1f2:	429e      	cmp	r6, r3
 800d1f4:	d83c      	bhi.n	800d270 <__ssputs_r+0x8c>
 800d1f6:	2390      	movs	r3, #144	; 0x90
 800d1f8:	898a      	ldrh	r2, [r1, #12]
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	421a      	tst	r2, r3
 800d1fe:	d034      	beq.n	800d26a <__ssputs_r+0x86>
 800d200:	2503      	movs	r5, #3
 800d202:	6909      	ldr	r1, [r1, #16]
 800d204:	6823      	ldr	r3, [r4, #0]
 800d206:	1a5b      	subs	r3, r3, r1
 800d208:	9302      	str	r3, [sp, #8]
 800d20a:	6963      	ldr	r3, [r4, #20]
 800d20c:	9802      	ldr	r0, [sp, #8]
 800d20e:	435d      	muls	r5, r3
 800d210:	0feb      	lsrs	r3, r5, #31
 800d212:	195d      	adds	r5, r3, r5
 800d214:	9b01      	ldr	r3, [sp, #4]
 800d216:	106d      	asrs	r5, r5, #1
 800d218:	3301      	adds	r3, #1
 800d21a:	181b      	adds	r3, r3, r0
 800d21c:	42ab      	cmp	r3, r5
 800d21e:	d900      	bls.n	800d222 <__ssputs_r+0x3e>
 800d220:	001d      	movs	r5, r3
 800d222:	0553      	lsls	r3, r2, #21
 800d224:	d532      	bpl.n	800d28c <__ssputs_r+0xa8>
 800d226:	0029      	movs	r1, r5
 800d228:	0038      	movs	r0, r7
 800d22a:	f7ff ff3b 	bl	800d0a4 <_malloc_r>
 800d22e:	1e06      	subs	r6, r0, #0
 800d230:	d109      	bne.n	800d246 <__ssputs_r+0x62>
 800d232:	230c      	movs	r3, #12
 800d234:	603b      	str	r3, [r7, #0]
 800d236:	2340      	movs	r3, #64	; 0x40
 800d238:	2001      	movs	r0, #1
 800d23a:	89a2      	ldrh	r2, [r4, #12]
 800d23c:	4240      	negs	r0, r0
 800d23e:	4313      	orrs	r3, r2
 800d240:	81a3      	strh	r3, [r4, #12]
 800d242:	b005      	add	sp, #20
 800d244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d246:	9a02      	ldr	r2, [sp, #8]
 800d248:	6921      	ldr	r1, [r4, #16]
 800d24a:	f7ff fecf 	bl	800cfec <memcpy>
 800d24e:	89a3      	ldrh	r3, [r4, #12]
 800d250:	4a14      	ldr	r2, [pc, #80]	; (800d2a4 <__ssputs_r+0xc0>)
 800d252:	401a      	ands	r2, r3
 800d254:	2380      	movs	r3, #128	; 0x80
 800d256:	4313      	orrs	r3, r2
 800d258:	81a3      	strh	r3, [r4, #12]
 800d25a:	9b02      	ldr	r3, [sp, #8]
 800d25c:	6126      	str	r6, [r4, #16]
 800d25e:	18f6      	adds	r6, r6, r3
 800d260:	6026      	str	r6, [r4, #0]
 800d262:	6165      	str	r5, [r4, #20]
 800d264:	9e01      	ldr	r6, [sp, #4]
 800d266:	1aed      	subs	r5, r5, r3
 800d268:	60a5      	str	r5, [r4, #8]
 800d26a:	9b01      	ldr	r3, [sp, #4]
 800d26c:	429e      	cmp	r6, r3
 800d26e:	d900      	bls.n	800d272 <__ssputs_r+0x8e>
 800d270:	9e01      	ldr	r6, [sp, #4]
 800d272:	0032      	movs	r2, r6
 800d274:	9903      	ldr	r1, [sp, #12]
 800d276:	6820      	ldr	r0, [r4, #0]
 800d278:	f000 faa5 	bl	800d7c6 <memmove>
 800d27c:	68a3      	ldr	r3, [r4, #8]
 800d27e:	2000      	movs	r0, #0
 800d280:	1b9b      	subs	r3, r3, r6
 800d282:	60a3      	str	r3, [r4, #8]
 800d284:	6823      	ldr	r3, [r4, #0]
 800d286:	199e      	adds	r6, r3, r6
 800d288:	6026      	str	r6, [r4, #0]
 800d28a:	e7da      	b.n	800d242 <__ssputs_r+0x5e>
 800d28c:	002a      	movs	r2, r5
 800d28e:	0038      	movs	r0, r7
 800d290:	f000 faac 	bl	800d7ec <_realloc_r>
 800d294:	1e06      	subs	r6, r0, #0
 800d296:	d1e0      	bne.n	800d25a <__ssputs_r+0x76>
 800d298:	0038      	movs	r0, r7
 800d29a:	6921      	ldr	r1, [r4, #16]
 800d29c:	f7ff feb8 	bl	800d010 <_free_r>
 800d2a0:	e7c7      	b.n	800d232 <__ssputs_r+0x4e>
 800d2a2:	46c0      	nop			; (mov r8, r8)
 800d2a4:	fffffb7f 	.word	0xfffffb7f

0800d2a8 <_svfiprintf_r>:
 800d2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2aa:	b0a1      	sub	sp, #132	; 0x84
 800d2ac:	9003      	str	r0, [sp, #12]
 800d2ae:	001d      	movs	r5, r3
 800d2b0:	898b      	ldrh	r3, [r1, #12]
 800d2b2:	000f      	movs	r7, r1
 800d2b4:	0016      	movs	r6, r2
 800d2b6:	061b      	lsls	r3, r3, #24
 800d2b8:	d511      	bpl.n	800d2de <_svfiprintf_r+0x36>
 800d2ba:	690b      	ldr	r3, [r1, #16]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d10e      	bne.n	800d2de <_svfiprintf_r+0x36>
 800d2c0:	2140      	movs	r1, #64	; 0x40
 800d2c2:	f7ff feef 	bl	800d0a4 <_malloc_r>
 800d2c6:	6038      	str	r0, [r7, #0]
 800d2c8:	6138      	str	r0, [r7, #16]
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d105      	bne.n	800d2da <_svfiprintf_r+0x32>
 800d2ce:	230c      	movs	r3, #12
 800d2d0:	9a03      	ldr	r2, [sp, #12]
 800d2d2:	3801      	subs	r0, #1
 800d2d4:	6013      	str	r3, [r2, #0]
 800d2d6:	b021      	add	sp, #132	; 0x84
 800d2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2da:	2340      	movs	r3, #64	; 0x40
 800d2dc:	617b      	str	r3, [r7, #20]
 800d2de:	2300      	movs	r3, #0
 800d2e0:	ac08      	add	r4, sp, #32
 800d2e2:	6163      	str	r3, [r4, #20]
 800d2e4:	3320      	adds	r3, #32
 800d2e6:	7663      	strb	r3, [r4, #25]
 800d2e8:	3310      	adds	r3, #16
 800d2ea:	76a3      	strb	r3, [r4, #26]
 800d2ec:	9507      	str	r5, [sp, #28]
 800d2ee:	0035      	movs	r5, r6
 800d2f0:	782b      	ldrb	r3, [r5, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d001      	beq.n	800d2fa <_svfiprintf_r+0x52>
 800d2f6:	2b25      	cmp	r3, #37	; 0x25
 800d2f8:	d147      	bne.n	800d38a <_svfiprintf_r+0xe2>
 800d2fa:	1bab      	subs	r3, r5, r6
 800d2fc:	9305      	str	r3, [sp, #20]
 800d2fe:	42b5      	cmp	r5, r6
 800d300:	d00c      	beq.n	800d31c <_svfiprintf_r+0x74>
 800d302:	0032      	movs	r2, r6
 800d304:	0039      	movs	r1, r7
 800d306:	9803      	ldr	r0, [sp, #12]
 800d308:	f7ff ff6c 	bl	800d1e4 <__ssputs_r>
 800d30c:	1c43      	adds	r3, r0, #1
 800d30e:	d100      	bne.n	800d312 <_svfiprintf_r+0x6a>
 800d310:	e0ae      	b.n	800d470 <_svfiprintf_r+0x1c8>
 800d312:	6962      	ldr	r2, [r4, #20]
 800d314:	9b05      	ldr	r3, [sp, #20]
 800d316:	4694      	mov	ip, r2
 800d318:	4463      	add	r3, ip
 800d31a:	6163      	str	r3, [r4, #20]
 800d31c:	782b      	ldrb	r3, [r5, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d100      	bne.n	800d324 <_svfiprintf_r+0x7c>
 800d322:	e0a5      	b.n	800d470 <_svfiprintf_r+0x1c8>
 800d324:	2201      	movs	r2, #1
 800d326:	2300      	movs	r3, #0
 800d328:	4252      	negs	r2, r2
 800d32a:	6062      	str	r2, [r4, #4]
 800d32c:	a904      	add	r1, sp, #16
 800d32e:	3254      	adds	r2, #84	; 0x54
 800d330:	1852      	adds	r2, r2, r1
 800d332:	1c6e      	adds	r6, r5, #1
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	60e3      	str	r3, [r4, #12]
 800d338:	60a3      	str	r3, [r4, #8]
 800d33a:	7013      	strb	r3, [r2, #0]
 800d33c:	65a3      	str	r3, [r4, #88]	; 0x58
 800d33e:	2205      	movs	r2, #5
 800d340:	7831      	ldrb	r1, [r6, #0]
 800d342:	4854      	ldr	r0, [pc, #336]	; (800d494 <_svfiprintf_r+0x1ec>)
 800d344:	f000 fa34 	bl	800d7b0 <memchr>
 800d348:	1c75      	adds	r5, r6, #1
 800d34a:	2800      	cmp	r0, #0
 800d34c:	d11f      	bne.n	800d38e <_svfiprintf_r+0xe6>
 800d34e:	6822      	ldr	r2, [r4, #0]
 800d350:	06d3      	lsls	r3, r2, #27
 800d352:	d504      	bpl.n	800d35e <_svfiprintf_r+0xb6>
 800d354:	2353      	movs	r3, #83	; 0x53
 800d356:	a904      	add	r1, sp, #16
 800d358:	185b      	adds	r3, r3, r1
 800d35a:	2120      	movs	r1, #32
 800d35c:	7019      	strb	r1, [r3, #0]
 800d35e:	0713      	lsls	r3, r2, #28
 800d360:	d504      	bpl.n	800d36c <_svfiprintf_r+0xc4>
 800d362:	2353      	movs	r3, #83	; 0x53
 800d364:	a904      	add	r1, sp, #16
 800d366:	185b      	adds	r3, r3, r1
 800d368:	212b      	movs	r1, #43	; 0x2b
 800d36a:	7019      	strb	r1, [r3, #0]
 800d36c:	7833      	ldrb	r3, [r6, #0]
 800d36e:	2b2a      	cmp	r3, #42	; 0x2a
 800d370:	d016      	beq.n	800d3a0 <_svfiprintf_r+0xf8>
 800d372:	0035      	movs	r5, r6
 800d374:	2100      	movs	r1, #0
 800d376:	200a      	movs	r0, #10
 800d378:	68e3      	ldr	r3, [r4, #12]
 800d37a:	782a      	ldrb	r2, [r5, #0]
 800d37c:	1c6e      	adds	r6, r5, #1
 800d37e:	3a30      	subs	r2, #48	; 0x30
 800d380:	2a09      	cmp	r2, #9
 800d382:	d94e      	bls.n	800d422 <_svfiprintf_r+0x17a>
 800d384:	2900      	cmp	r1, #0
 800d386:	d111      	bne.n	800d3ac <_svfiprintf_r+0x104>
 800d388:	e017      	b.n	800d3ba <_svfiprintf_r+0x112>
 800d38a:	3501      	adds	r5, #1
 800d38c:	e7b0      	b.n	800d2f0 <_svfiprintf_r+0x48>
 800d38e:	4b41      	ldr	r3, [pc, #260]	; (800d494 <_svfiprintf_r+0x1ec>)
 800d390:	6822      	ldr	r2, [r4, #0]
 800d392:	1ac0      	subs	r0, r0, r3
 800d394:	2301      	movs	r3, #1
 800d396:	4083      	lsls	r3, r0
 800d398:	4313      	orrs	r3, r2
 800d39a:	002e      	movs	r6, r5
 800d39c:	6023      	str	r3, [r4, #0]
 800d39e:	e7ce      	b.n	800d33e <_svfiprintf_r+0x96>
 800d3a0:	9b07      	ldr	r3, [sp, #28]
 800d3a2:	1d19      	adds	r1, r3, #4
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	9107      	str	r1, [sp, #28]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	db01      	blt.n	800d3b0 <_svfiprintf_r+0x108>
 800d3ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3ae:	e004      	b.n	800d3ba <_svfiprintf_r+0x112>
 800d3b0:	425b      	negs	r3, r3
 800d3b2:	60e3      	str	r3, [r4, #12]
 800d3b4:	2302      	movs	r3, #2
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	782b      	ldrb	r3, [r5, #0]
 800d3bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d3be:	d10a      	bne.n	800d3d6 <_svfiprintf_r+0x12e>
 800d3c0:	786b      	ldrb	r3, [r5, #1]
 800d3c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3c4:	d135      	bne.n	800d432 <_svfiprintf_r+0x18a>
 800d3c6:	9b07      	ldr	r3, [sp, #28]
 800d3c8:	3502      	adds	r5, #2
 800d3ca:	1d1a      	adds	r2, r3, #4
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	9207      	str	r2, [sp, #28]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	db2b      	blt.n	800d42c <_svfiprintf_r+0x184>
 800d3d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d3d6:	4e30      	ldr	r6, [pc, #192]	; (800d498 <_svfiprintf_r+0x1f0>)
 800d3d8:	2203      	movs	r2, #3
 800d3da:	0030      	movs	r0, r6
 800d3dc:	7829      	ldrb	r1, [r5, #0]
 800d3de:	f000 f9e7 	bl	800d7b0 <memchr>
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	d006      	beq.n	800d3f4 <_svfiprintf_r+0x14c>
 800d3e6:	2340      	movs	r3, #64	; 0x40
 800d3e8:	1b80      	subs	r0, r0, r6
 800d3ea:	4083      	lsls	r3, r0
 800d3ec:	6822      	ldr	r2, [r4, #0]
 800d3ee:	3501      	adds	r5, #1
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	6023      	str	r3, [r4, #0]
 800d3f4:	7829      	ldrb	r1, [r5, #0]
 800d3f6:	2206      	movs	r2, #6
 800d3f8:	4828      	ldr	r0, [pc, #160]	; (800d49c <_svfiprintf_r+0x1f4>)
 800d3fa:	1c6e      	adds	r6, r5, #1
 800d3fc:	7621      	strb	r1, [r4, #24]
 800d3fe:	f000 f9d7 	bl	800d7b0 <memchr>
 800d402:	2800      	cmp	r0, #0
 800d404:	d03c      	beq.n	800d480 <_svfiprintf_r+0x1d8>
 800d406:	4b26      	ldr	r3, [pc, #152]	; (800d4a0 <_svfiprintf_r+0x1f8>)
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d125      	bne.n	800d458 <_svfiprintf_r+0x1b0>
 800d40c:	2207      	movs	r2, #7
 800d40e:	9b07      	ldr	r3, [sp, #28]
 800d410:	3307      	adds	r3, #7
 800d412:	4393      	bics	r3, r2
 800d414:	3308      	adds	r3, #8
 800d416:	9307      	str	r3, [sp, #28]
 800d418:	6963      	ldr	r3, [r4, #20]
 800d41a:	9a04      	ldr	r2, [sp, #16]
 800d41c:	189b      	adds	r3, r3, r2
 800d41e:	6163      	str	r3, [r4, #20]
 800d420:	e765      	b.n	800d2ee <_svfiprintf_r+0x46>
 800d422:	4343      	muls	r3, r0
 800d424:	0035      	movs	r5, r6
 800d426:	2101      	movs	r1, #1
 800d428:	189b      	adds	r3, r3, r2
 800d42a:	e7a6      	b.n	800d37a <_svfiprintf_r+0xd2>
 800d42c:	2301      	movs	r3, #1
 800d42e:	425b      	negs	r3, r3
 800d430:	e7d0      	b.n	800d3d4 <_svfiprintf_r+0x12c>
 800d432:	2300      	movs	r3, #0
 800d434:	200a      	movs	r0, #10
 800d436:	001a      	movs	r2, r3
 800d438:	3501      	adds	r5, #1
 800d43a:	6063      	str	r3, [r4, #4]
 800d43c:	7829      	ldrb	r1, [r5, #0]
 800d43e:	1c6e      	adds	r6, r5, #1
 800d440:	3930      	subs	r1, #48	; 0x30
 800d442:	2909      	cmp	r1, #9
 800d444:	d903      	bls.n	800d44e <_svfiprintf_r+0x1a6>
 800d446:	2b00      	cmp	r3, #0
 800d448:	d0c5      	beq.n	800d3d6 <_svfiprintf_r+0x12e>
 800d44a:	9209      	str	r2, [sp, #36]	; 0x24
 800d44c:	e7c3      	b.n	800d3d6 <_svfiprintf_r+0x12e>
 800d44e:	4342      	muls	r2, r0
 800d450:	0035      	movs	r5, r6
 800d452:	2301      	movs	r3, #1
 800d454:	1852      	adds	r2, r2, r1
 800d456:	e7f1      	b.n	800d43c <_svfiprintf_r+0x194>
 800d458:	ab07      	add	r3, sp, #28
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	003a      	movs	r2, r7
 800d45e:	0021      	movs	r1, r4
 800d460:	4b10      	ldr	r3, [pc, #64]	; (800d4a4 <_svfiprintf_r+0x1fc>)
 800d462:	9803      	ldr	r0, [sp, #12]
 800d464:	e000      	b.n	800d468 <_svfiprintf_r+0x1c0>
 800d466:	bf00      	nop
 800d468:	9004      	str	r0, [sp, #16]
 800d46a:	9b04      	ldr	r3, [sp, #16]
 800d46c:	3301      	adds	r3, #1
 800d46e:	d1d3      	bne.n	800d418 <_svfiprintf_r+0x170>
 800d470:	89bb      	ldrh	r3, [r7, #12]
 800d472:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d474:	065b      	lsls	r3, r3, #25
 800d476:	d400      	bmi.n	800d47a <_svfiprintf_r+0x1d2>
 800d478:	e72d      	b.n	800d2d6 <_svfiprintf_r+0x2e>
 800d47a:	2001      	movs	r0, #1
 800d47c:	4240      	negs	r0, r0
 800d47e:	e72a      	b.n	800d2d6 <_svfiprintf_r+0x2e>
 800d480:	ab07      	add	r3, sp, #28
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	003a      	movs	r2, r7
 800d486:	0021      	movs	r1, r4
 800d488:	4b06      	ldr	r3, [pc, #24]	; (800d4a4 <_svfiprintf_r+0x1fc>)
 800d48a:	9803      	ldr	r0, [sp, #12]
 800d48c:	f000 f87c 	bl	800d588 <_printf_i>
 800d490:	e7ea      	b.n	800d468 <_svfiprintf_r+0x1c0>
 800d492:	46c0      	nop			; (mov r8, r8)
 800d494:	0800dab0 	.word	0x0800dab0
 800d498:	0800dab6 	.word	0x0800dab6
 800d49c:	0800daba 	.word	0x0800daba
 800d4a0:	00000000 	.word	0x00000000
 800d4a4:	0800d1e5 	.word	0x0800d1e5

0800d4a8 <_printf_common>:
 800d4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4aa:	0015      	movs	r5, r2
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	688a      	ldr	r2, [r1, #8]
 800d4b0:	690b      	ldr	r3, [r1, #16]
 800d4b2:	000c      	movs	r4, r1
 800d4b4:	9000      	str	r0, [sp, #0]
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	da00      	bge.n	800d4bc <_printf_common+0x14>
 800d4ba:	0013      	movs	r3, r2
 800d4bc:	0022      	movs	r2, r4
 800d4be:	602b      	str	r3, [r5, #0]
 800d4c0:	3243      	adds	r2, #67	; 0x43
 800d4c2:	7812      	ldrb	r2, [r2, #0]
 800d4c4:	2a00      	cmp	r2, #0
 800d4c6:	d001      	beq.n	800d4cc <_printf_common+0x24>
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	602b      	str	r3, [r5, #0]
 800d4cc:	6823      	ldr	r3, [r4, #0]
 800d4ce:	069b      	lsls	r3, r3, #26
 800d4d0:	d502      	bpl.n	800d4d8 <_printf_common+0x30>
 800d4d2:	682b      	ldr	r3, [r5, #0]
 800d4d4:	3302      	adds	r3, #2
 800d4d6:	602b      	str	r3, [r5, #0]
 800d4d8:	6822      	ldr	r2, [r4, #0]
 800d4da:	2306      	movs	r3, #6
 800d4dc:	0017      	movs	r7, r2
 800d4de:	401f      	ands	r7, r3
 800d4e0:	421a      	tst	r2, r3
 800d4e2:	d027      	beq.n	800d534 <_printf_common+0x8c>
 800d4e4:	0023      	movs	r3, r4
 800d4e6:	3343      	adds	r3, #67	; 0x43
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	1e5a      	subs	r2, r3, #1
 800d4ec:	4193      	sbcs	r3, r2
 800d4ee:	6822      	ldr	r2, [r4, #0]
 800d4f0:	0692      	lsls	r2, r2, #26
 800d4f2:	d430      	bmi.n	800d556 <_printf_common+0xae>
 800d4f4:	0022      	movs	r2, r4
 800d4f6:	9901      	ldr	r1, [sp, #4]
 800d4f8:	9800      	ldr	r0, [sp, #0]
 800d4fa:	9e08      	ldr	r6, [sp, #32]
 800d4fc:	3243      	adds	r2, #67	; 0x43
 800d4fe:	47b0      	blx	r6
 800d500:	1c43      	adds	r3, r0, #1
 800d502:	d025      	beq.n	800d550 <_printf_common+0xa8>
 800d504:	2306      	movs	r3, #6
 800d506:	6820      	ldr	r0, [r4, #0]
 800d508:	682a      	ldr	r2, [r5, #0]
 800d50a:	68e1      	ldr	r1, [r4, #12]
 800d50c:	2500      	movs	r5, #0
 800d50e:	4003      	ands	r3, r0
 800d510:	2b04      	cmp	r3, #4
 800d512:	d103      	bne.n	800d51c <_printf_common+0x74>
 800d514:	1a8d      	subs	r5, r1, r2
 800d516:	43eb      	mvns	r3, r5
 800d518:	17db      	asrs	r3, r3, #31
 800d51a:	401d      	ands	r5, r3
 800d51c:	68a3      	ldr	r3, [r4, #8]
 800d51e:	6922      	ldr	r2, [r4, #16]
 800d520:	4293      	cmp	r3, r2
 800d522:	dd01      	ble.n	800d528 <_printf_common+0x80>
 800d524:	1a9b      	subs	r3, r3, r2
 800d526:	18ed      	adds	r5, r5, r3
 800d528:	2700      	movs	r7, #0
 800d52a:	42bd      	cmp	r5, r7
 800d52c:	d120      	bne.n	800d570 <_printf_common+0xc8>
 800d52e:	2000      	movs	r0, #0
 800d530:	e010      	b.n	800d554 <_printf_common+0xac>
 800d532:	3701      	adds	r7, #1
 800d534:	68e3      	ldr	r3, [r4, #12]
 800d536:	682a      	ldr	r2, [r5, #0]
 800d538:	1a9b      	subs	r3, r3, r2
 800d53a:	42bb      	cmp	r3, r7
 800d53c:	ddd2      	ble.n	800d4e4 <_printf_common+0x3c>
 800d53e:	0022      	movs	r2, r4
 800d540:	2301      	movs	r3, #1
 800d542:	9901      	ldr	r1, [sp, #4]
 800d544:	9800      	ldr	r0, [sp, #0]
 800d546:	9e08      	ldr	r6, [sp, #32]
 800d548:	3219      	adds	r2, #25
 800d54a:	47b0      	blx	r6
 800d54c:	1c43      	adds	r3, r0, #1
 800d54e:	d1f0      	bne.n	800d532 <_printf_common+0x8a>
 800d550:	2001      	movs	r0, #1
 800d552:	4240      	negs	r0, r0
 800d554:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d556:	2030      	movs	r0, #48	; 0x30
 800d558:	18e1      	adds	r1, r4, r3
 800d55a:	3143      	adds	r1, #67	; 0x43
 800d55c:	7008      	strb	r0, [r1, #0]
 800d55e:	0021      	movs	r1, r4
 800d560:	1c5a      	adds	r2, r3, #1
 800d562:	3145      	adds	r1, #69	; 0x45
 800d564:	7809      	ldrb	r1, [r1, #0]
 800d566:	18a2      	adds	r2, r4, r2
 800d568:	3243      	adds	r2, #67	; 0x43
 800d56a:	3302      	adds	r3, #2
 800d56c:	7011      	strb	r1, [r2, #0]
 800d56e:	e7c1      	b.n	800d4f4 <_printf_common+0x4c>
 800d570:	0022      	movs	r2, r4
 800d572:	2301      	movs	r3, #1
 800d574:	9901      	ldr	r1, [sp, #4]
 800d576:	9800      	ldr	r0, [sp, #0]
 800d578:	9e08      	ldr	r6, [sp, #32]
 800d57a:	321a      	adds	r2, #26
 800d57c:	47b0      	blx	r6
 800d57e:	1c43      	adds	r3, r0, #1
 800d580:	d0e6      	beq.n	800d550 <_printf_common+0xa8>
 800d582:	3701      	adds	r7, #1
 800d584:	e7d1      	b.n	800d52a <_printf_common+0x82>
	...

0800d588 <_printf_i>:
 800d588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d58a:	b08b      	sub	sp, #44	; 0x2c
 800d58c:	9206      	str	r2, [sp, #24]
 800d58e:	000a      	movs	r2, r1
 800d590:	3243      	adds	r2, #67	; 0x43
 800d592:	9307      	str	r3, [sp, #28]
 800d594:	9005      	str	r0, [sp, #20]
 800d596:	9204      	str	r2, [sp, #16]
 800d598:	7e0a      	ldrb	r2, [r1, #24]
 800d59a:	000c      	movs	r4, r1
 800d59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d59e:	2a78      	cmp	r2, #120	; 0x78
 800d5a0:	d806      	bhi.n	800d5b0 <_printf_i+0x28>
 800d5a2:	2a62      	cmp	r2, #98	; 0x62
 800d5a4:	d808      	bhi.n	800d5b8 <_printf_i+0x30>
 800d5a6:	2a00      	cmp	r2, #0
 800d5a8:	d100      	bne.n	800d5ac <_printf_i+0x24>
 800d5aa:	e0c0      	b.n	800d72e <_printf_i+0x1a6>
 800d5ac:	2a58      	cmp	r2, #88	; 0x58
 800d5ae:	d052      	beq.n	800d656 <_printf_i+0xce>
 800d5b0:	0026      	movs	r6, r4
 800d5b2:	3642      	adds	r6, #66	; 0x42
 800d5b4:	7032      	strb	r2, [r6, #0]
 800d5b6:	e022      	b.n	800d5fe <_printf_i+0x76>
 800d5b8:	0010      	movs	r0, r2
 800d5ba:	3863      	subs	r0, #99	; 0x63
 800d5bc:	2815      	cmp	r0, #21
 800d5be:	d8f7      	bhi.n	800d5b0 <_printf_i+0x28>
 800d5c0:	f7f2 fdaa 	bl	8000118 <__gnu_thumb1_case_shi>
 800d5c4:	001f0016 	.word	0x001f0016
 800d5c8:	fff6fff6 	.word	0xfff6fff6
 800d5cc:	fff6fff6 	.word	0xfff6fff6
 800d5d0:	fff6001f 	.word	0xfff6001f
 800d5d4:	fff6fff6 	.word	0xfff6fff6
 800d5d8:	00a8fff6 	.word	0x00a8fff6
 800d5dc:	009a0036 	.word	0x009a0036
 800d5e0:	fff6fff6 	.word	0xfff6fff6
 800d5e4:	fff600b9 	.word	0xfff600b9
 800d5e8:	fff60036 	.word	0xfff60036
 800d5ec:	009efff6 	.word	0x009efff6
 800d5f0:	0026      	movs	r6, r4
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	3642      	adds	r6, #66	; 0x42
 800d5f6:	1d11      	adds	r1, r2, #4
 800d5f8:	6019      	str	r1, [r3, #0]
 800d5fa:	6813      	ldr	r3, [r2, #0]
 800d5fc:	7033      	strb	r3, [r6, #0]
 800d5fe:	2301      	movs	r3, #1
 800d600:	e0a7      	b.n	800d752 <_printf_i+0x1ca>
 800d602:	6808      	ldr	r0, [r1, #0]
 800d604:	6819      	ldr	r1, [r3, #0]
 800d606:	1d0a      	adds	r2, r1, #4
 800d608:	0605      	lsls	r5, r0, #24
 800d60a:	d50b      	bpl.n	800d624 <_printf_i+0x9c>
 800d60c:	680d      	ldr	r5, [r1, #0]
 800d60e:	601a      	str	r2, [r3, #0]
 800d610:	2d00      	cmp	r5, #0
 800d612:	da03      	bge.n	800d61c <_printf_i+0x94>
 800d614:	232d      	movs	r3, #45	; 0x2d
 800d616:	9a04      	ldr	r2, [sp, #16]
 800d618:	426d      	negs	r5, r5
 800d61a:	7013      	strb	r3, [r2, #0]
 800d61c:	4b61      	ldr	r3, [pc, #388]	; (800d7a4 <_printf_i+0x21c>)
 800d61e:	270a      	movs	r7, #10
 800d620:	9303      	str	r3, [sp, #12]
 800d622:	e032      	b.n	800d68a <_printf_i+0x102>
 800d624:	680d      	ldr	r5, [r1, #0]
 800d626:	601a      	str	r2, [r3, #0]
 800d628:	0641      	lsls	r1, r0, #25
 800d62a:	d5f1      	bpl.n	800d610 <_printf_i+0x88>
 800d62c:	b22d      	sxth	r5, r5
 800d62e:	e7ef      	b.n	800d610 <_printf_i+0x88>
 800d630:	680d      	ldr	r5, [r1, #0]
 800d632:	6819      	ldr	r1, [r3, #0]
 800d634:	1d08      	adds	r0, r1, #4
 800d636:	6018      	str	r0, [r3, #0]
 800d638:	062e      	lsls	r6, r5, #24
 800d63a:	d501      	bpl.n	800d640 <_printf_i+0xb8>
 800d63c:	680d      	ldr	r5, [r1, #0]
 800d63e:	e003      	b.n	800d648 <_printf_i+0xc0>
 800d640:	066d      	lsls	r5, r5, #25
 800d642:	d5fb      	bpl.n	800d63c <_printf_i+0xb4>
 800d644:	680d      	ldr	r5, [r1, #0]
 800d646:	b2ad      	uxth	r5, r5
 800d648:	4b56      	ldr	r3, [pc, #344]	; (800d7a4 <_printf_i+0x21c>)
 800d64a:	270a      	movs	r7, #10
 800d64c:	9303      	str	r3, [sp, #12]
 800d64e:	2a6f      	cmp	r2, #111	; 0x6f
 800d650:	d117      	bne.n	800d682 <_printf_i+0xfa>
 800d652:	2708      	movs	r7, #8
 800d654:	e015      	b.n	800d682 <_printf_i+0xfa>
 800d656:	3145      	adds	r1, #69	; 0x45
 800d658:	700a      	strb	r2, [r1, #0]
 800d65a:	4a52      	ldr	r2, [pc, #328]	; (800d7a4 <_printf_i+0x21c>)
 800d65c:	9203      	str	r2, [sp, #12]
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	6821      	ldr	r1, [r4, #0]
 800d662:	ca20      	ldmia	r2!, {r5}
 800d664:	601a      	str	r2, [r3, #0]
 800d666:	0608      	lsls	r0, r1, #24
 800d668:	d550      	bpl.n	800d70c <_printf_i+0x184>
 800d66a:	07cb      	lsls	r3, r1, #31
 800d66c:	d502      	bpl.n	800d674 <_printf_i+0xec>
 800d66e:	2320      	movs	r3, #32
 800d670:	4319      	orrs	r1, r3
 800d672:	6021      	str	r1, [r4, #0]
 800d674:	2710      	movs	r7, #16
 800d676:	2d00      	cmp	r5, #0
 800d678:	d103      	bne.n	800d682 <_printf_i+0xfa>
 800d67a:	2320      	movs	r3, #32
 800d67c:	6822      	ldr	r2, [r4, #0]
 800d67e:	439a      	bics	r2, r3
 800d680:	6022      	str	r2, [r4, #0]
 800d682:	0023      	movs	r3, r4
 800d684:	2200      	movs	r2, #0
 800d686:	3343      	adds	r3, #67	; 0x43
 800d688:	701a      	strb	r2, [r3, #0]
 800d68a:	6863      	ldr	r3, [r4, #4]
 800d68c:	60a3      	str	r3, [r4, #8]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	db03      	blt.n	800d69a <_printf_i+0x112>
 800d692:	2204      	movs	r2, #4
 800d694:	6821      	ldr	r1, [r4, #0]
 800d696:	4391      	bics	r1, r2
 800d698:	6021      	str	r1, [r4, #0]
 800d69a:	2d00      	cmp	r5, #0
 800d69c:	d102      	bne.n	800d6a4 <_printf_i+0x11c>
 800d69e:	9e04      	ldr	r6, [sp, #16]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00c      	beq.n	800d6be <_printf_i+0x136>
 800d6a4:	9e04      	ldr	r6, [sp, #16]
 800d6a6:	0028      	movs	r0, r5
 800d6a8:	0039      	movs	r1, r7
 800d6aa:	f7f2 fdc5 	bl	8000238 <__aeabi_uidivmod>
 800d6ae:	9b03      	ldr	r3, [sp, #12]
 800d6b0:	3e01      	subs	r6, #1
 800d6b2:	5c5b      	ldrb	r3, [r3, r1]
 800d6b4:	7033      	strb	r3, [r6, #0]
 800d6b6:	002b      	movs	r3, r5
 800d6b8:	0005      	movs	r5, r0
 800d6ba:	429f      	cmp	r7, r3
 800d6bc:	d9f3      	bls.n	800d6a6 <_printf_i+0x11e>
 800d6be:	2f08      	cmp	r7, #8
 800d6c0:	d109      	bne.n	800d6d6 <_printf_i+0x14e>
 800d6c2:	6823      	ldr	r3, [r4, #0]
 800d6c4:	07db      	lsls	r3, r3, #31
 800d6c6:	d506      	bpl.n	800d6d6 <_printf_i+0x14e>
 800d6c8:	6863      	ldr	r3, [r4, #4]
 800d6ca:	6922      	ldr	r2, [r4, #16]
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	dc02      	bgt.n	800d6d6 <_printf_i+0x14e>
 800d6d0:	2330      	movs	r3, #48	; 0x30
 800d6d2:	3e01      	subs	r6, #1
 800d6d4:	7033      	strb	r3, [r6, #0]
 800d6d6:	9b04      	ldr	r3, [sp, #16]
 800d6d8:	1b9b      	subs	r3, r3, r6
 800d6da:	6123      	str	r3, [r4, #16]
 800d6dc:	9b07      	ldr	r3, [sp, #28]
 800d6de:	0021      	movs	r1, r4
 800d6e0:	9300      	str	r3, [sp, #0]
 800d6e2:	9805      	ldr	r0, [sp, #20]
 800d6e4:	9b06      	ldr	r3, [sp, #24]
 800d6e6:	aa09      	add	r2, sp, #36	; 0x24
 800d6e8:	f7ff fede 	bl	800d4a8 <_printf_common>
 800d6ec:	1c43      	adds	r3, r0, #1
 800d6ee:	d135      	bne.n	800d75c <_printf_i+0x1d4>
 800d6f0:	2001      	movs	r0, #1
 800d6f2:	4240      	negs	r0, r0
 800d6f4:	b00b      	add	sp, #44	; 0x2c
 800d6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6f8:	2220      	movs	r2, #32
 800d6fa:	6809      	ldr	r1, [r1, #0]
 800d6fc:	430a      	orrs	r2, r1
 800d6fe:	6022      	str	r2, [r4, #0]
 800d700:	0022      	movs	r2, r4
 800d702:	2178      	movs	r1, #120	; 0x78
 800d704:	3245      	adds	r2, #69	; 0x45
 800d706:	7011      	strb	r1, [r2, #0]
 800d708:	4a27      	ldr	r2, [pc, #156]	; (800d7a8 <_printf_i+0x220>)
 800d70a:	e7a7      	b.n	800d65c <_printf_i+0xd4>
 800d70c:	0648      	lsls	r0, r1, #25
 800d70e:	d5ac      	bpl.n	800d66a <_printf_i+0xe2>
 800d710:	b2ad      	uxth	r5, r5
 800d712:	e7aa      	b.n	800d66a <_printf_i+0xe2>
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	680d      	ldr	r5, [r1, #0]
 800d718:	1d10      	adds	r0, r2, #4
 800d71a:	6949      	ldr	r1, [r1, #20]
 800d71c:	6018      	str	r0, [r3, #0]
 800d71e:	6813      	ldr	r3, [r2, #0]
 800d720:	062e      	lsls	r6, r5, #24
 800d722:	d501      	bpl.n	800d728 <_printf_i+0x1a0>
 800d724:	6019      	str	r1, [r3, #0]
 800d726:	e002      	b.n	800d72e <_printf_i+0x1a6>
 800d728:	066d      	lsls	r5, r5, #25
 800d72a:	d5fb      	bpl.n	800d724 <_printf_i+0x19c>
 800d72c:	8019      	strh	r1, [r3, #0]
 800d72e:	2300      	movs	r3, #0
 800d730:	9e04      	ldr	r6, [sp, #16]
 800d732:	6123      	str	r3, [r4, #16]
 800d734:	e7d2      	b.n	800d6dc <_printf_i+0x154>
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	1d11      	adds	r1, r2, #4
 800d73a:	6019      	str	r1, [r3, #0]
 800d73c:	6816      	ldr	r6, [r2, #0]
 800d73e:	2100      	movs	r1, #0
 800d740:	0030      	movs	r0, r6
 800d742:	6862      	ldr	r2, [r4, #4]
 800d744:	f000 f834 	bl	800d7b0 <memchr>
 800d748:	2800      	cmp	r0, #0
 800d74a:	d001      	beq.n	800d750 <_printf_i+0x1c8>
 800d74c:	1b80      	subs	r0, r0, r6
 800d74e:	6060      	str	r0, [r4, #4]
 800d750:	6863      	ldr	r3, [r4, #4]
 800d752:	6123      	str	r3, [r4, #16]
 800d754:	2300      	movs	r3, #0
 800d756:	9a04      	ldr	r2, [sp, #16]
 800d758:	7013      	strb	r3, [r2, #0]
 800d75a:	e7bf      	b.n	800d6dc <_printf_i+0x154>
 800d75c:	6923      	ldr	r3, [r4, #16]
 800d75e:	0032      	movs	r2, r6
 800d760:	9906      	ldr	r1, [sp, #24]
 800d762:	9805      	ldr	r0, [sp, #20]
 800d764:	9d07      	ldr	r5, [sp, #28]
 800d766:	47a8      	blx	r5
 800d768:	1c43      	adds	r3, r0, #1
 800d76a:	d0c1      	beq.n	800d6f0 <_printf_i+0x168>
 800d76c:	6823      	ldr	r3, [r4, #0]
 800d76e:	079b      	lsls	r3, r3, #30
 800d770:	d415      	bmi.n	800d79e <_printf_i+0x216>
 800d772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d774:	68e0      	ldr	r0, [r4, #12]
 800d776:	4298      	cmp	r0, r3
 800d778:	dabc      	bge.n	800d6f4 <_printf_i+0x16c>
 800d77a:	0018      	movs	r0, r3
 800d77c:	e7ba      	b.n	800d6f4 <_printf_i+0x16c>
 800d77e:	0022      	movs	r2, r4
 800d780:	2301      	movs	r3, #1
 800d782:	9906      	ldr	r1, [sp, #24]
 800d784:	9805      	ldr	r0, [sp, #20]
 800d786:	9e07      	ldr	r6, [sp, #28]
 800d788:	3219      	adds	r2, #25
 800d78a:	47b0      	blx	r6
 800d78c:	1c43      	adds	r3, r0, #1
 800d78e:	d0af      	beq.n	800d6f0 <_printf_i+0x168>
 800d790:	3501      	adds	r5, #1
 800d792:	68e3      	ldr	r3, [r4, #12]
 800d794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d796:	1a9b      	subs	r3, r3, r2
 800d798:	42ab      	cmp	r3, r5
 800d79a:	dcf0      	bgt.n	800d77e <_printf_i+0x1f6>
 800d79c:	e7e9      	b.n	800d772 <_printf_i+0x1ea>
 800d79e:	2500      	movs	r5, #0
 800d7a0:	e7f7      	b.n	800d792 <_printf_i+0x20a>
 800d7a2:	46c0      	nop			; (mov r8, r8)
 800d7a4:	0800dac1 	.word	0x0800dac1
 800d7a8:	0800dad2 	.word	0x0800dad2

0800d7ac <__retarget_lock_acquire_recursive>:
 800d7ac:	4770      	bx	lr

0800d7ae <__retarget_lock_release_recursive>:
 800d7ae:	4770      	bx	lr

0800d7b0 <memchr>:
 800d7b0:	b2c9      	uxtb	r1, r1
 800d7b2:	1882      	adds	r2, r0, r2
 800d7b4:	4290      	cmp	r0, r2
 800d7b6:	d101      	bne.n	800d7bc <memchr+0xc>
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	4770      	bx	lr
 800d7bc:	7803      	ldrb	r3, [r0, #0]
 800d7be:	428b      	cmp	r3, r1
 800d7c0:	d0fb      	beq.n	800d7ba <memchr+0xa>
 800d7c2:	3001      	adds	r0, #1
 800d7c4:	e7f6      	b.n	800d7b4 <memchr+0x4>

0800d7c6 <memmove>:
 800d7c6:	b510      	push	{r4, lr}
 800d7c8:	4288      	cmp	r0, r1
 800d7ca:	d902      	bls.n	800d7d2 <memmove+0xc>
 800d7cc:	188b      	adds	r3, r1, r2
 800d7ce:	4298      	cmp	r0, r3
 800d7d0:	d303      	bcc.n	800d7da <memmove+0x14>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e007      	b.n	800d7e6 <memmove+0x20>
 800d7d6:	5c8b      	ldrb	r3, [r1, r2]
 800d7d8:	5483      	strb	r3, [r0, r2]
 800d7da:	3a01      	subs	r2, #1
 800d7dc:	d2fb      	bcs.n	800d7d6 <memmove+0x10>
 800d7de:	bd10      	pop	{r4, pc}
 800d7e0:	5ccc      	ldrb	r4, [r1, r3]
 800d7e2:	54c4      	strb	r4, [r0, r3]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d1fa      	bne.n	800d7e0 <memmove+0x1a>
 800d7ea:	e7f8      	b.n	800d7de <memmove+0x18>

0800d7ec <_realloc_r>:
 800d7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ee:	0007      	movs	r7, r0
 800d7f0:	000d      	movs	r5, r1
 800d7f2:	0016      	movs	r6, r2
 800d7f4:	2900      	cmp	r1, #0
 800d7f6:	d105      	bne.n	800d804 <_realloc_r+0x18>
 800d7f8:	0011      	movs	r1, r2
 800d7fa:	f7ff fc53 	bl	800d0a4 <_malloc_r>
 800d7fe:	0004      	movs	r4, r0
 800d800:	0020      	movs	r0, r4
 800d802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d804:	2a00      	cmp	r2, #0
 800d806:	d103      	bne.n	800d810 <_realloc_r+0x24>
 800d808:	f7ff fc02 	bl	800d010 <_free_r>
 800d80c:	0034      	movs	r4, r6
 800d80e:	e7f7      	b.n	800d800 <_realloc_r+0x14>
 800d810:	f000 f812 	bl	800d838 <_malloc_usable_size_r>
 800d814:	002c      	movs	r4, r5
 800d816:	42b0      	cmp	r0, r6
 800d818:	d2f2      	bcs.n	800d800 <_realloc_r+0x14>
 800d81a:	0031      	movs	r1, r6
 800d81c:	0038      	movs	r0, r7
 800d81e:	f7ff fc41 	bl	800d0a4 <_malloc_r>
 800d822:	1e04      	subs	r4, r0, #0
 800d824:	d0ec      	beq.n	800d800 <_realloc_r+0x14>
 800d826:	0029      	movs	r1, r5
 800d828:	0032      	movs	r2, r6
 800d82a:	f7ff fbdf 	bl	800cfec <memcpy>
 800d82e:	0029      	movs	r1, r5
 800d830:	0038      	movs	r0, r7
 800d832:	f7ff fbed 	bl	800d010 <_free_r>
 800d836:	e7e3      	b.n	800d800 <_realloc_r+0x14>

0800d838 <_malloc_usable_size_r>:
 800d838:	1f0b      	subs	r3, r1, #4
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	1f18      	subs	r0, r3, #4
 800d83e:	2b00      	cmp	r3, #0
 800d840:	da01      	bge.n	800d846 <_malloc_usable_size_r+0xe>
 800d842:	580b      	ldr	r3, [r1, r0]
 800d844:	18c0      	adds	r0, r0, r3
 800d846:	4770      	bx	lr

0800d848 <_init>:
 800d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84a:	46c0      	nop			; (mov r8, r8)
 800d84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84e:	bc08      	pop	{r3}
 800d850:	469e      	mov	lr, r3
 800d852:	4770      	bx	lr

0800d854 <_fini>:
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	46c0      	nop			; (mov r8, r8)
 800d858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d85a:	bc08      	pop	{r3}
 800d85c:	469e      	mov	lr, r3
 800d85e:	4770      	bx	lr
