
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800bab8  0800bab8  0001bab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcd0  0800bcd0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bcd0  0800bcd0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bcd0  0800bcd0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcd0  0800bcd0  0001bcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcd4  0800bcd4  0001bcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bcd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d8  200001e0  0800beb8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015b8  0800beb8  000215b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028907  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b34  00000000  00000000  00048b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  0004d648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  0004ed20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f783  00000000  00000000  00050230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebc7  00000000  00000000  0006f9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a40d2  00000000  00000000  0008e57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013264c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005540  00000000  00000000  001326a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800baa0 	.word	0x0800baa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800baa0 	.word	0x0800baa0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d033      	beq.n	8000494 <setColour+0x7c>
 800042c:	dc49      	bgt.n	80004c2 <setColour+0xaa>
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <setColour+0x20>
 8000432:	2b01      	cmp	r3, #1
 8000434:	d017      	beq.n	8000466 <setColour+0x4e>
 8000436:	e044      	b.n	80004c2 <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	482e      	ldr	r0, [pc, #184]	; (80004f8 <setColour+0xe0>)
 800043e:	2201      	movs	r2, #1
 8000440:	0019      	movs	r1, r3
 8000442:	f002 fa26 	bl	8002892 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	0219      	lsls	r1, r3, #8
 800044a:	2390      	movs	r3, #144	; 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f002 fa1e 	bl	8002892 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4827      	ldr	r0, [pc, #156]	; (80004f8 <setColour+0xe0>)
 800045c:	2200      	movs	r2, #0
 800045e:	0019      	movs	r1, r3
 8000460:	f002 fa17 	bl	8002892 <HAL_GPIO_WritePin>
		break;
 8000464:	e044      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4823      	ldr	r0, [pc, #140]	; (80004f8 <setColour+0xe0>)
 800046c:	2200      	movs	r2, #0
 800046e:	0019      	movs	r1, r3
 8000470:	f002 fa0f 	bl	8002892 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	0219      	lsls	r1, r3, #8
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2200      	movs	r2, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f002 fa07 	bl	8002892 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	481b      	ldr	r0, [pc, #108]	; (80004f8 <setColour+0xe0>)
 800048a:	2201      	movs	r2, #1
 800048c:	0019      	movs	r1, r3
 800048e:	f002 fa00 	bl	8002892 <HAL_GPIO_WritePin>
		break;
 8000492:	e02d      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4817      	ldr	r0, [pc, #92]	; (80004f8 <setColour+0xe0>)
 800049a:	2200      	movs	r2, #0
 800049c:	0019      	movs	r1, r3
 800049e:	f002 f9f8 	bl	8002892 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	0219      	lsls	r1, r3, #8
 80004a6:	2390      	movs	r3, #144	; 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	2201      	movs	r2, #1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 f9f0 	bl	8002892 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004b2:	2380      	movs	r3, #128	; 0x80
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	4810      	ldr	r0, [pc, #64]	; (80004f8 <setColour+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	0019      	movs	r1, r3
 80004bc:	f002 f9e9 	bl	8002892 <HAL_GPIO_WritePin>
		break;
 80004c0:	e016      	b.n	80004f0 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <setColour+0xe0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	0019      	movs	r1, r3
 80004cc:	f002 f9e1 	bl	8002892 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	0219      	lsls	r1, r3, #8
 80004d4:	2390      	movs	r3, #144	; 0x90
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2200      	movs	r2, #0
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 f9d9 	bl	8002892 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <setColour+0xe0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0019      	movs	r1, r3
 80004ea:	f002 f9d2 	bl	8002892 <HAL_GPIO_WritePin>
		break;
 80004ee:	46c0      	nop			; (mov r8, r8)
	}
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	48000400 	.word	0x48000400

080004fc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	0002      	movs	r2, r0
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	881a      	ldrh	r2, [r3, #0]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	429a      	cmp	r2, r3
 8000512:	d104      	bne.n	800051e <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.butt0_int = 1;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_GPIO_EXTI_Callback+0x40>)
 8000516:	781a      	ldrb	r2, [r3, #0]
 8000518:	2110      	movs	r1, #16
 800051a:	430a      	orrs	r2, r1
 800051c:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	429a      	cmp	r2, r3
 8000528:	d104      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.butt1_int = 1;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_GPIO_EXTI_Callback+0x40>)
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	430a      	orrs	r2, r1
 8000532:	701a      	strb	r2, [r3, #0]
	}
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000590 	.word	0x20000590

08000540 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800054c:	429a      	cmp	r2, r3
 800054e:	d104      	bne.n	800055a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.ten_ms = 1;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	2101      	movs	r1, #1
 8000556:	430a      	orrs	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
	}
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	20000548 	.word	0x20000548
 8000568:	20000590 	.word	0x20000590

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f001 fae6 	bl	8001b40 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 8000574:	2064      	movs	r0, #100	; 0x64
 8000576:	f000 ff92 	bl	800149e <createBuffer>
 800057a:	0002      	movs	r2, r0
 800057c:	4b23      	ldr	r3, [pc, #140]	; (800060c <main+0xa0>)
 800057e:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 ff8c 	bl	800149e <createBuffer>
 8000586:	0002      	movs	r2, r0
 8000588:	4b21      	ldr	r3, [pc, #132]	; (8000610 <main+0xa4>)
 800058a:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 800058c:	23fa      	movs	r3, #250	; 0xfa
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	0018      	movs	r0, r3
 8000592:	f000 ff84 	bl	800149e <createBuffer>
 8000596:	0002      	movs	r2, r0
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <main+0xa8>)
 800059a:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 800059c:	23fa      	movs	r3, #250	; 0xfa
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 ff7c 	bl	800149e <createBuffer>
 80005a6:	0002      	movs	r2, r0
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <main+0xac>)
 80005aa:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f83c 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 faa4 	bl	8000afc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005b4:	f00a f8a2 	bl	800a6fc <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80005b8:	f000 fa82 	bl	8000ac0 <MX_DMA_Init>
  MX_ADC_Init();
 80005bc:	f000 f8a0 	bl	8000700 <MX_ADC_Init>
  MX_SPI1_Init();
 80005c0:	f000 f9bc 	bl	800093c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 fa4c 	bl	8000a60 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80005c8:	f000 f9fe 	bl	80009c8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);
  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <main+0xb0>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f004 ff2e 	bl	8005430 <HAL_TIM_Base_Start_IT>

  flags.longBeep = 1;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <main+0xb4>)
 80005d6:	785a      	ldrb	r2, [r3, #1]
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	4249      	negs	r1, r1
 80005dc:	430a      	orrs	r2, r1
 80005de:	705a      	strb	r2, [r3, #1]
  testPhase = WAITING;
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <main+0xb8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.ten_ms)	// 10 ms
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <main+0xb4>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0f8      	beq.n	80005e6 <main+0x7a>
	  {
		  clkHandler();
 80005f4:	f000 fb6e 	bl	8000cd4 <clkHandler>
		  buttonDebounce();
 80005f8:	f000 fc16 	bl	8000e28 <buttonDebounce>
		  comHandler();
 80005fc:	f000 fc90 	bl	8000f20 <comHandler>
		  UI_Handler();
 8000600:	f000 fe08 	bl	8001214 <UI_Handler>
		  testHandler();
 8000604:	f001 fa44 	bl	8001a90 <testHandler>
	  if(flags.ten_ms)	// 10 ms
 8000608:	e7ed      	b.n	80005e6 <main+0x7a>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	2000044c 	.word	0x2000044c
 8000610:	20000454 	.word	0x20000454
 8000614:	200010b0 	.word	0x200010b0
 8000618:	200004e0 	.word	0x200004e0
 800061c:	20000548 	.word	0x20000548
 8000620:	20000590 	.word	0x20000590
 8000624:	20000218 	.word	0x20000218

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b099      	sub	sp, #100	; 0x64
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	242c      	movs	r4, #44	; 0x2c
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0018      	movs	r0, r3
 8000634:	2334      	movs	r3, #52	; 0x34
 8000636:	001a      	movs	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f00a fe03 	bl	800b244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063e:	231c      	movs	r3, #28
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	0018      	movs	r0, r3
 8000644:	2310      	movs	r3, #16
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f00a fdfb 	bl	800b244 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800064e:	003b      	movs	r3, r7
 8000650:	0018      	movs	r0, r3
 8000652:	231c      	movs	r3, #28
 8000654:	001a      	movs	r2, r3
 8000656:	2100      	movs	r1, #0
 8000658:	f00a fdf4 	bl	800b244 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800065c:	0021      	movs	r1, r4
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2232      	movs	r2, #50	; 0x32
 8000662:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2201      	movs	r2, #1
 8000668:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2201      	movs	r2, #1
 800066e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2201      	movs	r2, #1
 8000674:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2210      	movs	r2, #16
 800067a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2210      	movs	r2, #16
 8000680:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2202      	movs	r2, #2
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	0212      	lsls	r2, r2, #8
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	0352      	lsls	r2, r2, #13
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f003 ffbd 	bl	8004620 <HAL_RCC_OscConfig>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006aa:	f000 fef3 	bl	8001494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	211c      	movs	r1, #28
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2207      	movs	r2, #7
 80006b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2202      	movs	r2, #2
 80006ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2101      	movs	r1, #1
 80006cc:	0018      	movs	r0, r3
 80006ce:	f004 fb2d 	bl	8004d2c <HAL_RCC_ClockConfig>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006d6:	f000 fedd 	bl	8001494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006da:	003b      	movs	r3, r7
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0292      	lsls	r2, r2, #10
 80006e0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e8:	003b      	movs	r3, r7
 80006ea:	0018      	movs	r0, r3
 80006ec:	f004 fc9a 	bl	8005024 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006f4:	f000 fece 	bl	8001494 <Error_Handler>
  }
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b019      	add	sp, #100	; 0x64
 80006fe:	bd90      	pop	{r4, r7, pc}

08000700 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	0018      	movs	r0, r3
 800070a:	230c      	movs	r3, #12
 800070c:	001a      	movs	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	f00a fd98 	bl	800b244 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000714:	4b87      	ldr	r3, [pc, #540]	; (8000934 <MX_ADC_Init+0x234>)
 8000716:	4a88      	ldr	r2, [pc, #544]	; (8000938 <MX_ADC_Init+0x238>)
 8000718:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800071a:	4b86      	ldr	r3, [pc, #536]	; (8000934 <MX_ADC_Init+0x234>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000720:	4b84      	ldr	r3, [pc, #528]	; (8000934 <MX_ADC_Init+0x234>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000726:	4b83      	ldr	r3, [pc, #524]	; (8000934 <MX_ADC_Init+0x234>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800072c:	4b81      	ldr	r3, [pc, #516]	; (8000934 <MX_ADC_Init+0x234>)
 800072e:	2201      	movs	r2, #1
 8000730:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000732:	4b80      	ldr	r3, [pc, #512]	; (8000934 <MX_ADC_Init+0x234>)
 8000734:	2204      	movs	r2, #4
 8000736:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000738:	4b7e      	ldr	r3, [pc, #504]	; (8000934 <MX_ADC_Init+0x234>)
 800073a:	2200      	movs	r2, #0
 800073c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800073e:	4b7d      	ldr	r3, [pc, #500]	; (8000934 <MX_ADC_Init+0x234>)
 8000740:	2200      	movs	r2, #0
 8000742:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000744:	4b7b      	ldr	r3, [pc, #492]	; (8000934 <MX_ADC_Init+0x234>)
 8000746:	2200      	movs	r2, #0
 8000748:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800074a:	4b7a      	ldr	r3, [pc, #488]	; (8000934 <MX_ADC_Init+0x234>)
 800074c:	2200      	movs	r2, #0
 800074e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b78      	ldr	r3, [pc, #480]	; (8000934 <MX_ADC_Init+0x234>)
 8000752:	22c2      	movs	r2, #194	; 0xc2
 8000754:	32ff      	adds	r2, #255	; 0xff
 8000756:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000758:	4b76      	ldr	r3, [pc, #472]	; (8000934 <MX_ADC_Init+0x234>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800075e:	4b75      	ldr	r3, [pc, #468]	; (8000934 <MX_ADC_Init+0x234>)
 8000760:	2224      	movs	r2, #36	; 0x24
 8000762:	2100      	movs	r1, #0
 8000764:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000766:	4b73      	ldr	r3, [pc, #460]	; (8000934 <MX_ADC_Init+0x234>)
 8000768:	2201      	movs	r2, #1
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800076c:	4b71      	ldr	r3, [pc, #452]	; (8000934 <MX_ADC_Init+0x234>)
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fa4a 	bl	8001c08 <HAL_ADC_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000778:	f000 fe8c 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	0152      	lsls	r2, r2, #5
 8000788:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	0552      	lsls	r2, r2, #21
 8000790:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000792:	1d3a      	adds	r2, r7, #4
 8000794:	4b67      	ldr	r3, [pc, #412]	; (8000934 <MX_ADC_Init+0x234>)
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f001 fb75 	bl	8001e88 <HAL_ADC_ConfigChannel>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80007a2:	f000 fe77 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2201      	movs	r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007ac:	1d3a      	adds	r2, r7, #4
 80007ae:	4b61      	ldr	r3, [pc, #388]	; (8000934 <MX_ADC_Init+0x234>)
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 fb68 	bl	8001e88 <HAL_ADC_ConfigChannel>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80007bc:	f000 fe6a 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2202      	movs	r2, #2
 80007c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	4b5a      	ldr	r3, [pc, #360]	; (8000934 <MX_ADC_Init+0x234>)
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fb5b 	bl	8001e88 <HAL_ADC_ConfigChannel>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80007d6:	f000 fe5d 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2203      	movs	r2, #3
 80007de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007e0:	1d3a      	adds	r2, r7, #4
 80007e2:	4b54      	ldr	r3, [pc, #336]	; (8000934 <MX_ADC_Init+0x234>)
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 fb4e 	bl	8001e88 <HAL_ADC_ConfigChannel>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80007f0:	f000 fe50 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2204      	movs	r2, #4
 80007f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007fa:	1d3a      	adds	r2, r7, #4
 80007fc:	4b4d      	ldr	r3, [pc, #308]	; (8000934 <MX_ADC_Init+0x234>)
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fb41 	bl	8001e88 <HAL_ADC_ConfigChannel>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 800080a:	f000 fe43 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2205      	movs	r2, #5
 8000812:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000814:	1d3a      	adds	r2, r7, #4
 8000816:	4b47      	ldr	r3, [pc, #284]	; (8000934 <MX_ADC_Init+0x234>)
 8000818:	0011      	movs	r1, r2
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fb34 	bl	8001e88 <HAL_ADC_ConfigChannel>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000824:	f000 fe36 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2206      	movs	r2, #6
 800082c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	4b40      	ldr	r3, [pc, #256]	; (8000934 <MX_ADC_Init+0x234>)
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f001 fb27 	bl	8001e88 <HAL_ADC_ConfigChannel>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800083e:	f000 fe29 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000848:	1d3a      	adds	r2, r7, #4
 800084a:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <MX_ADC_Init+0x234>)
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f001 fb1a 	bl	8001e88 <HAL_ADC_ConfigChannel>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000858:	f000 fe1c 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2208      	movs	r2, #8
 8000860:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000862:	1d3a      	adds	r2, r7, #4
 8000864:	4b33      	ldr	r3, [pc, #204]	; (8000934 <MX_ADC_Init+0x234>)
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fb0d 	bl	8001e88 <HAL_ADC_ConfigChannel>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 8000872:	f000 fe0f 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2209      	movs	r2, #9
 800087a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800087c:	1d3a      	adds	r2, r7, #4
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <MX_ADC_Init+0x234>)
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fb00 	bl	8001e88 <HAL_ADC_ConfigChannel>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 800088c:	f000 fe02 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	220a      	movs	r2, #10
 8000894:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000896:	1d3a      	adds	r2, r7, #4
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_ADC_Init+0x234>)
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f001 faf3 	bl	8001e88 <HAL_ADC_ConfigChannel>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 80008a6:	f000 fdf5 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	220b      	movs	r2, #11
 80008ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008b0:	1d3a      	adds	r2, r7, #4
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_ADC_Init+0x234>)
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fae6 	bl	8001e88 <HAL_ADC_ConfigChannel>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 80008c0:	f000 fde8 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	220c      	movs	r2, #12
 80008c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ca:	1d3a      	adds	r2, r7, #4
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_ADC_Init+0x234>)
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fad9 	bl	8001e88 <HAL_ADC_ConfigChannel>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 80008da:	f000 fddb 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	220d      	movs	r2, #13
 80008e2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008e4:	1d3a      	adds	r2, r7, #4
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_ADC_Init+0x234>)
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 facc 	bl	8001e88 <HAL_ADC_ConfigChannel>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 80008f4:	f000 fdce 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	220e      	movs	r2, #14
 80008fc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008fe:	1d3a      	adds	r2, r7, #4
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_ADC_Init+0x234>)
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fabf 	bl	8001e88 <HAL_ADC_ConfigChannel>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 800090e:	f000 fdc1 	bl	8001494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	220f      	movs	r2, #15
 8000916:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000918:	1d3a      	adds	r2, r7, #4
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_ADC_Init+0x234>)
 800091c:	0011      	movs	r1, r2
 800091e:	0018      	movs	r0, r3
 8000920:	f001 fab2 	bl	8001e88 <HAL_ADC_ConfigChannel>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000928:	f000 fdb4 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b004      	add	sp, #16
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200005d8 	.word	0x200005d8
 8000938:	40012400 	.word	0x40012400

0800093c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_SPI1_Init+0x80>)
 8000942:	4a1f      	ldr	r2, [pc, #124]	; (80009c0 <MX_SPI1_Init+0x84>)
 8000944:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_SPI1_Init+0x80>)
 8000948:	2282      	movs	r2, #130	; 0x82
 800094a:	0052      	lsls	r2, r2, #1
 800094c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_SPI1_Init+0x80>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_SPI1_Init+0x80>)
 8000956:	22e0      	movs	r2, #224	; 0xe0
 8000958:	00d2      	lsls	r2, r2, #3
 800095a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_SPI1_Init+0x80>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_SPI1_Init+0x80>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_SPI1_Init+0x80>)
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_SPI1_Init+0x80>)
 8000972:	2238      	movs	r2, #56	; 0x38
 8000974:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_SPI1_Init+0x80>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_SPI1_Init+0x80>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_SPI1_Init+0x80>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_SPI1_Init+0x80>)
 800098a:	2207      	movs	r2, #7
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_SPI1_Init+0x80>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_SPI1_Init+0x80>)
 8000996:	2208      	movs	r2, #8
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_SPI1_Init+0x80>)
 800099c:	0018      	movs	r0, r3
 800099e:	f004 fc3f 	bl	8005220 <HAL_SPI_Init>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 fd75 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_SPI1_Init+0x88>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	2140      	movs	r1, #64	; 0x40
 80009b0:	0018      	movs	r0, r3
 80009b2:	f001 ff6e 	bl	8002892 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200004e4 	.word	0x200004e4
 80009c0:	40013000 	.word	0x40013000
 80009c4:	48000400 	.word	0x48000400

080009c8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	0018      	movs	r0, r3
 80009d2:	231c      	movs	r3, #28
 80009d4:	001a      	movs	r2, r3
 80009d6:	2100      	movs	r1, #0
 80009d8:	f00a fc34 	bl	800b244 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_TIM14_Init+0x8c>)
 80009de:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <MX_TIM14_Init+0x90>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_TIM14_Init+0x8c>)
 80009e4:	222f      	movs	r2, #47	; 0x2f
 80009e6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_TIM14_Init+0x8c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_TIM14_Init+0x8c>)
 80009f0:	4a1a      	ldr	r2, [pc, #104]	; (8000a5c <MX_TIM14_Init+0x94>)
 80009f2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_TIM14_Init+0x8c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_TIM14_Init+0x8c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_TIM14_Init+0x8c>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f004 fcc4 	bl	8005390 <HAL_TIM_Base_Init>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000a0c:	f000 fd42 	bl	8001494 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_TIM14_Init+0x8c>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f004 fd5e 	bl	80054d4 <HAL_TIM_OC_Init>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000a1c:	f000 fd3a 	bl	8001494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a38:	1d39      	adds	r1, r7, #4
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_TIM14_Init+0x8c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f004 feb6 	bl	80057b0 <HAL_TIM_OC_ConfigChannel>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000a48:	f000 fd24 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b008      	add	sp, #32
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000548 	.word	0x20000548
 8000a58:	40002000 	.word	0x40002000
 8000a5c:	0000270f 	.word	0x0000270f

08000a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <MX_USART3_UART_Init+0x5c>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a6c:	2296      	movs	r2, #150	; 0x96
 8000a6e:	0212      	lsls	r2, r2, #8
 8000a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f005 f987 	bl	8005db8 <HAL_UART_Init>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aae:	f000 fcf1 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000045c 	.word	0x2000045c
 8000abc:	40004800 	.word	0x40004800

08000ac0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_DMA_Init+0x38>)
 8000ac8:	695a      	ldr	r2, [r3, #20]
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_DMA_Init+0x38>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	615a      	str	r2, [r3, #20]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_DMA_Init+0x38>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4013      	ands	r3, r2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2009      	movs	r0, #9
 8000ae4:	f001 fb8a 	bl	80021fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ae8:	2009      	movs	r0, #9
 8000aea:	f001 fb9c 	bl	8002226 <HAL_NVIC_EnableIRQ>

}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40021000 	.word	0x40021000

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b08b      	sub	sp, #44	; 0x2c
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	2414      	movs	r4, #20
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	0018      	movs	r0, r3
 8000b08:	2314      	movs	r3, #20
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f00a fb99 	bl	800b244 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b12:	4b6b      	ldr	r3, [pc, #428]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	4b6a      	ldr	r3, [pc, #424]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	03c9      	lsls	r1, r1, #15
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	615a      	str	r2, [r3, #20]
 8000b20:	4b67      	ldr	r3, [pc, #412]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b22:	695a      	ldr	r2, [r3, #20]
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	03db      	lsls	r3, r3, #15
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b64      	ldr	r3, [pc, #400]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	4b63      	ldr	r3, [pc, #396]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0309      	lsls	r1, r1, #12
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	615a      	str	r2, [r3, #20]
 8000b3c:	4b60      	ldr	r3, [pc, #384]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b3e:	695a      	ldr	r2, [r3, #20]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	031b      	lsls	r3, r3, #12
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b5d      	ldr	r3, [pc, #372]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b4c:	695a      	ldr	r2, [r3, #20]
 8000b4e:	4b5c      	ldr	r3, [pc, #368]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0289      	lsls	r1, r1, #10
 8000b54:	430a      	orrs	r2, r1
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	4b59      	ldr	r3, [pc, #356]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b5a:	695a      	ldr	r2, [r3, #20]
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	029b      	lsls	r3, r3, #10
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b56      	ldr	r3, [pc, #344]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b68:	695a      	ldr	r2, [r3, #20]
 8000b6a:	4b55      	ldr	r3, [pc, #340]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	02c9      	lsls	r1, r1, #11
 8000b70:	430a      	orrs	r2, r1
 8000b72:	615a      	str	r2, [r3, #20]
 8000b74:	4b52      	ldr	r3, [pc, #328]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	02db      	lsls	r3, r3, #11
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	4b4f      	ldr	r3, [pc, #316]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b84:	695a      	ldr	r2, [r3, #20]
 8000b86:	4b4e      	ldr	r3, [pc, #312]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b88:	2180      	movs	r1, #128	; 0x80
 8000b8a:	0349      	lsls	r1, r1, #13
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	4b4b      	ldr	r3, [pc, #300]	; (8000cc0 <MX_GPIO_Init+0x1c4>)
 8000b92:	695a      	ldr	r2, [r3, #20]
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	035b      	lsls	r3, r3, #13
 8000b98:	4013      	ands	r3, r2
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000b9e:	4949      	ldr	r1, [pc, #292]	; (8000cc4 <MX_GPIO_Init+0x1c8>)
 8000ba0:	4b49      	ldr	r3, [pc, #292]	; (8000cc8 <MX_GPIO_Init+0x1cc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 fe74 	bl	8002892 <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000baa:	239e      	movs	r3, #158	; 0x9e
 8000bac:	015b      	lsls	r3, r3, #5
 8000bae:	4847      	ldr	r0, [pc, #284]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	f001 fe6d 	bl	8002892 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	0219      	lsls	r1, r3, #8
 8000bbc:	2390      	movs	r3, #144	; 0x90
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f001 fe65 	bl	8002892 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	4a3e      	ldr	r2, [pc, #248]	; (8000cc4 <MX_GPIO_Init+0x1c8>)
 8000bcc:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	4a39      	ldr	r2, [pc, #228]	; (8000cc8 <MX_GPIO_Init+0x1cc>)
 8000be4:	0019      	movs	r1, r3
 8000be6:	0010      	movs	r0, r2
 8000be8:	f001 fcbe 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000bec:	0021      	movs	r1, r4
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	229e      	movs	r2, #158	; 0x9e
 8000bf2:	0152      	lsls	r2, r2, #5
 8000bf4:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	000c      	movs	r4, r1
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <MX_GPIO_Init+0x1d0>)
 8000c0e:	0019      	movs	r1, r3
 8000c10:	0010      	movs	r0, r2
 8000c12:	f001 fca9 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	22c0      	movs	r2, #192	; 0xc0
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	2288      	movs	r2, #136	; 0x88
 8000c22:	0352      	lsls	r2, r2, #13
 8000c24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2202      	movs	r2, #2
 8000c2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	193a      	adds	r2, r7, r4
 8000c2e:	2390      	movs	r3, #144	; 0x90
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f001 fc97 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	00d2      	lsls	r2, r2, #3
 8000c40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	193a      	adds	r2, r7, r4
 8000c50:	2390      	movs	r3, #144	; 0x90
 8000c52:	05db      	lsls	r3, r3, #23
 8000c54:	0011      	movs	r1, r2
 8000c56:	0018      	movs	r0, r3
 8000c58:	f001 fc86 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000c5c:	0021      	movs	r1, r4
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	0212      	lsls	r2, r2, #8
 8000c64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	000c      	movs	r4, r1
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	193a      	adds	r2, r7, r4
 8000c7c:	2390      	movs	r3, #144	; 0x90
 8000c7e:	05db      	lsls	r3, r3, #23
 8000c80:	0011      	movs	r1, r2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f001 fc70 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <MX_GPIO_Init+0x1d4>)
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	0010      	movs	r0, r2
 8000ca2:	f001 fc61 	bl	8002568 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2007      	movs	r0, #7
 8000cac:	f001 faa6 	bl	80021fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cb0:	2007      	movs	r0, #7
 8000cb2:	f001 fab8 	bl	8002226 <HAL_NVIC_EnableIRQ>

}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b00b      	add	sp, #44	; 0x2c
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	0000f3c4 	.word	0x0000f3c4
 8000cc8:	48000400 	.word	0x48000400
 8000ccc:	48000800 	.word	0x48000800
 8000cd0:	48000c00 	.word	0x48000c00

08000cd4 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b08b      	sub	sp, #44	; 0x2c
 8000cd8:	af02      	add	r7, sp, #8
	flags.ten_ms = 0;
 8000cda:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <clkHandler+0x138>)
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	2101      	movs	r1, #1
 8000ce0:	438a      	bics	r2, r1
 8000ce2:	701a      	strb	r2, [r3, #0]
	flags.sec	= 0;
 8000ce4:	4b49      	ldr	r3, [pc, #292]	; (8000e0c <clkHandler+0x138>)
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	2102      	movs	r1, #2
 8000cea:	438a      	bics	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
	flags.min	= 0;
 8000cee:	4b47      	ldr	r3, [pc, #284]	; (8000e0c <clkHandler+0x138>)
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	438a      	bics	r2, r1
 8000cf6:	701a      	strb	r2, [r3, #0]
	flags.hour	= 0;
 8000cf8:	4b44      	ldr	r3, [pc, #272]	; (8000e0c <clkHandler+0x138>)
 8000cfa:	781a      	ldrb	r2, [r3, #0]
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	438a      	bics	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
	sysTime++;
 8000d02:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <clkHandler+0x13c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	4b41      	ldr	r3, [pc, #260]	; (8000e10 <clkHandler+0x13c>)
 8000d0a:	601a      	str	r2, [r3, #0]
	if((sysTime % 100) == 0)	//1 s
 8000d0c:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <clkHandler+0x13c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2164      	movs	r1, #100	; 0x64
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff fa90 	bl	8000238 <__aeabi_uidivmod>
 8000d18:	1e0b      	subs	r3, r1, #0
 8000d1a:	d109      	bne.n	8000d30 <clkHandler+0x5c>
	{
		sysTime_sec++;
 8000d1c:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <clkHandler+0x140>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	4b3c      	ldr	r3, [pc, #240]	; (8000e14 <clkHandler+0x140>)
 8000d24:	601a      	str	r2, [r3, #0]
		flags.sec = 1;
 8000d26:	4b39      	ldr	r3, [pc, #228]	; (8000e0c <clkHandler+0x138>)
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
	}

	if(flags.sec)
 8000d30:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <clkHandler+0x138>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2202      	movs	r2, #2
 8000d36:	4013      	ands	r3, r2
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d042      	beq.n	8000dc4 <clkHandler+0xf0>
	{
		if((sysTime_sec % 60) == 0 && sysTime_sec != 0)	//1 min
 8000d3e:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <clkHandler+0x140>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	213c      	movs	r1, #60	; 0x3c
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff fa77 	bl	8000238 <__aeabi_uidivmod>
 8000d4a:	1e0b      	subs	r3, r1, #0
 8000d4c:	d110      	bne.n	8000d70 <clkHandler+0x9c>
 8000d4e:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <clkHandler+0x140>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00c      	beq.n	8000d70 <clkHandler+0x9c>
		{
			sysTime_sec = 0;
 8000d56:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <clkHandler+0x140>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
			sysTime_min++;
 8000d5c:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <clkHandler+0x144>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	1c5a      	adds	r2, r3, #1
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <clkHandler+0x144>)
 8000d64:	601a      	str	r2, [r3, #0]
			flags.min = 1;
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <clkHandler+0x138>)
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	701a      	strb	r2, [r3, #0]
		}

		if(flags.min)
 8000d70:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <clkHandler+0x138>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2204      	movs	r2, #4
 8000d76:	4013      	ands	r3, r2
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d022      	beq.n	8000dc4 <clkHandler+0xf0>
		{
			if((sysTime_min % 60) == 0 && sysTime_min != 0)	//1 min
 8000d7e:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <clkHandler+0x144>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	213c      	movs	r1, #60	; 0x3c
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff fa57 	bl	8000238 <__aeabi_uidivmod>
 8000d8a:	1e0b      	subs	r3, r1, #0
 8000d8c:	d11a      	bne.n	8000dc4 <clkHandler+0xf0>
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <clkHandler+0x144>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d016      	beq.n	8000dc4 <clkHandler+0xf0>
			{

				sysTime_sec = 0;
 8000d96:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <clkHandler+0x140>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
				sysTime_min = 0;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <clkHandler+0x144>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
				sysTime_hour++;
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <clkHandler+0x148>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <clkHandler+0x148>)
 8000daa:	601a      	str	r2, [r3, #0]
				flags.hour = 1;
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <clkHandler+0x138>)
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	2108      	movs	r1, #8
 8000db2:	430a      	orrs	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
				if(sysTime_hour >= 23)
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <clkHandler+0x148>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b16      	cmp	r3, #22
 8000dbc:	d902      	bls.n	8000dc4 <clkHandler+0xf0>
					sysTime_hour = 0;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <clkHandler+0x148>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
			}
		}
	}

#ifdef __DEBUG_TIME__
	if(flags.sec)
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <clkHandler+0x138>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2202      	movs	r2, #2
 8000dca:	4013      	ands	r3, r2
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d018      	beq.n	8000e04 <clkHandler+0x130>
	{
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime_hour, sysTime_min, sysTime_sec);
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <clkHandler+0x148>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <clkHandler+0x144>)
 8000dd8:	681c      	ldr	r4, [r3, #0]
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <clkHandler+0x140>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4910      	ldr	r1, [pc, #64]	; (8000e20 <clkHandler+0x14c>)
 8000de0:	0038      	movs	r0, r7
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	0023      	movs	r3, r4
 8000de6:	f00a faef 	bl	800b3c8 <siprintf>
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <clkHandler+0x150>)
 8000dec:	681c      	ldr	r4, [r3, #0]
 8000dee:	003b      	movs	r3, r7
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff f989 	bl	8000108 <strlen>
 8000df6:	0003      	movs	r3, r0
 8000df8:	001a      	movs	r2, r3
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f000 fbb9 	bl	8001576 <pushStr>
	}
#endif
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b009      	add	sp, #36	; 0x24
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	20000590 	.word	0x20000590
 8000e10:	200001fc 	.word	0x200001fc
 8000e14:	20000200 	.word	0x20000200
 8000e18:	20000204 	.word	0x20000204
 8000e1c:	20000208 	.word	0x20000208
 8000e20:	0800bab8 	.word	0x0800bab8
 8000e24:	200004e0 	.word	0x200004e0

08000e28 <buttonDebounce>:

void buttonDebounce(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	if(flags.butt0_int)
 8000e2c:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <buttonDebounce+0xe8>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2210      	movs	r2, #16
 8000e32:	4013      	ands	r3, r2
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d031      	beq.n	8000e9e <buttonDebounce+0x76>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	009a      	lsls	r2, r3, #2
 8000e3e:	2390      	movs	r3, #144	; 0x90
 8000e40:	05db      	lsls	r3, r3, #23
 8000e42:	0011      	movs	r1, r2
 8000e44:	0018      	movs	r0, r3
 8000e46:	f001 fd07 	bl	8002858 <HAL_GPIO_ReadPin>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d106      	bne.n	8000e5e <buttonDebounce+0x36>
		{
			button0_Debounce++;
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <buttonDebounce+0xec>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b2e      	ldr	r3, [pc, #184]	; (8000f14 <buttonDebounce+0xec>)
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e007      	b.n	8000e6e <buttonDebounce+0x46>
		}
		else
		{
			button0_Debounce = 0;
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <buttonDebounce+0xec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
			flags.butt0_int = 0;
 8000e64:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <buttonDebounce+0xe8>)
 8000e66:	781a      	ldrb	r2, [r3, #0]
 8000e68:	2110      	movs	r1, #16
 8000e6a:	438a      	bics	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
		}
		if(button0_Debounce >= 5)
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <buttonDebounce+0xec>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d913      	bls.n	8000e9e <buttonDebounce+0x76>
		{
			flags.butt0_ver = 1;
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <buttonDebounce+0xe8>)
 8000e78:	781a      	ldrb	r2, [r3, #0]
 8000e7a:	2120      	movs	r1, #32
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	701a      	strb	r2, [r3, #0]
			flags.butt0_int = 0;
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <buttonDebounce+0xe8>)
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	2110      	movs	r1, #16
 8000e86:	438a      	bics	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]
			button0_Debounce = 0;
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <buttonDebounce+0xec>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin);
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <buttonDebounce+0xf0>)
 8000e96:	0019      	movs	r1, r3
 8000e98:	0010      	movs	r0, r2
 8000e9a:	f001 fd17 	bl	80028cc <HAL_GPIO_TogglePin>
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.butt1_int)
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <buttonDebounce+0xe8>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2240      	movs	r2, #64	; 0x40
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d02e      	beq.n	8000f0a <buttonDebounce+0xe2>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	005a      	lsls	r2, r3, #1
 8000eb0:	2390      	movs	r3, #144	; 0x90
 8000eb2:	05db      	lsls	r3, r3, #23
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 fcce 	bl	8002858 <HAL_GPIO_ReadPin>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d106      	bne.n	8000ed0 <buttonDebounce+0xa8>
		{
			button1_Debounce++;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <buttonDebounce+0xf4>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <buttonDebounce+0xf4>)
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e007      	b.n	8000ee0 <buttonDebounce+0xb8>
		}
		else
		{
			button1_Debounce = 0;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <buttonDebounce+0xf4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
			flags.butt1_int = 0;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <buttonDebounce+0xe8>)
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	2140      	movs	r1, #64	; 0x40
 8000edc:	438a      	bics	r2, r1
 8000ede:	701a      	strb	r2, [r3, #0]
		}
		if(button1_Debounce >= 5)
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <buttonDebounce+0xf4>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d910      	bls.n	8000f0a <buttonDebounce+0xe2>
		{
			flags.butt1_ver = 1;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <buttonDebounce+0xe8>)
 8000eea:	781a      	ldrb	r2, [r3, #0]
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	4249      	negs	r1, r1
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	701a      	strb	r2, [r3, #0]
			flags.butt1_int;
			button1_Debounce = 0;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <buttonDebounce+0xf4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	021a      	lsls	r2, r3, #8
 8000efe:	2390      	movs	r3, #144	; 0x90
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	0011      	movs	r1, r2
 8000f04:	0018      	movs	r0, r3
 8000f06:	f001 fce1 	bl	80028cc <HAL_GPIO_TogglePin>
#endif
		}
	}
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000590 	.word	0x20000590
 8000f14:	2000020c 	.word	0x2000020c
 8000f18:	48000400 	.word	0x48000400
 8000f1c:	2000020d 	.word	0x2000020d

08000f20 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f22:	b099      	sub	sp, #100	; 0x64
 8000f24:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 8000f26:	4bb2      	ldr	r3, [pc, #712]	; (80011f0 <comHandler+0x2d0>)
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d100      	bne.n	8000f36 <comHandler+0x16>
 8000f34:	e0ea      	b.n	800110c <comHandler+0x1ec>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000f36:	e0d5      	b.n	80010e4 <comHandler+0x1c4>
		{
			uint8_t txt[30];

			switch(instruction)
 8000f38:	232f      	movs	r3, #47	; 0x2f
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	4694      	mov	ip, r2
 8000f3e:	44bc      	add	ip, r7
 8000f40:	4463      	add	r3, ip
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b73      	cmp	r3, #115	; 0x73
 8000f46:	d00a      	beq.n	8000f5e <comHandler+0x3e>
 8000f48:	dd00      	ble.n	8000f4c <comHandler+0x2c>
 8000f4a:	e0a4      	b.n	8001096 <comHandler+0x176>
 8000f4c:	2b70      	cmp	r3, #112	; 0x70
 8000f4e:	d054      	beq.n	8000ffa <comHandler+0xda>
 8000f50:	dd00      	ble.n	8000f54 <comHandler+0x34>
 8000f52:	e0a0      	b.n	8001096 <comHandler+0x176>
 8000f54:	2b63      	cmp	r3, #99	; 0x63
 8000f56:	d029      	beq.n	8000fac <comHandler+0x8c>
 8000f58:	2b6b      	cmp	r3, #107	; 0x6b
 8000f5a:	d075      	beq.n	8001048 <comHandler+0x128>
 8000f5c:	e09b      	b.n	8001096 <comHandler+0x176>
			{
			case 's': ;
				//___Start testu___//
				flags.startRequest = 1;
 8000f5e:	4ba4      	ldr	r3, [pc, #656]	; (80011f0 <comHandler+0x2d0>)
 8000f60:	785a      	ldrb	r2, [r3, #1]
 8000f62:	2102      	movs	r1, #2
 8000f64:	430a      	orrs	r2, r1
 8000f66:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
 8000f68:	4aa2      	ldr	r2, [pc, #648]	; (80011f4 <comHandler+0x2d4>)
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	001c      	movs	r4, r3
 8000f6e:	2120      	movs	r1, #32
 8000f70:	468c      	mov	ip, r1
 8000f72:	44bc      	add	ip, r7
 8000f74:	4463      	add	r3, ip
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f00a fa25 	bl	800b3c8 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000f7e:	4b9e      	ldr	r3, [pc, #632]	; (80011f8 <comHandler+0x2d8>)
 8000f80:	681e      	ldr	r6, [r3, #0]
 8000f82:	0023      	movs	r3, r4
 8000f84:	001c      	movs	r4, r3
 8000f86:	2220      	movs	r2, #32
 8000f88:	4694      	mov	ip, r2
 8000f8a:	44bc      	add	ip, r7
 8000f8c:	4463      	add	r3, ip
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff f8ba 	bl	8000108 <strlen>
 8000f94:	0003      	movs	r3, r0
 8000f96:	001a      	movs	r2, r3
 8000f98:	0023      	movs	r3, r4
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	468c      	mov	ip, r1
 8000f9e:	44bc      	add	ip, r7
 8000fa0:	4463      	add	r3, ip
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	0030      	movs	r0, r6
 8000fa6:	f000 fae6 	bl	8001576 <pushStr>
#endif
				break;
 8000faa:	e09b      	b.n	80010e4 <comHandler+0x1c4>

			case'c': ;
				//___Ukončení___//
				flags.stopRequest = 1;
 8000fac:	4b90      	ldr	r3, [pc, #576]	; (80011f0 <comHandler+0x2d0>)
 8000fae:	785a      	ldrb	r2, [r3, #1]
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
 8000fb6:	4a91      	ldr	r2, [pc, #580]	; (80011fc <comHandler+0x2dc>)
 8000fb8:	2310      	movs	r3, #16
 8000fba:	001c      	movs	r4, r3
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	468c      	mov	ip, r1
 8000fc0:	44bc      	add	ip, r7
 8000fc2:	4463      	add	r3, ip
 8000fc4:	0011      	movs	r1, r2
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f00a f9fe 	bl	800b3c8 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000fcc:	4b8a      	ldr	r3, [pc, #552]	; (80011f8 <comHandler+0x2d8>)
 8000fce:	681e      	ldr	r6, [r3, #0]
 8000fd0:	0023      	movs	r3, r4
 8000fd2:	001c      	movs	r4, r3
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	4694      	mov	ip, r2
 8000fd8:	44bc      	add	ip, r7
 8000fda:	4463      	add	r3, ip
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff f893 	bl	8000108 <strlen>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	0023      	movs	r3, r4
 8000fe8:	2120      	movs	r1, #32
 8000fea:	468c      	mov	ip, r1
 8000fec:	44bc      	add	ip, r7
 8000fee:	4463      	add	r3, ip
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	0030      	movs	r0, r6
 8000ff4:	f000 fabf 	bl	8001576 <pushStr>
#endif
				break;
 8000ff8:	e074      	b.n	80010e4 <comHandler+0x1c4>

			case'p': ;
				//___Pauza___//
				flags.pauseRequest = 1;
 8000ffa:	4b7d      	ldr	r3, [pc, #500]	; (80011f0 <comHandler+0x2d0>)
 8000ffc:	785a      	ldrb	r2, [r3, #1]
 8000ffe:	2108      	movs	r1, #8
 8001000:	430a      	orrs	r2, r1
 8001002:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
 8001004:	4a7e      	ldr	r2, [pc, #504]	; (8001200 <comHandler+0x2e0>)
 8001006:	2310      	movs	r3, #16
 8001008:	001c      	movs	r4, r3
 800100a:	2120      	movs	r1, #32
 800100c:	468c      	mov	ip, r1
 800100e:	44bc      	add	ip, r7
 8001010:	4463      	add	r3, ip
 8001012:	0011      	movs	r1, r2
 8001014:	0018      	movs	r0, r3
 8001016:	f00a f9d7 	bl	800b3c8 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 800101a:	4b77      	ldr	r3, [pc, #476]	; (80011f8 <comHandler+0x2d8>)
 800101c:	681e      	ldr	r6, [r3, #0]
 800101e:	0023      	movs	r3, r4
 8001020:	001c      	movs	r4, r3
 8001022:	2220      	movs	r2, #32
 8001024:	4694      	mov	ip, r2
 8001026:	44bc      	add	ip, r7
 8001028:	4463      	add	r3, ip
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff f86c 	bl	8000108 <strlen>
 8001030:	0003      	movs	r3, r0
 8001032:	001a      	movs	r2, r3
 8001034:	0023      	movs	r3, r4
 8001036:	2120      	movs	r1, #32
 8001038:	468c      	mov	ip, r1
 800103a:	44bc      	add	ip, r7
 800103c:	4463      	add	r3, ip
 800103e:	0019      	movs	r1, r3
 8001040:	0030      	movs	r0, r6
 8001042:	f000 fa98 	bl	8001576 <pushStr>
#endif
				break;
 8001046:	e04d      	b.n	80010e4 <comHandler+0x1c4>

			case'k': ;
				//___Kalibrace___//
				flags.calibRequest = 1;
 8001048:	4b69      	ldr	r3, [pc, #420]	; (80011f0 <comHandler+0x2d0>)
 800104a:	785a      	ldrb	r2, [r3, #1]
 800104c:	2110      	movs	r1, #16
 800104e:	430a      	orrs	r2, r1
 8001050:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
 8001052:	4a6c      	ldr	r2, [pc, #432]	; (8001204 <comHandler+0x2e4>)
 8001054:	2310      	movs	r3, #16
 8001056:	001c      	movs	r4, r3
 8001058:	2120      	movs	r1, #32
 800105a:	468c      	mov	ip, r1
 800105c:	44bc      	add	ip, r7
 800105e:	4463      	add	r3, ip
 8001060:	0011      	movs	r1, r2
 8001062:	0018      	movs	r0, r3
 8001064:	f00a f9b0 	bl	800b3c8 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8001068:	4b63      	ldr	r3, [pc, #396]	; (80011f8 <comHandler+0x2d8>)
 800106a:	681e      	ldr	r6, [r3, #0]
 800106c:	0023      	movs	r3, r4
 800106e:	001c      	movs	r4, r3
 8001070:	2220      	movs	r2, #32
 8001072:	4694      	mov	ip, r2
 8001074:	44bc      	add	ip, r7
 8001076:	4463      	add	r3, ip
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff f845 	bl	8000108 <strlen>
 800107e:	0003      	movs	r3, r0
 8001080:	001a      	movs	r2, r3
 8001082:	0023      	movs	r3, r4
 8001084:	2120      	movs	r1, #32
 8001086:	468c      	mov	ip, r1
 8001088:	44bc      	add	ip, r7
 800108a:	4463      	add	r3, ip
 800108c:	0019      	movs	r1, r3
 800108e:	0030      	movs	r0, r6
 8001090:	f000 fa71 	bl	8001576 <pushStr>
#endif
				break;
 8001094:	e026      	b.n	80010e4 <comHandler+0x1c4>

			default: ;
				//___Neplatný příkaz___//
				flags.unknownInst = 1;
 8001096:	4b56      	ldr	r3, [pc, #344]	; (80011f0 <comHandler+0x2d0>)
 8001098:	785a      	ldrb	r2, [r3, #1]
 800109a:	2120      	movs	r1, #32
 800109c:	430a      	orrs	r2, r1
 800109e:	705a      	strb	r2, [r3, #1]
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
 80010a0:	4a59      	ldr	r2, [pc, #356]	; (8001208 <comHandler+0x2e8>)
 80010a2:	2310      	movs	r3, #16
 80010a4:	001c      	movs	r4, r3
 80010a6:	2120      	movs	r1, #32
 80010a8:	468c      	mov	ip, r1
 80010aa:	44bc      	add	ip, r7
 80010ac:	4463      	add	r3, ip
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f00a f989 	bl	800b3c8 <siprintf>
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 80010b6:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <comHandler+0x2d8>)
 80010b8:	681e      	ldr	r6, [r3, #0]
 80010ba:	0023      	movs	r3, r4
 80010bc:	001c      	movs	r4, r3
 80010be:	2220      	movs	r2, #32
 80010c0:	4694      	mov	ip, r2
 80010c2:	44bc      	add	ip, r7
 80010c4:	4463      	add	r3, ip
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff f81e 	bl	8000108 <strlen>
 80010cc:	0003      	movs	r3, r0
 80010ce:	001a      	movs	r2, r3
 80010d0:	0023      	movs	r3, r4
 80010d2:	2120      	movs	r1, #32
 80010d4:	468c      	mov	ip, r1
 80010d6:	44bc      	add	ip, r7
 80010d8:	4463      	add	r3, ip
 80010da:	0019      	movs	r1, r3
 80010dc:	0030      	movs	r0, r6
 80010de:	f000 fa4a 	bl	8001576 <pushStr>
#endif
				break;
 80010e2:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <comHandler+0x2ec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	222f      	movs	r2, #47	; 0x2f
 80010ea:	2120      	movs	r1, #32
 80010ec:	468c      	mov	ip, r1
 80010ee:	44bc      	add	ip, r7
 80010f0:	4462      	add	r2, ip
 80010f2:	0011      	movs	r1, r2
 80010f4:	0018      	movs	r0, r3
 80010f6:	f000 fa66 	bl	80015c6 <pop>
 80010fa:	0003      	movs	r3, r0
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d000      	beq.n	8001102 <comHandler+0x1e2>
 8001100:	e71a      	b.n	8000f38 <comHandler+0x18>
			}
		}
		flags.data_received = 0;
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <comHandler+0x2d0>)
 8001104:	785a      	ldrb	r2, [r3, #1]
 8001106:	2101      	movs	r1, #1
 8001108:	438a      	bics	r2, r1
 800110a:	705a      	strb	r2, [r3, #1]
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 800110c:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <comHandler+0x2d8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	7d1b      	ldrb	r3, [r3, #20]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d113      	bne.n	800113e <comHandler+0x21e>
	{
		char msg[] = {"Buffer full\n"};
 8001116:	2320      	movs	r3, #32
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	4a3d      	ldr	r2, [pc, #244]	; (8001210 <comHandler+0x2f0>)
 800111c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800111e:	c313      	stmia	r3!, {r0, r1, r4}
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 8001124:	2320      	movs	r3, #32
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	0018      	movs	r0, r3
 800112a:	f7fe ffed 	bl	8000108 <strlen>
 800112e:	0003      	movs	r3, r0
 8001130:	b29a      	uxth	r2, r3
 8001132:	2320      	movs	r3, #32
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	0011      	movs	r1, r2
 8001138:	0018      	movs	r0, r3
 800113a:	f009 fb89 	bl	800a850 <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <comHandler+0x2d8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d04e      	beq.n	80011e6 <comHandler+0x2c6>
	{
 8001148:	466b      	mov	r3, sp
 800114a:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <comHandler+0x2d8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	65bb      	str	r3, [r7, #88]	; 0x58
		char tmpStr[size+1];
 8001154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001156:	3301      	adds	r3, #1
 8001158:	1e5a      	subs	r2, r3, #1
 800115a:	657a      	str	r2, [r7, #84]	; 0x54
 800115c:	001a      	movs	r2, r3
 800115e:	60ba      	str	r2, [r7, #8]
 8001160:	2200      	movs	r2, #0
 8001162:	60fa      	str	r2, [r7, #12]
 8001164:	68b8      	ldr	r0, [r7, #8]
 8001166:	68f9      	ldr	r1, [r7, #12]
 8001168:	0002      	movs	r2, r0
 800116a:	0f52      	lsrs	r2, r2, #29
 800116c:	000c      	movs	r4, r1
 800116e:	00e4      	lsls	r4, r4, #3
 8001170:	61fc      	str	r4, [r7, #28]
 8001172:	69fc      	ldr	r4, [r7, #28]
 8001174:	4314      	orrs	r4, r2
 8001176:	61fc      	str	r4, [r7, #28]
 8001178:	0002      	movs	r2, r0
 800117a:	00d2      	lsls	r2, r2, #3
 800117c:	61ba      	str	r2, [r7, #24]
 800117e:	001a      	movs	r2, r3
 8001180:	603a      	str	r2, [r7, #0]
 8001182:	2200      	movs	r2, #0
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	0002      	movs	r2, r0
 800118c:	0f52      	lsrs	r2, r2, #29
 800118e:	000c      	movs	r4, r1
 8001190:	00e4      	lsls	r4, r4, #3
 8001192:	617c      	str	r4, [r7, #20]
 8001194:	697c      	ldr	r4, [r7, #20]
 8001196:	4314      	orrs	r4, r2
 8001198:	617c      	str	r4, [r7, #20]
 800119a:	0002      	movs	r2, r0
 800119c:	00d2      	lsls	r2, r2, #3
 800119e:	613a      	str	r2, [r7, #16]
 80011a0:	3307      	adds	r3, #7
 80011a2:	08db      	lsrs	r3, r3, #3
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	466a      	mov	r2, sp
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	469d      	mov	sp, r3
 80011ac:	466b      	mov	r3, sp
 80011ae:	3300      	adds	r3, #0
 80011b0:	653b      	str	r3, [r7, #80]	; 0x50
		for(int i = 0; i < size; i++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011b6:	e00a      	b.n	80011ce <comHandler+0x2ae>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <comHandler+0x2d8>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	0019      	movs	r1, r3
 80011c4:	f000 f9ff 	bl	80015c6 <pop>
		for(int i = 0; i < size; i++)
 80011c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ca:	3301      	adds	r3, #1
 80011cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80011d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dbf0      	blt.n	80011b8 <comHandler+0x298>
		}
		CDC_Transmit_FS(tmpStr, size);
 80011d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011da:	b292      	uxth	r2, r2
 80011dc:	0011      	movs	r1, r2
 80011de:	0018      	movs	r0, r3
 80011e0:	f009 fb36 	bl	800a850 <CDC_Transmit_FS>
 80011e4:	46b5      	mov	sp, r6
	}

}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b019      	add	sp, #100	; 0x64
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	20000590 	.word	0x20000590
 80011f4:	0800bac8 	.word	0x0800bac8
 80011f8:	200004e0 	.word	0x200004e0
 80011fc:	0800bad0 	.word	0x0800bad0
 8001200:	0800badc 	.word	0x0800badc
 8001204:	0800bae4 	.word	0x0800bae4
 8001208:	0800baf0 	.word	0x0800baf0
 800120c:	200010b0 	.word	0x200010b0
 8001210:	0800bb04 	.word	0x0800bb04

08001214 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.error && (UI_State != ERROR))
 8001218:	4b97      	ldr	r3, [pc, #604]	; (8001478 <UI_Handler+0x264>)
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	2201      	movs	r2, #1
 800121e:	4013      	ands	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00b      	beq.n	800123e <UI_Handler+0x2a>
 8001226:	4b95      	ldr	r3, [pc, #596]	; (800147c <UI_Handler+0x268>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d007      	beq.n	800123e <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 800122e:	4b93      	ldr	r3, [pc, #588]	; (800147c <UI_Handler+0x268>)
 8001230:	2203      	movs	r2, #3
 8001232:	701a      	strb	r2, [r3, #0]
		startTime = sysTime;
 8001234:	4b92      	ldr	r3, [pc, #584]	; (8001480 <UI_Handler+0x26c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b92      	ldr	r3, [pc, #584]	; (8001484 <UI_Handler+0x270>)
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e05e      	b.n	80012fc <UI_Handler+0xe8>
	}
	else if(flags.notice && (UI_State == OFF))
 800123e:	4b8e      	ldr	r3, [pc, #568]	; (8001478 <UI_Handler+0x264>)
 8001240:	789b      	ldrb	r3, [r3, #2]
 8001242:	2202      	movs	r2, #2
 8001244:	4013      	ands	r3, r2
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d010      	beq.n	800126e <UI_Handler+0x5a>
 800124c:	4b8b      	ldr	r3, [pc, #556]	; (800147c <UI_Handler+0x268>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10c      	bne.n	800126e <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 8001254:	4b89      	ldr	r3, [pc, #548]	; (800147c <UI_Handler+0x268>)
 8001256:	2204      	movs	r2, #4
 8001258:	701a      	strb	r2, [r3, #0]
		startTime = sysTime;
 800125a:	4b89      	ldr	r3, [pc, #548]	; (8001480 <UI_Handler+0x26c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b89      	ldr	r3, [pc, #548]	; (8001484 <UI_Handler+0x270>)
 8001260:	601a      	str	r2, [r3, #0]
		flags.notice = 0;
 8001262:	4b85      	ldr	r3, [pc, #532]	; (8001478 <UI_Handler+0x264>)
 8001264:	789a      	ldrb	r2, [r3, #2]
 8001266:	2102      	movs	r1, #2
 8001268:	438a      	bics	r2, r1
 800126a:	709a      	strb	r2, [r3, #2]
 800126c:	e046      	b.n	80012fc <UI_Handler+0xe8>
	}
	else if(flags.done && (UI_State == OFF))
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <UI_Handler+0x264>)
 8001270:	789b      	ldrb	r3, [r3, #2]
 8001272:	2204      	movs	r2, #4
 8001274:	4013      	ands	r3, r2
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d010      	beq.n	800129e <UI_Handler+0x8a>
 800127c:	4b7f      	ldr	r3, [pc, #508]	; (800147c <UI_Handler+0x268>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10c      	bne.n	800129e <UI_Handler+0x8a>
	{
		UI_State = DONE;
 8001284:	4b7d      	ldr	r3, [pc, #500]	; (800147c <UI_Handler+0x268>)
 8001286:	2205      	movs	r2, #5
 8001288:	701a      	strb	r2, [r3, #0]
		startTime = sysTime;
 800128a:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <UI_Handler+0x26c>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b7d      	ldr	r3, [pc, #500]	; (8001484 <UI_Handler+0x270>)
 8001290:	601a      	str	r2, [r3, #0]
		flags.done = 0;
 8001292:	4b79      	ldr	r3, [pc, #484]	; (8001478 <UI_Handler+0x264>)
 8001294:	789a      	ldrb	r2, [r3, #2]
 8001296:	2104      	movs	r1, #4
 8001298:	438a      	bics	r2, r1
 800129a:	709a      	strb	r2, [r3, #2]
 800129c:	e02e      	b.n	80012fc <UI_Handler+0xe8>
	}
	else if(flags.longBeep && (UI_State == OFF))
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <UI_Handler+0x264>)
 80012a0:	785b      	ldrb	r3, [r3, #1]
 80012a2:	227f      	movs	r2, #127	; 0x7f
 80012a4:	4393      	bics	r3, r2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d010      	beq.n	80012ce <UI_Handler+0xba>
 80012ac:	4b73      	ldr	r3, [pc, #460]	; (800147c <UI_Handler+0x268>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10c      	bne.n	80012ce <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 80012b4:	4b71      	ldr	r3, [pc, #452]	; (800147c <UI_Handler+0x268>)
 80012b6:	2202      	movs	r2, #2
 80012b8:	701a      	strb	r2, [r3, #0]
		startTime = sysTime;
 80012ba:	4b71      	ldr	r3, [pc, #452]	; (8001480 <UI_Handler+0x26c>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b71      	ldr	r3, [pc, #452]	; (8001484 <UI_Handler+0x270>)
 80012c0:	601a      	str	r2, [r3, #0]
		flags.longBeep = 0;
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <UI_Handler+0x264>)
 80012c4:	785a      	ldrb	r2, [r3, #1]
 80012c6:	217f      	movs	r1, #127	; 0x7f
 80012c8:	400a      	ands	r2, r1
 80012ca:	705a      	strb	r2, [r3, #1]
 80012cc:	e016      	b.n	80012fc <UI_Handler+0xe8>
	}
	else if(flags.shortBeep && (UI_State == OFF))
 80012ce:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <UI_Handler+0x264>)
 80012d0:	785b      	ldrb	r3, [r3, #1]
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	4013      	ands	r3, r2
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00f      	beq.n	80012fc <UI_Handler+0xe8>
 80012dc:	4b67      	ldr	r3, [pc, #412]	; (800147c <UI_Handler+0x268>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10b      	bne.n	80012fc <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 80012e4:	4b65      	ldr	r3, [pc, #404]	; (800147c <UI_Handler+0x268>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
		startTime = sysTime;
 80012ea:	4b65      	ldr	r3, [pc, #404]	; (8001480 <UI_Handler+0x26c>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b65      	ldr	r3, [pc, #404]	; (8001484 <UI_Handler+0x270>)
 80012f0:	601a      	str	r2, [r3, #0]
		flags.shortBeep = 0;
 80012f2:	4b61      	ldr	r3, [pc, #388]	; (8001478 <UI_Handler+0x264>)
 80012f4:	785a      	ldrb	r2, [r3, #1]
 80012f6:	2140      	movs	r1, #64	; 0x40
 80012f8:	438a      	bics	r2, r1
 80012fa:	705a      	strb	r2, [r3, #1]
	}

	switch(UI_State)
 80012fc:	4b5f      	ldr	r3, [pc, #380]	; (800147c <UI_Handler+0x268>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b05      	cmp	r3, #5
 8001302:	d900      	bls.n	8001306 <UI_Handler+0xf2>
 8001304:	e0a0      	b.n	8001448 <UI_Handler+0x234>
 8001306:	009a      	lsls	r2, r3, #2
 8001308:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <UI_Handler+0x274>)
 800130a:	18d3      	adds	r3, r2, r3
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
		BUZZER_ON;
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	485d      	ldr	r0, [pc, #372]	; (800148c <UI_Handler+0x278>)
 8001316:	2201      	movs	r2, #1
 8001318:	0019      	movs	r1, r3
 800131a:	f001 faba 	bl	8002892 <HAL_GPIO_WritePin>
		if((sysTime - startTime) >= 50)
 800131e:	4b58      	ldr	r3, [pc, #352]	; (8001480 <UI_Handler+0x26c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b58      	ldr	r3, [pc, #352]	; (8001484 <UI_Handler+0x270>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b31      	cmp	r3, #49	; 0x31
 800132a:	d800      	bhi.n	800132e <UI_Handler+0x11a>
 800132c:	e097      	b.n	800145e <UI_Handler+0x24a>
		{
			UI_State = OFF;
 800132e:	4b53      	ldr	r3, [pc, #332]	; (800147c <UI_Handler+0x268>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	015b      	lsls	r3, r3, #5
 8001338:	4854      	ldr	r0, [pc, #336]	; (800148c <UI_Handler+0x278>)
 800133a:	2200      	movs	r2, #0
 800133c:	0019      	movs	r1, r3
 800133e:	f001 faa8 	bl	8002892 <HAL_GPIO_WritePin>
		}
		break;
 8001342:	e08c      	b.n	800145e <UI_Handler+0x24a>

	case LONG_BEEP:
		BUZZER_ON;
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	015b      	lsls	r3, r3, #5
 8001348:	4850      	ldr	r0, [pc, #320]	; (800148c <UI_Handler+0x278>)
 800134a:	2201      	movs	r2, #1
 800134c:	0019      	movs	r1, r3
 800134e:	f001 faa0 	bl	8002892 <HAL_GPIO_WritePin>
		if((sysTime - startTime) >= 100)
 8001352:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <UI_Handler+0x26c>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b4b      	ldr	r3, [pc, #300]	; (8001484 <UI_Handler+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b63      	cmp	r3, #99	; 0x63
 800135e:	d800      	bhi.n	8001362 <UI_Handler+0x14e>
 8001360:	e07f      	b.n	8001462 <UI_Handler+0x24e>
		{
			UI_State = OFF;
 8001362:	4b46      	ldr	r3, [pc, #280]	; (800147c <UI_Handler+0x268>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	015b      	lsls	r3, r3, #5
 800136c:	4847      	ldr	r0, [pc, #284]	; (800148c <UI_Handler+0x278>)
 800136e:	2200      	movs	r2, #0
 8001370:	0019      	movs	r1, r3
 8001372:	f001 fa8e 	bl	8002892 <HAL_GPIO_WritePin>
		}
		break;
 8001376:	e074      	b.n	8001462 <UI_Handler+0x24e>

	case ERROR:
		if(!flags.error)
 8001378:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <UI_Handler+0x264>)
 800137a:	789b      	ldrb	r3, [r3, #2]
 800137c:	2201      	movs	r2, #1
 800137e:	4013      	ands	r3, r2
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <UI_Handler+0x178>
			UI_State = OFF;
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <UI_Handler+0x268>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
		if(!((sysTime - startTime) % 50))
 800138c:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <UI_Handler+0x26c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <UI_Handler+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2132      	movs	r1, #50	; 0x32
 8001398:	0018      	movs	r0, r3
 800139a:	f7fe ff4d 	bl	8000238 <__aeabi_uidivmod>
 800139e:	1e0b      	subs	r3, r1, #0
 80013a0:	d161      	bne.n	8001466 <UI_Handler+0x252>
		{
			BUZZER_Toggle;
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	015b      	lsls	r3, r3, #5
 80013a6:	4a39      	ldr	r2, [pc, #228]	; (800148c <UI_Handler+0x278>)
 80013a8:	0019      	movs	r1, r3
 80013aa:	0010      	movs	r0, r2
 80013ac:	f001 fa8e 	bl	80028cc <HAL_GPIO_TogglePin>
			BACKLIGHT_RED_Toggle;
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	021a      	lsls	r2, r3, #8
 80013b4:	2390      	movs	r3, #144	; 0x90
 80013b6:	05db      	lsls	r3, r3, #23
 80013b8:	0011      	movs	r1, r2
 80013ba:	0018      	movs	r0, r3
 80013bc:	f001 fa86 	bl	80028cc <HAL_GPIO_TogglePin>
		}
		break;
 80013c0:	e051      	b.n	8001466 <UI_Handler+0x252>

	case NOTICE:
		if(!((sysTime - startTime) % 35))
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <UI_Handler+0x26c>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <UI_Handler+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2123      	movs	r1, #35	; 0x23
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7fe ff32 	bl	8000238 <__aeabi_uidivmod>
 80013d4:	1e0b      	subs	r3, r1, #0
 80013d6:	d106      	bne.n	80013e6 <UI_Handler+0x1d2>
		{
			BUZZER_Toggle;
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	015b      	lsls	r3, r3, #5
 80013dc:	4a2b      	ldr	r2, [pc, #172]	; (800148c <UI_Handler+0x278>)
 80013de:	0019      	movs	r1, r3
 80013e0:	0010      	movs	r0, r2
 80013e2:	f001 fa73 	bl	80028cc <HAL_GPIO_TogglePin>
		}
		if((sysTime - startTime) >= 209)
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <UI_Handler+0x26c>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <UI_Handler+0x270>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2bd0      	cmp	r3, #208	; 0xd0
 80013f2:	d93a      	bls.n	800146a <UI_Handler+0x256>
			UI_State = OFF;
 80013f4:	4b21      	ldr	r3, [pc, #132]	; (800147c <UI_Handler+0x268>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
		break;
 80013fa:	e036      	b.n	800146a <UI_Handler+0x256>

	case DONE:
		if(!((sysTime - startTime) % 50))
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <UI_Handler+0x26c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <UI_Handler+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2132      	movs	r1, #50	; 0x32
 8001408:	0018      	movs	r0, r3
 800140a:	f7fe ff15 	bl	8000238 <__aeabi_uidivmod>
 800140e:	1e0b      	subs	r3, r1, #0
 8001410:	d10d      	bne.n	800142e <UI_Handler+0x21a>
		{
			BUZZER_Toggle;
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	015b      	lsls	r3, r3, #5
 8001416:	4a1d      	ldr	r2, [pc, #116]	; (800148c <UI_Handler+0x278>)
 8001418:	0019      	movs	r1, r3
 800141a:	0010      	movs	r0, r2
 800141c:	f001 fa56 	bl	80028cc <HAL_GPIO_TogglePin>
			BACKLIGHT_GREEN_Toggle;
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <UI_Handler+0x27c>)
 8001426:	0019      	movs	r1, r3
 8001428:	0010      	movs	r0, r2
 800142a:	f001 fa4f 	bl	80028cc <HAL_GPIO_TogglePin>
		}
		if((sysTime - startTime) >= 299)
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <UI_Handler+0x26c>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <UI_Handler+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1ad2      	subs	r2, r2, r3
 8001438:	2395      	movs	r3, #149	; 0x95
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	429a      	cmp	r2, r3
 800143e:	d916      	bls.n	800146e <UI_Handler+0x25a>
			UI_State = OFF;
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <UI_Handler+0x268>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
		break;
 8001446:	e012      	b.n	800146e <UI_Handler+0x25a>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	015b      	lsls	r3, r3, #5
 800144c:	480f      	ldr	r0, [pc, #60]	; (800148c <UI_Handler+0x278>)
 800144e:	2200      	movs	r2, #0
 8001450:	0019      	movs	r1, r3
 8001452:	f001 fa1e 	bl	8002892 <HAL_GPIO_WritePin>
		setColour(BACKLIGHT_OFF);
 8001456:	2003      	movs	r0, #3
 8001458:	f7fe ffde 	bl	8000418 <setColour>
		break;
 800145c:	e008      	b.n	8001470 <UI_Handler+0x25c>
		break;
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	e006      	b.n	8001470 <UI_Handler+0x25c>
		break;
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	e004      	b.n	8001470 <UI_Handler+0x25c>
		break;
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	e002      	b.n	8001470 <UI_Handler+0x25c>
		break;
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	e000      	b.n	8001470 <UI_Handler+0x25c>
		break;
 800146e:	46c0      	nop			; (mov r8, r8)

	}
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	20000590 	.word	0x20000590
 800147c:	2000020e 	.word	0x2000020e
 8001480:	200001fc 	.word	0x200001fc
 8001484:	20000210 	.word	0x20000210
 8001488:	0800bb7c 	.word	0x0800bb7c
 800148c:	48000800 	.word	0x48000800
 8001490:	48000400 	.word	0x48000400

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	e7fe      	b.n	800149c <Error_Handler+0x8>

0800149e <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 80014a6:	2018      	movs	r0, #24
 80014a8:	f009 feb8 	bl	800b21c <malloc>
 80014ac:	0003      	movs	r3, r0
 80014ae:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <createBuffer+0x1c>
	{
		return NULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e022      	b.n	8001500 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	0018      	movs	r0, r3
 80014be:	f009 fead 	bl	800b21c <malloc>
 80014c2:	0003      	movs	r3, r0
 80014c4:	001a      	movs	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d105      	bne.n	80014de <createBuffer+0x40>
	{
		free(buffer);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f009 feab 	bl	800b230 <free>
		return NULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	e010      	b.n	8001500 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	1e5a      	subs	r2, r3, #1
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2201      	movs	r2, #1
 80014fc:	751a      	strb	r2, [r3, #20]

	return buffer;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b004      	add	sp, #16
 8001506:	bd80      	pop	{r7, pc}

08001508 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	000a      	movs	r2, r1
 8001512:	1cfb      	adds	r3, r7, #3
 8001514:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7d1b      	ldrb	r3, [r3, #20]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d101      	bne.n	8001522 <push+0x1a>
		return BUFFER_FULL;
 800151e:	2302      	movs	r3, #2
 8001520:	e025      	b.n	800156e <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	0019      	movs	r1, r3
 800152e:	0010      	movs	r0, r2
 8001530:	f7fe ff6c 	bl	800040c <__aeabi_idivmod>
 8001534:	000b      	movs	r3, r1
 8001536:	001a      	movs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	18d3      	adds	r3, r2, r3
 8001550:	1cfa      	adds	r2, r7, #3
 8001552:	7812      	ldrb	r2, [r2, #0]
 8001554:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	429a      	cmp	r2, r3
 8001560:	db01      	blt.n	8001566 <push+0x5e>
 8001562:	2202      	movs	r2, #2
 8001564:	e000      	b.n	8001568 <push+0x60>
 8001566:	2200      	movs	r2, #0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	b002      	add	sp, #8
 8001574:	bd80      	pop	{r7, pc}

08001576 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6899      	ldr	r1, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	18cb      	adds	r3, r1, r3
 800158e:	429a      	cmp	r2, r3
 8001590:	da01      	bge.n	8001596 <pushStr+0x20>
		return BUFFER_FULL;
 8001592:	2302      	movs	r3, #2
 8001594:	e013      	b.n	80015be <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e00b      	b.n	80015b4 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	18d3      	adds	r3, r2, r3
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	0011      	movs	r1, r2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff ffad 	bl	8001508 <push>
	for(int i = 0; i < len; i++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dbef      	blt.n	800159c <pushStr+0x26>
	}

	return BUFFER_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b006      	add	sp, #24
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7d1b      	ldrb	r3, [r3, #20]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <pop+0x16>
		return BUFFER_EMPTY;
 80015d8:	2301      	movs	r3, #1
 80015da:	e023      	b.n	8001624 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	18d3      	adds	r3, r2, r3
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	0019      	movs	r1, r3
 80015f8:	0010      	movs	r0, r2
 80015fa:	f7fe ff07 	bl	800040c <__aeabi_idivmod>
 80015fe:	000b      	movs	r3, r1
 8001600:	001a      	movs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	1e5a      	subs	r2, r3, #1
 8001616:	4313      	orrs	r3, r2
 8001618:	0fdb      	lsrs	r3, r3, #31
 800161a:	b2db      	uxtb	r3, r3
 800161c:	001a      	movs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x44>)
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_MspInit+0x44>)
 8001638:	2101      	movs	r1, #1
 800163a:	430a      	orrs	r2, r1
 800163c:	619a      	str	r2, [r3, #24]
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x44>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2201      	movs	r2, #1
 8001644:	4013      	ands	r3, r2
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x44>)
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_MspInit+0x44>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	0549      	lsls	r1, r1, #21
 8001654:	430a      	orrs	r2, r1
 8001656:	61da      	str	r2, [r3, #28]
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_MspInit+0x44>)
 800165a:	69da      	ldr	r2, [r3, #28]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	055b      	lsls	r3, r3, #21
 8001660:	4013      	ands	r3, r2
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	46bd      	mov	sp, r7
 800166a:	b002      	add	sp, #8
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b08d      	sub	sp, #52	; 0x34
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	241c      	movs	r4, #28
 800167e:	193b      	adds	r3, r7, r4
 8001680:	0018      	movs	r0, r3
 8001682:	2314      	movs	r3, #20
 8001684:	001a      	movs	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	f009 fddc 	bl	800b244 <memset>
  if(hadc->Instance==ADC1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <HAL_ADC_MspInit+0x148>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d000      	beq.n	8001698 <HAL_ADC_MspInit+0x24>
 8001696:	e08d      	b.n	80017b4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001698:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 800169e:	2180      	movs	r1, #128	; 0x80
 80016a0:	0089      	lsls	r1, r1, #2
 80016a2:	430a      	orrs	r2, r1
 80016a4:	619a      	str	r2, [r3, #24]
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b4:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 80016b6:	695a      	ldr	r2, [r3, #20]
 80016b8:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	0309      	lsls	r1, r1, #12
 80016be:	430a      	orrs	r2, r1
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	031b      	lsls	r3, r3, #12
 80016ca:	4013      	ands	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	0289      	lsls	r1, r1, #10
 80016da:	430a      	orrs	r2, r1
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	029b      	lsls	r3, r3, #10
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	02c9      	lsls	r1, r1, #11
 80016f6:	430a      	orrs	r2, r1
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <HAL_ADC_MspInit+0x14c>)
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	02db      	lsls	r3, r3, #11
 8001702:	4013      	ands	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001708:	193b      	adds	r3, r7, r4
 800170a:	223f      	movs	r2, #63	; 0x3f
 800170c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170e:	193b      	adds	r3, r7, r4
 8001710:	2203      	movs	r2, #3
 8001712:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	193b      	adds	r3, r7, r4
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171a:	193b      	adds	r3, r7, r4
 800171c:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <HAL_ADC_MspInit+0x150>)
 800171e:	0019      	movs	r1, r3
 8001720:	0010      	movs	r0, r2
 8001722:	f000 ff21 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001726:	193b      	adds	r3, r7, r4
 8001728:	22ff      	movs	r2, #255	; 0xff
 800172a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172c:	193b      	adds	r3, r7, r4
 800172e:	2203      	movs	r2, #3
 8001730:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	193b      	adds	r3, r7, r4
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	193a      	adds	r2, r7, r4
 800173a:	2390      	movs	r3, #144	; 0x90
 800173c:	05db      	lsls	r3, r3, #23
 800173e:	0011      	movs	r1, r2
 8001740:	0018      	movs	r0, r3
 8001742:	f000 ff11 	bl	8002568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001746:	193b      	adds	r3, r7, r4
 8001748:	2203      	movs	r2, #3
 800174a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174c:	193b      	adds	r3, r7, r4
 800174e:	2203      	movs	r2, #3
 8001750:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	193b      	adds	r3, r7, r4
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	193b      	adds	r3, r7, r4
 800175a:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <HAL_ADC_MspInit+0x154>)
 800175c:	0019      	movs	r1, r3
 800175e:	0010      	movs	r0, r2
 8001760:	f000 ff02 	bl	8002568 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_ADC_MspInit+0x158>)
 8001766:	4a1a      	ldr	r2, [pc, #104]	; (80017d0 <HAL_ADC_MspInit+0x15c>)
 8001768:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_ADC_MspInit+0x158>)
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_ADC_MspInit+0x158>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_ADC_MspInit+0x158>)
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_ADC_MspInit+0x158>)
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	0052      	lsls	r2, r2, #1
 8001782:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_ADC_MspInit+0x158>)
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	00d2      	lsls	r2, r2, #3
 800178a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_ADC_MspInit+0x158>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_ADC_MspInit+0x158>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_ADC_MspInit+0x158>)
 800179a:	0018      	movs	r0, r3
 800179c:	f000 fd60 	bl	8002260 <HAL_DMA_Init>
 80017a0:	1e03      	subs	r3, r0, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80017a4:	f7ff fe76 	bl	8001494 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_ADC_MspInit+0x158>)
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_ADC_MspInit+0x158>)
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017b4:	46c0      	nop			; (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b00d      	add	sp, #52	; 0x34
 80017ba:	bd90      	pop	{r4, r7, pc}
 80017bc:	40012400 	.word	0x40012400
 80017c0:	40021000 	.word	0x40021000
 80017c4:	48000800 	.word	0x48000800
 80017c8:	48000400 	.word	0x48000400
 80017cc:	20000594 	.word	0x20000594
 80017d0:	40020008 	.word	0x40020008

080017d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b08b      	sub	sp, #44	; 0x2c
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	2414      	movs	r4, #20
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	0018      	movs	r0, r3
 80017e2:	2314      	movs	r3, #20
 80017e4:	001a      	movs	r2, r3
 80017e6:	2100      	movs	r1, #0
 80017e8:	f009 fd2c 	bl	800b244 <memset>
  if(hspi->Instance==SPI1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <HAL_SPI_MspInit+0x90>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d131      	bne.n	800185a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_SPI_MspInit+0x94>)
 80017f8:	699a      	ldr	r2, [r3, #24]
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_SPI_MspInit+0x94>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0149      	lsls	r1, r1, #5
 8001800:	430a      	orrs	r2, r1
 8001802:	619a      	str	r2, [r3, #24]
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_SPI_MspInit+0x94>)
 8001806:	699a      	ldr	r2, [r3, #24]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	015b      	lsls	r3, r3, #5
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_SPI_MspInit+0x94>)
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_SPI_MspInit+0x94>)
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	02c9      	lsls	r1, r1, #11
 800181c:	430a      	orrs	r2, r1
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_SPI_MspInit+0x94>)
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	02db      	lsls	r3, r3, #11
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800182e:	0021      	movs	r1, r4
 8001830:	187b      	adds	r3, r7, r1
 8001832:	2238      	movs	r2, #56	; 0x38
 8001834:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	187b      	adds	r3, r7, r1
 8001838:	2202      	movs	r2, #2
 800183a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	187b      	adds	r3, r7, r1
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001842:	187b      	adds	r3, r7, r1
 8001844:	2203      	movs	r2, #3
 8001846:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001848:	187b      	adds	r3, r7, r1
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	187b      	adds	r3, r7, r1
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_SPI_MspInit+0x98>)
 8001852:	0019      	movs	r1, r3
 8001854:	0010      	movs	r0, r2
 8001856:	f000 fe87 	bl	8002568 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b00b      	add	sp, #44	; 0x2c
 8001860:	bd90      	pop	{r4, r7, pc}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	40013000 	.word	0x40013000
 8001868:	40021000 	.word	0x40021000
 800186c:	48000400 	.word	0x48000400

08001870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_TIM_Base_MspInit+0x48>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d115      	bne.n	80018ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_TIM_Base_MspInit+0x4c>)
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_TIM_Base_MspInit+0x4c>)
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	0049      	lsls	r1, r1, #1
 800188c:	430a      	orrs	r2, r1
 800188e:	61da      	str	r2, [r3, #28]
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_TIM_Base_MspInit+0x4c>)
 8001892:	69da      	ldr	r2, [r3, #28]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	2013      	movs	r0, #19
 80018a4:	f000 fcaa 	bl	80021fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80018a8:	2013      	movs	r0, #19
 80018aa:	f000 fcbc 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b004      	add	sp, #16
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	40002000 	.word	0x40002000
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b08b      	sub	sp, #44	; 0x2c
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	2414      	movs	r4, #20
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	0018      	movs	r0, r3
 80018ce:	2314      	movs	r3, #20
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f009 fcb6 	bl	800b244 <memset>
  if(huart->Instance==USART3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a20      	ldr	r2, [pc, #128]	; (8001960 <HAL_UART_MspInit+0xa0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d13a      	bne.n	8001958 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_UART_MspInit+0xa4>)
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <HAL_UART_MspInit+0xa4>)
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	02c9      	lsls	r1, r1, #11
 80018ec:	430a      	orrs	r2, r1
 80018ee:	61da      	str	r2, [r3, #28]
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_UART_MspInit+0xa4>)
 80018f2:	69da      	ldr	r2, [r3, #28]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	02db      	lsls	r3, r3, #11
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_UART_MspInit+0xa4>)
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_UART_MspInit+0xa4>)
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	0309      	lsls	r1, r1, #12
 8001908:	430a      	orrs	r2, r1
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_UART_MspInit+0xa4>)
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	031b      	lsls	r3, r3, #12
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800191a:	193b      	adds	r3, r7, r4
 800191c:	22c0      	movs	r2, #192	; 0xc0
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	0021      	movs	r1, r4
 8001924:	187b      	adds	r3, r7, r1
 8001926:	2202      	movs	r2, #2
 8001928:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	187b      	adds	r3, r7, r1
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001930:	187b      	adds	r3, r7, r1
 8001932:	2203      	movs	r2, #3
 8001934:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001936:	187b      	adds	r3, r7, r1
 8001938:	2201      	movs	r2, #1
 800193a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193c:	187b      	adds	r3, r7, r1
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_UART_MspInit+0xa8>)
 8001940:	0019      	movs	r1, r3
 8001942:	0010      	movs	r0, r2
 8001944:	f000 fe10 	bl	8002568 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	201d      	movs	r0, #29
 800194e:	f000 fc55 	bl	80021fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001952:	201d      	movs	r0, #29
 8001954:	f000 fc67 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b00b      	add	sp, #44	; 0x2c
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	40004800 	.word	0x40004800
 8001964:	40021000 	.word	0x40021000
 8001968:	48000800 	.word	0x48000800

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <NMI_Handler+0x4>

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001990:	f000 f91e 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	0018      	movs	r0, r3
 80019a4:	f000 ffae 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	0018      	movs	r0, r3
 80019ae:	f000 ffa9 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <DMA1_Channel1_IRQHandler+0x14>)
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 fd13 	bl	80023ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	20000594 	.word	0x20000594

080019d0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <TIM14_IRQHandler+0x14>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f003 fdd4 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	20000548 	.word	0x20000548

080019e8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <USART3_4_IRQHandler+0x14>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f004 fa36 	bl	8005e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	2000045c 	.word	0x2000045c

08001a00 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <USB_IRQHandler+0x14>)
 8001a06:	0018      	movs	r0, r3
 8001a08:	f001 f8ce 	bl	8002ba8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	200012b4 	.word	0x200012b4

08001a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <_sbrk+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <_sbrk+0x60>)
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_sbrk+0x64>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <_sbrk+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	18d3      	adds	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d207      	bcs.n	8001a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a48:	f009 fbbe 	bl	800b1c8 <__errno>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	425b      	negs	r3, r3
 8001a56:	e009      	b.n	8001a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	18d2      	adds	r2, r2, r3
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <_sbrk+0x64>)
 8001a68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b006      	add	sp, #24
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20004000 	.word	0x20004000
 8001a78:	00000400 	.word	0x00000400
 8001a7c:	20000214 	.word	0x20000214
 8001a80:	200015b8 	.word	0x200015b8

08001a84 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <testHandler>:

extern Flags flags;

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	if(flags.startRequest)
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <testHandler+0x30>)
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <testHandler+0x2a>
	{
		if(testPhase == WAITING)
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <testHandler+0x34>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <testHandler+0x20>
		{
			startTest();
 8001aaa:	f000 f80d 	bl	8001ac8 <startTest>
		else
		{
			flags.startConflict = 1;
		}
	}
}
 8001aae:	e004      	b.n	8001aba <testHandler+0x2a>
			flags.startConflict = 1;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <testHandler+0x30>)
 8001ab2:	789a      	ldrb	r2, [r3, #2]
 8001ab4:	2108      	movs	r1, #8
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	709a      	strb	r2, [r3, #2]
}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000590 	.word	0x20000590
 8001ac4:	20000218 	.word	0x20000218

08001ac8 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	flags.shortBeep = 1;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <startTest+0x1c>)
 8001ace:	785a      	ldrb	r2, [r3, #1]
 8001ad0:	2140      	movs	r1, #64	; 0x40
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	705a      	strb	r2, [r3, #1]
	testPhase = START;
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <startTest+0x20>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]

	//poslat konfiguraci shift registrům
	//Zobrazit text na displej
	//spustit měření
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	20000590 	.word	0x20000590
 8001ae8:	20000218 	.word	0x20000218

08001aec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aec:	480d      	ldr	r0, [pc, #52]	; (8001b24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <LoopForever+0xe>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b08:	4c0b      	ldr	r4, [pc, #44]	; (8001b38 <LoopForever+0x16>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b16:	f7ff ffb5 	bl	8001a84 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b1a:	f009 fb5b 	bl	800b1d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b1e:	f7fe fd25 	bl	800056c <main>

08001b22 <LoopForever>:

LoopForever:
    b LoopForever
 8001b22:	e7fe      	b.n	8001b22 <LoopForever>
  ldr   r0, =_estack
 8001b24:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b30:	0800bcd8 	.word	0x0800bcd8
  ldr r2, =_sbss
 8001b34:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b38:	200015b8 	.word	0x200015b8

08001b3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC1_COMP_IRQHandler>
	...

08001b40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_Init+0x24>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_Init+0x24>)
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b50:	2003      	movs	r0, #3
 8001b52:	f000 f809 	bl	8001b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b56:	f7ff fd69 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	40022000 	.word	0x40022000

08001b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_InitTick+0x5c>)
 8001b72:	681c      	ldr	r4, [r3, #0]
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_InitTick+0x60>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	0019      	movs	r1, r3
 8001b7a:	23fa      	movs	r3, #250	; 0xfa
 8001b7c:	0098      	lsls	r0, r3, #2
 8001b7e:	f7fe fad5 	bl	800012c <__udivsi3>
 8001b82:	0003      	movs	r3, r0
 8001b84:	0019      	movs	r1, r3
 8001b86:	0020      	movs	r0, r4
 8001b88:	f7fe fad0 	bl	800012c <__udivsi3>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f000 fb59 	bl	8002246 <HAL_SYSTICK_Config>
 8001b94:	1e03      	subs	r3, r0, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e00f      	b.n	8001bbc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d80b      	bhi.n	8001bba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	425b      	negs	r3, r3
 8001ba8:	2200      	movs	r2, #0
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 fb26 	bl	80021fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_InitTick+0x64>)
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b003      	add	sp, #12
 8001bc2:	bd90      	pop	{r4, r7, pc}
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x1c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	001a      	movs	r2, r3
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	18d2      	adds	r2, r2, r3
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_IncTick+0x20>)
 8001be2:	601a      	str	r2, [r3, #0]
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	20000618 	.word	0x20000618

08001bf4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_GetTick+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	20000618 	.word	0x20000618

08001c08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c10:	230f      	movs	r3, #15
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e125      	b.n	8001e72 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10a      	bne.n	8001c44 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2234      	movs	r2, #52	; 0x34
 8001c38:	2100      	movs	r1, #0
 8001c3a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f7ff fd18 	bl	8001674 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	2210      	movs	r2, #16
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d000      	beq.n	8001c50 <HAL_ADC_Init+0x48>
 8001c4e:	e103      	b.n	8001e58 <HAL_ADC_Init+0x250>
 8001c50:	230f      	movs	r3, #15
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d000      	beq.n	8001c5c <HAL_ADC_Init+0x54>
 8001c5a:	e0fd      	b.n	8001e58 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2204      	movs	r2, #4
 8001c64:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001c66:	d000      	beq.n	8001c6a <HAL_ADC_Init+0x62>
 8001c68:	e0f6      	b.n	8001e58 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	4a83      	ldr	r2, [pc, #524]	; (8001e7c <HAL_ADC_Init+0x274>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	2202      	movs	r2, #2
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2203      	movs	r2, #3
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d112      	bne.n	8001cae <HAL_ADC_Init+0xa6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d009      	beq.n	8001caa <HAL_ADC_Init+0xa2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Init+0xa6>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_ADC_Init+0xa8>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d116      	bne.n	8001ce2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2218      	movs	r2, #24
 8001cbc:	4393      	bics	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	0899      	lsrs	r1, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4964      	ldr	r1, [pc, #400]	; (8001e80 <HAL_ADC_Init+0x278>)
 8001cee:	400a      	ands	r2, r1
 8001cf0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7e1b      	ldrb	r3, [r3, #24]
 8001cf6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7e5b      	ldrb	r3, [r3, #25]
 8001cfc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cfe:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7e9b      	ldrb	r3, [r3, #26]
 8001d04:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d06:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d002      	beq.n	8001d16 <HAL_ADC_Init+0x10e>
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	015b      	lsls	r3, r3, #5
 8001d14:	e000      	b.n	8001d18 <HAL_ADC_Init+0x110>
 8001d16:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d18:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d1e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_Init+0x124>
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e000      	b.n	8001d2e <HAL_ADC_Init+0x126>
 8001d2c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001d2e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2124      	movs	r1, #36	; 0x24
 8001d34:	5c5b      	ldrb	r3, [r3, r1]
 8001d36:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d38:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7edb      	ldrb	r3, [r3, #27]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d115      	bne.n	8001d74 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7e9b      	ldrb	r3, [r3, #26]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	0252      	lsls	r2, r2, #9
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	e00b      	b.n	8001d74 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	2220      	movs	r2, #32
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	23c2      	movs	r3, #194	; 0xc2
 8001d7a:	33ff      	adds	r3, #255	; 0xff
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d007      	beq.n	8001d90 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68d9      	ldr	r1, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	055b      	lsls	r3, r3, #21
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d01b      	beq.n	8001de4 <HAL_ADC_Init+0x1dc>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d017      	beq.n	8001de4 <HAL_ADC_Init+0x1dc>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d013      	beq.n	8001de4 <HAL_ADC_Init+0x1dc>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d00f      	beq.n	8001de4 <HAL_ADC_Init+0x1dc>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d00b      	beq.n	8001de4 <HAL_ADC_Init+0x1dc>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d007      	beq.n	8001de4 <HAL_ADC_Init+0x1dc>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d003      	beq.n	8001de4 <HAL_ADC_Init+0x1dc>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	2b07      	cmp	r3, #7
 8001de2:	d112      	bne.n	8001e0a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2107      	movs	r1, #7
 8001df0:	438a      	bics	r2, r1
 8001df2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6959      	ldr	r1, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	2207      	movs	r2, #7
 8001e00:	401a      	ands	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <HAL_ADC_Init+0x27c>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d10b      	bne.n	8001e32 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	2203      	movs	r2, #3
 8001e26:	4393      	bics	r3, r2
 8001e28:	2201      	movs	r2, #1
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e30:	e01c      	b.n	8001e6c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	2212      	movs	r2, #18
 8001e38:	4393      	bics	r3, r2
 8001e3a:	2210      	movs	r2, #16
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e46:	2201      	movs	r2, #1
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001e4e:	230f      	movs	r3, #15
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e56:	e009      	b.n	8001e6c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	2210      	movs	r2, #16
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001e64:	230f      	movs	r3, #15
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	781b      	ldrb	r3, [r3, #0]
}
 8001e72:	0018      	movs	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b004      	add	sp, #16
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	fffffefd 	.word	0xfffffefd
 8001e80:	fffe0219 	.word	0xfffe0219
 8001e84:	833fffe7 	.word	0x833fffe7

08001e88 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e92:	230f      	movs	r3, #15
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	055b      	lsls	r3, r3, #21
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d011      	beq.n	8001ece <HAL_ADC_ConfigChannel+0x46>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d00d      	beq.n	8001ece <HAL_ADC_ConfigChannel+0x46>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d009      	beq.n	8001ece <HAL_ADC_ConfigChannel+0x46>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d005      	beq.n	8001ece <HAL_ADC_ConfigChannel+0x46>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d001      	beq.n	8001ece <HAL_ADC_ConfigChannel+0x46>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2234      	movs	r2, #52	; 0x34
 8001ed2:	5c9b      	ldrb	r3, [r3, r2]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x54>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e0d0      	b.n	800207e <HAL_ADC_ConfigChannel+0x1f6>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2234      	movs	r2, #52	; 0x34
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2204      	movs	r2, #4
 8001eec:	4013      	ands	r3, r2
 8001eee:	d000      	beq.n	8001ef2 <HAL_ADC_ConfigChannel+0x6a>
 8001ef0:	e0b4      	b.n	800205c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4a64      	ldr	r2, [pc, #400]	; (8002088 <HAL_ADC_ConfigChannel+0x200>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d100      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x76>
 8001efc:	e082      	b.n	8002004 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	055b      	lsls	r3, r3, #21
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d037      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x108>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d033      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x108>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d02f      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x108>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d02b      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x108>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d027      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x108>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d023      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x108>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d01f      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x108>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	2b07      	cmp	r3, #7
 8001f56:	d01b      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	2107      	movs	r1, #7
 8001f64:	400b      	ands	r3, r1
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d012      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2107      	movs	r1, #7
 8001f76:	438a      	bics	r2, r1
 8001f78:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6959      	ldr	r1, [r3, #20]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2207      	movs	r2, #7
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d007      	beq.n	8001fa8 <HAL_ADC_ConfigChannel+0x120>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b11      	cmp	r3, #17
 8001f9e:	d003      	beq.n	8001fa8 <HAL_ADC_ConfigChannel+0x120>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b12      	cmp	r3, #18
 8001fa6:	d163      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001fa8:	4b38      	ldr	r3, [pc, #224]	; (800208c <HAL_ADC_ConfigChannel+0x204>)
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d009      	beq.n	8001fc8 <HAL_ADC_ConfigChannel+0x140>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b11      	cmp	r3, #17
 8001fba:	d102      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x13a>
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	03db      	lsls	r3, r3, #15
 8001fc0:	e004      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x144>
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	045b      	lsls	r3, r3, #17
 8001fc6:	e001      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x144>
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	4a2f      	ldr	r2, [pc, #188]	; (800208c <HAL_ADC_ConfigChannel+0x204>)
 8001fce:	430b      	orrs	r3, r1
 8001fd0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d14a      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <HAL_ADC_ConfigChannel+0x208>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	492d      	ldr	r1, [pc, #180]	; (8002094 <HAL_ADC_ConfigChannel+0x20c>)
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7fe f8a3 	bl	800012c <__udivsi3>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	001a      	movs	r2, r3
 8001fea:	0013      	movs	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	189b      	adds	r3, r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ff4:	e002      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f9      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x16e>
 8002002:	e035      	b.n	8002070 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2101      	movs	r1, #1
 8002010:	4099      	lsls	r1, r3
 8002012:	000b      	movs	r3, r1
 8002014:	43d9      	mvns	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	400a      	ands	r2, r1
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b10      	cmp	r3, #16
 8002024:	d007      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x1ae>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b11      	cmp	r3, #17
 800202c:	d003      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x1ae>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b12      	cmp	r3, #18
 8002034:	d11c      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_ADC_ConfigChannel+0x204>)
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d007      	beq.n	8002052 <HAL_ADC_ConfigChannel+0x1ca>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b11      	cmp	r3, #17
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x1c6>
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_ADC_ConfigChannel+0x210>)
 800204c:	e002      	b.n	8002054 <HAL_ADC_ConfigChannel+0x1cc>
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_ADC_ConfigChannel+0x214>)
 8002050:	e000      	b.n	8002054 <HAL_ADC_ConfigChannel+0x1cc>
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_ADC_ConfigChannel+0x218>)
 8002054:	4a0d      	ldr	r2, [pc, #52]	; (800208c <HAL_ADC_ConfigChannel+0x204>)
 8002056:	400b      	ands	r3, r1
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e009      	b.n	8002070 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	2220      	movs	r2, #32
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002068:	230f      	movs	r3, #15
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2234      	movs	r2, #52	; 0x34
 8002074:	2100      	movs	r1, #0
 8002076:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002078:	230f      	movs	r3, #15
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	781b      	ldrb	r3, [r3, #0]
}
 800207e:	0018      	movs	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	b004      	add	sp, #16
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	00001001 	.word	0x00001001
 800208c:	40012708 	.word	0x40012708
 8002090:	20000000 	.word	0x20000000
 8002094:	000f4240 	.word	0x000f4240
 8002098:	ffbfffff 	.word	0xffbfffff
 800209c:	feffffff 	.word	0xfeffffff
 80020a0:	ff7fffff 	.word	0xff7fffff

080020a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	0002      	movs	r2, r0
 80020ac:	1dfb      	adds	r3, r7, #7
 80020ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	1dfb      	adds	r3, r7, #7
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b7f      	cmp	r3, #127	; 0x7f
 80020b6:	d809      	bhi.n	80020cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	001a      	movs	r2, r3
 80020be:	231f      	movs	r3, #31
 80020c0:	401a      	ands	r2, r3
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <__NVIC_EnableIRQ+0x30>)
 80020c4:	2101      	movs	r1, #1
 80020c6:	4091      	lsls	r1, r2
 80020c8:	000a      	movs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]
  }
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b002      	add	sp, #8
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	0002      	movs	r2, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	1dfb      	adds	r3, r7, #7
 80020e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b7f      	cmp	r3, #127	; 0x7f
 80020ec:	d828      	bhi.n	8002140 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ee:	4a2f      	ldr	r2, [pc, #188]	; (80021ac <__NVIC_SetPriority+0xd4>)
 80020f0:	1dfb      	adds	r3, r7, #7
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	33c0      	adds	r3, #192	; 0xc0
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	589b      	ldr	r3, [r3, r2]
 80020fe:	1dfa      	adds	r2, r7, #7
 8002100:	7812      	ldrb	r2, [r2, #0]
 8002102:	0011      	movs	r1, r2
 8002104:	2203      	movs	r2, #3
 8002106:	400a      	ands	r2, r1
 8002108:	00d2      	lsls	r2, r2, #3
 800210a:	21ff      	movs	r1, #255	; 0xff
 800210c:	4091      	lsls	r1, r2
 800210e:	000a      	movs	r2, r1
 8002110:	43d2      	mvns	r2, r2
 8002112:	401a      	ands	r2, r3
 8002114:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	019b      	lsls	r3, r3, #6
 800211a:	22ff      	movs	r2, #255	; 0xff
 800211c:	401a      	ands	r2, r3
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	0018      	movs	r0, r3
 8002124:	2303      	movs	r3, #3
 8002126:	4003      	ands	r3, r0
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800212c:	481f      	ldr	r0, [pc, #124]	; (80021ac <__NVIC_SetPriority+0xd4>)
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b25b      	sxtb	r3, r3
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	430a      	orrs	r2, r1
 8002138:	33c0      	adds	r3, #192	; 0xc0
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800213e:	e031      	b.n	80021a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002140:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <__NVIC_SetPriority+0xd8>)
 8002142:	1dfb      	adds	r3, r7, #7
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	0019      	movs	r1, r3
 8002148:	230f      	movs	r3, #15
 800214a:	400b      	ands	r3, r1
 800214c:	3b08      	subs	r3, #8
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3306      	adds	r3, #6
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	18d3      	adds	r3, r2, r3
 8002156:	3304      	adds	r3, #4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1dfa      	adds	r2, r7, #7
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	0011      	movs	r1, r2
 8002160:	2203      	movs	r2, #3
 8002162:	400a      	ands	r2, r1
 8002164:	00d2      	lsls	r2, r2, #3
 8002166:	21ff      	movs	r1, #255	; 0xff
 8002168:	4091      	lsls	r1, r2
 800216a:	000a      	movs	r2, r1
 800216c:	43d2      	mvns	r2, r2
 800216e:	401a      	ands	r2, r3
 8002170:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	22ff      	movs	r2, #255	; 0xff
 8002178:	401a      	ands	r2, r3
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	0018      	movs	r0, r3
 8002180:	2303      	movs	r3, #3
 8002182:	4003      	ands	r3, r0
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002188:	4809      	ldr	r0, [pc, #36]	; (80021b0 <__NVIC_SetPriority+0xd8>)
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	001c      	movs	r4, r3
 8002190:	230f      	movs	r3, #15
 8002192:	4023      	ands	r3, r4
 8002194:	3b08      	subs	r3, #8
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	430a      	orrs	r2, r1
 800219a:	3306      	adds	r3, #6
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	18c3      	adds	r3, r0, r3
 80021a0:	3304      	adds	r3, #4
 80021a2:	601a      	str	r2, [r3, #0]
}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b003      	add	sp, #12
 80021aa:	bd90      	pop	{r4, r7, pc}
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	1e5a      	subs	r2, r3, #1
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	045b      	lsls	r3, r3, #17
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d301      	bcc.n	80021cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c8:	2301      	movs	r3, #1
 80021ca:	e010      	b.n	80021ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <SysTick_Config+0x44>)
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	3a01      	subs	r2, #1
 80021d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d4:	2301      	movs	r3, #1
 80021d6:	425b      	negs	r3, r3
 80021d8:	2103      	movs	r1, #3
 80021da:	0018      	movs	r0, r3
 80021dc:	f7ff ff7c 	bl	80020d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <SysTick_Config+0x44>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <SysTick_Config+0x44>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	210f      	movs	r1, #15
 8002208:	187b      	adds	r3, r7, r1
 800220a:	1c02      	adds	r2, r0, #0
 800220c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	187b      	adds	r3, r7, r1
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b25b      	sxtb	r3, r3
 8002216:	0011      	movs	r1, r2
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff ff5d 	bl	80020d8 <__NVIC_SetPriority>
}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b004      	add	sp, #16
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	0002      	movs	r2, r0
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002232:	1dfb      	adds	r3, r7, #7
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b25b      	sxtb	r3, r3
 8002238:	0018      	movs	r0, r3
 800223a:	f7ff ff33 	bl	80020a4 <__NVIC_EnableIRQ>
}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b002      	add	sp, #8
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	0018      	movs	r0, r3
 8002252:	f7ff ffaf 	bl	80021b4 <SysTick_Config>
 8002256:	0003      	movs	r3, r0
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e036      	b.n	80022e4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	2102      	movs	r1, #2
 800227c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_DMA_Init+0x8c>)
 800228a:	4013      	ands	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002296:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 f932 	bl	8002530 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2221      	movs	r2, #33	; 0x21
 80022d6:	2101      	movs	r1, #1
 80022d8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}  
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b004      	add	sp, #16
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	ffffc00f 	.word	0xffffc00f

080022f0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2221      	movs	r2, #33	; 0x21
 80022fc:	5c9b      	ldrb	r3, [r3, r2]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d008      	beq.n	8002316 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2204      	movs	r2, #4
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	2100      	movs	r1, #0
 8002310:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e020      	b.n	8002358 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	210e      	movs	r1, #14
 8002322:	438a      	bics	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	438a      	bics	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	2101      	movs	r1, #1
 8002340:	4091      	lsls	r1, r2
 8002342:	000a      	movs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2221      	movs	r2, #33	; 0x21
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2220      	movs	r2, #32
 8002352:	2100      	movs	r1, #0
 8002354:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002368:	210f      	movs	r1, #15
 800236a:	187b      	adds	r3, r7, r1
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2221      	movs	r2, #33	; 0x21
 8002374:	5c9b      	ldrb	r3, [r3, r2]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d006      	beq.n	800238a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2204      	movs	r2, #4
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002382:	187b      	adds	r3, r7, r1
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e028      	b.n	80023dc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	210e      	movs	r1, #14
 8002396:	438a      	bics	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	438a      	bics	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b2:	2101      	movs	r1, #1
 80023b4:	4091      	lsls	r1, r2
 80023b6:	000a      	movs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2221      	movs	r2, #33	; 0x21
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	2100      	movs	r1, #0
 80023c8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d004      	beq.n	80023dc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	0010      	movs	r0, r2
 80023da:	4798      	blx	r3
    } 
  }
  return status;
 80023dc:	230f      	movs	r3, #15
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	781b      	ldrb	r3, [r3, #0]
}
 80023e2:	0018      	movs	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	2204      	movs	r2, #4
 8002408:	409a      	lsls	r2, r3
 800240a:	0013      	movs	r3, r2
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	d024      	beq.n	800245c <HAL_DMA_IRQHandler+0x72>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2204      	movs	r2, #4
 8002416:	4013      	ands	r3, r2
 8002418:	d020      	beq.n	800245c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2220      	movs	r2, #32
 8002422:	4013      	ands	r3, r2
 8002424:	d107      	bne.n	8002436 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2104      	movs	r1, #4
 8002432:	438a      	bics	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	2104      	movs	r1, #4
 8002440:	4091      	lsls	r1, r2
 8002442:	000a      	movs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d100      	bne.n	8002450 <HAL_DMA_IRQHandler+0x66>
 800244e:	e06a      	b.n	8002526 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	0010      	movs	r0, r2
 8002458:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800245a:	e064      	b.n	8002526 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	2202      	movs	r2, #2
 8002462:	409a      	lsls	r2, r3
 8002464:	0013      	movs	r3, r2
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	d02b      	beq.n	80024c4 <HAL_DMA_IRQHandler+0xda>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2202      	movs	r2, #2
 8002470:	4013      	ands	r3, r2
 8002472:	d027      	beq.n	80024c4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2220      	movs	r2, #32
 800247c:	4013      	ands	r3, r2
 800247e:	d10b      	bne.n	8002498 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	210a      	movs	r1, #10
 800248c:	438a      	bics	r2, r1
 800248e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2221      	movs	r2, #33	; 0x21
 8002494:	2101      	movs	r1, #1
 8002496:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a0:	2102      	movs	r1, #2
 80024a2:	4091      	lsls	r1, r2
 80024a4:	000a      	movs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	2100      	movs	r1, #0
 80024ae:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d036      	beq.n	8002526 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	0010      	movs	r0, r2
 80024c0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80024c2:	e030      	b.n	8002526 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	2208      	movs	r2, #8
 80024ca:	409a      	lsls	r2, r3
 80024cc:	0013      	movs	r3, r2
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	d028      	beq.n	8002526 <HAL_DMA_IRQHandler+0x13c>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2208      	movs	r2, #8
 80024d8:	4013      	ands	r3, r2
 80024da:	d024      	beq.n	8002526 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	210e      	movs	r1, #14
 80024e8:	438a      	bics	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f4:	2101      	movs	r1, #1
 80024f6:	4091      	lsls	r1, r2
 80024f8:	000a      	movs	r2, r1
 80024fa:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2221      	movs	r2, #33	; 0x21
 8002506:	2101      	movs	r1, #1
 8002508:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	2100      	movs	r1, #0
 8002510:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	0010      	movs	r0, r2
 8002522:	4798      	blx	r3
    }
   }
}  
 8002524:	e7ff      	b.n	8002526 <HAL_DMA_IRQHandler+0x13c>
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	46bd      	mov	sp, r7
 800252a:	b004      	add	sp, #16
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a08      	ldr	r2, [pc, #32]	; (8002560 <DMA_CalcBaseAndBitshift+0x30>)
 800253e:	4694      	mov	ip, r2
 8002540:	4463      	add	r3, ip
 8002542:	2114      	movs	r1, #20
 8002544:	0018      	movs	r0, r3
 8002546:	f7fd fdf1 	bl	800012c <__udivsi3>
 800254a:	0003      	movs	r3, r0
 800254c:	009a      	lsls	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a03      	ldr	r2, [pc, #12]	; (8002564 <DMA_CalcBaseAndBitshift+0x34>)
 8002556:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}
 8002560:	bffdfff8 	.word	0xbffdfff8
 8002564:	40020000 	.word	0x40020000

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002576:	e155      	b.n	8002824 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4091      	lsls	r1, r2
 8002582:	000a      	movs	r2, r1
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d100      	bne.n	8002590 <HAL_GPIO_Init+0x28>
 800258e:	e146      	b.n	800281e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2203      	movs	r2, #3
 8002596:	4013      	ands	r3, r2
 8002598:	2b01      	cmp	r3, #1
 800259a:	d005      	beq.n	80025a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2203      	movs	r2, #3
 80025a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d130      	bne.n	800260a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	409a      	lsls	r2, r3
 80025b6:	0013      	movs	r3, r2
 80025b8:	43da      	mvns	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	409a      	lsls	r2, r3
 80025ca:	0013      	movs	r3, r2
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025de:	2201      	movs	r2, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
 80025e4:	0013      	movs	r3, r2
 80025e6:	43da      	mvns	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	2201      	movs	r2, #1
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
 80025fc:	0013      	movs	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2203      	movs	r2, #3
 8002610:	4013      	ands	r3, r2
 8002612:	2b03      	cmp	r3, #3
 8002614:	d017      	beq.n	8002646 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	43da      	mvns	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	409a      	lsls	r2, r3
 8002638:	0013      	movs	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2203      	movs	r2, #3
 800264c:	4013      	ands	r3, r2
 800264e:	2b02      	cmp	r3, #2
 8002650:	d123      	bne.n	800269a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	58d3      	ldr	r3, [r2, r3]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2207      	movs	r2, #7
 8002664:	4013      	ands	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	409a      	lsls	r2, r3
 800266c:	0013      	movs	r3, r2
 800266e:	43da      	mvns	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2107      	movs	r1, #7
 800267e:	400b      	ands	r3, r1
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	409a      	lsls	r2, r3
 8002684:	0013      	movs	r3, r2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	6939      	ldr	r1, [r7, #16]
 8002698:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	409a      	lsls	r2, r3
 80026a8:	0013      	movs	r3, r2
 80026aa:	43da      	mvns	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2203      	movs	r2, #3
 80026b8:	401a      	ands	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	409a      	lsls	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	23c0      	movs	r3, #192	; 0xc0
 80026d4:	029b      	lsls	r3, r3, #10
 80026d6:	4013      	ands	r3, r2
 80026d8:	d100      	bne.n	80026dc <HAL_GPIO_Init+0x174>
 80026da:	e0a0      	b.n	800281e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026dc:	4b57      	ldr	r3, [pc, #348]	; (800283c <HAL_GPIO_Init+0x2d4>)
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	4b56      	ldr	r3, [pc, #344]	; (800283c <HAL_GPIO_Init+0x2d4>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	430a      	orrs	r2, r1
 80026e6:	619a      	str	r2, [r3, #24]
 80026e8:	4b54      	ldr	r3, [pc, #336]	; (800283c <HAL_GPIO_Init+0x2d4>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2201      	movs	r2, #1
 80026ee:	4013      	ands	r3, r2
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_GPIO_Init+0x2d8>)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	589b      	ldr	r3, [r3, r2]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2203      	movs	r2, #3
 8002706:	4013      	ands	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	409a      	lsls	r2, r3
 800270e:	0013      	movs	r3, r2
 8002710:	43da      	mvns	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	2390      	movs	r3, #144	; 0x90
 800271c:	05db      	lsls	r3, r3, #23
 800271e:	429a      	cmp	r2, r3
 8002720:	d019      	beq.n	8002756 <HAL_GPIO_Init+0x1ee>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a47      	ldr	r2, [pc, #284]	; (8002844 <HAL_GPIO_Init+0x2dc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0x1ea>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a46      	ldr	r2, [pc, #280]	; (8002848 <HAL_GPIO_Init+0x2e0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_GPIO_Init+0x1e6>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a45      	ldr	r2, [pc, #276]	; (800284c <HAL_GPIO_Init+0x2e4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x1e2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a44      	ldr	r2, [pc, #272]	; (8002850 <HAL_GPIO_Init+0x2e8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_GPIO_Init+0x1de>
 8002742:	2304      	movs	r3, #4
 8002744:	e008      	b.n	8002758 <HAL_GPIO_Init+0x1f0>
 8002746:	2305      	movs	r3, #5
 8002748:	e006      	b.n	8002758 <HAL_GPIO_Init+0x1f0>
 800274a:	2303      	movs	r3, #3
 800274c:	e004      	b.n	8002758 <HAL_GPIO_Init+0x1f0>
 800274e:	2302      	movs	r3, #2
 8002750:	e002      	b.n	8002758 <HAL_GPIO_Init+0x1f0>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_GPIO_Init+0x1f0>
 8002756:	2300      	movs	r3, #0
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	2103      	movs	r1, #3
 800275c:	400a      	ands	r2, r1
 800275e:	0092      	lsls	r2, r2, #2
 8002760:	4093      	lsls	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002768:	4935      	ldr	r1, [pc, #212]	; (8002840 <HAL_GPIO_Init+0x2d8>)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43da      	mvns	r2, r3
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	025b      	lsls	r3, r3, #9
 800278e:	4013      	ands	r3, r2
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800279a:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80027a0:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43da      	mvns	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	029b      	lsls	r3, r3, #10
 80027b8:	4013      	ands	r3, r2
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43da      	mvns	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	035b      	lsls	r3, r3, #13
 80027e2:	4013      	ands	r3, r2
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	43da      	mvns	r2, r3
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	039b      	lsls	r3, r3, #14
 800280c:	4013      	ands	r3, r2
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <HAL_GPIO_Init+0x2ec>)
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3301      	adds	r3, #1
 8002822:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	40da      	lsrs	r2, r3
 800282c:	1e13      	subs	r3, r2, #0
 800282e:	d000      	beq.n	8002832 <HAL_GPIO_Init+0x2ca>
 8002830:	e6a2      	b.n	8002578 <HAL_GPIO_Init+0x10>
  } 
}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b006      	add	sp, #24
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	40010000 	.word	0x40010000
 8002844:	48000400 	.word	0x48000400
 8002848:	48000800 	.word	0x48000800
 800284c:	48000c00 	.word	0x48000c00
 8002850:	48001000 	.word	0x48001000
 8002854:	40010400 	.word	0x40010400

08002858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	000a      	movs	r2, r1
 8002862:	1cbb      	adds	r3, r7, #2
 8002864:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	1cba      	adds	r2, r7, #2
 800286c:	8812      	ldrh	r2, [r2, #0]
 800286e:	4013      	ands	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002872:	230f      	movs	r3, #15
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	e003      	b.n	8002884 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800287c:	230f      	movs	r3, #15
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002884:	230f      	movs	r3, #15
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	781b      	ldrb	r3, [r3, #0]
  }
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b004      	add	sp, #16
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	0008      	movs	r0, r1
 800289c:	0011      	movs	r1, r2
 800289e:	1cbb      	adds	r3, r7, #2
 80028a0:	1c02      	adds	r2, r0, #0
 80028a2:	801a      	strh	r2, [r3, #0]
 80028a4:	1c7b      	adds	r3, r7, #1
 80028a6:	1c0a      	adds	r2, r1, #0
 80028a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028aa:	1c7b      	adds	r3, r7, #1
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028b2:	1cbb      	adds	r3, r7, #2
 80028b4:	881a      	ldrh	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ba:	e003      	b.n	80028c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028bc:	1cbb      	adds	r3, r7, #2
 80028be:	881a      	ldrh	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	000a      	movs	r2, r1
 80028d6:	1cbb      	adds	r3, r7, #2
 80028d8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028e0:	1cbb      	adds	r3, r7, #2
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	1cb9      	adds	r1, r7, #2
 80028f0:	8809      	ldrh	r1, [r1, #0]
 80028f2:	400b      	ands	r3, r1
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	619a      	str	r2, [r3, #24]
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b004      	add	sp, #16
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	0002      	movs	r2, r0
 800290c:	1dbb      	adds	r3, r7, #6
 800290e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	1dba      	adds	r2, r7, #6
 8002916:	8812      	ldrh	r2, [r2, #0]
 8002918:	4013      	ands	r3, r2
 800291a:	d008      	beq.n	800292e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800291e:	1dba      	adds	r2, r7, #6
 8002920:	8812      	ldrh	r2, [r2, #0]
 8002922:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002924:	1dbb      	adds	r3, r7, #6
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	0018      	movs	r0, r3
 800292a:	f7fd fde7 	bl	80004fc <HAL_GPIO_EXTI_Callback>
  }
}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	46bd      	mov	sp, r7
 8002932:	b002      	add	sp, #8
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	40010400 	.word	0x40010400

0800293c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800293c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293e:	b08b      	sub	sp, #44	; 0x2c
 8002940:	af06      	add	r7, sp, #24
 8002942:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0ff      	b.n	8002b4e <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a81      	ldr	r2, [pc, #516]	; (8002b58 <HAL_PCD_Init+0x21c>)
 8002952:	5c9b      	ldrb	r3, [r3, r2]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d108      	bne.n	800296c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	23aa      	movs	r3, #170	; 0xaa
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	2100      	movs	r1, #0
 8002962:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0018      	movs	r0, r3
 8002968:	f008 f8d0 	bl	800ab0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a7a      	ldr	r2, [pc, #488]	; (8002b58 <HAL_PCD_Init+0x21c>)
 8002970:	2103      	movs	r1, #3
 8002972:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0018      	movs	r0, r3
 800297a:	f004 f96f 	bl	8006c5c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297e:	230f      	movs	r3, #15
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e058      	b.n	8002a3a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002988:	200f      	movs	r0, #15
 800298a:	183b      	adds	r3, r7, r0
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	0013      	movs	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	189b      	adds	r3, r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	18cb      	adds	r3, r1, r3
 800299c:	3301      	adds	r3, #1
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029a2:	183b      	adds	r3, r7, r0
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	0013      	movs	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	183a      	adds	r2, r7, r0
 80029b4:	7812      	ldrb	r2, [r2, #0]
 80029b6:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029b8:	0004      	movs	r4, r0
 80029ba:	183b      	adds	r3, r7, r0
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	b298      	uxth	r0, r3
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	0013      	movs	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	18cb      	adds	r3, r1, r3
 80029d0:	3336      	adds	r3, #54	; 0x36
 80029d2:	1c02      	adds	r2, r0, #0
 80029d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	0013      	movs	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	189b      	adds	r3, r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	18cb      	adds	r3, r1, r3
 80029e8:	3303      	adds	r3, #3
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	0013      	movs	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	189b      	adds	r3, r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	18cb      	adds	r3, r1, r3
 80029fe:	3338      	adds	r3, #56	; 0x38
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	781a      	ldrb	r2, [r3, #0]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	0013      	movs	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	189b      	adds	r3, r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	18cb      	adds	r3, r1, r3
 8002a14:	333c      	adds	r3, #60	; 0x3c
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	0013      	movs	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	189b      	adds	r3, r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	18cb      	adds	r3, r1, r3
 8002a2a:	3340      	adds	r3, #64	; 0x40
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	193b      	adds	r3, r7, r4
 8002a36:	3201      	adds	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d39f      	bcc.n	8002988 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a48:	187b      	adds	r3, r7, r1
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e056      	b.n	8002afe <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a50:	240f      	movs	r4, #15
 8002a52:	193b      	adds	r3, r7, r4
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	236a      	movs	r3, #106	; 0x6a
 8002a5a:	33ff      	adds	r3, #255	; 0xff
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	0013      	movs	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	189b      	adds	r3, r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	18c3      	adds	r3, r0, r3
 8002a68:	185b      	adds	r3, r3, r1
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a6e:	193b      	adds	r3, r7, r4
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	23b4      	movs	r3, #180	; 0xb4
 8002a76:	0059      	lsls	r1, r3, #1
 8002a78:	0013      	movs	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	189b      	adds	r3, r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	18c3      	adds	r3, r0, r3
 8002a82:	185b      	adds	r3, r3, r1
 8002a84:	193a      	adds	r2, r7, r4
 8002a86:	7812      	ldrb	r2, [r2, #0]
 8002a88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	236c      	movs	r3, #108	; 0x6c
 8002a92:	33ff      	adds	r3, #255	; 0xff
 8002a94:	0019      	movs	r1, r3
 8002a96:	0013      	movs	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	189b      	adds	r3, r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	18c3      	adds	r3, r0, r3
 8002aa0:	185b      	adds	r3, r3, r1
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	23bc      	movs	r3, #188	; 0xbc
 8002aae:	0059      	lsls	r1, r3, #1
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	189b      	adds	r3, r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	18c3      	adds	r3, r0, r3
 8002aba:	185b      	adds	r3, r3, r1
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	23be      	movs	r3, #190	; 0xbe
 8002ac8:	0059      	lsls	r1, r3, #1
 8002aca:	0013      	movs	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	189b      	adds	r3, r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	18c3      	adds	r3, r0, r3
 8002ad4:	185b      	adds	r3, r3, r1
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ada:	193b      	adds	r3, r7, r4
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	23c0      	movs	r3, #192	; 0xc0
 8002ae2:	0059      	lsls	r1, r3, #1
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	18c3      	adds	r3, r0, r3
 8002aee:	185b      	adds	r3, r3, r1
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	193b      	adds	r3, r7, r4
 8002afa:	3201      	adds	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	230f      	movs	r3, #15
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d3a1      	bcc.n	8002a50 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	466a      	mov	r2, sp
 8002b14:	0011      	movs	r1, r2
 8002b16:	001a      	movs	r2, r3
 8002b18:	3210      	adds	r2, #16
 8002b1a:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002b1c:	c170      	stmia	r1!, {r4, r5, r6}
 8002b1e:	ca30      	ldmia	r2!, {r4, r5}
 8002b20:	c130      	stmia	r1!, {r4, r5}
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f004 f8b2 	bl	8006c90 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2224      	movs	r2, #36	; 0x24
 8002b30:	2100      	movs	r1, #0
 8002b32:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <HAL_PCD_Init+0x21c>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d103      	bne.n	8002b4c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f001 fd34 	bl	80045b4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b005      	add	sp, #20
 8002b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	000002a9 	.word	0x000002a9

08002b5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	23aa      	movs	r3, #170	; 0xaa
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_Start+0x18>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e014      	b.n	8002b9e <HAL_PCD_Start+0x42>
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	23aa      	movs	r3, #170	; 0xaa
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f004 f854 	bl	8006c30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f005 ffaf 	bl	8008af0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	23aa      	movs	r3, #170	; 0xaa
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	2100      	movs	r1, #0
 8002b9a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b002      	add	sp, #8
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f005 ffb1 	bl	8008b1c <USB_ReadInterrupts>
 8002bba:	0002      	movs	r2, r0
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	021b      	lsls	r3, r3, #8
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d103      	bne.n	8002bd2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 fbbb 	bl	8003348 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f005 ffa0 	bl	8008b1c <USB_ReadInterrupts>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	401a      	ands	r2, r3
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d114      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2244      	movs	r2, #68	; 0x44
 8002bf2:	5a9b      	ldrh	r3, [r3, r2]
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	49a2      	ldr	r1, [pc, #648]	; (8002e84 <HAL_PCD_IRQHandler+0x2dc>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	b291      	uxth	r1, r2
 8002c00:	2244      	movs	r2, #68	; 0x44
 8002c02:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f008 f80b 	bl	800ac22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2100      	movs	r1, #0
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 f945 	bl	8002ea0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f005 ff7e 	bl	8008b1c <USB_ReadInterrupts>
 8002c20:	0002      	movs	r2, r0
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	01db      	lsls	r3, r3, #7
 8002c26:	401a      	ands	r2, r3
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	01db      	lsls	r3, r3, #7
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d10b      	bne.n	8002c48 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2244      	movs	r2, #68	; 0x44
 8002c36:	5a9b      	ldrh	r3, [r3, r2]
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4992      	ldr	r1, [pc, #584]	; (8002e88 <HAL_PCD_IRQHandler+0x2e0>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	b291      	uxth	r1, r2
 8002c44:	2244      	movs	r2, #68	; 0x44
 8002c46:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f005 ff65 	bl	8008b1c <USB_ReadInterrupts>
 8002c52:	0002      	movs	r2, r0
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	019b      	lsls	r3, r3, #6
 8002c58:	401a      	ands	r2, r3
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	019b      	lsls	r3, r3, #6
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d10b      	bne.n	8002c7a <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2244      	movs	r2, #68	; 0x44
 8002c68:	5a9b      	ldrh	r3, [r3, r2]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4986      	ldr	r1, [pc, #536]	; (8002e8c <HAL_PCD_IRQHandler+0x2e4>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	b291      	uxth	r1, r2
 8002c76:	2244      	movs	r2, #68	; 0x44
 8002c78:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f005 ff4c 	bl	8008b1c <USB_ReadInterrupts>
 8002c84:	0002      	movs	r2, r0
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	015b      	lsls	r3, r3, #5
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	015b      	lsls	r3, r3, #5
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d137      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2240      	movs	r2, #64	; 0x40
 8002c9a:	5a9b      	ldrh	r3, [r3, r2]
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	b291      	uxth	r1, r2
 8002ca8:	2240      	movs	r2, #64	; 0x40
 8002caa:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2240      	movs	r2, #64	; 0x40
 8002cb2:	5a9b      	ldrh	r3, [r3, r2]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2108      	movs	r1, #8
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	b291      	uxth	r1, r2
 8002cc0:	2240      	movs	r2, #64	; 0x40
 8002cc2:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	23b8      	movs	r3, #184	; 0xb8
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d109      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	23b8      	movs	r3, #184	; 0xb8
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2100      	movs	r1, #0
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f001 fc92 	bl	8004608 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f007 ffdc 	bl	800aca4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2244      	movs	r2, #68	; 0x44
 8002cf2:	5a9b      	ldrh	r3, [r3, r2]
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4965      	ldr	r1, [pc, #404]	; (8002e90 <HAL_PCD_IRQHandler+0x2e8>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	b291      	uxth	r1, r2
 8002d00:	2244      	movs	r2, #68	; 0x44
 8002d02:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f005 ff07 	bl	8008b1c <USB_ReadInterrupts>
 8002d0e:	0002      	movs	r2, r0
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	401a      	ands	r2, r3
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d127      	bne.n	8002d6e <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2240      	movs	r2, #64	; 0x40
 8002d24:	5a9b      	ldrh	r3, [r3, r2]
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2108      	movs	r1, #8
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	b291      	uxth	r1, r2
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2244      	movs	r2, #68	; 0x44
 8002d3c:	5a9b      	ldrh	r3, [r3, r2]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4953      	ldr	r1, [pc, #332]	; (8002e94 <HAL_PCD_IRQHandler+0x2ec>)
 8002d46:	400a      	ands	r2, r1
 8002d48:	b291      	uxth	r1, r2
 8002d4a:	2244      	movs	r2, #68	; 0x44
 8002d4c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2240      	movs	r2, #64	; 0x40
 8002d54:	5a9b      	ldrh	r3, [r3, r2]
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	b291      	uxth	r1, r2
 8002d62:	2240      	movs	r2, #64	; 0x40
 8002d64:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f007 ff7f 	bl	800ac6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f005 fed2 	bl	8008b1c <USB_ReadInterrupts>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b80      	cmp	r3, #128	; 0x80
 8002d80:	d145      	bne.n	8002e0e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2244      	movs	r2, #68	; 0x44
 8002d88:	5a9b      	ldrh	r3, [r3, r2]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	438a      	bics	r2, r1
 8002d94:	b291      	uxth	r1, r2
 8002d96:	2244      	movs	r2, #68	; 0x44
 8002d98:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	23b8      	movs	r3, #184	; 0xb8
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	5cd3      	ldrb	r3, [r2, r3]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d12f      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2240      	movs	r2, #64	; 0x40
 8002dac:	5a9b      	ldrh	r3, [r3, r2]
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2104      	movs	r1, #4
 8002db6:	430a      	orrs	r2, r1
 8002db8:	b291      	uxth	r1, r2
 8002dba:	2240      	movs	r2, #64	; 0x40
 8002dbc:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2240      	movs	r2, #64	; 0x40
 8002dc4:	5a9b      	ldrh	r3, [r3, r2]
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2108      	movs	r1, #8
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	b291      	uxth	r1, r2
 8002dd2:	2240      	movs	r2, #64	; 0x40
 8002dd4:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	23b8      	movs	r3, #184	; 0xb8
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	2101      	movs	r1, #1
 8002dde:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2254      	movs	r2, #84	; 0x54
 8002de6:	5a9b      	ldrh	r3, [r3, r2]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	223c      	movs	r2, #60	; 0x3c
 8002dee:	4013      	ands	r3, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	23b9      	movs	r3, #185	; 0xb9
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f001 fc02 	bl	8004608 <HAL_PCDEx_LPM_Callback>
 8002e04:	e003      	b.n	8002e0e <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f007 ff2f 	bl	800ac6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f005 fe82 	bl	8008b1c <USB_ReadInterrupts>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	401a      	ands	r2, r3
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d10f      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2244      	movs	r2, #68	; 0x44
 8002e2e:	5a9b      	ldrh	r3, [r3, r2]
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4918      	ldr	r1, [pc, #96]	; (8002e98 <HAL_PCD_IRQHandler+0x2f0>)
 8002e38:	400a      	ands	r2, r1
 8002e3a:	b291      	uxth	r1, r2
 8002e3c:	2244      	movs	r2, #68	; 0x44
 8002e3e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f007 fede 	bl	800ac04 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f005 fe65 	bl	8008b1c <USB_ReadInterrupts>
 8002e52:	0002      	movs	r2, r0
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	401a      	ands	r2, r3
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d10b      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2244      	movs	r2, #68	; 0x44
 8002e68:	5a9b      	ldrh	r3, [r3, r2]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	490a      	ldr	r1, [pc, #40]	; (8002e9c <HAL_PCD_IRQHandler+0x2f4>)
 8002e72:	400a      	ands	r2, r1
 8002e74:	b291      	uxth	r1, r2
 8002e76:	2244      	movs	r2, #68	; 0x44
 8002e78:	5299      	strh	r1, [r3, r2]
  }
}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b002      	add	sp, #8
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	fffffbff 	.word	0xfffffbff
 8002e88:	ffffbfff 	.word	0xffffbfff
 8002e8c:	ffffdfff 	.word	0xffffdfff
 8002e90:	ffffefff 	.word	0xffffefff
 8002e94:	fffff7ff 	.word	0xfffff7ff
 8002e98:	fffffdff 	.word	0xfffffdff
 8002e9c:	fffffeff 	.word	0xfffffeff

08002ea0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	000a      	movs	r2, r1
 8002eaa:	1cfb      	adds	r3, r7, #3
 8002eac:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	23aa      	movs	r3, #170	; 0xaa
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_PCD_SetAddress+0x1e>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e017      	b.n	8002eee <HAL_PCD_SetAddress+0x4e>
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	23aa      	movs	r3, #170	; 0xaa
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1cfa      	adds	r2, r7, #3
 8002ecc:	2124      	movs	r1, #36	; 0x24
 8002ece:	7812      	ldrb	r2, [r2, #0]
 8002ed0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	1cfb      	adds	r3, r7, #3
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	0019      	movs	r1, r3
 8002edc:	0010      	movs	r0, r2
 8002ede:	f005 fdf3 	bl	8008ac8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	23aa      	movs	r3, #170	; 0xaa
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	2100      	movs	r1, #0
 8002eea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b002      	add	sp, #8
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ef6:	b590      	push	{r4, r7, lr}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	000c      	movs	r4, r1
 8002f00:	0010      	movs	r0, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	1cfb      	adds	r3, r7, #3
 8002f06:	1c22      	adds	r2, r4, #0
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	003b      	movs	r3, r7
 8002f0c:	1c02      	adds	r2, r0, #0
 8002f0e:	801a      	strh	r2, [r3, #0]
 8002f10:	1cbb      	adds	r3, r7, #2
 8002f12:	1c0a      	adds	r2, r1, #0
 8002f14:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f16:	230b      	movs	r3, #11
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f1e:	1cfb      	adds	r3, r7, #3
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	b25b      	sxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	da0f      	bge.n	8002f48 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f28:	1cfb      	adds	r3, r7, #3
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	4013      	ands	r3, r2
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	0013      	movs	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	189b      	adds	r3, r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	18d3      	adds	r3, r2, r3
 8002f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	705a      	strb	r2, [r3, #1]
 8002f46:	e00f      	b.n	8002f68 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	1cfb      	adds	r3, r7, #3
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	401a      	ands	r2, r3
 8002f50:	0013      	movs	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	189b      	adds	r3, r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	3369      	adds	r3, #105	; 0x69
 8002f5a:	33ff      	adds	r3, #255	; 0xff
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	18d3      	adds	r3, r2, r3
 8002f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f68:	1cfb      	adds	r3, r7, #3
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	4013      	ands	r3, r2
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f76:	003b      	movs	r3, r7
 8002f78:	881a      	ldrh	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1cba      	adds	r2, r7, #2
 8002f82:	7812      	ldrb	r2, [r2, #0]
 8002f84:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d004      	beq.n	8002f98 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f98:	1cbb      	adds	r3, r7, #2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d102      	bne.n	8002fa6 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	23aa      	movs	r3, #170	; 0xaa
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	5cd3      	ldrb	r3, [r2, r3]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_PCD_EP_Open+0xc0>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e013      	b.n	8002fde <HAL_PCD_EP_Open+0xe8>
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	23aa      	movs	r3, #170	; 0xaa
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	0011      	movs	r1, r2
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f003 fe8d 	bl	8006ce8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	23aa      	movs	r3, #170	; 0xaa
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002fd8:	230b      	movs	r3, #11
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	781b      	ldrb	r3, [r3, #0]
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b005      	add	sp, #20
 8002fe4:	bd90      	pop	{r4, r7, pc}

08002fe6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	000a      	movs	r2, r1
 8002ff0:	1cfb      	adds	r3, r7, #3
 8002ff2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ff4:	1cfb      	adds	r3, r7, #3
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b25b      	sxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	da0f      	bge.n	800301e <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ffe:	1cfb      	adds	r3, r7, #3
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2207      	movs	r2, #7
 8003004:	4013      	ands	r3, r2
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	0013      	movs	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	189b      	adds	r3, r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	18d3      	adds	r3, r2, r3
 8003014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	705a      	strb	r2, [r3, #1]
 800301c:	e00f      	b.n	800303e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800301e:	1cfb      	adds	r3, r7, #3
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2207      	movs	r2, #7
 8003024:	401a      	ands	r2, r3
 8003026:	0013      	movs	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	189b      	adds	r3, r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	3369      	adds	r3, #105	; 0x69
 8003030:	33ff      	adds	r3, #255	; 0xff
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	18d3      	adds	r3, r2, r3
 8003036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800303e:	1cfb      	adds	r3, r7, #3
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2207      	movs	r2, #7
 8003044:	4013      	ands	r3, r2
 8003046:	b2da      	uxtb	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	23aa      	movs	r3, #170	; 0xaa
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	5cd3      	ldrb	r3, [r2, r3]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_PCD_EP_Close+0x76>
 8003058:	2302      	movs	r3, #2
 800305a:	e011      	b.n	8003080 <HAL_PCD_EP_Close+0x9a>
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	23aa      	movs	r3, #170	; 0xaa
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	2101      	movs	r1, #1
 8003064:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	0011      	movs	r1, r2
 800306e:	0018      	movs	r0, r3
 8003070:	f004 f9ae 	bl	80073d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	23aa      	movs	r3, #170	; 0xaa
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	2100      	movs	r1, #0
 800307c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b004      	add	sp, #16
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	200b      	movs	r0, #11
 8003096:	183b      	adds	r3, r7, r0
 8003098:	1c0a      	adds	r2, r1, #0
 800309a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309c:	0001      	movs	r1, r0
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2207      	movs	r2, #7
 80030a4:	401a      	ands	r2, r3
 80030a6:	0013      	movs	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	3369      	adds	r3, #105	; 0x69
 80030b0:	33ff      	adds	r3, #255	; 0xff
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	18d3      	adds	r3, r2, r3
 80030b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2207      	movs	r2, #7
 80030d6:	4013      	ands	r3, r2
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2207      	movs	r2, #7
 80030e4:	4013      	ands	r3, r2
 80030e6:	d107      	bne.n	80030f8 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	0011      	movs	r1, r2
 80030f0:	0018      	movs	r0, r3
 80030f2:	f004 fb2d 	bl	8007750 <USB_EPStartXfer>
 80030f6:	e006      	b.n	8003106 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	0011      	movs	r1, r2
 8003100:	0018      	movs	r0, r3
 8003102:	f004 fb25 	bl	8007750 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b006      	add	sp, #24
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	000a      	movs	r2, r1
 800311a:	1cfb      	adds	r3, r7, #3
 800311c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800311e:	1cfb      	adds	r3, r7, #3
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2207      	movs	r2, #7
 8003124:	401a      	ands	r2, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	23c2      	movs	r3, #194	; 0xc2
 800312a:	0059      	lsls	r1, r3, #1
 800312c:	0013      	movs	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	189b      	adds	r3, r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	18c3      	adds	r3, r0, r3
 8003136:	185b      	adds	r3, r3, r1
 8003138:	681b      	ldr	r3, [r3, #0]
}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	b002      	add	sp, #8
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	200b      	movs	r0, #11
 8003150:	183b      	adds	r3, r7, r0
 8003152:	1c0a      	adds	r2, r1, #0
 8003154:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003156:	183b      	adds	r3, r7, r0
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2207      	movs	r2, #7
 800315c:	4013      	ands	r3, r2
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	0013      	movs	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	189b      	adds	r3, r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	18d3      	adds	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2224      	movs	r2, #36	; 0x24
 800317e:	2101      	movs	r1, #1
 8003180:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2201      	movs	r2, #1
 8003192:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003194:	183b      	adds	r3, r7, r0
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2207      	movs	r2, #7
 800319a:	4013      	ands	r3, r2
 800319c:	b2da      	uxtb	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031a2:	183b      	adds	r3, r7, r0
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2207      	movs	r2, #7
 80031a8:	4013      	ands	r3, r2
 80031aa:	d107      	bne.n	80031bc <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	0011      	movs	r1, r2
 80031b4:	0018      	movs	r0, r3
 80031b6:	f004 facb 	bl	8007750 <USB_EPStartXfer>
 80031ba:	e006      	b.n	80031ca <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	0011      	movs	r1, r2
 80031c4:	0018      	movs	r0, r3
 80031c6:	f004 fac3 	bl	8007750 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b006      	add	sp, #24
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	000a      	movs	r2, r1
 80031de:	1cfb      	adds	r3, r7, #3
 80031e0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031e2:	1cfb      	adds	r3, r7, #3
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2207      	movs	r2, #7
 80031e8:	401a      	ands	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d901      	bls.n	80031f6 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e046      	b.n	8003284 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031f6:	1cfb      	adds	r3, r7, #3
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b25b      	sxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	da0f      	bge.n	8003220 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003200:	1cfb      	adds	r3, r7, #3
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2207      	movs	r2, #7
 8003206:	4013      	ands	r3, r2
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	0013      	movs	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	189b      	adds	r3, r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	18d3      	adds	r3, r2, r3
 8003216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	705a      	strb	r2, [r3, #1]
 800321e:	e00d      	b.n	800323c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003220:	1cfb      	adds	r3, r7, #3
 8003222:	781a      	ldrb	r2, [r3, #0]
 8003224:	0013      	movs	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	189b      	adds	r3, r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	3369      	adds	r3, #105	; 0x69
 800322e:	33ff      	adds	r3, #255	; 0xff
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	18d3      	adds	r3, r2, r3
 8003234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003242:	1cfb      	adds	r3, r7, #3
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2207      	movs	r2, #7
 8003248:	4013      	ands	r3, r2
 800324a:	b2da      	uxtb	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	23aa      	movs	r3, #170	; 0xaa
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_PCD_EP_SetStall+0x8c>
 800325c:	2302      	movs	r3, #2
 800325e:	e011      	b.n	8003284 <HAL_PCD_EP_SetStall+0xb0>
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	23aa      	movs	r3, #170	; 0xaa
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	2101      	movs	r1, #1
 8003268:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	0011      	movs	r1, r2
 8003272:	0018      	movs	r0, r3
 8003274:	f005 fb26 	bl	80088c4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	23aa      	movs	r3, #170	; 0xaa
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	2100      	movs	r1, #0
 8003280:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b004      	add	sp, #16
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	000a      	movs	r2, r1
 8003296:	1cfb      	adds	r3, r7, #3
 8003298:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800329a:	1cfb      	adds	r3, r7, #3
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	220f      	movs	r2, #15
 80032a0:	401a      	ands	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d901      	bls.n	80032ae <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e048      	b.n	8003340 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032ae:	1cfb      	adds	r3, r7, #3
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	b25b      	sxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	da0f      	bge.n	80032d8 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b8:	1cfb      	adds	r3, r7, #3
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2207      	movs	r2, #7
 80032be:	4013      	ands	r3, r2
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	0013      	movs	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	189b      	adds	r3, r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	18d3      	adds	r3, r2, r3
 80032ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	705a      	strb	r2, [r3, #1]
 80032d6:	e00f      	b.n	80032f8 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032d8:	1cfb      	adds	r3, r7, #3
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2207      	movs	r2, #7
 80032de:	401a      	ands	r2, r3
 80032e0:	0013      	movs	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	189b      	adds	r3, r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	3369      	adds	r3, #105	; 0x69
 80032ea:	33ff      	adds	r3, #255	; 0xff
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	18d3      	adds	r3, r2, r3
 80032f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032fe:	1cfb      	adds	r3, r7, #3
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2207      	movs	r2, #7
 8003304:	4013      	ands	r3, r2
 8003306:	b2da      	uxtb	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	23aa      	movs	r3, #170	; 0xaa
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	5cd3      	ldrb	r3, [r2, r3]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_PCD_EP_ClrStall+0x90>
 8003318:	2302      	movs	r3, #2
 800331a:	e011      	b.n	8003340 <HAL_PCD_EP_ClrStall+0xb4>
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	23aa      	movs	r3, #170	; 0xaa
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	2101      	movs	r1, #1
 8003324:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	0011      	movs	r1, r2
 800332e:	0018      	movs	r0, r3
 8003330:	f005 fb18 	bl	8008964 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	23aa      	movs	r3, #170	; 0xaa
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	2100      	movs	r1, #0
 800333c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b004      	add	sp, #16
 8003346:	bd80      	pop	{r7, pc}

08003348 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b096      	sub	sp, #88	; 0x58
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003350:	f000 fbd8 	bl	8003b04 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2056      	movs	r0, #86	; 0x56
 800335a:	183b      	adds	r3, r7, r0
 800335c:	2144      	movs	r1, #68	; 0x44
 800335e:	5a52      	ldrh	r2, [r2, r1]
 8003360:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003362:	183b      	adds	r3, r7, r0
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	2455      	movs	r4, #85	; 0x55
 800336a:	193b      	adds	r3, r7, r4
 800336c:	210f      	movs	r1, #15
 800336e:	400a      	ands	r2, r1
 8003370:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003372:	193b      	adds	r3, r7, r4
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d000      	beq.n	800337c <PCD_EP_ISR_Handler+0x34>
 800337a:	e179      	b.n	8003670 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800337c:	183b      	adds	r3, r7, r0
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	2210      	movs	r2, #16
 8003382:	4013      	ands	r3, r2
 8003384:	d154      	bne.n	8003430 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b29a      	uxth	r2, r3
 800338e:	200e      	movs	r0, #14
 8003390:	183b      	adds	r3, r7, r0
 8003392:	49af      	ldr	r1, [pc, #700]	; (8003650 <PCD_EP_ISR_Handler+0x308>)
 8003394:	400a      	ands	r2, r1
 8003396:	801a      	strh	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	183a      	adds	r2, r7, r0
 800339e:	8812      	ldrh	r2, [r2, #0]
 80033a0:	49ac      	ldr	r1, [pc, #688]	; (8003654 <PCD_EP_ISR_Handler+0x30c>)
 80033a2:	430a      	orrs	r2, r1
 80033a4:	b292      	uxth	r2, r2
 80033a6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3328      	adds	r3, #40	; 0x28
 80033ac:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2250      	movs	r2, #80	; 0x50
 80033b4:	5a9b      	ldrh	r3, [r3, r2]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	001a      	movs	r2, r3
 80033ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	18d2      	adds	r2, r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	18d3      	adds	r3, r2, r3
 80033c8:	4aa3      	ldr	r2, [pc, #652]	; (8003658 <PCD_EP_ISR_Handler+0x310>)
 80033ca:	4694      	mov	ip, r2
 80033cc:	4463      	add	r3, ip
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	059b      	lsls	r3, r3, #22
 80033d2:	0d9a      	lsrs	r2, r3, #22
 80033d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80033d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	18d2      	adds	r2, r2, r3
 80033e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2100      	movs	r1, #0
 80033ea:	0018      	movs	r0, r3
 80033ec:	f007 fbec 	bl	800abc8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	5c9b      	ldrb	r3, [r3, r2]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <PCD_EP_ISR_Handler+0xb8>
 80033fc:	f000 fb82 	bl	8003b04 <PCD_EP_ISR_Handler+0x7bc>
 8003400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <PCD_EP_ISR_Handler+0xc4>
 8003408:	f000 fb7c 	bl	8003b04 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	; 0x24
 8003410:	5c9b      	ldrb	r3, [r3, r2]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	4252      	negs	r2, r2
 8003418:	4313      	orrs	r3, r2
 800341a:	b2da      	uxtb	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	b291      	uxth	r1, r2
 8003422:	224c      	movs	r2, #76	; 0x4c
 8003424:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2224      	movs	r2, #36	; 0x24
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]
 800342e:	e369      	b.n	8003b04 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3369      	adds	r3, #105	; 0x69
 8003434:	33ff      	adds	r3, #255	; 0xff
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2152      	movs	r1, #82	; 0x52
 800343e:	187b      	adds	r3, r7, r1
 8003440:	8812      	ldrh	r2, [r2, #0]
 8003442:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003444:	187b      	adds	r3, r7, r1
 8003446:	881a      	ldrh	r2, [r3, #0]
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	4013      	ands	r3, r2
 800344e:	d037      	beq.n	80034c0 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2250      	movs	r2, #80	; 0x50
 8003456:	5a9b      	ldrh	r3, [r3, r2]
 8003458:	b29b      	uxth	r3, r3
 800345a:	001a      	movs	r2, r3
 800345c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	18d2      	adds	r2, r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	18d3      	adds	r3, r2, r3
 800346a:	4a7c      	ldr	r2, [pc, #496]	; (800365c <PCD_EP_ISR_Handler+0x314>)
 800346c:	4694      	mov	ip, r2
 800346e:	4463      	add	r3, ip
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	059b      	lsls	r3, r3, #22
 8003474:	0d9a      	lsrs	r2, r3, #22
 8003476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003478:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	22ac      	movs	r2, #172	; 0xac
 8003482:	0092      	lsls	r2, r2, #2
 8003484:	1899      	adds	r1, r3, r2
 8003486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003488:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800348a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800348c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800348e:	b29b      	uxth	r3, r3
 8003490:	f005 fb96 	bl	8008bc0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29a      	uxth	r2, r3
 800349c:	2010      	movs	r0, #16
 800349e:	183b      	adds	r3, r7, r0
 80034a0:	496f      	ldr	r1, [pc, #444]	; (8003660 <PCD_EP_ISR_Handler+0x318>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	183a      	adds	r2, r7, r0
 80034ac:	8812      	ldrh	r2, [r2, #0]
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	430a      	orrs	r2, r1
 80034b2:	b292      	uxth	r2, r2
 80034b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f007 fb4f 	bl	800ab5c <HAL_PCD_SetupStageCallback>
 80034be:	e321      	b.n	8003b04 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034c0:	2352      	movs	r3, #82	; 0x52
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	2200      	movs	r2, #0
 80034c6:	5e9b      	ldrsh	r3, [r3, r2]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db00      	blt.n	80034ce <PCD_EP_ISR_Handler+0x186>
 80034cc:	e31a      	b.n	8003b04 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	201e      	movs	r0, #30
 80034d8:	183b      	adds	r3, r7, r0
 80034da:	4961      	ldr	r1, [pc, #388]	; (8003660 <PCD_EP_ISR_Handler+0x318>)
 80034dc:	400a      	ands	r2, r1
 80034de:	801a      	strh	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	183a      	adds	r2, r7, r0
 80034e6:	8812      	ldrh	r2, [r2, #0]
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	430a      	orrs	r2, r1
 80034ec:	b292      	uxth	r2, r2
 80034ee:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2250      	movs	r2, #80	; 0x50
 80034f6:	5a9b      	ldrh	r3, [r3, r2]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	001a      	movs	r2, r3
 80034fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	18d2      	adds	r2, r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	18d3      	adds	r3, r2, r3
 800350a:	4a54      	ldr	r2, [pc, #336]	; (800365c <PCD_EP_ISR_Handler+0x314>)
 800350c:	4694      	mov	ip, r2
 800350e:	4463      	add	r3, ip
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	059b      	lsls	r3, r3, #22
 8003514:	0d9a      	lsrs	r2, r3, #22
 8003516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003518:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800351a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01a      	beq.n	8003558 <PCD_EP_ISR_Handler+0x210>
 8003522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d016      	beq.n	8003558 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003530:	6959      	ldr	r1, [r3, #20]
 8003532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003534:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003538:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800353a:	b29b      	uxth	r3, r3
 800353c:	f005 fb40 	bl	8008bc0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	18d2      	adds	r2, r2, r3
 800354a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2100      	movs	r1, #0
 8003552:	0018      	movs	r0, r3
 8003554:	f007 fb17 	bl	800ab86 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	001a      	movs	r2, r3
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	4013      	ands	r3, r2
 8003568:	d000      	beq.n	800356c <PCD_EP_ISR_Handler+0x224>
 800356a:	e2cb      	b.n	8003b04 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2250      	movs	r2, #80	; 0x50
 8003578:	5a9b      	ldrh	r3, [r3, r2]
 800357a:	b29b      	uxth	r3, r3
 800357c:	001a      	movs	r2, r3
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	189b      	adds	r3, r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	4a35      	ldr	r2, [pc, #212]	; (800365c <PCD_EP_ISR_Handler+0x314>)
 8003588:	4694      	mov	ip, r2
 800358a:	4463      	add	r3, ip
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d110      	bne.n	80035b8 <PCD_EP_ISR_Handler+0x270>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	4a31      	ldr	r2, [pc, #196]	; (8003664 <PCD_EP_ISR_Handler+0x31c>)
 800359e:	4013      	ands	r3, r2
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	801a      	strh	r2, [r3, #0]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	4a29      	ldr	r2, [pc, #164]	; (8003654 <PCD_EP_ISR_Handler+0x30c>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	e02b      	b.n	8003610 <PCD_EP_ISR_Handler+0x2c8>
 80035b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b3e      	cmp	r3, #62	; 0x3e
 80035be:	d812      	bhi.n	80035e6 <PCD_EP_ISR_Handler+0x29e>
 80035c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	647b      	str	r3, [r7, #68]	; 0x44
 80035c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	2201      	movs	r2, #1
 80035ce:	4013      	ands	r3, r2
 80035d0:	d002      	beq.n	80035d8 <PCD_EP_ISR_Handler+0x290>
 80035d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d4:	3301      	adds	r3, #1
 80035d6:	647b      	str	r3, [r7, #68]	; 0x44
 80035d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035da:	b29b      	uxth	r3, r3
 80035dc:	029b      	lsls	r3, r3, #10
 80035de:	b29a      	uxth	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	801a      	strh	r2, [r3, #0]
 80035e4:	e014      	b.n	8003610 <PCD_EP_ISR_Handler+0x2c8>
 80035e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	647b      	str	r3, [r7, #68]	; 0x44
 80035ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	221f      	movs	r2, #31
 80035f4:	4013      	ands	r3, r2
 80035f6:	d102      	bne.n	80035fe <PCD_EP_ISR_Handler+0x2b6>
 80035f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fa:	3b01      	subs	r3, #1
 80035fc:	647b      	str	r3, [r7, #68]	; 0x44
 80035fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003600:	b29b      	uxth	r3, r3
 8003602:	029b      	lsls	r3, r3, #10
 8003604:	b29b      	uxth	r3, r3
 8003606:	4a13      	ldr	r2, [pc, #76]	; (8003654 <PCD_EP_ISR_Handler+0x30c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	b29a      	uxth	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29a      	uxth	r2, r3
 8003618:	2012      	movs	r0, #18
 800361a:	183b      	adds	r3, r7, r0
 800361c:	4912      	ldr	r1, [pc, #72]	; (8003668 <PCD_EP_ISR_Handler+0x320>)
 800361e:	400a      	ands	r2, r1
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	183b      	adds	r3, r7, r0
 8003624:	183a      	adds	r2, r7, r0
 8003626:	8812      	ldrh	r2, [r2, #0]
 8003628:	2180      	movs	r1, #128	; 0x80
 800362a:	0149      	lsls	r1, r1, #5
 800362c:	404a      	eors	r2, r1
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	183b      	adds	r3, r7, r0
 8003632:	183a      	adds	r2, r7, r0
 8003634:	8812      	ldrh	r2, [r2, #0]
 8003636:	2180      	movs	r1, #128	; 0x80
 8003638:	0189      	lsls	r1, r1, #6
 800363a:	404a      	eors	r2, r1
 800363c:	801a      	strh	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	183a      	adds	r2, r7, r0
 8003644:	8812      	ldrh	r2, [r2, #0]
 8003646:	4909      	ldr	r1, [pc, #36]	; (800366c <PCD_EP_ISR_Handler+0x324>)
 8003648:	430a      	orrs	r2, r1
 800364a:	b292      	uxth	r2, r2
 800364c:	801a      	strh	r2, [r3, #0]
 800364e:	e259      	b.n	8003b04 <PCD_EP_ISR_Handler+0x7bc>
 8003650:	ffff8f0f 	.word	0xffff8f0f
 8003654:	ffff8000 	.word	0xffff8000
 8003658:	00000402 	.word	0x00000402
 800365c:	00000406 	.word	0x00000406
 8003660:	00000f8f 	.word	0x00000f8f
 8003664:	ffff83ff 	.word	0xffff83ff
 8003668:	ffffbf8f 	.word	0xffffbf8f
 800366c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	001a      	movs	r2, r3
 8003676:	2055      	movs	r0, #85	; 0x55
 8003678:	183b      	adds	r3, r7, r0
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	18d2      	adds	r2, r2, r3
 8003680:	2152      	movs	r1, #82	; 0x52
 8003682:	187b      	adds	r3, r7, r1
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003688:	187b      	adds	r3, r7, r1
 800368a:	2200      	movs	r2, #0
 800368c:	5e9b      	ldrsh	r3, [r3, r2]
 800368e:	2b00      	cmp	r3, #0
 8003690:	db00      	blt.n	8003694 <PCD_EP_ISR_Handler+0x34c>
 8003692:	e0fa      	b.n	800388a <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	001a      	movs	r2, r3
 800369a:	183b      	adds	r3, r7, r0
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	18d3      	adds	r3, r2, r3
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	2450      	movs	r4, #80	; 0x50
 80036a8:	193b      	adds	r3, r7, r4
 80036aa:	49cf      	ldr	r1, [pc, #828]	; (80039e8 <PCD_EP_ISR_Handler+0x6a0>)
 80036ac:	400a      	ands	r2, r1
 80036ae:	801a      	strh	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	001a      	movs	r2, r3
 80036b6:	183b      	adds	r3, r7, r0
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	193a      	adds	r2, r7, r4
 80036c0:	8812      	ldrh	r2, [r2, #0]
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	430a      	orrs	r2, r1
 80036c6:	b292      	uxth	r2, r2
 80036c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036ca:	183b      	adds	r3, r7, r0
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	0013      	movs	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	189b      	adds	r3, r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	3369      	adds	r3, #105	; 0x69
 80036d8:	33ff      	adds	r3, #255	; 0xff
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	18d3      	adds	r3, r2, r3
 80036de:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80036e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e2:	7b1b      	ldrb	r3, [r3, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d125      	bne.n	8003734 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2250      	movs	r2, #80	; 0x50
 80036ee:	5a9b      	ldrh	r3, [r3, r2]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	001a      	movs	r2, r3
 80036f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	18d2      	adds	r2, r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	18d3      	adds	r3, r2, r3
 8003702:	4aba      	ldr	r2, [pc, #744]	; (80039ec <PCD_EP_ISR_Handler+0x6a4>)
 8003704:	4694      	mov	ip, r2
 8003706:	4463      	add	r3, ip
 8003708:	881a      	ldrh	r2, [r3, #0]
 800370a:	2448      	movs	r4, #72	; 0x48
 800370c:	193b      	adds	r3, r7, r4
 800370e:	0592      	lsls	r2, r2, #22
 8003710:	0d92      	lsrs	r2, r2, #22
 8003712:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003714:	193b      	adds	r3, r7, r4
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d100      	bne.n	800371e <PCD_EP_ISR_Handler+0x3d6>
 800371c:	e08d      	b.n	800383a <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003724:	6959      	ldr	r1, [r3, #20]
 8003726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003728:	88da      	ldrh	r2, [r3, #6]
 800372a:	193b      	adds	r3, r7, r4
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	f005 fa47 	bl	8008bc0 <USB_ReadPMA>
 8003732:	e082      	b.n	800383a <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003736:	78db      	ldrb	r3, [r3, #3]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d10c      	bne.n	8003756 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800373c:	2348      	movs	r3, #72	; 0x48
 800373e:	18fc      	adds	r4, r7, r3
 8003740:	2352      	movs	r3, #82	; 0x52
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	881a      	ldrh	r2, [r3, #0]
 8003746:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0018      	movs	r0, r3
 800374c:	f000 f9ee 	bl	8003b2c <HAL_PCD_EP_DB_Receive>
 8003750:	0003      	movs	r3, r0
 8003752:	8023      	strh	r3, [r4, #0]
 8003754:	e071      	b.n	800383a <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	001a      	movs	r2, r3
 800375c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	18d3      	adds	r3, r2, r3
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	b29a      	uxth	r2, r3
 8003768:	204a      	movs	r0, #74	; 0x4a
 800376a:	183b      	adds	r3, r7, r0
 800376c:	49a0      	ldr	r1, [pc, #640]	; (80039f0 <PCD_EP_ISR_Handler+0x6a8>)
 800376e:	400a      	ands	r2, r1
 8003770:	801a      	strh	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	001a      	movs	r2, r3
 8003778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	18d3      	adds	r3, r2, r3
 8003780:	183a      	adds	r2, r7, r0
 8003782:	8812      	ldrh	r2, [r2, #0]
 8003784:	499b      	ldr	r1, [pc, #620]	; (80039f4 <PCD_EP_ISR_Handler+0x6ac>)
 8003786:	430a      	orrs	r2, r1
 8003788:	b292      	uxth	r2, r2
 800378a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	001a      	movs	r2, r3
 8003792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	18d3      	adds	r3, r2, r3
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	b29b      	uxth	r3, r3
 800379e:	001a      	movs	r2, r3
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	01db      	lsls	r3, r3, #7
 80037a4:	4013      	ands	r3, r2
 80037a6:	d024      	beq.n	80037f2 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2250      	movs	r2, #80	; 0x50
 80037ae:	5a9b      	ldrh	r3, [r3, r2]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	001a      	movs	r2, r3
 80037b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	18d2      	adds	r2, r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	18d3      	adds	r3, r2, r3
 80037c2:	4a8d      	ldr	r2, [pc, #564]	; (80039f8 <PCD_EP_ISR_Handler+0x6b0>)
 80037c4:	4694      	mov	ip, r2
 80037c6:	4463      	add	r3, ip
 80037c8:	881a      	ldrh	r2, [r3, #0]
 80037ca:	2448      	movs	r4, #72	; 0x48
 80037cc:	193b      	adds	r3, r7, r4
 80037ce:	0592      	lsls	r2, r2, #22
 80037d0:	0d92      	lsrs	r2, r2, #22
 80037d2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80037d4:	193b      	adds	r3, r7, r4
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02e      	beq.n	800383a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e2:	6959      	ldr	r1, [r3, #20]
 80037e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e6:	891a      	ldrh	r2, [r3, #8]
 80037e8:	193b      	adds	r3, r7, r4
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	f005 f9e8 	bl	8008bc0 <USB_ReadPMA>
 80037f0:	e023      	b.n	800383a <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2250      	movs	r2, #80	; 0x50
 80037f8:	5a9b      	ldrh	r3, [r3, r2]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	001a      	movs	r2, r3
 80037fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	18d2      	adds	r2, r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	18d3      	adds	r3, r2, r3
 800380c:	4a77      	ldr	r2, [pc, #476]	; (80039ec <PCD_EP_ISR_Handler+0x6a4>)
 800380e:	4694      	mov	ip, r2
 8003810:	4463      	add	r3, ip
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	2448      	movs	r4, #72	; 0x48
 8003816:	193b      	adds	r3, r7, r4
 8003818:	0592      	lsls	r2, r2, #22
 800381a:	0d92      	lsrs	r2, r2, #22
 800381c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800381e:	193b      	adds	r3, r7, r4
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382c:	6959      	ldr	r1, [r3, #20]
 800382e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003830:	895a      	ldrh	r2, [r3, #10]
 8003832:	193b      	adds	r3, r7, r4
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	f005 f9c3 	bl	8008bc0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800383a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	2148      	movs	r1, #72	; 0x48
 8003840:	187b      	adds	r3, r7, r1
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003848:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	187b      	adds	r3, r7, r1
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	18d2      	adds	r2, r2, r3
 8003854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003856:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <PCD_EP_ISR_Handler+0x524>
 8003860:	187b      	adds	r3, r7, r1
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	429a      	cmp	r2, r3
 800386a:	d207      	bcs.n	800387c <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	0011      	movs	r1, r2
 8003874:	0018      	movs	r0, r3
 8003876:	f007 f986 	bl	800ab86 <HAL_PCD_DataOutStageCallback>
 800387a:	e006      	b.n	800388a <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003882:	0011      	movs	r1, r2
 8003884:	0018      	movs	r0, r3
 8003886:	f003 ff63 	bl	8007750 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800388a:	2452      	movs	r4, #82	; 0x52
 800388c:	193b      	adds	r3, r7, r4
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	2280      	movs	r2, #128	; 0x80
 8003892:	4013      	ands	r3, r2
 8003894:	d100      	bne.n	8003898 <PCD_EP_ISR_Handler+0x550>
 8003896:	e135      	b.n	8003b04 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8003898:	2055      	movs	r0, #85	; 0x55
 800389a:	183b      	adds	r3, r7, r0
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	0013      	movs	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	189b      	adds	r3, r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	18d3      	adds	r3, r2, r3
 80038ac:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	001a      	movs	r2, r3
 80038b4:	183b      	adds	r3, r7, r0
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	18d3      	adds	r3, r2, r3
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29a      	uxth	r2, r3
 80038c0:	2542      	movs	r5, #66	; 0x42
 80038c2:	197b      	adds	r3, r7, r5
 80038c4:	494d      	ldr	r1, [pc, #308]	; (80039fc <PCD_EP_ISR_Handler+0x6b4>)
 80038c6:	400a      	ands	r2, r1
 80038c8:	801a      	strh	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	001a      	movs	r2, r3
 80038d0:	183b      	adds	r3, r7, r0
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	18d3      	adds	r3, r2, r3
 80038d8:	197a      	adds	r2, r7, r5
 80038da:	8812      	ldrh	r2, [r2, #0]
 80038dc:	4948      	ldr	r1, [pc, #288]	; (8003a00 <PCD_EP_ISR_Handler+0x6b8>)
 80038de:	430a      	orrs	r2, r1
 80038e0:	b292      	uxth	r2, r2
 80038e2:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80038e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e6:	78db      	ldrb	r3, [r3, #3]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d100      	bne.n	80038ee <PCD_EP_ISR_Handler+0x5a6>
 80038ec:	e0ad      	b.n	8003a4a <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80038ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f0:	2200      	movs	r2, #0
 80038f2:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038f4:	193b      	adds	r3, r7, r4
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	2240      	movs	r2, #64	; 0x40
 80038fa:	4013      	ands	r3, r2
 80038fc:	d046      	beq.n	800398c <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003900:	785b      	ldrb	r3, [r3, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d125      	bne.n	8003952 <PCD_EP_ISR_Handler+0x60a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2250      	movs	r2, #80	; 0x50
 8003912:	5a9b      	ldrh	r3, [r3, r2]
 8003914:	b29b      	uxth	r3, r3
 8003916:	001a      	movs	r2, r3
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	189b      	adds	r3, r3, r2
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	00da      	lsls	r2, r3, #3
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	18d3      	adds	r3, r2, r3
 8003928:	4a33      	ldr	r2, [pc, #204]	; (80039f8 <PCD_EP_ISR_Handler+0x6b0>)
 800392a:	4694      	mov	ip, r2
 800392c:	4463      	add	r3, ip
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	4a33      	ldr	r2, [pc, #204]	; (8003a04 <PCD_EP_ISR_Handler+0x6bc>)
 8003938:	4013      	ands	r3, r2
 800393a:	b29a      	uxth	r2, r3
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	801a      	strh	r2, [r3, #0]
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	4a2e      	ldr	r2, [pc, #184]	; (8003a00 <PCD_EP_ISR_Handler+0x6b8>)
 8003948:	4313      	orrs	r3, r2
 800394a:	b29a      	uxth	r2, r3
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	801a      	strh	r2, [r3, #0]
 8003950:	e073      	b.n	8003a3a <PCD_EP_ISR_Handler+0x6f2>
 8003952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003954:	785b      	ldrb	r3, [r3, #1]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d16f      	bne.n	8003a3a <PCD_EP_ISR_Handler+0x6f2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2250      	movs	r2, #80	; 0x50
 8003966:	5a9b      	ldrh	r3, [r3, r2]
 8003968:	b29b      	uxth	r3, r3
 800396a:	001a      	movs	r2, r3
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	189b      	adds	r3, r3, r2
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	00da      	lsls	r2, r3, #3
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	18d3      	adds	r3, r2, r3
 800397c:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <PCD_EP_ISR_Handler+0x6b0>)
 800397e:	4694      	mov	ip, r2
 8003980:	4463      	add	r3, ip
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	2200      	movs	r2, #0
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e056      	b.n	8003a3a <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003994:	785b      	ldrb	r3, [r3, #1]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d136      	bne.n	8003a08 <PCD_EP_ISR_Handler+0x6c0>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2250      	movs	r2, #80	; 0x50
 80039a6:	5a9b      	ldrh	r3, [r3, r2]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	001a      	movs	r2, r3
 80039ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	637b      	str	r3, [r7, #52]	; 0x34
 80039b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	00da      	lsls	r2, r3, #3
 80039b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ba:	18d3      	adds	r3, r2, r3
 80039bc:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <PCD_EP_ISR_Handler+0x6a4>)
 80039be:	4694      	mov	ip, r2
 80039c0:	4463      	add	r3, ip
 80039c2:	633b      	str	r3, [r7, #48]	; 0x30
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	4a0e      	ldr	r2, [pc, #56]	; (8003a04 <PCD_EP_ISR_Handler+0x6bc>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <PCD_EP_ISR_Handler+0x6b8>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	b29a      	uxth	r2, r3
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	801a      	strh	r2, [r3, #0]
 80039e4:	e029      	b.n	8003a3a <PCD_EP_ISR_Handler+0x6f2>
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	00000f8f 	.word	0x00000f8f
 80039ec:	00000406 	.word	0x00000406
 80039f0:	ffff8f8f 	.word	0xffff8f8f
 80039f4:	ffff80c0 	.word	0xffff80c0
 80039f8:	00000402 	.word	0x00000402
 80039fc:	ffff8f0f 	.word	0xffff8f0f
 8003a00:	ffff8000 	.word	0xffff8000
 8003a04:	ffff83ff 	.word	0xffff83ff
 8003a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d114      	bne.n	8003a3a <PCD_EP_ISR_Handler+0x6f2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2250      	movs	r2, #80	; 0x50
 8003a16:	5a9b      	ldrh	r3, [r3, r2]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	001a      	movs	r2, r3
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1e:	189b      	adds	r3, r3, r2
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	00da      	lsls	r2, r3, #3
 8003a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2a:	18d3      	adds	r3, r2, r3
 8003a2c:	4a3d      	ldr	r2, [pc, #244]	; (8003b24 <PCD_EP_ISR_Handler+0x7dc>)
 8003a2e:	4694      	mov	ip, r2
 8003a30:	4463      	add	r3, ip
 8003a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	2200      	movs	r2, #0
 8003a38:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	0011      	movs	r1, r2
 8003a42:	0018      	movs	r0, r3
 8003a44:	f007 f8c0 	bl	800abc8 <HAL_PCD_DataInStageCallback>
 8003a48:	e05c      	b.n	8003b04 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	78db      	ldrb	r3, [r3, #3]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d150      	bne.n	8003af4 <PCD_EP_ISR_Handler+0x7ac>
 8003a52:	2352      	movs	r3, #82	; 0x52
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	881a      	ldrh	r2, [r3, #0]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d149      	bne.n	8003af4 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2250      	movs	r2, #80	; 0x50
 8003a66:	5a9b      	ldrh	r3, [r3, r2]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	001a      	movs	r2, r3
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	18d2      	adds	r2, r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	18d3      	adds	r3, r2, r3
 8003a7a:	4a2b      	ldr	r2, [pc, #172]	; (8003b28 <PCD_EP_ISR_Handler+0x7e0>)
 8003a7c:	4694      	mov	ip, r2
 8003a7e:	4463      	add	r3, ip
 8003a80:	881a      	ldrh	r2, [r3, #0]
 8003a82:	2140      	movs	r1, #64	; 0x40
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	0592      	lsls	r2, r2, #22
 8003a88:	0d92      	lsrs	r2, r2, #22
 8003a8a:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d907      	bls.n	8003aa8 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8003a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9a:	699a      	ldr	r2, [r3, #24]
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	1ad2      	subs	r2, r2, r3
 8003aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa4:	619a      	str	r2, [r3, #24]
 8003aa6:	e002      	b.n	8003aae <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8003aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aaa:	2200      	movs	r2, #0
 8003aac:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d107      	bne.n	8003ac6 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab8:	781a      	ldrb	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0011      	movs	r1, r2
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f007 f882 	bl	800abc8 <HAL_PCD_DataInStageCallback>
 8003ac4:	e01e      	b.n	8003b04 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	2140      	movs	r1, #64	; 0x40
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	18d2      	adds	r2, r2, r3
 8003ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	18d2      	adds	r2, r2, r3
 8003ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aea:	0011      	movs	r1, r2
 8003aec:	0018      	movs	r0, r3
 8003aee:	f003 fe2f 	bl	8007750 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003af2:	e007      	b.n	8003b04 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003af4:	2352      	movs	r3, #82	; 0x52
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	881a      	ldrh	r2, [r3, #0]
 8003afa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	0018      	movs	r0, r3
 8003b00:	f000 f930 	bl	8003d64 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2244      	movs	r2, #68	; 0x44
 8003b0a:	5a9b      	ldrh	r3, [r3, r2]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	b21b      	sxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	da01      	bge.n	8003b18 <PCD_EP_ISR_Handler+0x7d0>
 8003b14:	f7ff fc1e 	bl	8003354 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b016      	add	sp, #88	; 0x58
 8003b20:	bdb0      	pop	{r4, r5, r7, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	00000406 	.word	0x00000406
 8003b28:	00000402 	.word	0x00000402

08003b2c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b2c:	b590      	push	{r4, r7, lr}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	1dbb      	adds	r3, r7, #6
 8003b38:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b3a:	1dbb      	adds	r3, r7, #6
 8003b3c:	881a      	ldrh	r2, [r3, #0]
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	01db      	lsls	r3, r3, #7
 8003b42:	4013      	ands	r3, r2
 8003b44:	d100      	bne.n	8003b48 <HAL_PCD_EP_DB_Receive+0x1c>
 8003b46:	e07d      	b.n	8003c44 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2250      	movs	r2, #80	; 0x50
 8003b4e:	5a9b      	ldrh	r3, [r3, r2]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	001a      	movs	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	18d2      	adds	r2, r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	18d3      	adds	r3, r2, r3
 8003b62:	4a7a      	ldr	r2, [pc, #488]	; (8003d4c <HAL_PCD_EP_DB_Receive+0x220>)
 8003b64:	4694      	mov	ip, r2
 8003b66:	4463      	add	r3, ip
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	211a      	movs	r1, #26
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	0592      	lsls	r2, r2, #22
 8003b70:	0d92      	lsrs	r2, r2, #22
 8003b72:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d307      	bcc.n	8003b90 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	699a      	ldr	r2, [r3, #24]
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	1ad2      	subs	r2, r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	619a      	str	r2, [r3, #24]
 8003b8e:	e002      	b.n	8003b96 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2200      	movs	r2, #0
 8003b94:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d121      	bne.n	8003be2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	18d3      	adds	r3, r2, r3
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	2018      	movs	r0, #24
 8003bb2:	183b      	adds	r3, r7, r0
 8003bb4:	4966      	ldr	r1, [pc, #408]	; (8003d50 <HAL_PCD_EP_DB_Receive+0x224>)
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	801a      	strh	r2, [r3, #0]
 8003bba:	183b      	adds	r3, r7, r0
 8003bbc:	183a      	adds	r2, r7, r0
 8003bbe:	8812      	ldrh	r2, [r2, #0]
 8003bc0:	2180      	movs	r1, #128	; 0x80
 8003bc2:	0189      	lsls	r1, r1, #6
 8003bc4:	404a      	eors	r2, r1
 8003bc6:	801a      	strh	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	001a      	movs	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	18d3      	adds	r3, r2, r3
 8003bd6:	183a      	adds	r2, r7, r0
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	495e      	ldr	r1, [pc, #376]	; (8003d54 <HAL_PCD_EP_DB_Receive+0x228>)
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	b292      	uxth	r2, r2
 8003be0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003be2:	1dbb      	adds	r3, r7, #6
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	2240      	movs	r2, #64	; 0x40
 8003be8:	4013      	ands	r3, r2
 8003bea:	d01a      	beq.n	8003c22 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	001a      	movs	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	18d3      	adds	r3, r2, r3
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	2016      	movs	r0, #22
 8003c00:	183b      	adds	r3, r7, r0
 8003c02:	4955      	ldr	r1, [pc, #340]	; (8003d58 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003c04:	400a      	ands	r2, r1
 8003c06:	801a      	strh	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	001a      	movs	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	18d3      	adds	r3, r2, r3
 8003c16:	183a      	adds	r2, r7, r0
 8003c18:	8812      	ldrh	r2, [r2, #0]
 8003c1a:	4950      	ldr	r1, [pc, #320]	; (8003d5c <HAL_PCD_EP_DB_Receive+0x230>)
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	b292      	uxth	r2, r2
 8003c20:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003c22:	241a      	movs	r4, #26
 8003c24:	193b      	adds	r3, r7, r4
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d100      	bne.n	8003c2e <HAL_PCD_EP_DB_Receive+0x102>
 8003c2c:	e086      	b.n	8003d3c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6959      	ldr	r1, [r3, #20]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	891a      	ldrh	r2, [r3, #8]
 8003c3a:	193b      	adds	r3, r7, r4
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	f004 ffbf 	bl	8008bc0 <USB_ReadPMA>
 8003c42:	e07b      	b.n	8003d3c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2250      	movs	r2, #80	; 0x50
 8003c4a:	5a9b      	ldrh	r3, [r3, r2]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	001a      	movs	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	18d2      	adds	r2, r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	4a40      	ldr	r2, [pc, #256]	; (8003d60 <HAL_PCD_EP_DB_Receive+0x234>)
 8003c60:	4694      	mov	ip, r2
 8003c62:	4463      	add	r3, ip
 8003c64:	881a      	ldrh	r2, [r3, #0]
 8003c66:	211a      	movs	r1, #26
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	0592      	lsls	r2, r2, #22
 8003c6c:	0d92      	lsrs	r2, r2, #22
 8003c6e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d307      	bcc.n	8003c8c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	1ad2      	subs	r2, r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	619a      	str	r2, [r3, #24]
 8003c8a:	e002      	b.n	8003c92 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d121      	bne.n	8003cde <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	001a      	movs	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	18d3      	adds	r3, r2, r3
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	201e      	movs	r0, #30
 8003cae:	183b      	adds	r3, r7, r0
 8003cb0:	4927      	ldr	r1, [pc, #156]	; (8003d50 <HAL_PCD_EP_DB_Receive+0x224>)
 8003cb2:	400a      	ands	r2, r1
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	183b      	adds	r3, r7, r0
 8003cb8:	183a      	adds	r2, r7, r0
 8003cba:	8812      	ldrh	r2, [r2, #0]
 8003cbc:	2180      	movs	r1, #128	; 0x80
 8003cbe:	0189      	lsls	r1, r1, #6
 8003cc0:	404a      	eors	r2, r1
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	001a      	movs	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	18d3      	adds	r3, r2, r3
 8003cd2:	183a      	adds	r2, r7, r0
 8003cd4:	8812      	ldrh	r2, [r2, #0]
 8003cd6:	491f      	ldr	r1, [pc, #124]	; (8003d54 <HAL_PCD_EP_DB_Receive+0x228>)
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	b292      	uxth	r2, r2
 8003cdc:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003cde:	1dbb      	adds	r3, r7, #6
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	2240      	movs	r2, #64	; 0x40
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d11a      	bne.n	8003d1e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	001a      	movs	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	18d3      	adds	r3, r2, r3
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	201c      	movs	r0, #28
 8003cfc:	183b      	adds	r3, r7, r0
 8003cfe:	4916      	ldr	r1, [pc, #88]	; (8003d58 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	801a      	strh	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	001a      	movs	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	18d3      	adds	r3, r2, r3
 8003d12:	183a      	adds	r2, r7, r0
 8003d14:	8812      	ldrh	r2, [r2, #0]
 8003d16:	4911      	ldr	r1, [pc, #68]	; (8003d5c <HAL_PCD_EP_DB_Receive+0x230>)
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	b292      	uxth	r2, r2
 8003d1c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003d1e:	241a      	movs	r4, #26
 8003d20:	193b      	adds	r3, r7, r4
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d009      	beq.n	8003d3c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6959      	ldr	r1, [r3, #20]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	895a      	ldrh	r2, [r3, #10]
 8003d34:	193b      	adds	r3, r7, r4
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	f004 ff42 	bl	8008bc0 <USB_ReadPMA>
    }
  }

  return count;
 8003d3c:	231a      	movs	r3, #26
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	881b      	ldrh	r3, [r3, #0]
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b009      	add	sp, #36	; 0x24
 8003d48:	bd90      	pop	{r4, r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	00000402 	.word	0x00000402
 8003d50:	ffffbf8f 	.word	0xffffbf8f
 8003d54:	ffff8080 	.word	0xffff8080
 8003d58:	ffff8f8f 	.word	0xffff8f8f
 8003d5c:	ffff80c0 	.word	0xffff80c0
 8003d60:	00000406 	.word	0x00000406

08003d64 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b0a2      	sub	sp, #136	; 0x88
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	1dbb      	adds	r3, r7, #6
 8003d70:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d72:	1dbb      	adds	r3, r7, #6
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <HAL_PCD_EP_DB_Transmit+0x1a>
 8003d7c:	e1c8      	b.n	8004110 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2250      	movs	r2, #80	; 0x50
 8003d84:	5a9b      	ldrh	r3, [r3, r2]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	001a      	movs	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	18d2      	adds	r2, r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	18d3      	adds	r3, r2, r3
 8003d98:	4ad7      	ldr	r2, [pc, #860]	; (80040f8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003d9a:	4694      	mov	ip, r2
 8003d9c:	4463      	add	r3, ip
 8003d9e:	881a      	ldrh	r2, [r3, #0]
 8003da0:	214e      	movs	r1, #78	; 0x4e
 8003da2:	187b      	adds	r3, r7, r1
 8003da4:	0592      	lsls	r2, r2, #22
 8003da6:	0d92      	lsrs	r2, r2, #22
 8003da8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	187b      	adds	r3, r7, r1
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d907      	bls.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	1ad2      	subs	r2, r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	619a      	str	r2, [r3, #24]
 8003dc4:	e002      	b.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d000      	beq.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0x72>
 8003dd4:	e0b5      	b.n	8003f42 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d125      	bne.n	8003e2a <HAL_PCD_EP_DB_Transmit+0xc6>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2250      	movs	r2, #80	; 0x50
 8003dea:	5a9b      	ldrh	r3, [r3, r2]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	001a      	movs	r2, r3
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	00da      	lsls	r2, r3, #3
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	18d3      	adds	r3, r2, r3
 8003e00:	4abd      	ldr	r2, [pc, #756]	; (80040f8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003e02:	4694      	mov	ip, r2
 8003e04:	4463      	add	r3, ip
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	4abb      	ldr	r2, [pc, #748]	; (80040fc <HAL_PCD_EP_DB_Transmit+0x398>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	801a      	strh	r2, [r3, #0]
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	4ab8      	ldr	r2, [pc, #736]	; (8004100 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	801a      	strh	r2, [r3, #0]
 8003e28:	e01b      	b.n	8003e62 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d117      	bne.n	8003e62 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	633b      	str	r3, [r7, #48]	; 0x30
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2250      	movs	r2, #80	; 0x50
 8003e3e:	5a9b      	ldrh	r3, [r3, r2]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	001a      	movs	r2, r3
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	633b      	str	r3, [r7, #48]	; 0x30
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	00da      	lsls	r2, r3, #3
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	18d3      	adds	r3, r2, r3
 8003e54:	4aa8      	ldr	r2, [pc, #672]	; (80040f8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003e56:	4694      	mov	ip, r2
 8003e58:	4463      	add	r3, ip
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5e:	2200      	movs	r2, #0
 8003e60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d125      	bne.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x158>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2250      	movs	r2, #80	; 0x50
 8003e7c:	5a9b      	ldrh	r3, [r3, r2]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	001a      	movs	r2, r3
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	189b      	adds	r3, r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	00da      	lsls	r2, r3, #3
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	18d3      	adds	r3, r2, r3
 8003e92:	4a9c      	ldr	r2, [pc, #624]	; (8004104 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003e94:	4694      	mov	ip, r2
 8003e96:	4463      	add	r3, ip
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	4a96      	ldr	r2, [pc, #600]	; (80040fc <HAL_PCD_EP_DB_Transmit+0x398>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	801a      	strh	r2, [r3, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4a93      	ldr	r2, [pc, #588]	; (8004100 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	e018      	b.n	8003eee <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	785b      	ldrb	r3, [r3, #1]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d114      	bne.n	8003eee <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2250      	movs	r2, #80	; 0x50
 8003eca:	5a9b      	ldrh	r3, [r3, r2]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	001a      	movs	r2, r3
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	623b      	str	r3, [r7, #32]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	00da      	lsls	r2, r3, #3
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	18d3      	adds	r3, r2, r3
 8003ee0:	4a88      	ldr	r2, [pc, #544]	; (8004104 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003ee2:	4694      	mov	ip, r2
 8003ee4:	4463      	add	r3, ip
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2200      	movs	r2, #0
 8003eec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	0011      	movs	r1, r2
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f006 fe66 	bl	800abc8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003efc:	1dbb      	adds	r3, r7, #6
 8003efe:	881a      	ldrh	r2, [r3, #0]
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	01db      	lsls	r3, r3, #7
 8003f04:	4013      	ands	r3, r2
 8003f06:	d100      	bne.n	8003f0a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003f08:	e2d4      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	001a      	movs	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	18d3      	adds	r3, r2, r3
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	2012      	movs	r0, #18
 8003f1e:	183b      	adds	r3, r7, r0
 8003f20:	4979      	ldr	r1, [pc, #484]	; (8004108 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003f22:	400a      	ands	r2, r1
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	18d3      	adds	r3, r2, r3
 8003f34:	183a      	adds	r2, r7, r0
 8003f36:	8812      	ldrh	r2, [r2, #0]
 8003f38:	4974      	ldr	r1, [pc, #464]	; (800410c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	b292      	uxth	r2, r2
 8003f3e:	801a      	strh	r2, [r3, #0]
 8003f40:	e2b8      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f42:	1dbb      	adds	r3, r7, #6
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	01db      	lsls	r3, r3, #7
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d01a      	beq.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	001a      	movs	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	18d3      	adds	r3, r2, r3
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	2044      	movs	r0, #68	; 0x44
 8003f62:	183b      	adds	r3, r7, r0
 8003f64:	4968      	ldr	r1, [pc, #416]	; (8004108 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003f66:	400a      	ands	r2, r1
 8003f68:	801a      	strh	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	001a      	movs	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	18d3      	adds	r3, r2, r3
 8003f78:	183a      	adds	r2, r7, r0
 8003f7a:	8812      	ldrh	r2, [r2, #0]
 8003f7c:	4963      	ldr	r1, [pc, #396]	; (800410c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	b292      	uxth	r2, r2
 8003f82:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2224      	movs	r2, #36	; 0x24
 8003f88:	5c9b      	ldrb	r3, [r3, r2]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d000      	beq.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003f8e:	e291      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	214e      	movs	r1, #78	; 0x4e
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	18d2      	adds	r2, r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	18d2      	adds	r2, r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6a1a      	ldr	r2, [r3, #32]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d309      	bcc.n	8003fce <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6a1a      	ldr	r2, [r3, #32]
 8003fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc6:	1ad2      	subs	r2, r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	621a      	str	r2, [r3, #32]
 8003fcc:	e016      	b.n	8003ffc <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d108      	bne.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8003fd6:	234e      	movs	r3, #78	; 0x4e
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2224      	movs	r2, #36	; 0x24
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5499      	strb	r1, [r3, r2]
 8003fe6:	e009      	b.n	8003ffc <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	2100      	movs	r1, #0
 8003fee:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	785b      	ldrb	r3, [r3, #1]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d150      	bne.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x342>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	63bb      	str	r3, [r7, #56]	; 0x38
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2250      	movs	r2, #80	; 0x50
 8004010:	5a9b      	ldrh	r3, [r3, r2]
 8004012:	b29b      	uxth	r3, r3
 8004014:	001a      	movs	r2, r3
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	189b      	adds	r3, r3, r2
 800401a:	63bb      	str	r3, [r7, #56]	; 0x38
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	00da      	lsls	r2, r3, #3
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	18d3      	adds	r3, r2, r3
 8004026:	4a34      	ldr	r2, [pc, #208]	; (80040f8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004028:	4694      	mov	ip, r2
 800402a:	4463      	add	r3, ip
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
 800402e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004030:	2b00      	cmp	r3, #0
 8004032:	d110      	bne.n	8004056 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8004034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	4a30      	ldr	r2, [pc, #192]	; (80040fc <HAL_PCD_EP_DB_Transmit+0x398>)
 800403c:	4013      	ands	r3, r2
 800403e:	b29a      	uxth	r2, r3
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004042:	801a      	strh	r2, [r3, #0]
 8004044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	4a2d      	ldr	r2, [pc, #180]	; (8004100 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800404c:	4313      	orrs	r3, r2
 800404e:	b29a      	uxth	r2, r3
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	e044      	b.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004058:	2b3e      	cmp	r3, #62	; 0x3e
 800405a:	d810      	bhi.n	800407e <HAL_PCD_EP_DB_Transmit+0x31a>
 800405c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	64bb      	str	r3, [r7, #72]	; 0x48
 8004062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004064:	2201      	movs	r2, #1
 8004066:	4013      	ands	r3, r2
 8004068:	d002      	beq.n	8004070 <HAL_PCD_EP_DB_Transmit+0x30c>
 800406a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800406c:	3301      	adds	r3, #1
 800406e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004072:	b29b      	uxth	r3, r3
 8004074:	029b      	lsls	r3, r3, #10
 8004076:	b29a      	uxth	r2, r3
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407a:	801a      	strh	r2, [r3, #0]
 800407c:	e030      	b.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x37c>
 800407e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	64bb      	str	r3, [r7, #72]	; 0x48
 8004084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004086:	221f      	movs	r2, #31
 8004088:	4013      	ands	r3, r2
 800408a:	d102      	bne.n	8004092 <HAL_PCD_EP_DB_Transmit+0x32e>
 800408c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800408e:	3b01      	subs	r3, #1
 8004090:	64bb      	str	r3, [r7, #72]	; 0x48
 8004092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004094:	b29b      	uxth	r3, r3
 8004096:	029b      	lsls	r3, r3, #10
 8004098:	b29b      	uxth	r3, r3
 800409a:	4a19      	ldr	r2, [pc, #100]	; (8004100 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800409c:	4313      	orrs	r3, r2
 800409e:	b29a      	uxth	r2, r3
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	e01c      	b.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x37c>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	785b      	ldrb	r3, [r3, #1]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d118      	bne.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x37c>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	643b      	str	r3, [r7, #64]	; 0x40
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2250      	movs	r2, #80	; 0x50
 80040ba:	5a9b      	ldrh	r3, [r3, r2]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	001a      	movs	r2, r3
 80040c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	643b      	str	r3, [r7, #64]	; 0x40
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	00da      	lsls	r2, r3, #3
 80040cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ce:	18d3      	adds	r3, r2, r3
 80040d0:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <HAL_PCD_EP_DB_Transmit+0x394>)
 80040d2:	4694      	mov	ip, r2
 80040d4:	4463      	add	r3, ip
 80040d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040da:	b29a      	uxth	r2, r3
 80040dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040de:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6959      	ldr	r1, [r3, #20]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	891a      	ldrh	r2, [r3, #8]
 80040ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f004 fd22 	bl	8008b38 <USB_WritePMA>
 80040f4:	e1de      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x750>
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	00000402 	.word	0x00000402
 80040fc:	ffff83ff 	.word	0xffff83ff
 8004100:	ffff8000 	.word	0xffff8000
 8004104:	00000406 	.word	0x00000406
 8004108:	ffff8f8f 	.word	0xffff8f8f
 800410c:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2250      	movs	r2, #80	; 0x50
 8004116:	5a9b      	ldrh	r3, [r3, r2]
 8004118:	b29b      	uxth	r3, r3
 800411a:	001a      	movs	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	18d2      	adds	r2, r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	18d3      	adds	r3, r2, r3
 800412a:	4aca      	ldr	r2, [pc, #808]	; (8004454 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800412c:	4694      	mov	ip, r2
 800412e:	4463      	add	r3, ip
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	214e      	movs	r1, #78	; 0x4e
 8004134:	187b      	adds	r3, r7, r1
 8004136:	0592      	lsls	r2, r2, #22
 8004138:	0d92      	lsrs	r2, r2, #22
 800413a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	187b      	adds	r3, r7, r1
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d307      	bcc.n	8004158 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	187b      	adds	r3, r7, r1
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	1ad2      	subs	r2, r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	619a      	str	r2, [r3, #24]
 8004156:	e002      	b.n	800415e <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2200      	movs	r2, #0
 800415c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d000      	beq.n	8004168 <HAL_PCD_EP_DB_Transmit+0x404>
 8004166:	e0c0      	b.n	80042ea <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	785b      	ldrb	r3, [r3, #1]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d125      	bne.n	80041bc <HAL_PCD_EP_DB_Transmit+0x458>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2250      	movs	r2, #80	; 0x50
 800417c:	5a9b      	ldrh	r3, [r3, r2]
 800417e:	b29b      	uxth	r3, r3
 8004180:	001a      	movs	r2, r3
 8004182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004184:	189b      	adds	r3, r3, r2
 8004186:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	00da      	lsls	r2, r3, #3
 800418e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004190:	18d3      	adds	r3, r2, r3
 8004192:	4ab1      	ldr	r2, [pc, #708]	; (8004458 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004194:	4694      	mov	ip, r2
 8004196:	4463      	add	r3, ip
 8004198:	66bb      	str	r3, [r7, #104]	; 0x68
 800419a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	4aae      	ldr	r2, [pc, #696]	; (800445c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041a8:	801a      	strh	r2, [r3, #0]
 80041aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	4aab      	ldr	r2, [pc, #684]	; (8004460 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041b8:	801a      	strh	r2, [r3, #0]
 80041ba:	e01b      	b.n	80041f4 <HAL_PCD_EP_DB_Transmit+0x490>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d117      	bne.n	80041f4 <HAL_PCD_EP_DB_Transmit+0x490>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	677b      	str	r3, [r7, #116]	; 0x74
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2250      	movs	r2, #80	; 0x50
 80041d0:	5a9b      	ldrh	r3, [r3, r2]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	001a      	movs	r2, r3
 80041d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d8:	189b      	adds	r3, r3, r2
 80041da:	677b      	str	r3, [r7, #116]	; 0x74
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	00da      	lsls	r2, r3, #3
 80041e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e4:	18d3      	adds	r3, r2, r3
 80041e6:	4a9c      	ldr	r2, [pc, #624]	; (8004458 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80041e8:	4694      	mov	ip, r2
 80041ea:	4463      	add	r3, ip
 80041ec:	673b      	str	r3, [r7, #112]	; 0x70
 80041ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f0:	2200      	movs	r2, #0
 80041f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	785b      	ldrb	r3, [r3, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d130      	bne.n	8004264 <HAL_PCD_EP_DB_Transmit+0x500>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2180      	movs	r1, #128	; 0x80
 8004208:	187a      	adds	r2, r7, r1
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2250      	movs	r2, #80	; 0x50
 8004212:	5a9b      	ldrh	r3, [r3, r2]
 8004214:	b29b      	uxth	r3, r3
 8004216:	001a      	movs	r2, r3
 8004218:	187b      	adds	r3, r7, r1
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	189b      	adds	r3, r3, r2
 800421e:	187a      	adds	r2, r7, r1
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	00da      	lsls	r2, r3, #3
 8004228:	187b      	adds	r3, r7, r1
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	18d3      	adds	r3, r2, r3
 800422e:	4a89      	ldr	r2, [pc, #548]	; (8004454 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004230:	4694      	mov	ip, r2
 8004232:	4463      	add	r3, ip
 8004234:	2184      	movs	r1, #132	; 0x84
 8004236:	187a      	adds	r2, r7, r1
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	187b      	adds	r3, r7, r1
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	4a86      	ldr	r2, [pc, #536]	; (800445c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004244:	4013      	ands	r3, r2
 8004246:	b29a      	uxth	r2, r3
 8004248:	187b      	adds	r3, r7, r1
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	187b      	adds	r3, r7, r1
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	4a82      	ldr	r2, [pc, #520]	; (8004460 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004258:	4313      	orrs	r3, r2
 800425a:	b29a      	uxth	r2, r3
 800425c:	187b      	adds	r3, r7, r1
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	801a      	strh	r2, [r3, #0]
 8004262:	e018      	b.n	8004296 <HAL_PCD_EP_DB_Transmit+0x532>
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	785b      	ldrb	r3, [r3, #1]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d114      	bne.n	8004296 <HAL_PCD_EP_DB_Transmit+0x532>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2250      	movs	r2, #80	; 0x50
 8004272:	5a9b      	ldrh	r3, [r3, r2]
 8004274:	b29b      	uxth	r3, r3
 8004276:	001a      	movs	r2, r3
 8004278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800427a:	189b      	adds	r3, r3, r2
 800427c:	67bb      	str	r3, [r7, #120]	; 0x78
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	00da      	lsls	r2, r3, #3
 8004284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004286:	18d3      	adds	r3, r2, r3
 8004288:	4a72      	ldr	r2, [pc, #456]	; (8004454 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800428a:	4694      	mov	ip, r2
 800428c:	4463      	add	r3, ip
 800428e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004290:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004292:	2200      	movs	r2, #0
 8004294:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	781a      	ldrb	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	0011      	movs	r1, r2
 800429e:	0018      	movs	r0, r3
 80042a0:	f006 fc92 	bl	800abc8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042a4:	1dbb      	adds	r3, r7, #6
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	01db      	lsls	r3, r3, #7
 80042ac:	4013      	ands	r3, r2
 80042ae:	d000      	beq.n	80042b2 <HAL_PCD_EP_DB_Transmit+0x54e>
 80042b0:	e100      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	001a      	movs	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	18d3      	adds	r3, r2, r3
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	2046      	movs	r0, #70	; 0x46
 80042c6:	183b      	adds	r3, r7, r0
 80042c8:	4966      	ldr	r1, [pc, #408]	; (8004464 <HAL_PCD_EP_DB_Transmit+0x700>)
 80042ca:	400a      	ands	r2, r1
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	001a      	movs	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	18d3      	adds	r3, r2, r3
 80042dc:	183a      	adds	r2, r7, r0
 80042de:	8812      	ldrh	r2, [r2, #0]
 80042e0:	4961      	ldr	r1, [pc, #388]	; (8004468 <HAL_PCD_EP_DB_Transmit+0x704>)
 80042e2:	430a      	orrs	r2, r1
 80042e4:	b292      	uxth	r2, r2
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	e0e4      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042ea:	1dbb      	adds	r3, r7, #6
 80042ec:	881a      	ldrh	r2, [r3, #0]
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	01db      	lsls	r3, r3, #7
 80042f2:	4013      	ands	r3, r2
 80042f4:	d11a      	bne.n	800432c <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	001a      	movs	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	18d3      	adds	r3, r2, r3
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29a      	uxth	r2, r3
 8004308:	204c      	movs	r0, #76	; 0x4c
 800430a:	183b      	adds	r3, r7, r0
 800430c:	4955      	ldr	r1, [pc, #340]	; (8004464 <HAL_PCD_EP_DB_Transmit+0x700>)
 800430e:	400a      	ands	r2, r1
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	001a      	movs	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	18d3      	adds	r3, r2, r3
 8004320:	183a      	adds	r2, r7, r0
 8004322:	8812      	ldrh	r2, [r2, #0]
 8004324:	4950      	ldr	r1, [pc, #320]	; (8004468 <HAL_PCD_EP_DB_Transmit+0x704>)
 8004326:	430a      	orrs	r2, r1
 8004328:	b292      	uxth	r2, r2
 800432a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2224      	movs	r2, #36	; 0x24
 8004330:	5c9b      	ldrb	r3, [r3, r2]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d000      	beq.n	8004338 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8004336:	e0bd      	b.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	214e      	movs	r1, #78	; 0x4e
 800433e:	187b      	adds	r3, r7, r1
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	18d2      	adds	r2, r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	187b      	adds	r3, r7, r1
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	18d2      	adds	r2, r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	429a      	cmp	r2, r3
 8004360:	d309      	bcc.n	8004376 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800436e:	1ad2      	subs	r2, r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	621a      	str	r2, [r3, #32]
 8004374:	e016      	b.n	80043a4 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d108      	bne.n	8004390 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 800437e:	234e      	movs	r3, #78	; 0x4e
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2224      	movs	r2, #36	; 0x24
 800438a:	2100      	movs	r1, #0
 800438c:	5499      	strb	r1, [r3, r2]
 800438e:	e009      	b.n	80043a4 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2200      	movs	r2, #0
 800439a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2224      	movs	r2, #36	; 0x24
 80043a0:	2100      	movs	r1, #0
 80043a2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	667b      	str	r3, [r7, #100]	; 0x64
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	785b      	ldrb	r3, [r3, #1]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d15c      	bne.n	800446c <HAL_PCD_EP_DB_Transmit+0x708>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2250      	movs	r2, #80	; 0x50
 80043be:	5a9b      	ldrh	r3, [r3, r2]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	001a      	movs	r2, r3
 80043c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	00da      	lsls	r2, r3, #3
 80043d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d2:	18d3      	adds	r3, r2, r3
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80043d6:	4694      	mov	ip, r2
 80043d8:	4463      	add	r3, ip
 80043da:	65bb      	str	r3, [r7, #88]	; 0x58
 80043dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d110      	bne.n	8004404 <HAL_PCD_EP_DB_Transmit+0x6a0>
 80043e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043f0:	801a      	strh	r2, [r3, #0]
 80043f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	e04d      	b.n	80044a0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004406:	2b3e      	cmp	r3, #62	; 0x3e
 8004408:	d810      	bhi.n	800442c <HAL_PCD_EP_DB_Transmit+0x6c8>
 800440a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	657b      	str	r3, [r7, #84]	; 0x54
 8004410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004412:	2201      	movs	r2, #1
 8004414:	4013      	ands	r3, r2
 8004416:	d002      	beq.n	800441e <HAL_PCD_EP_DB_Transmit+0x6ba>
 8004418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441a:	3301      	adds	r3, #1
 800441c:	657b      	str	r3, [r7, #84]	; 0x54
 800441e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004420:	b29b      	uxth	r3, r3
 8004422:	029b      	lsls	r3, r3, #10
 8004424:	b29a      	uxth	r2, r3
 8004426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004428:	801a      	strh	r2, [r3, #0]
 800442a:	e039      	b.n	80044a0 <HAL_PCD_EP_DB_Transmit+0x73c>
 800442c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	657b      	str	r3, [r7, #84]	; 0x54
 8004432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004434:	221f      	movs	r2, #31
 8004436:	4013      	ands	r3, r2
 8004438:	d102      	bne.n	8004440 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800443a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443c:	3b01      	subs	r3, #1
 800443e:	657b      	str	r3, [r7, #84]	; 0x54
 8004440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004442:	b29b      	uxth	r3, r3
 8004444:	029b      	lsls	r3, r3, #10
 8004446:	b29b      	uxth	r3, r3
 8004448:	4a05      	ldr	r2, [pc, #20]	; (8004460 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800444a:	4313      	orrs	r3, r2
 800444c:	b29a      	uxth	r2, r3
 800444e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004450:	801a      	strh	r2, [r3, #0]
 8004452:	e025      	b.n	80044a0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004454:	00000406 	.word	0x00000406
 8004458:	00000402 	.word	0x00000402
 800445c:	ffff83ff 	.word	0xffff83ff
 8004460:	ffff8000 	.word	0xffff8000
 8004464:	ffff8f8f 	.word	0xffff8f8f
 8004468:	ffffc080 	.word	0xffffc080
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	785b      	ldrb	r3, [r3, #1]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d115      	bne.n	80044a0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2250      	movs	r2, #80	; 0x50
 800447a:	5a9b      	ldrh	r3, [r3, r2]
 800447c:	b29b      	uxth	r3, r3
 800447e:	001a      	movs	r2, r3
 8004480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004482:	189b      	adds	r3, r3, r2
 8004484:	667b      	str	r3, [r7, #100]	; 0x64
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	00da      	lsls	r2, r3, #3
 800448c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800448e:	18d3      	adds	r3, r2, r3
 8004490:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8004492:	4694      	mov	ip, r2
 8004494:	4463      	add	r3, ip
 8004496:	663b      	str	r3, [r7, #96]	; 0x60
 8004498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449a:	b29a      	uxth	r2, r3
 800449c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800449e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6959      	ldr	r1, [r3, #20]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	895a      	ldrh	r2, [r3, #10]
 80044ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f004 fb42 	bl	8008b38 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	001a      	movs	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	18d3      	adds	r3, r2, r3
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	2010      	movs	r0, #16
 80044c8:	183b      	adds	r3, r7, r0
 80044ca:	4911      	ldr	r1, [pc, #68]	; (8004510 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80044cc:	400a      	ands	r2, r1
 80044ce:	801a      	strh	r2, [r3, #0]
 80044d0:	183b      	adds	r3, r7, r0
 80044d2:	183a      	adds	r2, r7, r0
 80044d4:	8812      	ldrh	r2, [r2, #0]
 80044d6:	2110      	movs	r1, #16
 80044d8:	404a      	eors	r2, r1
 80044da:	801a      	strh	r2, [r3, #0]
 80044dc:	183b      	adds	r3, r7, r0
 80044de:	183a      	adds	r2, r7, r0
 80044e0:	8812      	ldrh	r2, [r2, #0]
 80044e2:	2120      	movs	r1, #32
 80044e4:	404a      	eors	r2, r1
 80044e6:	801a      	strh	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	001a      	movs	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	18d3      	adds	r3, r2, r3
 80044f6:	183a      	adds	r2, r7, r0
 80044f8:	8812      	ldrh	r2, [r2, #0]
 80044fa:	4906      	ldr	r1, [pc, #24]	; (8004514 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80044fc:	430a      	orrs	r2, r1
 80044fe:	b292      	uxth	r2, r2
 8004500:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b022      	add	sp, #136	; 0x88
 800450a:	bd80      	pop	{r7, pc}
 800450c:	00000406 	.word	0x00000406
 8004510:	ffff8fbf 	.word	0xffff8fbf
 8004514:	ffff8080 	.word	0xffff8080

08004518 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	0008      	movs	r0, r1
 8004522:	0011      	movs	r1, r2
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	240a      	movs	r4, #10
 8004528:	193b      	adds	r3, r7, r4
 800452a:	1c02      	adds	r2, r0, #0
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	2308      	movs	r3, #8
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	1c0a      	adds	r2, r1, #0
 8004534:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004536:	0021      	movs	r1, r4
 8004538:	187b      	adds	r3, r7, r1
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	2280      	movs	r2, #128	; 0x80
 800453e:	4013      	ands	r3, r2
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004546:	187b      	adds	r3, r7, r1
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	2207      	movs	r2, #7
 800454c:	4013      	ands	r3, r2
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	0013      	movs	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	189b      	adds	r3, r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	18d3      	adds	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e00b      	b.n	8004578 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004560:	230a      	movs	r3, #10
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	881a      	ldrh	r2, [r3, #0]
 8004566:	0013      	movs	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	189b      	adds	r3, r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	3369      	adds	r3, #105	; 0x69
 8004570:	33ff      	adds	r3, #255	; 0xff
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	18d3      	adds	r3, r2, r3
 8004576:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004578:	2308      	movs	r3, #8
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d107      	bne.n	8004592 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	b29a      	uxth	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	80da      	strh	r2, [r3, #6]
 8004590:	e00b      	b.n	80045aa <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2201      	movs	r2, #1
 8004596:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	b29a      	uxth	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	0018      	movs	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b007      	add	sp, #28
 80045b2:	bd90      	pop	{r4, r7, pc}

080045b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	23ba      	movs	r3, #186	; 0xba
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	2101      	movs	r1, #1
 80045ca:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	23b8      	movs	r3, #184	; 0xb8
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	2100      	movs	r1, #0
 80045d4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2254      	movs	r2, #84	; 0x54
 80045da:	5a9b      	ldrh	r3, [r3, r2]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2201      	movs	r2, #1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	b299      	uxth	r1, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2254      	movs	r2, #84	; 0x54
 80045e8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2254      	movs	r2, #84	; 0x54
 80045ee:	5a9b      	ldrh	r3, [r3, r2]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2202      	movs	r2, #2
 80045f4:	4313      	orrs	r3, r2
 80045f6:	b299      	uxth	r1, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2254      	movs	r2, #84	; 0x54
 80045fc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b004      	add	sp, #16
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	000a      	movs	r2, r1
 8004612:	1cfb      	adds	r3, r7, #3
 8004614:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	46bd      	mov	sp, r7
 800461a:	b002      	add	sp, #8
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f000 fb76 	bl	8004d20 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2201      	movs	r2, #1
 800463a:	4013      	ands	r3, r2
 800463c:	d100      	bne.n	8004640 <HAL_RCC_OscConfig+0x20>
 800463e:	e08e      	b.n	800475e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004640:	4bc5      	ldr	r3, [pc, #788]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	220c      	movs	r2, #12
 8004646:	4013      	ands	r3, r2
 8004648:	2b04      	cmp	r3, #4
 800464a:	d00e      	beq.n	800466a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800464c:	4bc2      	ldr	r3, [pc, #776]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	220c      	movs	r2, #12
 8004652:	4013      	ands	r3, r2
 8004654:	2b08      	cmp	r3, #8
 8004656:	d117      	bne.n	8004688 <HAL_RCC_OscConfig+0x68>
 8004658:	4bbf      	ldr	r3, [pc, #764]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	23c0      	movs	r3, #192	; 0xc0
 800465e:	025b      	lsls	r3, r3, #9
 8004660:	401a      	ands	r2, r3
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	025b      	lsls	r3, r3, #9
 8004666:	429a      	cmp	r2, r3
 8004668:	d10e      	bne.n	8004688 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466a:	4bbb      	ldr	r3, [pc, #748]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	029b      	lsls	r3, r3, #10
 8004672:	4013      	ands	r3, r2
 8004674:	d100      	bne.n	8004678 <HAL_RCC_OscConfig+0x58>
 8004676:	e071      	b.n	800475c <HAL_RCC_OscConfig+0x13c>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d000      	beq.n	8004682 <HAL_RCC_OscConfig+0x62>
 8004680:	e06c      	b.n	800475c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f000 fb4c 	bl	8004d20 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_OscConfig+0x80>
 8004690:	4bb1      	ldr	r3, [pc, #708]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	4bb0      	ldr	r3, [pc, #704]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004696:	2180      	movs	r1, #128	; 0x80
 8004698:	0249      	lsls	r1, r1, #9
 800469a:	430a      	orrs	r2, r1
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	e02f      	b.n	8004700 <HAL_RCC_OscConfig+0xe0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10c      	bne.n	80046c2 <HAL_RCC_OscConfig+0xa2>
 80046a8:	4bab      	ldr	r3, [pc, #684]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4baa      	ldr	r3, [pc, #680]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046ae:	49ab      	ldr	r1, [pc, #684]	; (800495c <HAL_RCC_OscConfig+0x33c>)
 80046b0:	400a      	ands	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	4ba8      	ldr	r3, [pc, #672]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4ba7      	ldr	r3, [pc, #668]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046ba:	49a9      	ldr	r1, [pc, #676]	; (8004960 <HAL_RCC_OscConfig+0x340>)
 80046bc:	400a      	ands	r2, r1
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e01e      	b.n	8004700 <HAL_RCC_OscConfig+0xe0>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d10e      	bne.n	80046e8 <HAL_RCC_OscConfig+0xc8>
 80046ca:	4ba3      	ldr	r3, [pc, #652]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4ba2      	ldr	r3, [pc, #648]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046d0:	2180      	movs	r1, #128	; 0x80
 80046d2:	02c9      	lsls	r1, r1, #11
 80046d4:	430a      	orrs	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	4b9f      	ldr	r3, [pc, #636]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b9e      	ldr	r3, [pc, #632]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	0249      	lsls	r1, r1, #9
 80046e2:	430a      	orrs	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0xe0>
 80046e8:	4b9b      	ldr	r3, [pc, #620]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b9a      	ldr	r3, [pc, #616]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046ee:	499b      	ldr	r1, [pc, #620]	; (800495c <HAL_RCC_OscConfig+0x33c>)
 80046f0:	400a      	ands	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	4b98      	ldr	r3, [pc, #608]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b97      	ldr	r3, [pc, #604]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80046fa:	4999      	ldr	r1, [pc, #612]	; (8004960 <HAL_RCC_OscConfig+0x340>)
 80046fc:	400a      	ands	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d014      	beq.n	8004732 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fd fa74 	bl	8001bf4 <HAL_GetTick>
 800470c:	0003      	movs	r3, r0
 800470e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004712:	f7fd fa6f 	bl	8001bf4 <HAL_GetTick>
 8004716:	0002      	movs	r2, r0
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b64      	cmp	r3, #100	; 0x64
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e2fd      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004724:	4b8c      	ldr	r3, [pc, #560]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	029b      	lsls	r3, r3, #10
 800472c:	4013      	ands	r3, r2
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0xf2>
 8004730:	e015      	b.n	800475e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004732:	f7fd fa5f 	bl	8001bf4 <HAL_GetTick>
 8004736:	0003      	movs	r3, r0
 8004738:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800473c:	f7fd fa5a 	bl	8001bf4 <HAL_GetTick>
 8004740:	0002      	movs	r2, r0
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	; 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e2e8      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474e:	4b82      	ldr	r3, [pc, #520]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	029b      	lsls	r3, r3, #10
 8004756:	4013      	ands	r3, r2
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x11c>
 800475a:	e000      	b.n	800475e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2202      	movs	r2, #2
 8004764:	4013      	ands	r3, r2
 8004766:	d100      	bne.n	800476a <HAL_RCC_OscConfig+0x14a>
 8004768:	e06c      	b.n	8004844 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800476a:	4b7b      	ldr	r3, [pc, #492]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	220c      	movs	r2, #12
 8004770:	4013      	ands	r3, r2
 8004772:	d00e      	beq.n	8004792 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004774:	4b78      	ldr	r3, [pc, #480]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	220c      	movs	r2, #12
 800477a:	4013      	ands	r3, r2
 800477c:	2b08      	cmp	r3, #8
 800477e:	d11f      	bne.n	80047c0 <HAL_RCC_OscConfig+0x1a0>
 8004780:	4b75      	ldr	r3, [pc, #468]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	23c0      	movs	r3, #192	; 0xc0
 8004786:	025b      	lsls	r3, r3, #9
 8004788:	401a      	ands	r2, r3
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	429a      	cmp	r2, r3
 8004790:	d116      	bne.n	80047c0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	4b71      	ldr	r3, [pc, #452]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2202      	movs	r2, #2
 8004798:	4013      	ands	r3, r2
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_OscConfig+0x188>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e2bb      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a8:	4b6b      	ldr	r3, [pc, #428]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	22f8      	movs	r2, #248	; 0xf8
 80047ae:	4393      	bics	r3, r2
 80047b0:	0019      	movs	r1, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00da      	lsls	r2, r3, #3
 80047b8:	4b67      	ldr	r3, [pc, #412]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80047ba:	430a      	orrs	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047be:	e041      	b.n	8004844 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d024      	beq.n	8004812 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c8:	4b63      	ldr	r3, [pc, #396]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4b62      	ldr	r3, [pc, #392]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80047ce:	2101      	movs	r1, #1
 80047d0:	430a      	orrs	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fd fa0e 	bl	8001bf4 <HAL_GetTick>
 80047d8:	0003      	movs	r3, r0
 80047da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047de:	f7fd fa09 	bl	8001bf4 <HAL_GetTick>
 80047e2:	0002      	movs	r2, r0
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e297      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f0:	4b59      	ldr	r3, [pc, #356]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2202      	movs	r2, #2
 80047f6:	4013      	ands	r3, r2
 80047f8:	d0f1      	beq.n	80047de <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fa:	4b57      	ldr	r3, [pc, #348]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	22f8      	movs	r2, #248	; 0xf8
 8004800:	4393      	bics	r3, r2
 8004802:	0019      	movs	r1, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	00da      	lsls	r2, r3, #3
 800480a:	4b53      	ldr	r3, [pc, #332]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 800480c:	430a      	orrs	r2, r1
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e018      	b.n	8004844 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004812:	4b51      	ldr	r3, [pc, #324]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b50      	ldr	r3, [pc, #320]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004818:	2101      	movs	r1, #1
 800481a:	438a      	bics	r2, r1
 800481c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481e:	f7fd f9e9 	bl	8001bf4 <HAL_GetTick>
 8004822:	0003      	movs	r3, r0
 8004824:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004828:	f7fd f9e4 	bl	8001bf4 <HAL_GetTick>
 800482c:	0002      	movs	r2, r0
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e272      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2202      	movs	r2, #2
 8004840:	4013      	ands	r3, r2
 8004842:	d1f1      	bne.n	8004828 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2208      	movs	r2, #8
 800484a:	4013      	ands	r3, r2
 800484c:	d036      	beq.n	80048bc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d019      	beq.n	800488a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004856:	4b40      	ldr	r3, [pc, #256]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800485a:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 800485c:	2101      	movs	r1, #1
 800485e:	430a      	orrs	r2, r1
 8004860:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004862:	f7fd f9c7 	bl	8001bf4 <HAL_GetTick>
 8004866:	0003      	movs	r3, r0
 8004868:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800486c:	f7fd f9c2 	bl	8001bf4 <HAL_GetTick>
 8004870:	0002      	movs	r2, r0
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e250      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487e:	4b36      	ldr	r3, [pc, #216]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	2202      	movs	r2, #2
 8004884:	4013      	ands	r3, r2
 8004886:	d0f1      	beq.n	800486c <HAL_RCC_OscConfig+0x24c>
 8004888:	e018      	b.n	80048bc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488a:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 800488c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800488e:	4b32      	ldr	r3, [pc, #200]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 8004890:	2101      	movs	r1, #1
 8004892:	438a      	bics	r2, r1
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004896:	f7fd f9ad 	bl	8001bf4 <HAL_GetTick>
 800489a:	0003      	movs	r3, r0
 800489c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a0:	f7fd f9a8 	bl	8001bf4 <HAL_GetTick>
 80048a4:	0002      	movs	r2, r0
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e236      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b2:	4b29      	ldr	r3, [pc, #164]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	2202      	movs	r2, #2
 80048b8:	4013      	ands	r3, r2
 80048ba:	d1f1      	bne.n	80048a0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2204      	movs	r2, #4
 80048c2:	4013      	ands	r3, r2
 80048c4:	d100      	bne.n	80048c8 <HAL_RCC_OscConfig+0x2a8>
 80048c6:	e0b5      	b.n	8004a34 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c8:	201f      	movs	r0, #31
 80048ca:	183b      	adds	r3, r7, r0
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d0:	4b21      	ldr	r3, [pc, #132]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	055b      	lsls	r3, r3, #21
 80048d8:	4013      	ands	r3, r2
 80048da:	d110      	bne.n	80048fe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048dc:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80048e2:	2180      	movs	r1, #128	; 0x80
 80048e4:	0549      	lsls	r1, r1, #21
 80048e6:	430a      	orrs	r2, r1
 80048e8:	61da      	str	r2, [r3, #28]
 80048ea:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 80048ec:	69da      	ldr	r2, [r3, #28]
 80048ee:	2380      	movs	r3, #128	; 0x80
 80048f0:	055b      	lsls	r3, r3, #21
 80048f2:	4013      	ands	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048f8:	183b      	adds	r3, r7, r0
 80048fa:	2201      	movs	r2, #1
 80048fc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fe:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCC_OscConfig+0x344>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	4013      	ands	r3, r2
 8004908:	d11a      	bne.n	8004940 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <HAL_RCC_OscConfig+0x344>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <HAL_RCC_OscConfig+0x344>)
 8004910:	2180      	movs	r1, #128	; 0x80
 8004912:	0049      	lsls	r1, r1, #1
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004918:	f7fd f96c 	bl	8001bf4 <HAL_GetTick>
 800491c:	0003      	movs	r3, r0
 800491e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004922:	f7fd f967 	bl	8001bf4 <HAL_GetTick>
 8004926:	0002      	movs	r2, r0
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b64      	cmp	r3, #100	; 0x64
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e1f5      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_RCC_OscConfig+0x344>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4013      	ands	r3, r2
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d10f      	bne.n	8004968 <HAL_RCC_OscConfig+0x348>
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 800494a:	6a1a      	ldr	r2, [r3, #32]
 800494c:	4b02      	ldr	r3, [pc, #8]	; (8004958 <HAL_RCC_OscConfig+0x338>)
 800494e:	2101      	movs	r1, #1
 8004950:	430a      	orrs	r2, r1
 8004952:	621a      	str	r2, [r3, #32]
 8004954:	e036      	b.n	80049c4 <HAL_RCC_OscConfig+0x3a4>
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	40021000 	.word	0x40021000
 800495c:	fffeffff 	.word	0xfffeffff
 8004960:	fffbffff 	.word	0xfffbffff
 8004964:	40007000 	.word	0x40007000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10c      	bne.n	800498a <HAL_RCC_OscConfig+0x36a>
 8004970:	4bca      	ldr	r3, [pc, #808]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004972:	6a1a      	ldr	r2, [r3, #32]
 8004974:	4bc9      	ldr	r3, [pc, #804]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004976:	2101      	movs	r1, #1
 8004978:	438a      	bics	r2, r1
 800497a:	621a      	str	r2, [r3, #32]
 800497c:	4bc7      	ldr	r3, [pc, #796]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 800497e:	6a1a      	ldr	r2, [r3, #32]
 8004980:	4bc6      	ldr	r3, [pc, #792]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004982:	2104      	movs	r1, #4
 8004984:	438a      	bics	r2, r1
 8004986:	621a      	str	r2, [r3, #32]
 8004988:	e01c      	b.n	80049c4 <HAL_RCC_OscConfig+0x3a4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b05      	cmp	r3, #5
 8004990:	d10c      	bne.n	80049ac <HAL_RCC_OscConfig+0x38c>
 8004992:	4bc2      	ldr	r3, [pc, #776]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	4bc1      	ldr	r3, [pc, #772]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004998:	2104      	movs	r1, #4
 800499a:	430a      	orrs	r2, r1
 800499c:	621a      	str	r2, [r3, #32]
 800499e:	4bbf      	ldr	r3, [pc, #764]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 80049a0:	6a1a      	ldr	r2, [r3, #32]
 80049a2:	4bbe      	ldr	r3, [pc, #760]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 80049a4:	2101      	movs	r1, #1
 80049a6:	430a      	orrs	r2, r1
 80049a8:	621a      	str	r2, [r3, #32]
 80049aa:	e00b      	b.n	80049c4 <HAL_RCC_OscConfig+0x3a4>
 80049ac:	4bbb      	ldr	r3, [pc, #748]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	4bba      	ldr	r3, [pc, #744]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 80049b2:	2101      	movs	r1, #1
 80049b4:	438a      	bics	r2, r1
 80049b6:	621a      	str	r2, [r3, #32]
 80049b8:	4bb8      	ldr	r3, [pc, #736]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	4bb7      	ldr	r3, [pc, #732]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 80049be:	2104      	movs	r1, #4
 80049c0:	438a      	bics	r2, r1
 80049c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d014      	beq.n	80049f6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049cc:	f7fd f912 	bl	8001bf4 <HAL_GetTick>
 80049d0:	0003      	movs	r3, r0
 80049d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d4:	e009      	b.n	80049ea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d6:	f7fd f90d 	bl	8001bf4 <HAL_GetTick>
 80049da:	0002      	movs	r2, r0
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	4aaf      	ldr	r2, [pc, #700]	; (8004ca0 <HAL_RCC_OscConfig+0x680>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e19a      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	4bac      	ldr	r3, [pc, #688]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	2202      	movs	r2, #2
 80049f0:	4013      	ands	r3, r2
 80049f2:	d0f0      	beq.n	80049d6 <HAL_RCC_OscConfig+0x3b6>
 80049f4:	e013      	b.n	8004a1e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f6:	f7fd f8fd 	bl	8001bf4 <HAL_GetTick>
 80049fa:	0003      	movs	r3, r0
 80049fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fe:	e009      	b.n	8004a14 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fd f8f8 	bl	8001bf4 <HAL_GetTick>
 8004a04:	0002      	movs	r2, r0
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	4aa5      	ldr	r2, [pc, #660]	; (8004ca0 <HAL_RCC_OscConfig+0x680>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e185      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a14:	4ba1      	ldr	r3, [pc, #644]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a1e:	231f      	movs	r3, #31
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a28:	4b9c      	ldr	r3, [pc, #624]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	4b9b      	ldr	r3, [pc, #620]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004a2e:	499d      	ldr	r1, [pc, #628]	; (8004ca4 <HAL_RCC_OscConfig+0x684>)
 8004a30:	400a      	ands	r2, r1
 8004a32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d063      	beq.n	8004b06 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d12a      	bne.n	8004a9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a46:	4b95      	ldr	r3, [pc, #596]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a4a:	4b94      	ldr	r3, [pc, #592]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004a4c:	2104      	movs	r1, #4
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004a52:	4b92      	ldr	r3, [pc, #584]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a56:	4b91      	ldr	r3, [pc, #580]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004a58:	2101      	movs	r1, #1
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5e:	f7fd f8c9 	bl	8001bf4 <HAL_GetTick>
 8004a62:	0003      	movs	r3, r0
 8004a64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a68:	f7fd f8c4 	bl	8001bf4 <HAL_GetTick>
 8004a6c:	0002      	movs	r2, r0
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e152      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a7a:	4b88      	ldr	r3, [pc, #544]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	2202      	movs	r2, #2
 8004a80:	4013      	ands	r3, r2
 8004a82:	d0f1      	beq.n	8004a68 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a84:	4b85      	ldr	r3, [pc, #532]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	22f8      	movs	r2, #248	; 0xf8
 8004a8a:	4393      	bics	r3, r2
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	00da      	lsls	r2, r3, #3
 8004a94:	4b81      	ldr	r3, [pc, #516]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004a96:	430a      	orrs	r2, r1
 8004a98:	635a      	str	r2, [r3, #52]	; 0x34
 8004a9a:	e034      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	3305      	adds	r3, #5
 8004aa2:	d111      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004aa4:	4b7d      	ldr	r3, [pc, #500]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa8:	4b7c      	ldr	r3, [pc, #496]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004aaa:	2104      	movs	r1, #4
 8004aac:	438a      	bics	r2, r1
 8004aae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004ab0:	4b7a      	ldr	r3, [pc, #488]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab4:	22f8      	movs	r2, #248	; 0xf8
 8004ab6:	4393      	bics	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	00da      	lsls	r2, r3, #3
 8004ac0:	4b76      	ldr	r3, [pc, #472]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ac6:	e01e      	b.n	8004b06 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ac8:	4b74      	ldr	r3, [pc, #464]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004acc:	4b73      	ldr	r3, [pc, #460]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004ace:	2104      	movs	r1, #4
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004ad4:	4b71      	ldr	r3, [pc, #452]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ad8:	4b70      	ldr	r3, [pc, #448]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004ada:	2101      	movs	r1, #1
 8004adc:	438a      	bics	r2, r1
 8004ade:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae0:	f7fd f888 	bl	8001bf4 <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004aea:	f7fd f883 	bl	8001bf4 <HAL_GetTick>
 8004aee:	0002      	movs	r2, r0
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e111      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004afc:	4b67      	ldr	r3, [pc, #412]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	2202      	movs	r2, #2
 8004b02:	4013      	ands	r3, r2
 8004b04:	d1f1      	bne.n	8004aea <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d05c      	beq.n	8004bca <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004b10:	4b62      	ldr	r3, [pc, #392]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	220c      	movs	r2, #12
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d00e      	beq.n	8004b3a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004b1c:	4b5f      	ldr	r3, [pc, #380]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	220c      	movs	r2, #12
 8004b22:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d114      	bne.n	8004b52 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004b28:	4b5c      	ldr	r3, [pc, #368]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	23c0      	movs	r3, #192	; 0xc0
 8004b2e:	025b      	lsls	r3, r3, #9
 8004b30:	401a      	ands	r2, r3
 8004b32:	23c0      	movs	r3, #192	; 0xc0
 8004b34:	025b      	lsls	r3, r3, #9
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d10b      	bne.n	8004b52 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004b3a:	4b58      	ldr	r3, [pc, #352]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	025b      	lsls	r3, r3, #9
 8004b42:	4013      	ands	r3, r2
 8004b44:	d040      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x5a8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d03c      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0e6      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01b      	beq.n	8004b92 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004b5a:	4b50      	ldr	r3, [pc, #320]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b5e:	4b4f      	ldr	r3, [pc, #316]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004b60:	2180      	movs	r1, #128	; 0x80
 8004b62:	0249      	lsls	r1, r1, #9
 8004b64:	430a      	orrs	r2, r1
 8004b66:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fd f844 	bl	8001bf4 <HAL_GetTick>
 8004b6c:	0003      	movs	r3, r0
 8004b6e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b72:	f7fd f83f 	bl	8001bf4 <HAL_GetTick>
 8004b76:	0002      	movs	r2, r0
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e0cd      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b84:	4b45      	ldr	r3, [pc, #276]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	025b      	lsls	r3, r3, #9
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x552>
 8004b90:	e01b      	b.n	8004bca <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004b92:	4b42      	ldr	r3, [pc, #264]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b96:	4b41      	ldr	r3, [pc, #260]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004b98:	4943      	ldr	r1, [pc, #268]	; (8004ca8 <HAL_RCC_OscConfig+0x688>)
 8004b9a:	400a      	ands	r2, r1
 8004b9c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fd f829 	bl	8001bf4 <HAL_GetTick>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba8:	f7fd f824 	bl	8001bf4 <HAL_GetTick>
 8004bac:	0002      	movs	r2, r0
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e0b2      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004bba:	4b38      	ldr	r3, [pc, #224]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	025b      	lsls	r3, r3, #9
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x588>
 8004bc6:	e000      	b.n	8004bca <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004bc8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d100      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x5b4>
 8004bd2:	e0a4      	b.n	8004d1e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd4:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	220c      	movs	r2, #12
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d100      	bne.n	8004be2 <HAL_RCC_OscConfig+0x5c2>
 8004be0:	e078      	b.n	8004cd4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d14c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bea:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004bf0:	492e      	ldr	r1, [pc, #184]	; (8004cac <HAL_RCC_OscConfig+0x68c>)
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf6:	f7fc fffd 	bl	8001bf4 <HAL_GetTick>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fc fff8 	bl	8001bf4 <HAL_GetTick>
 8004c04:	0002      	movs	r2, r0
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e086      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c12:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	2380      	movs	r3, #128	; 0x80
 8004c18:	049b      	lsls	r3, r3, #18
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	220f      	movs	r2, #15
 8004c24:	4393      	bics	r3, r2
 8004c26:	0019      	movs	r1, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c32:	4b1a      	ldr	r3, [pc, #104]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_RCC_OscConfig+0x690>)
 8004c38:	4013      	ands	r3, r2
 8004c3a:	0019      	movs	r1, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	431a      	orrs	r2, r3
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c4c:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004c52:	2180      	movs	r1, #128	; 0x80
 8004c54:	0449      	lsls	r1, r1, #17
 8004c56:	430a      	orrs	r2, r1
 8004c58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5a:	f7fc ffcb 	bl	8001bf4 <HAL_GetTick>
 8004c5e:	0003      	movs	r3, r0
 8004c60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c64:	f7fc ffc6 	bl	8001bf4 <HAL_GetTick>
 8004c68:	0002      	movs	r2, r0
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e054      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	2380      	movs	r3, #128	; 0x80
 8004c7c:	049b      	lsls	r3, r3, #18
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0x644>
 8004c82:	e04c      	b.n	8004d1e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <HAL_RCC_OscConfig+0x67c>)
 8004c8a:	4908      	ldr	r1, [pc, #32]	; (8004cac <HAL_RCC_OscConfig+0x68c>)
 8004c8c:	400a      	ands	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c90:	f7fc ffb0 	bl	8001bf4 <HAL_GetTick>
 8004c94:	0003      	movs	r3, r0
 8004c96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c98:	e015      	b.n	8004cc6 <HAL_RCC_OscConfig+0x6a6>
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	00001388 	.word	0x00001388
 8004ca4:	efffffff 	.word	0xefffffff
 8004ca8:	fffeffff 	.word	0xfffeffff
 8004cac:	feffffff 	.word	0xfeffffff
 8004cb0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fc ff9e 	bl	8001bf4 <HAL_GetTick>
 8004cb8:	0002      	movs	r2, r0
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e02c      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc6:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <HAL_RCC_OscConfig+0x708>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	049b      	lsls	r3, r3, #18
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x694>
 8004cd2:	e024      	b.n	8004d1e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e01f      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004ce0:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <HAL_RCC_OscConfig+0x708>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004ce6:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <HAL_RCC_OscConfig+0x708>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	23c0      	movs	r3, #192	; 0xc0
 8004cf0:	025b      	lsls	r3, r3, #9
 8004cf2:	401a      	ands	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d10e      	bne.n	8004d1a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	220f      	movs	r2, #15
 8004d00:	401a      	ands	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d107      	bne.n	8004d1a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	23f0      	movs	r3, #240	; 0xf0
 8004d0e:	039b      	lsls	r3, r3, #14
 8004d10:	401a      	ands	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d001      	beq.n	8004d1e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b008      	add	sp, #32
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000

08004d2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0bf      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d40:	4b61      	ldr	r3, [pc, #388]	; (8004ec8 <HAL_RCC_ClockConfig+0x19c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2201      	movs	r2, #1
 8004d46:	4013      	ands	r3, r2
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d911      	bls.n	8004d72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4e:	4b5e      	ldr	r3, [pc, #376]	; (8004ec8 <HAL_RCC_ClockConfig+0x19c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2201      	movs	r2, #1
 8004d54:	4393      	bics	r3, r2
 8004d56:	0019      	movs	r1, r3
 8004d58:	4b5b      	ldr	r3, [pc, #364]	; (8004ec8 <HAL_RCC_ClockConfig+0x19c>)
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d60:	4b59      	ldr	r3, [pc, #356]	; (8004ec8 <HAL_RCC_ClockConfig+0x19c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	4013      	ands	r3, r2
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d001      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e0a6      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2202      	movs	r2, #2
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2204      	movs	r2, #4
 8004d82:	4013      	ands	r3, r2
 8004d84:	d006      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004d86:	4b51      	ldr	r3, [pc, #324]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4b50      	ldr	r3, [pc, #320]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004d8c:	21e0      	movs	r1, #224	; 0xe0
 8004d8e:	00c9      	lsls	r1, r1, #3
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d94:	4b4d      	ldr	r3, [pc, #308]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	22f0      	movs	r2, #240	; 0xf0
 8004d9a:	4393      	bics	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	4b4a      	ldr	r3, [pc, #296]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2201      	movs	r2, #1
 8004dae:	4013      	ands	r3, r2
 8004db0:	d04c      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dba:	4b44      	ldr	r3, [pc, #272]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	029b      	lsls	r3, r3, #10
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d120      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e07a      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd2:	4b3e      	ldr	r3, [pc, #248]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	049b      	lsls	r3, r3, #18
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d114      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e06e      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004dea:	4b38      	ldr	r3, [pc, #224]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dee:	2380      	movs	r3, #128	; 0x80
 8004df0:	025b      	lsls	r3, r3, #9
 8004df2:	4013      	ands	r3, r2
 8004df4:	d108      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e062      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfa:	4b34      	ldr	r3, [pc, #208]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	4013      	ands	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e05b      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e08:	4b30      	ldr	r3, [pc, #192]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	4393      	bics	r3, r2
 8004e10:	0019      	movs	r1, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e1c:	f7fc feea 	bl	8001bf4 <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e24:	e009      	b.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e26:	f7fc fee5 	bl	8001bf4 <HAL_GetTick>
 8004e2a:	0002      	movs	r2, r0
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	4a27      	ldr	r2, [pc, #156]	; (8004ed0 <HAL_RCC_ClockConfig+0x1a4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e042      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	220c      	movs	r2, #12
 8004e40:	401a      	ands	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d1ec      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ec8 <HAL_RCC_ClockConfig+0x19c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2201      	movs	r2, #1
 8004e52:	4013      	ands	r3, r2
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d211      	bcs.n	8004e7e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <HAL_RCC_ClockConfig+0x19c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	4393      	bics	r3, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <HAL_RCC_ClockConfig+0x19c>)
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6c:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <HAL_RCC_ClockConfig+0x19c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2201      	movs	r2, #1
 8004e72:	4013      	ands	r3, r2
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d001      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e020      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2204      	movs	r2, #4
 8004e84:	4013      	ands	r3, r2
 8004e86:	d009      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004e88:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <HAL_RCC_ClockConfig+0x1a8>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	0019      	movs	r1, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e9c:	f000 f820 	bl	8004ee0 <HAL_RCC_GetSysClockFreq>
 8004ea0:	0001      	movs	r1, r0
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <HAL_RCC_ClockConfig+0x1a0>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	220f      	movs	r2, #15
 8004eaa:	4013      	ands	r3, r2
 8004eac:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <HAL_RCC_ClockConfig+0x1ac>)
 8004eae:	5cd3      	ldrb	r3, [r2, r3]
 8004eb0:	000a      	movs	r2, r1
 8004eb2:	40da      	lsrs	r2, r3
 8004eb4:	4b09      	ldr	r3, [pc, #36]	; (8004edc <HAL_RCC_ClockConfig+0x1b0>)
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004eb8:	2003      	movs	r0, #3
 8004eba:	f7fc fe55 	bl	8001b68 <HAL_InitTick>
  
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b004      	add	sp, #16
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40022000 	.word	0x40022000
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	00001388 	.word	0x00001388
 8004ed4:	fffff8ff 	.word	0xfffff8ff
 8004ed8:	0800bb94 	.word	0x0800bb94
 8004edc:	20000000 	.word	0x20000000

08004ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b08f      	sub	sp, #60	; 0x3c
 8004ee4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004ee6:	2314      	movs	r3, #20
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	4a38      	ldr	r2, [pc, #224]	; (8004fcc <HAL_RCC_GetSysClockFreq+0xec>)
 8004eec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004eee:	c313      	stmia	r3!, {r0, r1, r4}
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	4a36      	ldr	r2, [pc, #216]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004ef8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004efa:	c313      	stmia	r3!, {r0, r1, r4}
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f04:	2300      	movs	r3, #0
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f08:	2300      	movs	r3, #0
 8004f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004f14:	4b2f      	ldr	r3, [pc, #188]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	220c      	movs	r2, #12
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	d047      	beq.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xd4>
 8004f24:	d849      	bhi.n	8004fba <HAL_RCC_GetSysClockFreq+0xda>
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d002      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x50>
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCC_GetSysClockFreq+0x56>
 8004f2e:	e044      	b.n	8004fba <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f30:	4b29      	ldr	r3, [pc, #164]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004f34:	e044      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	0c9b      	lsrs	r3, r3, #18
 8004f3a:	220f      	movs	r2, #15
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2214      	movs	r2, #20
 8004f40:	18ba      	adds	r2, r7, r2
 8004f42:	5cd3      	ldrb	r3, [r2, r3]
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004f46:	4b23      	ldr	r3, [pc, #140]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	220f      	movs	r2, #15
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	1d3a      	adds	r2, r7, #4
 8004f50:	5cd3      	ldrb	r3, [r2, r3]
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f56:	23c0      	movs	r3, #192	; 0xc0
 8004f58:	025b      	lsls	r3, r3, #9
 8004f5a:	401a      	ands	r2, r3
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	025b      	lsls	r3, r3, #9
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d109      	bne.n	8004f78 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f66:	481c      	ldr	r0, [pc, #112]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004f68:	f7fb f8e0 	bl	800012c <__udivsi3>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	001a      	movs	r2, r3
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	4353      	muls	r3, r2
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
 8004f76:	e01a      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f7a:	23c0      	movs	r3, #192	; 0xc0
 8004f7c:	025b      	lsls	r3, r3, #9
 8004f7e:	401a      	ands	r2, r3
 8004f80:	23c0      	movs	r3, #192	; 0xc0
 8004f82:	025b      	lsls	r3, r3, #9
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d109      	bne.n	8004f9c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f8a:	4814      	ldr	r0, [pc, #80]	; (8004fdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004f8c:	f7fb f8ce 	bl	800012c <__udivsi3>
 8004f90:	0003      	movs	r3, r0
 8004f92:	001a      	movs	r2, r3
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	4353      	muls	r3, r2
 8004f98:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f9e:	4810      	ldr	r0, [pc, #64]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004fa0:	f7fb f8c4 	bl	800012c <__udivsi3>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	001a      	movs	r2, r3
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	4353      	muls	r3, r2
 8004fac:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004fb2:	e005      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004fb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004fb8:	e002      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fba:	4b09      	ldr	r3, [pc, #36]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004fbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004fbe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b00f      	add	sp, #60	; 0x3c
 8004fc8:	bd90      	pop	{r4, r7, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	0800bb14 	.word	0x0800bb14
 8004fd0:	0800bb24 	.word	0x0800bb24
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	00f42400 	.word	0x00f42400
 8004fdc:	02dc6c00 	.word	0x02dc6c00
 8004fe0:	007a1200 	.word	0x007a1200

08004fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe8:	4b02      	ldr	r3, [pc, #8]	; (8004ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	0018      	movs	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	20000000 	.word	0x20000000

08004ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004ffc:	f7ff fff2 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005000:	0001      	movs	r1, r0
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	2207      	movs	r2, #7
 800500a:	4013      	ands	r3, r2
 800500c:	4a04      	ldr	r2, [pc, #16]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800500e:	5cd3      	ldrb	r3, [r2, r3]
 8005010:	40d9      	lsrs	r1, r3
 8005012:	000b      	movs	r3, r1
}    
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	40021000 	.word	0x40021000
 8005020:	0800bba4 	.word	0x0800bba4

08005024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	025b      	lsls	r3, r3, #9
 800503c:	4013      	ands	r3, r2
 800503e:	d100      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005040:	e08e      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005042:	2017      	movs	r0, #23
 8005044:	183b      	adds	r3, r7, r0
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800504a:	4b6e      	ldr	r3, [pc, #440]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	055b      	lsls	r3, r3, #21
 8005052:	4013      	ands	r3, r2
 8005054:	d110      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005056:	4b6b      	ldr	r3, [pc, #428]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005058:	69da      	ldr	r2, [r3, #28]
 800505a:	4b6a      	ldr	r3, [pc, #424]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800505c:	2180      	movs	r1, #128	; 0x80
 800505e:	0549      	lsls	r1, r1, #21
 8005060:	430a      	orrs	r2, r1
 8005062:	61da      	str	r2, [r3, #28]
 8005064:	4b67      	ldr	r3, [pc, #412]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	055b      	lsls	r3, r3, #21
 800506c:	4013      	ands	r3, r2
 800506e:	60bb      	str	r3, [r7, #8]
 8005070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005072:	183b      	adds	r3, r7, r0
 8005074:	2201      	movs	r2, #1
 8005076:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005078:	4b63      	ldr	r3, [pc, #396]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	4013      	ands	r3, r2
 8005082:	d11a      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005084:	4b60      	ldr	r3, [pc, #384]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b5f      	ldr	r3, [pc, #380]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800508a:	2180      	movs	r1, #128	; 0x80
 800508c:	0049      	lsls	r1, r1, #1
 800508e:	430a      	orrs	r2, r1
 8005090:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005092:	f7fc fdaf 	bl	8001bf4 <HAL_GetTick>
 8005096:	0003      	movs	r3, r0
 8005098:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509a:	e008      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509c:	f7fc fdaa 	bl	8001bf4 <HAL_GetTick>
 80050a0:	0002      	movs	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	; 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e0a6      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ae:	4b56      	ldr	r3, [pc, #344]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	2380      	movs	r3, #128	; 0x80
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	4013      	ands	r3, r2
 80050b8:	d0f0      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ba:	4b52      	ldr	r3, [pc, #328]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	23c0      	movs	r3, #192	; 0xc0
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4013      	ands	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d034      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	23c0      	movs	r3, #192	; 0xc0
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4013      	ands	r3, r2
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d02c      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050dc:	4b49      	ldr	r3, [pc, #292]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	4a4a      	ldr	r2, [pc, #296]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050e6:	4b47      	ldr	r3, [pc, #284]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050e8:	6a1a      	ldr	r2, [r3, #32]
 80050ea:	4b46      	ldr	r3, [pc, #280]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050ec:	2180      	movs	r1, #128	; 0x80
 80050ee:	0249      	lsls	r1, r1, #9
 80050f0:	430a      	orrs	r2, r1
 80050f2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050f4:	4b43      	ldr	r3, [pc, #268]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050f6:	6a1a      	ldr	r2, [r3, #32]
 80050f8:	4b42      	ldr	r3, [pc, #264]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80050fa:	4945      	ldr	r1, [pc, #276]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80050fc:	400a      	ands	r2, r1
 80050fe:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005100:	4b40      	ldr	r3, [pc, #256]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	4013      	ands	r3, r2
 800510c:	d013      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510e:	f7fc fd71 	bl	8001bf4 <HAL_GetTick>
 8005112:	0003      	movs	r3, r0
 8005114:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005116:	e009      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005118:	f7fc fd6c 	bl	8001bf4 <HAL_GetTick>
 800511c:	0002      	movs	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	4a3c      	ldr	r2, [pc, #240]	; (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e067      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512c:	4b35      	ldr	r3, [pc, #212]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	2202      	movs	r2, #2
 8005132:	4013      	ands	r3, r2
 8005134:	d0f0      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005136:	4b33      	ldr	r3, [pc, #204]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	4a34      	ldr	r2, [pc, #208]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800513c:	4013      	ands	r3, r2
 800513e:	0019      	movs	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	4b2f      	ldr	r3, [pc, #188]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005146:	430a      	orrs	r2, r1
 8005148:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800514a:	2317      	movs	r3, #23
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d105      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005154:	4b2b      	ldr	r3, [pc, #172]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800515a:	492f      	ldr	r1, [pc, #188]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800515c:	400a      	ands	r2, r1
 800515e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2201      	movs	r2, #1
 8005166:	4013      	ands	r3, r2
 8005168:	d009      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800516a:	4b26      	ldr	r3, [pc, #152]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	2203      	movs	r2, #3
 8005170:	4393      	bics	r3, r2
 8005172:	0019      	movs	r1, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	4b22      	ldr	r3, [pc, #136]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800517a:	430a      	orrs	r2, r1
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2202      	movs	r2, #2
 8005184:	4013      	ands	r3, r2
 8005186:	d009      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005188:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	4a23      	ldr	r2, [pc, #140]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800518e:	4013      	ands	r3, r2
 8005190:	0019      	movs	r1, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005198:	430a      	orrs	r2, r1
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2220      	movs	r2, #32
 80051a2:	4013      	ands	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051a6:	4b17      	ldr	r3, [pc, #92]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	2210      	movs	r2, #16
 80051ac:	4393      	bics	r3, r2
 80051ae:	0019      	movs	r1, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	4b13      	ldr	r3, [pc, #76]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051b6:	430a      	orrs	r2, r1
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	2380      	movs	r3, #128	; 0x80
 80051c0:	029b      	lsls	r3, r3, #10
 80051c2:	4013      	ands	r3, r2
 80051c4:	d009      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	2280      	movs	r2, #128	; 0x80
 80051cc:	4393      	bics	r3, r2
 80051ce:	0019      	movs	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699a      	ldr	r2, [r3, #24]
 80051d4:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051d6:	430a      	orrs	r2, r1
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	2380      	movs	r3, #128	; 0x80
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4013      	ands	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051e6:	4b07      	ldr	r3, [pc, #28]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	2240      	movs	r2, #64	; 0x40
 80051ec:	4393      	bics	r3, r2
 80051ee:	0019      	movs	r1, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	4b03      	ldr	r3, [pc, #12]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051f6:	430a      	orrs	r2, r1
 80051f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	0018      	movs	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	b006      	add	sp, #24
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40021000 	.word	0x40021000
 8005208:	40007000 	.word	0x40007000
 800520c:	fffffcff 	.word	0xfffffcff
 8005210:	fffeffff 	.word	0xfffeffff
 8005214:	00001388 	.word	0x00001388
 8005218:	efffffff 	.word	0xefffffff
 800521c:	fffcffff 	.word	0xfffcffff

08005220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0a8      	b.n	8005384 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	2382      	movs	r3, #130	; 0x82
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	429a      	cmp	r2, r3
 8005244:	d009      	beq.n	800525a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	61da      	str	r2, [r3, #28]
 800524c:	e005      	b.n	800525a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	225d      	movs	r2, #93	; 0x5d
 8005264:	5c9b      	ldrb	r3, [r3, r2]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d107      	bne.n	800527c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	225c      	movs	r2, #92	; 0x5c
 8005270:	2100      	movs	r1, #0
 8005272:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	0018      	movs	r0, r3
 8005278:	f7fc faac 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	225d      	movs	r2, #93	; 0x5d
 8005280:	2102      	movs	r1, #2
 8005282:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2140      	movs	r1, #64	; 0x40
 8005290:	438a      	bics	r2, r1
 8005292:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	23e0      	movs	r3, #224	; 0xe0
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	429a      	cmp	r2, r3
 800529e:	d902      	bls.n	80052a6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e002      	b.n	80052ac <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052a6:	2380      	movs	r3, #128	; 0x80
 80052a8:	015b      	lsls	r3, r3, #5
 80052aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	23f0      	movs	r3, #240	; 0xf0
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d008      	beq.n	80052ca <HAL_SPI_Init+0xaa>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	23e0      	movs	r3, #224	; 0xe0
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d002      	beq.n	80052ca <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	2382      	movs	r3, #130	; 0x82
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	401a      	ands	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6899      	ldr	r1, [r3, #8]
 80052d8:	2384      	movs	r3, #132	; 0x84
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	400b      	ands	r3, r1
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2102      	movs	r1, #2
 80052e6:	400b      	ands	r3, r1
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	2101      	movs	r1, #1
 80052f0:	400b      	ands	r3, r1
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6999      	ldr	r1, [r3, #24]
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	400b      	ands	r3, r1
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	2138      	movs	r1, #56	; 0x38
 8005306:	400b      	ands	r3, r1
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	2180      	movs	r1, #128	; 0x80
 8005310:	400b      	ands	r3, r1
 8005312:	431a      	orrs	r2, r3
 8005314:	0011      	movs	r1, r2
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800531a:	2380      	movs	r3, #128	; 0x80
 800531c:	019b      	lsls	r3, r3, #6
 800531e:	401a      	ands	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	2204      	movs	r2, #4
 8005330:	401a      	ands	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2110      	movs	r1, #16
 8005338:	400b      	ands	r3, r1
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005340:	2108      	movs	r1, #8
 8005342:	400b      	ands	r3, r1
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68d9      	ldr	r1, [r3, #12]
 800534a:	23f0      	movs	r3, #240	; 0xf0
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	400b      	ands	r3, r1
 8005350:	431a      	orrs	r2, r3
 8005352:	0011      	movs	r1, r2
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	2380      	movs	r3, #128	; 0x80
 8005358:	015b      	lsls	r3, r3, #5
 800535a:	401a      	ands	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4907      	ldr	r1, [pc, #28]	; (800538c <HAL_SPI_Init+0x16c>)
 8005370:	400a      	ands	r2, r1
 8005372:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	225d      	movs	r2, #93	; 0x5d
 800537e:	2101      	movs	r1, #1
 8005380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	0018      	movs	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	b004      	add	sp, #16
 800538a:	bd80      	pop	{r7, pc}
 800538c:	fffff7ff 	.word	0xfffff7ff

08005390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e042      	b.n	8005428 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	223d      	movs	r2, #61	; 0x3d
 80053a6:	5c9b      	ldrb	r3, [r3, r2]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d107      	bne.n	80053be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	223c      	movs	r2, #60	; 0x3c
 80053b2:	2100      	movs	r1, #0
 80053b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	0018      	movs	r0, r3
 80053ba:	f7fc fa59 	bl	8001870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	223d      	movs	r2, #61	; 0x3d
 80053c2:	2102      	movs	r1, #2
 80053c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	0019      	movs	r1, r3
 80053d0:	0010      	movs	r0, r2
 80053d2:	f000 fa65 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2246      	movs	r2, #70	; 0x46
 80053da:	2101      	movs	r1, #1
 80053dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	223e      	movs	r2, #62	; 0x3e
 80053e2:	2101      	movs	r1, #1
 80053e4:	5499      	strb	r1, [r3, r2]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	223f      	movs	r2, #63	; 0x3f
 80053ea:	2101      	movs	r1, #1
 80053ec:	5499      	strb	r1, [r3, r2]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2240      	movs	r2, #64	; 0x40
 80053f2:	2101      	movs	r1, #1
 80053f4:	5499      	strb	r1, [r3, r2]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2241      	movs	r2, #65	; 0x41
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2242      	movs	r2, #66	; 0x42
 8005402:	2101      	movs	r1, #1
 8005404:	5499      	strb	r1, [r3, r2]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2243      	movs	r2, #67	; 0x43
 800540a:	2101      	movs	r1, #1
 800540c:	5499      	strb	r1, [r3, r2]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2244      	movs	r2, #68	; 0x44
 8005412:	2101      	movs	r1, #1
 8005414:	5499      	strb	r1, [r3, r2]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2245      	movs	r2, #69	; 0x45
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	223d      	movs	r2, #61	; 0x3d
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	0018      	movs	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	b002      	add	sp, #8
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	223d      	movs	r2, #61	; 0x3d
 800543c:	5c9b      	ldrb	r3, [r3, r2]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d001      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e03b      	b.n	80054c0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	223d      	movs	r2, #61	; 0x3d
 800544c:	2102      	movs	r1, #2
 800544e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2101      	movs	r1, #1
 800545c:	430a      	orrs	r2, r1
 800545e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <HAL_TIM_Base_Start_IT+0x98>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00f      	beq.n	800548a <HAL_TIM_Base_Start_IT+0x5a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	05db      	lsls	r3, r3, #23
 8005472:	429a      	cmp	r2, r3
 8005474:	d009      	beq.n	800548a <HAL_TIM_Base_Start_IT+0x5a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a14      	ldr	r2, [pc, #80]	; (80054cc <HAL_TIM_Base_Start_IT+0x9c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <HAL_TIM_Base_Start_IT+0x5a>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a12      	ldr	r2, [pc, #72]	; (80054d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d111      	bne.n	80054ae <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	2207      	movs	r2, #7
 8005492:	4013      	ands	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b06      	cmp	r3, #6
 800549a:	d010      	beq.n	80054be <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2101      	movs	r1, #1
 80054a8:	430a      	orrs	r2, r1
 80054aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ac:	e007      	b.n	80054be <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2101      	movs	r1, #1
 80054ba:	430a      	orrs	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b004      	add	sp, #16
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40014000 	.word	0x40014000

080054d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e042      	b.n	800556c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	223d      	movs	r2, #61	; 0x3d
 80054ea:	5c9b      	ldrb	r3, [r3, r2]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d107      	bne.n	8005502 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	223c      	movs	r2, #60	; 0x3c
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	0018      	movs	r0, r3
 80054fe:	f000 f839 	bl	8005574 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	223d      	movs	r2, #61	; 0x3d
 8005506:	2102      	movs	r1, #2
 8005508:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3304      	adds	r3, #4
 8005512:	0019      	movs	r1, r3
 8005514:	0010      	movs	r0, r2
 8005516:	f000 f9c3 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2246      	movs	r2, #70	; 0x46
 800551e:	2101      	movs	r1, #1
 8005520:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	223e      	movs	r2, #62	; 0x3e
 8005526:	2101      	movs	r1, #1
 8005528:	5499      	strb	r1, [r3, r2]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	223f      	movs	r2, #63	; 0x3f
 800552e:	2101      	movs	r1, #1
 8005530:	5499      	strb	r1, [r3, r2]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2240      	movs	r2, #64	; 0x40
 8005536:	2101      	movs	r1, #1
 8005538:	5499      	strb	r1, [r3, r2]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2241      	movs	r2, #65	; 0x41
 800553e:	2101      	movs	r1, #1
 8005540:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2242      	movs	r2, #66	; 0x42
 8005546:	2101      	movs	r1, #1
 8005548:	5499      	strb	r1, [r3, r2]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2243      	movs	r2, #67	; 0x43
 800554e:	2101      	movs	r1, #1
 8005550:	5499      	strb	r1, [r3, r2]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2244      	movs	r2, #68	; 0x44
 8005556:	2101      	movs	r1, #1
 8005558:	5499      	strb	r1, [r3, r2]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2245      	movs	r2, #69	; 0x45
 800555e:	2101      	movs	r1, #1
 8005560:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	223d      	movs	r2, #61	; 0x3d
 8005566:	2101      	movs	r1, #1
 8005568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	0018      	movs	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	b002      	add	sp, #8
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800557c:	46c0      	nop			; (mov r8, r8)
 800557e:	46bd      	mov	sp, r7
 8005580:	b002      	add	sp, #8
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2202      	movs	r2, #2
 8005594:	4013      	ands	r3, r2
 8005596:	2b02      	cmp	r3, #2
 8005598:	d124      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	2202      	movs	r2, #2
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d11d      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2203      	movs	r2, #3
 80055ae:	4252      	negs	r2, r2
 80055b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	2203      	movs	r2, #3
 80055c0:	4013      	ands	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	0018      	movs	r0, r3
 80055c8:	f000 f952 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 80055cc:	e007      	b.n	80055de <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f000 f945 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	0018      	movs	r0, r3
 80055da:	f000 f951 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2204      	movs	r2, #4
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d125      	bne.n	800563e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2204      	movs	r2, #4
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d11e      	bne.n	800563e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2205      	movs	r2, #5
 8005606:	4252      	negs	r2, r2
 8005608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	23c0      	movs	r3, #192	; 0xc0
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4013      	ands	r3, r2
 800561c:	d004      	beq.n	8005628 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0018      	movs	r0, r3
 8005622:	f000 f925 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 8005626:	e007      	b.n	8005638 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	0018      	movs	r0, r3
 800562c:	f000 f918 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	0018      	movs	r0, r3
 8005634:	f000 f924 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2208      	movs	r2, #8
 8005646:	4013      	ands	r3, r2
 8005648:	2b08      	cmp	r3, #8
 800564a:	d124      	bne.n	8005696 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	2208      	movs	r2, #8
 8005654:	4013      	ands	r3, r2
 8005656:	2b08      	cmp	r3, #8
 8005658:	d11d      	bne.n	8005696 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2209      	movs	r2, #9
 8005660:	4252      	negs	r2, r2
 8005662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2204      	movs	r2, #4
 8005668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	2203      	movs	r2, #3
 8005672:	4013      	ands	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	0018      	movs	r0, r3
 800567a:	f000 f8f9 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 800567e:	e007      	b.n	8005690 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	0018      	movs	r0, r3
 8005684:	f000 f8ec 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	0018      	movs	r0, r3
 800568c:	f000 f8f8 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	2210      	movs	r2, #16
 800569e:	4013      	ands	r3, r2
 80056a0:	2b10      	cmp	r3, #16
 80056a2:	d125      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2210      	movs	r2, #16
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b10      	cmp	r3, #16
 80056b0:	d11e      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2211      	movs	r2, #17
 80056b8:	4252      	negs	r2, r2
 80056ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2208      	movs	r2, #8
 80056c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69da      	ldr	r2, [r3, #28]
 80056c8:	23c0      	movs	r3, #192	; 0xc0
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4013      	ands	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	0018      	movs	r0, r3
 80056d4:	f000 f8cc 	bl	8005870 <HAL_TIM_IC_CaptureCallback>
 80056d8:	e007      	b.n	80056ea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 f8bf 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f000 f8cb 	bl	8005880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2201      	movs	r2, #1
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d10f      	bne.n	800571e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	4013      	ands	r3, r2
 8005708:	2b01      	cmp	r3, #1
 800570a:	d108      	bne.n	800571e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2202      	movs	r2, #2
 8005712:	4252      	negs	r2, r2
 8005714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	0018      	movs	r0, r3
 800571a:	f7fa ff11 	bl	8000540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2280      	movs	r2, #128	; 0x80
 8005726:	4013      	ands	r3, r2
 8005728:	2b80      	cmp	r3, #128	; 0x80
 800572a:	d10f      	bne.n	800574c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	4013      	ands	r3, r2
 8005736:	2b80      	cmp	r3, #128	; 0x80
 8005738:	d108      	bne.n	800574c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2281      	movs	r2, #129	; 0x81
 8005740:	4252      	negs	r2, r2
 8005742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	0018      	movs	r0, r3
 8005748:	f000 fb2e 	bl	8005da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2240      	movs	r2, #64	; 0x40
 8005754:	4013      	ands	r3, r2
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d10f      	bne.n	800577a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	2240      	movs	r2, #64	; 0x40
 8005762:	4013      	ands	r3, r2
 8005764:	2b40      	cmp	r3, #64	; 0x40
 8005766:	d108      	bne.n	800577a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2241      	movs	r2, #65	; 0x41
 800576e:	4252      	negs	r2, r2
 8005770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0018      	movs	r0, r3
 8005776:	f000 f88b 	bl	8005890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2220      	movs	r2, #32
 8005782:	4013      	ands	r3, r2
 8005784:	2b20      	cmp	r3, #32
 8005786:	d10f      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	4013      	ands	r3, r2
 8005792:	2b20      	cmp	r3, #32
 8005794:	d108      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2221      	movs	r2, #33	; 0x21
 800579c:	4252      	negs	r2, r2
 800579e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	0018      	movs	r0, r3
 80057a4:	f000 faf8 	bl	8005d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057a8:	46c0      	nop			; (mov r8, r8)
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b002      	add	sp, #8
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057bc:	2317      	movs	r3, #23
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	223c      	movs	r2, #60	; 0x3c
 80057c8:	5c9b      	ldrb	r3, [r3, r2]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_OC_ConfigChannel+0x22>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e042      	b.n	8005858 <HAL_TIM_OC_ConfigChannel+0xa8>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	223c      	movs	r2, #60	; 0x3c
 80057d6:	2101      	movs	r1, #1
 80057d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	d027      	beq.n	8005830 <HAL_TIM_OC_ConfigChannel+0x80>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b0c      	cmp	r3, #12
 80057e4:	d82c      	bhi.n	8005840 <HAL_TIM_OC_ConfigChannel+0x90>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d019      	beq.n	8005820 <HAL_TIM_OC_ConfigChannel+0x70>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d826      	bhi.n	8005840 <HAL_TIM_OC_ConfigChannel+0x90>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_TIM_OC_ConfigChannel+0x50>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d008      	beq.n	8005810 <HAL_TIM_OC_ConfigChannel+0x60>
 80057fe:	e01f      	b.n	8005840 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	0011      	movs	r1, r2
 8005808:	0018      	movs	r0, r3
 800580a:	f000 f8c9 	bl	80059a0 <TIM_OC1_SetConfig>
      break;
 800580e:	e01c      	b.n	800584a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	0011      	movs	r1, r2
 8005818:	0018      	movs	r0, r3
 800581a:	f000 f949 	bl	8005ab0 <TIM_OC2_SetConfig>
      break;
 800581e:	e014      	b.n	800584a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	0011      	movs	r1, r2
 8005828:	0018      	movs	r0, r3
 800582a:	f000 f9c5 	bl	8005bb8 <TIM_OC3_SetConfig>
      break;
 800582e:	e00c      	b.n	800584a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	0011      	movs	r1, r2
 8005838:	0018      	movs	r0, r3
 800583a:	f000 fa43 	bl	8005cc4 <TIM_OC4_SetConfig>
      break;
 800583e:	e004      	b.n	800584a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005840:	2317      	movs	r3, #23
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
      break;
 8005848:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	223c      	movs	r2, #60	; 0x3c
 800584e:	2100      	movs	r1, #0
 8005850:	5499      	strb	r1, [r3, r2]

  return status;
 8005852:	2317      	movs	r3, #23
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	781b      	ldrb	r3, [r3, #0]
}
 8005858:	0018      	movs	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	b006      	add	sp, #24
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	46bd      	mov	sp, r7
 800586c:	b002      	add	sp, #8
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	46bd      	mov	sp, r7
 800587c:	b002      	add	sp, #8
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	46bd      	mov	sp, r7
 800588c:	b002      	add	sp, #8
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	b002      	add	sp, #8
 800589e:	bd80      	pop	{r7, pc}

080058a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a34      	ldr	r2, [pc, #208]	; (8005984 <TIM_Base_SetConfig+0xe4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d008      	beq.n	80058ca <TIM_Base_SetConfig+0x2a>
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	2380      	movs	r3, #128	; 0x80
 80058bc:	05db      	lsls	r3, r3, #23
 80058be:	429a      	cmp	r2, r3
 80058c0:	d003      	beq.n	80058ca <TIM_Base_SetConfig+0x2a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a30      	ldr	r2, [pc, #192]	; (8005988 <TIM_Base_SetConfig+0xe8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d108      	bne.n	80058dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2270      	movs	r2, #112	; 0x70
 80058ce:	4393      	bics	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a29      	ldr	r2, [pc, #164]	; (8005984 <TIM_Base_SetConfig+0xe4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d018      	beq.n	8005916 <TIM_Base_SetConfig+0x76>
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	2380      	movs	r3, #128	; 0x80
 80058e8:	05db      	lsls	r3, r3, #23
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d013      	beq.n	8005916 <TIM_Base_SetConfig+0x76>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a25      	ldr	r2, [pc, #148]	; (8005988 <TIM_Base_SetConfig+0xe8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00f      	beq.n	8005916 <TIM_Base_SetConfig+0x76>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a24      	ldr	r2, [pc, #144]	; (800598c <TIM_Base_SetConfig+0xec>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00b      	beq.n	8005916 <TIM_Base_SetConfig+0x76>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a23      	ldr	r2, [pc, #140]	; (8005990 <TIM_Base_SetConfig+0xf0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d007      	beq.n	8005916 <TIM_Base_SetConfig+0x76>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a22      	ldr	r2, [pc, #136]	; (8005994 <TIM_Base_SetConfig+0xf4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d003      	beq.n	8005916 <TIM_Base_SetConfig+0x76>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a21      	ldr	r2, [pc, #132]	; (8005998 <TIM_Base_SetConfig+0xf8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d108      	bne.n	8005928 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4a20      	ldr	r2, [pc, #128]	; (800599c <TIM_Base_SetConfig+0xfc>)
 800591a:	4013      	ands	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2280      	movs	r2, #128	; 0x80
 800592c:	4393      	bics	r3, r2
 800592e:	001a      	movs	r2, r3
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a0c      	ldr	r2, [pc, #48]	; (8005984 <TIM_Base_SetConfig+0xe4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_Base_SetConfig+0xce>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a0d      	ldr	r2, [pc, #52]	; (8005990 <TIM_Base_SetConfig+0xf0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <TIM_Base_SetConfig+0xce>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a0c      	ldr	r2, [pc, #48]	; (8005994 <TIM_Base_SetConfig+0xf4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_Base_SetConfig+0xce>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a0b      	ldr	r2, [pc, #44]	; (8005998 <TIM_Base_SetConfig+0xf8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d103      	bne.n	8005976 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	615a      	str	r2, [r3, #20]
}
 800597c:	46c0      	nop			; (mov r8, r8)
 800597e:	46bd      	mov	sp, r7
 8005980:	b004      	add	sp, #16
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40012c00 	.word	0x40012c00
 8005988:	40000400 	.word	0x40000400
 800598c:	40002000 	.word	0x40002000
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800
 800599c:	fffffcff 	.word	0xfffffcff

080059a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	2201      	movs	r2, #1
 80059b0:	4393      	bics	r3, r2
 80059b2:	001a      	movs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2270      	movs	r2, #112	; 0x70
 80059ce:	4393      	bics	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2203      	movs	r2, #3
 80059d6:	4393      	bics	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2202      	movs	r2, #2
 80059e8:	4393      	bics	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a27      	ldr	r2, [pc, #156]	; (8005a98 <TIM_OC1_SetConfig+0xf8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00b      	beq.n	8005a16 <TIM_OC1_SetConfig+0x76>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a26      	ldr	r2, [pc, #152]	; (8005a9c <TIM_OC1_SetConfig+0xfc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d007      	beq.n	8005a16 <TIM_OC1_SetConfig+0x76>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a25      	ldr	r2, [pc, #148]	; (8005aa0 <TIM_OC1_SetConfig+0x100>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d003      	beq.n	8005a16 <TIM_OC1_SetConfig+0x76>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a24      	ldr	r2, [pc, #144]	; (8005aa4 <TIM_OC1_SetConfig+0x104>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d10c      	bne.n	8005a30 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2208      	movs	r2, #8
 8005a1a:	4393      	bics	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	4393      	bics	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a19      	ldr	r2, [pc, #100]	; (8005a98 <TIM_OC1_SetConfig+0xf8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00b      	beq.n	8005a50 <TIM_OC1_SetConfig+0xb0>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a18      	ldr	r2, [pc, #96]	; (8005a9c <TIM_OC1_SetConfig+0xfc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d007      	beq.n	8005a50 <TIM_OC1_SetConfig+0xb0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a17      	ldr	r2, [pc, #92]	; (8005aa0 <TIM_OC1_SetConfig+0x100>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC1_SetConfig+0xb0>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a16      	ldr	r2, [pc, #88]	; (8005aa4 <TIM_OC1_SetConfig+0x104>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d111      	bne.n	8005a74 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <TIM_OC1_SetConfig+0x108>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	4a14      	ldr	r2, [pc, #80]	; (8005aac <TIM_OC1_SetConfig+0x10c>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b006      	add	sp, #24
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800
 8005aa8:	fffffeff 	.word	0xfffffeff
 8005aac:	fffffdff 	.word	0xfffffdff

08005ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	2210      	movs	r2, #16
 8005ac0:	4393      	bics	r3, r2
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4a2e      	ldr	r2, [pc, #184]	; (8005b98 <TIM_OC2_SetConfig+0xe8>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4a2d      	ldr	r2, [pc, #180]	; (8005b9c <TIM_OC2_SetConfig+0xec>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2220      	movs	r2, #32
 8005afa:	4393      	bics	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <TIM_OC2_SetConfig+0xf0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d10d      	bne.n	8005b2e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2280      	movs	r2, #128	; 0x80
 8005b16:	4393      	bics	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2240      	movs	r2, #64	; 0x40
 8005b2a:	4393      	bics	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <TIM_OC2_SetConfig+0xf0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00b      	beq.n	8005b4e <TIM_OC2_SetConfig+0x9e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1a      	ldr	r2, [pc, #104]	; (8005ba4 <TIM_OC2_SetConfig+0xf4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <TIM_OC2_SetConfig+0x9e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <TIM_OC2_SetConfig+0xf8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_OC2_SetConfig+0x9e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a18      	ldr	r2, [pc, #96]	; (8005bac <TIM_OC2_SetConfig+0xfc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d113      	bne.n	8005b76 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4a17      	ldr	r2, [pc, #92]	; (8005bb0 <TIM_OC2_SetConfig+0x100>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <TIM_OC2_SetConfig+0x104>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	621a      	str	r2, [r3, #32]
}
 8005b90:	46c0      	nop			; (mov r8, r8)
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b006      	add	sp, #24
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	ffff8fff 	.word	0xffff8fff
 8005b9c:	fffffcff 	.word	0xfffffcff
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800
 8005bb0:	fffffbff 	.word	0xfffffbff
 8005bb4:	fffff7ff 	.word	0xfffff7ff

08005bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	4a35      	ldr	r2, [pc, #212]	; (8005c9c <TIM_OC3_SetConfig+0xe4>)
 8005bc8:	401a      	ands	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2270      	movs	r2, #112	; 0x70
 8005be4:	4393      	bics	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2203      	movs	r2, #3
 8005bec:	4393      	bics	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	4a28      	ldr	r2, [pc, #160]	; (8005ca0 <TIM_OC3_SetConfig+0xe8>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a24      	ldr	r2, [pc, #144]	; (8005ca4 <TIM_OC3_SetConfig+0xec>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d10d      	bne.n	8005c32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4a23      	ldr	r2, [pc, #140]	; (8005ca8 <TIM_OC3_SetConfig+0xf0>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	4a1f      	ldr	r2, [pc, #124]	; (8005cac <TIM_OC3_SetConfig+0xf4>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <TIM_OC3_SetConfig+0xec>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00b      	beq.n	8005c52 <TIM_OC3_SetConfig+0x9a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1c      	ldr	r2, [pc, #112]	; (8005cb0 <TIM_OC3_SetConfig+0xf8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d007      	beq.n	8005c52 <TIM_OC3_SetConfig+0x9a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a1b      	ldr	r2, [pc, #108]	; (8005cb4 <TIM_OC3_SetConfig+0xfc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d003      	beq.n	8005c52 <TIM_OC3_SetConfig+0x9a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1a      	ldr	r2, [pc, #104]	; (8005cb8 <TIM_OC3_SetConfig+0x100>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d113      	bne.n	8005c7a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4a19      	ldr	r2, [pc, #100]	; (8005cbc <TIM_OC3_SetConfig+0x104>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4a18      	ldr	r2, [pc, #96]	; (8005cc0 <TIM_OC3_SetConfig+0x108>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	621a      	str	r2, [r3, #32]
}
 8005c94:	46c0      	nop			; (mov r8, r8)
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b006      	add	sp, #24
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	fffffeff 	.word	0xfffffeff
 8005ca0:	fffffdff 	.word	0xfffffdff
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	fffff7ff 	.word	0xfffff7ff
 8005cac:	fffffbff 	.word	0xfffffbff
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800
 8005cbc:	ffffefff 	.word	0xffffefff
 8005cc0:	ffffdfff 	.word	0xffffdfff

08005cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	4a28      	ldr	r2, [pc, #160]	; (8005d74 <TIM_OC4_SetConfig+0xb0>)
 8005cd4:	401a      	ands	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4a22      	ldr	r2, [pc, #136]	; (8005d78 <TIM_OC4_SetConfig+0xb4>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <TIM_OC4_SetConfig+0xb8>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <TIM_OC4_SetConfig+0xbc>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	031b      	lsls	r3, r3, #12
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a19      	ldr	r2, [pc, #100]	; (8005d84 <TIM_OC4_SetConfig+0xc0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00b      	beq.n	8005d3c <TIM_OC4_SetConfig+0x78>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a18      	ldr	r2, [pc, #96]	; (8005d88 <TIM_OC4_SetConfig+0xc4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d007      	beq.n	8005d3c <TIM_OC4_SetConfig+0x78>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <TIM_OC4_SetConfig+0xc8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <TIM_OC4_SetConfig+0x78>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a16      	ldr	r2, [pc, #88]	; (8005d90 <TIM_OC4_SetConfig+0xcc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d109      	bne.n	8005d50 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <TIM_OC4_SetConfig+0xd0>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	019b      	lsls	r3, r3, #6
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b006      	add	sp, #24
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	ffffefff 	.word	0xffffefff
 8005d78:	ffff8fff 	.word	0xffff8fff
 8005d7c:	fffffcff 	.word	0xfffffcff
 8005d80:	ffffdfff 	.word	0xffffdfff
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800
 8005d94:	ffffbfff 	.word	0xffffbfff

08005d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b002      	add	sp, #8
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db0:	46c0      	nop			; (mov r8, r8)
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b002      	add	sp, #8
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e044      	b.n	8005e54 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d107      	bne.n	8005de2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2274      	movs	r2, #116	; 0x74
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f7fb fd6f 	bl	80018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2224      	movs	r2, #36	; 0x24
 8005de6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2101      	movs	r1, #1
 8005df4:	438a      	bics	r2, r1
 8005df6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f000 fb24 	bl	8006448 <UART_SetConfig>
 8005e00:	0003      	movs	r3, r0
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e024      	b.n	8005e54 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f000 fc9f 	bl	8006758 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	490d      	ldr	r1, [pc, #52]	; (8005e5c <HAL_UART_Init+0xa4>)
 8005e26:	400a      	ands	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	212a      	movs	r1, #42	; 0x2a
 8005e36:	438a      	bics	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2101      	movs	r1, #1
 8005e46:	430a      	orrs	r2, r1
 8005e48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f000 fd37 	bl	80068c0 <UART_CheckIdleState>
 8005e52:	0003      	movs	r3, r0
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b002      	add	sp, #8
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	ffffb7ff 	.word	0xffffb7ff

08005e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e60:	b590      	push	{r4, r7, lr}
 8005e62:	b0ab      	sub	sp, #172	; 0xac
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	22a4      	movs	r2, #164	; 0xa4
 8005e70:	18b9      	adds	r1, r7, r2
 8005e72:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	20a0      	movs	r0, #160	; 0xa0
 8005e7c:	1839      	adds	r1, r7, r0
 8005e7e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	219c      	movs	r1, #156	; 0x9c
 8005e88:	1879      	adds	r1, r7, r1
 8005e8a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e8c:	0011      	movs	r1, r2
 8005e8e:	18bb      	adds	r3, r7, r2
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a99      	ldr	r2, [pc, #612]	; (80060f8 <HAL_UART_IRQHandler+0x298>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	2298      	movs	r2, #152	; 0x98
 8005e98:	18bc      	adds	r4, r7, r2
 8005e9a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005e9c:	18bb      	adds	r3, r7, r2
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d114      	bne.n	8005ece <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ea4:	187b      	adds	r3, r7, r1
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d00f      	beq.n	8005ece <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005eae:	183b      	adds	r3, r7, r0
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d00a      	beq.n	8005ece <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d100      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x62>
 8005ec0:	e296      	b.n	80063f0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	0010      	movs	r0, r2
 8005eca:	4798      	blx	r3
      }
      return;
 8005ecc:	e290      	b.n	80063f0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ece:	2398      	movs	r3, #152	; 0x98
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d100      	bne.n	8005eda <HAL_UART_IRQHandler+0x7a>
 8005ed8:	e114      	b.n	8006104 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005eda:	239c      	movs	r3, #156	; 0x9c
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d106      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ee6:	23a0      	movs	r3, #160	; 0xa0
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a83      	ldr	r2, [pc, #524]	; (80060fc <HAL_UART_IRQHandler+0x29c>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d100      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x94>
 8005ef2:	e107      	b.n	8006104 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ef4:	23a4      	movs	r3, #164	; 0xa4
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2201      	movs	r2, #1
 8005efc:	4013      	ands	r3, r2
 8005efe:	d012      	beq.n	8005f26 <HAL_UART_IRQHandler+0xc6>
 8005f00:	23a0      	movs	r3, #160	; 0xa0
 8005f02:	18fb      	adds	r3, r7, r3
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d00b      	beq.n	8005f26 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2201      	movs	r2, #1
 8005f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2280      	movs	r2, #128	; 0x80
 8005f1a:	589b      	ldr	r3, [r3, r2]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2180      	movs	r1, #128	; 0x80
 8005f24:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f26:	23a4      	movs	r3, #164	; 0xa4
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d011      	beq.n	8005f56 <HAL_UART_IRQHandler+0xf6>
 8005f32:	239c      	movs	r3, #156	; 0x9c
 8005f34:	18fb      	adds	r3, r7, r3
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	d00b      	beq.n	8005f56 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2202      	movs	r2, #2
 8005f44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2280      	movs	r2, #128	; 0x80
 8005f4a:	589b      	ldr	r3, [r3, r2]
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2180      	movs	r1, #128	; 0x80
 8005f54:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f56:	23a4      	movs	r3, #164	; 0xa4
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	4013      	ands	r3, r2
 8005f60:	d011      	beq.n	8005f86 <HAL_UART_IRQHandler+0x126>
 8005f62:	239c      	movs	r3, #156	; 0x9c
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d00b      	beq.n	8005f86 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2204      	movs	r2, #4
 8005f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2280      	movs	r2, #128	; 0x80
 8005f7a:	589b      	ldr	r3, [r3, r2]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2180      	movs	r1, #128	; 0x80
 8005f84:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f86:	23a4      	movs	r3, #164	; 0xa4
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	4013      	ands	r3, r2
 8005f90:	d017      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f92:	23a0      	movs	r3, #160	; 0xa0
 8005f94:	18fb      	adds	r3, r7, r3
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	d105      	bne.n	8005faa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f9e:	239c      	movs	r3, #156	; 0x9c
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fa8:	d00b      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2208      	movs	r2, #8
 8005fb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2280      	movs	r2, #128	; 0x80
 8005fb6:	589b      	ldr	r3, [r3, r2]
 8005fb8:	2208      	movs	r2, #8
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2180      	movs	r1, #128	; 0x80
 8005fc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fc2:	23a4      	movs	r3, #164	; 0xa4
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x198>
 8005fd0:	23a0      	movs	r3, #160	; 0xa0
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	04db      	lsls	r3, r3, #19
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d00c      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2280      	movs	r2, #128	; 0x80
 8005fe4:	0112      	lsls	r2, r2, #4
 8005fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2280      	movs	r2, #128	; 0x80
 8005fec:	589b      	ldr	r3, [r3, r2]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2180      	movs	r1, #128	; 0x80
 8005ff6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2280      	movs	r2, #128	; 0x80
 8005ffc:	589b      	ldr	r3, [r3, r2]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d100      	bne.n	8006004 <HAL_UART_IRQHandler+0x1a4>
 8006002:	e1f7      	b.n	80063f4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006004:	23a4      	movs	r3, #164	; 0xa4
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2220      	movs	r2, #32
 800600c:	4013      	ands	r3, r2
 800600e:	d00e      	beq.n	800602e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006010:	23a0      	movs	r3, #160	; 0xa0
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2220      	movs	r2, #32
 8006018:	4013      	ands	r3, r2
 800601a:	d008      	beq.n	800602e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	0010      	movs	r0, r2
 800602c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2280      	movs	r2, #128	; 0x80
 8006032:	589b      	ldr	r3, [r3, r2]
 8006034:	2194      	movs	r1, #148	; 0x94
 8006036:	187a      	adds	r2, r7, r1
 8006038:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2240      	movs	r2, #64	; 0x40
 8006042:	4013      	ands	r3, r2
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d004      	beq.n	8006052 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006048:	187b      	adds	r3, r7, r1
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2228      	movs	r2, #40	; 0x28
 800604e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006050:	d047      	beq.n	80060e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	0018      	movs	r0, r3
 8006056:	f000 fd3f 	bl	8006ad8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	2240      	movs	r2, #64	; 0x40
 8006062:	4013      	ands	r3, r2
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	d137      	bne.n	80060d8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006068:	f3ef 8310 	mrs	r3, PRIMASK
 800606c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800606e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006070:	2090      	movs	r0, #144	; 0x90
 8006072:	183a      	adds	r2, r7, r0
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	2301      	movs	r3, #1
 8006078:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800607a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607c:	f383 8810 	msr	PRIMASK, r3
}
 8006080:	46c0      	nop			; (mov r8, r8)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2140      	movs	r1, #64	; 0x40
 800608e:	438a      	bics	r2, r1
 8006090:	609a      	str	r2, [r3, #8]
 8006092:	183b      	adds	r3, r7, r0
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006098:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800609a:	f383 8810 	msr	PRIMASK, r3
}
 800609e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d012      	beq.n	80060ce <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ac:	4a14      	ldr	r2, [pc, #80]	; (8006100 <HAL_UART_IRQHandler+0x2a0>)
 80060ae:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b4:	0018      	movs	r0, r3
 80060b6:	f7fc f953 	bl	8002360 <HAL_DMA_Abort_IT>
 80060ba:	1e03      	subs	r3, r0, #0
 80060bc:	d01a      	beq.n	80060f4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c8:	0018      	movs	r0, r3
 80060ca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060cc:	e012      	b.n	80060f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0018      	movs	r0, r3
 80060d2:	f000 f9a5 	bl	8006420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d6:	e00d      	b.n	80060f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	0018      	movs	r0, r3
 80060dc:	f000 f9a0 	bl	8006420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e008      	b.n	80060f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	0018      	movs	r0, r3
 80060e6:	f000 f99b 	bl	8006420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2280      	movs	r2, #128	; 0x80
 80060ee:	2100      	movs	r1, #0
 80060f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80060f2:	e17f      	b.n	80063f4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	46c0      	nop			; (mov r8, r8)
    return;
 80060f6:	e17d      	b.n	80063f4 <HAL_UART_IRQHandler+0x594>
 80060f8:	0000080f 	.word	0x0000080f
 80060fc:	04000120 	.word	0x04000120
 8006100:	08006b9d 	.word	0x08006b9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006108:	2b01      	cmp	r3, #1
 800610a:	d000      	beq.n	800610e <HAL_UART_IRQHandler+0x2ae>
 800610c:	e131      	b.n	8006372 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800610e:	23a4      	movs	r3, #164	; 0xa4
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2210      	movs	r2, #16
 8006116:	4013      	ands	r3, r2
 8006118:	d100      	bne.n	800611c <HAL_UART_IRQHandler+0x2bc>
 800611a:	e12a      	b.n	8006372 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800611c:	23a0      	movs	r3, #160	; 0xa0
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2210      	movs	r2, #16
 8006124:	4013      	ands	r3, r2
 8006126:	d100      	bne.n	800612a <HAL_UART_IRQHandler+0x2ca>
 8006128:	e123      	b.n	8006372 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2210      	movs	r2, #16
 8006130:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2240      	movs	r2, #64	; 0x40
 800613a:	4013      	ands	r3, r2
 800613c:	2b40      	cmp	r3, #64	; 0x40
 800613e:	d000      	beq.n	8006142 <HAL_UART_IRQHandler+0x2e2>
 8006140:	e09b      	b.n	800627a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	217e      	movs	r1, #126	; 0x7e
 800614c:	187b      	adds	r3, r7, r1
 800614e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006150:	187b      	adds	r3, r7, r1
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d100      	bne.n	800615a <HAL_UART_IRQHandler+0x2fa>
 8006158:	e14e      	b.n	80063f8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2258      	movs	r2, #88	; 0x58
 800615e:	5a9b      	ldrh	r3, [r3, r2]
 8006160:	187a      	adds	r2, r7, r1
 8006162:	8812      	ldrh	r2, [r2, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d300      	bcc.n	800616a <HAL_UART_IRQHandler+0x30a>
 8006168:	e146      	b.n	80063f8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	187a      	adds	r2, r7, r1
 800616e:	215a      	movs	r1, #90	; 0x5a
 8006170:	8812      	ldrh	r2, [r2, #0]
 8006172:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	2b20      	cmp	r3, #32
 800617c:	d06e      	beq.n	800625c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617e:	f3ef 8310 	mrs	r3, PRIMASK
 8006182:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006186:	67bb      	str	r3, [r7, #120]	; 0x78
 8006188:	2301      	movs	r3, #1
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	f383 8810 	msr	PRIMASK, r3
}
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	499a      	ldr	r1, [pc, #616]	; (8006408 <HAL_UART_IRQHandler+0x5a8>)
 80061a0:	400a      	ands	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	f383 8810 	msr	PRIMASK, r3
}
 80061ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b0:	f3ef 8310 	mrs	r3, PRIMASK
 80061b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80061b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b8:	677b      	str	r3, [r7, #116]	; 0x74
 80061ba:	2301      	movs	r3, #1
 80061bc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c0:	f383 8810 	msr	PRIMASK, r3
}
 80061c4:	46c0      	nop			; (mov r8, r8)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2101      	movs	r1, #1
 80061d2:	438a      	bics	r2, r1
 80061d4:	609a      	str	r2, [r3, #8]
 80061d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061dc:	f383 8810 	msr	PRIMASK, r3
}
 80061e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061e2:	f3ef 8310 	mrs	r3, PRIMASK
 80061e6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80061e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ea:	673b      	str	r3, [r7, #112]	; 0x70
 80061ec:	2301      	movs	r3, #1
 80061ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f2:	f383 8810 	msr	PRIMASK, r3
}
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2140      	movs	r1, #64	; 0x40
 8006204:	438a      	bics	r2, r1
 8006206:	609a      	str	r2, [r3, #8]
 8006208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800620a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620e:	f383 8810 	msr	PRIMASK, r3
}
 8006212:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006220:	f3ef 8310 	mrs	r3, PRIMASK
 8006224:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006226:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800622a:	2301      	movs	r3, #1
 800622c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800622e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006230:	f383 8810 	msr	PRIMASK, r3
}
 8006234:	46c0      	nop			; (mov r8, r8)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2110      	movs	r1, #16
 8006242:	438a      	bics	r2, r1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006248:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800624a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800624c:	f383 8810 	msr	PRIMASK, r3
}
 8006250:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	0018      	movs	r0, r3
 8006258:	f7fc f84a 	bl	80022f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2258      	movs	r2, #88	; 0x58
 8006260:	5a9a      	ldrh	r2, [r3, r2]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	215a      	movs	r1, #90	; 0x5a
 8006266:	5a5b      	ldrh	r3, [r3, r1]
 8006268:	b29b      	uxth	r3, r3
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	b29a      	uxth	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0011      	movs	r1, r2
 8006272:	0018      	movs	r0, r3
 8006274:	f000 f8dc 	bl	8006430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006278:	e0be      	b.n	80063f8 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2258      	movs	r2, #88	; 0x58
 800627e:	5a99      	ldrh	r1, [r3, r2]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	225a      	movs	r2, #90	; 0x5a
 8006284:	5a9b      	ldrh	r3, [r3, r2]
 8006286:	b29a      	uxth	r2, r3
 8006288:	208e      	movs	r0, #142	; 0x8e
 800628a:	183b      	adds	r3, r7, r0
 800628c:	1a8a      	subs	r2, r1, r2
 800628e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	225a      	movs	r2, #90	; 0x5a
 8006294:	5a9b      	ldrh	r3, [r3, r2]
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d100      	bne.n	800629e <HAL_UART_IRQHandler+0x43e>
 800629c:	e0ae      	b.n	80063fc <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800629e:	183b      	adds	r3, r7, r0
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d100      	bne.n	80062a8 <HAL_UART_IRQHandler+0x448>
 80062a6:	e0a9      	b.n	80063fc <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062a8:	f3ef 8310 	mrs	r3, PRIMASK
 80062ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80062ae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062b0:	2488      	movs	r4, #136	; 0x88
 80062b2:	193a      	adds	r2, r7, r4
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	2301      	movs	r3, #1
 80062b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f383 8810 	msr	PRIMASK, r3
}
 80062c0:	46c0      	nop			; (mov r8, r8)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	494f      	ldr	r1, [pc, #316]	; (800640c <HAL_UART_IRQHandler+0x5ac>)
 80062ce:	400a      	ands	r2, r1
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	193b      	adds	r3, r7, r4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f383 8810 	msr	PRIMASK, r3
}
 80062de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e0:	f3ef 8310 	mrs	r3, PRIMASK
 80062e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80062e6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e8:	2484      	movs	r4, #132	; 0x84
 80062ea:	193a      	adds	r2, r7, r4
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	2301      	movs	r3, #1
 80062f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	f383 8810 	msr	PRIMASK, r3
}
 80062f8:	46c0      	nop			; (mov r8, r8)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2101      	movs	r1, #1
 8006306:	438a      	bics	r2, r1
 8006308:	609a      	str	r2, [r3, #8]
 800630a:	193b      	adds	r3, r7, r4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f383 8810 	msr	PRIMASK, r3
}
 8006316:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2220      	movs	r2, #32
 800631c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800632a:	f3ef 8310 	mrs	r3, PRIMASK
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006332:	2480      	movs	r4, #128	; 0x80
 8006334:	193a      	adds	r2, r7, r4
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	2301      	movs	r3, #1
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	f383 8810 	msr	PRIMASK, r3
}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2110      	movs	r1, #16
 8006350:	438a      	bics	r2, r1
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	193b      	adds	r3, r7, r4
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	f383 8810 	msr	PRIMASK, r3
}
 8006360:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006362:	183b      	adds	r3, r7, r0
 8006364:	881a      	ldrh	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	0011      	movs	r1, r2
 800636a:	0018      	movs	r0, r3
 800636c:	f000 f860 	bl	8006430 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006370:	e044      	b.n	80063fc <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006372:	23a4      	movs	r3, #164	; 0xa4
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	2380      	movs	r3, #128	; 0x80
 800637a:	035b      	lsls	r3, r3, #13
 800637c:	4013      	ands	r3, r2
 800637e:	d010      	beq.n	80063a2 <HAL_UART_IRQHandler+0x542>
 8006380:	239c      	movs	r3, #156	; 0x9c
 8006382:	18fb      	adds	r3, r7, r3
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	2380      	movs	r3, #128	; 0x80
 8006388:	03db      	lsls	r3, r3, #15
 800638a:	4013      	ands	r3, r2
 800638c:	d009      	beq.n	80063a2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2280      	movs	r2, #128	; 0x80
 8006394:	0352      	lsls	r2, r2, #13
 8006396:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	0018      	movs	r0, r3
 800639c:	f000 fc40 	bl	8006c20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063a0:	e02f      	b.n	8006402 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063a2:	23a4      	movs	r3, #164	; 0xa4
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2280      	movs	r2, #128	; 0x80
 80063aa:	4013      	ands	r3, r2
 80063ac:	d00f      	beq.n	80063ce <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063ae:	23a0      	movs	r3, #160	; 0xa0
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2280      	movs	r2, #128	; 0x80
 80063b6:	4013      	ands	r3, r2
 80063b8:	d009      	beq.n	80063ce <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01e      	beq.n	8006400 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	0010      	movs	r0, r2
 80063ca:	4798      	blx	r3
    }
    return;
 80063cc:	e018      	b.n	8006400 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063ce:	23a4      	movs	r3, #164	; 0xa4
 80063d0:	18fb      	adds	r3, r7, r3
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2240      	movs	r2, #64	; 0x40
 80063d6:	4013      	ands	r3, r2
 80063d8:	d013      	beq.n	8006402 <HAL_UART_IRQHandler+0x5a2>
 80063da:	23a0      	movs	r3, #160	; 0xa0
 80063dc:	18fb      	adds	r3, r7, r3
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2240      	movs	r2, #64	; 0x40
 80063e2:	4013      	ands	r3, r2
 80063e4:	d00d      	beq.n	8006402 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 fbee 	bl	8006bca <UART_EndTransmit_IT>
    return;
 80063ee:	e008      	b.n	8006402 <HAL_UART_IRQHandler+0x5a2>
      return;
 80063f0:	46c0      	nop			; (mov r8, r8)
 80063f2:	e006      	b.n	8006402 <HAL_UART_IRQHandler+0x5a2>
    return;
 80063f4:	46c0      	nop			; (mov r8, r8)
 80063f6:	e004      	b.n	8006402 <HAL_UART_IRQHandler+0x5a2>
      return;
 80063f8:	46c0      	nop			; (mov r8, r8)
 80063fa:	e002      	b.n	8006402 <HAL_UART_IRQHandler+0x5a2>
      return;
 80063fc:	46c0      	nop			; (mov r8, r8)
 80063fe:	e000      	b.n	8006402 <HAL_UART_IRQHandler+0x5a2>
    return;
 8006400:	46c0      	nop			; (mov r8, r8)
  }

}
 8006402:	46bd      	mov	sp, r7
 8006404:	b02b      	add	sp, #172	; 0xac
 8006406:	bd90      	pop	{r4, r7, pc}
 8006408:	fffffeff 	.word	0xfffffeff
 800640c:	fffffedf 	.word	0xfffffedf

08006410 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006418:	46c0      	nop			; (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	b002      	add	sp, #8
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006428:	46c0      	nop			; (mov r8, r8)
 800642a:	46bd      	mov	sp, r7
 800642c:	b002      	add	sp, #8
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	000a      	movs	r2, r1
 800643a:	1cbb      	adds	r3, r7, #2
 800643c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	46bd      	mov	sp, r7
 8006442:	b002      	add	sp, #8
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006450:	231e      	movs	r3, #30
 8006452:	18fb      	adds	r3, r7, r3
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4aaf      	ldr	r2, [pc, #700]	; (8006734 <UART_SetConfig+0x2ec>)
 8006478:	4013      	ands	r3, r2
 800647a:	0019      	movs	r1, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	430a      	orrs	r2, r1
 8006484:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	4aaa      	ldr	r2, [pc, #680]	; (8006738 <UART_SetConfig+0x2f0>)
 800648e:	4013      	ands	r3, r2
 8006490:	0019      	movs	r1, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	4aa1      	ldr	r2, [pc, #644]	; (800673c <UART_SetConfig+0x2f4>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	0019      	movs	r1, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a9d      	ldr	r2, [pc, #628]	; (8006740 <UART_SetConfig+0x2f8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d127      	bne.n	800651e <UART_SetConfig+0xd6>
 80064ce:	4b9d      	ldr	r3, [pc, #628]	; (8006744 <UART_SetConfig+0x2fc>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	2203      	movs	r2, #3
 80064d4:	4013      	ands	r3, r2
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d00d      	beq.n	80064f6 <UART_SetConfig+0xae>
 80064da:	d81b      	bhi.n	8006514 <UART_SetConfig+0xcc>
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d014      	beq.n	800650a <UART_SetConfig+0xc2>
 80064e0:	d818      	bhi.n	8006514 <UART_SetConfig+0xcc>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <UART_SetConfig+0xa4>
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d00a      	beq.n	8006500 <UART_SetConfig+0xb8>
 80064ea:	e013      	b.n	8006514 <UART_SetConfig+0xcc>
 80064ec:	231f      	movs	r3, #31
 80064ee:	18fb      	adds	r3, r7, r3
 80064f0:	2200      	movs	r2, #0
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	e065      	b.n	80065c2 <UART_SetConfig+0x17a>
 80064f6:	231f      	movs	r3, #31
 80064f8:	18fb      	adds	r3, r7, r3
 80064fa:	2202      	movs	r2, #2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	e060      	b.n	80065c2 <UART_SetConfig+0x17a>
 8006500:	231f      	movs	r3, #31
 8006502:	18fb      	adds	r3, r7, r3
 8006504:	2204      	movs	r2, #4
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	e05b      	b.n	80065c2 <UART_SetConfig+0x17a>
 800650a:	231f      	movs	r3, #31
 800650c:	18fb      	adds	r3, r7, r3
 800650e:	2208      	movs	r2, #8
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	e056      	b.n	80065c2 <UART_SetConfig+0x17a>
 8006514:	231f      	movs	r3, #31
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	2210      	movs	r2, #16
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	e051      	b.n	80065c2 <UART_SetConfig+0x17a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a89      	ldr	r2, [pc, #548]	; (8006748 <UART_SetConfig+0x300>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d134      	bne.n	8006592 <UART_SetConfig+0x14a>
 8006528:	4b86      	ldr	r3, [pc, #536]	; (8006744 <UART_SetConfig+0x2fc>)
 800652a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800652c:	23c0      	movs	r3, #192	; 0xc0
 800652e:	029b      	lsls	r3, r3, #10
 8006530:	4013      	ands	r3, r2
 8006532:	22c0      	movs	r2, #192	; 0xc0
 8006534:	0292      	lsls	r2, r2, #10
 8006536:	4293      	cmp	r3, r2
 8006538:	d017      	beq.n	800656a <UART_SetConfig+0x122>
 800653a:	22c0      	movs	r2, #192	; 0xc0
 800653c:	0292      	lsls	r2, r2, #10
 800653e:	4293      	cmp	r3, r2
 8006540:	d822      	bhi.n	8006588 <UART_SetConfig+0x140>
 8006542:	2280      	movs	r2, #128	; 0x80
 8006544:	0292      	lsls	r2, r2, #10
 8006546:	4293      	cmp	r3, r2
 8006548:	d019      	beq.n	800657e <UART_SetConfig+0x136>
 800654a:	2280      	movs	r2, #128	; 0x80
 800654c:	0292      	lsls	r2, r2, #10
 800654e:	4293      	cmp	r3, r2
 8006550:	d81a      	bhi.n	8006588 <UART_SetConfig+0x140>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d004      	beq.n	8006560 <UART_SetConfig+0x118>
 8006556:	2280      	movs	r2, #128	; 0x80
 8006558:	0252      	lsls	r2, r2, #9
 800655a:	4293      	cmp	r3, r2
 800655c:	d00a      	beq.n	8006574 <UART_SetConfig+0x12c>
 800655e:	e013      	b.n	8006588 <UART_SetConfig+0x140>
 8006560:	231f      	movs	r3, #31
 8006562:	18fb      	adds	r3, r7, r3
 8006564:	2200      	movs	r2, #0
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	e02b      	b.n	80065c2 <UART_SetConfig+0x17a>
 800656a:	231f      	movs	r3, #31
 800656c:	18fb      	adds	r3, r7, r3
 800656e:	2202      	movs	r2, #2
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e026      	b.n	80065c2 <UART_SetConfig+0x17a>
 8006574:	231f      	movs	r3, #31
 8006576:	18fb      	adds	r3, r7, r3
 8006578:	2204      	movs	r2, #4
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e021      	b.n	80065c2 <UART_SetConfig+0x17a>
 800657e:	231f      	movs	r3, #31
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	2208      	movs	r2, #8
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	e01c      	b.n	80065c2 <UART_SetConfig+0x17a>
 8006588:	231f      	movs	r3, #31
 800658a:	18fb      	adds	r3, r7, r3
 800658c:	2210      	movs	r2, #16
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	e017      	b.n	80065c2 <UART_SetConfig+0x17a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a6d      	ldr	r2, [pc, #436]	; (800674c <UART_SetConfig+0x304>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d104      	bne.n	80065a6 <UART_SetConfig+0x15e>
 800659c:	231f      	movs	r3, #31
 800659e:	18fb      	adds	r3, r7, r3
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	e00d      	b.n	80065c2 <UART_SetConfig+0x17a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a69      	ldr	r2, [pc, #420]	; (8006750 <UART_SetConfig+0x308>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d104      	bne.n	80065ba <UART_SetConfig+0x172>
 80065b0:	231f      	movs	r3, #31
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	e003      	b.n	80065c2 <UART_SetConfig+0x17a>
 80065ba:	231f      	movs	r3, #31
 80065bc:	18fb      	adds	r3, r7, r3
 80065be:	2210      	movs	r2, #16
 80065c0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69da      	ldr	r2, [r3, #28]
 80065c6:	2380      	movs	r3, #128	; 0x80
 80065c8:	021b      	lsls	r3, r3, #8
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d15d      	bne.n	800668a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80065ce:	231f      	movs	r3, #31
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d015      	beq.n	8006604 <UART_SetConfig+0x1bc>
 80065d8:	dc18      	bgt.n	800660c <UART_SetConfig+0x1c4>
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d00d      	beq.n	80065fa <UART_SetConfig+0x1b2>
 80065de:	dc15      	bgt.n	800660c <UART_SetConfig+0x1c4>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <UART_SetConfig+0x1a2>
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d005      	beq.n	80065f4 <UART_SetConfig+0x1ac>
 80065e8:	e010      	b.n	800660c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ea:	f7fe fd05 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 80065ee:	0003      	movs	r3, r0
 80065f0:	61bb      	str	r3, [r7, #24]
        break;
 80065f2:	e012      	b.n	800661a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065f4:	4b57      	ldr	r3, [pc, #348]	; (8006754 <UART_SetConfig+0x30c>)
 80065f6:	61bb      	str	r3, [r7, #24]
        break;
 80065f8:	e00f      	b.n	800661a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065fa:	f7fe fc71 	bl	8004ee0 <HAL_RCC_GetSysClockFreq>
 80065fe:	0003      	movs	r3, r0
 8006600:	61bb      	str	r3, [r7, #24]
        break;
 8006602:	e00a      	b.n	800661a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006604:	2380      	movs	r3, #128	; 0x80
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	61bb      	str	r3, [r7, #24]
        break;
 800660a:	e006      	b.n	800661a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006610:	231e      	movs	r3, #30
 8006612:	18fb      	adds	r3, r7, r3
 8006614:	2201      	movs	r2, #1
 8006616:	701a      	strb	r2, [r3, #0]
        break;
 8006618:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d100      	bne.n	8006622 <UART_SetConfig+0x1da>
 8006620:	e07b      	b.n	800671a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	005a      	lsls	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	18d2      	adds	r2, r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	0019      	movs	r1, r3
 8006634:	0010      	movs	r0, r2
 8006636:	f7f9 fd79 	bl	800012c <__udivsi3>
 800663a:	0003      	movs	r3, r0
 800663c:	b29b      	uxth	r3, r3
 800663e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b0f      	cmp	r3, #15
 8006644:	d91c      	bls.n	8006680 <UART_SetConfig+0x238>
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	2380      	movs	r3, #128	; 0x80
 800664a:	025b      	lsls	r3, r3, #9
 800664c:	429a      	cmp	r2, r3
 800664e:	d217      	bcs.n	8006680 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	b29a      	uxth	r2, r3
 8006654:	200e      	movs	r0, #14
 8006656:	183b      	adds	r3, r7, r0
 8006658:	210f      	movs	r1, #15
 800665a:	438a      	bics	r2, r1
 800665c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	b29b      	uxth	r3, r3
 8006664:	2207      	movs	r2, #7
 8006666:	4013      	ands	r3, r2
 8006668:	b299      	uxth	r1, r3
 800666a:	183b      	adds	r3, r7, r0
 800666c:	183a      	adds	r2, r7, r0
 800666e:	8812      	ldrh	r2, [r2, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	183a      	adds	r2, r7, r0
 800667a:	8812      	ldrh	r2, [r2, #0]
 800667c:	60da      	str	r2, [r3, #12]
 800667e:	e04c      	b.n	800671a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8006680:	231e      	movs	r3, #30
 8006682:	18fb      	adds	r3, r7, r3
 8006684:	2201      	movs	r2, #1
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	e047      	b.n	800671a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800668a:	231f      	movs	r3, #31
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d015      	beq.n	80066c0 <UART_SetConfig+0x278>
 8006694:	dc18      	bgt.n	80066c8 <UART_SetConfig+0x280>
 8006696:	2b04      	cmp	r3, #4
 8006698:	d00d      	beq.n	80066b6 <UART_SetConfig+0x26e>
 800669a:	dc15      	bgt.n	80066c8 <UART_SetConfig+0x280>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <UART_SetConfig+0x25e>
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d005      	beq.n	80066b0 <UART_SetConfig+0x268>
 80066a4:	e010      	b.n	80066c8 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a6:	f7fe fca7 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 80066aa:	0003      	movs	r3, r0
 80066ac:	61bb      	str	r3, [r7, #24]
        break;
 80066ae:	e012      	b.n	80066d6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b0:	4b28      	ldr	r3, [pc, #160]	; (8006754 <UART_SetConfig+0x30c>)
 80066b2:	61bb      	str	r3, [r7, #24]
        break;
 80066b4:	e00f      	b.n	80066d6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b6:	f7fe fc13 	bl	8004ee0 <HAL_RCC_GetSysClockFreq>
 80066ba:	0003      	movs	r3, r0
 80066bc:	61bb      	str	r3, [r7, #24]
        break;
 80066be:	e00a      	b.n	80066d6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	61bb      	str	r3, [r7, #24]
        break;
 80066c6:	e006      	b.n	80066d6 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066cc:	231e      	movs	r3, #30
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	2201      	movs	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
        break;
 80066d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01e      	beq.n	800671a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	085a      	lsrs	r2, r3, #1
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	18d2      	adds	r2, r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	0019      	movs	r1, r3
 80066ec:	0010      	movs	r0, r2
 80066ee:	f7f9 fd1d 	bl	800012c <__udivsi3>
 80066f2:	0003      	movs	r3, r0
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b0f      	cmp	r3, #15
 80066fc:	d909      	bls.n	8006712 <UART_SetConfig+0x2ca>
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	2380      	movs	r3, #128	; 0x80
 8006702:	025b      	lsls	r3, r3, #9
 8006704:	429a      	cmp	r2, r3
 8006706:	d204      	bcs.n	8006712 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	60da      	str	r2, [r3, #12]
 8006710:	e003      	b.n	800671a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8006712:	231e      	movs	r3, #30
 8006714:	18fb      	adds	r3, r7, r3
 8006716:	2201      	movs	r2, #1
 8006718:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006726:	231e      	movs	r3, #30
 8006728:	18fb      	adds	r3, r7, r3
 800672a:	781b      	ldrb	r3, [r3, #0]
}
 800672c:	0018      	movs	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	b008      	add	sp, #32
 8006732:	bd80      	pop	{r7, pc}
 8006734:	efff69f3 	.word	0xefff69f3
 8006738:	ffffcfff 	.word	0xffffcfff
 800673c:	fffff4ff 	.word	0xfffff4ff
 8006740:	40013800 	.word	0x40013800
 8006744:	40021000 	.word	0x40021000
 8006748:	40004400 	.word	0x40004400
 800674c:	40004800 	.word	0x40004800
 8006750:	40004c00 	.word	0x40004c00
 8006754:	007a1200 	.word	0x007a1200

08006758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	2201      	movs	r2, #1
 8006766:	4013      	ands	r3, r2
 8006768:	d00b      	beq.n	8006782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	4a4a      	ldr	r2, [pc, #296]	; (800689c <UART_AdvFeatureConfig+0x144>)
 8006772:	4013      	ands	r3, r2
 8006774:	0019      	movs	r1, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	2202      	movs	r2, #2
 8006788:	4013      	ands	r3, r2
 800678a:	d00b      	beq.n	80067a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	4a43      	ldr	r2, [pc, #268]	; (80068a0 <UART_AdvFeatureConfig+0x148>)
 8006794:	4013      	ands	r3, r2
 8006796:	0019      	movs	r1, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	2204      	movs	r2, #4
 80067aa:	4013      	ands	r3, r2
 80067ac:	d00b      	beq.n	80067c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4a3b      	ldr	r2, [pc, #236]	; (80068a4 <UART_AdvFeatureConfig+0x14c>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	0019      	movs	r1, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	2208      	movs	r2, #8
 80067cc:	4013      	ands	r3, r2
 80067ce:	d00b      	beq.n	80067e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	4a34      	ldr	r2, [pc, #208]	; (80068a8 <UART_AdvFeatureConfig+0x150>)
 80067d8:	4013      	ands	r3, r2
 80067da:	0019      	movs	r1, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	2210      	movs	r2, #16
 80067ee:	4013      	ands	r3, r2
 80067f0:	d00b      	beq.n	800680a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	4a2c      	ldr	r2, [pc, #176]	; (80068ac <UART_AdvFeatureConfig+0x154>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	0019      	movs	r1, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	2220      	movs	r2, #32
 8006810:	4013      	ands	r3, r2
 8006812:	d00b      	beq.n	800682c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <UART_AdvFeatureConfig+0x158>)
 800681c:	4013      	ands	r3, r2
 800681e:	0019      	movs	r1, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	2240      	movs	r2, #64	; 0x40
 8006832:	4013      	ands	r3, r2
 8006834:	d01d      	beq.n	8006872 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <UART_AdvFeatureConfig+0x15c>)
 800683e:	4013      	ands	r3, r2
 8006840:	0019      	movs	r1, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	035b      	lsls	r3, r3, #13
 8006856:	429a      	cmp	r2, r3
 8006858:	d10b      	bne.n	8006872 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <UART_AdvFeatureConfig+0x160>)
 8006862:	4013      	ands	r3, r2
 8006864:	0019      	movs	r1, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	2280      	movs	r2, #128	; 0x80
 8006878:	4013      	ands	r3, r2
 800687a:	d00b      	beq.n	8006894 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4a0e      	ldr	r2, [pc, #56]	; (80068bc <UART_AdvFeatureConfig+0x164>)
 8006884:	4013      	ands	r3, r2
 8006886:	0019      	movs	r1, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
  }
}
 8006894:	46c0      	nop			; (mov r8, r8)
 8006896:	46bd      	mov	sp, r7
 8006898:	b002      	add	sp, #8
 800689a:	bd80      	pop	{r7, pc}
 800689c:	fffdffff 	.word	0xfffdffff
 80068a0:	fffeffff 	.word	0xfffeffff
 80068a4:	fffbffff 	.word	0xfffbffff
 80068a8:	ffff7fff 	.word	0xffff7fff
 80068ac:	ffffefff 	.word	0xffffefff
 80068b0:	ffffdfff 	.word	0xffffdfff
 80068b4:	ffefffff 	.word	0xffefffff
 80068b8:	ff9fffff 	.word	0xff9fffff
 80068bc:	fff7ffff 	.word	0xfff7ffff

080068c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2280      	movs	r2, #128	; 0x80
 80068cc:	2100      	movs	r1, #0
 80068ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068d0:	f7fb f990 	bl	8001bf4 <HAL_GetTick>
 80068d4:	0003      	movs	r3, r0
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2208      	movs	r2, #8
 80068e0:	4013      	ands	r3, r2
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d10c      	bne.n	8006900 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2280      	movs	r2, #128	; 0x80
 80068ea:	0391      	lsls	r1, r2, #14
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	4a17      	ldr	r2, [pc, #92]	; (800694c <UART_CheckIdleState+0x8c>)
 80068f0:	9200      	str	r2, [sp, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f000 f82c 	bl	8006950 <UART_WaitOnFlagUntilTimeout>
 80068f8:	1e03      	subs	r3, r0, #0
 80068fa:	d001      	beq.n	8006900 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e021      	b.n	8006944 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2204      	movs	r2, #4
 8006908:	4013      	ands	r3, r2
 800690a:	2b04      	cmp	r3, #4
 800690c:	d10c      	bne.n	8006928 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2280      	movs	r2, #128	; 0x80
 8006912:	03d1      	lsls	r1, r2, #15
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4a0d      	ldr	r2, [pc, #52]	; (800694c <UART_CheckIdleState+0x8c>)
 8006918:	9200      	str	r2, [sp, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	f000 f818 	bl	8006950 <UART_WaitOnFlagUntilTimeout>
 8006920:	1e03      	subs	r3, r0, #0
 8006922:	d001      	beq.n	8006928 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e00d      	b.n	8006944 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2274      	movs	r2, #116	; 0x74
 800693e:	2100      	movs	r1, #0
 8006940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	0018      	movs	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	b004      	add	sp, #16
 800694a:	bd80      	pop	{r7, pc}
 800694c:	01ffffff 	.word	0x01ffffff

08006950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b094      	sub	sp, #80	; 0x50
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	1dfb      	adds	r3, r7, #7
 800695e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006960:	e0a3      	b.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006964:	3301      	adds	r3, #1
 8006966:	d100      	bne.n	800696a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006968:	e09f      	b.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696a:	f7fb f943 	bl	8001bf4 <HAL_GetTick>
 800696e:	0002      	movs	r2, r0
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006976:	429a      	cmp	r2, r3
 8006978:	d302      	bcc.n	8006980 <UART_WaitOnFlagUntilTimeout+0x30>
 800697a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800697c:	2b00      	cmp	r3, #0
 800697e:	d13d      	bne.n	80069fc <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006980:	f3ef 8310 	mrs	r3, PRIMASK
 8006984:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006986:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006988:	647b      	str	r3, [r7, #68]	; 0x44
 800698a:	2301      	movs	r3, #1
 800698c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800698e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006990:	f383 8810 	msr	PRIMASK, r3
}
 8006994:	46c0      	nop			; (mov r8, r8)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	494c      	ldr	r1, [pc, #304]	; (8006ad4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80069a2:	400a      	ands	r2, r1
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	f383 8810 	msr	PRIMASK, r3
}
 80069b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b2:	f3ef 8310 	mrs	r3, PRIMASK
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80069b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ba:	643b      	str	r3, [r7, #64]	; 0x40
 80069bc:	2301      	movs	r3, #1
 80069be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	f383 8810 	msr	PRIMASK, r3
}
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2101      	movs	r1, #1
 80069d4:	438a      	bics	r2, r1
 80069d6:	609a      	str	r2, [r3, #8]
 80069d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069de:	f383 8810 	msr	PRIMASK, r3
}
 80069e2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2274      	movs	r2, #116	; 0x74
 80069f4:	2100      	movs	r1, #0
 80069f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e067      	b.n	8006acc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2204      	movs	r2, #4
 8006a04:	4013      	ands	r3, r2
 8006a06:	d050      	beq.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69da      	ldr	r2, [r3, #28]
 8006a0e:	2380      	movs	r3, #128	; 0x80
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	401a      	ands	r2, r3
 8006a14:	2380      	movs	r3, #128	; 0x80
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d146      	bne.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2280      	movs	r2, #128	; 0x80
 8006a22:	0112      	lsls	r2, r2, #4
 8006a24:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a26:	f3ef 8310 	mrs	r3, PRIMASK
 8006a2a:	613b      	str	r3, [r7, #16]
  return(result);
 8006a2c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a30:	2301      	movs	r3, #1
 8006a32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f383 8810 	msr	PRIMASK, r3
}
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4923      	ldr	r1, [pc, #140]	; (8006ad4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006a48:	400a      	ands	r2, r1
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	f383 8810 	msr	PRIMASK, r3
}
 8006a56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a58:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a5e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a62:	2301      	movs	r3, #1
 8006a64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	f383 8810 	msr	PRIMASK, r3
}
 8006a6c:	46c0      	nop			; (mov r8, r8)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2101      	movs	r1, #1
 8006a7a:	438a      	bics	r2, r1
 8006a7c:	609a      	str	r2, [r3, #8]
 8006a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	f383 8810 	msr	PRIMASK, r3
}
 8006a88:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2220      	movs	r2, #32
 8006a94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2280      	movs	r2, #128	; 0x80
 8006a9a:	2120      	movs	r1, #32
 8006a9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2274      	movs	r2, #116	; 0x74
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e010      	b.n	8006acc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	425a      	negs	r2, r3
 8006aba:	4153      	adcs	r3, r2
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	001a      	movs	r2, r3
 8006ac0:	1dfb      	adds	r3, r7, #7
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d100      	bne.n	8006aca <UART_WaitOnFlagUntilTimeout+0x17a>
 8006ac8:	e74b      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	0018      	movs	r0, r3
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	b014      	add	sp, #80	; 0x50
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	fffffe5f 	.word	0xfffffe5f

08006ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08e      	sub	sp, #56	; 0x38
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae4:	617b      	str	r3, [r7, #20]
  return(result);
 8006ae6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aea:	2301      	movs	r3, #1
 8006aec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	f383 8810 	msr	PRIMASK, r3
}
 8006af4:	46c0      	nop			; (mov r8, r8)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4925      	ldr	r1, [pc, #148]	; (8006b98 <UART_EndRxTransfer+0xc0>)
 8006b02:	400a      	ands	r2, r1
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f383 8810 	msr	PRIMASK, r3
}
 8006b10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b12:	f3ef 8310 	mrs	r3, PRIMASK
 8006b16:	623b      	str	r3, [r7, #32]
  return(result);
 8006b18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	f383 8810 	msr	PRIMASK, r3
}
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689a      	ldr	r2, [r3, #8]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2101      	movs	r1, #1
 8006b34:	438a      	bics	r2, r1
 8006b36:	609a      	str	r2, [r3, #8]
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	f383 8810 	msr	PRIMASK, r3
}
 8006b42:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d118      	bne.n	8006b7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b50:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b56:	2301      	movs	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f383 8810 	msr	PRIMASK, r3
}
 8006b60:	46c0      	nop			; (mov r8, r8)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2110      	movs	r1, #16
 8006b6e:	438a      	bics	r2, r1
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f383 8810 	msr	PRIMASK, r3
}
 8006b7c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006b90:	46c0      	nop			; (mov r8, r8)
 8006b92:	46bd      	mov	sp, r7
 8006b94:	b00e      	add	sp, #56	; 0x38
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	fffffedf 	.word	0xfffffedf

08006b9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	225a      	movs	r2, #90	; 0x5a
 8006bae:	2100      	movs	r1, #0
 8006bb0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2252      	movs	r2, #82	; 0x52
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f7ff fc2f 	bl	8006420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bc2:	46c0      	nop			; (mov r8, r8)
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b004      	add	sp, #16
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b086      	sub	sp, #24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bda:	617b      	str	r3, [r7, #20]
 8006bdc:	2301      	movs	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f383 8810 	msr	PRIMASK, r3
}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2140      	movs	r1, #64	; 0x40
 8006bf4:	438a      	bics	r2, r1
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f383 8810 	msr	PRIMASK, r3
}
 8006c02:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f7ff fbfc 	bl	8006410 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c18:	46c0      	nop			; (mov r8, r8)
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b006      	add	sp, #24
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c28:	46c0      	nop			; (mov r8, r8)
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b002      	add	sp, #8
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2244      	movs	r2, #68	; 0x44
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c40:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <USB_EnableGlobalInt+0x28>)
 8006c42:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	b299      	uxth	r1, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2240      	movs	r2, #64	; 0x40
 8006c4c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	0018      	movs	r0, r3
 8006c52:	46bd      	mov	sp, r7
 8006c54:	b004      	add	sp, #16
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	0000bf80 	.word	0x0000bf80

08006c5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c64:	4b09      	ldr	r3, [pc, #36]	; (8006c8c <USB_DisableGlobalInt+0x30>)
 8006c66:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2240      	movs	r2, #64	; 0x40
 8006c6c:	5a9b      	ldrh	r3, [r3, r2]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	b292      	uxth	r2, r2
 8006c74:	43d2      	mvns	r2, r2
 8006c76:	b292      	uxth	r2, r2
 8006c78:	4013      	ands	r3, r2
 8006c7a:	b299      	uxth	r1, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2240      	movs	r2, #64	; 0x40
 8006c80:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	0018      	movs	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b004      	add	sp, #16
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	0000bf80 	.word	0x0000bf80

08006c90 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c90:	b084      	sub	sp, #16
 8006c92:	b590      	push	{r4, r7, lr}
 8006c94:	46c6      	mov	lr, r8
 8006c96:	b500      	push	{lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	2004      	movs	r0, #4
 8006ca0:	2410      	movs	r4, #16
 8006ca2:	46a4      	mov	ip, r4
 8006ca4:	2408      	movs	r4, #8
 8006ca6:	46a0      	mov	r8, r4
 8006ca8:	44b8      	add	r8, r7
 8006caa:	44c4      	add	ip, r8
 8006cac:	4460      	add	r0, ip
 8006cae:	6001      	str	r1, [r0, #0]
 8006cb0:	6042      	str	r2, [r0, #4]
 8006cb2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2240      	movs	r2, #64	; 0x40
 8006cb8:	2101      	movs	r1, #1
 8006cba:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2240      	movs	r2, #64	; 0x40
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2244      	movs	r2, #68	; 0x44
 8006cc8:	2100      	movs	r1, #0
 8006cca:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2250      	movs	r2, #80	; 0x50
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	b002      	add	sp, #8
 8006cdc:	bc80      	pop	{r7}
 8006cde:	46b8      	mov	r8, r7
 8006ce0:	bc90      	pop	{r4, r7}
 8006ce2:	bc08      	pop	{r3}
 8006ce4:	b004      	add	sp, #16
 8006ce6:	4718      	bx	r3

08006ce8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b09c      	sub	sp, #112	; 0x70
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cf2:	236f      	movs	r3, #111	; 0x6f
 8006cf4:	18fb      	adds	r3, r7, r3
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	18d3      	adds	r3, r2, r3
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	236c      	movs	r3, #108	; 0x6c
 8006d0a:	18fb      	adds	r3, r7, r3
 8006d0c:	49cf      	ldr	r1, [pc, #828]	; (800704c <USB_ActivateEndpoint+0x364>)
 8006d0e:	400a      	ands	r2, r1
 8006d10:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	78db      	ldrb	r3, [r3, #3]
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d017      	beq.n	8006d4a <USB_ActivateEndpoint+0x62>
 8006d1a:	dc28      	bgt.n	8006d6e <USB_ActivateEndpoint+0x86>
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d00e      	beq.n	8006d3e <USB_ActivateEndpoint+0x56>
 8006d20:	dc25      	bgt.n	8006d6e <USB_ActivateEndpoint+0x86>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <USB_ActivateEndpoint+0x44>
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d018      	beq.n	8006d5c <USB_ActivateEndpoint+0x74>
 8006d2a:	e020      	b.n	8006d6e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006d2c:	226c      	movs	r2, #108	; 0x6c
 8006d2e:	18bb      	adds	r3, r7, r2
 8006d30:	18ba      	adds	r2, r7, r2
 8006d32:	8812      	ldrh	r2, [r2, #0]
 8006d34:	2180      	movs	r1, #128	; 0x80
 8006d36:	0089      	lsls	r1, r1, #2
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	801a      	strh	r2, [r3, #0]
      break;
 8006d3c:	e01c      	b.n	8006d78 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8006d3e:	226c      	movs	r2, #108	; 0x6c
 8006d40:	18bb      	adds	r3, r7, r2
 8006d42:	18ba      	adds	r2, r7, r2
 8006d44:	8812      	ldrh	r2, [r2, #0]
 8006d46:	801a      	strh	r2, [r3, #0]
      break;
 8006d48:	e016      	b.n	8006d78 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006d4a:	226c      	movs	r2, #108	; 0x6c
 8006d4c:	18bb      	adds	r3, r7, r2
 8006d4e:	18ba      	adds	r2, r7, r2
 8006d50:	8812      	ldrh	r2, [r2, #0]
 8006d52:	21c0      	movs	r1, #192	; 0xc0
 8006d54:	00c9      	lsls	r1, r1, #3
 8006d56:	430a      	orrs	r2, r1
 8006d58:	801a      	strh	r2, [r3, #0]
      break;
 8006d5a:	e00d      	b.n	8006d78 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006d5c:	226c      	movs	r2, #108	; 0x6c
 8006d5e:	18bb      	adds	r3, r7, r2
 8006d60:	18ba      	adds	r2, r7, r2
 8006d62:	8812      	ldrh	r2, [r2, #0]
 8006d64:	2180      	movs	r1, #128	; 0x80
 8006d66:	00c9      	lsls	r1, r1, #3
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	801a      	strh	r2, [r3, #0]
      break;
 8006d6c:	e004      	b.n	8006d78 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8006d6e:	236f      	movs	r3, #111	; 0x6f
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
      break;
 8006d76:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	18d3      	adds	r3, r2, r3
 8006d82:	226c      	movs	r2, #108	; 0x6c
 8006d84:	18ba      	adds	r2, r7, r2
 8006d86:	8812      	ldrh	r2, [r2, #0]
 8006d88:	49b1      	ldr	r1, [pc, #708]	; (8007050 <USB_ActivateEndpoint+0x368>)
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	b292      	uxth	r2, r2
 8006d8e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	18d3      	adds	r3, r2, r3
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	b21b      	sxth	r3, r3
 8006da0:	4aac      	ldr	r2, [pc, #688]	; (8007054 <USB_ActivateEndpoint+0x36c>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	b21a      	sxth	r2, r3
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	b21b      	sxth	r3, r3
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b21a      	sxth	r2, r3
 8006db0:	2166      	movs	r1, #102	; 0x66
 8006db2:	187b      	adds	r3, r7, r1
 8006db4:	801a      	strh	r2, [r3, #0]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	18d3      	adds	r3, r2, r3
 8006dc0:	187a      	adds	r2, r7, r1
 8006dc2:	8812      	ldrh	r2, [r2, #0]
 8006dc4:	49a2      	ldr	r1, [pc, #648]	; (8007050 <USB_ActivateEndpoint+0x368>)
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	b292      	uxth	r2, r2
 8006dca:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	7b1b      	ldrb	r3, [r3, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d000      	beq.n	8006dd6 <USB_ActivateEndpoint+0xee>
 8006dd4:	e150      	b.n	8007078 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	785b      	ldrb	r3, [r3, #1]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d100      	bne.n	8006de0 <USB_ActivateEndpoint+0xf8>
 8006dde:	e07a      	b.n	8006ed6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2250      	movs	r2, #80	; 0x50
 8006de8:	5a9b      	ldrh	r3, [r3, r2]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	001a      	movs	r2, r3
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	189b      	adds	r3, r3, r2
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	00da      	lsls	r2, r3, #3
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	18d3      	adds	r3, r2, r3
 8006dfe:	2280      	movs	r2, #128	; 0x80
 8006e00:	00d2      	lsls	r2, r2, #3
 8006e02:	4694      	mov	ip, r2
 8006e04:	4463      	add	r3, ip
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	88db      	ldrh	r3, [r3, #6]
 8006e0c:	085b      	lsrs	r3, r3, #1
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	18db      	adds	r3, r3, r3
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	18d2      	adds	r2, r2, r3
 8006e22:	2112      	movs	r1, #18
 8006e24:	187b      	adds	r3, r7, r1
 8006e26:	8812      	ldrh	r2, [r2, #0]
 8006e28:	801a      	strh	r2, [r3, #0]
 8006e2a:	187b      	adds	r3, r7, r1
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	2240      	movs	r2, #64	; 0x40
 8006e30:	4013      	ands	r3, r2
 8006e32:	d016      	beq.n	8006e62 <USB_ActivateEndpoint+0x17a>
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	18d3      	adds	r3, r2, r3
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	2010      	movs	r0, #16
 8006e44:	183b      	adds	r3, r7, r0
 8006e46:	4983      	ldr	r1, [pc, #524]	; (8007054 <USB_ActivateEndpoint+0x36c>)
 8006e48:	400a      	ands	r2, r1
 8006e4a:	801a      	strh	r2, [r3, #0]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	18d3      	adds	r3, r2, r3
 8006e56:	183a      	adds	r2, r7, r0
 8006e58:	8812      	ldrh	r2, [r2, #0]
 8006e5a:	497f      	ldr	r1, [pc, #508]	; (8007058 <USB_ActivateEndpoint+0x370>)
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	b292      	uxth	r2, r2
 8006e60:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	78db      	ldrb	r3, [r3, #3]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d01d      	beq.n	8006ea6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	18d3      	adds	r3, r2, r3
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	200c      	movs	r0, #12
 8006e7a:	183b      	adds	r3, r7, r0
 8006e7c:	4977      	ldr	r1, [pc, #476]	; (800705c <USB_ActivateEndpoint+0x374>)
 8006e7e:	400a      	ands	r2, r1
 8006e80:	801a      	strh	r2, [r3, #0]
 8006e82:	183b      	adds	r3, r7, r0
 8006e84:	183a      	adds	r2, r7, r0
 8006e86:	8812      	ldrh	r2, [r2, #0]
 8006e88:	2120      	movs	r1, #32
 8006e8a:	404a      	eors	r2, r1
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	18d3      	adds	r3, r2, r3
 8006e98:	183a      	adds	r2, r7, r0
 8006e9a:	8812      	ldrh	r2, [r2, #0]
 8006e9c:	496c      	ldr	r1, [pc, #432]	; (8007050 <USB_ActivateEndpoint+0x368>)
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	b292      	uxth	r2, r2
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	e27a      	b.n	800739c <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	18d3      	adds	r3, r2, r3
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	200e      	movs	r0, #14
 8006eb6:	183b      	adds	r3, r7, r0
 8006eb8:	4968      	ldr	r1, [pc, #416]	; (800705c <USB_ActivateEndpoint+0x374>)
 8006eba:	400a      	ands	r2, r1
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	18d3      	adds	r3, r2, r3
 8006ec8:	183a      	adds	r2, r7, r0
 8006eca:	8812      	ldrh	r2, [r2, #0]
 8006ecc:	4960      	ldr	r1, [pc, #384]	; (8007050 <USB_ActivateEndpoint+0x368>)
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	b292      	uxth	r2, r2
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e262      	b.n	800739c <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2250      	movs	r2, #80	; 0x50
 8006ede:	5a9b      	ldrh	r3, [r3, r2]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	001a      	movs	r2, r3
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	189b      	adds	r3, r3, r2
 8006ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	00da      	lsls	r2, r3, #3
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	18d3      	adds	r3, r2, r3
 8006ef4:	4a5a      	ldr	r2, [pc, #360]	; (8007060 <USB_ActivateEndpoint+0x378>)
 8006ef6:	4694      	mov	ip, r2
 8006ef8:	4463      	add	r3, ip
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	88db      	ldrh	r3, [r3, #6]
 8006f00:	085b      	lsrs	r3, r3, #1
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	18db      	adds	r3, r3, r3
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2250      	movs	r2, #80	; 0x50
 8006f14:	5a9b      	ldrh	r3, [r3, r2]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	001a      	movs	r2, r3
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	189b      	adds	r3, r3, r2
 8006f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	00da      	lsls	r2, r3, #3
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	18d3      	adds	r3, r2, r3
 8006f2a:	4a4e      	ldr	r2, [pc, #312]	; (8007064 <USB_ActivateEndpoint+0x37c>)
 8006f2c:	4694      	mov	ip, r2
 8006f2e:	4463      	add	r3, ip
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d110      	bne.n	8006f5c <USB_ActivateEndpoint+0x274>
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	4a49      	ldr	r2, [pc, #292]	; (8007068 <USB_ActivateEndpoint+0x380>)
 8006f42:	4013      	ands	r3, r2
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	801a      	strh	r2, [r3, #0]
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	4a46      	ldr	r2, [pc, #280]	; (800706c <USB_ActivateEndpoint+0x384>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	e02b      	b.n	8006fb4 <USB_ActivateEndpoint+0x2cc>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b3e      	cmp	r3, #62	; 0x3e
 8006f62:	d812      	bhi.n	8006f8a <USB_ActivateEndpoint+0x2a2>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	085b      	lsrs	r3, r3, #1
 8006f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2201      	movs	r2, #1
 8006f72:	4013      	ands	r3, r2
 8006f74:	d002      	beq.n	8006f7c <USB_ActivateEndpoint+0x294>
 8006f76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f78:	3301      	adds	r3, #1
 8006f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	029b      	lsls	r3, r3, #10
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	801a      	strh	r2, [r3, #0]
 8006f88:	e014      	b.n	8006fb4 <USB_ActivateEndpoint+0x2cc>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	095b      	lsrs	r3, r3, #5
 8006f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	221f      	movs	r2, #31
 8006f98:	4013      	ands	r3, r2
 8006f9a:	d102      	bne.n	8006fa2 <USB_ActivateEndpoint+0x2ba>
 8006f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	029b      	lsls	r3, r3, #10
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	4a30      	ldr	r2, [pc, #192]	; (800706c <USB_ActivateEndpoint+0x384>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	18d2      	adds	r2, r2, r3
 8006fbe:	2122      	movs	r1, #34	; 0x22
 8006fc0:	187b      	adds	r3, r7, r1
 8006fc2:	8812      	ldrh	r2, [r2, #0]
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	187b      	adds	r3, r7, r1
 8006fc8:	881a      	ldrh	r2, [r3, #0]
 8006fca:	2380      	movs	r3, #128	; 0x80
 8006fcc:	01db      	lsls	r3, r3, #7
 8006fce:	4013      	ands	r3, r2
 8006fd0:	d016      	beq.n	8007000 <USB_ActivateEndpoint+0x318>
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	18d3      	adds	r3, r2, r3
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	2020      	movs	r0, #32
 8006fe2:	183b      	adds	r3, r7, r0
 8006fe4:	491b      	ldr	r1, [pc, #108]	; (8007054 <USB_ActivateEndpoint+0x36c>)
 8006fe6:	400a      	ands	r2, r1
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	18d3      	adds	r3, r2, r3
 8006ff4:	183a      	adds	r2, r7, r0
 8006ff6:	8812      	ldrh	r2, [r2, #0]
 8006ff8:	491d      	ldr	r1, [pc, #116]	; (8007070 <USB_ActivateEndpoint+0x388>)
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	b292      	uxth	r2, r2
 8006ffe:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	18d3      	adds	r3, r2, r3
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29a      	uxth	r2, r3
 800700e:	201e      	movs	r0, #30
 8007010:	183b      	adds	r3, r7, r0
 8007012:	4918      	ldr	r1, [pc, #96]	; (8007074 <USB_ActivateEndpoint+0x38c>)
 8007014:	400a      	ands	r2, r1
 8007016:	801a      	strh	r2, [r3, #0]
 8007018:	183b      	adds	r3, r7, r0
 800701a:	183a      	adds	r2, r7, r0
 800701c:	8812      	ldrh	r2, [r2, #0]
 800701e:	2180      	movs	r1, #128	; 0x80
 8007020:	0149      	lsls	r1, r1, #5
 8007022:	404a      	eors	r2, r1
 8007024:	801a      	strh	r2, [r3, #0]
 8007026:	183b      	adds	r3, r7, r0
 8007028:	183a      	adds	r2, r7, r0
 800702a:	8812      	ldrh	r2, [r2, #0]
 800702c:	2180      	movs	r1, #128	; 0x80
 800702e:	0189      	lsls	r1, r1, #6
 8007030:	404a      	eors	r2, r1
 8007032:	801a      	strh	r2, [r3, #0]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	18d3      	adds	r3, r2, r3
 800703e:	183a      	adds	r2, r7, r0
 8007040:	8812      	ldrh	r2, [r2, #0]
 8007042:	4903      	ldr	r1, [pc, #12]	; (8007050 <USB_ActivateEndpoint+0x368>)
 8007044:	430a      	orrs	r2, r1
 8007046:	b292      	uxth	r2, r2
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	e1a7      	b.n	800739c <USB_ActivateEndpoint+0x6b4>
 800704c:	ffff898f 	.word	0xffff898f
 8007050:	ffff8080 	.word	0xffff8080
 8007054:	ffff8f8f 	.word	0xffff8f8f
 8007058:	ffff80c0 	.word	0xffff80c0
 800705c:	ffff8fbf 	.word	0xffff8fbf
 8007060:	00000404 	.word	0x00000404
 8007064:	00000406 	.word	0x00000406
 8007068:	ffff83ff 	.word	0xffff83ff
 800706c:	ffff8000 	.word	0xffff8000
 8007070:	ffffc080 	.word	0xffffc080
 8007074:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	78db      	ldrb	r3, [r3, #3]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d117      	bne.n	80070b0 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	18d3      	adds	r3, r2, r3
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29a      	uxth	r2, r3
 800708e:	2062      	movs	r0, #98	; 0x62
 8007090:	183b      	adds	r3, r7, r0
 8007092:	49c6      	ldr	r1, [pc, #792]	; (80073ac <USB_ActivateEndpoint+0x6c4>)
 8007094:	400a      	ands	r2, r1
 8007096:	801a      	strh	r2, [r3, #0]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	18d3      	adds	r3, r2, r3
 80070a2:	183a      	adds	r2, r7, r0
 80070a4:	8812      	ldrh	r2, [r2, #0]
 80070a6:	49c2      	ldr	r1, [pc, #776]	; (80073b0 <USB_ActivateEndpoint+0x6c8>)
 80070a8:	430a      	orrs	r2, r1
 80070aa:	b292      	uxth	r2, r2
 80070ac:	801a      	strh	r2, [r3, #0]
 80070ae:	e016      	b.n	80070de <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	18d3      	adds	r3, r2, r3
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29a      	uxth	r2, r3
 80070be:	2064      	movs	r0, #100	; 0x64
 80070c0:	183b      	adds	r3, r7, r0
 80070c2:	49bc      	ldr	r1, [pc, #752]	; (80073b4 <USB_ActivateEndpoint+0x6cc>)
 80070c4:	400a      	ands	r2, r1
 80070c6:	801a      	strh	r2, [r3, #0]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	18d3      	adds	r3, r2, r3
 80070d2:	183a      	adds	r2, r7, r0
 80070d4:	8812      	ldrh	r2, [r2, #0]
 80070d6:	49b8      	ldr	r1, [pc, #736]	; (80073b8 <USB_ActivateEndpoint+0x6d0>)
 80070d8:	430a      	orrs	r2, r1
 80070da:	b292      	uxth	r2, r2
 80070dc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2250      	movs	r2, #80	; 0x50
 80070e6:	5a9b      	ldrh	r3, [r3, r2]
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	001a      	movs	r2, r3
 80070ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ee:	189b      	adds	r3, r3, r2
 80070f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	00da      	lsls	r2, r3, #3
 80070f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070fa:	18d3      	adds	r3, r2, r3
 80070fc:	2280      	movs	r2, #128	; 0x80
 80070fe:	00d2      	lsls	r2, r2, #3
 8007100:	4694      	mov	ip, r2
 8007102:	4463      	add	r3, ip
 8007104:	65bb      	str	r3, [r7, #88]	; 0x58
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	891b      	ldrh	r3, [r3, #8]
 800710a:	085b      	lsrs	r3, r3, #1
 800710c:	b29b      	uxth	r3, r3
 800710e:	18db      	adds	r3, r3, r3
 8007110:	b29a      	uxth	r2, r3
 8007112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007114:	801a      	strh	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	657b      	str	r3, [r7, #84]	; 0x54
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2250      	movs	r2, #80	; 0x50
 800711e:	5a9b      	ldrh	r3, [r3, r2]
 8007120:	b29b      	uxth	r3, r3
 8007122:	001a      	movs	r2, r3
 8007124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007126:	189b      	adds	r3, r3, r2
 8007128:	657b      	str	r3, [r7, #84]	; 0x54
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	00da      	lsls	r2, r3, #3
 8007130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007132:	18d3      	adds	r3, r2, r3
 8007134:	4aa1      	ldr	r2, [pc, #644]	; (80073bc <USB_ActivateEndpoint+0x6d4>)
 8007136:	4694      	mov	ip, r2
 8007138:	4463      	add	r3, ip
 800713a:	653b      	str	r3, [r7, #80]	; 0x50
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	895b      	ldrh	r3, [r3, #10]
 8007140:	085b      	lsrs	r3, r3, #1
 8007142:	b29b      	uxth	r3, r3
 8007144:	18db      	adds	r3, r3, r3
 8007146:	b29a      	uxth	r2, r3
 8007148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800714a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	785b      	ldrb	r3, [r3, #1]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d000      	beq.n	8007156 <USB_ActivateEndpoint+0x46e>
 8007154:	e087      	b.n	8007266 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	18d2      	adds	r2, r2, r3
 8007160:	2140      	movs	r1, #64	; 0x40
 8007162:	187b      	adds	r3, r7, r1
 8007164:	8812      	ldrh	r2, [r2, #0]
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	187b      	adds	r3, r7, r1
 800716a:	881a      	ldrh	r2, [r3, #0]
 800716c:	2380      	movs	r3, #128	; 0x80
 800716e:	01db      	lsls	r3, r3, #7
 8007170:	4013      	ands	r3, r2
 8007172:	d016      	beq.n	80071a2 <USB_ActivateEndpoint+0x4ba>
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	18d3      	adds	r3, r2, r3
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29a      	uxth	r2, r3
 8007182:	203e      	movs	r0, #62	; 0x3e
 8007184:	183b      	adds	r3, r7, r0
 8007186:	4989      	ldr	r1, [pc, #548]	; (80073ac <USB_ActivateEndpoint+0x6c4>)
 8007188:	400a      	ands	r2, r1
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	18d3      	adds	r3, r2, r3
 8007196:	183a      	adds	r2, r7, r0
 8007198:	8812      	ldrh	r2, [r2, #0]
 800719a:	4989      	ldr	r1, [pc, #548]	; (80073c0 <USB_ActivateEndpoint+0x6d8>)
 800719c:	430a      	orrs	r2, r1
 800719e:	b292      	uxth	r2, r2
 80071a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	18d2      	adds	r2, r2, r3
 80071ac:	213c      	movs	r1, #60	; 0x3c
 80071ae:	187b      	adds	r3, r7, r1
 80071b0:	8812      	ldrh	r2, [r2, #0]
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	187b      	adds	r3, r7, r1
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	2240      	movs	r2, #64	; 0x40
 80071ba:	4013      	ands	r3, r2
 80071bc:	d016      	beq.n	80071ec <USB_ActivateEndpoint+0x504>
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	18d3      	adds	r3, r2, r3
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	203a      	movs	r0, #58	; 0x3a
 80071ce:	183b      	adds	r3, r7, r0
 80071d0:	4976      	ldr	r1, [pc, #472]	; (80073ac <USB_ActivateEndpoint+0x6c4>)
 80071d2:	400a      	ands	r2, r1
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	18d3      	adds	r3, r2, r3
 80071e0:	183a      	adds	r2, r7, r0
 80071e2:	8812      	ldrh	r2, [r2, #0]
 80071e4:	4977      	ldr	r1, [pc, #476]	; (80073c4 <USB_ActivateEndpoint+0x6dc>)
 80071e6:	430a      	orrs	r2, r1
 80071e8:	b292      	uxth	r2, r2
 80071ea:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	18d3      	adds	r3, r2, r3
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	2038      	movs	r0, #56	; 0x38
 80071fc:	183b      	adds	r3, r7, r0
 80071fe:	4972      	ldr	r1, [pc, #456]	; (80073c8 <USB_ActivateEndpoint+0x6e0>)
 8007200:	400a      	ands	r2, r1
 8007202:	801a      	strh	r2, [r3, #0]
 8007204:	183b      	adds	r3, r7, r0
 8007206:	183a      	adds	r2, r7, r0
 8007208:	8812      	ldrh	r2, [r2, #0]
 800720a:	2180      	movs	r1, #128	; 0x80
 800720c:	0149      	lsls	r1, r1, #5
 800720e:	404a      	eors	r2, r1
 8007210:	801a      	strh	r2, [r3, #0]
 8007212:	183b      	adds	r3, r7, r0
 8007214:	183a      	adds	r2, r7, r0
 8007216:	8812      	ldrh	r2, [r2, #0]
 8007218:	2180      	movs	r1, #128	; 0x80
 800721a:	0189      	lsls	r1, r1, #6
 800721c:	404a      	eors	r2, r1
 800721e:	801a      	strh	r2, [r3, #0]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	18d3      	adds	r3, r2, r3
 800722a:	183a      	adds	r2, r7, r0
 800722c:	8812      	ldrh	r2, [r2, #0]
 800722e:	4962      	ldr	r1, [pc, #392]	; (80073b8 <USB_ActivateEndpoint+0x6d0>)
 8007230:	430a      	orrs	r2, r1
 8007232:	b292      	uxth	r2, r2
 8007234:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	18d3      	adds	r3, r2, r3
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29a      	uxth	r2, r3
 8007244:	2036      	movs	r0, #54	; 0x36
 8007246:	183b      	adds	r3, r7, r0
 8007248:	4960      	ldr	r1, [pc, #384]	; (80073cc <USB_ActivateEndpoint+0x6e4>)
 800724a:	400a      	ands	r2, r1
 800724c:	801a      	strh	r2, [r3, #0]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	18d3      	adds	r3, r2, r3
 8007258:	183a      	adds	r2, r7, r0
 800725a:	8812      	ldrh	r2, [r2, #0]
 800725c:	4956      	ldr	r1, [pc, #344]	; (80073b8 <USB_ActivateEndpoint+0x6d0>)
 800725e:	430a      	orrs	r2, r1
 8007260:	b292      	uxth	r2, r2
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e09a      	b.n	800739c <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	18d2      	adds	r2, r2, r3
 8007270:	214e      	movs	r1, #78	; 0x4e
 8007272:	187b      	adds	r3, r7, r1
 8007274:	8812      	ldrh	r2, [r2, #0]
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	187b      	adds	r3, r7, r1
 800727a:	881a      	ldrh	r2, [r3, #0]
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	01db      	lsls	r3, r3, #7
 8007280:	4013      	ands	r3, r2
 8007282:	d016      	beq.n	80072b2 <USB_ActivateEndpoint+0x5ca>
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	18d3      	adds	r3, r2, r3
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29a      	uxth	r2, r3
 8007292:	204c      	movs	r0, #76	; 0x4c
 8007294:	183b      	adds	r3, r7, r0
 8007296:	4945      	ldr	r1, [pc, #276]	; (80073ac <USB_ActivateEndpoint+0x6c4>)
 8007298:	400a      	ands	r2, r1
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	18d3      	adds	r3, r2, r3
 80072a6:	183a      	adds	r2, r7, r0
 80072a8:	8812      	ldrh	r2, [r2, #0]
 80072aa:	4945      	ldr	r1, [pc, #276]	; (80073c0 <USB_ActivateEndpoint+0x6d8>)
 80072ac:	430a      	orrs	r2, r1
 80072ae:	b292      	uxth	r2, r2
 80072b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	18d2      	adds	r2, r2, r3
 80072bc:	214a      	movs	r1, #74	; 0x4a
 80072be:	187b      	adds	r3, r7, r1
 80072c0:	8812      	ldrh	r2, [r2, #0]
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	187b      	adds	r3, r7, r1
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	2240      	movs	r2, #64	; 0x40
 80072ca:	4013      	ands	r3, r2
 80072cc:	d016      	beq.n	80072fc <USB_ActivateEndpoint+0x614>
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	18d3      	adds	r3, r2, r3
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29a      	uxth	r2, r3
 80072dc:	2048      	movs	r0, #72	; 0x48
 80072de:	183b      	adds	r3, r7, r0
 80072e0:	4932      	ldr	r1, [pc, #200]	; (80073ac <USB_ActivateEndpoint+0x6c4>)
 80072e2:	400a      	ands	r2, r1
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	18d3      	adds	r3, r2, r3
 80072f0:	183a      	adds	r2, r7, r0
 80072f2:	8812      	ldrh	r2, [r2, #0]
 80072f4:	4933      	ldr	r1, [pc, #204]	; (80073c4 <USB_ActivateEndpoint+0x6dc>)
 80072f6:	430a      	orrs	r2, r1
 80072f8:	b292      	uxth	r2, r2
 80072fa:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	78db      	ldrb	r3, [r3, #3]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d01d      	beq.n	8007340 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	18d3      	adds	r3, r2, r3
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29a      	uxth	r2, r3
 8007312:	2044      	movs	r0, #68	; 0x44
 8007314:	183b      	adds	r3, r7, r0
 8007316:	492d      	ldr	r1, [pc, #180]	; (80073cc <USB_ActivateEndpoint+0x6e4>)
 8007318:	400a      	ands	r2, r1
 800731a:	801a      	strh	r2, [r3, #0]
 800731c:	183b      	adds	r3, r7, r0
 800731e:	183a      	adds	r2, r7, r0
 8007320:	8812      	ldrh	r2, [r2, #0]
 8007322:	2120      	movs	r1, #32
 8007324:	404a      	eors	r2, r1
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	18d3      	adds	r3, r2, r3
 8007332:	183a      	adds	r2, r7, r0
 8007334:	8812      	ldrh	r2, [r2, #0]
 8007336:	4920      	ldr	r1, [pc, #128]	; (80073b8 <USB_ActivateEndpoint+0x6d0>)
 8007338:	430a      	orrs	r2, r1
 800733a:	b292      	uxth	r2, r2
 800733c:	801a      	strh	r2, [r3, #0]
 800733e:	e016      	b.n	800736e <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	18d3      	adds	r3, r2, r3
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	b29a      	uxth	r2, r3
 800734e:	2046      	movs	r0, #70	; 0x46
 8007350:	183b      	adds	r3, r7, r0
 8007352:	491e      	ldr	r1, [pc, #120]	; (80073cc <USB_ActivateEndpoint+0x6e4>)
 8007354:	400a      	ands	r2, r1
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	18d3      	adds	r3, r2, r3
 8007362:	183a      	adds	r2, r7, r0
 8007364:	8812      	ldrh	r2, [r2, #0]
 8007366:	4914      	ldr	r1, [pc, #80]	; (80073b8 <USB_ActivateEndpoint+0x6d0>)
 8007368:	430a      	orrs	r2, r1
 800736a:	b292      	uxth	r2, r2
 800736c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	18d3      	adds	r3, r2, r3
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29a      	uxth	r2, r3
 800737c:	2042      	movs	r0, #66	; 0x42
 800737e:	183b      	adds	r3, r7, r0
 8007380:	4911      	ldr	r1, [pc, #68]	; (80073c8 <USB_ActivateEndpoint+0x6e0>)
 8007382:	400a      	ands	r2, r1
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	18d3      	adds	r3, r2, r3
 8007390:	183a      	adds	r2, r7, r0
 8007392:	8812      	ldrh	r2, [r2, #0]
 8007394:	4908      	ldr	r1, [pc, #32]	; (80073b8 <USB_ActivateEndpoint+0x6d0>)
 8007396:	430a      	orrs	r2, r1
 8007398:	b292      	uxth	r2, r2
 800739a:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 800739c:	236f      	movs	r3, #111	; 0x6f
 800739e:	18fb      	adds	r3, r7, r3
 80073a0:	781b      	ldrb	r3, [r3, #0]
}
 80073a2:	0018      	movs	r0, r3
 80073a4:	46bd      	mov	sp, r7
 80073a6:	b01c      	add	sp, #112	; 0x70
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	ffff8f8f 	.word	0xffff8f8f
 80073b0:	ffff8180 	.word	0xffff8180
 80073b4:	ffff8e8f 	.word	0xffff8e8f
 80073b8:	ffff8080 	.word	0xffff8080
 80073bc:	00000404 	.word	0x00000404
 80073c0:	ffffc080 	.word	0xffffc080
 80073c4:	ffff80c0 	.word	0xffff80c0
 80073c8:	ffffbf8f 	.word	0xffffbf8f
 80073cc:	ffff8fbf 	.word	0xffff8fbf

080073d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08c      	sub	sp, #48	; 0x30
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	7b1b      	ldrb	r3, [r3, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d000      	beq.n	80073e4 <USB_DeactivateEndpoint+0x14>
 80073e2:	e07e      	b.n	80074e2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	785b      	ldrb	r3, [r3, #1]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d03c      	beq.n	8007466 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	18d2      	adds	r2, r2, r3
 80073f6:	210c      	movs	r1, #12
 80073f8:	187b      	adds	r3, r7, r1
 80073fa:	8812      	ldrh	r2, [r2, #0]
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	187b      	adds	r3, r7, r1
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	2240      	movs	r2, #64	; 0x40
 8007404:	4013      	ands	r3, r2
 8007406:	d016      	beq.n	8007436 <USB_DeactivateEndpoint+0x66>
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	18d3      	adds	r3, r2, r3
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29a      	uxth	r2, r3
 8007416:	200a      	movs	r0, #10
 8007418:	183b      	adds	r3, r7, r0
 800741a:	49c7      	ldr	r1, [pc, #796]	; (8007738 <USB_DeactivateEndpoint+0x368>)
 800741c:	400a      	ands	r2, r1
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	18d3      	adds	r3, r2, r3
 800742a:	183a      	adds	r2, r7, r0
 800742c:	8812      	ldrh	r2, [r2, #0]
 800742e:	49c3      	ldr	r1, [pc, #780]	; (800773c <USB_DeactivateEndpoint+0x36c>)
 8007430:	430a      	orrs	r2, r1
 8007432:	b292      	uxth	r2, r2
 8007434:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	18d3      	adds	r3, r2, r3
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29a      	uxth	r2, r3
 8007444:	2008      	movs	r0, #8
 8007446:	183b      	adds	r3, r7, r0
 8007448:	49bd      	ldr	r1, [pc, #756]	; (8007740 <USB_DeactivateEndpoint+0x370>)
 800744a:	400a      	ands	r2, r1
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	18d3      	adds	r3, r2, r3
 8007458:	183a      	adds	r2, r7, r0
 800745a:	8812      	ldrh	r2, [r2, #0]
 800745c:	49b9      	ldr	r1, [pc, #740]	; (8007744 <USB_DeactivateEndpoint+0x374>)
 800745e:	430a      	orrs	r2, r1
 8007460:	b292      	uxth	r2, r2
 8007462:	801a      	strh	r2, [r3, #0]
 8007464:	e163      	b.n	800772e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	18d2      	adds	r2, r2, r3
 8007470:	2112      	movs	r1, #18
 8007472:	187b      	adds	r3, r7, r1
 8007474:	8812      	ldrh	r2, [r2, #0]
 8007476:	801a      	strh	r2, [r3, #0]
 8007478:	187b      	adds	r3, r7, r1
 800747a:	881a      	ldrh	r2, [r3, #0]
 800747c:	2380      	movs	r3, #128	; 0x80
 800747e:	01db      	lsls	r3, r3, #7
 8007480:	4013      	ands	r3, r2
 8007482:	d016      	beq.n	80074b2 <USB_DeactivateEndpoint+0xe2>
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	18d3      	adds	r3, r2, r3
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	b29a      	uxth	r2, r3
 8007492:	2010      	movs	r0, #16
 8007494:	183b      	adds	r3, r7, r0
 8007496:	49a8      	ldr	r1, [pc, #672]	; (8007738 <USB_DeactivateEndpoint+0x368>)
 8007498:	400a      	ands	r2, r1
 800749a:	801a      	strh	r2, [r3, #0]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	18d3      	adds	r3, r2, r3
 80074a6:	183a      	adds	r2, r7, r0
 80074a8:	8812      	ldrh	r2, [r2, #0]
 80074aa:	49a7      	ldr	r1, [pc, #668]	; (8007748 <USB_DeactivateEndpoint+0x378>)
 80074ac:	430a      	orrs	r2, r1
 80074ae:	b292      	uxth	r2, r2
 80074b0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	18d3      	adds	r3, r2, r3
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29a      	uxth	r2, r3
 80074c0:	200e      	movs	r0, #14
 80074c2:	183b      	adds	r3, r7, r0
 80074c4:	49a1      	ldr	r1, [pc, #644]	; (800774c <USB_DeactivateEndpoint+0x37c>)
 80074c6:	400a      	ands	r2, r1
 80074c8:	801a      	strh	r2, [r3, #0]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	18d3      	adds	r3, r2, r3
 80074d4:	183a      	adds	r2, r7, r0
 80074d6:	8812      	ldrh	r2, [r2, #0]
 80074d8:	499a      	ldr	r1, [pc, #616]	; (8007744 <USB_DeactivateEndpoint+0x374>)
 80074da:	430a      	orrs	r2, r1
 80074dc:	b292      	uxth	r2, r2
 80074de:	801a      	strh	r2, [r3, #0]
 80074e0:	e125      	b.n	800772e <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	785b      	ldrb	r3, [r3, #1]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d000      	beq.n	80074ec <USB_DeactivateEndpoint+0x11c>
 80074ea:	e090      	b.n	800760e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	18d2      	adds	r2, r2, r3
 80074f6:	2120      	movs	r1, #32
 80074f8:	187b      	adds	r3, r7, r1
 80074fa:	8812      	ldrh	r2, [r2, #0]
 80074fc:	801a      	strh	r2, [r3, #0]
 80074fe:	187b      	adds	r3, r7, r1
 8007500:	881a      	ldrh	r2, [r3, #0]
 8007502:	2380      	movs	r3, #128	; 0x80
 8007504:	01db      	lsls	r3, r3, #7
 8007506:	4013      	ands	r3, r2
 8007508:	d016      	beq.n	8007538 <USB_DeactivateEndpoint+0x168>
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	18d3      	adds	r3, r2, r3
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	b29a      	uxth	r2, r3
 8007518:	201e      	movs	r0, #30
 800751a:	183b      	adds	r3, r7, r0
 800751c:	4986      	ldr	r1, [pc, #536]	; (8007738 <USB_DeactivateEndpoint+0x368>)
 800751e:	400a      	ands	r2, r1
 8007520:	801a      	strh	r2, [r3, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	18d3      	adds	r3, r2, r3
 800752c:	183a      	adds	r2, r7, r0
 800752e:	8812      	ldrh	r2, [r2, #0]
 8007530:	4985      	ldr	r1, [pc, #532]	; (8007748 <USB_DeactivateEndpoint+0x378>)
 8007532:	430a      	orrs	r2, r1
 8007534:	b292      	uxth	r2, r2
 8007536:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	18d2      	adds	r2, r2, r3
 8007542:	211c      	movs	r1, #28
 8007544:	187b      	adds	r3, r7, r1
 8007546:	8812      	ldrh	r2, [r2, #0]
 8007548:	801a      	strh	r2, [r3, #0]
 800754a:	187b      	adds	r3, r7, r1
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	2240      	movs	r2, #64	; 0x40
 8007550:	4013      	ands	r3, r2
 8007552:	d016      	beq.n	8007582 <USB_DeactivateEndpoint+0x1b2>
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	18d3      	adds	r3, r2, r3
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29a      	uxth	r2, r3
 8007562:	201a      	movs	r0, #26
 8007564:	183b      	adds	r3, r7, r0
 8007566:	4974      	ldr	r1, [pc, #464]	; (8007738 <USB_DeactivateEndpoint+0x368>)
 8007568:	400a      	ands	r2, r1
 800756a:	801a      	strh	r2, [r3, #0]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	18d3      	adds	r3, r2, r3
 8007576:	183a      	adds	r2, r7, r0
 8007578:	8812      	ldrh	r2, [r2, #0]
 800757a:	4970      	ldr	r1, [pc, #448]	; (800773c <USB_DeactivateEndpoint+0x36c>)
 800757c:	430a      	orrs	r2, r1
 800757e:	b292      	uxth	r2, r2
 8007580:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	18d3      	adds	r3, r2, r3
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	b29a      	uxth	r2, r3
 8007590:	2018      	movs	r0, #24
 8007592:	183b      	adds	r3, r7, r0
 8007594:	4968      	ldr	r1, [pc, #416]	; (8007738 <USB_DeactivateEndpoint+0x368>)
 8007596:	400a      	ands	r2, r1
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	18d3      	adds	r3, r2, r3
 80075a4:	183a      	adds	r2, r7, r0
 80075a6:	8812      	ldrh	r2, [r2, #0]
 80075a8:	4964      	ldr	r1, [pc, #400]	; (800773c <USB_DeactivateEndpoint+0x36c>)
 80075aa:	430a      	orrs	r2, r1
 80075ac:	b292      	uxth	r2, r2
 80075ae:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	18d3      	adds	r3, r2, r3
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29a      	uxth	r2, r3
 80075be:	2016      	movs	r0, #22
 80075c0:	183b      	adds	r3, r7, r0
 80075c2:	4962      	ldr	r1, [pc, #392]	; (800774c <USB_DeactivateEndpoint+0x37c>)
 80075c4:	400a      	ands	r2, r1
 80075c6:	801a      	strh	r2, [r3, #0]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	18d3      	adds	r3, r2, r3
 80075d2:	183a      	adds	r2, r7, r0
 80075d4:	8812      	ldrh	r2, [r2, #0]
 80075d6:	495b      	ldr	r1, [pc, #364]	; (8007744 <USB_DeactivateEndpoint+0x374>)
 80075d8:	430a      	orrs	r2, r1
 80075da:	b292      	uxth	r2, r2
 80075dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	18d3      	adds	r3, r2, r3
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	2014      	movs	r0, #20
 80075ee:	183b      	adds	r3, r7, r0
 80075f0:	4953      	ldr	r1, [pc, #332]	; (8007740 <USB_DeactivateEndpoint+0x370>)
 80075f2:	400a      	ands	r2, r1
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	18d3      	adds	r3, r2, r3
 8007600:	183a      	adds	r2, r7, r0
 8007602:	8812      	ldrh	r2, [r2, #0]
 8007604:	494f      	ldr	r1, [pc, #316]	; (8007744 <USB_DeactivateEndpoint+0x374>)
 8007606:	430a      	orrs	r2, r1
 8007608:	b292      	uxth	r2, r2
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	e08f      	b.n	800772e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	18d2      	adds	r2, r2, r3
 8007618:	212e      	movs	r1, #46	; 0x2e
 800761a:	187b      	adds	r3, r7, r1
 800761c:	8812      	ldrh	r2, [r2, #0]
 800761e:	801a      	strh	r2, [r3, #0]
 8007620:	187b      	adds	r3, r7, r1
 8007622:	881a      	ldrh	r2, [r3, #0]
 8007624:	2380      	movs	r3, #128	; 0x80
 8007626:	01db      	lsls	r3, r3, #7
 8007628:	4013      	ands	r3, r2
 800762a:	d016      	beq.n	800765a <USB_DeactivateEndpoint+0x28a>
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	18d3      	adds	r3, r2, r3
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b29a      	uxth	r2, r3
 800763a:	202c      	movs	r0, #44	; 0x2c
 800763c:	183b      	adds	r3, r7, r0
 800763e:	493e      	ldr	r1, [pc, #248]	; (8007738 <USB_DeactivateEndpoint+0x368>)
 8007640:	400a      	ands	r2, r1
 8007642:	801a      	strh	r2, [r3, #0]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	18d3      	adds	r3, r2, r3
 800764e:	183a      	adds	r2, r7, r0
 8007650:	8812      	ldrh	r2, [r2, #0]
 8007652:	493d      	ldr	r1, [pc, #244]	; (8007748 <USB_DeactivateEndpoint+0x378>)
 8007654:	430a      	orrs	r2, r1
 8007656:	b292      	uxth	r2, r2
 8007658:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	18d2      	adds	r2, r2, r3
 8007664:	212a      	movs	r1, #42	; 0x2a
 8007666:	187b      	adds	r3, r7, r1
 8007668:	8812      	ldrh	r2, [r2, #0]
 800766a:	801a      	strh	r2, [r3, #0]
 800766c:	187b      	adds	r3, r7, r1
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	2240      	movs	r2, #64	; 0x40
 8007672:	4013      	ands	r3, r2
 8007674:	d016      	beq.n	80076a4 <USB_DeactivateEndpoint+0x2d4>
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	18d3      	adds	r3, r2, r3
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	b29a      	uxth	r2, r3
 8007684:	2028      	movs	r0, #40	; 0x28
 8007686:	183b      	adds	r3, r7, r0
 8007688:	492b      	ldr	r1, [pc, #172]	; (8007738 <USB_DeactivateEndpoint+0x368>)
 800768a:	400a      	ands	r2, r1
 800768c:	801a      	strh	r2, [r3, #0]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	18d3      	adds	r3, r2, r3
 8007698:	183a      	adds	r2, r7, r0
 800769a:	8812      	ldrh	r2, [r2, #0]
 800769c:	4927      	ldr	r1, [pc, #156]	; (800773c <USB_DeactivateEndpoint+0x36c>)
 800769e:	430a      	orrs	r2, r1
 80076a0:	b292      	uxth	r2, r2
 80076a2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	18d3      	adds	r3, r2, r3
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	2026      	movs	r0, #38	; 0x26
 80076b4:	183b      	adds	r3, r7, r0
 80076b6:	4920      	ldr	r1, [pc, #128]	; (8007738 <USB_DeactivateEndpoint+0x368>)
 80076b8:	400a      	ands	r2, r1
 80076ba:	801a      	strh	r2, [r3, #0]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	18d3      	adds	r3, r2, r3
 80076c6:	183a      	adds	r2, r7, r0
 80076c8:	8812      	ldrh	r2, [r2, #0]
 80076ca:	491f      	ldr	r1, [pc, #124]	; (8007748 <USB_DeactivateEndpoint+0x378>)
 80076cc:	430a      	orrs	r2, r1
 80076ce:	b292      	uxth	r2, r2
 80076d0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	18d3      	adds	r3, r2, r3
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	2024      	movs	r0, #36	; 0x24
 80076e2:	183b      	adds	r3, r7, r0
 80076e4:	4916      	ldr	r1, [pc, #88]	; (8007740 <USB_DeactivateEndpoint+0x370>)
 80076e6:	400a      	ands	r2, r1
 80076e8:	801a      	strh	r2, [r3, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	18d3      	adds	r3, r2, r3
 80076f4:	183a      	adds	r2, r7, r0
 80076f6:	8812      	ldrh	r2, [r2, #0]
 80076f8:	4912      	ldr	r1, [pc, #72]	; (8007744 <USB_DeactivateEndpoint+0x374>)
 80076fa:	430a      	orrs	r2, r1
 80076fc:	b292      	uxth	r2, r2
 80076fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	18d3      	adds	r3, r2, r3
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29a      	uxth	r2, r3
 800770e:	2022      	movs	r0, #34	; 0x22
 8007710:	183b      	adds	r3, r7, r0
 8007712:	490e      	ldr	r1, [pc, #56]	; (800774c <USB_DeactivateEndpoint+0x37c>)
 8007714:	400a      	ands	r2, r1
 8007716:	801a      	strh	r2, [r3, #0]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	18d3      	adds	r3, r2, r3
 8007722:	183a      	adds	r2, r7, r0
 8007724:	8812      	ldrh	r2, [r2, #0]
 8007726:	4907      	ldr	r1, [pc, #28]	; (8007744 <USB_DeactivateEndpoint+0x374>)
 8007728:	430a      	orrs	r2, r1
 800772a:	b292      	uxth	r2, r2
 800772c:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	0018      	movs	r0, r3
 8007732:	46bd      	mov	sp, r7
 8007734:	b00c      	add	sp, #48	; 0x30
 8007736:	bd80      	pop	{r7, pc}
 8007738:	ffff8f8f 	.word	0xffff8f8f
 800773c:	ffff80c0 	.word	0xffff80c0
 8007740:	ffff8fbf 	.word	0xffff8fbf
 8007744:	ffff8080 	.word	0xffff8080
 8007748:	ffffc080 	.word	0xffffc080
 800774c:	ffffbf8f 	.word	0xffffbf8f

08007750 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007750:	b590      	push	{r4, r7, lr}
 8007752:	b0c3      	sub	sp, #268	; 0x10c
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d001      	beq.n	8007766 <USB_EPStartXfer+0x16>
 8007762:	f000 fcef 	bl	8008144 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	699a      	ldr	r2, [r3, #24]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	429a      	cmp	r2, r3
 8007770:	d905      	bls.n	800777e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	1d7a      	adds	r2, r7, #5
 8007778:	32ff      	adds	r2, #255	; 0xff
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	e004      	b.n	8007788 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	1d7a      	adds	r2, r7, #5
 8007784:	32ff      	adds	r2, #255	; 0xff
 8007786:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	7b1b      	ldrb	r3, [r3, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d125      	bne.n	80077dc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	6959      	ldr	r1, [r3, #20]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	88da      	ldrh	r2, [r3, #6]
 8007798:	1d7b      	adds	r3, r7, #5
 800779a:	33ff      	adds	r3, #255	; 0xff
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 f9c9 	bl	8008b38 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	613b      	str	r3, [r7, #16]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2250      	movs	r2, #80	; 0x50
 80077ae:	5a9b      	ldrh	r3, [r3, r2]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	001a      	movs	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	189b      	adds	r3, r3, r2
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	00da      	lsls	r2, r3, #3
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	18d3      	adds	r3, r2, r3
 80077c4:	4acc      	ldr	r2, [pc, #816]	; (8007af8 <USB_EPStartXfer+0x3a8>)
 80077c6:	4694      	mov	ip, r2
 80077c8:	4463      	add	r3, ip
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	1d7b      	adds	r3, r7, #5
 80077ce:	33ff      	adds	r3, #255	; 0xff
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	801a      	strh	r2, [r3, #0]
 80077d8:	f000 fc8f 	bl	80080fa <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	78db      	ldrb	r3, [r3, #3]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d000      	beq.n	80077e6 <USB_EPStartXfer+0x96>
 80077e4:	e33a      	b.n	8007e5c <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	6a1a      	ldr	r2, [r3, #32]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d800      	bhi.n	80077f4 <USB_EPStartXfer+0xa4>
 80077f2:	e2df      	b.n	8007db4 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	18d3      	adds	r3, r2, r3
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29a      	uxth	r2, r3
 8007802:	2056      	movs	r0, #86	; 0x56
 8007804:	183b      	adds	r3, r7, r0
 8007806:	49bd      	ldr	r1, [pc, #756]	; (8007afc <USB_EPStartXfer+0x3ac>)
 8007808:	400a      	ands	r2, r1
 800780a:	801a      	strh	r2, [r3, #0]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	18d3      	adds	r3, r2, r3
 8007816:	183a      	adds	r2, r7, r0
 8007818:	8812      	ldrh	r2, [r2, #0]
 800781a:	49b9      	ldr	r1, [pc, #740]	; (8007b00 <USB_EPStartXfer+0x3b0>)
 800781c:	430a      	orrs	r2, r1
 800781e:	b292      	uxth	r2, r2
 8007820:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	6a1a      	ldr	r2, [r3, #32]
 8007826:	1d7b      	adds	r3, r7, #5
 8007828:	33ff      	adds	r3, #255	; 0xff
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	1ad2      	subs	r2, r2, r3
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	18d3      	adds	r3, r2, r3
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	b29b      	uxth	r3, r3
 8007840:	001a      	movs	r2, r3
 8007842:	2340      	movs	r3, #64	; 0x40
 8007844:	4013      	ands	r3, r2
 8007846:	d100      	bne.n	800784a <USB_EPStartXfer+0xfa>
 8007848:	e162      	b.n	8007b10 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	633b      	str	r3, [r7, #48]	; 0x30
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	785b      	ldrb	r3, [r3, #1]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d16a      	bne.n	800792c <USB_EPStartXfer+0x1dc>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2250      	movs	r2, #80	; 0x50
 800785e:	5a9b      	ldrh	r3, [r3, r2]
 8007860:	b29b      	uxth	r3, r3
 8007862:	001a      	movs	r2, r3
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	189b      	adds	r3, r3, r2
 8007868:	62bb      	str	r3, [r7, #40]	; 0x28
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	00da      	lsls	r2, r3, #3
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	18d3      	adds	r3, r2, r3
 8007874:	4aa3      	ldr	r2, [pc, #652]	; (8007b04 <USB_EPStartXfer+0x3b4>)
 8007876:	4694      	mov	ip, r2
 8007878:	4463      	add	r3, ip
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
 800787c:	1d7b      	adds	r3, r7, #5
 800787e:	33ff      	adds	r3, #255	; 0xff
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d110      	bne.n	80078a8 <USB_EPStartXfer+0x158>
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	b29b      	uxth	r3, r3
 800788c:	4a9e      	ldr	r2, [pc, #632]	; (8007b08 <USB_EPStartXfer+0x3b8>)
 800788e:	4013      	ands	r3, r2
 8007890:	b29a      	uxth	r2, r3
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	801a      	strh	r2, [r3, #0]
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29b      	uxth	r3, r3
 800789c:	4a9b      	ldr	r2, [pc, #620]	; (8007b0c <USB_EPStartXfer+0x3bc>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	801a      	strh	r2, [r3, #0]
 80078a6:	e05c      	b.n	8007962 <USB_EPStartXfer+0x212>
 80078a8:	1d7b      	adds	r3, r7, #5
 80078aa:	33ff      	adds	r3, #255	; 0xff
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b3e      	cmp	r3, #62	; 0x3e
 80078b0:	d81c      	bhi.n	80078ec <USB_EPStartXfer+0x19c>
 80078b2:	1d7b      	adds	r3, r7, #5
 80078b4:	33ff      	adds	r3, #255	; 0xff
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	085b      	lsrs	r3, r3, #1
 80078ba:	1c7a      	adds	r2, r7, #1
 80078bc:	32ff      	adds	r2, #255	; 0xff
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	1d7b      	adds	r3, r7, #5
 80078c2:	33ff      	adds	r3, #255	; 0xff
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2201      	movs	r2, #1
 80078c8:	4013      	ands	r3, r2
 80078ca:	d006      	beq.n	80078da <USB_EPStartXfer+0x18a>
 80078cc:	1c7b      	adds	r3, r7, #1
 80078ce:	33ff      	adds	r3, #255	; 0xff
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	1c7a      	adds	r2, r7, #1
 80078d6:	32ff      	adds	r2, #255	; 0xff
 80078d8:	6013      	str	r3, [r2, #0]
 80078da:	1c7b      	adds	r3, r7, #1
 80078dc:	33ff      	adds	r3, #255	; 0xff
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	029b      	lsls	r3, r3, #10
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	801a      	strh	r2, [r3, #0]
 80078ea:	e03a      	b.n	8007962 <USB_EPStartXfer+0x212>
 80078ec:	1d7b      	adds	r3, r7, #5
 80078ee:	33ff      	adds	r3, #255	; 0xff
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	1c7a      	adds	r2, r7, #1
 80078f6:	32ff      	adds	r2, #255	; 0xff
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	1d7b      	adds	r3, r7, #5
 80078fc:	33ff      	adds	r3, #255	; 0xff
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	221f      	movs	r2, #31
 8007902:	4013      	ands	r3, r2
 8007904:	d106      	bne.n	8007914 <USB_EPStartXfer+0x1c4>
 8007906:	1c7b      	adds	r3, r7, #1
 8007908:	33ff      	adds	r3, #255	; 0xff
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3b01      	subs	r3, #1
 800790e:	1c7a      	adds	r2, r7, #1
 8007910:	32ff      	adds	r2, #255	; 0xff
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	1c7b      	adds	r3, r7, #1
 8007916:	33ff      	adds	r3, #255	; 0xff
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	b29b      	uxth	r3, r3
 8007920:	4a7a      	ldr	r2, [pc, #488]	; (8007b0c <USB_EPStartXfer+0x3bc>)
 8007922:	4313      	orrs	r3, r2
 8007924:	b29a      	uxth	r2, r3
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	801a      	strh	r2, [r3, #0]
 800792a:	e01a      	b.n	8007962 <USB_EPStartXfer+0x212>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	785b      	ldrb	r3, [r3, #1]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d116      	bne.n	8007962 <USB_EPStartXfer+0x212>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2250      	movs	r2, #80	; 0x50
 8007938:	5a9b      	ldrh	r3, [r3, r2]
 800793a:	b29b      	uxth	r3, r3
 800793c:	001a      	movs	r2, r3
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	189b      	adds	r3, r3, r2
 8007942:	633b      	str	r3, [r7, #48]	; 0x30
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	00da      	lsls	r2, r3, #3
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	18d3      	adds	r3, r2, r3
 800794e:	4a6d      	ldr	r2, [pc, #436]	; (8007b04 <USB_EPStartXfer+0x3b4>)
 8007950:	4694      	mov	ip, r2
 8007952:	4463      	add	r3, ip
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007956:	1d7b      	adds	r3, r7, #5
 8007958:	33ff      	adds	r3, #255	; 0xff
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	b29a      	uxth	r2, r3
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007962:	2076      	movs	r0, #118	; 0x76
 8007964:	183b      	adds	r3, r7, r0
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	8952      	ldrh	r2, [r2, #10]
 800796a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	6959      	ldr	r1, [r3, #20]
 8007970:	1d7b      	adds	r3, r7, #5
 8007972:	33ff      	adds	r3, #255	; 0xff
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	b29c      	uxth	r4, r3
 8007978:	183b      	adds	r3, r7, r0
 800797a:	881a      	ldrh	r2, [r3, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	0023      	movs	r3, r4
 8007980:	f001 f8da 	bl	8008b38 <USB_WritePMA>
            ep->xfer_buff += len;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	695a      	ldr	r2, [r3, #20]
 8007988:	1d7b      	adds	r3, r7, #5
 800798a:	33ff      	adds	r3, #255	; 0xff
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	18d2      	adds	r2, r2, r3
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	6a1a      	ldr	r2, [r3, #32]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	429a      	cmp	r2, r3
 800799e:	d908      	bls.n	80079b2 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	6a1a      	ldr	r2, [r3, #32]
 80079a4:	1d7b      	adds	r3, r7, #5
 80079a6:	33ff      	adds	r3, #255	; 0xff
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	1ad2      	subs	r2, r2, r3
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	621a      	str	r2, [r3, #32]
 80079b0:	e007      	b.n	80079c2 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	1d7a      	adds	r2, r7, #5
 80079b8:	32ff      	adds	r2, #255	; 0xff
 80079ba:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2200      	movs	r2, #0
 80079c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d166      	bne.n	8007a98 <USB_EPStartXfer+0x348>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	61bb      	str	r3, [r7, #24]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2250      	movs	r2, #80	; 0x50
 80079d2:	5a9b      	ldrh	r3, [r3, r2]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	001a      	movs	r2, r3
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	189b      	adds	r3, r3, r2
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	00da      	lsls	r2, r3, #3
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	18d3      	adds	r3, r2, r3
 80079e8:	4a43      	ldr	r2, [pc, #268]	; (8007af8 <USB_EPStartXfer+0x3a8>)
 80079ea:	4694      	mov	ip, r2
 80079ec:	4463      	add	r3, ip
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	1d7b      	adds	r3, r7, #5
 80079f2:	33ff      	adds	r3, #255	; 0xff
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d110      	bne.n	8007a1c <USB_EPStartXfer+0x2cc>
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	4a41      	ldr	r2, [pc, #260]	; (8007b08 <USB_EPStartXfer+0x3b8>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	4a3e      	ldr	r2, [pc, #248]	; (8007b0c <USB_EPStartXfer+0x3bc>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e05a      	b.n	8007ad2 <USB_EPStartXfer+0x382>
 8007a1c:	1d7b      	adds	r3, r7, #5
 8007a1e:	33ff      	adds	r3, #255	; 0xff
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b3e      	cmp	r3, #62	; 0x3e
 8007a24:	d81a      	bhi.n	8007a5c <USB_EPStartXfer+0x30c>
 8007a26:	1d7b      	adds	r3, r7, #5
 8007a28:	33ff      	adds	r3, #255	; 0xff
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	085b      	lsrs	r3, r3, #1
 8007a2e:	21fc      	movs	r1, #252	; 0xfc
 8007a30:	187a      	adds	r2, r7, r1
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	1d7b      	adds	r3, r7, #5
 8007a36:	33ff      	adds	r3, #255	; 0xff
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	d004      	beq.n	8007a4a <USB_EPStartXfer+0x2fa>
 8007a40:	187b      	adds	r3, r7, r1
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	187a      	adds	r2, r7, r1
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	23fc      	movs	r3, #252	; 0xfc
 8007a4c:	18fb      	adds	r3, r7, r3
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	029b      	lsls	r3, r3, #10
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	801a      	strh	r2, [r3, #0]
 8007a5a:	e03a      	b.n	8007ad2 <USB_EPStartXfer+0x382>
 8007a5c:	1d7b      	adds	r3, r7, #5
 8007a5e:	33ff      	adds	r3, #255	; 0xff
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	095b      	lsrs	r3, r3, #5
 8007a64:	21fc      	movs	r1, #252	; 0xfc
 8007a66:	187a      	adds	r2, r7, r1
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	1d7b      	adds	r3, r7, #5
 8007a6c:	33ff      	adds	r3, #255	; 0xff
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	221f      	movs	r2, #31
 8007a72:	4013      	ands	r3, r2
 8007a74:	d104      	bne.n	8007a80 <USB_EPStartXfer+0x330>
 8007a76:	187b      	adds	r3, r7, r1
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	187a      	adds	r2, r7, r1
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	23fc      	movs	r3, #252	; 0xfc
 8007a82:	18fb      	adds	r3, r7, r3
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	029b      	lsls	r3, r3, #10
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	4a1f      	ldr	r2, [pc, #124]	; (8007b0c <USB_EPStartXfer+0x3bc>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	801a      	strh	r2, [r3, #0]
 8007a96:	e01c      	b.n	8007ad2 <USB_EPStartXfer+0x382>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	785b      	ldrb	r3, [r3, #1]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d118      	bne.n	8007ad2 <USB_EPStartXfer+0x382>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	623b      	str	r3, [r7, #32]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2250      	movs	r2, #80	; 0x50
 8007aa8:	5a9b      	ldrh	r3, [r3, r2]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	001a      	movs	r2, r3
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	189b      	adds	r3, r3, r2
 8007ab2:	623b      	str	r3, [r7, #32]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	00da      	lsls	r2, r3, #3
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	18d3      	adds	r3, r2, r3
 8007abe:	4a0e      	ldr	r2, [pc, #56]	; (8007af8 <USB_EPStartXfer+0x3a8>)
 8007ac0:	4694      	mov	ip, r2
 8007ac2:	4463      	add	r3, ip
 8007ac4:	61fb      	str	r3, [r7, #28]
 8007ac6:	1d7b      	adds	r3, r7, #5
 8007ac8:	33ff      	adds	r3, #255	; 0xff
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ad2:	2076      	movs	r0, #118	; 0x76
 8007ad4:	183b      	adds	r3, r7, r0
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	8912      	ldrh	r2, [r2, #8]
 8007ada:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	6959      	ldr	r1, [r3, #20]
 8007ae0:	1d7b      	adds	r3, r7, #5
 8007ae2:	33ff      	adds	r3, #255	; 0xff
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	b29c      	uxth	r4, r3
 8007ae8:	183b      	adds	r3, r7, r0
 8007aea:	881a      	ldrh	r2, [r3, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	0023      	movs	r3, r4
 8007af0:	f001 f822 	bl	8008b38 <USB_WritePMA>
 8007af4:	e301      	b.n	80080fa <USB_EPStartXfer+0x9aa>
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	00000402 	.word	0x00000402
 8007afc:	ffff8f8f 	.word	0xffff8f8f
 8007b00:	ffff8180 	.word	0xffff8180
 8007b04:	00000406 	.word	0x00000406
 8007b08:	ffff83ff 	.word	0xffff83ff
 8007b0c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d166      	bne.n	8007be6 <USB_EPStartXfer+0x496>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2250      	movs	r2, #80	; 0x50
 8007b20:	5a9b      	ldrh	r3, [r3, r2]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	001a      	movs	r2, r3
 8007b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b28:	189b      	adds	r3, r3, r2
 8007b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	00da      	lsls	r2, r3, #3
 8007b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b34:	18d3      	adds	r3, r2, r3
 8007b36:	4ac3      	ldr	r2, [pc, #780]	; (8007e44 <USB_EPStartXfer+0x6f4>)
 8007b38:	4694      	mov	ip, r2
 8007b3a:	4463      	add	r3, ip
 8007b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b3e:	1d7b      	adds	r3, r7, #5
 8007b40:	33ff      	adds	r3, #255	; 0xff
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d110      	bne.n	8007b6a <USB_EPStartXfer+0x41a>
 8007b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4abe      	ldr	r2, [pc, #760]	; (8007e48 <USB_EPStartXfer+0x6f8>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b56:	801a      	strh	r2, [r3, #0]
 8007b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	4abb      	ldr	r2, [pc, #748]	; (8007e4c <USB_EPStartXfer+0x6fc>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b66:	801a      	strh	r2, [r3, #0]
 8007b68:	e05a      	b.n	8007c20 <USB_EPStartXfer+0x4d0>
 8007b6a:	1d7b      	adds	r3, r7, #5
 8007b6c:	33ff      	adds	r3, #255	; 0xff
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b3e      	cmp	r3, #62	; 0x3e
 8007b72:	d81a      	bhi.n	8007baa <USB_EPStartXfer+0x45a>
 8007b74:	1d7b      	adds	r3, r7, #5
 8007b76:	33ff      	adds	r3, #255	; 0xff
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	21f8      	movs	r1, #248	; 0xf8
 8007b7e:	187a      	adds	r2, r7, r1
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	1d7b      	adds	r3, r7, #5
 8007b84:	33ff      	adds	r3, #255	; 0xff
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	d004      	beq.n	8007b98 <USB_EPStartXfer+0x448>
 8007b8e:	187b      	adds	r3, r7, r1
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	187a      	adds	r2, r7, r1
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	23f8      	movs	r3, #248	; 0xf8
 8007b9a:	18fb      	adds	r3, r7, r3
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	029b      	lsls	r3, r3, #10
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	e03a      	b.n	8007c20 <USB_EPStartXfer+0x4d0>
 8007baa:	1d7b      	adds	r3, r7, #5
 8007bac:	33ff      	adds	r3, #255	; 0xff
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	095b      	lsrs	r3, r3, #5
 8007bb2:	21f8      	movs	r1, #248	; 0xf8
 8007bb4:	187a      	adds	r2, r7, r1
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	1d7b      	adds	r3, r7, #5
 8007bba:	33ff      	adds	r3, #255	; 0xff
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	221f      	movs	r2, #31
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	d104      	bne.n	8007bce <USB_EPStartXfer+0x47e>
 8007bc4:	187b      	adds	r3, r7, r1
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	187a      	adds	r2, r7, r1
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	23f8      	movs	r3, #248	; 0xf8
 8007bd0:	18fb      	adds	r3, r7, r3
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	029b      	lsls	r3, r3, #10
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	4a9c      	ldr	r2, [pc, #624]	; (8007e4c <USB_EPStartXfer+0x6fc>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be2:	801a      	strh	r2, [r3, #0]
 8007be4:	e01c      	b.n	8007c20 <USB_EPStartXfer+0x4d0>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d118      	bne.n	8007c20 <USB_EPStartXfer+0x4d0>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2250      	movs	r2, #80	; 0x50
 8007bf6:	5a9b      	ldrh	r3, [r3, r2]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	001a      	movs	r2, r3
 8007bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfe:	189b      	adds	r3, r3, r2
 8007c00:	653b      	str	r3, [r7, #80]	; 0x50
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	00da      	lsls	r2, r3, #3
 8007c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c0a:	18d3      	adds	r3, r2, r3
 8007c0c:	4a8d      	ldr	r2, [pc, #564]	; (8007e44 <USB_EPStartXfer+0x6f4>)
 8007c0e:	4694      	mov	ip, r2
 8007c10:	4463      	add	r3, ip
 8007c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c14:	1d7b      	adds	r3, r7, #5
 8007c16:	33ff      	adds	r3, #255	; 0xff
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007c20:	2076      	movs	r0, #118	; 0x76
 8007c22:	183b      	adds	r3, r7, r0
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	8912      	ldrh	r2, [r2, #8]
 8007c28:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6959      	ldr	r1, [r3, #20]
 8007c2e:	1d7b      	adds	r3, r7, #5
 8007c30:	33ff      	adds	r3, #255	; 0xff
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	b29c      	uxth	r4, r3
 8007c36:	183b      	adds	r3, r7, r0
 8007c38:	881a      	ldrh	r2, [r3, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	0023      	movs	r3, r4
 8007c3e:	f000 ff7b 	bl	8008b38 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	695a      	ldr	r2, [r3, #20]
 8007c46:	1d7b      	adds	r3, r7, #5
 8007c48:	33ff      	adds	r3, #255	; 0xff
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	18d2      	adds	r2, r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	6a1a      	ldr	r2, [r3, #32]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d908      	bls.n	8007c70 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	6a1a      	ldr	r2, [r3, #32]
 8007c62:	1d7b      	adds	r3, r7, #5
 8007c64:	33ff      	adds	r3, #255	; 0xff
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	1ad2      	subs	r2, r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	621a      	str	r2, [r3, #32]
 8007c6e:	e007      	b.n	8007c80 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	1d7a      	adds	r2, r7, #5
 8007c76:	32ff      	adds	r2, #255	; 0xff
 8007c78:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	643b      	str	r3, [r7, #64]	; 0x40
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	785b      	ldrb	r3, [r3, #1]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d166      	bne.n	8007d5a <USB_EPStartXfer+0x60a>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2250      	movs	r2, #80	; 0x50
 8007c94:	5a9b      	ldrh	r3, [r3, r2]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	001a      	movs	r2, r3
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9c:	189b      	adds	r3, r3, r2
 8007c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	00da      	lsls	r2, r3, #3
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	18d3      	adds	r3, r2, r3
 8007caa:	4a69      	ldr	r2, [pc, #420]	; (8007e50 <USB_EPStartXfer+0x700>)
 8007cac:	4694      	mov	ip, r2
 8007cae:	4463      	add	r3, ip
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb2:	1d7b      	adds	r3, r7, #5
 8007cb4:	33ff      	adds	r3, #255	; 0xff
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d110      	bne.n	8007cde <USB_EPStartXfer+0x58e>
 8007cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	4a61      	ldr	r2, [pc, #388]	; (8007e48 <USB_EPStartXfer+0x6f8>)
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cca:	801a      	strh	r2, [r3, #0]
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	4a5e      	ldr	r2, [pc, #376]	; (8007e4c <USB_EPStartXfer+0x6fc>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cda:	801a      	strh	r2, [r3, #0]
 8007cdc:	e058      	b.n	8007d90 <USB_EPStartXfer+0x640>
 8007cde:	1d7b      	adds	r3, r7, #5
 8007ce0:	33ff      	adds	r3, #255	; 0xff
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ce6:	d81a      	bhi.n	8007d1e <USB_EPStartXfer+0x5ce>
 8007ce8:	1d7b      	adds	r3, r7, #5
 8007cea:	33ff      	adds	r3, #255	; 0xff
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	085b      	lsrs	r3, r3, #1
 8007cf0:	21f4      	movs	r1, #244	; 0xf4
 8007cf2:	187a      	adds	r2, r7, r1
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	1d7b      	adds	r3, r7, #5
 8007cf8:	33ff      	adds	r3, #255	; 0xff
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	4013      	ands	r3, r2
 8007d00:	d004      	beq.n	8007d0c <USB_EPStartXfer+0x5bc>
 8007d02:	187b      	adds	r3, r7, r1
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3301      	adds	r3, #1
 8007d08:	187a      	adds	r2, r7, r1
 8007d0a:	6013      	str	r3, [r2, #0]
 8007d0c:	23f4      	movs	r3, #244	; 0xf4
 8007d0e:	18fb      	adds	r3, r7, r3
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	029b      	lsls	r3, r3, #10
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1a:	801a      	strh	r2, [r3, #0]
 8007d1c:	e038      	b.n	8007d90 <USB_EPStartXfer+0x640>
 8007d1e:	1d7b      	adds	r3, r7, #5
 8007d20:	33ff      	adds	r3, #255	; 0xff
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	21f4      	movs	r1, #244	; 0xf4
 8007d28:	187a      	adds	r2, r7, r1
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	1d7b      	adds	r3, r7, #5
 8007d2e:	33ff      	adds	r3, #255	; 0xff
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	221f      	movs	r2, #31
 8007d34:	4013      	ands	r3, r2
 8007d36:	d104      	bne.n	8007d42 <USB_EPStartXfer+0x5f2>
 8007d38:	187b      	adds	r3, r7, r1
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	187a      	adds	r2, r7, r1
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	23f4      	movs	r3, #244	; 0xf4
 8007d44:	18fb      	adds	r3, r7, r3
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	029b      	lsls	r3, r3, #10
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	4a3f      	ldr	r2, [pc, #252]	; (8007e4c <USB_EPStartXfer+0x6fc>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	e01a      	b.n	8007d90 <USB_EPStartXfer+0x640>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	785b      	ldrb	r3, [r3, #1]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d116      	bne.n	8007d90 <USB_EPStartXfer+0x640>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2250      	movs	r2, #80	; 0x50
 8007d66:	5a9b      	ldrh	r3, [r3, r2]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	001a      	movs	r2, r3
 8007d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d6e:	189b      	adds	r3, r3, r2
 8007d70:	643b      	str	r3, [r7, #64]	; 0x40
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	00da      	lsls	r2, r3, #3
 8007d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7a:	18d3      	adds	r3, r2, r3
 8007d7c:	4a34      	ldr	r2, [pc, #208]	; (8007e50 <USB_EPStartXfer+0x700>)
 8007d7e:	4694      	mov	ip, r2
 8007d80:	4463      	add	r3, ip
 8007d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d84:	1d7b      	adds	r3, r7, #5
 8007d86:	33ff      	adds	r3, #255	; 0xff
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d90:	2076      	movs	r0, #118	; 0x76
 8007d92:	183b      	adds	r3, r7, r0
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	8952      	ldrh	r2, [r2, #10]
 8007d98:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	6959      	ldr	r1, [r3, #20]
 8007d9e:	1d7b      	adds	r3, r7, #5
 8007da0:	33ff      	adds	r3, #255	; 0xff
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	b29c      	uxth	r4, r3
 8007da6:	183b      	adds	r3, r7, r0
 8007da8:	881a      	ldrh	r2, [r3, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	0023      	movs	r3, r4
 8007dae:	f000 fec3 	bl	8008b38 <USB_WritePMA>
 8007db2:	e1a2      	b.n	80080fa <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	1d7a      	adds	r2, r7, #5
 8007dba:	32ff      	adds	r2, #255	; 0xff
 8007dbc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	18d3      	adds	r3, r2, r3
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	2062      	movs	r0, #98	; 0x62
 8007dce:	183b      	adds	r3, r7, r0
 8007dd0:	4920      	ldr	r1, [pc, #128]	; (8007e54 <USB_EPStartXfer+0x704>)
 8007dd2:	400a      	ands	r2, r1
 8007dd4:	801a      	strh	r2, [r3, #0]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	18d3      	adds	r3, r2, r3
 8007de0:	183a      	adds	r2, r7, r0
 8007de2:	8812      	ldrh	r2, [r2, #0]
 8007de4:	491c      	ldr	r1, [pc, #112]	; (8007e58 <USB_EPStartXfer+0x708>)
 8007de6:	430a      	orrs	r2, r1
 8007de8:	b292      	uxth	r2, r2
 8007dea:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2250      	movs	r2, #80	; 0x50
 8007df4:	5a9b      	ldrh	r3, [r3, r2]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	001a      	movs	r2, r3
 8007dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dfc:	189b      	adds	r3, r3, r2
 8007dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	00da      	lsls	r2, r3, #3
 8007e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e08:	18d3      	adds	r3, r2, r3
 8007e0a:	4a0e      	ldr	r2, [pc, #56]	; (8007e44 <USB_EPStartXfer+0x6f4>)
 8007e0c:	4694      	mov	ip, r2
 8007e0e:	4463      	add	r3, ip
 8007e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e12:	1d7b      	adds	r3, r7, #5
 8007e14:	33ff      	adds	r3, #255	; 0xff
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e1e:	2076      	movs	r0, #118	; 0x76
 8007e20:	183b      	adds	r3, r7, r0
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	8912      	ldrh	r2, [r2, #8]
 8007e26:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	6959      	ldr	r1, [r3, #20]
 8007e2c:	1d7b      	adds	r3, r7, #5
 8007e2e:	33ff      	adds	r3, #255	; 0xff
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	b29c      	uxth	r4, r3
 8007e34:	183b      	adds	r3, r7, r0
 8007e36:	881a      	ldrh	r2, [r3, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	0023      	movs	r3, r4
 8007e3c:	f000 fe7c 	bl	8008b38 <USB_WritePMA>
 8007e40:	e15b      	b.n	80080fa <USB_EPStartXfer+0x9aa>
 8007e42:	46c0      	nop			; (mov r8, r8)
 8007e44:	00000402 	.word	0x00000402
 8007e48:	ffff83ff 	.word	0xffff83ff
 8007e4c:	ffff8000 	.word	0xffff8000
 8007e50:	00000406 	.word	0x00000406
 8007e54:	ffff8e8f 	.word	0xffff8e8f
 8007e58:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	6a1a      	ldr	r2, [r3, #32]
 8007e60:	1d7b      	adds	r3, r7, #5
 8007e62:	33ff      	adds	r3, #255	; 0xff
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	1ad2      	subs	r2, r2, r3
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	18d3      	adds	r3, r2, r3
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	001a      	movs	r2, r3
 8007e7c:	2340      	movs	r3, #64	; 0x40
 8007e7e:	4013      	ands	r3, r2
 8007e80:	d100      	bne.n	8007e84 <USB_EPStartXfer+0x734>
 8007e82:	e099      	b.n	8007fb8 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	673b      	str	r3, [r7, #112]	; 0x70
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	785b      	ldrb	r3, [r3, #1]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d166      	bne.n	8007f5e <USB_EPStartXfer+0x80e>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2250      	movs	r2, #80	; 0x50
 8007e98:	5a9b      	ldrh	r3, [r3, r2]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	001a      	movs	r2, r3
 8007e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ea0:	189b      	adds	r3, r3, r2
 8007ea2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	00da      	lsls	r2, r3, #3
 8007eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007eac:	18d3      	adds	r3, r2, r3
 8007eae:	4ad0      	ldr	r2, [pc, #832]	; (80081f0 <USB_EPStartXfer+0xaa0>)
 8007eb0:	4694      	mov	ip, r2
 8007eb2:	4463      	add	r3, ip
 8007eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8007eb6:	1d7b      	adds	r3, r7, #5
 8007eb8:	33ff      	adds	r3, #255	; 0xff
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d110      	bne.n	8007ee2 <USB_EPStartXfer+0x792>
 8007ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	4acb      	ldr	r2, [pc, #812]	; (80081f4 <USB_EPStartXfer+0xaa4>)
 8007ec8:	4013      	ands	r3, r2
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	4ac8      	ldr	r2, [pc, #800]	; (80081f8 <USB_EPStartXfer+0xaa8>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ede:	801a      	strh	r2, [r3, #0]
 8007ee0:	e058      	b.n	8007f94 <USB_EPStartXfer+0x844>
 8007ee2:	1d7b      	adds	r3, r7, #5
 8007ee4:	33ff      	adds	r3, #255	; 0xff
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b3e      	cmp	r3, #62	; 0x3e
 8007eea:	d81a      	bhi.n	8007f22 <USB_EPStartXfer+0x7d2>
 8007eec:	1d7b      	adds	r3, r7, #5
 8007eee:	33ff      	adds	r3, #255	; 0xff
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	21f0      	movs	r1, #240	; 0xf0
 8007ef6:	187a      	adds	r2, r7, r1
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	1d7b      	adds	r3, r7, #5
 8007efc:	33ff      	adds	r3, #255	; 0xff
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2201      	movs	r2, #1
 8007f02:	4013      	ands	r3, r2
 8007f04:	d004      	beq.n	8007f10 <USB_EPStartXfer+0x7c0>
 8007f06:	187b      	adds	r3, r7, r1
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	187a      	adds	r2, r7, r1
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	23f0      	movs	r3, #240	; 0xf0
 8007f12:	18fb      	adds	r3, r7, r3
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	029b      	lsls	r3, r3, #10
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	e038      	b.n	8007f94 <USB_EPStartXfer+0x844>
 8007f22:	1d7b      	adds	r3, r7, #5
 8007f24:	33ff      	adds	r3, #255	; 0xff
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	095b      	lsrs	r3, r3, #5
 8007f2a:	21f0      	movs	r1, #240	; 0xf0
 8007f2c:	187a      	adds	r2, r7, r1
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	1d7b      	adds	r3, r7, #5
 8007f32:	33ff      	adds	r3, #255	; 0xff
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	221f      	movs	r2, #31
 8007f38:	4013      	ands	r3, r2
 8007f3a:	d104      	bne.n	8007f46 <USB_EPStartXfer+0x7f6>
 8007f3c:	187b      	adds	r3, r7, r1
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	187a      	adds	r2, r7, r1
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	23f0      	movs	r3, #240	; 0xf0
 8007f48:	18fb      	adds	r3, r7, r3
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	029b      	lsls	r3, r3, #10
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	4aa9      	ldr	r2, [pc, #676]	; (80081f8 <USB_EPStartXfer+0xaa8>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f5a:	801a      	strh	r2, [r3, #0]
 8007f5c:	e01a      	b.n	8007f94 <USB_EPStartXfer+0x844>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d116      	bne.n	8007f94 <USB_EPStartXfer+0x844>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2250      	movs	r2, #80	; 0x50
 8007f6a:	5a9b      	ldrh	r3, [r3, r2]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	001a      	movs	r2, r3
 8007f70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f72:	189b      	adds	r3, r3, r2
 8007f74:	673b      	str	r3, [r7, #112]	; 0x70
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	00da      	lsls	r2, r3, #3
 8007f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f7e:	18d3      	adds	r3, r2, r3
 8007f80:	4a9b      	ldr	r2, [pc, #620]	; (80081f0 <USB_EPStartXfer+0xaa0>)
 8007f82:	4694      	mov	ip, r2
 8007f84:	4463      	add	r3, ip
 8007f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f88:	1d7b      	adds	r3, r7, #5
 8007f8a:	33ff      	adds	r3, #255	; 0xff
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f94:	2076      	movs	r0, #118	; 0x76
 8007f96:	183b      	adds	r3, r7, r0
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	8952      	ldrh	r2, [r2, #10]
 8007f9c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6959      	ldr	r1, [r3, #20]
 8007fa2:	1d7b      	adds	r3, r7, #5
 8007fa4:	33ff      	adds	r3, #255	; 0xff
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	b29c      	uxth	r4, r3
 8007faa:	183b      	adds	r3, r7, r0
 8007fac:	881a      	ldrh	r2, [r3, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	0023      	movs	r3, r4
 8007fb2:	f000 fdc1 	bl	8008b38 <USB_WritePMA>
 8007fb6:	e0a0      	b.n	80080fa <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	785b      	ldrb	r3, [r3, #1]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d166      	bne.n	800808e <USB_EPStartXfer+0x93e>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2250      	movs	r2, #80	; 0x50
 8007fc8:	5a9b      	ldrh	r3, [r3, r2]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	001a      	movs	r2, r3
 8007fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fd0:	189b      	adds	r3, r3, r2
 8007fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	00da      	lsls	r2, r3, #3
 8007fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fdc:	18d3      	adds	r3, r2, r3
 8007fde:	4a87      	ldr	r2, [pc, #540]	; (80081fc <USB_EPStartXfer+0xaac>)
 8007fe0:	4694      	mov	ip, r2
 8007fe2:	4463      	add	r3, ip
 8007fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fe6:	1d7b      	adds	r3, r7, #5
 8007fe8:	33ff      	adds	r3, #255	; 0xff
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d110      	bne.n	8008012 <USB_EPStartXfer+0x8c2>
 8007ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	4a7f      	ldr	r2, [pc, #508]	; (80081f4 <USB_EPStartXfer+0xaa4>)
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ffe:	801a      	strh	r2, [r3, #0]
 8008000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	4a7c      	ldr	r2, [pc, #496]	; (80081f8 <USB_EPStartXfer+0xaa8>)
 8008008:	4313      	orrs	r3, r2
 800800a:	b29a      	uxth	r2, r3
 800800c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800800e:	801a      	strh	r2, [r3, #0]
 8008010:	e062      	b.n	80080d8 <USB_EPStartXfer+0x988>
 8008012:	1d7b      	adds	r3, r7, #5
 8008014:	33ff      	adds	r3, #255	; 0xff
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b3e      	cmp	r3, #62	; 0x3e
 800801a:	d81a      	bhi.n	8008052 <USB_EPStartXfer+0x902>
 800801c:	1d7b      	adds	r3, r7, #5
 800801e:	33ff      	adds	r3, #255	; 0xff
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	21ec      	movs	r1, #236	; 0xec
 8008026:	187a      	adds	r2, r7, r1
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	1d7b      	adds	r3, r7, #5
 800802c:	33ff      	adds	r3, #255	; 0xff
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2201      	movs	r2, #1
 8008032:	4013      	ands	r3, r2
 8008034:	d004      	beq.n	8008040 <USB_EPStartXfer+0x8f0>
 8008036:	187b      	adds	r3, r7, r1
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3301      	adds	r3, #1
 800803c:	187a      	adds	r2, r7, r1
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	23ec      	movs	r3, #236	; 0xec
 8008042:	18fb      	adds	r3, r7, r3
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	b29b      	uxth	r3, r3
 8008048:	029b      	lsls	r3, r3, #10
 800804a:	b29a      	uxth	r2, r3
 800804c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800804e:	801a      	strh	r2, [r3, #0]
 8008050:	e042      	b.n	80080d8 <USB_EPStartXfer+0x988>
 8008052:	1d7b      	adds	r3, r7, #5
 8008054:	33ff      	adds	r3, #255	; 0xff
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	095b      	lsrs	r3, r3, #5
 800805a:	21ec      	movs	r1, #236	; 0xec
 800805c:	187a      	adds	r2, r7, r1
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	1d7b      	adds	r3, r7, #5
 8008062:	33ff      	adds	r3, #255	; 0xff
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	221f      	movs	r2, #31
 8008068:	4013      	ands	r3, r2
 800806a:	d104      	bne.n	8008076 <USB_EPStartXfer+0x926>
 800806c:	187b      	adds	r3, r7, r1
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3b01      	subs	r3, #1
 8008072:	187a      	adds	r2, r7, r1
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	23ec      	movs	r3, #236	; 0xec
 8008078:	18fb      	adds	r3, r7, r3
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	b29b      	uxth	r3, r3
 800807e:	029b      	lsls	r3, r3, #10
 8008080:	b29b      	uxth	r3, r3
 8008082:	4a5d      	ldr	r2, [pc, #372]	; (80081f8 <USB_EPStartXfer+0xaa8>)
 8008084:	4313      	orrs	r3, r2
 8008086:	b29a      	uxth	r2, r3
 8008088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800808a:	801a      	strh	r2, [r3, #0]
 800808c:	e024      	b.n	80080d8 <USB_EPStartXfer+0x988>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	785b      	ldrb	r3, [r3, #1]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d120      	bne.n	80080d8 <USB_EPStartXfer+0x988>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2184      	movs	r1, #132	; 0x84
 800809a:	187a      	adds	r2, r7, r1
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2250      	movs	r2, #80	; 0x50
 80080a2:	5a9b      	ldrh	r3, [r3, r2]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	001a      	movs	r2, r3
 80080a8:	187b      	adds	r3, r7, r1
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	189b      	adds	r3, r3, r2
 80080ae:	187a      	adds	r2, r7, r1
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	00da      	lsls	r2, r3, #3
 80080b8:	187b      	adds	r3, r7, r1
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	18d3      	adds	r3, r2, r3
 80080be:	4a4f      	ldr	r2, [pc, #316]	; (80081fc <USB_EPStartXfer+0xaac>)
 80080c0:	4694      	mov	ip, r2
 80080c2:	4463      	add	r3, ip
 80080c4:	2180      	movs	r1, #128	; 0x80
 80080c6:	187a      	adds	r2, r7, r1
 80080c8:	6013      	str	r3, [r2, #0]
 80080ca:	1d7b      	adds	r3, r7, #5
 80080cc:	33ff      	adds	r3, #255	; 0xff
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	187b      	adds	r3, r7, r1
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080d8:	2076      	movs	r0, #118	; 0x76
 80080da:	183b      	adds	r3, r7, r0
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	8912      	ldrh	r2, [r2, #8]
 80080e0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	6959      	ldr	r1, [r3, #20]
 80080e6:	1d7b      	adds	r3, r7, #5
 80080e8:	33ff      	adds	r3, #255	; 0xff
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	b29c      	uxth	r4, r3
 80080ee:	183b      	adds	r3, r7, r0
 80080f0:	881a      	ldrh	r2, [r3, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	0023      	movs	r3, r4
 80080f6:	f000 fd1f 	bl	8008b38 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	18d3      	adds	r3, r2, r3
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	b29a      	uxth	r2, r3
 8008108:	200a      	movs	r0, #10
 800810a:	183b      	adds	r3, r7, r0
 800810c:	493c      	ldr	r1, [pc, #240]	; (8008200 <USB_EPStartXfer+0xab0>)
 800810e:	400a      	ands	r2, r1
 8008110:	801a      	strh	r2, [r3, #0]
 8008112:	183b      	adds	r3, r7, r0
 8008114:	183a      	adds	r2, r7, r0
 8008116:	8812      	ldrh	r2, [r2, #0]
 8008118:	2110      	movs	r1, #16
 800811a:	404a      	eors	r2, r1
 800811c:	801a      	strh	r2, [r3, #0]
 800811e:	183b      	adds	r3, r7, r0
 8008120:	183a      	adds	r2, r7, r0
 8008122:	8812      	ldrh	r2, [r2, #0]
 8008124:	2120      	movs	r1, #32
 8008126:	404a      	eors	r2, r1
 8008128:	801a      	strh	r2, [r3, #0]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	18d3      	adds	r3, r2, r3
 8008134:	183a      	adds	r2, r7, r0
 8008136:	8812      	ldrh	r2, [r2, #0]
 8008138:	4932      	ldr	r1, [pc, #200]	; (8008204 <USB_EPStartXfer+0xab4>)
 800813a:	430a      	orrs	r2, r1
 800813c:	b292      	uxth	r2, r2
 800813e:	801a      	strh	r2, [r3, #0]
 8008140:	f000 fbaf 	bl	80088a2 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	7b1b      	ldrb	r3, [r3, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d000      	beq.n	800814e <USB_EPStartXfer+0x9fe>
 800814c:	e09e      	b.n	800828c <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	429a      	cmp	r2, r3
 8008158:	d90d      	bls.n	8008176 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	1d7a      	adds	r2, r7, #5
 8008160:	32ff      	adds	r2, #255	; 0xff
 8008162:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	699a      	ldr	r2, [r3, #24]
 8008168:	1d7b      	adds	r3, r7, #5
 800816a:	33ff      	adds	r3, #255	; 0xff
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	1ad2      	subs	r2, r2, r3
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	619a      	str	r2, [r3, #24]
 8008174:	e007      	b.n	8008186 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	1d7a      	adds	r2, r7, #5
 800817c:	32ff      	adds	r2, #255	; 0xff
 800817e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2200      	movs	r2, #0
 8008184:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2190      	movs	r1, #144	; 0x90
 800818a:	187a      	adds	r2, r7, r1
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2250      	movs	r2, #80	; 0x50
 8008192:	5a9b      	ldrh	r3, [r3, r2]
 8008194:	b29b      	uxth	r3, r3
 8008196:	001a      	movs	r2, r3
 8008198:	187b      	adds	r3, r7, r1
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	189b      	adds	r3, r3, r2
 800819e:	187a      	adds	r2, r7, r1
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	00da      	lsls	r2, r3, #3
 80081a8:	187b      	adds	r3, r7, r1
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	18d3      	adds	r3, r2, r3
 80081ae:	4a10      	ldr	r2, [pc, #64]	; (80081f0 <USB_EPStartXfer+0xaa0>)
 80081b0:	4694      	mov	ip, r2
 80081b2:	4463      	add	r3, ip
 80081b4:	218c      	movs	r1, #140	; 0x8c
 80081b6:	187a      	adds	r2, r7, r1
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	1d7b      	adds	r3, r7, #5
 80081bc:	33ff      	adds	r3, #255	; 0xff
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d121      	bne.n	8008208 <USB_EPStartXfer+0xab8>
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	4a09      	ldr	r2, [pc, #36]	; (80081f4 <USB_EPStartXfer+0xaa4>)
 80081ce:	4013      	ands	r3, r2
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	187b      	adds	r3, r7, r1
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	801a      	strh	r2, [r3, #0]
 80081d8:	187b      	adds	r3, r7, r1
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	4a05      	ldr	r2, [pc, #20]	; (80081f8 <USB_EPStartXfer+0xaa8>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	187b      	adds	r3, r7, r1
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	801a      	strh	r2, [r3, #0]
 80081ec:	e334      	b.n	8008858 <USB_EPStartXfer+0x1108>
 80081ee:	46c0      	nop			; (mov r8, r8)
 80081f0:	00000406 	.word	0x00000406
 80081f4:	ffff83ff 	.word	0xffff83ff
 80081f8:	ffff8000 	.word	0xffff8000
 80081fc:	00000402 	.word	0x00000402
 8008200:	ffff8fbf 	.word	0xffff8fbf
 8008204:	ffff8080 	.word	0xffff8080
 8008208:	1d7b      	adds	r3, r7, #5
 800820a:	33ff      	adds	r3, #255	; 0xff
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b3e      	cmp	r3, #62	; 0x3e
 8008210:	d81c      	bhi.n	800824c <USB_EPStartXfer+0xafc>
 8008212:	1d7b      	adds	r3, r7, #5
 8008214:	33ff      	adds	r3, #255	; 0xff
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	085b      	lsrs	r3, r3, #1
 800821a:	21e8      	movs	r1, #232	; 0xe8
 800821c:	187a      	adds	r2, r7, r1
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	1d7b      	adds	r3, r7, #5
 8008222:	33ff      	adds	r3, #255	; 0xff
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2201      	movs	r2, #1
 8008228:	4013      	ands	r3, r2
 800822a:	d004      	beq.n	8008236 <USB_EPStartXfer+0xae6>
 800822c:	187b      	adds	r3, r7, r1
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3301      	adds	r3, #1
 8008232:	187a      	adds	r2, r7, r1
 8008234:	6013      	str	r3, [r2, #0]
 8008236:	23e8      	movs	r3, #232	; 0xe8
 8008238:	18fb      	adds	r3, r7, r3
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	029b      	lsls	r3, r3, #10
 8008240:	b29a      	uxth	r2, r3
 8008242:	238c      	movs	r3, #140	; 0x8c
 8008244:	18fb      	adds	r3, r7, r3
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	801a      	strh	r2, [r3, #0]
 800824a:	e305      	b.n	8008858 <USB_EPStartXfer+0x1108>
 800824c:	1d7b      	adds	r3, r7, #5
 800824e:	33ff      	adds	r3, #255	; 0xff
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	095b      	lsrs	r3, r3, #5
 8008254:	21e8      	movs	r1, #232	; 0xe8
 8008256:	187a      	adds	r2, r7, r1
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	1d7b      	adds	r3, r7, #5
 800825c:	33ff      	adds	r3, #255	; 0xff
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	221f      	movs	r2, #31
 8008262:	4013      	ands	r3, r2
 8008264:	d104      	bne.n	8008270 <USB_EPStartXfer+0xb20>
 8008266:	187b      	adds	r3, r7, r1
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3b01      	subs	r3, #1
 800826c:	187a      	adds	r2, r7, r1
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	23e8      	movs	r3, #232	; 0xe8
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	029b      	lsls	r3, r3, #10
 800827a:	b29b      	uxth	r3, r3
 800827c:	4aca      	ldr	r2, [pc, #808]	; (80085a8 <USB_EPStartXfer+0xe58>)
 800827e:	4313      	orrs	r3, r2
 8008280:	b29a      	uxth	r2, r3
 8008282:	238c      	movs	r3, #140	; 0x8c
 8008284:	18fb      	adds	r3, r7, r3
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	801a      	strh	r2, [r3, #0]
 800828a:	e2e5      	b.n	8008858 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	78db      	ldrb	r3, [r3, #3]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d000      	beq.n	8008296 <USB_EPStartXfer+0xb46>
 8008294:	e16f      	b.n	8008576 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d16f      	bne.n	800837e <USB_EPStartXfer+0xc2e>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	21ac      	movs	r1, #172	; 0xac
 80082a2:	187a      	adds	r2, r7, r1
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2250      	movs	r2, #80	; 0x50
 80082aa:	5a9b      	ldrh	r3, [r3, r2]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	001a      	movs	r2, r3
 80082b0:	187b      	adds	r3, r7, r1
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	189b      	adds	r3, r3, r2
 80082b6:	187a      	adds	r2, r7, r1
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	00da      	lsls	r2, r3, #3
 80082c0:	187b      	adds	r3, r7, r1
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	18d3      	adds	r3, r2, r3
 80082c6:	4ab9      	ldr	r2, [pc, #740]	; (80085ac <USB_EPStartXfer+0xe5c>)
 80082c8:	4694      	mov	ip, r2
 80082ca:	4463      	add	r3, ip
 80082cc:	21a8      	movs	r1, #168	; 0xa8
 80082ce:	187a      	adds	r2, r7, r1
 80082d0:	6013      	str	r3, [r2, #0]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d114      	bne.n	8008304 <USB_EPStartXfer+0xbb4>
 80082da:	187b      	adds	r3, r7, r1
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	4ab3      	ldr	r2, [pc, #716]	; (80085b0 <USB_EPStartXfer+0xe60>)
 80082e4:	4013      	ands	r3, r2
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	187b      	adds	r3, r7, r1
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	801a      	strh	r2, [r3, #0]
 80082ee:	187b      	adds	r3, r7, r1
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	4aac      	ldr	r2, [pc, #688]	; (80085a8 <USB_EPStartXfer+0xe58>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	187b      	adds	r3, r7, r1
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	e060      	b.n	80083c6 <USB_EPStartXfer+0xc76>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	2b3e      	cmp	r3, #62	; 0x3e
 800830a:	d81a      	bhi.n	8008342 <USB_EPStartXfer+0xbf2>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	085b      	lsrs	r3, r3, #1
 8008312:	21e4      	movs	r1, #228	; 0xe4
 8008314:	187a      	adds	r2, r7, r1
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	2201      	movs	r2, #1
 800831e:	4013      	ands	r3, r2
 8008320:	d004      	beq.n	800832c <USB_EPStartXfer+0xbdc>
 8008322:	187b      	adds	r3, r7, r1
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3301      	adds	r3, #1
 8008328:	187a      	adds	r2, r7, r1
 800832a:	6013      	str	r3, [r2, #0]
 800832c:	23e4      	movs	r3, #228	; 0xe4
 800832e:	18fb      	adds	r3, r7, r3
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	029b      	lsls	r3, r3, #10
 8008336:	b29a      	uxth	r2, r3
 8008338:	23a8      	movs	r3, #168	; 0xa8
 800833a:	18fb      	adds	r3, r7, r3
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	801a      	strh	r2, [r3, #0]
 8008340:	e041      	b.n	80083c6 <USB_EPStartXfer+0xc76>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	095b      	lsrs	r3, r3, #5
 8008348:	21e4      	movs	r1, #228	; 0xe4
 800834a:	187a      	adds	r2, r7, r1
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	221f      	movs	r2, #31
 8008354:	4013      	ands	r3, r2
 8008356:	d104      	bne.n	8008362 <USB_EPStartXfer+0xc12>
 8008358:	187b      	adds	r3, r7, r1
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3b01      	subs	r3, #1
 800835e:	187a      	adds	r2, r7, r1
 8008360:	6013      	str	r3, [r2, #0]
 8008362:	23e4      	movs	r3, #228	; 0xe4
 8008364:	18fb      	adds	r3, r7, r3
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	029b      	lsls	r3, r3, #10
 800836c:	b29b      	uxth	r3, r3
 800836e:	4a8e      	ldr	r2, [pc, #568]	; (80085a8 <USB_EPStartXfer+0xe58>)
 8008370:	4313      	orrs	r3, r2
 8008372:	b29a      	uxth	r2, r3
 8008374:	23a8      	movs	r3, #168	; 0xa8
 8008376:	18fb      	adds	r3, r7, r3
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	801a      	strh	r2, [r3, #0]
 800837c:	e023      	b.n	80083c6 <USB_EPStartXfer+0xc76>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d11f      	bne.n	80083c6 <USB_EPStartXfer+0xc76>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	21b4      	movs	r1, #180	; 0xb4
 800838a:	187a      	adds	r2, r7, r1
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2250      	movs	r2, #80	; 0x50
 8008392:	5a9b      	ldrh	r3, [r3, r2]
 8008394:	b29b      	uxth	r3, r3
 8008396:	001a      	movs	r2, r3
 8008398:	187b      	adds	r3, r7, r1
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	189b      	adds	r3, r3, r2
 800839e:	187a      	adds	r2, r7, r1
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	00da      	lsls	r2, r3, #3
 80083a8:	187b      	adds	r3, r7, r1
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	18d3      	adds	r3, r2, r3
 80083ae:	4a7f      	ldr	r2, [pc, #508]	; (80085ac <USB_EPStartXfer+0xe5c>)
 80083b0:	4694      	mov	ip, r2
 80083b2:	4463      	add	r3, ip
 80083b4:	21b0      	movs	r1, #176	; 0xb0
 80083b6:	187a      	adds	r2, r7, r1
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	b29a      	uxth	r2, r3
 80083c0:	187b      	adds	r3, r7, r1
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	801a      	strh	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	22a4      	movs	r2, #164	; 0xa4
 80083ca:	18ba      	adds	r2, r7, r2
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d16f      	bne.n	80084b6 <USB_EPStartXfer+0xd66>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	219c      	movs	r1, #156	; 0x9c
 80083da:	187a      	adds	r2, r7, r1
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2250      	movs	r2, #80	; 0x50
 80083e2:	5a9b      	ldrh	r3, [r3, r2]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	001a      	movs	r2, r3
 80083e8:	187b      	adds	r3, r7, r1
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	189b      	adds	r3, r3, r2
 80083ee:	187a      	adds	r2, r7, r1
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	00da      	lsls	r2, r3, #3
 80083f8:	187b      	adds	r3, r7, r1
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	18d3      	adds	r3, r2, r3
 80083fe:	4a6d      	ldr	r2, [pc, #436]	; (80085b4 <USB_EPStartXfer+0xe64>)
 8008400:	4694      	mov	ip, r2
 8008402:	4463      	add	r3, ip
 8008404:	2198      	movs	r1, #152	; 0x98
 8008406:	187a      	adds	r2, r7, r1
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d114      	bne.n	800843c <USB_EPStartXfer+0xcec>
 8008412:	187b      	adds	r3, r7, r1
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	b29b      	uxth	r3, r3
 800841a:	4a65      	ldr	r2, [pc, #404]	; (80085b0 <USB_EPStartXfer+0xe60>)
 800841c:	4013      	ands	r3, r2
 800841e:	b29a      	uxth	r2, r3
 8008420:	187b      	adds	r3, r7, r1
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	801a      	strh	r2, [r3, #0]
 8008426:	187b      	adds	r3, r7, r1
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	4a5e      	ldr	r2, [pc, #376]	; (80085a8 <USB_EPStartXfer+0xe58>)
 8008430:	4313      	orrs	r3, r2
 8008432:	b29a      	uxth	r2, r3
 8008434:	187b      	adds	r3, r7, r1
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	801a      	strh	r2, [r3, #0]
 800843a:	e05d      	b.n	80084f8 <USB_EPStartXfer+0xda8>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	2b3e      	cmp	r3, #62	; 0x3e
 8008442:	d81a      	bhi.n	800847a <USB_EPStartXfer+0xd2a>
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	085b      	lsrs	r3, r3, #1
 800844a:	21e0      	movs	r1, #224	; 0xe0
 800844c:	187a      	adds	r2, r7, r1
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	2201      	movs	r2, #1
 8008456:	4013      	ands	r3, r2
 8008458:	d004      	beq.n	8008464 <USB_EPStartXfer+0xd14>
 800845a:	187b      	adds	r3, r7, r1
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3301      	adds	r3, #1
 8008460:	187a      	adds	r2, r7, r1
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	23e0      	movs	r3, #224	; 0xe0
 8008466:	18fb      	adds	r3, r7, r3
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	029b      	lsls	r3, r3, #10
 800846e:	b29a      	uxth	r2, r3
 8008470:	2398      	movs	r3, #152	; 0x98
 8008472:	18fb      	adds	r3, r7, r3
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	e03e      	b.n	80084f8 <USB_EPStartXfer+0xda8>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	095b      	lsrs	r3, r3, #5
 8008480:	21e0      	movs	r1, #224	; 0xe0
 8008482:	187a      	adds	r2, r7, r1
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	221f      	movs	r2, #31
 800848c:	4013      	ands	r3, r2
 800848e:	d104      	bne.n	800849a <USB_EPStartXfer+0xd4a>
 8008490:	187b      	adds	r3, r7, r1
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3b01      	subs	r3, #1
 8008496:	187a      	adds	r2, r7, r1
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	23e0      	movs	r3, #224	; 0xe0
 800849c:	18fb      	adds	r3, r7, r3
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	029b      	lsls	r3, r3, #10
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	4a40      	ldr	r2, [pc, #256]	; (80085a8 <USB_EPStartXfer+0xe58>)
 80084a8:	4313      	orrs	r3, r2
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	2398      	movs	r3, #152	; 0x98
 80084ae:	18fb      	adds	r3, r7, r3
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	801a      	strh	r2, [r3, #0]
 80084b4:	e020      	b.n	80084f8 <USB_EPStartXfer+0xda8>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	785b      	ldrb	r3, [r3, #1]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d11c      	bne.n	80084f8 <USB_EPStartXfer+0xda8>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2250      	movs	r2, #80	; 0x50
 80084c2:	5a9b      	ldrh	r3, [r3, r2]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	001a      	movs	r2, r3
 80084c8:	21a4      	movs	r1, #164	; 0xa4
 80084ca:	187b      	adds	r3, r7, r1
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	189b      	adds	r3, r3, r2
 80084d0:	187a      	adds	r2, r7, r1
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	00da      	lsls	r2, r3, #3
 80084da:	187b      	adds	r3, r7, r1
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	18d3      	adds	r3, r2, r3
 80084e0:	4a34      	ldr	r2, [pc, #208]	; (80085b4 <USB_EPStartXfer+0xe64>)
 80084e2:	4694      	mov	ip, r2
 80084e4:	4463      	add	r3, ip
 80084e6:	21a0      	movs	r1, #160	; 0xa0
 80084e8:	187a      	adds	r2, r7, r1
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	187b      	adds	r3, r7, r1
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d100      	bne.n	8008502 <USB_EPStartXfer+0xdb2>
 8008500:	e1aa      	b.n	8008858 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	18d2      	adds	r2, r2, r3
 800850c:	2196      	movs	r1, #150	; 0x96
 800850e:	187b      	adds	r3, r7, r1
 8008510:	8812      	ldrh	r2, [r2, #0]
 8008512:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008514:	187b      	adds	r3, r7, r1
 8008516:	881a      	ldrh	r2, [r3, #0]
 8008518:	2380      	movs	r3, #128	; 0x80
 800851a:	01db      	lsls	r3, r3, #7
 800851c:	4013      	ands	r3, r2
 800851e:	d004      	beq.n	800852a <USB_EPStartXfer+0xdda>
 8008520:	187b      	adds	r3, r7, r1
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	2240      	movs	r2, #64	; 0x40
 8008526:	4013      	ands	r3, r2
 8008528:	d10d      	bne.n	8008546 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800852a:	2196      	movs	r1, #150	; 0x96
 800852c:	187b      	adds	r3, r7, r1
 800852e:	881a      	ldrh	r2, [r3, #0]
 8008530:	2380      	movs	r3, #128	; 0x80
 8008532:	01db      	lsls	r3, r3, #7
 8008534:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008536:	d000      	beq.n	800853a <USB_EPStartXfer+0xdea>
 8008538:	e18e      	b.n	8008858 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800853a:	187b      	adds	r3, r7, r1
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	2240      	movs	r2, #64	; 0x40
 8008540:	4013      	ands	r3, r2
 8008542:	d000      	beq.n	8008546 <USB_EPStartXfer+0xdf6>
 8008544:	e188      	b.n	8008858 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	18d3      	adds	r3, r2, r3
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	b29a      	uxth	r2, r3
 8008554:	2094      	movs	r0, #148	; 0x94
 8008556:	183b      	adds	r3, r7, r0
 8008558:	4917      	ldr	r1, [pc, #92]	; (80085b8 <USB_EPStartXfer+0xe68>)
 800855a:	400a      	ands	r2, r1
 800855c:	801a      	strh	r2, [r3, #0]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	18d3      	adds	r3, r2, r3
 8008568:	183a      	adds	r2, r7, r0
 800856a:	8812      	ldrh	r2, [r2, #0]
 800856c:	4913      	ldr	r1, [pc, #76]	; (80085bc <USB_EPStartXfer+0xe6c>)
 800856e:	430a      	orrs	r2, r1
 8008570:	b292      	uxth	r2, r2
 8008572:	801a      	strh	r2, [r3, #0]
 8008574:	e170      	b.n	8008858 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	78db      	ldrb	r3, [r3, #3]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d000      	beq.n	8008580 <USB_EPStartXfer+0xe30>
 800857e:	e169      	b.n	8008854 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	699a      	ldr	r2, [r3, #24]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	429a      	cmp	r2, r3
 800858a:	d919      	bls.n	80085c0 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	1d7a      	adds	r2, r7, #5
 8008592:	32ff      	adds	r2, #255	; 0xff
 8008594:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	1d7b      	adds	r3, r7, #5
 800859c:	33ff      	adds	r3, #255	; 0xff
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	1ad2      	subs	r2, r2, r3
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	619a      	str	r2, [r3, #24]
 80085a6:	e013      	b.n	80085d0 <USB_EPStartXfer+0xe80>
 80085a8:	ffff8000 	.word	0xffff8000
 80085ac:	00000402 	.word	0x00000402
 80085b0:	ffff83ff 	.word	0xffff83ff
 80085b4:	00000406 	.word	0x00000406
 80085b8:	ffff8f8f 	.word	0xffff8f8f
 80085bc:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	1d7a      	adds	r2, r7, #5
 80085c6:	32ff      	adds	r2, #255	; 0xff
 80085c8:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2200      	movs	r2, #0
 80085ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d000      	beq.n	80085da <USB_EPStartXfer+0xe8a>
 80085d8:	e075      	b.n	80086c6 <USB_EPStartXfer+0xf76>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	21cc      	movs	r1, #204	; 0xcc
 80085de:	187a      	adds	r2, r7, r1
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2250      	movs	r2, #80	; 0x50
 80085e6:	5a9b      	ldrh	r3, [r3, r2]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	001a      	movs	r2, r3
 80085ec:	187b      	adds	r3, r7, r1
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	189b      	adds	r3, r3, r2
 80085f2:	187a      	adds	r2, r7, r1
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	00da      	lsls	r2, r3, #3
 80085fc:	187b      	adds	r3, r7, r1
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	18d3      	adds	r3, r2, r3
 8008602:	4aaa      	ldr	r2, [pc, #680]	; (80088ac <USB_EPStartXfer+0x115c>)
 8008604:	4694      	mov	ip, r2
 8008606:	4463      	add	r3, ip
 8008608:	21c8      	movs	r1, #200	; 0xc8
 800860a:	187a      	adds	r2, r7, r1
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	1d7b      	adds	r3, r7, #5
 8008610:	33ff      	adds	r3, #255	; 0xff
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d114      	bne.n	8008642 <USB_EPStartXfer+0xef2>
 8008618:	187b      	adds	r3, r7, r1
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	b29b      	uxth	r3, r3
 8008620:	4aa3      	ldr	r2, [pc, #652]	; (80088b0 <USB_EPStartXfer+0x1160>)
 8008622:	4013      	ands	r3, r2
 8008624:	b29a      	uxth	r2, r3
 8008626:	187b      	adds	r3, r7, r1
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	801a      	strh	r2, [r3, #0]
 800862c:	187b      	adds	r3, r7, r1
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b29b      	uxth	r3, r3
 8008634:	4a9f      	ldr	r2, [pc, #636]	; (80088b4 <USB_EPStartXfer+0x1164>)
 8008636:	4313      	orrs	r3, r2
 8008638:	b29a      	uxth	r2, r3
 800863a:	187b      	adds	r3, r7, r1
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	801a      	strh	r2, [r3, #0]
 8008640:	e066      	b.n	8008710 <USB_EPStartXfer+0xfc0>
 8008642:	1d7b      	adds	r3, r7, #5
 8008644:	33ff      	adds	r3, #255	; 0xff
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b3e      	cmp	r3, #62	; 0x3e
 800864a:	d81c      	bhi.n	8008686 <USB_EPStartXfer+0xf36>
 800864c:	1d7b      	adds	r3, r7, #5
 800864e:	33ff      	adds	r3, #255	; 0xff
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	085b      	lsrs	r3, r3, #1
 8008654:	21dc      	movs	r1, #220	; 0xdc
 8008656:	187a      	adds	r2, r7, r1
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	1d7b      	adds	r3, r7, #5
 800865c:	33ff      	adds	r3, #255	; 0xff
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2201      	movs	r2, #1
 8008662:	4013      	ands	r3, r2
 8008664:	d004      	beq.n	8008670 <USB_EPStartXfer+0xf20>
 8008666:	187b      	adds	r3, r7, r1
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3301      	adds	r3, #1
 800866c:	187a      	adds	r2, r7, r1
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	23dc      	movs	r3, #220	; 0xdc
 8008672:	18fb      	adds	r3, r7, r3
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	b29b      	uxth	r3, r3
 8008678:	029b      	lsls	r3, r3, #10
 800867a:	b29a      	uxth	r2, r3
 800867c:	23c8      	movs	r3, #200	; 0xc8
 800867e:	18fb      	adds	r3, r7, r3
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	801a      	strh	r2, [r3, #0]
 8008684:	e044      	b.n	8008710 <USB_EPStartXfer+0xfc0>
 8008686:	1d7b      	adds	r3, r7, #5
 8008688:	33ff      	adds	r3, #255	; 0xff
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	21dc      	movs	r1, #220	; 0xdc
 8008690:	187a      	adds	r2, r7, r1
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	1d7b      	adds	r3, r7, #5
 8008696:	33ff      	adds	r3, #255	; 0xff
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	221f      	movs	r2, #31
 800869c:	4013      	ands	r3, r2
 800869e:	d104      	bne.n	80086aa <USB_EPStartXfer+0xf5a>
 80086a0:	187b      	adds	r3, r7, r1
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	187a      	adds	r2, r7, r1
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	23dc      	movs	r3, #220	; 0xdc
 80086ac:	18fb      	adds	r3, r7, r3
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	029b      	lsls	r3, r3, #10
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	4a7f      	ldr	r2, [pc, #508]	; (80088b4 <USB_EPStartXfer+0x1164>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	23c8      	movs	r3, #200	; 0xc8
 80086be:	18fb      	adds	r3, r7, r3
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	801a      	strh	r2, [r3, #0]
 80086c4:	e024      	b.n	8008710 <USB_EPStartXfer+0xfc0>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	785b      	ldrb	r3, [r3, #1]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d120      	bne.n	8008710 <USB_EPStartXfer+0xfc0>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	21d4      	movs	r1, #212	; 0xd4
 80086d2:	187a      	adds	r2, r7, r1
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2250      	movs	r2, #80	; 0x50
 80086da:	5a9b      	ldrh	r3, [r3, r2]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	001a      	movs	r2, r3
 80086e0:	187b      	adds	r3, r7, r1
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	189b      	adds	r3, r3, r2
 80086e6:	187a      	adds	r2, r7, r1
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	00da      	lsls	r2, r3, #3
 80086f0:	187b      	adds	r3, r7, r1
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	18d3      	adds	r3, r2, r3
 80086f6:	4a6d      	ldr	r2, [pc, #436]	; (80088ac <USB_EPStartXfer+0x115c>)
 80086f8:	4694      	mov	ip, r2
 80086fa:	4463      	add	r3, ip
 80086fc:	21d0      	movs	r1, #208	; 0xd0
 80086fe:	187a      	adds	r2, r7, r1
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	1d7b      	adds	r3, r7, #5
 8008704:	33ff      	adds	r3, #255	; 0xff
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	b29a      	uxth	r2, r3
 800870a:	187b      	adds	r3, r7, r1
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	801a      	strh	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	22c4      	movs	r2, #196	; 0xc4
 8008714:	18ba      	adds	r2, r7, r2
 8008716:	6013      	str	r3, [r2, #0]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d000      	beq.n	8008722 <USB_EPStartXfer+0xfd2>
 8008720:	e075      	b.n	800880e <USB_EPStartXfer+0x10be>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	21bc      	movs	r1, #188	; 0xbc
 8008726:	187a      	adds	r2, r7, r1
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2250      	movs	r2, #80	; 0x50
 800872e:	5a9b      	ldrh	r3, [r3, r2]
 8008730:	b29b      	uxth	r3, r3
 8008732:	001a      	movs	r2, r3
 8008734:	187b      	adds	r3, r7, r1
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	189b      	adds	r3, r3, r2
 800873a:	187a      	adds	r2, r7, r1
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	00da      	lsls	r2, r3, #3
 8008744:	187b      	adds	r3, r7, r1
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	18d3      	adds	r3, r2, r3
 800874a:	4a5b      	ldr	r2, [pc, #364]	; (80088b8 <USB_EPStartXfer+0x1168>)
 800874c:	4694      	mov	ip, r2
 800874e:	4463      	add	r3, ip
 8008750:	21b8      	movs	r1, #184	; 0xb8
 8008752:	187a      	adds	r2, r7, r1
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	1d7b      	adds	r3, r7, #5
 8008758:	33ff      	adds	r3, #255	; 0xff
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d114      	bne.n	800878a <USB_EPStartXfer+0x103a>
 8008760:	187b      	adds	r3, r7, r1
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	4a51      	ldr	r2, [pc, #324]	; (80088b0 <USB_EPStartXfer+0x1160>)
 800876a:	4013      	ands	r3, r2
 800876c:	b29a      	uxth	r2, r3
 800876e:	187b      	adds	r3, r7, r1
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	801a      	strh	r2, [r3, #0]
 8008774:	187b      	adds	r3, r7, r1
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	b29b      	uxth	r3, r3
 800877c:	4a4d      	ldr	r2, [pc, #308]	; (80088b4 <USB_EPStartXfer+0x1164>)
 800877e:	4313      	orrs	r3, r2
 8008780:	b29a      	uxth	r2, r3
 8008782:	187b      	adds	r3, r7, r1
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	801a      	strh	r2, [r3, #0]
 8008788:	e066      	b.n	8008858 <USB_EPStartXfer+0x1108>
 800878a:	1d7b      	adds	r3, r7, #5
 800878c:	33ff      	adds	r3, #255	; 0xff
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b3e      	cmp	r3, #62	; 0x3e
 8008792:	d81c      	bhi.n	80087ce <USB_EPStartXfer+0x107e>
 8008794:	1d7b      	adds	r3, r7, #5
 8008796:	33ff      	adds	r3, #255	; 0xff
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	085b      	lsrs	r3, r3, #1
 800879c:	21d8      	movs	r1, #216	; 0xd8
 800879e:	187a      	adds	r2, r7, r1
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	1d7b      	adds	r3, r7, #5
 80087a4:	33ff      	adds	r3, #255	; 0xff
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2201      	movs	r2, #1
 80087aa:	4013      	ands	r3, r2
 80087ac:	d004      	beq.n	80087b8 <USB_EPStartXfer+0x1068>
 80087ae:	187b      	adds	r3, r7, r1
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3301      	adds	r3, #1
 80087b4:	187a      	adds	r2, r7, r1
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	23d8      	movs	r3, #216	; 0xd8
 80087ba:	18fb      	adds	r3, r7, r3
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	029b      	lsls	r3, r3, #10
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	23b8      	movs	r3, #184	; 0xb8
 80087c6:	18fb      	adds	r3, r7, r3
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	801a      	strh	r2, [r3, #0]
 80087cc:	e044      	b.n	8008858 <USB_EPStartXfer+0x1108>
 80087ce:	1d7b      	adds	r3, r7, #5
 80087d0:	33ff      	adds	r3, #255	; 0xff
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	095b      	lsrs	r3, r3, #5
 80087d6:	21d8      	movs	r1, #216	; 0xd8
 80087d8:	187a      	adds	r2, r7, r1
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	1d7b      	adds	r3, r7, #5
 80087de:	33ff      	adds	r3, #255	; 0xff
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	221f      	movs	r2, #31
 80087e4:	4013      	ands	r3, r2
 80087e6:	d104      	bne.n	80087f2 <USB_EPStartXfer+0x10a2>
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	187a      	adds	r2, r7, r1
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	23d8      	movs	r3, #216	; 0xd8
 80087f4:	18fb      	adds	r3, r7, r3
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	029b      	lsls	r3, r3, #10
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	4a2d      	ldr	r2, [pc, #180]	; (80088b4 <USB_EPStartXfer+0x1164>)
 8008800:	4313      	orrs	r3, r2
 8008802:	b29a      	uxth	r2, r3
 8008804:	23b8      	movs	r3, #184	; 0xb8
 8008806:	18fb      	adds	r3, r7, r3
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	e024      	b.n	8008858 <USB_EPStartXfer+0x1108>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	785b      	ldrb	r3, [r3, #1]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d120      	bne.n	8008858 <USB_EPStartXfer+0x1108>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2250      	movs	r2, #80	; 0x50
 800881a:	5a9b      	ldrh	r3, [r3, r2]
 800881c:	b29b      	uxth	r3, r3
 800881e:	001a      	movs	r2, r3
 8008820:	21c4      	movs	r1, #196	; 0xc4
 8008822:	187b      	adds	r3, r7, r1
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	189b      	adds	r3, r3, r2
 8008828:	187a      	adds	r2, r7, r1
 800882a:	6013      	str	r3, [r2, #0]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	00da      	lsls	r2, r3, #3
 8008832:	187b      	adds	r3, r7, r1
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	18d3      	adds	r3, r2, r3
 8008838:	4a1f      	ldr	r2, [pc, #124]	; (80088b8 <USB_EPStartXfer+0x1168>)
 800883a:	4694      	mov	ip, r2
 800883c:	4463      	add	r3, ip
 800883e:	21c0      	movs	r1, #192	; 0xc0
 8008840:	187a      	adds	r2, r7, r1
 8008842:	6013      	str	r3, [r2, #0]
 8008844:	1d7b      	adds	r3, r7, #5
 8008846:	33ff      	adds	r3, #255	; 0xff
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	b29a      	uxth	r2, r3
 800884c:	187b      	adds	r3, r7, r1
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	801a      	strh	r2, [r3, #0]
 8008852:	e001      	b.n	8008858 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e025      	b.n	80088a4 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	18d3      	adds	r3, r2, r3
 8008862:	881b      	ldrh	r3, [r3, #0]
 8008864:	b29a      	uxth	r2, r3
 8008866:	208a      	movs	r0, #138	; 0x8a
 8008868:	183b      	adds	r3, r7, r0
 800886a:	4914      	ldr	r1, [pc, #80]	; (80088bc <USB_EPStartXfer+0x116c>)
 800886c:	400a      	ands	r2, r1
 800886e:	801a      	strh	r2, [r3, #0]
 8008870:	183b      	adds	r3, r7, r0
 8008872:	183a      	adds	r2, r7, r0
 8008874:	8812      	ldrh	r2, [r2, #0]
 8008876:	2180      	movs	r1, #128	; 0x80
 8008878:	0149      	lsls	r1, r1, #5
 800887a:	404a      	eors	r2, r1
 800887c:	801a      	strh	r2, [r3, #0]
 800887e:	183b      	adds	r3, r7, r0
 8008880:	183a      	adds	r2, r7, r0
 8008882:	8812      	ldrh	r2, [r2, #0]
 8008884:	2180      	movs	r1, #128	; 0x80
 8008886:	0189      	lsls	r1, r1, #6
 8008888:	404a      	eors	r2, r1
 800888a:	801a      	strh	r2, [r3, #0]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	18d3      	adds	r3, r2, r3
 8008896:	183a      	adds	r2, r7, r0
 8008898:	8812      	ldrh	r2, [r2, #0]
 800889a:	4909      	ldr	r1, [pc, #36]	; (80088c0 <USB_EPStartXfer+0x1170>)
 800889c:	430a      	orrs	r2, r1
 800889e:	b292      	uxth	r2, r2
 80088a0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	0018      	movs	r0, r3
 80088a6:	46bd      	mov	sp, r7
 80088a8:	b043      	add	sp, #268	; 0x10c
 80088aa:	bd90      	pop	{r4, r7, pc}
 80088ac:	00000402 	.word	0x00000402
 80088b0:	ffff83ff 	.word	0xffff83ff
 80088b4:	ffff8000 	.word	0xffff8000
 80088b8:	00000406 	.word	0x00000406
 80088bc:	ffffbf8f 	.word	0xffffbf8f
 80088c0:	ffff8080 	.word	0xffff8080

080088c4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	785b      	ldrb	r3, [r3, #1]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d01d      	beq.n	8008912 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	18d3      	adds	r3, r2, r3
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	200c      	movs	r0, #12
 80088e6:	183b      	adds	r3, r7, r0
 80088e8:	491b      	ldr	r1, [pc, #108]	; (8008958 <USB_EPSetStall+0x94>)
 80088ea:	400a      	ands	r2, r1
 80088ec:	801a      	strh	r2, [r3, #0]
 80088ee:	183b      	adds	r3, r7, r0
 80088f0:	183a      	adds	r2, r7, r0
 80088f2:	8812      	ldrh	r2, [r2, #0]
 80088f4:	2110      	movs	r1, #16
 80088f6:	404a      	eors	r2, r1
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	18d3      	adds	r3, r2, r3
 8008904:	183a      	adds	r2, r7, r0
 8008906:	8812      	ldrh	r2, [r2, #0]
 8008908:	4914      	ldr	r1, [pc, #80]	; (800895c <USB_EPSetStall+0x98>)
 800890a:	430a      	orrs	r2, r1
 800890c:	b292      	uxth	r2, r2
 800890e:	801a      	strh	r2, [r3, #0]
 8008910:	e01d      	b.n	800894e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	18d3      	adds	r3, r2, r3
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29a      	uxth	r2, r3
 8008920:	200e      	movs	r0, #14
 8008922:	183b      	adds	r3, r7, r0
 8008924:	490e      	ldr	r1, [pc, #56]	; (8008960 <USB_EPSetStall+0x9c>)
 8008926:	400a      	ands	r2, r1
 8008928:	801a      	strh	r2, [r3, #0]
 800892a:	183b      	adds	r3, r7, r0
 800892c:	183a      	adds	r2, r7, r0
 800892e:	8812      	ldrh	r2, [r2, #0]
 8008930:	2180      	movs	r1, #128	; 0x80
 8008932:	0149      	lsls	r1, r1, #5
 8008934:	404a      	eors	r2, r1
 8008936:	801a      	strh	r2, [r3, #0]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	18d3      	adds	r3, r2, r3
 8008942:	183a      	adds	r2, r7, r0
 8008944:	8812      	ldrh	r2, [r2, #0]
 8008946:	4905      	ldr	r1, [pc, #20]	; (800895c <USB_EPSetStall+0x98>)
 8008948:	430a      	orrs	r2, r1
 800894a:	b292      	uxth	r2, r2
 800894c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	0018      	movs	r0, r3
 8008952:	46bd      	mov	sp, r7
 8008954:	b004      	add	sp, #16
 8008956:	bd80      	pop	{r7, pc}
 8008958:	ffff8fbf 	.word	0xffff8fbf
 800895c:	ffff8080 	.word	0xffff8080
 8008960:	ffffbf8f 	.word	0xffffbf8f

08008964 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	7b1b      	ldrb	r3, [r3, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d000      	beq.n	8008978 <USB_EPClearStall+0x14>
 8008976:	e095      	b.n	8008aa4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d046      	beq.n	8008a0e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	18d2      	adds	r2, r2, r3
 800898a:	2110      	movs	r1, #16
 800898c:	187b      	adds	r3, r7, r1
 800898e:	8812      	ldrh	r2, [r2, #0]
 8008990:	801a      	strh	r2, [r3, #0]
 8008992:	187b      	adds	r3, r7, r1
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	2240      	movs	r2, #64	; 0x40
 8008998:	4013      	ands	r3, r2
 800899a:	d016      	beq.n	80089ca <USB_EPClearStall+0x66>
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	18d3      	adds	r3, r2, r3
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	200e      	movs	r0, #14
 80089ac:	183b      	adds	r3, r7, r0
 80089ae:	4940      	ldr	r1, [pc, #256]	; (8008ab0 <USB_EPClearStall+0x14c>)
 80089b0:	400a      	ands	r2, r1
 80089b2:	801a      	strh	r2, [r3, #0]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	18d3      	adds	r3, r2, r3
 80089be:	183a      	adds	r2, r7, r0
 80089c0:	8812      	ldrh	r2, [r2, #0]
 80089c2:	493c      	ldr	r1, [pc, #240]	; (8008ab4 <USB_EPClearStall+0x150>)
 80089c4:	430a      	orrs	r2, r1
 80089c6:	b292      	uxth	r2, r2
 80089c8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	78db      	ldrb	r3, [r3, #3]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d068      	beq.n	8008aa4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	18d3      	adds	r3, r2, r3
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	b29a      	uxth	r2, r3
 80089e0:	200c      	movs	r0, #12
 80089e2:	183b      	adds	r3, r7, r0
 80089e4:	4934      	ldr	r1, [pc, #208]	; (8008ab8 <USB_EPClearStall+0x154>)
 80089e6:	400a      	ands	r2, r1
 80089e8:	801a      	strh	r2, [r3, #0]
 80089ea:	183b      	adds	r3, r7, r0
 80089ec:	183a      	adds	r2, r7, r0
 80089ee:	8812      	ldrh	r2, [r2, #0]
 80089f0:	2120      	movs	r1, #32
 80089f2:	404a      	eors	r2, r1
 80089f4:	801a      	strh	r2, [r3, #0]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	18d3      	adds	r3, r2, r3
 8008a00:	183a      	adds	r2, r7, r0
 8008a02:	8812      	ldrh	r2, [r2, #0]
 8008a04:	492d      	ldr	r1, [pc, #180]	; (8008abc <USB_EPClearStall+0x158>)
 8008a06:	430a      	orrs	r2, r1
 8008a08:	b292      	uxth	r2, r2
 8008a0a:	801a      	strh	r2, [r3, #0]
 8008a0c:	e04a      	b.n	8008aa4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	18d2      	adds	r2, r2, r3
 8008a18:	2116      	movs	r1, #22
 8008a1a:	187b      	adds	r3, r7, r1
 8008a1c:	8812      	ldrh	r2, [r2, #0]
 8008a1e:	801a      	strh	r2, [r3, #0]
 8008a20:	187b      	adds	r3, r7, r1
 8008a22:	881a      	ldrh	r2, [r3, #0]
 8008a24:	2380      	movs	r3, #128	; 0x80
 8008a26:	01db      	lsls	r3, r3, #7
 8008a28:	4013      	ands	r3, r2
 8008a2a:	d016      	beq.n	8008a5a <USB_EPClearStall+0xf6>
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	18d3      	adds	r3, r2, r3
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	2014      	movs	r0, #20
 8008a3c:	183b      	adds	r3, r7, r0
 8008a3e:	491c      	ldr	r1, [pc, #112]	; (8008ab0 <USB_EPClearStall+0x14c>)
 8008a40:	400a      	ands	r2, r1
 8008a42:	801a      	strh	r2, [r3, #0]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	18d3      	adds	r3, r2, r3
 8008a4e:	183a      	adds	r2, r7, r0
 8008a50:	8812      	ldrh	r2, [r2, #0]
 8008a52:	491b      	ldr	r1, [pc, #108]	; (8008ac0 <USB_EPClearStall+0x15c>)
 8008a54:	430a      	orrs	r2, r1
 8008a56:	b292      	uxth	r2, r2
 8008a58:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	18d3      	adds	r3, r2, r3
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	2012      	movs	r0, #18
 8008a6a:	183b      	adds	r3, r7, r0
 8008a6c:	4915      	ldr	r1, [pc, #84]	; (8008ac4 <USB_EPClearStall+0x160>)
 8008a6e:	400a      	ands	r2, r1
 8008a70:	801a      	strh	r2, [r3, #0]
 8008a72:	183b      	adds	r3, r7, r0
 8008a74:	183a      	adds	r2, r7, r0
 8008a76:	8812      	ldrh	r2, [r2, #0]
 8008a78:	2180      	movs	r1, #128	; 0x80
 8008a7a:	0149      	lsls	r1, r1, #5
 8008a7c:	404a      	eors	r2, r1
 8008a7e:	801a      	strh	r2, [r3, #0]
 8008a80:	183b      	adds	r3, r7, r0
 8008a82:	183a      	adds	r2, r7, r0
 8008a84:	8812      	ldrh	r2, [r2, #0]
 8008a86:	2180      	movs	r1, #128	; 0x80
 8008a88:	0189      	lsls	r1, r1, #6
 8008a8a:	404a      	eors	r2, r1
 8008a8c:	801a      	strh	r2, [r3, #0]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	18d3      	adds	r3, r2, r3
 8008a98:	183a      	adds	r2, r7, r0
 8008a9a:	8812      	ldrh	r2, [r2, #0]
 8008a9c:	4907      	ldr	r1, [pc, #28]	; (8008abc <USB_EPClearStall+0x158>)
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	b292      	uxth	r2, r2
 8008aa2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	b006      	add	sp, #24
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	46c0      	nop			; (mov r8, r8)
 8008ab0:	ffff8f8f 	.word	0xffff8f8f
 8008ab4:	ffff80c0 	.word	0xffff80c0
 8008ab8:	ffff8fbf 	.word	0xffff8fbf
 8008abc:	ffff8080 	.word	0xffff8080
 8008ac0:	ffffc080 	.word	0xffffc080
 8008ac4:	ffffbf8f 	.word	0xffffbf8f

08008ac8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	000a      	movs	r2, r1
 8008ad2:	1cfb      	adds	r3, r7, #3
 8008ad4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8008ad6:	1cfb      	adds	r3, r7, #3
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d103      	bne.n	8008ae6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	224c      	movs	r2, #76	; 0x4c
 8008ae2:	2180      	movs	r1, #128	; 0x80
 8008ae4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	0018      	movs	r0, r3
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b002      	add	sp, #8
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2258      	movs	r2, #88	; 0x58
 8008afc:	5a9b      	ldrh	r3, [r3, r2]
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	4a05      	ldr	r2, [pc, #20]	; (8008b18 <USB_DevConnect+0x28>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	b299      	uxth	r1, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2258      	movs	r2, #88	; 0x58
 8008b0a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	0018      	movs	r0, r3
 8008b10:	46bd      	mov	sp, r7
 8008b12:	b002      	add	sp, #8
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	46c0      	nop			; (mov r8, r8)
 8008b18:	ffff8000 	.word	0xffff8000

08008b1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2244      	movs	r2, #68	; 0x44
 8008b28:	5a9b      	ldrh	r3, [r3, r2]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
}
 8008b30:	0018      	movs	r0, r3
 8008b32:	46bd      	mov	sp, r7
 8008b34:	b004      	add	sp, #16
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08c      	sub	sp, #48	; 0x30
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	0019      	movs	r1, r3
 8008b44:	1dbb      	adds	r3, r7, #6
 8008b46:	801a      	strh	r2, [r3, #0]
 8008b48:	1d3b      	adds	r3, r7, #4
 8008b4a:	1c0a      	adds	r2, r1, #0
 8008b4c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008b4e:	1d3b      	adds	r3, r7, #4
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	3301      	adds	r3, #1
 8008b54:	085b      	lsrs	r3, r3, #1
 8008b56:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b60:	1dbb      	adds	r3, r7, #6
 8008b62:	881a      	ldrh	r2, [r3, #0]
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	18d3      	adds	r3, r2, r3
 8008b68:	2280      	movs	r2, #128	; 0x80
 8008b6a:	00d2      	lsls	r2, r2, #3
 8008b6c:	4694      	mov	ip, r2
 8008b6e:	4463      	add	r3, ip
 8008b70:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b76:	e01b      	b.n	8008bb0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	3301      	adds	r3, #1
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	021b      	lsls	r3, r3, #8
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	001a      	movs	r2, r3
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	3302      	adds	r3, #2
 8008ba2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bac:	3b01      	subs	r3, #1
 8008bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e0      	bne.n	8008b78 <USB_WritePMA+0x40>
  }
}
 8008bb6:	46c0      	nop			; (mov r8, r8)
 8008bb8:	46c0      	nop			; (mov r8, r8)
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	b00c      	add	sp, #48	; 0x30
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08a      	sub	sp, #40	; 0x28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	0019      	movs	r1, r3
 8008bcc:	1dbb      	adds	r3, r7, #6
 8008bce:	801a      	strh	r2, [r3, #0]
 8008bd0:	1d3b      	adds	r3, r7, #4
 8008bd2:	1c0a      	adds	r2, r1, #0
 8008bd4:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008bd6:	1d3b      	adds	r3, r7, #4
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008be8:	1dbb      	adds	r3, r7, #6
 8008bea:	881a      	ldrh	r2, [r3, #0]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	18d3      	adds	r3, r2, r3
 8008bf0:	2280      	movs	r2, #128	; 0x80
 8008bf2:	00d2      	lsls	r2, r2, #3
 8008bf4:	4694      	mov	ip, r2
 8008bf6:	4463      	add	r3, ip
 8008bf8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bfe:	e018      	b.n	8008c32 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	3302      	adds	r3, #2
 8008c0c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	0a1b      	lsrs	r3, r3, #8
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	627b      	str	r3, [r7, #36]	; 0x24
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e3      	bne.n	8008c00 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008c38:	1d3b      	adds	r3, r7, #4
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	4013      	ands	r3, r2
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d007      	beq.n	8008c56 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	701a      	strb	r2, [r3, #0]
  }
}
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	b00a      	add	sp, #40	; 0x28
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	000a      	movs	r2, r1
 8008c68:	1cfb      	adds	r3, r7, #3
 8008c6a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008c6c:	230f      	movs	r3, #15
 8008c6e:	18fb      	adds	r3, r7, r3
 8008c70:	2200      	movs	r2, #0
 8008c72:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	7c1b      	ldrb	r3, [r3, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d116      	bne.n	8008caa <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c7c:	2380      	movs	r3, #128	; 0x80
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	2181      	movs	r1, #129	; 0x81
 8008c86:	f002 f8b4 	bl	800adf2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c90:	2380      	movs	r3, #128	; 0x80
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	2202      	movs	r2, #2
 8008c98:	2101      	movs	r1, #1
 8008c9a:	f002 f8aa 	bl	800adf2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	23b6      	movs	r3, #182	; 0xb6
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	50d1      	str	r1, [r2, r3]
 8008ca8:	e013      	b.n	8008cd2 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	2340      	movs	r3, #64	; 0x40
 8008cae:	2202      	movs	r2, #2
 8008cb0:	2181      	movs	r1, #129	; 0x81
 8008cb2:	f002 f89e 	bl	800adf2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	2340      	movs	r3, #64	; 0x40
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	f002 f895 	bl	800adf2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	23b6      	movs	r3, #182	; 0xb6
 8008ccc:	005b      	lsls	r3, r3, #1
 8008cce:	2101      	movs	r1, #1
 8008cd0:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	2203      	movs	r2, #3
 8008cd8:	2182      	movs	r1, #130	; 0x82
 8008cda:	f002 f88a 	bl	800adf2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ce4:	2387      	movs	r3, #135	; 0x87
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	0018      	movs	r0, r3
 8008cea:	f002 fa1b 	bl	800b124 <USBD_static_malloc>
 8008cee:	0001      	movs	r1, r0
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	23ae      	movs	r3, #174	; 0xae
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	23ae      	movs	r3, #174	; 0xae
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	58d3      	ldr	r3, [r2, r3]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d104      	bne.n	8008d0e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8008d04:	230f      	movs	r3, #15
 8008d06:	18fb      	adds	r3, r7, r3
 8008d08:	2201      	movs	r2, #1
 8008d0a:	701a      	strb	r2, [r3, #0]
 8008d0c:	e02c      	b.n	8008d68 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	23ae      	movs	r3, #174	; 0xae
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	58d3      	ldr	r3, [r2, r3]
 8008d16:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	23af      	movs	r3, #175	; 0xaf
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	58d3      	ldr	r3, [r2, r3]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	2385      	movs	r3, #133	; 0x85
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	2386      	movs	r3, #134	; 0x86
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	2100      	movs	r1, #0
 8008d36:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	7c1b      	ldrb	r3, [r3, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10a      	bne.n	8008d56 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	2381      	movs	r3, #129	; 0x81
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	58d2      	ldr	r2, [r2, r3]
 8008d48:	2380      	movs	r3, #128	; 0x80
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	2101      	movs	r1, #1
 8008d50:	f002 f99a 	bl	800b088 <USBD_LL_PrepareReceive>
 8008d54:	e008      	b.n	8008d68 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	2381      	movs	r3, #129	; 0x81
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	58d2      	ldr	r2, [r2, r3]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	2340      	movs	r3, #64	; 0x40
 8008d62:	2101      	movs	r1, #1
 8008d64:	f002 f990 	bl	800b088 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008d68:	230f      	movs	r3, #15
 8008d6a:	18fb      	adds	r3, r7, r3
 8008d6c:	781b      	ldrb	r3, [r3, #0]
}
 8008d6e:	0018      	movs	r0, r3
 8008d70:	46bd      	mov	sp, r7
 8008d72:	b004      	add	sp, #16
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	000a      	movs	r2, r1
 8008d80:	1cfb      	adds	r3, r7, #3
 8008d82:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008d84:	230f      	movs	r3, #15
 8008d86:	18fb      	adds	r3, r7, r3
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2181      	movs	r1, #129	; 0x81
 8008d90:	0018      	movs	r0, r3
 8008d92:	f002 f865 	bl	800ae60 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2101      	movs	r1, #1
 8008da0:	0018      	movs	r0, r3
 8008da2:	f002 f85d 	bl	800ae60 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	23b6      	movs	r3, #182	; 0xb6
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	2100      	movs	r1, #0
 8008dae:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2182      	movs	r1, #130	; 0x82
 8008db4:	0018      	movs	r0, r3
 8008db6:	f002 f853 	bl	800ae60 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	23ae      	movs	r3, #174	; 0xae
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	58d3      	ldr	r3, [r2, r3]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d011      	beq.n	8008df0 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	23af      	movs	r3, #175	; 0xaf
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	58d3      	ldr	r3, [r2, r3]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	23ae      	movs	r3, #174	; 0xae
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	58d3      	ldr	r3, [r2, r3]
 8008de0:	0018      	movs	r0, r3
 8008de2:	f002 f9ab 	bl	800b13c <USBD_static_free>
    pdev->pClassData = NULL;
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	23ae      	movs	r3, #174	; 0xae
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	2100      	movs	r1, #0
 8008dee:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8008df0:	230f      	movs	r3, #15
 8008df2:	18fb      	adds	r3, r7, r3
 8008df4:	781b      	ldrb	r3, [r3, #0]
}
 8008df6:	0018      	movs	r0, r3
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	b004      	add	sp, #16
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	23ae      	movs	r3, #174	; 0xae
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	58d3      	ldr	r3, [r2, r3]
 8008e12:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e14:	230f      	movs	r3, #15
 8008e16:	18fb      	adds	r3, r7, r3
 8008e18:	2200      	movs	r2, #0
 8008e1a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8008e1c:	230c      	movs	r3, #12
 8008e1e:	18fb      	adds	r3, r7, r3
 8008e20:	2200      	movs	r2, #0
 8008e22:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8008e24:	2317      	movs	r3, #23
 8008e26:	18fb      	adds	r3, r7, r3
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	001a      	movs	r2, r3
 8008e32:	2360      	movs	r3, #96	; 0x60
 8008e34:	4013      	ands	r3, r2
 8008e36:	d03d      	beq.n	8008eb4 <USBD_CDC_Setup+0xb4>
 8008e38:	2b20      	cmp	r3, #32
 8008e3a:	d000      	beq.n	8008e3e <USBD_CDC_Setup+0x3e>
 8008e3c:	e094      	b.n	8008f68 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	88db      	ldrh	r3, [r3, #6]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d02b      	beq.n	8008e9e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b25b      	sxtb	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	da12      	bge.n	8008e76 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	23af      	movs	r3, #175	; 0xaf
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	58d3      	ldr	r3, [r2, r3]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e5e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	88d2      	ldrh	r2, [r2, #6]
 8008e64:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e66:	6939      	ldr	r1, [r7, #16]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	88da      	ldrh	r2, [r3, #6]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f001 fbb2 	bl	800a5d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e74:	e083      	b.n	8008f7e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	7859      	ldrb	r1, [r3, #1]
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	2380      	movs	r3, #128	; 0x80
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	88db      	ldrh	r3, [r3, #6]
 8008e86:	b2d9      	uxtb	r1, r3
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	4a40      	ldr	r2, [pc, #256]	; (8008f8c <USBD_CDC_Setup+0x18c>)
 8008e8c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e8e:	6939      	ldr	r1, [r7, #16]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	88da      	ldrh	r2, [r3, #6]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	0018      	movs	r0, r3
 8008e98:	f001 fbd1 	bl	800a63e <USBD_CtlPrepareRx>
      break;
 8008e9c:	e06f      	b.n	8008f7e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	23af      	movs	r3, #175	; 0xaf
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	58d3      	ldr	r3, [r2, r3]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	7850      	ldrb	r0, [r2, #1]
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4798      	blx	r3
      break;
 8008eb2:	e064      	b.n	8008f7e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	785b      	ldrb	r3, [r3, #1]
 8008eb8:	2b0b      	cmp	r3, #11
 8008eba:	d037      	beq.n	8008f2c <USBD_CDC_Setup+0x12c>
 8008ebc:	dc47      	bgt.n	8008f4e <USBD_CDC_Setup+0x14e>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <USBD_CDC_Setup+0xc8>
 8008ec2:	2b0a      	cmp	r3, #10
 8008ec4:	d019      	beq.n	8008efa <USBD_CDC_Setup+0xfa>
 8008ec6:	e042      	b.n	8008f4e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	23a7      	movs	r3, #167	; 0xa7
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	5cd3      	ldrb	r3, [r2, r3]
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d107      	bne.n	8008ee4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ed4:	230c      	movs	r3, #12
 8008ed6:	18f9      	adds	r1, r7, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	0018      	movs	r0, r3
 8008ede:	f001 fb7b 	bl	800a5d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ee2:	e040      	b.n	8008f66 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	0011      	movs	r1, r2
 8008eea:	0018      	movs	r0, r3
 8008eec:	f001 faf6 	bl	800a4dc <USBD_CtlError>
            ret = USBD_FAIL;
 8008ef0:	2317      	movs	r3, #23
 8008ef2:	18fb      	adds	r3, r7, r3
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	701a      	strb	r2, [r3, #0]
          break;
 8008ef8:	e035      	b.n	8008f66 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	23a7      	movs	r3, #167	; 0xa7
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	5cd3      	ldrb	r3, [r2, r3]
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d107      	bne.n	8008f16 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f06:	230f      	movs	r3, #15
 8008f08:	18f9      	adds	r1, r7, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	0018      	movs	r0, r3
 8008f10:	f001 fb62 	bl	800a5d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f14:	e027      	b.n	8008f66 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	0011      	movs	r1, r2
 8008f1c:	0018      	movs	r0, r3
 8008f1e:	f001 fadd 	bl	800a4dc <USBD_CtlError>
            ret = USBD_FAIL;
 8008f22:	2317      	movs	r3, #23
 8008f24:	18fb      	adds	r3, r7, r3
 8008f26:	2202      	movs	r2, #2
 8008f28:	701a      	strb	r2, [r3, #0]
          break;
 8008f2a:	e01c      	b.n	8008f66 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	23a7      	movs	r3, #167	; 0xa7
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	5cd3      	ldrb	r3, [r2, r3]
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d015      	beq.n	8008f64 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	0011      	movs	r1, r2
 8008f3e:	0018      	movs	r0, r3
 8008f40:	f001 facc 	bl	800a4dc <USBD_CtlError>
            ret = USBD_FAIL;
 8008f44:	2317      	movs	r3, #23
 8008f46:	18fb      	adds	r3, r7, r3
 8008f48:	2202      	movs	r2, #2
 8008f4a:	701a      	strb	r2, [r3, #0]
          }
          break;
 8008f4c:	e00a      	b.n	8008f64 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	0011      	movs	r1, r2
 8008f54:	0018      	movs	r0, r3
 8008f56:	f001 fac1 	bl	800a4dc <USBD_CtlError>
          ret = USBD_FAIL;
 8008f5a:	2317      	movs	r3, #23
 8008f5c:	18fb      	adds	r3, r7, r3
 8008f5e:	2202      	movs	r2, #2
 8008f60:	701a      	strb	r2, [r3, #0]
          break;
 8008f62:	e000      	b.n	8008f66 <USBD_CDC_Setup+0x166>
          break;
 8008f64:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008f66:	e00a      	b.n	8008f7e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	0011      	movs	r1, r2
 8008f6e:	0018      	movs	r0, r3
 8008f70:	f001 fab4 	bl	800a4dc <USBD_CtlError>
      ret = USBD_FAIL;
 8008f74:	2317      	movs	r3, #23
 8008f76:	18fb      	adds	r3, r7, r3
 8008f78:	2202      	movs	r2, #2
 8008f7a:	701a      	strb	r2, [r3, #0]
      break;
 8008f7c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008f7e:	2317      	movs	r3, #23
 8008f80:	18fb      	adds	r3, r7, r3
 8008f82:	781b      	ldrb	r3, [r3, #0]
}
 8008f84:	0018      	movs	r0, r3
 8008f86:	46bd      	mov	sp, r7
 8008f88:	b006      	add	sp, #24
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	00000201 	.word	0x00000201

08008f90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	000a      	movs	r2, r1
 8008f9a:	1cfb      	adds	r3, r7, #3
 8008f9c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	23ae      	movs	r3, #174	; 0xae
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	58d3      	ldr	r3, [r2, r3]
 8008fa6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	23b0      	movs	r3, #176	; 0xb0
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	58d3      	ldr	r3, [r2, r3]
 8008fb0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	23ae      	movs	r3, #174	; 0xae
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	58d3      	ldr	r3, [r2, r3]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d03e      	beq.n	800903c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008fbe:	1cfb      	adds	r3, r7, #3
 8008fc0:	781a      	ldrb	r2, [r3, #0]
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	0013      	movs	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	189b      	adds	r3, r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	18cb      	adds	r3, r1, r3
 8008fce:	331c      	adds	r3, #28
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d02b      	beq.n	800902e <USBD_CDC_DataIn+0x9e>
 8008fd6:	1cfb      	adds	r3, r7, #3
 8008fd8:	781a      	ldrb	r2, [r3, #0]
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	0013      	movs	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	189b      	adds	r3, r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	18cb      	adds	r3, r1, r3
 8008fe6:	331c      	adds	r3, #28
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	1cfb      	adds	r3, r7, #3
 8008fec:	781a      	ldrb	r2, [r3, #0]
 8008fee:	68b9      	ldr	r1, [r7, #8]
 8008ff0:	0013      	movs	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	189b      	adds	r3, r3, r2
 8008ff6:	00db      	lsls	r3, r3, #3
 8008ff8:	18cb      	adds	r3, r1, r3
 8008ffa:	3338      	adds	r3, #56	; 0x38
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	0019      	movs	r1, r3
 8009000:	f7f7 f91a 	bl	8000238 <__aeabi_uidivmod>
 8009004:	1e0b      	subs	r3, r1, #0
 8009006:	d112      	bne.n	800902e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009008:	1cfb      	adds	r3, r7, #3
 800900a:	781a      	ldrb	r2, [r3, #0]
 800900c:	6879      	ldr	r1, [r7, #4]
 800900e:	0013      	movs	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	189b      	adds	r3, r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	18cb      	adds	r3, r1, r3
 8009018:	331c      	adds	r3, #28
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800901e:	1cfb      	adds	r3, r7, #3
 8009020:	7819      	ldrb	r1, [r3, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	2300      	movs	r3, #0
 8009026:	2200      	movs	r2, #0
 8009028:	f001 fff7 	bl	800b01a <USBD_LL_Transmit>
 800902c:	e004      	b.n	8009038 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	2385      	movs	r3, #133	; 0x85
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	2100      	movs	r1, #0
 8009036:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	e000      	b.n	800903e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800903c:	2302      	movs	r3, #2
  }
}
 800903e:	0018      	movs	r0, r3
 8009040:	46bd      	mov	sp, r7
 8009042:	b004      	add	sp, #16
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	000a      	movs	r2, r1
 8009050:	1cfb      	adds	r3, r7, #3
 8009052:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	23ae      	movs	r3, #174	; 0xae
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	58d3      	ldr	r3, [r2, r3]
 800905c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800905e:	1cfb      	adds	r3, r7, #3
 8009060:	781a      	ldrb	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	0011      	movs	r1, r2
 8009066:	0018      	movs	r0, r3
 8009068:	f002 f845 	bl	800b0f6 <USBD_LL_GetRxDataSize>
 800906c:	0001      	movs	r1, r0
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	2383      	movs	r3, #131	; 0x83
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	23ae      	movs	r3, #174	; 0xae
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	58d3      	ldr	r3, [r2, r3]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d011      	beq.n	80090a6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	23af      	movs	r3, #175	; 0xaf
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	58d3      	ldr	r3, [r2, r3]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	68f9      	ldr	r1, [r7, #12]
 800908e:	2381      	movs	r3, #129	; 0x81
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	58c8      	ldr	r0, [r1, r3]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2183      	movs	r1, #131	; 0x83
 8009098:	0089      	lsls	r1, r1, #2
 800909a:	468c      	mov	ip, r1
 800909c:	4463      	add	r3, ip
 800909e:	0019      	movs	r1, r3
 80090a0:	4790      	blx	r2

    return USBD_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e000      	b.n	80090a8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80090a6:	2302      	movs	r3, #2
  }
}
 80090a8:	0018      	movs	r0, r3
 80090aa:	46bd      	mov	sp, r7
 80090ac:	b004      	add	sp, #16
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80090b0:	b590      	push	{r4, r7, lr}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	23ae      	movs	r3, #174	; 0xae
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	58d3      	ldr	r3, [r2, r3]
 80090c0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	23af      	movs	r3, #175	; 0xaf
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	58d3      	ldr	r3, [r2, r3]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d019      	beq.n	8009102 <USBD_CDC_EP0_RxReady+0x52>
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	2380      	movs	r3, #128	; 0x80
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	5cd3      	ldrb	r3, [r2, r3]
 80090d6:	2bff      	cmp	r3, #255	; 0xff
 80090d8:	d013      	beq.n	8009102 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	23af      	movs	r3, #175	; 0xaf
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	58d3      	ldr	r3, [r2, r3]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	68f9      	ldr	r1, [r7, #12]
 80090e6:	2280      	movs	r2, #128	; 0x80
 80090e8:	0092      	lsls	r2, r2, #2
 80090ea:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80090ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	4c06      	ldr	r4, [pc, #24]	; (800910c <USBD_CDC_EP0_RxReady+0x5c>)
 80090f2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80090f4:	b292      	uxth	r2, r2
 80090f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	2380      	movs	r3, #128	; 0x80
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	21ff      	movs	r1, #255	; 0xff
 8009100:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	0018      	movs	r0, r3
 8009106:	46bd      	mov	sp, r7
 8009108:	b005      	add	sp, #20
 800910a:	bd90      	pop	{r4, r7, pc}
 800910c:	00000201 	.word	0x00000201

08009110 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2243      	movs	r2, #67	; 0x43
 800911c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800911e:	4b02      	ldr	r3, [pc, #8]	; (8009128 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8009120:	0018      	movs	r0, r3
 8009122:	46bd      	mov	sp, r7
 8009124:	b002      	add	sp, #8
 8009126:	bd80      	pop	{r7, pc}
 8009128:	20000094 	.word	0x20000094

0800912c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2243      	movs	r2, #67	; 0x43
 8009138:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800913a:	4b02      	ldr	r3, [pc, #8]	; (8009144 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800913c:	0018      	movs	r0, r3
 800913e:	46bd      	mov	sp, r7
 8009140:	b002      	add	sp, #8
 8009142:	bd80      	pop	{r7, pc}
 8009144:	20000050 	.word	0x20000050

08009148 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2243      	movs	r2, #67	; 0x43
 8009154:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009156:	4b02      	ldr	r3, [pc, #8]	; (8009160 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8009158:	0018      	movs	r0, r3
 800915a:	46bd      	mov	sp, r7
 800915c:	b002      	add	sp, #8
 800915e:	bd80      	pop	{r7, pc}
 8009160:	200000d8 	.word	0x200000d8

08009164 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	220a      	movs	r2, #10
 8009170:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009172:	4b02      	ldr	r3, [pc, #8]	; (800917c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8009174:	0018      	movs	r0, r3
 8009176:	46bd      	mov	sp, r7
 8009178:	b002      	add	sp, #8
 800917a:	bd80      	pop	{r7, pc}
 800917c:	2000000c 	.word	0x2000000c

08009180 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800918a:	200f      	movs	r0, #15
 800918c:	183b      	adds	r3, r7, r0
 800918e:	2202      	movs	r2, #2
 8009190:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d007      	beq.n	80091a8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	23af      	movs	r3, #175	; 0xaf
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80091a2:	183b      	adds	r3, r7, r0
 80091a4:	2200      	movs	r2, #0
 80091a6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80091a8:	230f      	movs	r3, #15
 80091aa:	18fb      	adds	r3, r7, r3
 80091ac:	781b      	ldrb	r3, [r3, #0]
}
 80091ae:	0018      	movs	r0, r3
 80091b0:	46bd      	mov	sp, r7
 80091b2:	b004      	add	sp, #16
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	1dbb      	adds	r3, r7, #6
 80091c2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	23ae      	movs	r3, #174	; 0xae
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	58d3      	ldr	r3, [r2, r3]
 80091cc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	2382      	movs	r3, #130	; 0x82
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	68b9      	ldr	r1, [r7, #8]
 80091d6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80091d8:	1dbb      	adds	r3, r7, #6
 80091da:	8819      	ldrh	r1, [r3, #0]
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	2384      	movs	r3, #132	; 0x84
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	0018      	movs	r0, r3
 80091e8:	46bd      	mov	sp, r7
 80091ea:	b006      	add	sp, #24
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	23ae      	movs	r3, #174	; 0xae
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	58d3      	ldr	r3, [r2, r3]
 8009200:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	2381      	movs	r3, #129	; 0x81
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	0018      	movs	r0, r3
 8009210:	46bd      	mov	sp, r7
 8009212:	b004      	add	sp, #16
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	23ae      	movs	r3, #174	; 0xae
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	58d3      	ldr	r3, [r2, r3]
 8009226:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	23ae      	movs	r3, #174	; 0xae
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	58d3      	ldr	r3, [r2, r3]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d022      	beq.n	800927a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	2385      	movs	r3, #133	; 0x85
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	58d3      	ldr	r3, [r2, r3]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d11a      	bne.n	8009276 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	2385      	movs	r3, #133	; 0x85
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	2101      	movs	r1, #1
 8009248:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	2384      	movs	r3, #132	; 0x84
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	58d2      	ldr	r2, [r2, r3]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	2382      	movs	r3, #130	; 0x82
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	2384      	movs	r3, #132	; 0x84
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009266:	b29b      	uxth	r3, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	000a      	movs	r2, r1
 800926c:	2181      	movs	r1, #129	; 0x81
 800926e:	f001 fed4 	bl	800b01a <USBD_LL_Transmit>

      return USBD_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	e002      	b.n	800927c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8009276:	2301      	movs	r3, #1
 8009278:	e000      	b.n	800927c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800927a:	2302      	movs	r3, #2
  }
}
 800927c:	0018      	movs	r0, r3
 800927e:	46bd      	mov	sp, r7
 8009280:	b004      	add	sp, #16
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	23ae      	movs	r3, #174	; 0xae
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	58d3      	ldr	r3, [r2, r3]
 8009294:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	23ae      	movs	r3, #174	; 0xae
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	58d3      	ldr	r3, [r2, r3]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d019      	beq.n	80092d6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	7c1b      	ldrb	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10a      	bne.n	80092c0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	2381      	movs	r3, #129	; 0x81
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	58d2      	ldr	r2, [r2, r3]
 80092b2:	2380      	movs	r3, #128	; 0x80
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	2101      	movs	r1, #1
 80092ba:	f001 fee5 	bl	800b088 <USBD_LL_PrepareReceive>
 80092be:	e008      	b.n	80092d2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	2381      	movs	r3, #129	; 0x81
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	58d2      	ldr	r2, [r2, r3]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	2340      	movs	r3, #64	; 0x40
 80092cc:	2101      	movs	r1, #1
 80092ce:	f001 fedb 	bl	800b088 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	e000      	b.n	80092d8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80092d6:	2302      	movs	r3, #2
  }
}
 80092d8:	0018      	movs	r0, r3
 80092da:	46bd      	mov	sp, r7
 80092dc:	b004      	add	sp, #16
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	1dfb      	adds	r3, r7, #7
 80092ec:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80092f4:	2302      	movs	r3, #2
 80092f6:	e020      	b.n	800933a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	23ad      	movs	r3, #173	; 0xad
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	58d3      	ldr	r3, [r2, r3]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d004      	beq.n	800930e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	23ad      	movs	r3, #173	; 0xad
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	2100      	movs	r1, #0
 800930c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	23ac      	movs	r3, #172	; 0xac
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	68b9      	ldr	r1, [r7, #8]
 800931c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	23a7      	movs	r3, #167	; 0xa7
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	2101      	movs	r1, #1
 8009326:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	1dfa      	adds	r2, r7, #7
 800932c:	7812      	ldrb	r2, [r2, #0]
 800932e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	0018      	movs	r0, r3
 8009334:	f001 fcd4 	bl	800ace0 <USBD_LL_Init>

  return USBD_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	0018      	movs	r0, r3
 800933c:	46bd      	mov	sp, r7
 800933e:	b004      	add	sp, #16
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800934c:	200f      	movs	r0, #15
 800934e:	183b      	adds	r3, r7, r0
 8009350:	2200      	movs	r2, #0
 8009352:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d008      	beq.n	800936c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	23ad      	movs	r3, #173	; 0xad
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8009364:	183b      	adds	r3, r7, r0
 8009366:	2200      	movs	r2, #0
 8009368:	701a      	strb	r2, [r3, #0]
 800936a:	e003      	b.n	8009374 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800936c:	230f      	movs	r3, #15
 800936e:	18fb      	adds	r3, r7, r3
 8009370:	2202      	movs	r2, #2
 8009372:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009374:	230f      	movs	r3, #15
 8009376:	18fb      	adds	r3, r7, r3
 8009378:	781b      	ldrb	r3, [r3, #0]
}
 800937a:	0018      	movs	r0, r3
 800937c:	46bd      	mov	sp, r7
 800937e:	b004      	add	sp, #16
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	0018      	movs	r0, r3
 800938e:	f001 fd0b 	bl	800ada8 <USBD_LL_Start>

  return USBD_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	0018      	movs	r0, r3
 8009396:	46bd      	mov	sp, r7
 8009398:	b002      	add	sp, #8
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	0018      	movs	r0, r3
 80093a8:	46bd      	mov	sp, r7
 80093aa:	b002      	add	sp, #8
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80093ae:	b590      	push	{r4, r7, lr}
 80093b0:	b085      	sub	sp, #20
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	000a      	movs	r2, r1
 80093b8:	1cfb      	adds	r3, r7, #3
 80093ba:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80093bc:	240f      	movs	r4, #15
 80093be:	193b      	adds	r3, r7, r4
 80093c0:	2202      	movs	r2, #2
 80093c2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	23ad      	movs	r3, #173	; 0xad
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	58d3      	ldr	r3, [r2, r3]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00e      	beq.n	80093ee <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	23ad      	movs	r3, #173	; 0xad
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	58d3      	ldr	r3, [r2, r3]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	1cfa      	adds	r2, r7, #3
 80093dc:	7811      	ldrb	r1, [r2, #0]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	0010      	movs	r0, r2
 80093e2:	4798      	blx	r3
 80093e4:	1e03      	subs	r3, r0, #0
 80093e6:	d102      	bne.n	80093ee <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80093e8:	193b      	adds	r3, r7, r4
 80093ea:	2200      	movs	r2, #0
 80093ec:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80093ee:	230f      	movs	r3, #15
 80093f0:	18fb      	adds	r3, r7, r3
 80093f2:	781b      	ldrb	r3, [r3, #0]
}
 80093f4:	0018      	movs	r0, r3
 80093f6:	46bd      	mov	sp, r7
 80093f8:	b005      	add	sp, #20
 80093fa:	bd90      	pop	{r4, r7, pc}

080093fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	000a      	movs	r2, r1
 8009406:	1cfb      	adds	r3, r7, #3
 8009408:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	23ad      	movs	r3, #173	; 0xad
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	58d3      	ldr	r3, [r2, r3]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	1cfa      	adds	r2, r7, #3
 8009416:	7811      	ldrb	r1, [r2, #0]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	0010      	movs	r0, r2
 800941c:	4798      	blx	r3

  return USBD_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	0018      	movs	r0, r3
 8009422:	46bd      	mov	sp, r7
 8009424:	b002      	add	sp, #8
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	22aa      	movs	r2, #170	; 0xaa
 8009436:	0092      	lsls	r2, r2, #2
 8009438:	4694      	mov	ip, r2
 800943a:	4463      	add	r3, ip
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	0011      	movs	r1, r2
 8009440:	0018      	movs	r0, r3
 8009442:	f001 f810 	bl	800a466 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	23a5      	movs	r3, #165	; 0xa5
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	2101      	movs	r1, #1
 800944e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a23      	ldr	r2, [pc, #140]	; (80094e0 <USBD_LL_SetupStage+0xb8>)
 8009454:	5a9b      	ldrh	r3, [r3, r2]
 8009456:	0019      	movs	r1, r3
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	23a6      	movs	r3, #166	; 0xa6
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	23aa      	movs	r3, #170	; 0xaa
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	5cd3      	ldrb	r3, [r2, r3]
 8009468:	001a      	movs	r2, r3
 800946a:	231f      	movs	r3, #31
 800946c:	4013      	ands	r3, r2
 800946e:	2b02      	cmp	r3, #2
 8009470:	d019      	beq.n	80094a6 <USBD_LL_SetupStage+0x7e>
 8009472:	d822      	bhi.n	80094ba <USBD_LL_SetupStage+0x92>
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <USBD_LL_SetupStage+0x56>
 8009478:	2b01      	cmp	r3, #1
 800947a:	d00a      	beq.n	8009492 <USBD_LL_SetupStage+0x6a>
 800947c:	e01d      	b.n	80094ba <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	22aa      	movs	r2, #170	; 0xaa
 8009482:	0092      	lsls	r2, r2, #2
 8009484:	189a      	adds	r2, r3, r2
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	0011      	movs	r1, r2
 800948a:	0018      	movs	r0, r3
 800948c:	f000 fa10 	bl	80098b0 <USBD_StdDevReq>
      break;
 8009490:	e020      	b.n	80094d4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	22aa      	movs	r2, #170	; 0xaa
 8009496:	0092      	lsls	r2, r2, #2
 8009498:	189a      	adds	r2, r3, r2
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	0011      	movs	r1, r2
 800949e:	0018      	movs	r0, r3
 80094a0:	f000 fa78 	bl	8009994 <USBD_StdItfReq>
      break;
 80094a4:	e016      	b.n	80094d4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	22aa      	movs	r2, #170	; 0xaa
 80094aa:	0092      	lsls	r2, r2, #2
 80094ac:	189a      	adds	r2, r3, r2
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	0011      	movs	r1, r2
 80094b2:	0018      	movs	r0, r3
 80094b4:	f000 fac5 	bl	8009a42 <USBD_StdEPReq>
      break;
 80094b8:	e00c      	b.n	80094d4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	23aa      	movs	r3, #170	; 0xaa
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	5cd3      	ldrb	r3, [r2, r3]
 80094c2:	227f      	movs	r2, #127	; 0x7f
 80094c4:	4393      	bics	r3, r2
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	0011      	movs	r1, r2
 80094cc:	0018      	movs	r0, r3
 80094ce:	f001 fcf2 	bl	800aeb6 <USBD_LL_StallEP>
      break;
 80094d2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	0018      	movs	r0, r3
 80094d8:	46bd      	mov	sp, r7
 80094da:	b002      	add	sp, #8
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	46c0      	nop			; (mov r8, r8)
 80094e0:	000002ae 	.word	0x000002ae

080094e4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	607a      	str	r2, [r7, #4]
 80094ee:	200b      	movs	r0, #11
 80094f0:	183b      	adds	r3, r7, r0
 80094f2:	1c0a      	adds	r2, r1, #0
 80094f4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80094f6:	183b      	adds	r3, r7, r0
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d154      	bne.n	80095a8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3355      	adds	r3, #85	; 0x55
 8009502:	33ff      	adds	r3, #255	; 0xff
 8009504:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	23a5      	movs	r3, #165	; 0xa5
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	58d3      	ldr	r3, [r2, r3]
 800950e:	2b03      	cmp	r3, #3
 8009510:	d139      	bne.n	8009586 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	68da      	ldr	r2, [r3, #12]
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	429a      	cmp	r2, r3
 800951c:	d919      	bls.n	8009552 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	1ad2      	subs	r2, r2, r3
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	68da      	ldr	r2, [r3, #12]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009534:	429a      	cmp	r2, r3
 8009536:	d203      	bcs.n	8009540 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800953c:	b29b      	uxth	r3, r3
 800953e:	e002      	b.n	8009546 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009544:	b29b      	uxth	r3, r3
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	001a      	movs	r2, r3
 800954c:	f001 f89b 	bl	800a686 <USBD_CtlContinueRx>
 8009550:	e045      	b.n	80095de <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	23ad      	movs	r3, #173	; 0xad
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	58d3      	ldr	r3, [r2, r3]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00d      	beq.n	800957c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	23a7      	movs	r3, #167	; 0xa7
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009568:	2b03      	cmp	r3, #3
 800956a:	d107      	bne.n	800957c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	23ad      	movs	r3, #173	; 0xad
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	58d3      	ldr	r3, [r2, r3]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	0010      	movs	r0, r2
 800957a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	0018      	movs	r0, r3
 8009580:	f001 f894 	bl	800a6ac <USBD_CtlSendStatus>
 8009584:	e02b      	b.n	80095de <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	23a5      	movs	r3, #165	; 0xa5
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	58d3      	ldr	r3, [r2, r3]
 800958e:	2b05      	cmp	r3, #5
 8009590:	d125      	bne.n	80095de <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	23a5      	movs	r3, #165	; 0xa5
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	2100      	movs	r1, #0
 800959a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2100      	movs	r1, #0
 80095a0:	0018      	movs	r0, r3
 80095a2:	f001 fc88 	bl	800aeb6 <USBD_LL_StallEP>
 80095a6:	e01a      	b.n	80095de <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	23ad      	movs	r3, #173	; 0xad
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	58d3      	ldr	r3, [r2, r3]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d011      	beq.n	80095da <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	23a7      	movs	r3, #167	; 0xa7
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d10b      	bne.n	80095da <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	23ad      	movs	r3, #173	; 0xad
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	58d3      	ldr	r3, [r2, r3]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	220b      	movs	r2, #11
 80095ce:	18ba      	adds	r2, r7, r2
 80095d0:	7811      	ldrb	r1, [r2, #0]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	0010      	movs	r0, r2
 80095d6:	4798      	blx	r3
 80095d8:	e001      	b.n	80095de <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095da:	2302      	movs	r3, #2
 80095dc:	e000      	b.n	80095e0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	0018      	movs	r0, r3
 80095e2:	46bd      	mov	sp, r7
 80095e4:	b006      	add	sp, #24
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	607a      	str	r2, [r7, #4]
 80095f2:	200b      	movs	r0, #11
 80095f4:	183b      	adds	r3, r7, r0
 80095f6:	1c0a      	adds	r2, r1, #0
 80095f8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80095fa:	183b      	adds	r3, r7, r0
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d000      	beq.n	8009604 <USBD_LL_DataInStage+0x1c>
 8009602:	e08e      	b.n	8009722 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3314      	adds	r3, #20
 8009608:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	23a5      	movs	r3, #165	; 0xa5
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	58d3      	ldr	r3, [r2, r3]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d164      	bne.n	80096e0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	429a      	cmp	r2, r3
 8009620:	d915      	bls.n	800964e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	1ad2      	subs	r2, r2, r3
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	b29a      	uxth	r2, r3
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	0018      	movs	r0, r3
 800963c:	f000 ffec 	bl	800a618 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	2300      	movs	r3, #0
 8009644:	2200      	movs	r2, #0
 8009646:	2100      	movs	r1, #0
 8009648:	f001 fd1e 	bl	800b088 <USBD_LL_PrepareReceive>
 800964c:	e059      	b.n	8009702 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	0019      	movs	r1, r3
 8009658:	0010      	movs	r0, r2
 800965a:	f7f6 fded 	bl	8000238 <__aeabi_uidivmod>
 800965e:	1e0b      	subs	r3, r1, #0
 8009660:	d11f      	bne.n	80096a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	689a      	ldr	r2, [r3, #8]
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800966a:	429a      	cmp	r2, r3
 800966c:	d319      	bcc.n	80096a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	689a      	ldr	r2, [r3, #8]
 8009672:	68f9      	ldr	r1, [r7, #12]
 8009674:	23a6      	movs	r3, #166	; 0xa6
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800967a:	429a      	cmp	r2, r3
 800967c:	d211      	bcs.n	80096a2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	2100      	movs	r1, #0
 8009684:	0018      	movs	r0, r3
 8009686:	f000 ffc7 	bl	800a618 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	23a6      	movs	r3, #166	; 0xa6
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	2100      	movs	r1, #0
 8009692:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	2300      	movs	r3, #0
 8009698:	2200      	movs	r2, #0
 800969a:	2100      	movs	r1, #0
 800969c:	f001 fcf4 	bl	800b088 <USBD_LL_PrepareReceive>
 80096a0:	e02f      	b.n	8009702 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	23ad      	movs	r3, #173	; 0xad
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	58d3      	ldr	r3, [r2, r3]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00d      	beq.n	80096cc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	23a7      	movs	r3, #167	; 0xa7
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d107      	bne.n	80096cc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	23ad      	movs	r3, #173	; 0xad
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	58d3      	ldr	r3, [r2, r3]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	0010      	movs	r0, r2
 80096ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2180      	movs	r1, #128	; 0x80
 80096d0:	0018      	movs	r0, r3
 80096d2:	f001 fbf0 	bl	800aeb6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	0018      	movs	r0, r3
 80096da:	f000 fffb 	bl	800a6d4 <USBD_CtlReceiveStatus>
 80096de:	e010      	b.n	8009702 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	23a5      	movs	r3, #165	; 0xa5
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	58d3      	ldr	r3, [r2, r3]
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d005      	beq.n	80096f8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	23a5      	movs	r3, #165	; 0xa5
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d104      	bne.n	8009702 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2180      	movs	r1, #128	; 0x80
 80096fc:	0018      	movs	r0, r3
 80096fe:	f001 fbda 	bl	800aeb6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	23a8      	movs	r3, #168	; 0xa8
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	5cd3      	ldrb	r3, [r2, r3]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d124      	bne.n	8009758 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	0018      	movs	r0, r3
 8009712:	f7ff fe43 	bl	800939c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	23a8      	movs	r3, #168	; 0xa8
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	2100      	movs	r1, #0
 800971e:	54d1      	strb	r1, [r2, r3]
 8009720:	e01a      	b.n	8009758 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	23ad      	movs	r3, #173	; 0xad
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	58d3      	ldr	r3, [r2, r3]
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d011      	beq.n	8009754 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	23a7      	movs	r3, #167	; 0xa7
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8009738:	2b03      	cmp	r3, #3
 800973a:	d10b      	bne.n	8009754 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	23ad      	movs	r3, #173	; 0xad
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	58d3      	ldr	r3, [r2, r3]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	220b      	movs	r2, #11
 8009748:	18ba      	adds	r2, r7, r2
 800974a:	7811      	ldrb	r1, [r2, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	0010      	movs	r0, r2
 8009750:	4798      	blx	r3
 8009752:	e001      	b.n	8009758 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009754:	2302      	movs	r3, #2
 8009756:	e000      	b.n	800975a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	0018      	movs	r0, r3
 800975c:	46bd      	mov	sp, r7
 800975e:	b006      	add	sp, #24
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	2340      	movs	r3, #64	; 0x40
 800976e:	2200      	movs	r2, #0
 8009770:	2100      	movs	r1, #0
 8009772:	f001 fb3e 	bl	800adf2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	23ac      	movs	r3, #172	; 0xac
 800977a:	005b      	lsls	r3, r3, #1
 800977c:	2101      	movs	r1, #1
 800977e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	23b2      	movs	r3, #178	; 0xb2
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	2140      	movs	r1, #64	; 0x40
 8009788:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	2340      	movs	r3, #64	; 0x40
 800978e:	2200      	movs	r2, #0
 8009790:	2180      	movs	r1, #128	; 0x80
 8009792:	f001 fb2e 	bl	800adf2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2240      	movs	r2, #64	; 0x40
 80097a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	23a7      	movs	r3, #167	; 0xa7
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	2101      	movs	r1, #1
 80097aa:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	23a5      	movs	r3, #165	; 0xa5
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	2100      	movs	r1, #0
 80097b4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	23a9      	movs	r3, #169	; 0xa9
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	2100      	movs	r1, #0
 80097c4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	23ae      	movs	r3, #174	; 0xae
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	58d3      	ldr	r3, [r2, r3]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	23ad      	movs	r3, #173	; 0xad
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	58d3      	ldr	r3, [r2, r3]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	b2d9      	uxtb	r1, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	0018      	movs	r0, r3
 80097e6:	4790      	blx	r2
  }

  return USBD_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	0018      	movs	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	b002      	add	sp, #8
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b082      	sub	sp, #8
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	000a      	movs	r2, r1
 80097fc:	1cfb      	adds	r3, r7, #3
 80097fe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	1cfa      	adds	r2, r7, #3
 8009804:	7812      	ldrb	r2, [r2, #0]
 8009806:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	0018      	movs	r0, r3
 800980c:	46bd      	mov	sp, r7
 800980e:	b002      	add	sp, #8
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	23a7      	movs	r3, #167	; 0xa7
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	5cd1      	ldrb	r1, [r2, r3]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a06      	ldr	r2, [pc, #24]	; (8009840 <USBD_LL_Suspend+0x2c>)
 8009828:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	23a7      	movs	r3, #167	; 0xa7
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	2104      	movs	r1, #4
 8009832:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	0018      	movs	r0, r3
 8009838:	46bd      	mov	sp, r7
 800983a:	b002      	add	sp, #8
 800983c:	bd80      	pop	{r7, pc}
 800983e:	46c0      	nop			; (mov r8, r8)
 8009840:	0000029d 	.word	0x0000029d

08009844 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	23a7      	movs	r3, #167	; 0xa7
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	5cd3      	ldrb	r3, [r2, r3]
 8009854:	2b04      	cmp	r3, #4
 8009856:	d106      	bne.n	8009866 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a05      	ldr	r2, [pc, #20]	; (8009870 <USBD_LL_Resume+0x2c>)
 800985c:	5c99      	ldrb	r1, [r3, r2]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	23a7      	movs	r3, #167	; 0xa7
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	0018      	movs	r0, r3
 800986a:	46bd      	mov	sp, r7
 800986c:	b002      	add	sp, #8
 800986e:	bd80      	pop	{r7, pc}
 8009870:	0000029d 	.word	0x0000029d

08009874 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	23a7      	movs	r3, #167	; 0xa7
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	5cd3      	ldrb	r3, [r2, r3]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d10e      	bne.n	80098a6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	23ad      	movs	r3, #173	; 0xad
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	58d3      	ldr	r3, [r2, r3]
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d007      	beq.n	80098a6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	23ad      	movs	r3, #173	; 0xad
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	58d3      	ldr	r3, [r2, r3]
 800989e:	69db      	ldr	r3, [r3, #28]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	0010      	movs	r0, r2
 80098a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	0018      	movs	r0, r3
 80098aa:	46bd      	mov	sp, r7
 80098ac:	b002      	add	sp, #8
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098ba:	230f      	movs	r3, #15
 80098bc:	18fb      	adds	r3, r7, r3
 80098be:	2200      	movs	r2, #0
 80098c0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	001a      	movs	r2, r3
 80098c8:	2360      	movs	r3, #96	; 0x60
 80098ca:	4013      	ands	r3, r2
 80098cc:	2b40      	cmp	r3, #64	; 0x40
 80098ce:	d004      	beq.n	80098da <USBD_StdDevReq+0x2a>
 80098d0:	d84f      	bhi.n	8009972 <USBD_StdDevReq+0xc2>
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00b      	beq.n	80098ee <USBD_StdDevReq+0x3e>
 80098d6:	2b20      	cmp	r3, #32
 80098d8:	d14b      	bne.n	8009972 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	23ad      	movs	r3, #173	; 0xad
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	58d3      	ldr	r3, [r2, r3]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	0010      	movs	r0, r2
 80098ea:	4798      	blx	r3
      break;
 80098ec:	e048      	b.n	8009980 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	785b      	ldrb	r3, [r3, #1]
 80098f2:	2b09      	cmp	r3, #9
 80098f4:	d835      	bhi.n	8009962 <USBD_StdDevReq+0xb2>
 80098f6:	009a      	lsls	r2, r3, #2
 80098f8:	4b25      	ldr	r3, [pc, #148]	; (8009990 <USBD_StdDevReq+0xe0>)
 80098fa:	18d3      	adds	r3, r2, r3
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	0011      	movs	r1, r2
 8009906:	0018      	movs	r0, r3
 8009908:	f000 fa52 	bl	8009db0 <USBD_GetDescriptor>
          break;
 800990c:	e030      	b.n	8009970 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	0011      	movs	r1, r2
 8009914:	0018      	movs	r0, r3
 8009916:	f000 fbfd 	bl	800a114 <USBD_SetAddress>
          break;
 800991a:	e029      	b.n	8009970 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	0011      	movs	r1, r2
 8009922:	0018      	movs	r0, r3
 8009924:	f000 fc4a 	bl	800a1bc <USBD_SetConfig>
          break;
 8009928:	e022      	b.n	8009970 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	0011      	movs	r1, r2
 8009930:	0018      	movs	r0, r3
 8009932:	f000 fce7 	bl	800a304 <USBD_GetConfig>
          break;
 8009936:	e01b      	b.n	8009970 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	0011      	movs	r1, r2
 800993e:	0018      	movs	r0, r3
 8009940:	f000 fd1b 	bl	800a37a <USBD_GetStatus>
          break;
 8009944:	e014      	b.n	8009970 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	0011      	movs	r1, r2
 800994c:	0018      	movs	r0, r3
 800994e:	f000 fd4e 	bl	800a3ee <USBD_SetFeature>
          break;
 8009952:	e00d      	b.n	8009970 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009954:	683a      	ldr	r2, [r7, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	0011      	movs	r1, r2
 800995a:	0018      	movs	r0, r3
 800995c:	f000 fd5d 	bl	800a41a <USBD_ClrFeature>
          break;
 8009960:	e006      	b.n	8009970 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	0011      	movs	r1, r2
 8009968:	0018      	movs	r0, r3
 800996a:	f000 fdb7 	bl	800a4dc <USBD_CtlError>
          break;
 800996e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009970:	e006      	b.n	8009980 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	0011      	movs	r1, r2
 8009978:	0018      	movs	r0, r3
 800997a:	f000 fdaf 	bl	800a4dc <USBD_CtlError>
      break;
 800997e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009980:	230f      	movs	r3, #15
 8009982:	18fb      	adds	r3, r7, r3
 8009984:	781b      	ldrb	r3, [r3, #0]
}
 8009986:	0018      	movs	r0, r3
 8009988:	46bd      	mov	sp, r7
 800998a:	b004      	add	sp, #16
 800998c:	bd80      	pop	{r7, pc}
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	0800bbac 	.word	0x0800bbac

08009994 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009994:	b5b0      	push	{r4, r5, r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800999e:	230f      	movs	r3, #15
 80099a0:	18fb      	adds	r3, r7, r3
 80099a2:	2200      	movs	r2, #0
 80099a4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	001a      	movs	r2, r3
 80099ac:	2360      	movs	r3, #96	; 0x60
 80099ae:	4013      	ands	r3, r2
 80099b0:	2b40      	cmp	r3, #64	; 0x40
 80099b2:	d004      	beq.n	80099be <USBD_StdItfReq+0x2a>
 80099b4:	d839      	bhi.n	8009a2a <USBD_StdItfReq+0x96>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d001      	beq.n	80099be <USBD_StdItfReq+0x2a>
 80099ba:	2b20      	cmp	r3, #32
 80099bc:	d135      	bne.n	8009a2a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	23a7      	movs	r3, #167	; 0xa7
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	5cd3      	ldrb	r3, [r2, r3]
 80099c6:	3b01      	subs	r3, #1
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d825      	bhi.n	8009a18 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	889b      	ldrh	r3, [r3, #4]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d819      	bhi.n	8009a0a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	23ad      	movs	r3, #173	; 0xad
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	58d3      	ldr	r3, [r2, r3]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	250f      	movs	r5, #15
 80099e2:	197c      	adds	r4, r7, r5
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	0010      	movs	r0, r2
 80099ea:	4798      	blx	r3
 80099ec:	0003      	movs	r3, r0
 80099ee:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	88db      	ldrh	r3, [r3, #6]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d116      	bne.n	8009a26 <USBD_StdItfReq+0x92>
 80099f8:	197b      	adds	r3, r7, r5
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d112      	bne.n	8009a26 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	0018      	movs	r0, r3
 8009a04:	f000 fe52 	bl	800a6ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a08:	e00d      	b.n	8009a26 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	0011      	movs	r1, r2
 8009a10:	0018      	movs	r0, r3
 8009a12:	f000 fd63 	bl	800a4dc <USBD_CtlError>
          break;
 8009a16:	e006      	b.n	8009a26 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	0011      	movs	r1, r2
 8009a1e:	0018      	movs	r0, r3
 8009a20:	f000 fd5c 	bl	800a4dc <USBD_CtlError>
          break;
 8009a24:	e000      	b.n	8009a28 <USBD_StdItfReq+0x94>
          break;
 8009a26:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009a28:	e006      	b.n	8009a38 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	0011      	movs	r1, r2
 8009a30:	0018      	movs	r0, r3
 8009a32:	f000 fd53 	bl	800a4dc <USBD_CtlError>
      break;
 8009a36:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	b004      	add	sp, #16
 8009a40:	bdb0      	pop	{r4, r5, r7, pc}

08009a42 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009a42:	b5b0      	push	{r4, r5, r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a4c:	230f      	movs	r3, #15
 8009a4e:	18fb      	adds	r3, r7, r3
 8009a50:	2200      	movs	r2, #0
 8009a52:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	889a      	ldrh	r2, [r3, #4]
 8009a58:	230e      	movs	r3, #14
 8009a5a:	18fb      	adds	r3, r7, r3
 8009a5c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	001a      	movs	r2, r3
 8009a64:	2360      	movs	r3, #96	; 0x60
 8009a66:	4013      	ands	r3, r2
 8009a68:	2b40      	cmp	r3, #64	; 0x40
 8009a6a:	d006      	beq.n	8009a7a <USBD_StdEPReq+0x38>
 8009a6c:	d900      	bls.n	8009a70 <USBD_StdEPReq+0x2e>
 8009a6e:	e190      	b.n	8009d92 <USBD_StdEPReq+0x350>
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00c      	beq.n	8009a8e <USBD_StdEPReq+0x4c>
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d000      	beq.n	8009a7a <USBD_StdEPReq+0x38>
 8009a78:	e18b      	b.n	8009d92 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	23ad      	movs	r3, #173	; 0xad
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	58d3      	ldr	r3, [r2, r3]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	0010      	movs	r0, r2
 8009a8a:	4798      	blx	r3
      break;
 8009a8c:	e188      	b.n	8009da0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	001a      	movs	r2, r3
 8009a94:	2360      	movs	r3, #96	; 0x60
 8009a96:	4013      	ands	r3, r2
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	d10f      	bne.n	8009abc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	23ad      	movs	r3, #173	; 0xad
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	58d3      	ldr	r3, [r2, r3]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	250f      	movs	r5, #15
 8009aa8:	197c      	adds	r4, r7, r5
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	0010      	movs	r0, r2
 8009ab0:	4798      	blx	r3
 8009ab2:	0003      	movs	r3, r0
 8009ab4:	7023      	strb	r3, [r4, #0]

        return ret;
 8009ab6:	197b      	adds	r3, r7, r5
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	e174      	b.n	8009da6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	785b      	ldrb	r3, [r3, #1]
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d007      	beq.n	8009ad4 <USBD_StdEPReq+0x92>
 8009ac4:	dd00      	ble.n	8009ac8 <USBD_StdEPReq+0x86>
 8009ac6:	e15c      	b.n	8009d82 <USBD_StdEPReq+0x340>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d100      	bne.n	8009ace <USBD_StdEPReq+0x8c>
 8009acc:	e092      	b.n	8009bf4 <USBD_StdEPReq+0x1b2>
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d04b      	beq.n	8009b6a <USBD_StdEPReq+0x128>
 8009ad2:	e156      	b.n	8009d82 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	23a7      	movs	r3, #167	; 0xa7
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	5cd3      	ldrb	r3, [r2, r3]
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d002      	beq.n	8009ae6 <USBD_StdEPReq+0xa4>
 8009ae0:	2b03      	cmp	r3, #3
 8009ae2:	d01d      	beq.n	8009b20 <USBD_StdEPReq+0xde>
 8009ae4:	e039      	b.n	8009b5a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ae6:	220e      	movs	r2, #14
 8009ae8:	18bb      	adds	r3, r7, r2
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d010      	beq.n	8009b12 <USBD_StdEPReq+0xd0>
 8009af0:	18bb      	adds	r3, r7, r2
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b80      	cmp	r3, #128	; 0x80
 8009af6:	d00c      	beq.n	8009b12 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009af8:	18bb      	adds	r3, r7, r2
 8009afa:	781a      	ldrb	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	0011      	movs	r1, r2
 8009b00:	0018      	movs	r0, r3
 8009b02:	f001 f9d8 	bl	800aeb6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2180      	movs	r1, #128	; 0x80
 8009b0a:	0018      	movs	r0, r3
 8009b0c:	f001 f9d3 	bl	800aeb6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b10:	e02a      	b.n	8009b68 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	0011      	movs	r1, r2
 8009b18:	0018      	movs	r0, r3
 8009b1a:	f000 fcdf 	bl	800a4dc <USBD_CtlError>
              break;
 8009b1e:	e023      	b.n	8009b68 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	885b      	ldrh	r3, [r3, #2]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d113      	bne.n	8009b50 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8009b28:	220e      	movs	r2, #14
 8009b2a:	18bb      	adds	r3, r7, r2
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00e      	beq.n	8009b50 <USBD_StdEPReq+0x10e>
 8009b32:	18bb      	adds	r3, r7, r2
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	2b80      	cmp	r3, #128	; 0x80
 8009b38:	d00a      	beq.n	8009b50 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	88db      	ldrh	r3, [r3, #6]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b42:	18bb      	adds	r3, r7, r2
 8009b44:	781a      	ldrb	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	0011      	movs	r1, r2
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f001 f9b3 	bl	800aeb6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	0018      	movs	r0, r3
 8009b54:	f000 fdaa 	bl	800a6ac <USBD_CtlSendStatus>

              break;
 8009b58:	e006      	b.n	8009b68 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	0011      	movs	r1, r2
 8009b60:	0018      	movs	r0, r3
 8009b62:	f000 fcbb 	bl	800a4dc <USBD_CtlError>
              break;
 8009b66:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009b68:	e112      	b.n	8009d90 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	23a7      	movs	r3, #167	; 0xa7
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	5cd3      	ldrb	r3, [r2, r3]
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d002      	beq.n	8009b7c <USBD_StdEPReq+0x13a>
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d01d      	beq.n	8009bb6 <USBD_StdEPReq+0x174>
 8009b7a:	e032      	b.n	8009be2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b7c:	220e      	movs	r2, #14
 8009b7e:	18bb      	adds	r3, r7, r2
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d010      	beq.n	8009ba8 <USBD_StdEPReq+0x166>
 8009b86:	18bb      	adds	r3, r7, r2
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	2b80      	cmp	r3, #128	; 0x80
 8009b8c:	d00c      	beq.n	8009ba8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b8e:	18bb      	adds	r3, r7, r2
 8009b90:	781a      	ldrb	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	0011      	movs	r1, r2
 8009b96:	0018      	movs	r0, r3
 8009b98:	f001 f98d 	bl	800aeb6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2180      	movs	r1, #128	; 0x80
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f001 f988 	bl	800aeb6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ba6:	e024      	b.n	8009bf2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	0011      	movs	r1, r2
 8009bae:	0018      	movs	r0, r3
 8009bb0:	f000 fc94 	bl	800a4dc <USBD_CtlError>
              break;
 8009bb4:	e01d      	b.n	8009bf2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	885b      	ldrh	r3, [r3, #2]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d118      	bne.n	8009bf0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009bbe:	210e      	movs	r1, #14
 8009bc0:	187b      	adds	r3, r7, r1
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	227f      	movs	r2, #127	; 0x7f
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	d006      	beq.n	8009bd8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bca:	187b      	adds	r3, r7, r1
 8009bcc:	781a      	ldrb	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	0011      	movs	r1, r2
 8009bd2:	0018      	movs	r0, r3
 8009bd4:	f001 f99a 	bl	800af0c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	0018      	movs	r0, r3
 8009bdc:	f000 fd66 	bl	800a6ac <USBD_CtlSendStatus>
              }
              break;
 8009be0:	e006      	b.n	8009bf0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	0011      	movs	r1, r2
 8009be8:	0018      	movs	r0, r3
 8009bea:	f000 fc77 	bl	800a4dc <USBD_CtlError>
              break;
 8009bee:	e000      	b.n	8009bf2 <USBD_StdEPReq+0x1b0>
              break;
 8009bf0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009bf2:	e0cd      	b.n	8009d90 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	23a7      	movs	r3, #167	; 0xa7
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	5cd3      	ldrb	r3, [r2, r3]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d002      	beq.n	8009c06 <USBD_StdEPReq+0x1c4>
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d03c      	beq.n	8009c7e <USBD_StdEPReq+0x23c>
 8009c04:	e0b5      	b.n	8009d72 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c06:	220e      	movs	r2, #14
 8009c08:	18bb      	adds	r3, r7, r2
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00a      	beq.n	8009c26 <USBD_StdEPReq+0x1e4>
 8009c10:	18bb      	adds	r3, r7, r2
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	2b80      	cmp	r3, #128	; 0x80
 8009c16:	d006      	beq.n	8009c26 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	0011      	movs	r1, r2
 8009c1e:	0018      	movs	r0, r3
 8009c20:	f000 fc5c 	bl	800a4dc <USBD_CtlError>
                break;
 8009c24:	e0ac      	b.n	8009d80 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c26:	220e      	movs	r2, #14
 8009c28:	18bb      	adds	r3, r7, r2
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	b25b      	sxtb	r3, r3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	da0c      	bge.n	8009c4c <USBD_StdEPReq+0x20a>
 8009c32:	18bb      	adds	r3, r7, r2
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	227f      	movs	r2, #127	; 0x7f
 8009c38:	401a      	ands	r2, r3
 8009c3a:	0013      	movs	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	189b      	adds	r3, r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	3310      	adds	r3, #16
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	18d3      	adds	r3, r2, r3
 8009c48:	3304      	adds	r3, #4
 8009c4a:	e00d      	b.n	8009c68 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c4c:	230e      	movs	r3, #14
 8009c4e:	18fb      	adds	r3, r7, r3
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	227f      	movs	r2, #127	; 0x7f
 8009c54:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c56:	0013      	movs	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	189b      	adds	r3, r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	3351      	adds	r3, #81	; 0x51
 8009c60:	33ff      	adds	r3, #255	; 0xff
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	18d3      	adds	r3, r2, r3
 8009c66:	3304      	adds	r3, #4
 8009c68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c70:	68b9      	ldr	r1, [r7, #8]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2202      	movs	r2, #2
 8009c76:	0018      	movs	r0, r3
 8009c78:	f000 fcae 	bl	800a5d8 <USBD_CtlSendData>
              break;
 8009c7c:	e080      	b.n	8009d80 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c7e:	220e      	movs	r2, #14
 8009c80:	18bb      	adds	r3, r7, r2
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	b25b      	sxtb	r3, r3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	da14      	bge.n	8009cb4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c8a:	18bb      	adds	r3, r7, r2
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	220f      	movs	r2, #15
 8009c90:	401a      	ands	r2, r3
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	0013      	movs	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	189b      	adds	r3, r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	18cb      	adds	r3, r1, r3
 8009c9e:	3318      	adds	r3, #24
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d11e      	bne.n	8009ce4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	0011      	movs	r1, r2
 8009cac:	0018      	movs	r0, r3
 8009cae:	f000 fc15 	bl	800a4dc <USBD_CtlError>
                  break;
 8009cb2:	e065      	b.n	8009d80 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cb4:	230e      	movs	r3, #14
 8009cb6:	18fb      	adds	r3, r7, r3
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	220f      	movs	r2, #15
 8009cbc:	401a      	ands	r2, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	23ac      	movs	r3, #172	; 0xac
 8009cc2:	0059      	lsls	r1, r3, #1
 8009cc4:	0013      	movs	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	189b      	adds	r3, r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	18c3      	adds	r3, r0, r3
 8009cce:	185b      	adds	r3, r3, r1
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d106      	bne.n	8009ce4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	0011      	movs	r1, r2
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f000 fbfd 	bl	800a4dc <USBD_CtlError>
                  break;
 8009ce2:	e04d      	b.n	8009d80 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce4:	220e      	movs	r2, #14
 8009ce6:	18bb      	adds	r3, r7, r2
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	b25b      	sxtb	r3, r3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	da0c      	bge.n	8009d0a <USBD_StdEPReq+0x2c8>
 8009cf0:	18bb      	adds	r3, r7, r2
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	227f      	movs	r2, #127	; 0x7f
 8009cf6:	401a      	ands	r2, r3
 8009cf8:	0013      	movs	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	189b      	adds	r3, r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	3310      	adds	r3, #16
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	18d3      	adds	r3, r2, r3
 8009d06:	3304      	adds	r3, #4
 8009d08:	e00d      	b.n	8009d26 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d0a:	230e      	movs	r3, #14
 8009d0c:	18fb      	adds	r3, r7, r3
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	227f      	movs	r2, #127	; 0x7f
 8009d12:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d14:	0013      	movs	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	189b      	adds	r3, r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	3351      	adds	r3, #81	; 0x51
 8009d1e:	33ff      	adds	r3, #255	; 0xff
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	18d3      	adds	r3, r2, r3
 8009d24:	3304      	adds	r3, #4
 8009d26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d28:	220e      	movs	r2, #14
 8009d2a:	18bb      	adds	r3, r7, r2
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <USBD_StdEPReq+0x2f8>
 8009d32:	18bb      	adds	r3, r7, r2
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2b80      	cmp	r3, #128	; 0x80
 8009d38:	d103      	bne.n	8009d42 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	e010      	b.n	8009d64 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d42:	230e      	movs	r3, #14
 8009d44:	18fb      	adds	r3, r7, r3
 8009d46:	781a      	ldrb	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	0011      	movs	r1, r2
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f001 f908 	bl	800af62 <USBD_LL_IsStallEP>
 8009d52:	1e03      	subs	r3, r0, #0
 8009d54:	d003      	beq.n	8009d5e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	e002      	b.n	8009d64 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2202      	movs	r2, #2
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f000 fc34 	bl	800a5d8 <USBD_CtlSendData>
              break;
 8009d70:	e006      	b.n	8009d80 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	0011      	movs	r1, r2
 8009d78:	0018      	movs	r0, r3
 8009d7a:	f000 fbaf 	bl	800a4dc <USBD_CtlError>
              break;
 8009d7e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8009d80:	e006      	b.n	8009d90 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	0011      	movs	r1, r2
 8009d88:	0018      	movs	r0, r3
 8009d8a:	f000 fba7 	bl	800a4dc <USBD_CtlError>
          break;
 8009d8e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009d90:	e006      	b.n	8009da0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	0011      	movs	r1, r2
 8009d98:	0018      	movs	r0, r3
 8009d9a:	f000 fb9f 	bl	800a4dc <USBD_CtlError>
      break;
 8009d9e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009da0:	230f      	movs	r3, #15
 8009da2:	18fb      	adds	r3, r7, r3
 8009da4:	781b      	ldrb	r3, [r3, #0]
}
 8009da6:	0018      	movs	r0, r3
 8009da8:	46bd      	mov	sp, r7
 8009daa:	b004      	add	sp, #16
 8009dac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009db0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dba:	2308      	movs	r3, #8
 8009dbc:	18fb      	adds	r3, r7, r3
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009dc6:	230b      	movs	r3, #11
 8009dc8:	18fb      	adds	r3, r7, r3
 8009dca:	2200      	movs	r2, #0
 8009dcc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	885b      	ldrh	r3, [r3, #2]
 8009dd2:	0a1b      	lsrs	r3, r3, #8
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b07      	cmp	r3, #7
 8009dd8:	d900      	bls.n	8009ddc <USBD_GetDescriptor+0x2c>
 8009dda:	e159      	b.n	800a090 <USBD_GetDescriptor+0x2e0>
 8009ddc:	009a      	lsls	r2, r3, #2
 8009dde:	4bcb      	ldr	r3, [pc, #812]	; (800a10c <USBD_GetDescriptor+0x35c>)
 8009de0:	18d3      	adds	r3, r2, r3
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	23ac      	movs	r3, #172	; 0xac
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	58d3      	ldr	r3, [r2, r3]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	7c12      	ldrb	r2, [r2, #16]
 8009df4:	2108      	movs	r1, #8
 8009df6:	1879      	adds	r1, r7, r1
 8009df8:	0010      	movs	r0, r2
 8009dfa:	4798      	blx	r3
 8009dfc:	0003      	movs	r3, r0
 8009dfe:	60fb      	str	r3, [r7, #12]
      break;
 8009e00:	e153      	b.n	800a0aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	7c1b      	ldrb	r3, [r3, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10f      	bne.n	8009e2a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	23ad      	movs	r3, #173	; 0xad
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	58d3      	ldr	r3, [r2, r3]
 8009e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e14:	2208      	movs	r2, #8
 8009e16:	18ba      	adds	r2, r7, r2
 8009e18:	0010      	movs	r0, r2
 8009e1a:	4798      	blx	r3
 8009e1c:	0003      	movs	r3, r0
 8009e1e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	3301      	adds	r3, #1
 8009e24:	2202      	movs	r2, #2
 8009e26:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e28:	e13f      	b.n	800a0aa <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	23ad      	movs	r3, #173	; 0xad
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	58d3      	ldr	r3, [r2, r3]
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	2208      	movs	r2, #8
 8009e36:	18ba      	adds	r2, r7, r2
 8009e38:	0010      	movs	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	0003      	movs	r3, r0
 8009e3e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	3301      	adds	r3, #1
 8009e44:	2202      	movs	r2, #2
 8009e46:	701a      	strb	r2, [r3, #0]
      break;
 8009e48:	e12f      	b.n	800a0aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	885b      	ldrh	r3, [r3, #2]
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b05      	cmp	r3, #5
 8009e52:	d900      	bls.n	8009e56 <USBD_GetDescriptor+0xa6>
 8009e54:	e0d0      	b.n	8009ff8 <USBD_GetDescriptor+0x248>
 8009e56:	009a      	lsls	r2, r3, #2
 8009e58:	4bad      	ldr	r3, [pc, #692]	; (800a110 <USBD_GetDescriptor+0x360>)
 8009e5a:	18d3      	adds	r3, r2, r3
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	23ac      	movs	r3, #172	; 0xac
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	58d3      	ldr	r3, [r2, r3]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00d      	beq.n	8009e8a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	23ac      	movs	r3, #172	; 0xac
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	58d3      	ldr	r3, [r2, r3]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	7c12      	ldrb	r2, [r2, #16]
 8009e7c:	2108      	movs	r1, #8
 8009e7e:	1879      	adds	r1, r7, r1
 8009e80:	0010      	movs	r0, r2
 8009e82:	4798      	blx	r3
 8009e84:	0003      	movs	r3, r0
 8009e86:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e88:	e0c3      	b.n	800a012 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	0011      	movs	r1, r2
 8009e90:	0018      	movs	r0, r3
 8009e92:	f000 fb23 	bl	800a4dc <USBD_CtlError>
            err++;
 8009e96:	210b      	movs	r1, #11
 8009e98:	187b      	adds	r3, r7, r1
 8009e9a:	781a      	ldrb	r2, [r3, #0]
 8009e9c:	187b      	adds	r3, r7, r1
 8009e9e:	3201      	adds	r2, #1
 8009ea0:	701a      	strb	r2, [r3, #0]
          break;
 8009ea2:	e0b6      	b.n	800a012 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	23ac      	movs	r3, #172	; 0xac
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	58d3      	ldr	r3, [r2, r3]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00d      	beq.n	8009ece <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	23ac      	movs	r3, #172	; 0xac
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	58d3      	ldr	r3, [r2, r3]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	7c12      	ldrb	r2, [r2, #16]
 8009ec0:	2108      	movs	r1, #8
 8009ec2:	1879      	adds	r1, r7, r1
 8009ec4:	0010      	movs	r0, r2
 8009ec6:	4798      	blx	r3
 8009ec8:	0003      	movs	r3, r0
 8009eca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ecc:	e0a1      	b.n	800a012 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	0011      	movs	r1, r2
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	f000 fb01 	bl	800a4dc <USBD_CtlError>
            err++;
 8009eda:	210b      	movs	r1, #11
 8009edc:	187b      	adds	r3, r7, r1
 8009ede:	781a      	ldrb	r2, [r3, #0]
 8009ee0:	187b      	adds	r3, r7, r1
 8009ee2:	3201      	adds	r2, #1
 8009ee4:	701a      	strb	r2, [r3, #0]
          break;
 8009ee6:	e094      	b.n	800a012 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	23ac      	movs	r3, #172	; 0xac
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	58d3      	ldr	r3, [r2, r3]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00d      	beq.n	8009f12 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	23ac      	movs	r3, #172	; 0xac
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	58d3      	ldr	r3, [r2, r3]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	7c12      	ldrb	r2, [r2, #16]
 8009f04:	2108      	movs	r1, #8
 8009f06:	1879      	adds	r1, r7, r1
 8009f08:	0010      	movs	r0, r2
 8009f0a:	4798      	blx	r3
 8009f0c:	0003      	movs	r3, r0
 8009f0e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f10:	e07f      	b.n	800a012 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	0011      	movs	r1, r2
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f000 fadf 	bl	800a4dc <USBD_CtlError>
            err++;
 8009f1e:	210b      	movs	r1, #11
 8009f20:	187b      	adds	r3, r7, r1
 8009f22:	781a      	ldrb	r2, [r3, #0]
 8009f24:	187b      	adds	r3, r7, r1
 8009f26:	3201      	adds	r2, #1
 8009f28:	701a      	strb	r2, [r3, #0]
          break;
 8009f2a:	e072      	b.n	800a012 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	23ac      	movs	r3, #172	; 0xac
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	58d3      	ldr	r3, [r2, r3]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00d      	beq.n	8009f56 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	23ac      	movs	r3, #172	; 0xac
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	58d3      	ldr	r3, [r2, r3]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	7c12      	ldrb	r2, [r2, #16]
 8009f48:	2108      	movs	r1, #8
 8009f4a:	1879      	adds	r1, r7, r1
 8009f4c:	0010      	movs	r0, r2
 8009f4e:	4798      	blx	r3
 8009f50:	0003      	movs	r3, r0
 8009f52:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f54:	e05d      	b.n	800a012 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	0011      	movs	r1, r2
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	f000 fabd 	bl	800a4dc <USBD_CtlError>
            err++;
 8009f62:	210b      	movs	r1, #11
 8009f64:	187b      	adds	r3, r7, r1
 8009f66:	781a      	ldrb	r2, [r3, #0]
 8009f68:	187b      	adds	r3, r7, r1
 8009f6a:	3201      	adds	r2, #1
 8009f6c:	701a      	strb	r2, [r3, #0]
          break;
 8009f6e:	e050      	b.n	800a012 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	23ac      	movs	r3, #172	; 0xac
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	58d3      	ldr	r3, [r2, r3]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00d      	beq.n	8009f9a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	23ac      	movs	r3, #172	; 0xac
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	58d3      	ldr	r3, [r2, r3]
 8009f86:	695b      	ldr	r3, [r3, #20]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	7c12      	ldrb	r2, [r2, #16]
 8009f8c:	2108      	movs	r1, #8
 8009f8e:	1879      	adds	r1, r7, r1
 8009f90:	0010      	movs	r0, r2
 8009f92:	4798      	blx	r3
 8009f94:	0003      	movs	r3, r0
 8009f96:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f98:	e03b      	b.n	800a012 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	0011      	movs	r1, r2
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	f000 fa9b 	bl	800a4dc <USBD_CtlError>
            err++;
 8009fa6:	210b      	movs	r1, #11
 8009fa8:	187b      	adds	r3, r7, r1
 8009faa:	781a      	ldrb	r2, [r3, #0]
 8009fac:	187b      	adds	r3, r7, r1
 8009fae:	3201      	adds	r2, #1
 8009fb0:	701a      	strb	r2, [r3, #0]
          break;
 8009fb2:	e02e      	b.n	800a012 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	23ac      	movs	r3, #172	; 0xac
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	58d3      	ldr	r3, [r2, r3]
 8009fbc:	699b      	ldr	r3, [r3, #24]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00d      	beq.n	8009fde <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	23ac      	movs	r3, #172	; 0xac
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	58d3      	ldr	r3, [r2, r3]
 8009fca:	699b      	ldr	r3, [r3, #24]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	7c12      	ldrb	r2, [r2, #16]
 8009fd0:	2108      	movs	r1, #8
 8009fd2:	1879      	adds	r1, r7, r1
 8009fd4:	0010      	movs	r0, r2
 8009fd6:	4798      	blx	r3
 8009fd8:	0003      	movs	r3, r0
 8009fda:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fdc:	e019      	b.n	800a012 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	0011      	movs	r1, r2
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f000 fa79 	bl	800a4dc <USBD_CtlError>
            err++;
 8009fea:	210b      	movs	r1, #11
 8009fec:	187b      	adds	r3, r7, r1
 8009fee:	781a      	ldrb	r2, [r3, #0]
 8009ff0:	187b      	adds	r3, r7, r1
 8009ff2:	3201      	adds	r2, #1
 8009ff4:	701a      	strb	r2, [r3, #0]
          break;
 8009ff6:	e00c      	b.n	800a012 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	0011      	movs	r1, r2
 8009ffe:	0018      	movs	r0, r3
 800a000:	f000 fa6c 	bl	800a4dc <USBD_CtlError>
          err++;
 800a004:	210b      	movs	r1, #11
 800a006:	187b      	adds	r3, r7, r1
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	187b      	adds	r3, r7, r1
 800a00c:	3201      	adds	r2, #1
 800a00e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800a010:	e04b      	b.n	800a0aa <USBD_GetDescriptor+0x2fa>
 800a012:	e04a      	b.n	800a0aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7c1b      	ldrb	r3, [r3, #16]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10b      	bne.n	800a034 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	23ad      	movs	r3, #173	; 0xad
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	58d3      	ldr	r3, [r2, r3]
 800a024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a026:	2208      	movs	r2, #8
 800a028:	18ba      	adds	r2, r7, r2
 800a02a:	0010      	movs	r0, r2
 800a02c:	4798      	blx	r3
 800a02e:	0003      	movs	r3, r0
 800a030:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a032:	e03a      	b.n	800a0aa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	0011      	movs	r1, r2
 800a03a:	0018      	movs	r0, r3
 800a03c:	f000 fa4e 	bl	800a4dc <USBD_CtlError>
        err++;
 800a040:	210b      	movs	r1, #11
 800a042:	187b      	adds	r3, r7, r1
 800a044:	781a      	ldrb	r2, [r3, #0]
 800a046:	187b      	adds	r3, r7, r1
 800a048:	3201      	adds	r2, #1
 800a04a:	701a      	strb	r2, [r3, #0]
      break;
 800a04c:	e02d      	b.n	800a0aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	7c1b      	ldrb	r3, [r3, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10f      	bne.n	800a076 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	23ad      	movs	r3, #173	; 0xad
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	58d3      	ldr	r3, [r2, r3]
 800a05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a060:	2208      	movs	r2, #8
 800a062:	18ba      	adds	r2, r7, r2
 800a064:	0010      	movs	r0, r2
 800a066:	4798      	blx	r3
 800a068:	0003      	movs	r3, r0
 800a06a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	3301      	adds	r3, #1
 800a070:	2207      	movs	r2, #7
 800a072:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a074:	e019      	b.n	800a0aa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	0011      	movs	r1, r2
 800a07c:	0018      	movs	r0, r3
 800a07e:	f000 fa2d 	bl	800a4dc <USBD_CtlError>
        err++;
 800a082:	210b      	movs	r1, #11
 800a084:	187b      	adds	r3, r7, r1
 800a086:	781a      	ldrb	r2, [r3, #0]
 800a088:	187b      	adds	r3, r7, r1
 800a08a:	3201      	adds	r2, #1
 800a08c:	701a      	strb	r2, [r3, #0]
      break;
 800a08e:	e00c      	b.n	800a0aa <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	0011      	movs	r1, r2
 800a096:	0018      	movs	r0, r3
 800a098:	f000 fa20 	bl	800a4dc <USBD_CtlError>
      err++;
 800a09c:	210b      	movs	r1, #11
 800a09e:	187b      	adds	r3, r7, r1
 800a0a0:	781a      	ldrb	r2, [r3, #0]
 800a0a2:	187b      	adds	r3, r7, r1
 800a0a4:	3201      	adds	r2, #1
 800a0a6:	701a      	strb	r2, [r3, #0]
      break;
 800a0a8:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800a0aa:	230b      	movs	r3, #11
 800a0ac:	18fb      	adds	r3, r7, r3
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d127      	bne.n	800a104 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a0b4:	2108      	movs	r1, #8
 800a0b6:	187b      	adds	r3, r7, r1
 800a0b8:	881b      	ldrh	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d019      	beq.n	800a0f2 <USBD_GetDescriptor+0x342>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	88db      	ldrh	r3, [r3, #6]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d015      	beq.n	800a0f2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	88da      	ldrh	r2, [r3, #6]
 800a0ca:	187b      	adds	r3, r7, r1
 800a0cc:	881b      	ldrh	r3, [r3, #0]
 800a0ce:	1c18      	adds	r0, r3, #0
 800a0d0:	1c11      	adds	r1, r2, #0
 800a0d2:	b28a      	uxth	r2, r1
 800a0d4:	b283      	uxth	r3, r0
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d900      	bls.n	800a0dc <USBD_GetDescriptor+0x32c>
 800a0da:	1c01      	adds	r1, r0, #0
 800a0dc:	b28a      	uxth	r2, r1
 800a0de:	2108      	movs	r1, #8
 800a0e0:	187b      	adds	r3, r7, r1
 800a0e2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0e4:	187b      	adds	r3, r7, r1
 800a0e6:	881a      	ldrh	r2, [r3, #0]
 800a0e8:	68f9      	ldr	r1, [r7, #12]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f000 fa73 	bl	800a5d8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	88db      	ldrh	r3, [r3, #6]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d105      	bne.n	800a106 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f000 fad5 	bl	800a6ac <USBD_CtlSendStatus>
 800a102:	e000      	b.n	800a106 <USBD_GetDescriptor+0x356>
    return;
 800a104:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800a106:	46bd      	mov	sp, r7
 800a108:	b004      	add	sp, #16
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	0800bbd4 	.word	0x0800bbd4
 800a110:	0800bbf4 	.word	0x0800bbf4

0800a114 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a114:	b590      	push	{r4, r7, lr}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	889b      	ldrh	r3, [r3, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d13d      	bne.n	800a1a2 <USBD_SetAddress+0x8e>
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	88db      	ldrh	r3, [r3, #6]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d139      	bne.n	800a1a2 <USBD_SetAddress+0x8e>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	885b      	ldrh	r3, [r3, #2]
 800a132:	2b7f      	cmp	r3, #127	; 0x7f
 800a134:	d835      	bhi.n	800a1a2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	885b      	ldrh	r3, [r3, #2]
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	230f      	movs	r3, #15
 800a13e:	18fb      	adds	r3, r7, r3
 800a140:	217f      	movs	r1, #127	; 0x7f
 800a142:	400a      	ands	r2, r1
 800a144:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	23a7      	movs	r3, #167	; 0xa7
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	5cd3      	ldrb	r3, [r2, r3]
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d106      	bne.n	800a160 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	0011      	movs	r1, r2
 800a158:	0018      	movs	r0, r3
 800a15a:	f000 f9bf 	bl	800a4dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a15e:	e027      	b.n	800a1b0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	240f      	movs	r4, #15
 800a164:	193a      	adds	r2, r7, r4
 800a166:	4914      	ldr	r1, [pc, #80]	; (800a1b8 <USBD_SetAddress+0xa4>)
 800a168:	7812      	ldrb	r2, [r2, #0]
 800a16a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a16c:	193b      	adds	r3, r7, r4
 800a16e:	781a      	ldrb	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	0011      	movs	r1, r2
 800a174:	0018      	movs	r0, r3
 800a176:	f000 ff25 	bl	800afc4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	0018      	movs	r0, r3
 800a17e:	f000 fa95 	bl	800a6ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a182:	193b      	adds	r3, r7, r4
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d005      	beq.n	800a196 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	23a7      	movs	r3, #167	; 0xa7
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	2102      	movs	r1, #2
 800a192:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a194:	e00c      	b.n	800a1b0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	23a7      	movs	r3, #167	; 0xa7
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	2101      	movs	r1, #1
 800a19e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1a0:	e006      	b.n	800a1b0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	0011      	movs	r1, r2
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	f000 f997 	bl	800a4dc <USBD_CtlError>
  }
}
 800a1ae:	46c0      	nop			; (mov r8, r8)
 800a1b0:	46c0      	nop			; (mov r8, r8)
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	b005      	add	sp, #20
 800a1b6:	bd90      	pop	{r4, r7, pc}
 800a1b8:	0000029e 	.word	0x0000029e

0800a1bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	885b      	ldrh	r3, [r3, #2]
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	4b4c      	ldr	r3, [pc, #304]	; (800a300 <USBD_SetConfig+0x144>)
 800a1ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1d0:	4b4b      	ldr	r3, [pc, #300]	; (800a300 <USBD_SetConfig+0x144>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d906      	bls.n	800a1e6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	0011      	movs	r1, r2
 800a1de:	0018      	movs	r0, r3
 800a1e0:	f000 f97c 	bl	800a4dc <USBD_CtlError>
 800a1e4:	e088      	b.n	800a2f8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	23a7      	movs	r3, #167	; 0xa7
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	5cd3      	ldrb	r3, [r2, r3]
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d002      	beq.n	800a1f8 <USBD_SetConfig+0x3c>
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d029      	beq.n	800a24a <USBD_SetConfig+0x8e>
 800a1f6:	e071      	b.n	800a2dc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a1f8:	4b41      	ldr	r3, [pc, #260]	; (800a300 <USBD_SetConfig+0x144>)
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01f      	beq.n	800a240 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800a200:	4b3f      	ldr	r3, [pc, #252]	; (800a300 <USBD_SetConfig+0x144>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	001a      	movs	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	23a7      	movs	r3, #167	; 0xa7
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	2103      	movs	r1, #3
 800a212:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a214:	4b3a      	ldr	r3, [pc, #232]	; (800a300 <USBD_SetConfig+0x144>)
 800a216:	781a      	ldrb	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	0011      	movs	r1, r2
 800a21c:	0018      	movs	r0, r3
 800a21e:	f7ff f8c6 	bl	80093ae <USBD_SetClassConfig>
 800a222:	0003      	movs	r3, r0
 800a224:	2b02      	cmp	r3, #2
 800a226:	d106      	bne.n	800a236 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	0011      	movs	r1, r2
 800a22e:	0018      	movs	r0, r3
 800a230:	f000 f954 	bl	800a4dc <USBD_CtlError>
            return;
 800a234:	e060      	b.n	800a2f8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	0018      	movs	r0, r3
 800a23a:	f000 fa37 	bl	800a6ac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a23e:	e05b      	b.n	800a2f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	0018      	movs	r0, r3
 800a244:	f000 fa32 	bl	800a6ac <USBD_CtlSendStatus>
        break;
 800a248:	e056      	b.n	800a2f8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a24a:	4b2d      	ldr	r3, [pc, #180]	; (800a300 <USBD_SetConfig+0x144>)
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d115      	bne.n	800a27e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	23a7      	movs	r3, #167	; 0xa7
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	2102      	movs	r1, #2
 800a25a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800a25c:	4b28      	ldr	r3, [pc, #160]	; (800a300 <USBD_SetConfig+0x144>)
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	001a      	movs	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a266:	4b26      	ldr	r3, [pc, #152]	; (800a300 <USBD_SetConfig+0x144>)
 800a268:	781a      	ldrb	r2, [r3, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	0011      	movs	r1, r2
 800a26e:	0018      	movs	r0, r3
 800a270:	f7ff f8c4 	bl	80093fc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	0018      	movs	r0, r3
 800a278:	f000 fa18 	bl	800a6ac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a27c:	e03c      	b.n	800a2f8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800a27e:	4b20      	ldr	r3, [pc, #128]	; (800a300 <USBD_SetConfig+0x144>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	001a      	movs	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d022      	beq.n	800a2d2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	b2da      	uxtb	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	0011      	movs	r1, r2
 800a296:	0018      	movs	r0, r3
 800a298:	f7ff f8b0 	bl	80093fc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a29c:	4b18      	ldr	r3, [pc, #96]	; (800a300 <USBD_SetConfig+0x144>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	001a      	movs	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a2a6:	4b16      	ldr	r3, [pc, #88]	; (800a300 <USBD_SetConfig+0x144>)
 800a2a8:	781a      	ldrb	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	0011      	movs	r1, r2
 800a2ae:	0018      	movs	r0, r3
 800a2b0:	f7ff f87d 	bl	80093ae <USBD_SetClassConfig>
 800a2b4:	0003      	movs	r3, r0
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d106      	bne.n	800a2c8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	0011      	movs	r1, r2
 800a2c0:	0018      	movs	r0, r3
 800a2c2:	f000 f90b 	bl	800a4dc <USBD_CtlError>
            return;
 800a2c6:	e017      	b.n	800a2f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	0018      	movs	r0, r3
 800a2cc:	f000 f9ee 	bl	800a6ac <USBD_CtlSendStatus>
        break;
 800a2d0:	e012      	b.n	800a2f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	f000 f9e9 	bl	800a6ac <USBD_CtlSendStatus>
        break;
 800a2da:	e00d      	b.n	800a2f8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	0011      	movs	r1, r2
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	f000 f8fa 	bl	800a4dc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a2e8:	4b05      	ldr	r3, [pc, #20]	; (800a300 <USBD_SetConfig+0x144>)
 800a2ea:	781a      	ldrb	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	0011      	movs	r1, r2
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f7ff f883 	bl	80093fc <USBD_ClrClassConfig>
        break;
 800a2f6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	b002      	add	sp, #8
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	46c0      	nop			; (mov r8, r8)
 800a300:	20000219 	.word	0x20000219

0800a304 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	88db      	ldrh	r3, [r3, #6]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d006      	beq.n	800a324 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	0011      	movs	r1, r2
 800a31c:	0018      	movs	r0, r3
 800a31e:	f000 f8dd 	bl	800a4dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a322:	e026      	b.n	800a372 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	23a7      	movs	r3, #167	; 0xa7
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	5cd3      	ldrb	r3, [r2, r3]
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	dc02      	bgt.n	800a336 <USBD_GetConfig+0x32>
 800a330:	2b00      	cmp	r3, #0
 800a332:	dc03      	bgt.n	800a33c <USBD_GetConfig+0x38>
 800a334:	e016      	b.n	800a364 <USBD_GetConfig+0x60>
 800a336:	2b03      	cmp	r3, #3
 800a338:	d00c      	beq.n	800a354 <USBD_GetConfig+0x50>
 800a33a:	e013      	b.n	800a364 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3308      	adds	r3, #8
 800a346:	0019      	movs	r1, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	0018      	movs	r0, r3
 800a34e:	f000 f943 	bl	800a5d8 <USBD_CtlSendData>
        break;
 800a352:	e00e      	b.n	800a372 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	1d19      	adds	r1, r3, #4
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	0018      	movs	r0, r3
 800a35e:	f000 f93b 	bl	800a5d8 <USBD_CtlSendData>
        break;
 800a362:	e006      	b.n	800a372 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	0011      	movs	r1, r2
 800a36a:	0018      	movs	r0, r3
 800a36c:	f000 f8b6 	bl	800a4dc <USBD_CtlError>
        break;
 800a370:	46c0      	nop			; (mov r8, r8)
}
 800a372:	46c0      	nop			; (mov r8, r8)
 800a374:	46bd      	mov	sp, r7
 800a376:	b002      	add	sp, #8
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	23a7      	movs	r3, #167	; 0xa7
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	5cd3      	ldrb	r3, [r2, r3]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d822      	bhi.n	800a3d8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	88db      	ldrh	r3, [r3, #6]
 800a396:	2b02      	cmp	r3, #2
 800a398:	d006      	beq.n	800a3a8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	0011      	movs	r1, r2
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	f000 f89b 	bl	800a4dc <USBD_CtlError>
        break;
 800a3a6:	e01e      	b.n	800a3e6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	23a9      	movs	r3, #169	; 0xa9
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	58d3      	ldr	r3, [r2, r3]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	431a      	orrs	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	330c      	adds	r3, #12
 800a3ca:	0019      	movs	r1, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	0018      	movs	r0, r3
 800a3d2:	f000 f901 	bl	800a5d8 <USBD_CtlSendData>
      break;
 800a3d6:	e006      	b.n	800a3e6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	0011      	movs	r1, r2
 800a3de:	0018      	movs	r0, r3
 800a3e0:	f000 f87c 	bl	800a4dc <USBD_CtlError>
      break;
 800a3e4:	46c0      	nop			; (mov r8, r8)
  }
}
 800a3e6:	46c0      	nop			; (mov r8, r8)
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	b002      	add	sp, #8
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b082      	sub	sp, #8
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	885b      	ldrh	r3, [r3, #2]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d108      	bne.n	800a412 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	23a9      	movs	r3, #169	; 0xa9
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	2101      	movs	r1, #1
 800a408:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	0018      	movs	r0, r3
 800a40e:	f000 f94d 	bl	800a6ac <USBD_CtlSendStatus>
  }
}
 800a412:	46c0      	nop			; (mov r8, r8)
 800a414:	46bd      	mov	sp, r7
 800a416:	b002      	add	sp, #8
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	23a7      	movs	r3, #167	; 0xa7
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	5cd3      	ldrb	r3, [r2, r3]
 800a42c:	3b01      	subs	r3, #1
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d80d      	bhi.n	800a44e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	885b      	ldrh	r3, [r3, #2]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d110      	bne.n	800a45c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	23a9      	movs	r3, #169	; 0xa9
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	2100      	movs	r1, #0
 800a442:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	0018      	movs	r0, r3
 800a448:	f000 f930 	bl	800a6ac <USBD_CtlSendStatus>
      }
      break;
 800a44c:	e006      	b.n	800a45c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	0011      	movs	r1, r2
 800a454:	0018      	movs	r0, r3
 800a456:	f000 f841 	bl	800a4dc <USBD_CtlError>
      break;
 800a45a:	e000      	b.n	800a45e <USBD_ClrFeature+0x44>
      break;
 800a45c:	46c0      	nop			; (mov r8, r8)
  }
}
 800a45e:	46c0      	nop			; (mov r8, r8)
 800a460:	46bd      	mov	sp, r7
 800a462:	b002      	add	sp, #8
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b082      	sub	sp, #8
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	781a      	ldrb	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	785a      	ldrb	r2, [r3, #1]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	3302      	adds	r3, #2
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	b29a      	uxth	r2, r3
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	3303      	adds	r3, #3
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	b29b      	uxth	r3, r3
 800a490:	021b      	lsls	r3, r3, #8
 800a492:	b29b      	uxth	r3, r3
 800a494:	18d3      	adds	r3, r2, r3
 800a496:	b29a      	uxth	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	3305      	adds	r3, #5
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	18d3      	adds	r3, r2, r3
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	3306      	adds	r3, #6
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	3307      	adds	r3, #7
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	021b      	lsls	r3, r3, #8
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	18d3      	adds	r3, r2, r3
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	80da      	strh	r2, [r3, #6]

}
 800a4d4:	46c0      	nop			; (mov r8, r8)
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	b002      	add	sp, #8
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2180      	movs	r1, #128	; 0x80
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	f000 fce3 	bl	800aeb6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	0018      	movs	r0, r3
 800a4f6:	f000 fcde 	bl	800aeb6 <USBD_LL_StallEP>
}
 800a4fa:	46c0      	nop			; (mov r8, r8)
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	b002      	add	sp, #8
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a502:	b590      	push	{r4, r7, lr}
 800a504:	b087      	sub	sp, #28
 800a506:	af00      	add	r7, sp, #0
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a50e:	2417      	movs	r4, #23
 800a510:	193b      	adds	r3, r7, r4
 800a512:	2200      	movs	r2, #0
 800a514:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d03c      	beq.n	800a596 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	0018      	movs	r0, r3
 800a520:	f000 f83d 	bl	800a59e <USBD_GetLen>
 800a524:	0003      	movs	r3, r0
 800a526:	3301      	adds	r3, #1
 800a528:	b29b      	uxth	r3, r3
 800a52a:	18db      	adds	r3, r3, r3
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a532:	193b      	adds	r3, r7, r4
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	193a      	adds	r2, r7, r4
 800a538:	1c59      	adds	r1, r3, #1
 800a53a:	7011      	strb	r1, [r2, #0]
 800a53c:	001a      	movs	r2, r3
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	189b      	adds	r3, r3, r2
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	7812      	ldrb	r2, [r2, #0]
 800a546:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a548:	193b      	adds	r3, r7, r4
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	193a      	adds	r2, r7, r4
 800a54e:	1c59      	adds	r1, r3, #1
 800a550:	7011      	strb	r1, [r2, #0]
 800a552:	001a      	movs	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	189b      	adds	r3, r3, r2
 800a558:	2203      	movs	r2, #3
 800a55a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a55c:	e017      	b.n	800a58e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	60fa      	str	r2, [r7, #12]
 800a564:	2417      	movs	r4, #23
 800a566:	193a      	adds	r2, r7, r4
 800a568:	7812      	ldrb	r2, [r2, #0]
 800a56a:	1939      	adds	r1, r7, r4
 800a56c:	1c50      	adds	r0, r2, #1
 800a56e:	7008      	strb	r0, [r1, #0]
 800a570:	0011      	movs	r1, r2
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	1852      	adds	r2, r2, r1
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a57a:	193b      	adds	r3, r7, r4
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	193a      	adds	r2, r7, r4
 800a580:	1c59      	adds	r1, r3, #1
 800a582:	7011      	strb	r1, [r2, #0]
 800a584:	001a      	movs	r2, r3
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	189b      	adds	r3, r3, r2
 800a58a:	2200      	movs	r2, #0
 800a58c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1e3      	bne.n	800a55e <USBD_GetString+0x5c>
    }
  }
}
 800a596:	46c0      	nop			; (mov r8, r8)
 800a598:	46bd      	mov	sp, r7
 800a59a:	b007      	add	sp, #28
 800a59c:	bd90      	pop	{r4, r7, pc}

0800a59e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a5a6:	230f      	movs	r3, #15
 800a5a8:	18fb      	adds	r3, r7, r3
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800a5ae:	e008      	b.n	800a5c2 <USBD_GetLen+0x24>
  {
    len++;
 800a5b0:	210f      	movs	r1, #15
 800a5b2:	187b      	adds	r3, r7, r1
 800a5b4:	781a      	ldrb	r2, [r3, #0]
 800a5b6:	187b      	adds	r3, r7, r1
 800a5b8:	3201      	adds	r2, #1
 800a5ba:	701a      	strb	r2, [r3, #0]
    buf++;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1f2      	bne.n	800a5b0 <USBD_GetLen+0x12>
  }

  return len;
 800a5ca:	230f      	movs	r3, #15
 800a5cc:	18fb      	adds	r3, r7, r3
 800a5ce:	781b      	ldrb	r3, [r3, #0]
}
 800a5d0:	0018      	movs	r0, r3
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	b004      	add	sp, #16
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	1dbb      	adds	r3, r7, #6
 800a5e4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	23a5      	movs	r3, #165	; 0xa5
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	2102      	movs	r1, #2
 800a5ee:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800a5f0:	1dbb      	adds	r3, r7, #6
 800a5f2:	881a      	ldrh	r2, [r3, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a5f8:	1dbb      	adds	r3, r7, #6
 800a5fa:	881a      	ldrh	r2, [r3, #0]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a600:	1dbb      	adds	r3, r7, #6
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	2100      	movs	r1, #0
 800a60a:	f000 fd06 	bl	800b01a <USBD_LL_Transmit>

  return USBD_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	0018      	movs	r0, r3
 800a612:	46bd      	mov	sp, r7
 800a614:	b004      	add	sp, #16
 800a616:	bd80      	pop	{r7, pc}

0800a618 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	1dbb      	adds	r3, r7, #6
 800a624:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a626:	1dbb      	adds	r3, r7, #6
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	2100      	movs	r1, #0
 800a630:	f000 fcf3 	bl	800b01a <USBD_LL_Transmit>

  return USBD_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	0018      	movs	r0, r3
 800a638:	46bd      	mov	sp, r7
 800a63a:	b004      	add	sp, #16
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b084      	sub	sp, #16
 800a642:	af00      	add	r7, sp, #0
 800a644:	60f8      	str	r0, [r7, #12]
 800a646:	60b9      	str	r1, [r7, #8]
 800a648:	1dbb      	adds	r3, r7, #6
 800a64a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	23a5      	movs	r3, #165	; 0xa5
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	2103      	movs	r1, #3
 800a654:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800a656:	1dbb      	adds	r3, r7, #6
 800a658:	8819      	ldrh	r1, [r3, #0]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	23ae      	movs	r3, #174	; 0xae
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800a662:	1dbb      	adds	r3, r7, #6
 800a664:	8819      	ldrh	r1, [r3, #0]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	23b0      	movs	r3, #176	; 0xb0
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a66e:	1dbb      	adds	r3, r7, #6
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	2100      	movs	r1, #0
 800a678:	f000 fd06 	bl	800b088 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	0018      	movs	r0, r3
 800a680:	46bd      	mov	sp, r7
 800a682:	b004      	add	sp, #16
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	60f8      	str	r0, [r7, #12]
 800a68e:	60b9      	str	r1, [r7, #8]
 800a690:	1dbb      	adds	r3, r7, #6
 800a692:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a694:	1dbb      	adds	r3, r7, #6
 800a696:	881b      	ldrh	r3, [r3, #0]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	2100      	movs	r1, #0
 800a69e:	f000 fcf3 	bl	800b088 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	b004      	add	sp, #16
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	23a5      	movs	r3, #165	; 0xa5
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	2104      	movs	r1, #4
 800a6bc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	f000 fca8 	bl	800b01a <USBD_LL_Transmit>

  return USBD_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	0018      	movs	r0, r3
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	b002      	add	sp, #8
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	23a5      	movs	r3, #165	; 0xa5
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	2105      	movs	r1, #5
 800a6e4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	f000 fccb 	bl	800b088 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	b002      	add	sp, #8
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a700:	4914      	ldr	r1, [pc, #80]	; (800a754 <MX_USB_DEVICE_Init+0x58>)
 800a702:	4b15      	ldr	r3, [pc, #84]	; (800a758 <MX_USB_DEVICE_Init+0x5c>)
 800a704:	2200      	movs	r2, #0
 800a706:	0018      	movs	r0, r3
 800a708:	f7fe fdea 	bl	80092e0 <USBD_Init>
 800a70c:	1e03      	subs	r3, r0, #0
 800a70e:	d001      	beq.n	800a714 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a710:	f7f6 fec0 	bl	8001494 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a714:	4a11      	ldr	r2, [pc, #68]	; (800a75c <MX_USB_DEVICE_Init+0x60>)
 800a716:	4b10      	ldr	r3, [pc, #64]	; (800a758 <MX_USB_DEVICE_Init+0x5c>)
 800a718:	0011      	movs	r1, r2
 800a71a:	0018      	movs	r0, r3
 800a71c:	f7fe fe11 	bl	8009342 <USBD_RegisterClass>
 800a720:	1e03      	subs	r3, r0, #0
 800a722:	d001      	beq.n	800a728 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800a724:	f7f6 feb6 	bl	8001494 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a728:	4a0d      	ldr	r2, [pc, #52]	; (800a760 <MX_USB_DEVICE_Init+0x64>)
 800a72a:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <MX_USB_DEVICE_Init+0x5c>)
 800a72c:	0011      	movs	r1, r2
 800a72e:	0018      	movs	r0, r3
 800a730:	f7fe fd26 	bl	8009180 <USBD_CDC_RegisterInterface>
 800a734:	1e03      	subs	r3, r0, #0
 800a736:	d001      	beq.n	800a73c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800a738:	f7f6 feac 	bl	8001494 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a73c:	4b06      	ldr	r3, [pc, #24]	; (800a758 <MX_USB_DEVICE_Init+0x5c>)
 800a73e:	0018      	movs	r0, r3
 800a740:	f7fe fe1f 	bl	8009382 <USBD_Start>
 800a744:	1e03      	subs	r3, r0, #0
 800a746:	d001      	beq.n	800a74c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800a748:	f7f6 fea4 	bl	8001494 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a74c:	46c0      	nop			; (mov r8, r8)
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	46c0      	nop			; (mov r8, r8)
 800a754:	2000012c 	.word	0x2000012c
 800a758:	2000061c 	.word	0x2000061c
 800a75c:	20000018 	.word	0x20000018
 800a760:	2000011c 	.word	0x2000011c

0800a764 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a768:	4907      	ldr	r1, [pc, #28]	; (800a788 <CDC_Init_FS+0x24>)
 800a76a:	4b08      	ldr	r3, [pc, #32]	; (800a78c <CDC_Init_FS+0x28>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	0018      	movs	r0, r3
 800a770:	f7fe fd21 	bl	80091b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a774:	4a06      	ldr	r2, [pc, #24]	; (800a790 <CDC_Init_FS+0x2c>)
 800a776:	4b05      	ldr	r3, [pc, #20]	; (800a78c <CDC_Init_FS+0x28>)
 800a778:	0011      	movs	r1, r2
 800a77a:	0018      	movs	r0, r3
 800a77c:	f7fe fd37 	bl	80091ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a780:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a782:	0018      	movs	r0, r3
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	20000cc8 	.word	0x20000cc8
 800a78c:	2000061c 	.word	0x2000061c
 800a790:	200008e0 	.word	0x200008e0

0800a794 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a798:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a79a:	0018      	movs	r0, r3
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6039      	str	r1, [r7, #0]
 800a7a8:	0011      	movs	r1, r2
 800a7aa:	1dfb      	adds	r3, r7, #7
 800a7ac:	1c02      	adds	r2, r0, #0
 800a7ae:	701a      	strb	r2, [r3, #0]
 800a7b0:	1d3b      	adds	r3, r7, #4
 800a7b2:	1c0a      	adds	r2, r1, #0
 800a7b4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a7b6:	1dfb      	adds	r3, r7, #7
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	2b23      	cmp	r3, #35	; 0x23
 800a7bc:	d804      	bhi.n	800a7c8 <CDC_Control_FS+0x28>
 800a7be:	009a      	lsls	r2, r3, #2
 800a7c0:	4b04      	ldr	r3, [pc, #16]	; (800a7d4 <CDC_Control_FS+0x34>)
 800a7c2:	18d3      	adds	r3, r2, r3
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a7c8:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800a7ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a7cc:	0018      	movs	r0, r3
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	b002      	add	sp, #8
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	0800bc0c 	.word	0x0800bc0c

0800a7d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a7d8:	b590      	push	{r4, r7, lr}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800a7e2:	4b18      	ldr	r3, [pc, #96]	; (800a844 <CDC_Receive_FS+0x6c>)
 800a7e4:	785a      	ldrb	r2, [r3, #1]
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	705a      	strb	r2, [r3, #1]

  for(uint8_t i = 0; i < *Len; i++)
 800a7ec:	230f      	movs	r3, #15
 800a7ee:	18fb      	adds	r3, r7, r3
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	701a      	strb	r2, [r3, #0]
 800a7f4:	e00f      	b.n	800a816 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800a7f6:	4b14      	ldr	r3, [pc, #80]	; (800a848 <CDC_Receive_FS+0x70>)
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	240f      	movs	r4, #15
 800a7fc:	193b      	adds	r3, r7, r4
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	18d3      	adds	r3, r2, r3
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	0019      	movs	r1, r3
 800a808:	f7f6 fe7e 	bl	8001508 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800a80c:	193b      	adds	r3, r7, r4
 800a80e:	781a      	ldrb	r2, [r3, #0]
 800a810:	193b      	adds	r3, r7, r4
 800a812:	3201      	adds	r2, #1
 800a814:	701a      	strb	r2, [r3, #0]
 800a816:	230f      	movs	r3, #15
 800a818:	18fb      	adds	r3, r7, r3
 800a81a:	781a      	ldrb	r2, [r3, #0]
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	429a      	cmp	r2, r3
 800a822:	d3e8      	bcc.n	800a7f6 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <CDC_Receive_FS+0x74>)
 800a828:	0011      	movs	r1, r2
 800a82a:	0018      	movs	r0, r3
 800a82c:	f7fe fcdf 	bl	80091ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a830:	4b06      	ldr	r3, [pc, #24]	; (800a84c <CDC_Receive_FS+0x74>)
 800a832:	0018      	movs	r0, r3
 800a834:	f7fe fd26 	bl	8009284 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a838:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a83a:	0018      	movs	r0, r3
 800a83c:	46bd      	mov	sp, r7
 800a83e:	b005      	add	sp, #20
 800a840:	bd90      	pop	{r4, r7, pc}
 800a842:	46c0      	nop			; (mov r8, r8)
 800a844:	20000590 	.word	0x20000590
 800a848:	200010b0 	.word	0x200010b0
 800a84c:	2000061c 	.word	0x2000061c

0800a850 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a850:	b5b0      	push	{r4, r5, r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	000a      	movs	r2, r1
 800a85a:	1cbb      	adds	r3, r7, #2
 800a85c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800a85e:	230f      	movs	r3, #15
 800a860:	18fb      	adds	r3, r7, r3
 800a862:	2200      	movs	r2, #0
 800a864:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a866:	4a11      	ldr	r2, [pc, #68]	; (800a8ac <CDC_Transmit_FS+0x5c>)
 800a868:	23ae      	movs	r3, #174	; 0xae
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	58d3      	ldr	r3, [r2, r3]
 800a86e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	2385      	movs	r3, #133	; 0x85
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	58d3      	ldr	r3, [r2, r3]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e010      	b.n	800a8a2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a880:	1cbb      	adds	r3, r7, #2
 800a882:	881a      	ldrh	r2, [r3, #0]
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	4b09      	ldr	r3, [pc, #36]	; (800a8ac <CDC_Transmit_FS+0x5c>)
 800a888:	0018      	movs	r0, r3
 800a88a:	f7fe fc94 	bl	80091b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a88e:	250f      	movs	r5, #15
 800a890:	197c      	adds	r4, r7, r5
 800a892:	4b06      	ldr	r3, [pc, #24]	; (800a8ac <CDC_Transmit_FS+0x5c>)
 800a894:	0018      	movs	r0, r3
 800a896:	f7fe fcbe 	bl	8009216 <USBD_CDC_TransmitPacket>
 800a89a:	0003      	movs	r3, r0
 800a89c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800a89e:	197b      	adds	r3, r7, r5
 800a8a0:	781b      	ldrb	r3, [r3, #0]
}
 800a8a2:	0018      	movs	r0, r3
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	b004      	add	sp, #16
 800a8a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8aa:	46c0      	nop			; (mov r8, r8)
 800a8ac:	2000061c 	.word	0x2000061c

0800a8b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	0002      	movs	r2, r0
 800a8b8:	6039      	str	r1, [r7, #0]
 800a8ba:	1dfb      	adds	r3, r7, #7
 800a8bc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	2212      	movs	r2, #18
 800a8c2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a8c4:	4b02      	ldr	r3, [pc, #8]	; (800a8d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a8c6:	0018      	movs	r0, r3
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	b002      	add	sp, #8
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	46c0      	nop			; (mov r8, r8)
 800a8d0:	20000148 	.word	0x20000148

0800a8d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	0002      	movs	r2, r0
 800a8dc:	6039      	str	r1, [r7, #0]
 800a8de:	1dfb      	adds	r3, r7, #7
 800a8e0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2204      	movs	r2, #4
 800a8e6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a8e8:	4b02      	ldr	r3, [pc, #8]	; (800a8f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a8ea:	0018      	movs	r0, r3
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	b002      	add	sp, #8
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	46c0      	nop			; (mov r8, r8)
 800a8f4:	2000015c 	.word	0x2000015c

0800a8f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	0002      	movs	r2, r0
 800a900:	6039      	str	r1, [r7, #0]
 800a902:	1dfb      	adds	r3, r7, #7
 800a904:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a906:	1dfb      	adds	r3, r7, #7
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d106      	bne.n	800a91c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	4908      	ldr	r1, [pc, #32]	; (800a934 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a912:	4b09      	ldr	r3, [pc, #36]	; (800a938 <USBD_FS_ProductStrDescriptor+0x40>)
 800a914:	0018      	movs	r0, r3
 800a916:	f7ff fdf4 	bl	800a502 <USBD_GetString>
 800a91a:	e005      	b.n	800a928 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	4905      	ldr	r1, [pc, #20]	; (800a934 <USBD_FS_ProductStrDescriptor+0x3c>)
 800a920:	4b05      	ldr	r3, [pc, #20]	; (800a938 <USBD_FS_ProductStrDescriptor+0x40>)
 800a922:	0018      	movs	r0, r3
 800a924:	f7ff fded 	bl	800a502 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a928:	4b02      	ldr	r3, [pc, #8]	; (800a934 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800a92a:	0018      	movs	r0, r3
 800a92c:	46bd      	mov	sp, r7
 800a92e:	b002      	add	sp, #8
 800a930:	bd80      	pop	{r7, pc}
 800a932:	46c0      	nop			; (mov r8, r8)
 800a934:	200010b4 	.word	0x200010b4
 800a938:	0800bb34 	.word	0x0800bb34

0800a93c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	0002      	movs	r2, r0
 800a944:	6039      	str	r1, [r7, #0]
 800a946:	1dfb      	adds	r3, r7, #7
 800a948:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	4904      	ldr	r1, [pc, #16]	; (800a960 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a94e:	4b05      	ldr	r3, [pc, #20]	; (800a964 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800a950:	0018      	movs	r0, r3
 800a952:	f7ff fdd6 	bl	800a502 <USBD_GetString>
  return USBD_StrDesc;
 800a956:	4b02      	ldr	r3, [pc, #8]	; (800a960 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800a958:	0018      	movs	r0, r3
 800a95a:	46bd      	mov	sp, r7
 800a95c:	b002      	add	sp, #8
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	200010b4 	.word	0x200010b4
 800a964:	0800bb4c 	.word	0x0800bb4c

0800a968 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	0002      	movs	r2, r0
 800a970:	6039      	str	r1, [r7, #0]
 800a972:	1dfb      	adds	r3, r7, #7
 800a974:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	221a      	movs	r2, #26
 800a97a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a97c:	f000 f84c 	bl	800aa18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a980:	4b02      	ldr	r3, [pc, #8]	; (800a98c <USBD_FS_SerialStrDescriptor+0x24>)
}
 800a982:	0018      	movs	r0, r3
 800a984:	46bd      	mov	sp, r7
 800a986:	b002      	add	sp, #8
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	20000160 	.word	0x20000160

0800a990 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	0002      	movs	r2, r0
 800a998:	6039      	str	r1, [r7, #0]
 800a99a:	1dfb      	adds	r3, r7, #7
 800a99c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800a99e:	1dfb      	adds	r3, r7, #7
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d106      	bne.n	800a9b4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	4908      	ldr	r1, [pc, #32]	; (800a9cc <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a9aa:	4b09      	ldr	r3, [pc, #36]	; (800a9d0 <USBD_FS_ConfigStrDescriptor+0x40>)
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	f7ff fda8 	bl	800a502 <USBD_GetString>
 800a9b2:	e005      	b.n	800a9c0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	4905      	ldr	r1, [pc, #20]	; (800a9cc <USBD_FS_ConfigStrDescriptor+0x3c>)
 800a9b8:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <USBD_FS_ConfigStrDescriptor+0x40>)
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	f7ff fda1 	bl	800a502 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9c0:	4b02      	ldr	r3, [pc, #8]	; (800a9cc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	b002      	add	sp, #8
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	46c0      	nop			; (mov r8, r8)
 800a9cc:	200010b4 	.word	0x200010b4
 800a9d0:	0800bb60 	.word	0x0800bb60

0800a9d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	0002      	movs	r2, r0
 800a9dc:	6039      	str	r1, [r7, #0]
 800a9de:	1dfb      	adds	r3, r7, #7
 800a9e0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800a9e2:	1dfb      	adds	r3, r7, #7
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d106      	bne.n	800a9f8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4908      	ldr	r1, [pc, #32]	; (800aa10 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a9ee:	4b09      	ldr	r3, [pc, #36]	; (800aa14 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a9f0:	0018      	movs	r0, r3
 800a9f2:	f7ff fd86 	bl	800a502 <USBD_GetString>
 800a9f6:	e005      	b.n	800aa04 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	4905      	ldr	r1, [pc, #20]	; (800aa10 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800a9fc:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800a9fe:	0018      	movs	r0, r3
 800aa00:	f7ff fd7f 	bl	800a502 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa04:	4b02      	ldr	r3, [pc, #8]	; (800aa10 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800aa06:	0018      	movs	r0, r3
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	b002      	add	sp, #8
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	46c0      	nop			; (mov r8, r8)
 800aa10:	200010b4 	.word	0x200010b4
 800aa14:	0800bb6c 	.word	0x0800bb6c

0800aa18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa1e:	4b10      	ldr	r3, [pc, #64]	; (800aa60 <Get_SerialNum+0x48>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa24:	4b0f      	ldr	r3, [pc, #60]	; (800aa64 <Get_SerialNum+0x4c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa2a:	4b0f      	ldr	r3, [pc, #60]	; (800aa68 <Get_SerialNum+0x50>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	18d3      	adds	r3, r2, r3
 800aa36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00b      	beq.n	800aa56 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa3e:	490b      	ldr	r1, [pc, #44]	; (800aa6c <Get_SerialNum+0x54>)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2208      	movs	r2, #8
 800aa44:	0018      	movs	r0, r3
 800aa46:	f000 f815 	bl	800aa74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa4a:	4909      	ldr	r1, [pc, #36]	; (800aa70 <Get_SerialNum+0x58>)
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2204      	movs	r2, #4
 800aa50:	0018      	movs	r0, r3
 800aa52:	f000 f80f 	bl	800aa74 <IntToUnicode>
  }
}
 800aa56:	46c0      	nop			; (mov r8, r8)
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	b004      	add	sp, #16
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	1ffff7ac 	.word	0x1ffff7ac
 800aa64:	1ffff7b0 	.word	0x1ffff7b0
 800aa68:	1ffff7b4 	.word	0x1ffff7b4
 800aa6c:	20000162 	.word	0x20000162
 800aa70:	20000172 	.word	0x20000172

0800aa74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	1dfb      	adds	r3, r7, #7
 800aa80:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800aa82:	2117      	movs	r1, #23
 800aa84:	187b      	adds	r3, r7, r1
 800aa86:	2200      	movs	r2, #0
 800aa88:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800aa8a:	187b      	adds	r3, r7, r1
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
 800aa90:	e02f      	b.n	800aaf2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	0f1b      	lsrs	r3, r3, #28
 800aa96:	2b09      	cmp	r3, #9
 800aa98:	d80d      	bhi.n	800aab6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	0f1b      	lsrs	r3, r3, #28
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	2317      	movs	r3, #23
 800aaa2:	18fb      	adds	r3, r7, r3
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	005b      	lsls	r3, r3, #1
 800aaa8:	0019      	movs	r1, r3
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	185b      	adds	r3, r3, r1
 800aaae:	3230      	adds	r2, #48	; 0x30
 800aab0:	b2d2      	uxtb	r2, r2
 800aab2:	701a      	strb	r2, [r3, #0]
 800aab4:	e00c      	b.n	800aad0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	0f1b      	lsrs	r3, r3, #28
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	2317      	movs	r3, #23
 800aabe:	18fb      	adds	r3, r7, r3
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	0019      	movs	r1, r3
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	185b      	adds	r3, r3, r1
 800aaca:	3237      	adds	r2, #55	; 0x37
 800aacc:	b2d2      	uxtb	r2, r2
 800aace:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	011b      	lsls	r3, r3, #4
 800aad4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aad6:	2117      	movs	r1, #23
 800aad8:	187b      	adds	r3, r7, r1
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	3301      	adds	r3, #1
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	18d3      	adds	r3, r2, r3
 800aae4:	2200      	movs	r2, #0
 800aae6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aae8:	187b      	adds	r3, r7, r1
 800aaea:	781a      	ldrb	r2, [r3, #0]
 800aaec:	187b      	adds	r3, r7, r1
 800aaee:	3201      	adds	r2, #1
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	2317      	movs	r3, #23
 800aaf4:	18fa      	adds	r2, r7, r3
 800aaf6:	1dfb      	adds	r3, r7, #7
 800aaf8:	7812      	ldrb	r2, [r2, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d3c8      	bcc.n	800aa92 <IntToUnicode+0x1e>
  }
}
 800ab00:	46c0      	nop			; (mov r8, r8)
 800ab02:	46c0      	nop			; (mov r8, r8)
 800ab04:	46bd      	mov	sp, r7
 800ab06:	b006      	add	sp, #24
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a0e      	ldr	r2, [pc, #56]	; (800ab54 <HAL_PCD_MspInit+0x48>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d115      	bne.n	800ab4a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ab1e:	4b0e      	ldr	r3, [pc, #56]	; (800ab58 <HAL_PCD_MspInit+0x4c>)
 800ab20:	69da      	ldr	r2, [r3, #28]
 800ab22:	4b0d      	ldr	r3, [pc, #52]	; (800ab58 <HAL_PCD_MspInit+0x4c>)
 800ab24:	2180      	movs	r1, #128	; 0x80
 800ab26:	0409      	lsls	r1, r1, #16
 800ab28:	430a      	orrs	r2, r1
 800ab2a:	61da      	str	r2, [r3, #28]
 800ab2c:	4b0a      	ldr	r3, [pc, #40]	; (800ab58 <HAL_PCD_MspInit+0x4c>)
 800ab2e:	69da      	ldr	r2, [r3, #28]
 800ab30:	2380      	movs	r3, #128	; 0x80
 800ab32:	041b      	lsls	r3, r3, #16
 800ab34:	4013      	ands	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]
 800ab38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	201f      	movs	r0, #31
 800ab40:	f7f7 fb5c 	bl	80021fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800ab44:	201f      	movs	r0, #31
 800ab46:	f7f7 fb6e 	bl	8002226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ab4a:	46c0      	nop			; (mov r8, r8)
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	b004      	add	sp, #16
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	46c0      	nop			; (mov r8, r8)
 800ab54:	40005c00 	.word	0x40005c00
 800ab58:	40021000 	.word	0x40021000

0800ab5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	23bc      	movs	r3, #188	; 0xbc
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	58d2      	ldr	r2, [r2, r3]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	21ac      	movs	r1, #172	; 0xac
 800ab70:	0089      	lsls	r1, r1, #2
 800ab72:	468c      	mov	ip, r1
 800ab74:	4463      	add	r3, ip
 800ab76:	0019      	movs	r1, r3
 800ab78:	0010      	movs	r0, r2
 800ab7a:	f7fe fc55 	bl	8009428 <USBD_LL_SetupStage>
}
 800ab7e:	46c0      	nop			; (mov r8, r8)
 800ab80:	46bd      	mov	sp, r7
 800ab82:	b002      	add	sp, #8
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab86:	b590      	push	{r4, r7, lr}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
 800ab8e:	000a      	movs	r2, r1
 800ab90:	1cfb      	adds	r3, r7, #3
 800ab92:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	23bc      	movs	r3, #188	; 0xbc
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	58d4      	ldr	r4, [r2, r3]
 800ab9c:	1cfb      	adds	r3, r7, #3
 800ab9e:	781a      	ldrb	r2, [r3, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	23be      	movs	r3, #190	; 0xbe
 800aba4:	0059      	lsls	r1, r3, #1
 800aba6:	0013      	movs	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	189b      	adds	r3, r3, r2
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	18c3      	adds	r3, r0, r3
 800abb0:	185b      	adds	r3, r3, r1
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	1cfb      	adds	r3, r7, #3
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	0019      	movs	r1, r3
 800abba:	0020      	movs	r0, r4
 800abbc:	f7fe fc92 	bl	80094e4 <USBD_LL_DataOutStage>
}
 800abc0:	46c0      	nop			; (mov r8, r8)
 800abc2:	46bd      	mov	sp, r7
 800abc4:	b003      	add	sp, #12
 800abc6:	bd90      	pop	{r4, r7, pc}

0800abc8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	000a      	movs	r2, r1
 800abd2:	1cfb      	adds	r3, r7, #3
 800abd4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	23bc      	movs	r3, #188	; 0xbc
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	58d0      	ldr	r0, [r2, r3]
 800abde:	1cfb      	adds	r3, r7, #3
 800abe0:	781a      	ldrb	r2, [r3, #0]
 800abe2:	6879      	ldr	r1, [r7, #4]
 800abe4:	0013      	movs	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	189b      	adds	r3, r3, r2
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	18cb      	adds	r3, r1, r3
 800abee:	333c      	adds	r3, #60	; 0x3c
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	1cfb      	adds	r3, r7, #3
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	0019      	movs	r1, r3
 800abf8:	f7fe fcf6 	bl	80095e8 <USBD_LL_DataInStage>
}
 800abfc:	46c0      	nop			; (mov r8, r8)
 800abfe:	46bd      	mov	sp, r7
 800ac00:	b002      	add	sp, #8
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	23bc      	movs	r3, #188	; 0xbc
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	58d3      	ldr	r3, [r2, r3]
 800ac14:	0018      	movs	r0, r3
 800ac16:	f7fe fe2d 	bl	8009874 <USBD_LL_SOF>
}
 800ac1a:	46c0      	nop			; (mov r8, r8)
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	b002      	add	sp, #8
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b084      	sub	sp, #16
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac2a:	230f      	movs	r3, #15
 800ac2c:	18fb      	adds	r3, r7, r3
 800ac2e:	2201      	movs	r2, #1
 800ac30:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d001      	beq.n	800ac3e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800ac3a:	f7f6 fc2b 	bl	8001494 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	23bc      	movs	r3, #188	; 0xbc
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	58d2      	ldr	r2, [r2, r3]
 800ac46:	230f      	movs	r3, #15
 800ac48:	18fb      	adds	r3, r7, r3
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	0019      	movs	r1, r3
 800ac4e:	0010      	movs	r0, r2
 800ac50:	f7fe fdcf 	bl	80097f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	23bc      	movs	r3, #188	; 0xbc
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	58d3      	ldr	r3, [r2, r3]
 800ac5c:	0018      	movs	r0, r3
 800ac5e:	f7fe fd80 	bl	8009762 <USBD_LL_Reset>
}
 800ac62:	46c0      	nop			; (mov r8, r8)
 800ac64:	46bd      	mov	sp, r7
 800ac66:	b004      	add	sp, #16
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	23bc      	movs	r3, #188	; 0xbc
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	58d3      	ldr	r3, [r2, r3]
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	f7fe fdc9 	bl	8009814 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d005      	beq.n	800ac96 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac8a:	4b05      	ldr	r3, [pc, #20]	; (800aca0 <HAL_PCD_SuspendCallback+0x34>)
 800ac8c:	691a      	ldr	r2, [r3, #16]
 800ac8e:	4b04      	ldr	r3, [pc, #16]	; (800aca0 <HAL_PCD_SuspendCallback+0x34>)
 800ac90:	2106      	movs	r1, #6
 800ac92:	430a      	orrs	r2, r1
 800ac94:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800ac96:	46c0      	nop			; (mov r8, r8)
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	b002      	add	sp, #8
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	46c0      	nop			; (mov r8, r8)
 800aca0:	e000ed00 	.word	0xe000ed00

0800aca4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d007      	beq.n	800acc4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acb4:	4b09      	ldr	r3, [pc, #36]	; (800acdc <HAL_PCD_ResumeCallback+0x38>)
 800acb6:	691a      	ldr	r2, [r3, #16]
 800acb8:	4b08      	ldr	r3, [pc, #32]	; (800acdc <HAL_PCD_ResumeCallback+0x38>)
 800acba:	2106      	movs	r1, #6
 800acbc:	438a      	bics	r2, r1
 800acbe:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800acc0:	f000 fa44 	bl	800b14c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	23bc      	movs	r3, #188	; 0xbc
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	58d3      	ldr	r3, [r2, r3]
 800accc:	0018      	movs	r0, r3
 800acce:	f7fe fdb9 	bl	8009844 <USBD_LL_Resume>
}
 800acd2:	46c0      	nop			; (mov r8, r8)
 800acd4:	46bd      	mov	sp, r7
 800acd6:	b002      	add	sp, #8
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	46c0      	nop			; (mov r8, r8)
 800acdc:	e000ed00 	.word	0xe000ed00

0800ace0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ace8:	4a2d      	ldr	r2, [pc, #180]	; (800ada0 <USBD_LL_Init+0xc0>)
 800acea:	23bc      	movs	r3, #188	; 0xbc
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	23b0      	movs	r3, #176	; 0xb0
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4929      	ldr	r1, [pc, #164]	; (800ada0 <USBD_LL_Init+0xc0>)
 800acfa:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800acfc:	4b28      	ldr	r3, [pc, #160]	; (800ada0 <USBD_LL_Init+0xc0>)
 800acfe:	4a29      	ldr	r2, [pc, #164]	; (800ada4 <USBD_LL_Init+0xc4>)
 800ad00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ad02:	4b27      	ldr	r3, [pc, #156]	; (800ada0 <USBD_LL_Init+0xc0>)
 800ad04:	2208      	movs	r2, #8
 800ad06:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ad08:	4b25      	ldr	r3, [pc, #148]	; (800ada0 <USBD_LL_Init+0xc0>)
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad0e:	4b24      	ldr	r3, [pc, #144]	; (800ada0 <USBD_LL_Init+0xc0>)
 800ad10:	2202      	movs	r2, #2
 800ad12:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ad14:	4b22      	ldr	r3, [pc, #136]	; (800ada0 <USBD_LL_Init+0xc0>)
 800ad16:	2200      	movs	r2, #0
 800ad18:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ad1a:	4b21      	ldr	r3, [pc, #132]	; (800ada0 <USBD_LL_Init+0xc0>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ad20:	4b1f      	ldr	r3, [pc, #124]	; (800ada0 <USBD_LL_Init+0xc0>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ad26:	4b1e      	ldr	r3, [pc, #120]	; (800ada0 <USBD_LL_Init+0xc0>)
 800ad28:	0018      	movs	r0, r3
 800ad2a:	f7f7 fe07 	bl	800293c <HAL_PCD_Init>
 800ad2e:	1e03      	subs	r3, r0, #0
 800ad30:	d001      	beq.n	800ad36 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800ad32:	f7f6 fbaf 	bl	8001494 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	23b0      	movs	r3, #176	; 0xb0
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	58d0      	ldr	r0, [r2, r3]
 800ad3e:	2318      	movs	r3, #24
 800ad40:	2200      	movs	r2, #0
 800ad42:	2100      	movs	r1, #0
 800ad44:	f7f9 fbe8 	bl	8004518 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	23b0      	movs	r3, #176	; 0xb0
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	58d0      	ldr	r0, [r2, r3]
 800ad50:	2358      	movs	r3, #88	; 0x58
 800ad52:	2200      	movs	r2, #0
 800ad54:	2180      	movs	r1, #128	; 0x80
 800ad56:	f7f9 fbdf 	bl	8004518 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	23b0      	movs	r3, #176	; 0xb0
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	58d0      	ldr	r0, [r2, r3]
 800ad62:	23c0      	movs	r3, #192	; 0xc0
 800ad64:	2200      	movs	r2, #0
 800ad66:	2181      	movs	r1, #129	; 0x81
 800ad68:	f7f9 fbd6 	bl	8004518 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	23b0      	movs	r3, #176	; 0xb0
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	58d0      	ldr	r0, [r2, r3]
 800ad74:	2388      	movs	r3, #136	; 0x88
 800ad76:	005b      	lsls	r3, r3, #1
 800ad78:	2200      	movs	r2, #0
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	f7f9 fbcc 	bl	8004518 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	23b0      	movs	r3, #176	; 0xb0
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	58d0      	ldr	r0, [r2, r3]
 800ad88:	2380      	movs	r3, #128	; 0x80
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	2182      	movs	r1, #130	; 0x82
 800ad90:	f7f9 fbc2 	bl	8004518 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	0018      	movs	r0, r3
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	b002      	add	sp, #8
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	46c0      	nop			; (mov r8, r8)
 800ada0:	200012b4 	.word	0x200012b4
 800ada4:	40005c00 	.word	0x40005c00

0800ada8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ada8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb0:	210f      	movs	r1, #15
 800adb2:	187b      	adds	r3, r7, r1
 800adb4:	2200      	movs	r2, #0
 800adb6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb8:	260e      	movs	r6, #14
 800adba:	19bb      	adds	r3, r7, r6
 800adbc:	2200      	movs	r2, #0
 800adbe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	23b0      	movs	r3, #176	; 0xb0
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	58d3      	ldr	r3, [r2, r3]
 800adc8:	000d      	movs	r5, r1
 800adca:	187c      	adds	r4, r7, r1
 800adcc:	0018      	movs	r0, r3
 800adce:	f7f7 fec5 	bl	8002b5c <HAL_PCD_Start>
 800add2:	0003      	movs	r3, r0
 800add4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add6:	19bc      	adds	r4, r7, r6
 800add8:	197b      	adds	r3, r7, r5
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	0018      	movs	r0, r3
 800adde:	f000 f9bc 	bl	800b15a <USBD_Get_USB_Status>
 800ade2:	0003      	movs	r3, r0
 800ade4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ade6:	19bb      	adds	r3, r7, r6
 800ade8:	781b      	ldrb	r3, [r3, #0]
}
 800adea:	0018      	movs	r0, r3
 800adec:	46bd      	mov	sp, r7
 800adee:	b005      	add	sp, #20
 800adf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800adf2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800adf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adf4:	b085      	sub	sp, #20
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	000c      	movs	r4, r1
 800adfc:	0010      	movs	r0, r2
 800adfe:	0019      	movs	r1, r3
 800ae00:	1cfb      	adds	r3, r7, #3
 800ae02:	1c22      	adds	r2, r4, #0
 800ae04:	701a      	strb	r2, [r3, #0]
 800ae06:	1cbb      	adds	r3, r7, #2
 800ae08:	1c02      	adds	r2, r0, #0
 800ae0a:	701a      	strb	r2, [r3, #0]
 800ae0c:	003b      	movs	r3, r7
 800ae0e:	1c0a      	adds	r2, r1, #0
 800ae10:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae12:	260f      	movs	r6, #15
 800ae14:	19bb      	adds	r3, r7, r6
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae1a:	250e      	movs	r5, #14
 800ae1c:	197b      	adds	r3, r7, r5
 800ae1e:	2200      	movs	r2, #0
 800ae20:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	23b0      	movs	r3, #176	; 0xb0
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	58d0      	ldr	r0, [r2, r3]
 800ae2a:	19bc      	adds	r4, r7, r6
 800ae2c:	1cbb      	adds	r3, r7, #2
 800ae2e:	781d      	ldrb	r5, [r3, #0]
 800ae30:	003b      	movs	r3, r7
 800ae32:	881a      	ldrh	r2, [r3, #0]
 800ae34:	1cfb      	adds	r3, r7, #3
 800ae36:	7819      	ldrb	r1, [r3, #0]
 800ae38:	002b      	movs	r3, r5
 800ae3a:	f7f8 f85c 	bl	8002ef6 <HAL_PCD_EP_Open>
 800ae3e:	0003      	movs	r3, r0
 800ae40:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae42:	250e      	movs	r5, #14
 800ae44:	197c      	adds	r4, r7, r5
 800ae46:	19bb      	adds	r3, r7, r6
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	0018      	movs	r0, r3
 800ae4c:	f000 f985 	bl	800b15a <USBD_Get_USB_Status>
 800ae50:	0003      	movs	r3, r0
 800ae52:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ae54:	197b      	adds	r3, r7, r5
 800ae56:	781b      	ldrb	r3, [r3, #0]
}
 800ae58:	0018      	movs	r0, r3
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	b005      	add	sp, #20
 800ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ae60 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	000a      	movs	r2, r1
 800ae6a:	1cfb      	adds	r3, r7, #3
 800ae6c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae6e:	210f      	movs	r1, #15
 800ae70:	187b      	adds	r3, r7, r1
 800ae72:	2200      	movs	r2, #0
 800ae74:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae76:	260e      	movs	r6, #14
 800ae78:	19bb      	adds	r3, r7, r6
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	23b0      	movs	r3, #176	; 0xb0
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	58d2      	ldr	r2, [r2, r3]
 800ae86:	000d      	movs	r5, r1
 800ae88:	187c      	adds	r4, r7, r1
 800ae8a:	1cfb      	adds	r3, r7, #3
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	0019      	movs	r1, r3
 800ae90:	0010      	movs	r0, r2
 800ae92:	f7f8 f8a8 	bl	8002fe6 <HAL_PCD_EP_Close>
 800ae96:	0003      	movs	r3, r0
 800ae98:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae9a:	19bc      	adds	r4, r7, r6
 800ae9c:	197b      	adds	r3, r7, r5
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	0018      	movs	r0, r3
 800aea2:	f000 f95a 	bl	800b15a <USBD_Get_USB_Status>
 800aea6:	0003      	movs	r3, r0
 800aea8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800aeaa:	19bb      	adds	r3, r7, r6
 800aeac:	781b      	ldrb	r3, [r3, #0]
}
 800aeae:	0018      	movs	r0, r3
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	b005      	add	sp, #20
 800aeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aeb6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeb8:	b085      	sub	sp, #20
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	000a      	movs	r2, r1
 800aec0:	1cfb      	adds	r3, r7, #3
 800aec2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aec4:	210f      	movs	r1, #15
 800aec6:	187b      	adds	r3, r7, r1
 800aec8:	2200      	movs	r2, #0
 800aeca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aecc:	260e      	movs	r6, #14
 800aece:	19bb      	adds	r3, r7, r6
 800aed0:	2200      	movs	r2, #0
 800aed2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	23b0      	movs	r3, #176	; 0xb0
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	58d2      	ldr	r2, [r2, r3]
 800aedc:	000d      	movs	r5, r1
 800aede:	187c      	adds	r4, r7, r1
 800aee0:	1cfb      	adds	r3, r7, #3
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	0019      	movs	r1, r3
 800aee6:	0010      	movs	r0, r2
 800aee8:	f7f8 f974 	bl	80031d4 <HAL_PCD_EP_SetStall>
 800aeec:	0003      	movs	r3, r0
 800aeee:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aef0:	19bc      	adds	r4, r7, r6
 800aef2:	197b      	adds	r3, r7, r5
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	0018      	movs	r0, r3
 800aef8:	f000 f92f 	bl	800b15a <USBD_Get_USB_Status>
 800aefc:	0003      	movs	r3, r0
 800aefe:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800af00:	19bb      	adds	r3, r7, r6
 800af02:	781b      	ldrb	r3, [r3, #0]
}
 800af04:	0018      	movs	r0, r3
 800af06:	46bd      	mov	sp, r7
 800af08:	b005      	add	sp, #20
 800af0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af0c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	000a      	movs	r2, r1
 800af16:	1cfb      	adds	r3, r7, #3
 800af18:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af1a:	210f      	movs	r1, #15
 800af1c:	187b      	adds	r3, r7, r1
 800af1e:	2200      	movs	r2, #0
 800af20:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af22:	260e      	movs	r6, #14
 800af24:	19bb      	adds	r3, r7, r6
 800af26:	2200      	movs	r2, #0
 800af28:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	23b0      	movs	r3, #176	; 0xb0
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	58d2      	ldr	r2, [r2, r3]
 800af32:	000d      	movs	r5, r1
 800af34:	187c      	adds	r4, r7, r1
 800af36:	1cfb      	adds	r3, r7, #3
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	0019      	movs	r1, r3
 800af3c:	0010      	movs	r0, r2
 800af3e:	f7f8 f9a5 	bl	800328c <HAL_PCD_EP_ClrStall>
 800af42:	0003      	movs	r3, r0
 800af44:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af46:	19bc      	adds	r4, r7, r6
 800af48:	197b      	adds	r3, r7, r5
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	0018      	movs	r0, r3
 800af4e:	f000 f904 	bl	800b15a <USBD_Get_USB_Status>
 800af52:	0003      	movs	r3, r0
 800af54:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800af56:	19bb      	adds	r3, r7, r6
 800af58:	781b      	ldrb	r3, [r3, #0]
}
 800af5a:	0018      	movs	r0, r3
 800af5c:	46bd      	mov	sp, r7
 800af5e:	b005      	add	sp, #20
 800af60:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af62 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	000a      	movs	r2, r1
 800af6c:	1cfb      	adds	r3, r7, #3
 800af6e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	23b0      	movs	r3, #176	; 0xb0
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	58d3      	ldr	r3, [r2, r3]
 800af78:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af7a:	1cfb      	adds	r3, r7, #3
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	b25b      	sxtb	r3, r3
 800af80:	2b00      	cmp	r3, #0
 800af82:	da0d      	bge.n	800afa0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af84:	1cfb      	adds	r3, r7, #3
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	227f      	movs	r2, #127	; 0x7f
 800af8a:	4013      	ands	r3, r2
 800af8c:	68f9      	ldr	r1, [r7, #12]
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	0013      	movs	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	189b      	adds	r3, r3, r2
 800af96:	00db      	lsls	r3, r3, #3
 800af98:	18cb      	adds	r3, r1, r3
 800af9a:	3302      	adds	r3, #2
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	e00d      	b.n	800afbc <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800afa0:	1cfb      	adds	r3, r7, #3
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	227f      	movs	r2, #127	; 0x7f
 800afa6:	401a      	ands	r2, r3
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	23b5      	movs	r3, #181	; 0xb5
 800afac:	0059      	lsls	r1, r3, #1
 800afae:	0013      	movs	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	189b      	adds	r3, r3, r2
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	18c3      	adds	r3, r0, r3
 800afb8:	185b      	adds	r3, r3, r1
 800afba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afbc:	0018      	movs	r0, r3
 800afbe:	46bd      	mov	sp, r7
 800afc0:	b004      	add	sp, #16
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800afc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	000a      	movs	r2, r1
 800afce:	1cfb      	adds	r3, r7, #3
 800afd0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afd2:	210f      	movs	r1, #15
 800afd4:	187b      	adds	r3, r7, r1
 800afd6:	2200      	movs	r2, #0
 800afd8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afda:	260e      	movs	r6, #14
 800afdc:	19bb      	adds	r3, r7, r6
 800afde:	2200      	movs	r2, #0
 800afe0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	23b0      	movs	r3, #176	; 0xb0
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	58d2      	ldr	r2, [r2, r3]
 800afea:	000d      	movs	r5, r1
 800afec:	187c      	adds	r4, r7, r1
 800afee:	1cfb      	adds	r3, r7, #3
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	0019      	movs	r1, r3
 800aff4:	0010      	movs	r0, r2
 800aff6:	f7f7 ff53 	bl	8002ea0 <HAL_PCD_SetAddress>
 800affa:	0003      	movs	r3, r0
 800affc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800affe:	19bc      	adds	r4, r7, r6
 800b000:	197b      	adds	r3, r7, r5
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	0018      	movs	r0, r3
 800b006:	f000 f8a8 	bl	800b15a <USBD_Get_USB_Status>
 800b00a:	0003      	movs	r3, r0
 800b00c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b00e:	19bb      	adds	r3, r7, r6
 800b010:	781b      	ldrb	r3, [r3, #0]
}
 800b012:	0018      	movs	r0, r3
 800b014:	46bd      	mov	sp, r7
 800b016:	b005      	add	sp, #20
 800b018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b01a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b01a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b01c:	b087      	sub	sp, #28
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	0008      	movs	r0, r1
 800b024:	607a      	str	r2, [r7, #4]
 800b026:	0019      	movs	r1, r3
 800b028:	230b      	movs	r3, #11
 800b02a:	18fb      	adds	r3, r7, r3
 800b02c:	1c02      	adds	r2, r0, #0
 800b02e:	701a      	strb	r2, [r3, #0]
 800b030:	2408      	movs	r4, #8
 800b032:	193b      	adds	r3, r7, r4
 800b034:	1c0a      	adds	r2, r1, #0
 800b036:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b038:	2117      	movs	r1, #23
 800b03a:	187b      	adds	r3, r7, r1
 800b03c:	2200      	movs	r2, #0
 800b03e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b040:	2516      	movs	r5, #22
 800b042:	197b      	adds	r3, r7, r5
 800b044:	2200      	movs	r2, #0
 800b046:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	23b0      	movs	r3, #176	; 0xb0
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	58d0      	ldr	r0, [r2, r3]
 800b050:	193b      	adds	r3, r7, r4
 800b052:	881d      	ldrh	r5, [r3, #0]
 800b054:	000e      	movs	r6, r1
 800b056:	187c      	adds	r4, r7, r1
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	230b      	movs	r3, #11
 800b05c:	18fb      	adds	r3, r7, r3
 800b05e:	7819      	ldrb	r1, [r3, #0]
 800b060:	002b      	movs	r3, r5
 800b062:	f7f8 f86e 	bl	8003142 <HAL_PCD_EP_Transmit>
 800b066:	0003      	movs	r3, r0
 800b068:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b06a:	2516      	movs	r5, #22
 800b06c:	197c      	adds	r4, r7, r5
 800b06e:	19bb      	adds	r3, r7, r6
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	0018      	movs	r0, r3
 800b074:	f000 f871 	bl	800b15a <USBD_Get_USB_Status>
 800b078:	0003      	movs	r3, r0
 800b07a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b07c:	197b      	adds	r3, r7, r5
 800b07e:	781b      	ldrb	r3, [r3, #0]
}
 800b080:	0018      	movs	r0, r3
 800b082:	46bd      	mov	sp, r7
 800b084:	b007      	add	sp, #28
 800b086:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b088 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	0008      	movs	r0, r1
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	0019      	movs	r1, r3
 800b096:	230b      	movs	r3, #11
 800b098:	18fb      	adds	r3, r7, r3
 800b09a:	1c02      	adds	r2, r0, #0
 800b09c:	701a      	strb	r2, [r3, #0]
 800b09e:	2408      	movs	r4, #8
 800b0a0:	193b      	adds	r3, r7, r4
 800b0a2:	1c0a      	adds	r2, r1, #0
 800b0a4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a6:	2117      	movs	r1, #23
 800b0a8:	187b      	adds	r3, r7, r1
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ae:	2516      	movs	r5, #22
 800b0b0:	197b      	adds	r3, r7, r5
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	23b0      	movs	r3, #176	; 0xb0
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	58d0      	ldr	r0, [r2, r3]
 800b0be:	193b      	adds	r3, r7, r4
 800b0c0:	881d      	ldrh	r5, [r3, #0]
 800b0c2:	000e      	movs	r6, r1
 800b0c4:	187c      	adds	r4, r7, r1
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	230b      	movs	r3, #11
 800b0ca:	18fb      	adds	r3, r7, r3
 800b0cc:	7819      	ldrb	r1, [r3, #0]
 800b0ce:	002b      	movs	r3, r5
 800b0d0:	f7f7 ffda 	bl	8003088 <HAL_PCD_EP_Receive>
 800b0d4:	0003      	movs	r3, r0
 800b0d6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d8:	2516      	movs	r5, #22
 800b0da:	197c      	adds	r4, r7, r5
 800b0dc:	19bb      	adds	r3, r7, r6
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	0018      	movs	r0, r3
 800b0e2:	f000 f83a 	bl	800b15a <USBD_Get_USB_Status>
 800b0e6:	0003      	movs	r3, r0
 800b0e8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b0ea:	197b      	adds	r3, r7, r5
 800b0ec:	781b      	ldrb	r3, [r3, #0]
}
 800b0ee:	0018      	movs	r0, r3
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	b007      	add	sp, #28
 800b0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	000a      	movs	r2, r1
 800b100:	1cfb      	adds	r3, r7, #3
 800b102:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	23b0      	movs	r3, #176	; 0xb0
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	58d2      	ldr	r2, [r2, r3]
 800b10c:	1cfb      	adds	r3, r7, #3
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	0019      	movs	r1, r3
 800b112:	0010      	movs	r0, r2
 800b114:	f7f7 fffc 	bl	8003110 <HAL_PCD_EP_GetRxCount>
 800b118:	0003      	movs	r3, r0
}
 800b11a:	0018      	movs	r0, r3
 800b11c:	46bd      	mov	sp, r7
 800b11e:	b002      	add	sp, #8
 800b120:	bd80      	pop	{r7, pc}
	...

0800b124 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b12c:	4b02      	ldr	r3, [pc, #8]	; (800b138 <USBD_static_malloc+0x14>)
}
 800b12e:	0018      	movs	r0, r3
 800b130:	46bd      	mov	sp, r7
 800b132:	b002      	add	sp, #8
 800b134:	bd80      	pop	{r7, pc}
 800b136:	46c0      	nop			; (mov r8, r8)
 800b138:	2000021c 	.word	0x2000021c

0800b13c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]

}
 800b144:	46c0      	nop			; (mov r8, r8)
 800b146:	46bd      	mov	sp, r7
 800b148:	b002      	add	sp, #8
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b150:	f7f5 fa6a 	bl	8000628 <SystemClock_Config>
}
 800b154:	46c0      	nop			; (mov r8, r8)
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	0002      	movs	r2, r0
 800b162:	1dfb      	adds	r3, r7, #7
 800b164:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b166:	230f      	movs	r3, #15
 800b168:	18fb      	adds	r3, r7, r3
 800b16a:	2200      	movs	r2, #0
 800b16c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800b16e:	1dfb      	adds	r3, r7, #7
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b03      	cmp	r3, #3
 800b174:	d017      	beq.n	800b1a6 <USBD_Get_USB_Status+0x4c>
 800b176:	dc1b      	bgt.n	800b1b0 <USBD_Get_USB_Status+0x56>
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d00f      	beq.n	800b19c <USBD_Get_USB_Status+0x42>
 800b17c:	dc18      	bgt.n	800b1b0 <USBD_Get_USB_Status+0x56>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d002      	beq.n	800b188 <USBD_Get_USB_Status+0x2e>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d005      	beq.n	800b192 <USBD_Get_USB_Status+0x38>
 800b186:	e013      	b.n	800b1b0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b188:	230f      	movs	r3, #15
 800b18a:	18fb      	adds	r3, r7, r3
 800b18c:	2200      	movs	r2, #0
 800b18e:	701a      	strb	r2, [r3, #0]
    break;
 800b190:	e013      	b.n	800b1ba <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b192:	230f      	movs	r3, #15
 800b194:	18fb      	adds	r3, r7, r3
 800b196:	2202      	movs	r2, #2
 800b198:	701a      	strb	r2, [r3, #0]
    break;
 800b19a:	e00e      	b.n	800b1ba <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b19c:	230f      	movs	r3, #15
 800b19e:	18fb      	adds	r3, r7, r3
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	701a      	strb	r2, [r3, #0]
    break;
 800b1a4:	e009      	b.n	800b1ba <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1a6:	230f      	movs	r3, #15
 800b1a8:	18fb      	adds	r3, r7, r3
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	701a      	strb	r2, [r3, #0]
    break;
 800b1ae:	e004      	b.n	800b1ba <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800b1b0:	230f      	movs	r3, #15
 800b1b2:	18fb      	adds	r3, r7, r3
 800b1b4:	2202      	movs	r2, #2
 800b1b6:	701a      	strb	r2, [r3, #0]
    break;
 800b1b8:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800b1ba:	230f      	movs	r3, #15
 800b1bc:	18fb      	adds	r3, r7, r3
 800b1be:	781b      	ldrb	r3, [r3, #0]
}
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	b004      	add	sp, #16
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <__errno>:
 800b1c8:	4b01      	ldr	r3, [pc, #4]	; (800b1d0 <__errno+0x8>)
 800b1ca:	6818      	ldr	r0, [r3, #0]
 800b1cc:	4770      	bx	lr
 800b1ce:	46c0      	nop			; (mov r8, r8)
 800b1d0:	2000017c 	.word	0x2000017c

0800b1d4 <__libc_init_array>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	2600      	movs	r6, #0
 800b1d8:	4d0c      	ldr	r5, [pc, #48]	; (800b20c <__libc_init_array+0x38>)
 800b1da:	4c0d      	ldr	r4, [pc, #52]	; (800b210 <__libc_init_array+0x3c>)
 800b1dc:	1b64      	subs	r4, r4, r5
 800b1de:	10a4      	asrs	r4, r4, #2
 800b1e0:	42a6      	cmp	r6, r4
 800b1e2:	d109      	bne.n	800b1f8 <__libc_init_array+0x24>
 800b1e4:	2600      	movs	r6, #0
 800b1e6:	f000 fc5b 	bl	800baa0 <_init>
 800b1ea:	4d0a      	ldr	r5, [pc, #40]	; (800b214 <__libc_init_array+0x40>)
 800b1ec:	4c0a      	ldr	r4, [pc, #40]	; (800b218 <__libc_init_array+0x44>)
 800b1ee:	1b64      	subs	r4, r4, r5
 800b1f0:	10a4      	asrs	r4, r4, #2
 800b1f2:	42a6      	cmp	r6, r4
 800b1f4:	d105      	bne.n	800b202 <__libc_init_array+0x2e>
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	00b3      	lsls	r3, r6, #2
 800b1fa:	58eb      	ldr	r3, [r5, r3]
 800b1fc:	4798      	blx	r3
 800b1fe:	3601      	adds	r6, #1
 800b200:	e7ee      	b.n	800b1e0 <__libc_init_array+0xc>
 800b202:	00b3      	lsls	r3, r6, #2
 800b204:	58eb      	ldr	r3, [r5, r3]
 800b206:	4798      	blx	r3
 800b208:	3601      	adds	r6, #1
 800b20a:	e7f2      	b.n	800b1f2 <__libc_init_array+0x1e>
 800b20c:	0800bcd0 	.word	0x0800bcd0
 800b210:	0800bcd0 	.word	0x0800bcd0
 800b214:	0800bcd0 	.word	0x0800bcd0
 800b218:	0800bcd4 	.word	0x0800bcd4

0800b21c <malloc>:
 800b21c:	b510      	push	{r4, lr}
 800b21e:	4b03      	ldr	r3, [pc, #12]	; (800b22c <malloc+0x10>)
 800b220:	0001      	movs	r1, r0
 800b222:	6818      	ldr	r0, [r3, #0]
 800b224:	f000 f860 	bl	800b2e8 <_malloc_r>
 800b228:	bd10      	pop	{r4, pc}
 800b22a:	46c0      	nop			; (mov r8, r8)
 800b22c:	2000017c 	.word	0x2000017c

0800b230 <free>:
 800b230:	b510      	push	{r4, lr}
 800b232:	4b03      	ldr	r3, [pc, #12]	; (800b240 <free+0x10>)
 800b234:	0001      	movs	r1, r0
 800b236:	6818      	ldr	r0, [r3, #0]
 800b238:	f000 f80c 	bl	800b254 <_free_r>
 800b23c:	bd10      	pop	{r4, pc}
 800b23e:	46c0      	nop			; (mov r8, r8)
 800b240:	2000017c 	.word	0x2000017c

0800b244 <memset>:
 800b244:	0003      	movs	r3, r0
 800b246:	1882      	adds	r2, r0, r2
 800b248:	4293      	cmp	r3, r2
 800b24a:	d100      	bne.n	800b24e <memset+0xa>
 800b24c:	4770      	bx	lr
 800b24e:	7019      	strb	r1, [r3, #0]
 800b250:	3301      	adds	r3, #1
 800b252:	e7f9      	b.n	800b248 <memset+0x4>

0800b254 <_free_r>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	0005      	movs	r5, r0
 800b258:	2900      	cmp	r1, #0
 800b25a:	d010      	beq.n	800b27e <_free_r+0x2a>
 800b25c:	1f0c      	subs	r4, r1, #4
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	da00      	bge.n	800b266 <_free_r+0x12>
 800b264:	18e4      	adds	r4, r4, r3
 800b266:	0028      	movs	r0, r5
 800b268:	f000 f8ce 	bl	800b408 <__malloc_lock>
 800b26c:	4a1d      	ldr	r2, [pc, #116]	; (800b2e4 <_free_r+0x90>)
 800b26e:	6813      	ldr	r3, [r2, #0]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d105      	bne.n	800b280 <_free_r+0x2c>
 800b274:	6063      	str	r3, [r4, #4]
 800b276:	6014      	str	r4, [r2, #0]
 800b278:	0028      	movs	r0, r5
 800b27a:	f000 f8cd 	bl	800b418 <__malloc_unlock>
 800b27e:	bd70      	pop	{r4, r5, r6, pc}
 800b280:	42a3      	cmp	r3, r4
 800b282:	d908      	bls.n	800b296 <_free_r+0x42>
 800b284:	6821      	ldr	r1, [r4, #0]
 800b286:	1860      	adds	r0, r4, r1
 800b288:	4283      	cmp	r3, r0
 800b28a:	d1f3      	bne.n	800b274 <_free_r+0x20>
 800b28c:	6818      	ldr	r0, [r3, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	1841      	adds	r1, r0, r1
 800b292:	6021      	str	r1, [r4, #0]
 800b294:	e7ee      	b.n	800b274 <_free_r+0x20>
 800b296:	001a      	movs	r2, r3
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <_free_r+0x4e>
 800b29e:	42a3      	cmp	r3, r4
 800b2a0:	d9f9      	bls.n	800b296 <_free_r+0x42>
 800b2a2:	6811      	ldr	r1, [r2, #0]
 800b2a4:	1850      	adds	r0, r2, r1
 800b2a6:	42a0      	cmp	r0, r4
 800b2a8:	d10b      	bne.n	800b2c2 <_free_r+0x6e>
 800b2aa:	6820      	ldr	r0, [r4, #0]
 800b2ac:	1809      	adds	r1, r1, r0
 800b2ae:	1850      	adds	r0, r2, r1
 800b2b0:	6011      	str	r1, [r2, #0]
 800b2b2:	4283      	cmp	r3, r0
 800b2b4:	d1e0      	bne.n	800b278 <_free_r+0x24>
 800b2b6:	6818      	ldr	r0, [r3, #0]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	1841      	adds	r1, r0, r1
 800b2bc:	6011      	str	r1, [r2, #0]
 800b2be:	6053      	str	r3, [r2, #4]
 800b2c0:	e7da      	b.n	800b278 <_free_r+0x24>
 800b2c2:	42a0      	cmp	r0, r4
 800b2c4:	d902      	bls.n	800b2cc <_free_r+0x78>
 800b2c6:	230c      	movs	r3, #12
 800b2c8:	602b      	str	r3, [r5, #0]
 800b2ca:	e7d5      	b.n	800b278 <_free_r+0x24>
 800b2cc:	6821      	ldr	r1, [r4, #0]
 800b2ce:	1860      	adds	r0, r4, r1
 800b2d0:	4283      	cmp	r3, r0
 800b2d2:	d103      	bne.n	800b2dc <_free_r+0x88>
 800b2d4:	6818      	ldr	r0, [r3, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	1841      	adds	r1, r0, r1
 800b2da:	6021      	str	r1, [r4, #0]
 800b2dc:	6063      	str	r3, [r4, #4]
 800b2de:	6054      	str	r4, [r2, #4]
 800b2e0:	e7ca      	b.n	800b278 <_free_r+0x24>
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	2000043c 	.word	0x2000043c

0800b2e8 <_malloc_r>:
 800b2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	1ccd      	adds	r5, r1, #3
 800b2ee:	439d      	bics	r5, r3
 800b2f0:	3508      	adds	r5, #8
 800b2f2:	0006      	movs	r6, r0
 800b2f4:	2d0c      	cmp	r5, #12
 800b2f6:	d21f      	bcs.n	800b338 <_malloc_r+0x50>
 800b2f8:	250c      	movs	r5, #12
 800b2fa:	42a9      	cmp	r1, r5
 800b2fc:	d81e      	bhi.n	800b33c <_malloc_r+0x54>
 800b2fe:	0030      	movs	r0, r6
 800b300:	f000 f882 	bl	800b408 <__malloc_lock>
 800b304:	4925      	ldr	r1, [pc, #148]	; (800b39c <_malloc_r+0xb4>)
 800b306:	680a      	ldr	r2, [r1, #0]
 800b308:	0014      	movs	r4, r2
 800b30a:	2c00      	cmp	r4, #0
 800b30c:	d11a      	bne.n	800b344 <_malloc_r+0x5c>
 800b30e:	4f24      	ldr	r7, [pc, #144]	; (800b3a0 <_malloc_r+0xb8>)
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d104      	bne.n	800b320 <_malloc_r+0x38>
 800b316:	0021      	movs	r1, r4
 800b318:	0030      	movs	r0, r6
 800b31a:	f000 f843 	bl	800b3a4 <_sbrk_r>
 800b31e:	6038      	str	r0, [r7, #0]
 800b320:	0029      	movs	r1, r5
 800b322:	0030      	movs	r0, r6
 800b324:	f000 f83e 	bl	800b3a4 <_sbrk_r>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d12b      	bne.n	800b384 <_malloc_r+0x9c>
 800b32c:	230c      	movs	r3, #12
 800b32e:	0030      	movs	r0, r6
 800b330:	6033      	str	r3, [r6, #0]
 800b332:	f000 f871 	bl	800b418 <__malloc_unlock>
 800b336:	e003      	b.n	800b340 <_malloc_r+0x58>
 800b338:	2d00      	cmp	r5, #0
 800b33a:	dade      	bge.n	800b2fa <_malloc_r+0x12>
 800b33c:	230c      	movs	r3, #12
 800b33e:	6033      	str	r3, [r6, #0]
 800b340:	2000      	movs	r0, #0
 800b342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b344:	6823      	ldr	r3, [r4, #0]
 800b346:	1b5b      	subs	r3, r3, r5
 800b348:	d419      	bmi.n	800b37e <_malloc_r+0x96>
 800b34a:	2b0b      	cmp	r3, #11
 800b34c:	d903      	bls.n	800b356 <_malloc_r+0x6e>
 800b34e:	6023      	str	r3, [r4, #0]
 800b350:	18e4      	adds	r4, r4, r3
 800b352:	6025      	str	r5, [r4, #0]
 800b354:	e003      	b.n	800b35e <_malloc_r+0x76>
 800b356:	6863      	ldr	r3, [r4, #4]
 800b358:	42a2      	cmp	r2, r4
 800b35a:	d10e      	bne.n	800b37a <_malloc_r+0x92>
 800b35c:	600b      	str	r3, [r1, #0]
 800b35e:	0030      	movs	r0, r6
 800b360:	f000 f85a 	bl	800b418 <__malloc_unlock>
 800b364:	0020      	movs	r0, r4
 800b366:	2207      	movs	r2, #7
 800b368:	300b      	adds	r0, #11
 800b36a:	1d23      	adds	r3, r4, #4
 800b36c:	4390      	bics	r0, r2
 800b36e:	1ac2      	subs	r2, r0, r3
 800b370:	4298      	cmp	r0, r3
 800b372:	d0e6      	beq.n	800b342 <_malloc_r+0x5a>
 800b374:	1a1b      	subs	r3, r3, r0
 800b376:	50a3      	str	r3, [r4, r2]
 800b378:	e7e3      	b.n	800b342 <_malloc_r+0x5a>
 800b37a:	6053      	str	r3, [r2, #4]
 800b37c:	e7ef      	b.n	800b35e <_malloc_r+0x76>
 800b37e:	0022      	movs	r2, r4
 800b380:	6864      	ldr	r4, [r4, #4]
 800b382:	e7c2      	b.n	800b30a <_malloc_r+0x22>
 800b384:	2303      	movs	r3, #3
 800b386:	1cc4      	adds	r4, r0, #3
 800b388:	439c      	bics	r4, r3
 800b38a:	42a0      	cmp	r0, r4
 800b38c:	d0e1      	beq.n	800b352 <_malloc_r+0x6a>
 800b38e:	1a21      	subs	r1, r4, r0
 800b390:	0030      	movs	r0, r6
 800b392:	f000 f807 	bl	800b3a4 <_sbrk_r>
 800b396:	1c43      	adds	r3, r0, #1
 800b398:	d1db      	bne.n	800b352 <_malloc_r+0x6a>
 800b39a:	e7c7      	b.n	800b32c <_malloc_r+0x44>
 800b39c:	2000043c 	.word	0x2000043c
 800b3a0:	20000440 	.word	0x20000440

0800b3a4 <_sbrk_r>:
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	b570      	push	{r4, r5, r6, lr}
 800b3a8:	4d06      	ldr	r5, [pc, #24]	; (800b3c4 <_sbrk_r+0x20>)
 800b3aa:	0004      	movs	r4, r0
 800b3ac:	0008      	movs	r0, r1
 800b3ae:	602b      	str	r3, [r5, #0]
 800b3b0:	f7f6 fb32 	bl	8001a18 <_sbrk>
 800b3b4:	1c43      	adds	r3, r0, #1
 800b3b6:	d103      	bne.n	800b3c0 <_sbrk_r+0x1c>
 800b3b8:	682b      	ldr	r3, [r5, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d000      	beq.n	800b3c0 <_sbrk_r+0x1c>
 800b3be:	6023      	str	r3, [r4, #0]
 800b3c0:	bd70      	pop	{r4, r5, r6, pc}
 800b3c2:	46c0      	nop			; (mov r8, r8)
 800b3c4:	200015a8 	.word	0x200015a8

0800b3c8 <siprintf>:
 800b3c8:	b40e      	push	{r1, r2, r3}
 800b3ca:	b500      	push	{lr}
 800b3cc:	490b      	ldr	r1, [pc, #44]	; (800b3fc <siprintf+0x34>)
 800b3ce:	b09c      	sub	sp, #112	; 0x70
 800b3d0:	ab1d      	add	r3, sp, #116	; 0x74
 800b3d2:	9002      	str	r0, [sp, #8]
 800b3d4:	9006      	str	r0, [sp, #24]
 800b3d6:	9107      	str	r1, [sp, #28]
 800b3d8:	9104      	str	r1, [sp, #16]
 800b3da:	4809      	ldr	r0, [pc, #36]	; (800b400 <siprintf+0x38>)
 800b3dc:	4909      	ldr	r1, [pc, #36]	; (800b404 <siprintf+0x3c>)
 800b3de:	cb04      	ldmia	r3!, {r2}
 800b3e0:	9105      	str	r1, [sp, #20]
 800b3e2:	6800      	ldr	r0, [r0, #0]
 800b3e4:	a902      	add	r1, sp, #8
 800b3e6:	9301      	str	r3, [sp, #4]
 800b3e8:	f000 f880 	bl	800b4ec <_svfiprintf_r>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	9a02      	ldr	r2, [sp, #8]
 800b3f0:	7013      	strb	r3, [r2, #0]
 800b3f2:	b01c      	add	sp, #112	; 0x70
 800b3f4:	bc08      	pop	{r3}
 800b3f6:	b003      	add	sp, #12
 800b3f8:	4718      	bx	r3
 800b3fa:	46c0      	nop			; (mov r8, r8)
 800b3fc:	7fffffff 	.word	0x7fffffff
 800b400:	2000017c 	.word	0x2000017c
 800b404:	ffff0208 	.word	0xffff0208

0800b408 <__malloc_lock>:
 800b408:	b510      	push	{r4, lr}
 800b40a:	4802      	ldr	r0, [pc, #8]	; (800b414 <__malloc_lock+0xc>)
 800b40c:	f000 faf0 	bl	800b9f0 <__retarget_lock_acquire_recursive>
 800b410:	bd10      	pop	{r4, pc}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	200015b0 	.word	0x200015b0

0800b418 <__malloc_unlock>:
 800b418:	b510      	push	{r4, lr}
 800b41a:	4802      	ldr	r0, [pc, #8]	; (800b424 <__malloc_unlock+0xc>)
 800b41c:	f000 fae9 	bl	800b9f2 <__retarget_lock_release_recursive>
 800b420:	bd10      	pop	{r4, pc}
 800b422:	46c0      	nop			; (mov r8, r8)
 800b424:	200015b0 	.word	0x200015b0

0800b428 <__ssputs_r>:
 800b428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b42a:	688e      	ldr	r6, [r1, #8]
 800b42c:	b085      	sub	sp, #20
 800b42e:	0007      	movs	r7, r0
 800b430:	000c      	movs	r4, r1
 800b432:	9203      	str	r2, [sp, #12]
 800b434:	9301      	str	r3, [sp, #4]
 800b436:	429e      	cmp	r6, r3
 800b438:	d83c      	bhi.n	800b4b4 <__ssputs_r+0x8c>
 800b43a:	2390      	movs	r3, #144	; 0x90
 800b43c:	898a      	ldrh	r2, [r1, #12]
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	421a      	tst	r2, r3
 800b442:	d034      	beq.n	800b4ae <__ssputs_r+0x86>
 800b444:	2503      	movs	r5, #3
 800b446:	6909      	ldr	r1, [r1, #16]
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	1a5b      	subs	r3, r3, r1
 800b44c:	9302      	str	r3, [sp, #8]
 800b44e:	6963      	ldr	r3, [r4, #20]
 800b450:	9802      	ldr	r0, [sp, #8]
 800b452:	435d      	muls	r5, r3
 800b454:	0feb      	lsrs	r3, r5, #31
 800b456:	195d      	adds	r5, r3, r5
 800b458:	9b01      	ldr	r3, [sp, #4]
 800b45a:	106d      	asrs	r5, r5, #1
 800b45c:	3301      	adds	r3, #1
 800b45e:	181b      	adds	r3, r3, r0
 800b460:	42ab      	cmp	r3, r5
 800b462:	d900      	bls.n	800b466 <__ssputs_r+0x3e>
 800b464:	001d      	movs	r5, r3
 800b466:	0553      	lsls	r3, r2, #21
 800b468:	d532      	bpl.n	800b4d0 <__ssputs_r+0xa8>
 800b46a:	0029      	movs	r1, r5
 800b46c:	0038      	movs	r0, r7
 800b46e:	f7ff ff3b 	bl	800b2e8 <_malloc_r>
 800b472:	1e06      	subs	r6, r0, #0
 800b474:	d109      	bne.n	800b48a <__ssputs_r+0x62>
 800b476:	230c      	movs	r3, #12
 800b478:	603b      	str	r3, [r7, #0]
 800b47a:	2340      	movs	r3, #64	; 0x40
 800b47c:	2001      	movs	r0, #1
 800b47e:	89a2      	ldrh	r2, [r4, #12]
 800b480:	4240      	negs	r0, r0
 800b482:	4313      	orrs	r3, r2
 800b484:	81a3      	strh	r3, [r4, #12]
 800b486:	b005      	add	sp, #20
 800b488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b48a:	9a02      	ldr	r2, [sp, #8]
 800b48c:	6921      	ldr	r1, [r4, #16]
 800b48e:	f000 fabc 	bl	800ba0a <memcpy>
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	4a14      	ldr	r2, [pc, #80]	; (800b4e8 <__ssputs_r+0xc0>)
 800b496:	401a      	ands	r2, r3
 800b498:	2380      	movs	r3, #128	; 0x80
 800b49a:	4313      	orrs	r3, r2
 800b49c:	81a3      	strh	r3, [r4, #12]
 800b49e:	9b02      	ldr	r3, [sp, #8]
 800b4a0:	6126      	str	r6, [r4, #16]
 800b4a2:	18f6      	adds	r6, r6, r3
 800b4a4:	6026      	str	r6, [r4, #0]
 800b4a6:	6165      	str	r5, [r4, #20]
 800b4a8:	9e01      	ldr	r6, [sp, #4]
 800b4aa:	1aed      	subs	r5, r5, r3
 800b4ac:	60a5      	str	r5, [r4, #8]
 800b4ae:	9b01      	ldr	r3, [sp, #4]
 800b4b0:	429e      	cmp	r6, r3
 800b4b2:	d900      	bls.n	800b4b6 <__ssputs_r+0x8e>
 800b4b4:	9e01      	ldr	r6, [sp, #4]
 800b4b6:	0032      	movs	r2, r6
 800b4b8:	9903      	ldr	r1, [sp, #12]
 800b4ba:	6820      	ldr	r0, [r4, #0]
 800b4bc:	f000 faae 	bl	800ba1c <memmove>
 800b4c0:	68a3      	ldr	r3, [r4, #8]
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	1b9b      	subs	r3, r3, r6
 800b4c6:	60a3      	str	r3, [r4, #8]
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	199e      	adds	r6, r3, r6
 800b4cc:	6026      	str	r6, [r4, #0]
 800b4ce:	e7da      	b.n	800b486 <__ssputs_r+0x5e>
 800b4d0:	002a      	movs	r2, r5
 800b4d2:	0038      	movs	r0, r7
 800b4d4:	f000 fab5 	bl	800ba42 <_realloc_r>
 800b4d8:	1e06      	subs	r6, r0, #0
 800b4da:	d1e0      	bne.n	800b49e <__ssputs_r+0x76>
 800b4dc:	0038      	movs	r0, r7
 800b4de:	6921      	ldr	r1, [r4, #16]
 800b4e0:	f7ff feb8 	bl	800b254 <_free_r>
 800b4e4:	e7c7      	b.n	800b476 <__ssputs_r+0x4e>
 800b4e6:	46c0      	nop			; (mov r8, r8)
 800b4e8:	fffffb7f 	.word	0xfffffb7f

0800b4ec <_svfiprintf_r>:
 800b4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ee:	b0a1      	sub	sp, #132	; 0x84
 800b4f0:	9003      	str	r0, [sp, #12]
 800b4f2:	001d      	movs	r5, r3
 800b4f4:	898b      	ldrh	r3, [r1, #12]
 800b4f6:	000f      	movs	r7, r1
 800b4f8:	0016      	movs	r6, r2
 800b4fa:	061b      	lsls	r3, r3, #24
 800b4fc:	d511      	bpl.n	800b522 <_svfiprintf_r+0x36>
 800b4fe:	690b      	ldr	r3, [r1, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10e      	bne.n	800b522 <_svfiprintf_r+0x36>
 800b504:	2140      	movs	r1, #64	; 0x40
 800b506:	f7ff feef 	bl	800b2e8 <_malloc_r>
 800b50a:	6038      	str	r0, [r7, #0]
 800b50c:	6138      	str	r0, [r7, #16]
 800b50e:	2800      	cmp	r0, #0
 800b510:	d105      	bne.n	800b51e <_svfiprintf_r+0x32>
 800b512:	230c      	movs	r3, #12
 800b514:	9a03      	ldr	r2, [sp, #12]
 800b516:	3801      	subs	r0, #1
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	b021      	add	sp, #132	; 0x84
 800b51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b51e:	2340      	movs	r3, #64	; 0x40
 800b520:	617b      	str	r3, [r7, #20]
 800b522:	2300      	movs	r3, #0
 800b524:	ac08      	add	r4, sp, #32
 800b526:	6163      	str	r3, [r4, #20]
 800b528:	3320      	adds	r3, #32
 800b52a:	7663      	strb	r3, [r4, #25]
 800b52c:	3310      	adds	r3, #16
 800b52e:	76a3      	strb	r3, [r4, #26]
 800b530:	9507      	str	r5, [sp, #28]
 800b532:	0035      	movs	r5, r6
 800b534:	782b      	ldrb	r3, [r5, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <_svfiprintf_r+0x52>
 800b53a:	2b25      	cmp	r3, #37	; 0x25
 800b53c:	d147      	bne.n	800b5ce <_svfiprintf_r+0xe2>
 800b53e:	1bab      	subs	r3, r5, r6
 800b540:	9305      	str	r3, [sp, #20]
 800b542:	42b5      	cmp	r5, r6
 800b544:	d00c      	beq.n	800b560 <_svfiprintf_r+0x74>
 800b546:	0032      	movs	r2, r6
 800b548:	0039      	movs	r1, r7
 800b54a:	9803      	ldr	r0, [sp, #12]
 800b54c:	f7ff ff6c 	bl	800b428 <__ssputs_r>
 800b550:	1c43      	adds	r3, r0, #1
 800b552:	d100      	bne.n	800b556 <_svfiprintf_r+0x6a>
 800b554:	e0ae      	b.n	800b6b4 <_svfiprintf_r+0x1c8>
 800b556:	6962      	ldr	r2, [r4, #20]
 800b558:	9b05      	ldr	r3, [sp, #20]
 800b55a:	4694      	mov	ip, r2
 800b55c:	4463      	add	r3, ip
 800b55e:	6163      	str	r3, [r4, #20]
 800b560:	782b      	ldrb	r3, [r5, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d100      	bne.n	800b568 <_svfiprintf_r+0x7c>
 800b566:	e0a5      	b.n	800b6b4 <_svfiprintf_r+0x1c8>
 800b568:	2201      	movs	r2, #1
 800b56a:	2300      	movs	r3, #0
 800b56c:	4252      	negs	r2, r2
 800b56e:	6062      	str	r2, [r4, #4]
 800b570:	a904      	add	r1, sp, #16
 800b572:	3254      	adds	r2, #84	; 0x54
 800b574:	1852      	adds	r2, r2, r1
 800b576:	1c6e      	adds	r6, r5, #1
 800b578:	6023      	str	r3, [r4, #0]
 800b57a:	60e3      	str	r3, [r4, #12]
 800b57c:	60a3      	str	r3, [r4, #8]
 800b57e:	7013      	strb	r3, [r2, #0]
 800b580:	65a3      	str	r3, [r4, #88]	; 0x58
 800b582:	2205      	movs	r2, #5
 800b584:	7831      	ldrb	r1, [r6, #0]
 800b586:	4854      	ldr	r0, [pc, #336]	; (800b6d8 <_svfiprintf_r+0x1ec>)
 800b588:	f000 fa34 	bl	800b9f4 <memchr>
 800b58c:	1c75      	adds	r5, r6, #1
 800b58e:	2800      	cmp	r0, #0
 800b590:	d11f      	bne.n	800b5d2 <_svfiprintf_r+0xe6>
 800b592:	6822      	ldr	r2, [r4, #0]
 800b594:	06d3      	lsls	r3, r2, #27
 800b596:	d504      	bpl.n	800b5a2 <_svfiprintf_r+0xb6>
 800b598:	2353      	movs	r3, #83	; 0x53
 800b59a:	a904      	add	r1, sp, #16
 800b59c:	185b      	adds	r3, r3, r1
 800b59e:	2120      	movs	r1, #32
 800b5a0:	7019      	strb	r1, [r3, #0]
 800b5a2:	0713      	lsls	r3, r2, #28
 800b5a4:	d504      	bpl.n	800b5b0 <_svfiprintf_r+0xc4>
 800b5a6:	2353      	movs	r3, #83	; 0x53
 800b5a8:	a904      	add	r1, sp, #16
 800b5aa:	185b      	adds	r3, r3, r1
 800b5ac:	212b      	movs	r1, #43	; 0x2b
 800b5ae:	7019      	strb	r1, [r3, #0]
 800b5b0:	7833      	ldrb	r3, [r6, #0]
 800b5b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b5b4:	d016      	beq.n	800b5e4 <_svfiprintf_r+0xf8>
 800b5b6:	0035      	movs	r5, r6
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	200a      	movs	r0, #10
 800b5bc:	68e3      	ldr	r3, [r4, #12]
 800b5be:	782a      	ldrb	r2, [r5, #0]
 800b5c0:	1c6e      	adds	r6, r5, #1
 800b5c2:	3a30      	subs	r2, #48	; 0x30
 800b5c4:	2a09      	cmp	r2, #9
 800b5c6:	d94e      	bls.n	800b666 <_svfiprintf_r+0x17a>
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	d111      	bne.n	800b5f0 <_svfiprintf_r+0x104>
 800b5cc:	e017      	b.n	800b5fe <_svfiprintf_r+0x112>
 800b5ce:	3501      	adds	r5, #1
 800b5d0:	e7b0      	b.n	800b534 <_svfiprintf_r+0x48>
 800b5d2:	4b41      	ldr	r3, [pc, #260]	; (800b6d8 <_svfiprintf_r+0x1ec>)
 800b5d4:	6822      	ldr	r2, [r4, #0]
 800b5d6:	1ac0      	subs	r0, r0, r3
 800b5d8:	2301      	movs	r3, #1
 800b5da:	4083      	lsls	r3, r0
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	002e      	movs	r6, r5
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	e7ce      	b.n	800b582 <_svfiprintf_r+0x96>
 800b5e4:	9b07      	ldr	r3, [sp, #28]
 800b5e6:	1d19      	adds	r1, r3, #4
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	9107      	str	r1, [sp, #28]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	db01      	blt.n	800b5f4 <_svfiprintf_r+0x108>
 800b5f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5f2:	e004      	b.n	800b5fe <_svfiprintf_r+0x112>
 800b5f4:	425b      	negs	r3, r3
 800b5f6:	60e3      	str	r3, [r4, #12]
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	782b      	ldrb	r3, [r5, #0]
 800b600:	2b2e      	cmp	r3, #46	; 0x2e
 800b602:	d10a      	bne.n	800b61a <_svfiprintf_r+0x12e>
 800b604:	786b      	ldrb	r3, [r5, #1]
 800b606:	2b2a      	cmp	r3, #42	; 0x2a
 800b608:	d135      	bne.n	800b676 <_svfiprintf_r+0x18a>
 800b60a:	9b07      	ldr	r3, [sp, #28]
 800b60c:	3502      	adds	r5, #2
 800b60e:	1d1a      	adds	r2, r3, #4
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	9207      	str	r2, [sp, #28]
 800b614:	2b00      	cmp	r3, #0
 800b616:	db2b      	blt.n	800b670 <_svfiprintf_r+0x184>
 800b618:	9309      	str	r3, [sp, #36]	; 0x24
 800b61a:	4e30      	ldr	r6, [pc, #192]	; (800b6dc <_svfiprintf_r+0x1f0>)
 800b61c:	2203      	movs	r2, #3
 800b61e:	0030      	movs	r0, r6
 800b620:	7829      	ldrb	r1, [r5, #0]
 800b622:	f000 f9e7 	bl	800b9f4 <memchr>
 800b626:	2800      	cmp	r0, #0
 800b628:	d006      	beq.n	800b638 <_svfiprintf_r+0x14c>
 800b62a:	2340      	movs	r3, #64	; 0x40
 800b62c:	1b80      	subs	r0, r0, r6
 800b62e:	4083      	lsls	r3, r0
 800b630:	6822      	ldr	r2, [r4, #0]
 800b632:	3501      	adds	r5, #1
 800b634:	4313      	orrs	r3, r2
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	7829      	ldrb	r1, [r5, #0]
 800b63a:	2206      	movs	r2, #6
 800b63c:	4828      	ldr	r0, [pc, #160]	; (800b6e0 <_svfiprintf_r+0x1f4>)
 800b63e:	1c6e      	adds	r6, r5, #1
 800b640:	7621      	strb	r1, [r4, #24]
 800b642:	f000 f9d7 	bl	800b9f4 <memchr>
 800b646:	2800      	cmp	r0, #0
 800b648:	d03c      	beq.n	800b6c4 <_svfiprintf_r+0x1d8>
 800b64a:	4b26      	ldr	r3, [pc, #152]	; (800b6e4 <_svfiprintf_r+0x1f8>)
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d125      	bne.n	800b69c <_svfiprintf_r+0x1b0>
 800b650:	2207      	movs	r2, #7
 800b652:	9b07      	ldr	r3, [sp, #28]
 800b654:	3307      	adds	r3, #7
 800b656:	4393      	bics	r3, r2
 800b658:	3308      	adds	r3, #8
 800b65a:	9307      	str	r3, [sp, #28]
 800b65c:	6963      	ldr	r3, [r4, #20]
 800b65e:	9a04      	ldr	r2, [sp, #16]
 800b660:	189b      	adds	r3, r3, r2
 800b662:	6163      	str	r3, [r4, #20]
 800b664:	e765      	b.n	800b532 <_svfiprintf_r+0x46>
 800b666:	4343      	muls	r3, r0
 800b668:	0035      	movs	r5, r6
 800b66a:	2101      	movs	r1, #1
 800b66c:	189b      	adds	r3, r3, r2
 800b66e:	e7a6      	b.n	800b5be <_svfiprintf_r+0xd2>
 800b670:	2301      	movs	r3, #1
 800b672:	425b      	negs	r3, r3
 800b674:	e7d0      	b.n	800b618 <_svfiprintf_r+0x12c>
 800b676:	2300      	movs	r3, #0
 800b678:	200a      	movs	r0, #10
 800b67a:	001a      	movs	r2, r3
 800b67c:	3501      	adds	r5, #1
 800b67e:	6063      	str	r3, [r4, #4]
 800b680:	7829      	ldrb	r1, [r5, #0]
 800b682:	1c6e      	adds	r6, r5, #1
 800b684:	3930      	subs	r1, #48	; 0x30
 800b686:	2909      	cmp	r1, #9
 800b688:	d903      	bls.n	800b692 <_svfiprintf_r+0x1a6>
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d0c5      	beq.n	800b61a <_svfiprintf_r+0x12e>
 800b68e:	9209      	str	r2, [sp, #36]	; 0x24
 800b690:	e7c3      	b.n	800b61a <_svfiprintf_r+0x12e>
 800b692:	4342      	muls	r2, r0
 800b694:	0035      	movs	r5, r6
 800b696:	2301      	movs	r3, #1
 800b698:	1852      	adds	r2, r2, r1
 800b69a:	e7f1      	b.n	800b680 <_svfiprintf_r+0x194>
 800b69c:	ab07      	add	r3, sp, #28
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	003a      	movs	r2, r7
 800b6a2:	0021      	movs	r1, r4
 800b6a4:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <_svfiprintf_r+0x1fc>)
 800b6a6:	9803      	ldr	r0, [sp, #12]
 800b6a8:	e000      	b.n	800b6ac <_svfiprintf_r+0x1c0>
 800b6aa:	bf00      	nop
 800b6ac:	9004      	str	r0, [sp, #16]
 800b6ae:	9b04      	ldr	r3, [sp, #16]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	d1d3      	bne.n	800b65c <_svfiprintf_r+0x170>
 800b6b4:	89bb      	ldrh	r3, [r7, #12]
 800b6b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b6b8:	065b      	lsls	r3, r3, #25
 800b6ba:	d400      	bmi.n	800b6be <_svfiprintf_r+0x1d2>
 800b6bc:	e72d      	b.n	800b51a <_svfiprintf_r+0x2e>
 800b6be:	2001      	movs	r0, #1
 800b6c0:	4240      	negs	r0, r0
 800b6c2:	e72a      	b.n	800b51a <_svfiprintf_r+0x2e>
 800b6c4:	ab07      	add	r3, sp, #28
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	003a      	movs	r2, r7
 800b6ca:	0021      	movs	r1, r4
 800b6cc:	4b06      	ldr	r3, [pc, #24]	; (800b6e8 <_svfiprintf_r+0x1fc>)
 800b6ce:	9803      	ldr	r0, [sp, #12]
 800b6d0:	f000 f87c 	bl	800b7cc <_printf_i>
 800b6d4:	e7ea      	b.n	800b6ac <_svfiprintf_r+0x1c0>
 800b6d6:	46c0      	nop			; (mov r8, r8)
 800b6d8:	0800bc9c 	.word	0x0800bc9c
 800b6dc:	0800bca2 	.word	0x0800bca2
 800b6e0:	0800bca6 	.word	0x0800bca6
 800b6e4:	00000000 	.word	0x00000000
 800b6e8:	0800b429 	.word	0x0800b429

0800b6ec <_printf_common>:
 800b6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6ee:	0015      	movs	r5, r2
 800b6f0:	9301      	str	r3, [sp, #4]
 800b6f2:	688a      	ldr	r2, [r1, #8]
 800b6f4:	690b      	ldr	r3, [r1, #16]
 800b6f6:	000c      	movs	r4, r1
 800b6f8:	9000      	str	r0, [sp, #0]
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	da00      	bge.n	800b700 <_printf_common+0x14>
 800b6fe:	0013      	movs	r3, r2
 800b700:	0022      	movs	r2, r4
 800b702:	602b      	str	r3, [r5, #0]
 800b704:	3243      	adds	r2, #67	; 0x43
 800b706:	7812      	ldrb	r2, [r2, #0]
 800b708:	2a00      	cmp	r2, #0
 800b70a:	d001      	beq.n	800b710 <_printf_common+0x24>
 800b70c:	3301      	adds	r3, #1
 800b70e:	602b      	str	r3, [r5, #0]
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	069b      	lsls	r3, r3, #26
 800b714:	d502      	bpl.n	800b71c <_printf_common+0x30>
 800b716:	682b      	ldr	r3, [r5, #0]
 800b718:	3302      	adds	r3, #2
 800b71a:	602b      	str	r3, [r5, #0]
 800b71c:	6822      	ldr	r2, [r4, #0]
 800b71e:	2306      	movs	r3, #6
 800b720:	0017      	movs	r7, r2
 800b722:	401f      	ands	r7, r3
 800b724:	421a      	tst	r2, r3
 800b726:	d027      	beq.n	800b778 <_printf_common+0x8c>
 800b728:	0023      	movs	r3, r4
 800b72a:	3343      	adds	r3, #67	; 0x43
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	1e5a      	subs	r2, r3, #1
 800b730:	4193      	sbcs	r3, r2
 800b732:	6822      	ldr	r2, [r4, #0]
 800b734:	0692      	lsls	r2, r2, #26
 800b736:	d430      	bmi.n	800b79a <_printf_common+0xae>
 800b738:	0022      	movs	r2, r4
 800b73a:	9901      	ldr	r1, [sp, #4]
 800b73c:	9800      	ldr	r0, [sp, #0]
 800b73e:	9e08      	ldr	r6, [sp, #32]
 800b740:	3243      	adds	r2, #67	; 0x43
 800b742:	47b0      	blx	r6
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	d025      	beq.n	800b794 <_printf_common+0xa8>
 800b748:	2306      	movs	r3, #6
 800b74a:	6820      	ldr	r0, [r4, #0]
 800b74c:	682a      	ldr	r2, [r5, #0]
 800b74e:	68e1      	ldr	r1, [r4, #12]
 800b750:	2500      	movs	r5, #0
 800b752:	4003      	ands	r3, r0
 800b754:	2b04      	cmp	r3, #4
 800b756:	d103      	bne.n	800b760 <_printf_common+0x74>
 800b758:	1a8d      	subs	r5, r1, r2
 800b75a:	43eb      	mvns	r3, r5
 800b75c:	17db      	asrs	r3, r3, #31
 800b75e:	401d      	ands	r5, r3
 800b760:	68a3      	ldr	r3, [r4, #8]
 800b762:	6922      	ldr	r2, [r4, #16]
 800b764:	4293      	cmp	r3, r2
 800b766:	dd01      	ble.n	800b76c <_printf_common+0x80>
 800b768:	1a9b      	subs	r3, r3, r2
 800b76a:	18ed      	adds	r5, r5, r3
 800b76c:	2700      	movs	r7, #0
 800b76e:	42bd      	cmp	r5, r7
 800b770:	d120      	bne.n	800b7b4 <_printf_common+0xc8>
 800b772:	2000      	movs	r0, #0
 800b774:	e010      	b.n	800b798 <_printf_common+0xac>
 800b776:	3701      	adds	r7, #1
 800b778:	68e3      	ldr	r3, [r4, #12]
 800b77a:	682a      	ldr	r2, [r5, #0]
 800b77c:	1a9b      	subs	r3, r3, r2
 800b77e:	42bb      	cmp	r3, r7
 800b780:	ddd2      	ble.n	800b728 <_printf_common+0x3c>
 800b782:	0022      	movs	r2, r4
 800b784:	2301      	movs	r3, #1
 800b786:	9901      	ldr	r1, [sp, #4]
 800b788:	9800      	ldr	r0, [sp, #0]
 800b78a:	9e08      	ldr	r6, [sp, #32]
 800b78c:	3219      	adds	r2, #25
 800b78e:	47b0      	blx	r6
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	d1f0      	bne.n	800b776 <_printf_common+0x8a>
 800b794:	2001      	movs	r0, #1
 800b796:	4240      	negs	r0, r0
 800b798:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b79a:	2030      	movs	r0, #48	; 0x30
 800b79c:	18e1      	adds	r1, r4, r3
 800b79e:	3143      	adds	r1, #67	; 0x43
 800b7a0:	7008      	strb	r0, [r1, #0]
 800b7a2:	0021      	movs	r1, r4
 800b7a4:	1c5a      	adds	r2, r3, #1
 800b7a6:	3145      	adds	r1, #69	; 0x45
 800b7a8:	7809      	ldrb	r1, [r1, #0]
 800b7aa:	18a2      	adds	r2, r4, r2
 800b7ac:	3243      	adds	r2, #67	; 0x43
 800b7ae:	3302      	adds	r3, #2
 800b7b0:	7011      	strb	r1, [r2, #0]
 800b7b2:	e7c1      	b.n	800b738 <_printf_common+0x4c>
 800b7b4:	0022      	movs	r2, r4
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	9901      	ldr	r1, [sp, #4]
 800b7ba:	9800      	ldr	r0, [sp, #0]
 800b7bc:	9e08      	ldr	r6, [sp, #32]
 800b7be:	321a      	adds	r2, #26
 800b7c0:	47b0      	blx	r6
 800b7c2:	1c43      	adds	r3, r0, #1
 800b7c4:	d0e6      	beq.n	800b794 <_printf_common+0xa8>
 800b7c6:	3701      	adds	r7, #1
 800b7c8:	e7d1      	b.n	800b76e <_printf_common+0x82>
	...

0800b7cc <_printf_i>:
 800b7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ce:	b08b      	sub	sp, #44	; 0x2c
 800b7d0:	9206      	str	r2, [sp, #24]
 800b7d2:	000a      	movs	r2, r1
 800b7d4:	3243      	adds	r2, #67	; 0x43
 800b7d6:	9307      	str	r3, [sp, #28]
 800b7d8:	9005      	str	r0, [sp, #20]
 800b7da:	9204      	str	r2, [sp, #16]
 800b7dc:	7e0a      	ldrb	r2, [r1, #24]
 800b7de:	000c      	movs	r4, r1
 800b7e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b7e2:	2a78      	cmp	r2, #120	; 0x78
 800b7e4:	d806      	bhi.n	800b7f4 <_printf_i+0x28>
 800b7e6:	2a62      	cmp	r2, #98	; 0x62
 800b7e8:	d808      	bhi.n	800b7fc <_printf_i+0x30>
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	d100      	bne.n	800b7f0 <_printf_i+0x24>
 800b7ee:	e0c0      	b.n	800b972 <_printf_i+0x1a6>
 800b7f0:	2a58      	cmp	r2, #88	; 0x58
 800b7f2:	d052      	beq.n	800b89a <_printf_i+0xce>
 800b7f4:	0026      	movs	r6, r4
 800b7f6:	3642      	adds	r6, #66	; 0x42
 800b7f8:	7032      	strb	r2, [r6, #0]
 800b7fa:	e022      	b.n	800b842 <_printf_i+0x76>
 800b7fc:	0010      	movs	r0, r2
 800b7fe:	3863      	subs	r0, #99	; 0x63
 800b800:	2815      	cmp	r0, #21
 800b802:	d8f7      	bhi.n	800b7f4 <_printf_i+0x28>
 800b804:	f7f4 fc88 	bl	8000118 <__gnu_thumb1_case_shi>
 800b808:	001f0016 	.word	0x001f0016
 800b80c:	fff6fff6 	.word	0xfff6fff6
 800b810:	fff6fff6 	.word	0xfff6fff6
 800b814:	fff6001f 	.word	0xfff6001f
 800b818:	fff6fff6 	.word	0xfff6fff6
 800b81c:	00a8fff6 	.word	0x00a8fff6
 800b820:	009a0036 	.word	0x009a0036
 800b824:	fff6fff6 	.word	0xfff6fff6
 800b828:	fff600b9 	.word	0xfff600b9
 800b82c:	fff60036 	.word	0xfff60036
 800b830:	009efff6 	.word	0x009efff6
 800b834:	0026      	movs	r6, r4
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	3642      	adds	r6, #66	; 0x42
 800b83a:	1d11      	adds	r1, r2, #4
 800b83c:	6019      	str	r1, [r3, #0]
 800b83e:	6813      	ldr	r3, [r2, #0]
 800b840:	7033      	strb	r3, [r6, #0]
 800b842:	2301      	movs	r3, #1
 800b844:	e0a7      	b.n	800b996 <_printf_i+0x1ca>
 800b846:	6808      	ldr	r0, [r1, #0]
 800b848:	6819      	ldr	r1, [r3, #0]
 800b84a:	1d0a      	adds	r2, r1, #4
 800b84c:	0605      	lsls	r5, r0, #24
 800b84e:	d50b      	bpl.n	800b868 <_printf_i+0x9c>
 800b850:	680d      	ldr	r5, [r1, #0]
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	2d00      	cmp	r5, #0
 800b856:	da03      	bge.n	800b860 <_printf_i+0x94>
 800b858:	232d      	movs	r3, #45	; 0x2d
 800b85a:	9a04      	ldr	r2, [sp, #16]
 800b85c:	426d      	negs	r5, r5
 800b85e:	7013      	strb	r3, [r2, #0]
 800b860:	4b61      	ldr	r3, [pc, #388]	; (800b9e8 <_printf_i+0x21c>)
 800b862:	270a      	movs	r7, #10
 800b864:	9303      	str	r3, [sp, #12]
 800b866:	e032      	b.n	800b8ce <_printf_i+0x102>
 800b868:	680d      	ldr	r5, [r1, #0]
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	0641      	lsls	r1, r0, #25
 800b86e:	d5f1      	bpl.n	800b854 <_printf_i+0x88>
 800b870:	b22d      	sxth	r5, r5
 800b872:	e7ef      	b.n	800b854 <_printf_i+0x88>
 800b874:	680d      	ldr	r5, [r1, #0]
 800b876:	6819      	ldr	r1, [r3, #0]
 800b878:	1d08      	adds	r0, r1, #4
 800b87a:	6018      	str	r0, [r3, #0]
 800b87c:	062e      	lsls	r6, r5, #24
 800b87e:	d501      	bpl.n	800b884 <_printf_i+0xb8>
 800b880:	680d      	ldr	r5, [r1, #0]
 800b882:	e003      	b.n	800b88c <_printf_i+0xc0>
 800b884:	066d      	lsls	r5, r5, #25
 800b886:	d5fb      	bpl.n	800b880 <_printf_i+0xb4>
 800b888:	680d      	ldr	r5, [r1, #0]
 800b88a:	b2ad      	uxth	r5, r5
 800b88c:	4b56      	ldr	r3, [pc, #344]	; (800b9e8 <_printf_i+0x21c>)
 800b88e:	270a      	movs	r7, #10
 800b890:	9303      	str	r3, [sp, #12]
 800b892:	2a6f      	cmp	r2, #111	; 0x6f
 800b894:	d117      	bne.n	800b8c6 <_printf_i+0xfa>
 800b896:	2708      	movs	r7, #8
 800b898:	e015      	b.n	800b8c6 <_printf_i+0xfa>
 800b89a:	3145      	adds	r1, #69	; 0x45
 800b89c:	700a      	strb	r2, [r1, #0]
 800b89e:	4a52      	ldr	r2, [pc, #328]	; (800b9e8 <_printf_i+0x21c>)
 800b8a0:	9203      	str	r2, [sp, #12]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	6821      	ldr	r1, [r4, #0]
 800b8a6:	ca20      	ldmia	r2!, {r5}
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	0608      	lsls	r0, r1, #24
 800b8ac:	d550      	bpl.n	800b950 <_printf_i+0x184>
 800b8ae:	07cb      	lsls	r3, r1, #31
 800b8b0:	d502      	bpl.n	800b8b8 <_printf_i+0xec>
 800b8b2:	2320      	movs	r3, #32
 800b8b4:	4319      	orrs	r1, r3
 800b8b6:	6021      	str	r1, [r4, #0]
 800b8b8:	2710      	movs	r7, #16
 800b8ba:	2d00      	cmp	r5, #0
 800b8bc:	d103      	bne.n	800b8c6 <_printf_i+0xfa>
 800b8be:	2320      	movs	r3, #32
 800b8c0:	6822      	ldr	r2, [r4, #0]
 800b8c2:	439a      	bics	r2, r3
 800b8c4:	6022      	str	r2, [r4, #0]
 800b8c6:	0023      	movs	r3, r4
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	3343      	adds	r3, #67	; 0x43
 800b8cc:	701a      	strb	r2, [r3, #0]
 800b8ce:	6863      	ldr	r3, [r4, #4]
 800b8d0:	60a3      	str	r3, [r4, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	db03      	blt.n	800b8de <_printf_i+0x112>
 800b8d6:	2204      	movs	r2, #4
 800b8d8:	6821      	ldr	r1, [r4, #0]
 800b8da:	4391      	bics	r1, r2
 800b8dc:	6021      	str	r1, [r4, #0]
 800b8de:	2d00      	cmp	r5, #0
 800b8e0:	d102      	bne.n	800b8e8 <_printf_i+0x11c>
 800b8e2:	9e04      	ldr	r6, [sp, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00c      	beq.n	800b902 <_printf_i+0x136>
 800b8e8:	9e04      	ldr	r6, [sp, #16]
 800b8ea:	0028      	movs	r0, r5
 800b8ec:	0039      	movs	r1, r7
 800b8ee:	f7f4 fca3 	bl	8000238 <__aeabi_uidivmod>
 800b8f2:	9b03      	ldr	r3, [sp, #12]
 800b8f4:	3e01      	subs	r6, #1
 800b8f6:	5c5b      	ldrb	r3, [r3, r1]
 800b8f8:	7033      	strb	r3, [r6, #0]
 800b8fa:	002b      	movs	r3, r5
 800b8fc:	0005      	movs	r5, r0
 800b8fe:	429f      	cmp	r7, r3
 800b900:	d9f3      	bls.n	800b8ea <_printf_i+0x11e>
 800b902:	2f08      	cmp	r7, #8
 800b904:	d109      	bne.n	800b91a <_printf_i+0x14e>
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	07db      	lsls	r3, r3, #31
 800b90a:	d506      	bpl.n	800b91a <_printf_i+0x14e>
 800b90c:	6863      	ldr	r3, [r4, #4]
 800b90e:	6922      	ldr	r2, [r4, #16]
 800b910:	4293      	cmp	r3, r2
 800b912:	dc02      	bgt.n	800b91a <_printf_i+0x14e>
 800b914:	2330      	movs	r3, #48	; 0x30
 800b916:	3e01      	subs	r6, #1
 800b918:	7033      	strb	r3, [r6, #0]
 800b91a:	9b04      	ldr	r3, [sp, #16]
 800b91c:	1b9b      	subs	r3, r3, r6
 800b91e:	6123      	str	r3, [r4, #16]
 800b920:	9b07      	ldr	r3, [sp, #28]
 800b922:	0021      	movs	r1, r4
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	9805      	ldr	r0, [sp, #20]
 800b928:	9b06      	ldr	r3, [sp, #24]
 800b92a:	aa09      	add	r2, sp, #36	; 0x24
 800b92c:	f7ff fede 	bl	800b6ec <_printf_common>
 800b930:	1c43      	adds	r3, r0, #1
 800b932:	d135      	bne.n	800b9a0 <_printf_i+0x1d4>
 800b934:	2001      	movs	r0, #1
 800b936:	4240      	negs	r0, r0
 800b938:	b00b      	add	sp, #44	; 0x2c
 800b93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b93c:	2220      	movs	r2, #32
 800b93e:	6809      	ldr	r1, [r1, #0]
 800b940:	430a      	orrs	r2, r1
 800b942:	6022      	str	r2, [r4, #0]
 800b944:	0022      	movs	r2, r4
 800b946:	2178      	movs	r1, #120	; 0x78
 800b948:	3245      	adds	r2, #69	; 0x45
 800b94a:	7011      	strb	r1, [r2, #0]
 800b94c:	4a27      	ldr	r2, [pc, #156]	; (800b9ec <_printf_i+0x220>)
 800b94e:	e7a7      	b.n	800b8a0 <_printf_i+0xd4>
 800b950:	0648      	lsls	r0, r1, #25
 800b952:	d5ac      	bpl.n	800b8ae <_printf_i+0xe2>
 800b954:	b2ad      	uxth	r5, r5
 800b956:	e7aa      	b.n	800b8ae <_printf_i+0xe2>
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	680d      	ldr	r5, [r1, #0]
 800b95c:	1d10      	adds	r0, r2, #4
 800b95e:	6949      	ldr	r1, [r1, #20]
 800b960:	6018      	str	r0, [r3, #0]
 800b962:	6813      	ldr	r3, [r2, #0]
 800b964:	062e      	lsls	r6, r5, #24
 800b966:	d501      	bpl.n	800b96c <_printf_i+0x1a0>
 800b968:	6019      	str	r1, [r3, #0]
 800b96a:	e002      	b.n	800b972 <_printf_i+0x1a6>
 800b96c:	066d      	lsls	r5, r5, #25
 800b96e:	d5fb      	bpl.n	800b968 <_printf_i+0x19c>
 800b970:	8019      	strh	r1, [r3, #0]
 800b972:	2300      	movs	r3, #0
 800b974:	9e04      	ldr	r6, [sp, #16]
 800b976:	6123      	str	r3, [r4, #16]
 800b978:	e7d2      	b.n	800b920 <_printf_i+0x154>
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	1d11      	adds	r1, r2, #4
 800b97e:	6019      	str	r1, [r3, #0]
 800b980:	6816      	ldr	r6, [r2, #0]
 800b982:	2100      	movs	r1, #0
 800b984:	0030      	movs	r0, r6
 800b986:	6862      	ldr	r2, [r4, #4]
 800b988:	f000 f834 	bl	800b9f4 <memchr>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d001      	beq.n	800b994 <_printf_i+0x1c8>
 800b990:	1b80      	subs	r0, r0, r6
 800b992:	6060      	str	r0, [r4, #4]
 800b994:	6863      	ldr	r3, [r4, #4]
 800b996:	6123      	str	r3, [r4, #16]
 800b998:	2300      	movs	r3, #0
 800b99a:	9a04      	ldr	r2, [sp, #16]
 800b99c:	7013      	strb	r3, [r2, #0]
 800b99e:	e7bf      	b.n	800b920 <_printf_i+0x154>
 800b9a0:	6923      	ldr	r3, [r4, #16]
 800b9a2:	0032      	movs	r2, r6
 800b9a4:	9906      	ldr	r1, [sp, #24]
 800b9a6:	9805      	ldr	r0, [sp, #20]
 800b9a8:	9d07      	ldr	r5, [sp, #28]
 800b9aa:	47a8      	blx	r5
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d0c1      	beq.n	800b934 <_printf_i+0x168>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	079b      	lsls	r3, r3, #30
 800b9b4:	d415      	bmi.n	800b9e2 <_printf_i+0x216>
 800b9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b8:	68e0      	ldr	r0, [r4, #12]
 800b9ba:	4298      	cmp	r0, r3
 800b9bc:	dabc      	bge.n	800b938 <_printf_i+0x16c>
 800b9be:	0018      	movs	r0, r3
 800b9c0:	e7ba      	b.n	800b938 <_printf_i+0x16c>
 800b9c2:	0022      	movs	r2, r4
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	9906      	ldr	r1, [sp, #24]
 800b9c8:	9805      	ldr	r0, [sp, #20]
 800b9ca:	9e07      	ldr	r6, [sp, #28]
 800b9cc:	3219      	adds	r2, #25
 800b9ce:	47b0      	blx	r6
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d0af      	beq.n	800b934 <_printf_i+0x168>
 800b9d4:	3501      	adds	r5, #1
 800b9d6:	68e3      	ldr	r3, [r4, #12]
 800b9d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9da:	1a9b      	subs	r3, r3, r2
 800b9dc:	42ab      	cmp	r3, r5
 800b9de:	dcf0      	bgt.n	800b9c2 <_printf_i+0x1f6>
 800b9e0:	e7e9      	b.n	800b9b6 <_printf_i+0x1ea>
 800b9e2:	2500      	movs	r5, #0
 800b9e4:	e7f7      	b.n	800b9d6 <_printf_i+0x20a>
 800b9e6:	46c0      	nop			; (mov r8, r8)
 800b9e8:	0800bcad 	.word	0x0800bcad
 800b9ec:	0800bcbe 	.word	0x0800bcbe

0800b9f0 <__retarget_lock_acquire_recursive>:
 800b9f0:	4770      	bx	lr

0800b9f2 <__retarget_lock_release_recursive>:
 800b9f2:	4770      	bx	lr

0800b9f4 <memchr>:
 800b9f4:	b2c9      	uxtb	r1, r1
 800b9f6:	1882      	adds	r2, r0, r2
 800b9f8:	4290      	cmp	r0, r2
 800b9fa:	d101      	bne.n	800ba00 <memchr+0xc>
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	4770      	bx	lr
 800ba00:	7803      	ldrb	r3, [r0, #0]
 800ba02:	428b      	cmp	r3, r1
 800ba04:	d0fb      	beq.n	800b9fe <memchr+0xa>
 800ba06:	3001      	adds	r0, #1
 800ba08:	e7f6      	b.n	800b9f8 <memchr+0x4>

0800ba0a <memcpy>:
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	b510      	push	{r4, lr}
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d100      	bne.n	800ba14 <memcpy+0xa>
 800ba12:	bd10      	pop	{r4, pc}
 800ba14:	5ccc      	ldrb	r4, [r1, r3]
 800ba16:	54c4      	strb	r4, [r0, r3]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	e7f8      	b.n	800ba0e <memcpy+0x4>

0800ba1c <memmove>:
 800ba1c:	b510      	push	{r4, lr}
 800ba1e:	4288      	cmp	r0, r1
 800ba20:	d902      	bls.n	800ba28 <memmove+0xc>
 800ba22:	188b      	adds	r3, r1, r2
 800ba24:	4298      	cmp	r0, r3
 800ba26:	d303      	bcc.n	800ba30 <memmove+0x14>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e007      	b.n	800ba3c <memmove+0x20>
 800ba2c:	5c8b      	ldrb	r3, [r1, r2]
 800ba2e:	5483      	strb	r3, [r0, r2]
 800ba30:	3a01      	subs	r2, #1
 800ba32:	d2fb      	bcs.n	800ba2c <memmove+0x10>
 800ba34:	bd10      	pop	{r4, pc}
 800ba36:	5ccc      	ldrb	r4, [r1, r3]
 800ba38:	54c4      	strb	r4, [r0, r3]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d1fa      	bne.n	800ba36 <memmove+0x1a>
 800ba40:	e7f8      	b.n	800ba34 <memmove+0x18>

0800ba42 <_realloc_r>:
 800ba42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba44:	0007      	movs	r7, r0
 800ba46:	000d      	movs	r5, r1
 800ba48:	0016      	movs	r6, r2
 800ba4a:	2900      	cmp	r1, #0
 800ba4c:	d105      	bne.n	800ba5a <_realloc_r+0x18>
 800ba4e:	0011      	movs	r1, r2
 800ba50:	f7ff fc4a 	bl	800b2e8 <_malloc_r>
 800ba54:	0004      	movs	r4, r0
 800ba56:	0020      	movs	r0, r4
 800ba58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba5a:	2a00      	cmp	r2, #0
 800ba5c:	d103      	bne.n	800ba66 <_realloc_r+0x24>
 800ba5e:	f7ff fbf9 	bl	800b254 <_free_r>
 800ba62:	0034      	movs	r4, r6
 800ba64:	e7f7      	b.n	800ba56 <_realloc_r+0x14>
 800ba66:	f000 f812 	bl	800ba8e <_malloc_usable_size_r>
 800ba6a:	002c      	movs	r4, r5
 800ba6c:	42b0      	cmp	r0, r6
 800ba6e:	d2f2      	bcs.n	800ba56 <_realloc_r+0x14>
 800ba70:	0031      	movs	r1, r6
 800ba72:	0038      	movs	r0, r7
 800ba74:	f7ff fc38 	bl	800b2e8 <_malloc_r>
 800ba78:	1e04      	subs	r4, r0, #0
 800ba7a:	d0ec      	beq.n	800ba56 <_realloc_r+0x14>
 800ba7c:	0029      	movs	r1, r5
 800ba7e:	0032      	movs	r2, r6
 800ba80:	f7ff ffc3 	bl	800ba0a <memcpy>
 800ba84:	0029      	movs	r1, r5
 800ba86:	0038      	movs	r0, r7
 800ba88:	f7ff fbe4 	bl	800b254 <_free_r>
 800ba8c:	e7e3      	b.n	800ba56 <_realloc_r+0x14>

0800ba8e <_malloc_usable_size_r>:
 800ba8e:	1f0b      	subs	r3, r1, #4
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	1f18      	subs	r0, r3, #4
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	da01      	bge.n	800ba9c <_malloc_usable_size_r+0xe>
 800ba98:	580b      	ldr	r3, [r1, r0]
 800ba9a:	18c0      	adds	r0, r0, r3
 800ba9c:	4770      	bx	lr
	...

0800baa0 <_init>:
 800baa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa2:	46c0      	nop			; (mov r8, r8)
 800baa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baa6:	bc08      	pop	{r3}
 800baa8:	469e      	mov	lr, r3
 800baaa:	4770      	bx	lr

0800baac <_fini>:
 800baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baae:	46c0      	nop			; (mov r8, r8)
 800bab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bab2:	bc08      	pop	{r3}
 800bab4:	469e      	mov	lr, r3
 800bab6:	4770      	bx	lr
