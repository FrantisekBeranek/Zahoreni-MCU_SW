
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfa0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  0800e060  0800e060  0001e060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3bc  0800e3bc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e3bc  0800e3bc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e3bc  0800e3bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3bc  0800e3bc  0001e3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3c0  0800e3c0  0001e3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e3c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013fc  200001e0  0800e5a4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  0800e5a4  000215dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e65c  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004933  00000000  00000000  0003e864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001780  00000000  00000000  00043198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00044918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202ab  00000000  00000000  00045eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b6a  00000000  00000000  0006615b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4641  00000000  00000000  00086cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b306  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005760  00000000  00000000  0012b358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e048 	.word	0x0800e048

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800e048 	.word	0x0800e048

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b0ab      	sub	sp, #172	; 0xac
 800041c:	af00      	add	r7, sp, #0
	//___Ošetření plného bufferu___//
	if(USB_Rx_Buffer->status == BUFFER_FULL)
 800041e:	4bdf      	ldr	r3, [pc, #892]	; (800079c <comHandler+0x384>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	7d1b      	ldrb	r3, [r3, #20]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d109      	bne.n	800043c <comHandler+0x24>
	{
		flags.data_received = 0;
 8000428:	4bdd      	ldr	r3, [pc, #884]	; (80007a0 <comHandler+0x388>)
 800042a:	7a1a      	ldrb	r2, [r3, #8]
 800042c:	2101      	movs	r1, #1
 800042e:	438a      	bics	r2, r1
 8000430:	721a      	strb	r2, [r3, #8]
		clearBuffer(USB_Rx_Buffer);
 8000432:	4bda      	ldr	r3, [pc, #872]	; (800079c <comHandler+0x384>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	0018      	movs	r0, r3
 8000438:	f002 f8bc 	bl	80025b4 <clearBuffer>
	}

	//___Příjem dat___//
	if(flags.data_received)
 800043c:	4bd8      	ldr	r3, [pc, #864]	; (80007a0 <comHandler+0x388>)
 800043e:	7a1b      	ldrb	r3, [r3, #8]
 8000440:	2201      	movs	r2, #1
 8000442:	4013      	ands	r3, r2
 8000444:	b2db      	uxtb	r3, r3
 8000446:	2b00      	cmp	r3, #0
 8000448:	d100      	bne.n	800044c <comHandler+0x34>
 800044a:	e111      	b.n	8000670 <comHandler+0x258>
	{
		int start = 0;	//flag o nalezení počátku paketu
 800044c:	2300      	movs	r3, #0
 800044e:	2294      	movs	r2, #148	; 0x94
 8000450:	18ba      	adds	r2, r7, r2
 8000452:	6013      	str	r3, [r2, #0]

		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000454:	2300      	movs	r3, #0
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	2118      	movs	r1, #24
 800045a:	1852      	adds	r2, r2, r1
 800045c:	19d2      	adds	r2, r2, r7
 800045e:	6013      	str	r3, [r2, #0]
 8000460:	e05e      	b.n	8000520 <comHandler+0x108>
		{
			//Přečti znaky na pozici i a i+1
			char tmp1, tmp2;
			at(USB_Rx_Buffer, i, &tmp1);
 8000462:	4bce      	ldr	r3, [pc, #824]	; (800079c <comHandler+0x384>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2467      	movs	r4, #103	; 0x67
 8000468:	2218      	movs	r2, #24
 800046a:	18a2      	adds	r2, r4, r2
 800046c:	19d2      	adds	r2, r2, r7
 800046e:	2180      	movs	r1, #128	; 0x80
 8000470:	2018      	movs	r0, #24
 8000472:	1809      	adds	r1, r1, r0
 8000474:	19c8      	adds	r0, r1, r7
 8000476:	6801      	ldr	r1, [r0, #0]
 8000478:	0018      	movs	r0, r3
 800047a:	f002 f943 	bl	8002704 <at>
			at(USB_Rx_Buffer, i+1, &tmp2);
 800047e:	4bc7      	ldr	r3, [pc, #796]	; (800079c <comHandler+0x384>)
 8000480:	6818      	ldr	r0, [r3, #0]
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	2318      	movs	r3, #24
 8000486:	18cb      	adds	r3, r1, r3
 8000488:	19db      	adds	r3, r3, r7
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3301      	adds	r3, #1
 800048e:	2266      	movs	r2, #102	; 0x66
 8000490:	2118      	movs	r1, #24
 8000492:	1852      	adds	r2, r2, r1
 8000494:	19d2      	adds	r2, r2, r7
 8000496:	0019      	movs	r1, r3
 8000498:	f002 f934 	bl	8002704 <at>

			if(tmp1 == '>' && tmp1 == '>')	//začátek paketu
 800049c:	2318      	movs	r3, #24
 800049e:	18e3      	adds	r3, r4, r3
 80004a0:	19db      	adds	r3, r3, r7
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b3e      	cmp	r3, #62	; 0x3e
 80004a6:	d131      	bne.n	800050c <comHandler+0xf4>
 80004a8:	2318      	movs	r3, #24
 80004aa:	18e3      	adds	r3, r4, r3
 80004ac:	19db      	adds	r3, r3, r7
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b3e      	cmp	r3, #62	; 0x3e
 80004b2:	d12b      	bne.n	800050c <comHandler+0xf4>
			{
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004b4:	2300      	movs	r3, #0
 80004b6:	2284      	movs	r2, #132	; 0x84
 80004b8:	2118      	movs	r1, #24
 80004ba:	1852      	adds	r2, r2, r1
 80004bc:	19d2      	adds	r2, r2, r7
 80004be:	6013      	str	r3, [r2, #0]
 80004c0:	e013      	b.n	80004ea <comHandler+0xd2>
				{
					char tmp;
					pop(USB_Rx_Buffer, &tmp);
 80004c2:	4bb6      	ldr	r3, [pc, #728]	; (800079c <comHandler+0x384>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2265      	movs	r2, #101	; 0x65
 80004c8:	2118      	movs	r1, #24
 80004ca:	1852      	adds	r2, r2, r1
 80004cc:	19d2      	adds	r2, r2, r7
 80004ce:	0011      	movs	r1, r2
 80004d0:	0018      	movs	r0, r3
 80004d2:	f002 f8e4 	bl	800269e <pop>
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004d6:	2284      	movs	r2, #132	; 0x84
 80004d8:	2318      	movs	r3, #24
 80004da:	18d3      	adds	r3, r2, r3
 80004dc:	19db      	adds	r3, r3, r7
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	2118      	movs	r1, #24
 80004e4:	1852      	adds	r2, r2, r1
 80004e6:	19d2      	adds	r2, r2, r7
 80004e8:	6013      	str	r3, [r2, #0]
 80004ea:	2384      	movs	r3, #132	; 0x84
 80004ec:	2218      	movs	r2, #24
 80004ee:	189b      	adds	r3, r3, r2
 80004f0:	19db      	adds	r3, r3, r7
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	2118      	movs	r1, #24
 80004f8:	185b      	adds	r3, r3, r1
 80004fa:	19db      	adds	r3, r3, r7
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	429a      	cmp	r2, r3
 8000500:	dbdf      	blt.n	80004c2 <comHandler+0xaa>
				}
				start = 1;	//nastav flag o nalezení počátku
 8000502:	2301      	movs	r3, #1
 8000504:	2294      	movs	r2, #148	; 0x94
 8000506:	18ba      	adds	r2, r7, r2
 8000508:	6013      	str	r3, [r2, #0]
 800050a:	e013      	b.n	8000534 <comHandler+0x11c>
		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	2318      	movs	r3, #24
 8000510:	18d3      	adds	r3, r2, r3
 8000512:	19db      	adds	r3, r3, r7
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	2118      	movs	r1, #24
 800051a:	1852      	adds	r2, r2, r1
 800051c:	19d2      	adds	r2, r2, r7
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4b9e      	ldr	r3, [pc, #632]	; (800079c <comHandler+0x384>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	2118      	movs	r1, #24
 800052a:	1852      	adds	r2, r2, r1
 800052c:	19d2      	adds	r2, r2, r7
 800052e:	6812      	ldr	r2, [r2, #0]
 8000530:	429a      	cmp	r2, r3
 8000532:	db96      	blt.n	8000462 <comHandler+0x4a>
				break;
			}
		}

		if(start)	//počátek byl nalezen
 8000534:	2394      	movs	r3, #148	; 0x94
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d100      	bne.n	8000540 <comHandler+0x128>
 800053e:	e092      	b.n	8000666 <comHandler+0x24e>
		{
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000540:	2300      	movs	r3, #0
 8000542:	2288      	movs	r2, #136	; 0x88
 8000544:	2118      	movs	r1, #24
 8000546:	1852      	adds	r2, r2, r1
 8000548:	19d2      	adds	r2, r2, r7
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	e080      	b.n	8000650 <comHandler+0x238>
			{
				//Přečti znaky na pozici i a i+1
				char tmp1, tmp2;
				at(USB_Rx_Buffer, i, &tmp1);
 800054e:	4b93      	ldr	r3, [pc, #588]	; (800079c <comHandler+0x384>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2464      	movs	r4, #100	; 0x64
 8000554:	2218      	movs	r2, #24
 8000556:	18a2      	adds	r2, r4, r2
 8000558:	19d2      	adds	r2, r2, r7
 800055a:	2188      	movs	r1, #136	; 0x88
 800055c:	2018      	movs	r0, #24
 800055e:	1809      	adds	r1, r1, r0
 8000560:	19c8      	adds	r0, r1, r7
 8000562:	6801      	ldr	r1, [r0, #0]
 8000564:	0018      	movs	r0, r3
 8000566:	f002 f8cd 	bl	8002704 <at>
				at(USB_Rx_Buffer, i+1, &tmp2);
 800056a:	4b8c      	ldr	r3, [pc, #560]	; (800079c <comHandler+0x384>)
 800056c:	6818      	ldr	r0, [r3, #0]
 800056e:	2188      	movs	r1, #136	; 0x88
 8000570:	2318      	movs	r3, #24
 8000572:	18cb      	adds	r3, r1, r3
 8000574:	19db      	adds	r3, r3, r7
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	2263      	movs	r2, #99	; 0x63
 800057c:	2118      	movs	r1, #24
 800057e:	1852      	adds	r2, r2, r1
 8000580:	19d2      	adds	r2, r2, r7
 8000582:	0019      	movs	r1, r3
 8000584:	f002 f8be 	bl	8002704 <at>

				if(tmp1 == '<' && tmp1 == '<')	//konec paketu
 8000588:	2318      	movs	r3, #24
 800058a:	18e3      	adds	r3, r4, r3
 800058c:	19db      	adds	r3, r3, r7
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b3c      	cmp	r3, #60	; 0x3c
 8000592:	d153      	bne.n	800063c <comHandler+0x224>
 8000594:	2318      	movs	r3, #24
 8000596:	18e3      	adds	r3, r4, r3
 8000598:	19db      	adds	r3, r3, r7
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b3c      	cmp	r3, #60	; 0x3c
 800059e:	d14d      	bne.n	800063c <comHandler+0x224>
				{
					uint8_t* tmp = (uint8_t*)malloc((i+2)*sizeof(uint8_t));
 80005a0:	2188      	movs	r1, #136	; 0x88
 80005a2:	2318      	movs	r3, #24
 80005a4:	18cb      	adds	r3, r1, r3
 80005a6:	19db      	adds	r3, r3, r7
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	3302      	adds	r3, #2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f00d f8c5 	bl	800d73c <malloc>
 80005b2:	0003      	movs	r3, r0
 80005b4:	228c      	movs	r2, #140	; 0x8c
 80005b6:	18ba      	adds	r2, r7, r2
 80005b8:	6013      	str	r3, [r2, #0]
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 80005ba:	2300      	movs	r3, #0
 80005bc:	228c      	movs	r2, #140	; 0x8c
 80005be:	2118      	movs	r1, #24
 80005c0:	1852      	adds	r2, r2, r1
 80005c2:	19d2      	adds	r2, r2, r7
 80005c4:	6013      	str	r3, [r2, #0]
 80005c6:	e017      	b.n	80005f8 <comHandler+0x1e0>
					{
						pop(USB_Rx_Buffer, &tmp[y]);
 80005c8:	4b74      	ldr	r3, [pc, #464]	; (800079c <comHandler+0x384>)
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	248c      	movs	r4, #140	; 0x8c
 80005ce:	2318      	movs	r3, #24
 80005d0:	18e3      	adds	r3, r4, r3
 80005d2:	19db      	adds	r3, r3, r7
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	228c      	movs	r2, #140	; 0x8c
 80005d8:	18ba      	adds	r2, r7, r2
 80005da:	6812      	ldr	r2, [r2, #0]
 80005dc:	18d3      	adds	r3, r2, r3
 80005de:	0019      	movs	r1, r3
 80005e0:	f002 f85d 	bl	800269e <pop>
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 80005e4:	0022      	movs	r2, r4
 80005e6:	2318      	movs	r3, #24
 80005e8:	18d3      	adds	r3, r2, r3
 80005ea:	19db      	adds	r3, r3, r7
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2118      	movs	r1, #24
 80005f2:	1852      	adds	r2, r2, r1
 80005f4:	19d2      	adds	r2, r2, r7
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	2188      	movs	r1, #136	; 0x88
 80005fa:	2318      	movs	r3, #24
 80005fc:	18cb      	adds	r3, r1, r3
 80005fe:	19db      	adds	r3, r3, r7
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	228c      	movs	r2, #140	; 0x8c
 8000606:	2018      	movs	r0, #24
 8000608:	1812      	adds	r2, r2, r0
 800060a:	19d2      	adds	r2, r2, r7
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	429a      	cmp	r2, r3
 8000610:	ddda      	ble.n	80005c8 <comHandler+0x1b0>
					}

					decodePaket(tmp, i+2);
 8000612:	2318      	movs	r3, #24
 8000614:	18cb      	adds	r3, r1, r3
 8000616:	19db      	adds	r3, r3, r7
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	3302      	adds	r3, #2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	238c      	movs	r3, #140	; 0x8c
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fb15 	bl	8000c58 <decodePaket>
					free(tmp);
 800062e:	238c      	movs	r3, #140	; 0x8c
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	0018      	movs	r0, r3
 8000636:	f00d f88b 	bl	800d750 <free>
					break;
 800063a:	e014      	b.n	8000666 <comHandler+0x24e>
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 800063c:	2288      	movs	r2, #136	; 0x88
 800063e:	2318      	movs	r3, #24
 8000640:	18d3      	adds	r3, r2, r3
 8000642:	19db      	adds	r3, r3, r7
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	2118      	movs	r1, #24
 800064a:	1852      	adds	r2, r2, r1
 800064c:	19d2      	adds	r2, r2, r7
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b52      	ldr	r3, [pc, #328]	; (800079c <comHandler+0x384>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	2288      	movs	r2, #136	; 0x88
 8000658:	2118      	movs	r1, #24
 800065a:	1852      	adds	r2, r2, r1
 800065c:	19d2      	adds	r2, r2, r7
 800065e:	6812      	ldr	r2, [r2, #0]
 8000660:	429a      	cmp	r2, r3
 8000662:	da00      	bge.n	8000666 <comHandler+0x24e>
 8000664:	e773      	b.n	800054e <comHandler+0x136>
				}
			}
		}

		flags.data_received = 0;
 8000666:	4b4e      	ldr	r3, [pc, #312]	; (80007a0 <comHandler+0x388>)
 8000668:	7a1a      	ldrb	r2, [r3, #8]
 800066a:	2101      	movs	r1, #1
 800066c:	438a      	bics	r2, r1
 800066e:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)	//Pokud test pokročil...
 8000670:	4b4b      	ldr	r3, [pc, #300]	; (80007a0 <comHandler+0x388>)
 8000672:	7e1b      	ldrb	r3, [r3, #24]
 8000674:	2202      	movs	r2, #2
 8000676:	4013      	ands	r3, r2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d04f      	beq.n	800071e <comHandler+0x306>
	{
		//...zjisti v jaké je fázi...
		char testPhaseChr;
		switch(currentPhase())
 800067e:	f002 fb5b 	bl	8002d38 <currentPhase>
 8000682:	0003      	movs	r3, r0
 8000684:	2b06      	cmp	r3, #6
 8000686:	d82e      	bhi.n	80006e6 <comHandler+0x2ce>
 8000688:	009a      	lsls	r2, r3, #2
 800068a:	4b46      	ldr	r3, [pc, #280]	; (80007a4 <comHandler+0x38c>)
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 8000692:	2362      	movs	r3, #98	; 0x62
 8000694:	2218      	movs	r2, #24
 8000696:	189b      	adds	r3, r3, r2
 8000698:	19db      	adds	r3, r3, r7
 800069a:	2273      	movs	r2, #115	; 0x73
 800069c:	701a      	strb	r2, [r3, #0]
			break;
 800069e:	e029      	b.n	80006f4 <comHandler+0x2dc>
		case START_DONE:
			testPhaseChr = 's';
 80006a0:	2362      	movs	r3, #98	; 0x62
 80006a2:	2218      	movs	r2, #24
 80006a4:	189b      	adds	r3, r3, r2
 80006a6:	19db      	adds	r3, r3, r7
 80006a8:	2273      	movs	r2, #115	; 0x73
 80006aa:	701a      	strb	r2, [r3, #0]
			break;
 80006ac:	e022      	b.n	80006f4 <comHandler+0x2dc>
		case MAIN_TEST:
			testPhaseChr = 'm';
 80006ae:	2362      	movs	r3, #98	; 0x62
 80006b0:	2218      	movs	r2, #24
 80006b2:	189b      	adds	r3, r3, r2
 80006b4:	19db      	adds	r3, r3, r7
 80006b6:	226d      	movs	r2, #109	; 0x6d
 80006b8:	701a      	strb	r2, [r3, #0]
			break;
 80006ba:	e01b      	b.n	80006f4 <comHandler+0x2dc>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 80006bc:	2362      	movs	r3, #98	; 0x62
 80006be:	2218      	movs	r2, #24
 80006c0:	189b      	adds	r3, r3, r2
 80006c2:	19db      	adds	r3, r3, r7
 80006c4:	226d      	movs	r2, #109	; 0x6d
 80006c6:	701a      	strb	r2, [r3, #0]
			break;
 80006c8:	e014      	b.n	80006f4 <comHandler+0x2dc>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 80006ca:	2362      	movs	r3, #98	; 0x62
 80006cc:	2218      	movs	r2, #24
 80006ce:	189b      	adds	r3, r3, r2
 80006d0:	19db      	adds	r3, r3, r7
 80006d2:	2262      	movs	r2, #98	; 0x62
 80006d4:	701a      	strb	r2, [r3, #0]
			break;
 80006d6:	e00d      	b.n	80006f4 <comHandler+0x2dc>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 80006d8:	2362      	movs	r3, #98	; 0x62
 80006da:	2218      	movs	r2, #24
 80006dc:	189b      	adds	r3, r3, r2
 80006de:	19db      	adds	r3, r3, r7
 80006e0:	224d      	movs	r2, #77	; 0x4d
 80006e2:	701a      	strb	r2, [r3, #0]
			break;
 80006e4:	e006      	b.n	80006f4 <comHandler+0x2dc>
		default:
			testPhaseChr = 'e';
 80006e6:	2362      	movs	r3, #98	; 0x62
 80006e8:	2218      	movs	r2, #24
 80006ea:	189b      	adds	r3, r3, r2
 80006ec:	19db      	adds	r3, r3, r7
 80006ee:	2265      	movs	r2, #101	; 0x65
 80006f0:	701a      	strb	r2, [r3, #0]
			break;
 80006f2:	46c0      	nop			; (mov r8, r8)
		}

		//...a upozorni na to PC
		Paket paket;
		fillPaket(&paket, TEST_PHASE_PAKET, &testPhaseChr, 1);
 80006f4:	2362      	movs	r3, #98	; 0x62
 80006f6:	2218      	movs	r2, #24
 80006f8:	189b      	adds	r3, r3, r2
 80006fa:	19da      	adds	r2, r3, r7
 80006fc:	2454      	movs	r4, #84	; 0x54
 80006fe:	2318      	movs	r3, #24
 8000700:	18e3      	adds	r3, r4, r3
 8000702:	19d8      	adds	r0, r3, r7
 8000704:	2301      	movs	r3, #1
 8000706:	2104      	movs	r1, #4
 8000708:	f000 f9aa 	bl	8000a60 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <comHandler+0x390>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2218      	movs	r2, #24
 8000712:	18a2      	adds	r2, r4, r2
 8000714:	19d2      	adds	r2, r2, r7
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f000 f9e1 	bl	8000ae0 <pushPaket>
	}

	if(flags.meas.measComplete)	//Jsou připravena data k odeslání
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <comHandler+0x388>)
 8000720:	7d1b      	ldrb	r3, [r3, #20]
 8000722:	2202      	movs	r2, #2
 8000724:	4013      	ands	r3, r2
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d056      	beq.n	80007da <comHandler+0x3c2>
	{
		if(!flags.meas.calibMeas)
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <comHandler+0x388>)
 800072e:	7d1b      	ldrb	r3, [r3, #20]
 8000730:	2240      	movs	r2, #64	; 0x40
 8000732:	4013      	ands	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d117      	bne.n	800076a <comHandler+0x352>
		{
			//Nejde o kalibrační data -> pošli číslo dat
			Paket paket;
			fillPaket(&paket, TEST_NUM_PAKET, &testNum, 1);
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <comHandler+0x394>)
 800073c:	243c      	movs	r4, #60	; 0x3c
 800073e:	2318      	movs	r3, #24
 8000740:	18e3      	adds	r3, r4, r3
 8000742:	19d8      	adds	r0, r3, r7
 8000744:	2301      	movs	r3, #1
 8000746:	2103      	movs	r1, #3
 8000748:	f000 f98a 	bl	8000a60 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <comHandler+0x390>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2218      	movs	r2, #24
 8000752:	18a2      	adds	r2, r4, r2
 8000754:	19d2      	adds	r2, r2, r7
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f000 f9c1 	bl	8000ae0 <pushPaket>
			testNum++;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <comHandler+0x394>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <comHandler+0x394>)
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	e004      	b.n	8000774 <comHandler+0x35c>
		}
		else
		{
			flags.meas.calibMeas = 0;
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <comHandler+0x388>)
 800076c:	7d1a      	ldrb	r2, [r3, #20]
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	438a      	bics	r2, r1
 8000772:	751a      	strb	r2, [r3, #20]
		}

		//___Připrav a odešli paket___//
		makeByteArray();
 8000774:	f000 f948 	bl	8000a08 <makeByteArray>
		Paket paket;
		if(flags.meas.onlyBattery)
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <comHandler+0x388>)
 800077a:	7d1b      	ldrb	r3, [r3, #20]
 800077c:	2220      	movs	r2, #32
 800077e:	4013      	ands	r3, r2
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d016      	beq.n	80007b4 <comHandler+0x39c>
		{
			fillPaket(&paket, DATA_BAT_PAKET, data+12, BAT_DATA_PAKET_LENGHT);
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <comHandler+0x398>)
 8000788:	2348      	movs	r3, #72	; 0x48
 800078a:	2118      	movs	r1, #24
 800078c:	185b      	adds	r3, r3, r1
 800078e:	19d8      	adds	r0, r3, r7
 8000790:	2302      	movs	r3, #2
 8000792:	2102      	movs	r1, #2
 8000794:	f000 f964 	bl	8000a60 <fillPaket>
 8000798:	e015      	b.n	80007c6 <comHandler+0x3ae>
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000eb4 	.word	0x20000eb4
 80007a0:	200003d0 	.word	0x200003d0
 80007a4:	0800e188 	.word	0x0800e188
 80007a8:	200001fc 	.word	0x200001fc
 80007ac:	20000410 	.word	0x20000410
 80007b0:	2000020c 	.word	0x2000020c
		}
		else
		{
			fillPaket(&paket, DATA_PAKET, data, DATA_PAKET_LENGHT);
 80007b4:	4a90      	ldr	r2, [pc, #576]	; (80009f8 <comHandler+0x5e0>)
 80007b6:	2348      	movs	r3, #72	; 0x48
 80007b8:	2118      	movs	r1, #24
 80007ba:	185b      	adds	r3, r3, r1
 80007bc:	19d8      	adds	r0, r3, r7
 80007be:	230e      	movs	r3, #14
 80007c0:	2101      	movs	r1, #1
 80007c2:	f000 f94d 	bl	8000a60 <fillPaket>
		}
		pushPaket(USB_Tx_Buffer, &paket);
 80007c6:	4b8d      	ldr	r3, [pc, #564]	; (80009fc <comHandler+0x5e4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2248      	movs	r2, #72	; 0x48
 80007cc:	2118      	movs	r1, #24
 80007ce:	1852      	adds	r2, r2, r1
 80007d0:	19d2      	adds	r2, r2, r7
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 f983 	bl	8000ae0 <pushPaket>
	}

#ifdef __APP_COMPATIBILITY__
	//___Odesílání refresh zprávy___//
	if(flags.time.sec)
 80007da:	4b89      	ldr	r3, [pc, #548]	; (8000a00 <comHandler+0x5e8>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2202      	movs	r2, #2
 80007e0:	4013      	ands	r3, r2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d011      	beq.n	800080c <comHandler+0x3f4>
	{
		Paket paket;
		fillPaket(&paket, REFRESH_PAKET, NULL, 0);
 80007e8:	2430      	movs	r4, #48	; 0x30
 80007ea:	2318      	movs	r3, #24
 80007ec:	18e3      	adds	r3, r4, r3
 80007ee:	19d8      	adds	r0, r3, r7
 80007f0:	2300      	movs	r3, #0
 80007f2:	2200      	movs	r2, #0
 80007f4:	2106      	movs	r1, #6
 80007f6:	f000 f933 	bl	8000a60 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 80007fa:	4b80      	ldr	r3, [pc, #512]	; (80009fc <comHandler+0x5e4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2218      	movs	r2, #24
 8000800:	18a2      	adds	r2, r4, r2
 8000802:	19d2      	adds	r2, r2, r7
 8000804:	0011      	movs	r1, r2
 8000806:	0018      	movs	r0, r3
 8000808:	f000 f96a 	bl	8000ae0 <pushPaket>
	}
#endif

	//___Upozornění o stavu topení___//
	switch(flags.heaterState)
 800080c:	4b7c      	ldr	r3, [pc, #496]	; (8000a00 <comHandler+0x5e8>)
 800080e:	7e1b      	ldrb	r3, [r3, #24]
 8000810:	069b      	lsls	r3, r3, #26
 8000812:	0f9b      	lsrs	r3, r3, #30
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b01      	cmp	r3, #1
 8000818:	d021      	beq.n	800085e <comHandler+0x446>
 800081a:	2b02      	cmp	r3, #2
 800081c:	d13f      	bne.n	800089e <comHandler+0x486>
	{
		Paket paket;
		uint8_t data;
	case HEATER_ERR :
		data = 0;
 800081e:	2123      	movs	r1, #35	; 0x23
 8000820:	2318      	movs	r3, #24
 8000822:	18cb      	adds	r3, r1, r3
 8000824:	19db      	adds	r3, r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, HEATER_PAKET, &data, 1);
 800082a:	2318      	movs	r3, #24
 800082c:	18cb      	adds	r3, r1, r3
 800082e:	19da      	adds	r2, r3, r7
 8000830:	2424      	movs	r4, #36	; 0x24
 8000832:	2318      	movs	r3, #24
 8000834:	18e3      	adds	r3, r4, r3
 8000836:	19d8      	adds	r0, r3, r7
 8000838:	2301      	movs	r3, #1
 800083a:	2107      	movs	r1, #7
 800083c:	f000 f910 	bl	8000a60 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000840:	4b6e      	ldr	r3, [pc, #440]	; (80009fc <comHandler+0x5e4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2218      	movs	r2, #24
 8000846:	18a2      	adds	r2, r4, r2
 8000848:	19d2      	adds	r2, r2, r7
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f000 f947 	bl	8000ae0 <pushPaket>
		flags.heaterState = 0;
 8000852:	4b6b      	ldr	r3, [pc, #428]	; (8000a00 <comHandler+0x5e8>)
 8000854:	7e1a      	ldrb	r2, [r3, #24]
 8000856:	2130      	movs	r1, #48	; 0x30
 8000858:	438a      	bics	r2, r1
 800085a:	761a      	strb	r2, [r3, #24]
		break;
 800085c:	e020      	b.n	80008a0 <comHandler+0x488>
	case HEATER_OK:
		data = 1;
 800085e:	2123      	movs	r1, #35	; 0x23
 8000860:	2318      	movs	r3, #24
 8000862:	18cb      	adds	r3, r1, r3
 8000864:	19db      	adds	r3, r3, r7
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, HEATER_PAKET, &data, 1);
 800086a:	2318      	movs	r3, #24
 800086c:	18cb      	adds	r3, r1, r3
 800086e:	19da      	adds	r2, r3, r7
 8000870:	2424      	movs	r4, #36	; 0x24
 8000872:	2318      	movs	r3, #24
 8000874:	18e3      	adds	r3, r4, r3
 8000876:	19d8      	adds	r0, r3, r7
 8000878:	2301      	movs	r3, #1
 800087a:	2107      	movs	r1, #7
 800087c:	f000 f8f0 	bl	8000a60 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000880:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <comHandler+0x5e4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2218      	movs	r2, #24
 8000886:	18a2      	adds	r2, r4, r2
 8000888:	19d2      	adds	r2, r2, r7
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f000 f927 	bl	8000ae0 <pushPaket>
		flags.heaterState = 0;
 8000892:	4b5b      	ldr	r3, [pc, #364]	; (8000a00 <comHandler+0x5e8>)
 8000894:	7e1a      	ldrb	r2, [r3, #24]
 8000896:	2130      	movs	r1, #48	; 0x30
 8000898:	438a      	bics	r2, r1
 800089a:	761a      	strb	r2, [r3, #24]
		break;
 800089c:	e000      	b.n	80008a0 <comHandler+0x488>
	default:	//0 => neprobehl test topeni
		break;
 800089e:	46c0      	nop			; (mov r8, r8)
	}

	if(flags.buttons.butt0_ver)
 80008a0:	4b57      	ldr	r3, [pc, #348]	; (8000a00 <comHandler+0x5e8>)
 80008a2:	791b      	ldrb	r3, [r3, #4]
 80008a4:	2202      	movs	r2, #2
 80008a6:	4013      	ands	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d011      	beq.n	80008d2 <comHandler+0x4ba>
	{
		Paket paket;
		fillPaket(&paket, CANCEL_FROM_USER_PAKET, NULL, 0);
 80008ae:	2414      	movs	r4, #20
 80008b0:	2318      	movs	r3, #24
 80008b2:	18e3      	adds	r3, r4, r3
 80008b4:	19d8      	adds	r0, r3, r7
 80008b6:	2300      	movs	r3, #0
 80008b8:	2200      	movs	r2, #0
 80008ba:	2108      	movs	r1, #8
 80008bc:	f000 f8d0 	bl	8000a60 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 80008c0:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <comHandler+0x5e4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2218      	movs	r2, #24
 80008c6:	18a2      	adds	r2, r4, r2
 80008c8:	19d2      	adds	r2, r2, r7
 80008ca:	0011      	movs	r1, r2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 f907 	bl	8000ae0 <pushPaket>
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 80008d2:	4b4a      	ldr	r3, [pc, #296]	; (80009fc <comHandler+0x5e4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	7d1b      	ldrb	r3, [r3, #20]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d11c      	bne.n	8000916 <comHandler+0x4fe>
	{
		flags.ui.shortBeep = 1;
 80008dc:	4b48      	ldr	r3, [pc, #288]	; (8000a00 <comHandler+0x5e8>)
 80008de:	7c1a      	ldrb	r2, [r3, #16]
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	741a      	strb	r2, [r3, #16]
		char msg[] = {"Buffer full\n"};
 80008e6:	231c      	movs	r3, #28
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	4a46      	ldr	r2, [pc, #280]	; (8000a04 <comHandler+0x5ec>)
 80008ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008ee:	c313      	stmia	r3!, {r0, r1, r4}
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 80008f4:	231c      	movs	r3, #28
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff fc05 	bl	8000108 <strlen>
 80008fe:	0002      	movs	r2, r0
 8000900:	231c      	movs	r3, #28
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f00c fa32 	bl	800cd70 <CDC_Transmit_FS>
		clearBuffer(USB_Tx_Buffer);
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <comHandler+0x5e4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fe4f 	bl	80025b4 <clearBuffer>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 8000916:	4b39      	ldr	r3, [pc, #228]	; (80009fc <comHandler+0x5e4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d066      	beq.n	80009ee <comHandler+0x5d6>
	{
 8000920:	466b      	mov	r3, sp
 8000922:	001c      	movs	r4, r3
		int size = USB_Tx_Buffer->filled;
 8000924:	4b35      	ldr	r3, [pc, #212]	; (80009fc <comHandler+0x5e4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2288      	movs	r2, #136	; 0x88
 800092c:	18ba      	adds	r2, r7, r2
 800092e:	6013      	str	r3, [r2, #0]
		char tmpStr[size];
 8000930:	2388      	movs	r3, #136	; 0x88
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	1e5a      	subs	r2, r3, #1
 8000938:	2184      	movs	r1, #132	; 0x84
 800093a:	1879      	adds	r1, r7, r1
 800093c:	600a      	str	r2, [r1, #0]
 800093e:	001a      	movs	r2, r3
 8000940:	0015      	movs	r5, r2
 8000942:	2200      	movs	r2, #0
 8000944:	0016      	movs	r6, r2
 8000946:	0028      	movs	r0, r5
 8000948:	0031      	movs	r1, r6
 800094a:	0002      	movs	r2, r0
 800094c:	0f52      	lsrs	r2, r2, #29
 800094e:	000d      	movs	r5, r1
 8000950:	00ed      	lsls	r5, r5, #3
 8000952:	617d      	str	r5, [r7, #20]
 8000954:	697d      	ldr	r5, [r7, #20]
 8000956:	4315      	orrs	r5, r2
 8000958:	617d      	str	r5, [r7, #20]
 800095a:	0002      	movs	r2, r0
 800095c:	00d2      	lsls	r2, r2, #3
 800095e:	613a      	str	r2, [r7, #16]
 8000960:	001a      	movs	r2, r3
 8000962:	603a      	str	r2, [r7, #0]
 8000964:	2200      	movs	r2, #0
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	6838      	ldr	r0, [r7, #0]
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	0002      	movs	r2, r0
 800096e:	0f52      	lsrs	r2, r2, #29
 8000970:	000d      	movs	r5, r1
 8000972:	00ed      	lsls	r5, r5, #3
 8000974:	60fd      	str	r5, [r7, #12]
 8000976:	68fd      	ldr	r5, [r7, #12]
 8000978:	4315      	orrs	r5, r2
 800097a:	60fd      	str	r5, [r7, #12]
 800097c:	0002      	movs	r2, r0
 800097e:	00d2      	lsls	r2, r2, #3
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	3307      	adds	r3, #7
 8000984:	08db      	lsrs	r3, r3, #3
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	466a      	mov	r2, sp
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	469d      	mov	sp, r3
 800098e:	466b      	mov	r3, sp
 8000990:	3300      	adds	r3, #0
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	18ba      	adds	r2, r7, r2
 8000996:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < size; i++)
 8000998:	2300      	movs	r3, #0
 800099a:	2290      	movs	r2, #144	; 0x90
 800099c:	18ba      	adds	r2, r7, r2
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	e012      	b.n	80009c8 <comHandler+0x5b0>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <comHandler+0x5e4>)
 80009a4:	6818      	ldr	r0, [r3, #0]
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	2390      	movs	r3, #144	; 0x90
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	18d3      	adds	r3, r2, r3
 80009b4:	0019      	movs	r1, r3
 80009b6:	f001 fe72 	bl	800269e <pop>
		for(int i = 0; i < size; i++)
 80009ba:	2390      	movs	r3, #144	; 0x90
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	2290      	movs	r2, #144	; 0x90
 80009c4:	18ba      	adds	r2, r7, r2
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	2390      	movs	r3, #144	; 0x90
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	2388      	movs	r3, #136	; 0x88
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbe4      	blt.n	80009a2 <comHandler+0x58a>
		}
		CDC_Transmit_FS(tmpStr, size);
 80009d8:	2388      	movs	r3, #136	; 0x88
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	0011      	movs	r1, r2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f00c f9c2 	bl	800cd70 <CDC_Transmit_FS>
 80009ec:	46a5      	mov	sp, r4
	}

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b02b      	add	sp, #172	; 0xac
 80009f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000200 	.word	0x20000200
 80009fc:	200001fc 	.word	0x200001fc
 8000a00:	200003d0 	.word	0x200003d0
 8000a04:	0800e060 	.word	0x0800e060

08000a08 <makeByteArray>:

//_____Zpracuje ADC_Results do pole data_____//
static void makeByteArray()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	e018      	b.n	8000a46 <makeByteArray+0x3e>
	{
		data[2*i] = MaskByte(ADC_Results[2*i], 1);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	005a      	lsls	r2, r3, #1
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <makeByteArray+0x50>)
 8000a1a:	0092      	lsls	r2, r2, #2
 8000a1c:	58d3      	ldr	r3, [r2, r3]
 8000a1e:	0a1a      	lsrs	r2, r3, #8
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	b2d1      	uxtb	r1, r2
 8000a26:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <makeByteArray+0x54>)
 8000a28:	54d1      	strb	r1, [r2, r3]
		data[2*i+1] = MaskByte(ADC_Results[2*i], 0);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	005a      	lsls	r2, r3, #1
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <makeByteArray+0x50>)
 8000a30:	0092      	lsls	r2, r2, #2
 8000a32:	58d2      	ldr	r2, [r2, r3]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b2d1      	uxtb	r1, r2
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <makeByteArray+0x54>)
 8000a3e:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 7; i++)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3301      	adds	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b06      	cmp	r3, #6
 8000a4a:	dde3      	ble.n	8000a14 <makeByteArray+0xc>
	}
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	20000380 	.word	0x20000380
 8000a5c:	20000200 	.word	0x20000200

08000a60 <fillPaket>:

//_____Vytvoří strukturu Paket z dat v argumentech_____//
static void fillPaket(Paket* paket, outPaketType type, uint8_t* data, uint8_t dataLength)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	0008      	movs	r0, r1
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	240b      	movs	r4, #11
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	1c02      	adds	r2, r0, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	200a      	movs	r0, #10
 8000a78:	183b      	adds	r3, r7, r0
 8000a7a:	1c0a      	adds	r2, r1, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	paket->type = type;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	0021      	movs	r1, r4
 8000a82:	187a      	adds	r2, r7, r1
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	701a      	strb	r2, [r3, #0]
	paket->data = data;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	605a      	str	r2, [r3, #4]
	paket->dataLength = dataLength;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	183a      	adds	r2, r7, r0
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	721a      	strb	r2, [r3, #8]
	uint8_t CA = type;
 8000a96:	2317      	movs	r3, #23
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	187a      	adds	r2, r7, r1
 8000a9c:	7812      	ldrb	r2, [r2, #0]
 8000a9e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	e00c      	b.n	8000ac0 <fillPaket+0x60>
		CA += data[i];
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	18d3      	adds	r3, r2, r3
 8000aac:	7819      	ldrb	r1, [r3, #0]
 8000aae:	2217      	movs	r2, #23
 8000ab0:	18bb      	adds	r3, r7, r2
 8000ab2:	18ba      	adds	r2, r7, r2
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	188a      	adds	r2, r1, r2
 8000ab8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	3301      	adds	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbec      	blt.n	8000aa6 <fillPaket+0x46>
	paket->CA_value = CA;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2217      	movs	r2, #23
 8000ad0:	18ba      	adds	r2, r7, r2
 8000ad2:	7812      	ldrb	r2, [r2, #0]
 8000ad4:	725a      	strb	r2, [r3, #9]
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b007      	add	sp, #28
 8000adc:	bd90      	pop	{r4, r7, pc}
	...

08000ae0 <pushPaket>:

//_____Vloží do bufferu řetězec odpovídající sestavenému paketu_____//
static void pushPaket(RING_BUFFER* buffer, Paket* paket)
{
 8000ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae2:	46c6      	mov	lr, r8
 8000ae4:	b500      	push	{lr}
 8000ae6:	b096      	sub	sp, #88	; 0x58
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000aec:	63b9      	str	r1, [r7, #56]	; 0x38
 8000aee:	466b      	mov	r3, sp
 8000af0:	4698      	mov	r8, r3
	uint8_t msg[paket->dataLength + 2];
 8000af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000af4:	7a1b      	ldrb	r3, [r3, #8]
 8000af6:	1c9a      	adds	r2, r3, #2
 8000af8:	1e53      	subs	r3, r2, #1
 8000afa:	657b      	str	r3, [r7, #84]	; 0x54
 8000afc:	0013      	movs	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	69b8      	ldr	r0, [r7, #24]
 8000b06:	69f9      	ldr	r1, [r7, #28]
 8000b08:	0003      	movs	r3, r0
 8000b0a:	0f5b      	lsrs	r3, r3, #29
 8000b0c:	000e      	movs	r6, r1
 8000b0e:	00f5      	lsls	r5, r6, #3
 8000b10:	431d      	orrs	r5, r3
 8000b12:	0003      	movs	r3, r0
 8000b14:	00dc      	lsls	r4, r3, #3
 8000b16:	0013      	movs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	6938      	ldr	r0, [r7, #16]
 8000b20:	6979      	ldr	r1, [r7, #20]
 8000b22:	0003      	movs	r3, r0
 8000b24:	0f5b      	lsrs	r3, r3, #29
 8000b26:	000c      	movs	r4, r1
 8000b28:	00e4      	lsls	r4, r4, #3
 8000b2a:	637c      	str	r4, [r7, #52]	; 0x34
 8000b2c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000b2e:	431c      	orrs	r4, r3
 8000b30:	637c      	str	r4, [r7, #52]	; 0x34
 8000b32:	0003      	movs	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
 8000b38:	0013      	movs	r3, r2
 8000b3a:	3307      	adds	r3, #7
 8000b3c:	08db      	lsrs	r3, r3, #3
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	466a      	mov	r2, sp
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	469d      	mov	sp, r3
 8000b46:	466b      	mov	r3, sp
 8000b48:	3300      	adds	r3, #0
 8000b4a:	653b      	str	r3, [r7, #80]	; 0x50
	msg[0] = paket->type;
 8000b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b52:	701a      	strb	r2, [r3, #0]
	memcpy(msg+1, paket->data, paket->dataLength);
 8000b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b56:	1c58      	adds	r0, r3, #1
 8000b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b5a:	6859      	ldr	r1, [r3, #4]
 8000b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b5e:	7a1b      	ldrb	r3, [r3, #8]
 8000b60:	001a      	movs	r2, r3
 8000b62:	f00c fdff 	bl	800d764 <memcpy>
	msg[paket->dataLength+1] = paket->CA_value;
 8000b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b68:	7a1b      	ldrb	r3, [r3, #8]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b6e:	7a51      	ldrb	r1, [r2, #9]
 8000b70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b72:	54d1      	strb	r1, [r2, r3]
	//msg[paket->dataLength+2] = 0U;

	uint8_t str[] = {">>"};
 8000b74:	200c      	movs	r0, #12
 8000b76:	2638      	movs	r6, #56	; 0x38
 8000b78:	1983      	adds	r3, r0, r6
 8000b7a:	19db      	adds	r3, r3, r7
 8000b7c:	4a34      	ldr	r2, [pc, #208]	; (8000c50 <pushPaket+0x170>)
 8000b7e:	8811      	ldrh	r1, [r2, #0]
 8000b80:	8019      	strh	r1, [r3, #0]
 8000b82:	7892      	ldrb	r2, [r2, #2]
 8000b84:	709a      	strb	r2, [r3, #2]
	uint8_t end[] = {"<<\n"};
 8000b86:	2508      	movs	r5, #8
 8000b88:	19ab      	adds	r3, r5, r6
 8000b8a:	19db      	adds	r3, r3, r7
 8000b8c:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <pushPaket+0x174>)
 8000b8e:	601a      	str	r2, [r3, #0]

	uint8_t toSend[6+paket->dataLength + 2];
 8000b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b92:	7a1b      	ldrb	r3, [r3, #8]
 8000b94:	3308      	adds	r3, #8
 8000b96:	001c      	movs	r4, r3
 8000b98:	1e63      	subs	r3, r4, #1
 8000b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b9c:	0023      	movs	r3, r4
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	000b      	movs	r3, r1
 8000baa:	0f5b      	lsrs	r3, r3, #29
 8000bac:	0016      	movs	r6, r2
 8000bae:	00f6      	lsls	r6, r6, #3
 8000bb0:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000bb2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8000bb4:	431e      	orrs	r6, r3
 8000bb6:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000bb8:	000b      	movs	r3, r1
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bbe:	0023      	movs	r3, r4
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	6839      	ldr	r1, [r7, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	000b      	movs	r3, r1
 8000bcc:	0f5b      	lsrs	r3, r3, #29
 8000bce:	0016      	movs	r6, r2
 8000bd0:	00f6      	lsls	r6, r6, #3
 8000bd2:	627e      	str	r6, [r7, #36]	; 0x24
 8000bd4:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000bd6:	431e      	orrs	r6, r3
 8000bd8:	627e      	str	r6, [r7, #36]	; 0x24
 8000bda:	000b      	movs	r3, r1
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	623b      	str	r3, [r7, #32]
 8000be0:	0023      	movs	r3, r4
 8000be2:	3307      	adds	r3, #7
 8000be4:	08db      	lsrs	r3, r3, #3
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	466a      	mov	r2, sp
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	469d      	mov	sp, r3
 8000bee:	466b      	mov	r3, sp
 8000bf0:	3300      	adds	r3, #0
 8000bf2:	64bb      	str	r3, [r7, #72]	; 0x48
	//sprintf(toSend, "%s%s%s\n", str, msg, end);	//pro testNum = 0 se vytiskne jen paket->type, jelikož sprintf pak narazí na nulu
	memcpy(toSend, str, 2);
 8000bf4:	2638      	movs	r6, #56	; 0x38
 8000bf6:	1983      	adds	r3, r0, r6
 8000bf8:	19d9      	adds	r1, r3, r7
 8000bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f00c fdb0 	bl	800d764 <memcpy>
	memcpy(toSend+2, msg, paket->dataLength + 2);
 8000c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c06:	1c98      	adds	r0, r3, #2
 8000c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c0a:	7a1b      	ldrb	r3, [r3, #8]
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	001a      	movs	r2, r3
 8000c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c12:	0019      	movs	r1, r3
 8000c14:	f00c fda6 	bl	800d764 <memcpy>
	memcpy(toSend+2+paket->dataLength + 2, end, 4);
 8000c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c1a:	7a1b      	ldrb	r3, [r3, #8]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c20:	18d2      	adds	r2, r2, r3
 8000c22:	19ab      	adds	r3, r5, r6
 8000c24:	19db      	adds	r3, r3, r7
 8000c26:	0010      	movs	r0, r2
 8000c28:	0019      	movs	r1, r3
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	f00c fd99 	bl	800d764 <memcpy>
	pushStr(buffer, toSend, sizeof(toSend)-1);
 8000c32:	0023      	movs	r3, r4
 8000c34:	3b01      	subs	r3, #1
 8000c36:	001a      	movs	r2, r3
 8000c38:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f001 fd06 	bl	800264e <pushStr>
 8000c42:	46c5      	mov	sp, r8
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b016      	add	sp, #88	; 0x58
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	46b8      	mov	r8, r7
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c50:	0800e070 	.word	0x0800e070
 8000c54:	000a3c3c 	.word	0x000a3c3c

08000c58 <decodePaket>:

//_____Příchozí řetězec přepracuje do struktury typu paket (pokud to lze)_____//
static uint8_t decodePaket(/*Paket* paket,*/ uint8_t* data, uint8_t dataLenght)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	000a      	movs	r2, r1
 8000c62:	1cfb      	adds	r3, r7, #3
 8000c64:	701a      	strb	r2, [r3, #0]
	int sum = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
 8000c6e:	e00a      	b.n	8000c86 <decodePaket+0x2e>
	{
		sum += data[i];
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	18d3      	adds	r3, r2, r3
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	001a      	movs	r2, r3
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	189b      	adds	r3, r3, r2
 8000c7e:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	3301      	adds	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	1cfb      	adds	r3, r7, #3
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	3b03      	subs	r3, #3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	dbee      	blt.n	8000c70 <decodePaket+0x18>
	}
	if(sum == data[dataLenght - 3])	//kontorlní součet odpovídá
 8000c92:	1cfb      	adds	r3, r7, #3
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	3b03      	subs	r3, #3
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	18d3      	adds	r3, r2, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d000      	beq.n	8000ca8 <decodePaket+0x50>
 8000ca6:	e06a      	b.n	8000d7e <decodePaket+0x126>
	{
		switch(data[2])	//Na třetím místě je instrukce
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3302      	adds	r3, #2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	3b61      	subs	r3, #97	; 0x61
 8000cb0:	2b12      	cmp	r3, #18
 8000cb2:	d85e      	bhi.n	8000d72 <decodePaket+0x11a>
 8000cb4:	009a      	lsls	r2, r3, #2
 8000cb6:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <decodePaket+0x144>)
 8000cb8:	18d3      	adds	r3, r2, r3
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	469f      	mov	pc, r3
		{
		case 's': ;
			//___Start testu___//
			if(dataLenght == 7)
 8000cbe:	1cfb      	adds	r3, r7, #3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b07      	cmp	r3, #7
 8000cc4:	d15d      	bne.n	8000d82 <decodePaket+0x12a>
			{
				flags.instructions.startRequest = 1;
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <decodePaket+0x148>)
 8000cc8:	7b1a      	ldrb	r2, [r3, #12]
 8000cca:	2101      	movs	r1, #1
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	731a      	strb	r2, [r3, #12]
				supplyToTest = data[3];
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	78da      	ldrb	r2, [r3, #3]
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <decodePaket+0x14c>)
 8000cd6:	701a      	strb	r2, [r3, #0]
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				//Na pozici data je ukazatel na testovaný zdroj
			}
			break;
 8000cd8:	e053      	b.n	8000d82 <decodePaket+0x12a>

		case'c': ;
			//___Ukončení___//
		if(dataLenght == 7)
 8000cda:	1cfb      	adds	r3, r7, #3
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b07      	cmp	r3, #7
 8000ce0:	d151      	bne.n	8000d86 <decodePaket+0x12e>
		{
			flags.instructions.stopRequest = 1;
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <decodePaket+0x148>)
 8000ce4:	7b1a      	ldrb	r2, [r3, #12]
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Ukonceni\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000cec:	e04b      	b.n	8000d86 <decodePaket+0x12e>

		case'p': ;
			//___Pauza___//
		if(dataLenght == 7)
 8000cee:	1cfb      	adds	r3, r7, #3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b07      	cmp	r3, #7
 8000cf4:	d149      	bne.n	8000d8a <decodePaket+0x132>
		{
			flags.instructions.pauseRequest = 1;
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <decodePaket+0x148>)
 8000cf8:	7b1a      	ldrb	r2, [r3, #12]
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Pauza\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000d00:	e043      	b.n	8000d8a <decodePaket+0x132>

		case'k': ;
			//___Kalibrace___//
		if(dataLenght == 7)
 8000d02:	1cfb      	adds	r3, r7, #3
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b07      	cmp	r3, #7
 8000d08:	d141      	bne.n	8000d8e <decodePaket+0x136>
		{
			if(data[3] == 0)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3303      	adds	r3, #3
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d105      	bne.n	8000d20 <decodePaket+0xc8>
				flags.instructions.calibRequest = 1;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <decodePaket+0x148>)
 8000d16:	7b1a      	ldrb	r2, [r3, #12]
 8000d18:	2108      	movs	r1, #8
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Kalibrace\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000d1e:	e036      	b.n	8000d8e <decodePaket+0x136>
			else if(data[3] == 1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3303      	adds	r3, #3
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d131      	bne.n	8000d8e <decodePaket+0x136>
				flags.instructions.calibDone = 1;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <decodePaket+0x148>)
 8000d2c:	7b1a      	ldrb	r2, [r3, #12]
 8000d2e:	2110      	movs	r1, #16
 8000d30:	430a      	orrs	r2, r1
 8000d32:	731a      	strb	r2, [r3, #12]
			break;
 8000d34:	e02b      	b.n	8000d8e <decodePaket+0x136>

		case 'a' : ;
			//___Navázání komunikace___//
		if(dataLenght == 7)
 8000d36:	1cfb      	adds	r3, r7, #3
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b07      	cmp	r3, #7
 8000d3c:	d119      	bne.n	8000d72 <decodePaket+0x11a>
		{
			uint8_t data = regCount;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <decodePaket+0x150>)
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	2117      	movs	r1, #23
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	701a      	strb	r2, [r3, #0]
			Paket paket;
			fillPaket(&paket, ACK_PAKET, &data, 1);
 8000d48:	187a      	adds	r2, r7, r1
 8000d4a:	2408      	movs	r4, #8
 8000d4c:	1938      	adds	r0, r7, r4
 8000d4e:	2301      	movs	r3, #1
 8000d50:	2105      	movs	r1, #5
 8000d52:	f7ff fe85 	bl	8000a60 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <decodePaket+0x154>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	193a      	adds	r2, r7, r4
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff febe 	bl	8000ae0 <pushPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <decodePaket+0x154>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	193a      	adds	r2, r7, r4
 8000d6a:	0011      	movs	r1, r2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff feb7 	bl	8000ae0 <pushPaket>
		}

		default: ;
			//___Neplatný příkaz___//
			flags.instructions.unknownInst = 1;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <decodePaket+0x148>)
 8000d74:	7b1a      	ldrb	r2, [r3, #12]
 8000d76:	2120      	movs	r1, #32
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
			sprintf(txt, "Neplatna instrukce\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			break;
 8000d7c:	e008      	b.n	8000d90 <decodePaket+0x138>
		}
	}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	e006      	b.n	8000d90 <decodePaket+0x138>
			break;
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	e004      	b.n	8000d90 <decodePaket+0x138>
			break;
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	e002      	b.n	8000d90 <decodePaket+0x138>
			break;
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	e000      	b.n	8000d90 <decodePaket+0x138>
			break;
 8000d8e:	46c0      	nop			; (mov r8, r8)
	return 1;
 8000d90:	2301      	movs	r3, #1
}
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b009      	add	sp, #36	; 0x24
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	0800e1a4 	.word	0x0800e1a4
 8000da0:	200003d0 	.word	0x200003d0
 8000da4:	200003ee 	.word	0x200003ee
 8000da8:	20000404 	.word	0x20000404
 8000dac:	200001fc 	.word	0x200001fc

08000db0 <setColour>:
static BACKLIGHT colour;

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colourToSet)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	0002      	movs	r2, r0
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	701a      	strb	r2, [r3, #0]
	switch(colourToSet)
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d033      	beq.n	8000e2c <setColour+0x7c>
 8000dc4:	dc49      	bgt.n	8000e5a <setColour+0xaa>
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <setColour+0x20>
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d017      	beq.n	8000dfe <setColour+0x4e>
 8000dce:	e044      	b.n	8000e5a <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4830      	ldr	r0, [pc, #192]	; (8000e98 <setColour+0xe8>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	0019      	movs	r1, r3
 8000dda:	f003 fb4e 	bl	800447a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	0219      	lsls	r1, r3, #8
 8000de2:	2390      	movs	r3, #144	; 0x90
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	2200      	movs	r2, #0
 8000de8:	0018      	movs	r0, r3
 8000dea:	f003 fb46 	bl	800447a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4829      	ldr	r0, [pc, #164]	; (8000e98 <setColour+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	0019      	movs	r1, r3
 8000df8:	f003 fb3f 	bl	800447a <HAL_GPIO_WritePin>
		break;
 8000dfc:	e044      	b.n	8000e88 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4825      	ldr	r0, [pc, #148]	; (8000e98 <setColour+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	0019      	movs	r1, r3
 8000e08:	f003 fb37 	bl	800447a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	0219      	lsls	r1, r3, #8
 8000e10:	2390      	movs	r3, #144	; 0x90
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	2200      	movs	r2, #0
 8000e16:	0018      	movs	r0, r3
 8000e18:	f003 fb2f 	bl	800447a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	481d      	ldr	r0, [pc, #116]	; (8000e98 <setColour+0xe8>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	0019      	movs	r1, r3
 8000e26:	f003 fb28 	bl	800447a <HAL_GPIO_WritePin>
		break;
 8000e2a:	e02d      	b.n	8000e88 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4819      	ldr	r0, [pc, #100]	; (8000e98 <setColour+0xe8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	0019      	movs	r1, r3
 8000e36:	f003 fb20 	bl	800447a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	0219      	lsls	r1, r3, #8
 8000e3e:	2390      	movs	r3, #144	; 0x90
 8000e40:	05db      	lsls	r3, r3, #23
 8000e42:	2201      	movs	r2, #1
 8000e44:	0018      	movs	r0, r3
 8000e46:	f003 fb18 	bl	800447a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <setColour+0xe8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	0019      	movs	r1, r3
 8000e54:	f003 fb11 	bl	800447a <HAL_GPIO_WritePin>
		break;
 8000e58:	e016      	b.n	8000e88 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	480e      	ldr	r0, [pc, #56]	; (8000e98 <setColour+0xe8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	0019      	movs	r1, r3
 8000e64:	f003 fb09 	bl	800447a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	0219      	lsls	r1, r3, #8
 8000e6c:	2390      	movs	r3, #144	; 0x90
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	2200      	movs	r2, #0
 8000e72:	0018      	movs	r0, r3
 8000e74:	f003 fb01 	bl	800447a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <setColour+0xe8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	0019      	movs	r1, r3
 8000e82:	f003 fafa 	bl	800447a <HAL_GPIO_WritePin>
		break;
 8000e86:	46c0      	nop			; (mov r8, r8)
	}

	colour = colourToSet;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <setColour+0xec>)
 8000e8a:	1dfa      	adds	r2, r7, #7
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b002      	add	sp, #8
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	2000020e 	.word	0x2000020e

08000ea0 <sendByte>:

//_____Pošle byte dat_____//
//-> argumenty: char - posílaný byte, Start_byte definuje zda jde o instrukci nebo data
// !!! Pracuje v blokujícím módu !!!
static DISP_STATE sendByte(char byte, START_BYTE type)
{
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	1dbb      	adds	r3, r7, #6
 8000eae:	1c0a      	adds	r2, r1, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
		{
			return SPI_ERR;
		}
	}*/
	uint8_t buffer[3];
	switch(type)
 8000eb2:	1dbb      	adds	r3, r7, #6
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d002      	beq.n	8000ec0 <sendByte+0x20>
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d005      	beq.n	8000eca <sendByte+0x2a>
 8000ebe:	e009      	b.n	8000ed4 <sendByte+0x34>
	{
		case INSTRUCTION:
			buffer[0] = 0xF8;
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	22f8      	movs	r2, #248	; 0xf8
 8000ec6:	701a      	strb	r2, [r3, #0]
			break;
 8000ec8:	e006      	b.n	8000ed8 <sendByte+0x38>
		case DATA:
			buffer[0] = 0xFA;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	22fa      	movs	r2, #250	; 0xfa
 8000ed0:	701a      	strb	r2, [r3, #0]
			break;
 8000ed2:	e001      	b.n	8000ed8 <sendByte+0x38>
		default:	//neošetřené možnosti
			return SPI_ERR;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e074      	b.n	8000fc2 <sendByte+0x122>
			break;
	}
	uint8_t tmp1 = 0U, tmp2 = 0U;
 8000ed8:	230f      	movs	r3, #15
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	230e      	movs	r3, #14
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000ee8:	230d      	movs	r3, #13
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e03a      	b.n	8000f68 <sendByte+0xc8>
	{
		if(MaskBit(byte, i))
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	210d      	movs	r1, #13
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	411a      	asrs	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	2201      	movs	r2, #1
 8000f02:	4013      	ands	r3, r2
 8000f04:	d00f      	beq.n	8000f26 <sendByte+0x86>
		{
			SetBit(tmp1, (7-i));
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2201      	movs	r2, #1
 8000f10:	409a      	lsls	r2, r3
 8000f12:	0013      	movs	r3, r2
 8000f14:	b25a      	sxtb	r2, r3
 8000f16:	210f      	movs	r1, #15
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	701a      	strb	r2, [r3, #0]
		}
		if(MaskBit(byte, (i+4)))
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781a      	ldrb	r2, [r3, #0]
 8000f2a:	210d      	movs	r1, #13
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	3304      	adds	r3, #4
 8000f32:	411a      	asrs	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d00f      	beq.n	8000f5c <sendByte+0xbc>
		{
			SetBit(tmp2, (7-i));
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2207      	movs	r2, #7
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2201      	movs	r2, #1
 8000f46:	409a      	lsls	r2, r3
 8000f48:	0013      	movs	r3, r2
 8000f4a:	b25a      	sxtb	r2, r3
 8000f4c:	210e      	movs	r1, #14
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b25a      	sxtb	r2, r3
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000f5c:	210d      	movs	r1, #13
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	3201      	adds	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	230d      	movs	r3, #13
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d9bf      	bls.n	8000ef2 <sendByte+0x52>
		}
	}
	buffer[1] = tmp1;
 8000f72:	2508      	movs	r5, #8
 8000f74:	197b      	adds	r3, r7, r5
 8000f76:	220f      	movs	r2, #15
 8000f78:	18ba      	adds	r2, r7, r2
 8000f7a:	7812      	ldrb	r2, [r2, #0]
 8000f7c:	705a      	strb	r2, [r3, #1]
	buffer[2] = tmp2;
 8000f7e:	197b      	adds	r3, r7, r5
 8000f80:	220e      	movs	r2, #14
 8000f82:	18ba      	adds	r2, r7, r2
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	709a      	strb	r2, [r3, #2]

	DISP_CS_ON;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <sendByte+0x12c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f003 fa73 	bl	800447a <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, buffer, 3, 100);
 8000f94:	260c      	movs	r6, #12
 8000f96:	19bc      	adds	r4, r7, r6
 8000f98:	1979      	adds	r1, r7, r5
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <sendByte+0x130>)
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	f005 ffea 	bl	8006f78 <HAL_SPI_Transmit>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	7023      	strb	r3, [r4, #0]
	DISP_CS_OFF;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <sendByte+0x12c>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	2140      	movs	r1, #64	; 0x40
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f003 fa63 	bl	800447a <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	if(ret == HAL_OK)
 8000fb4:	19bb      	adds	r3, r7, r6
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <sendByte+0x120>
		return DISP_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e000      	b.n	8000fc2 <sendByte+0x122>
	else
		return SPI_ERR;
 8000fc0:	2302      	movs	r3, #2
}
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b005      	add	sp, #20
 8000fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	20000250 	.word	0x20000250

08000fd4 <dispInit>:
}

//_____Provede reset displeje a defaultní nastavení_____//
// !!! Pracuje v blokujícím módu !!!
void dispInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	//_____Reset displeje po startu_____//
	HAL_Delay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f002 fa19 	bl	8003410 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_RESET);
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <dispInit+0x8c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f003 fa48 	bl	800447a <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000fea:	2014      	movs	r0, #20
 8000fec:	f002 fa10 	bl	8003410 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_SET);
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <dispInit+0x8c>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f003 fa3f 	bl	800447a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000ffc:	2005      	movs	r0, #5
 8000ffe:	f002 fa07 	bl	8003410 <HAL_Delay>

	//_____Nastavit parametry_____//
	sendByte(0x31, INSTRUCTION);	//Function set IS = 1, RE = 0
 8001002:	2101      	movs	r1, #1
 8001004:	2031      	movs	r0, #49	; 0x31
 8001006:	f7ff ff4b 	bl	8000ea0 <sendByte>
	sendByte(0x01, INSTRUCTION);	//Clear display
 800100a:	2101      	movs	r1, #1
 800100c:	2001      	movs	r0, #1
 800100e:	f7ff ff47 	bl	8000ea0 <sendByte>
	sendByte(0x13, INSTRUCTION);	//Oscilator
 8001012:	2101      	movs	r1, #1
 8001014:	2013      	movs	r0, #19
 8001016:	f7ff ff43 	bl	8000ea0 <sendByte>
	sendByte(0x7A, INSTRUCTION);	//Contrast
 800101a:	2101      	movs	r1, #1
 800101c:	207a      	movs	r0, #122	; 0x7a
 800101e:	f7ff ff3f 	bl	8000ea0 <sendByte>
	sendByte(0x56, INSTRUCTION);	//Power/Icon/Contrast
 8001022:	2101      	movs	r1, #1
 8001024:	2056      	movs	r0, #86	; 0x56
 8001026:	f7ff ff3b 	bl	8000ea0 <sendByte>
	sendByte(0x6B, INSTRUCTION);	//Follower control
 800102a:	2101      	movs	r1, #1
 800102c:	206b      	movs	r0, #107	; 0x6b
 800102e:	f7ff ff37 	bl	8000ea0 <sendByte>
	sendByte(0x0F, INSTRUCTION);	//Display on
 8001032:	2101      	movs	r1, #1
 8001034:	200f      	movs	r0, #15
 8001036:	f7ff ff33 	bl	8000ea0 <sendByte>
	sendByte(0x32, INSTRUCTION);	//Function set RE = 1
 800103a:	2101      	movs	r1, #1
 800103c:	2032      	movs	r0, #50	; 0x32
 800103e:	f7ff ff2f 	bl	8000ea0 <sendByte>
	sendByte(0x1F, INSTRUCTION);	//Shift enable
 8001042:	2101      	movs	r1, #1
 8001044:	201f      	movs	r0, #31
 8001046:	f7ff ff2b 	bl	8000ea0 <sendByte>
	sendByte(0x38, INSTRUCTION);	//Function set RE = 0
 800104a:	2101      	movs	r1, #1
 800104c:	2038      	movs	r0, #56	; 0x38
 800104e:	f7ff ff27 	bl	8000ea0 <sendByte>

	//_____Zapnout podsvícení_____//
	setColour(BACKLIGHT_WHITE);
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff feac 	bl	8000db0 <setColour>
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	48000400 	.word	0x48000400

08001064 <setCursor>:
//_____Nastaví kurzor_____//
//pozice počítána od nuly//
//-> argumenty: řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE setCursor(uint8_t row, uint8_t col)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	0002      	movs	r2, r0
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	1dbb      	adds	r3, r7, #6
 8001072:	1c0a      	adds	r2, r1, #0
 8001074:	701a      	strb	r2, [r3, #0]
	uint8_t addres = 0x80;	//DDRAM adresa
 8001076:	230f      	movs	r3, #15
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	701a      	strb	r2, [r3, #0]
	if(row > 3 || col > 15)	//displej 4x16
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d803      	bhi.n	800108e <setCursor+0x2a>
 8001086:	1dbb      	adds	r3, r7, #6
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	d901      	bls.n	8001092 <setCursor+0x2e>
		return DISP_ERR;
 800108e:	2304      	movs	r3, #4
 8001090:	e01c      	b.n	80010cc <setCursor+0x68>
	addres += row*0x20;
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	015b      	lsls	r3, r3, #5
 8001098:	b2d9      	uxtb	r1, r3
 800109a:	200f      	movs	r0, #15
 800109c:	183b      	adds	r3, r7, r0
 800109e:	183a      	adds	r2, r7, r0
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	188a      	adds	r2, r1, r2
 80010a4:	701a      	strb	r2, [r3, #0]
	addres += col;
 80010a6:	183b      	adds	r3, r7, r0
 80010a8:	1839      	adds	r1, r7, r0
 80010aa:	1dba      	adds	r2, r7, #6
 80010ac:	7809      	ldrb	r1, [r1, #0]
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	188a      	adds	r2, r1, r2
 80010b2:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(5);
	DISP_STATE ret = sendByte(addres, INSTRUCTION);
 80010b4:	250e      	movs	r5, #14
 80010b6:	197c      	adds	r4, r7, r5
 80010b8:	183b      	adds	r3, r7, r0
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2101      	movs	r1, #1
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff feee 	bl	8000ea0 <sendByte>
 80010c4:	0003      	movs	r3, r0
 80010c6:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(5);
	return ret;
 80010c8:	197b      	adds	r3, r7, r5
 80010ca:	781b      	ldrb	r3, [r3, #0]
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b004      	add	sp, #16
 80010d2:	bdb0      	pop	{r4, r5, r7, pc}

080010d4 <writeRow>:
//_____Zapiš řetězec na daný řádek_____//
//znaky přečnívající znaky budou smazány//
//-> argumenty: pole znaků, délka řetězce, řádek, zarovnání
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeRow(char* string, uint8_t lenght, uint8_t row, ALIGN align)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	000c      	movs	r4, r1
 80010de:	0010      	movs	r0, r2
 80010e0:	0019      	movs	r1, r3
 80010e2:	1cfb      	adds	r3, r7, #3
 80010e4:	1c22      	adds	r2, r4, #0
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	1cbb      	adds	r3, r7, #2
 80010ea:	1c02      	adds	r2, r0, #0
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	1c7b      	adds	r3, r7, #1
 80010f0:	1c0a      	adds	r2, r1, #0
 80010f2:	701a      	strb	r2, [r3, #0]
	if(lenght > 16)	//neplatná délka řetězce
 80010f4:	1cfb      	adds	r3, r7, #3
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b10      	cmp	r3, #16
 80010fa:	d901      	bls.n	8001100 <writeRow+0x2c>
		return DISP_ERR;
 80010fc:	2304      	movs	r3, #4
 80010fe:	e083      	b.n	8001208 <writeRow+0x134>
	uint8_t col;
	char newString[16];
	for(uint8_t i = 0; i < 16; i++)
 8001100:	231e      	movs	r3, #30
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e00b      	b.n	8001122 <writeRow+0x4e>
	{
		newString[i] = ' ';
 800110a:	201e      	movs	r0, #30
 800110c:	183b      	adds	r3, r7, r0
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	220c      	movs	r2, #12
 8001112:	18ba      	adds	r2, r7, r2
 8001114:	2120      	movs	r1, #32
 8001116:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 8001118:	183b      	adds	r3, r7, r0
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	183b      	adds	r3, r7, r0
 800111e:	3201      	adds	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	231e      	movs	r3, #30
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d9ee      	bls.n	800110a <writeRow+0x36>
	}
	switch(align)
 800112c:	1c7b      	adds	r3, r7, #1
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d012      	beq.n	800115a <writeRow+0x86>
 8001134:	dc1e      	bgt.n	8001174 <writeRow+0xa0>
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <writeRow+0x6c>
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <writeRow+0x76>
 800113e:	e019      	b.n	8001174 <writeRow+0xa0>
	{
		case LEFT:	//zarovnání doleva
			col = 0;
 8001140:	231f      	movs	r3, #31
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
			break;
 8001148:	e019      	b.n	800117e <writeRow+0xaa>
		case RIGHT:
			col = 15 - lenght;
 800114a:	231f      	movs	r3, #31
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	1cfa      	adds	r2, r7, #3
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	210f      	movs	r1, #15
 8001154:	1a8a      	subs	r2, r1, r2
 8001156:	701a      	strb	r2, [r3, #0]
			break;
 8001158:	e011      	b.n	800117e <writeRow+0xaa>
		case CENTER:
			col = (15 - lenght)/2 + 1;
 800115a:	1cfb      	adds	r3, r7, #3
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	220f      	movs	r2, #15
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	d500      	bpl.n	8001166 <writeRow+0x92>
 8001164:	3301      	adds	r3, #1
 8001166:	105b      	asrs	r3, r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	231f      	movs	r3, #31
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	3201      	adds	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
			break;
 8001172:	e004      	b.n	800117e <writeRow+0xaa>
		default:
			col = 0;
 8001174:	231f      	movs	r3, #31
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
			break;
 800117c:	46c0      	nop			; (mov r8, r8)
	}
	for(uint8_t i = 0; i < lenght; i++)
 800117e:	231d      	movs	r3, #29
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e013      	b.n	80011b0 <writeRow+0xdc>
	{
		newString[col + i] = string[i];
 8001188:	201d      	movs	r0, #29
 800118a:	183b      	adds	r3, r7, r0
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	18d2      	adds	r2, r2, r3
 8001192:	231f      	movs	r3, #31
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	7819      	ldrb	r1, [r3, #0]
 8001198:	183b      	adds	r3, r7, r0
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	18cb      	adds	r3, r1, r3
 800119e:	7811      	ldrb	r1, [r2, #0]
 80011a0:	220c      	movs	r2, #12
 80011a2:	18ba      	adds	r2, r7, r2
 80011a4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < lenght; i++)
 80011a6:	183b      	adds	r3, r7, r0
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	183b      	adds	r3, r7, r0
 80011ac:	3201      	adds	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	231d      	movs	r3, #29
 80011b2:	18fa      	adds	r2, r7, r3
 80011b4:	1cfb      	adds	r3, r7, #3
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d3e4      	bcc.n	8001188 <writeRow+0xb4>
	}
	setCursor(row, 0);
 80011be:	1cbb      	adds	r3, r7, #2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2100      	movs	r1, #0
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff4d 	bl	8001064 <setCursor>
	for(uint8_t i = 0; i < 16; i++)
 80011ca:	231c      	movs	r3, #28
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	e013      	b.n	80011fc <writeRow+0x128>
	{
		if(sendByte(newString[i], DATA) != DISP_OK)
 80011d4:	231c      	movs	r3, #28
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	220c      	movs	r2, #12
 80011dc:	18ba      	adds	r2, r7, r2
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	2102      	movs	r1, #2
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff fe5c 	bl	8000ea0 <sendByte>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d001      	beq.n	80011f0 <writeRow+0x11c>
					return SPI_ERR;
 80011ec:	2302      	movs	r3, #2
 80011ee:	e00b      	b.n	8001208 <writeRow+0x134>
	for(uint8_t i = 0; i < 16; i++)
 80011f0:	211c      	movs	r1, #28
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	3201      	adds	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	231c      	movs	r3, #28
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	d9e6      	bls.n	80011d4 <writeRow+0x100>
	}
	return DISP_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b009      	add	sp, #36	; 0x24
 800120e:	bd90      	pop	{r4, r7, pc}

08001210 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	0002      	movs	r2, r0
 8001218:	1dbb      	adds	r3, r7, #6
 800121a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 800121c:	1dbb      	adds	r3, r7, #6
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	429a      	cmp	r2, r3
 8001226:	d104      	bne.n	8001232 <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_GPIO_EXTI_Callback+0x40>)
 800122a:	791a      	ldrb	r2, [r3, #4]
 800122c:	2101      	movs	r1, #1
 800122e:	430a      	orrs	r2, r1
 8001230:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 8001232:	1dbb      	adds	r3, r7, #6
 8001234:	881a      	ldrh	r2, [r3, #0]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	429a      	cmp	r2, r3
 800123c:	d104      	bne.n	8001248 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <HAL_GPIO_EXTI_Callback+0x40>)
 8001240:	791a      	ldrb	r2, [r3, #4]
 8001242:	2104      	movs	r1, #4
 8001244:	430a      	orrs	r2, r1
 8001246:	711a      	strb	r2, [r3, #4]
	}
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200003d0 	.word	0x200003d0

08001254 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001260:	429a      	cmp	r2, r3
 8001262:	d110      	bne.n	8001286 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		//Krátké pípnutí signalizuje vykonávání hlavní smy�?ky programu
		//delší než deset ms
		if(flags.time.ten_ms == 1)
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	07db      	lsls	r3, r3, #31
 800126a:	0fdb      	lsrs	r3, r3, #31
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b01      	cmp	r3, #1
 8001270:	d104      	bne.n	800127c <HAL_TIM_PeriodElapsedCallback+0x28>
			flags.ui.shortBeep = 1;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001274:	7c1a      	ldrb	r2, [r3, #16]
 8001276:	2101      	movs	r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	741a      	strb	r2, [r3, #16]
		flags.time.ten_ms = 1;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	2101      	movs	r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]
	}
}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	200002b4 	.word	0x200002b4
 8001294:	200003d0 	.word	0x200003d0

08001298 <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	0018      	movs	r0, r3
 80012a4:	f002 fa8a 	bl	80037bc <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <HAL_ADC_ConvCpltCallback+0x24>)
 80012aa:	7d1a      	ldrb	r2, [r3, #20]
 80012ac:	2104      	movs	r1, #4
 80012ae:	430a      	orrs	r2, r1
 80012b0:	751a      	strb	r2, [r3, #20]
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	200003d0 	.word	0x200003d0

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c6:	f002 f83f 	bl	8003348 <HAL_Init>
  /* USER CODE BEGIN Init */

  //__Buffery___//
  //dispBuffer = createBuffer(100);
  //regBuffer = createBuffer(100);
  USB_Rx_Buffer = createBuffer(500);
 80012ca:	23fa      	movs	r3, #250	; 0xfa
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	0018      	movs	r0, r3
 80012d0:	f001 f93b 	bl	800254a <createBuffer>
 80012d4:	0002      	movs	r2, r0
 80012d6:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <main+0x1f4>)
 80012d8:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 80012da:	23fa      	movs	r3, #250	; 0xfa
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 f933 	bl	800254a <createBuffer>
 80012e4:	0002      	movs	r2, r0
 80012e6:	4b74      	ldr	r3, [pc, #464]	; (80014b8 <main+0x1f8>)
 80012e8:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ea:	f000 f8fd 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ee:	f000 fb47 	bl	8001980 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012f2:	f00b fc93 	bl	800cc1c <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 80012f6:	f000 f963 	bl	80015c0 <MX_ADC_Init>
  MX_SPI1_Init();
 80012fa:	f000 fa7f 	bl	80017fc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80012fe:	f000 fb0f 	bl	8001920 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8001302:	f000 fac1 	bl	8001888 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  dispInit();
 8001306:	f7ff fe65 	bl	8000fd4 <dispInit>
  char line1[] = "Zahoreni";
 800130a:	200c      	movs	r0, #12
 800130c:	183b      	adds	r3, r7, r0
 800130e:	4a6b      	ldr	r2, [pc, #428]	; (80014bc <main+0x1fc>)
 8001310:	ca12      	ldmia	r2!, {r1, r4}
 8001312:	c312      	stmia	r3!, {r1, r4}
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	701a      	strb	r2, [r3, #0]
  char line2[] = "zdroju";
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4a69      	ldr	r2, [pc, #420]	; (80014c0 <main+0x200>)
 800131c:	6811      	ldr	r1, [r2, #0]
 800131e:	6019      	str	r1, [r3, #0]
 8001320:	8891      	ldrh	r1, [r2, #4]
 8001322:	8099      	strh	r1, [r3, #4]
 8001324:	7992      	ldrb	r2, [r2, #6]
 8001326:	719a      	strb	r2, [r3, #6]
  writeRow(line1, 8, 1, CENTER);
 8001328:	1838      	adds	r0, r7, r0
 800132a:	2302      	movs	r3, #2
 800132c:	2201      	movs	r2, #1
 800132e:	2108      	movs	r1, #8
 8001330:	f7ff fed0 	bl	80010d4 <writeRow>
  writeRow(line2, 6, 2, CENTER);
 8001334:	1d38      	adds	r0, r7, #4
 8001336:	2302      	movs	r3, #2
 8001338:	2202      	movs	r2, #2
 800133a:	2106      	movs	r1, #6
 800133c:	f7ff feca 	bl	80010d4 <writeRow>

  LOAD_MIN_OFF;
 8001340:	4b60      	ldr	r3, [pc, #384]	; (80014c4 <main+0x204>)
 8001342:	2200      	movs	r2, #0
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	0018      	movs	r0, r3
 8001348:	f003 f897 	bl	800447a <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 800134c:	4b5d      	ldr	r3, [pc, #372]	; (80014c4 <main+0x204>)
 800134e:	2200      	movs	r2, #0
 8001350:	2140      	movs	r1, #64	; 0x40
 8001352:	0018      	movs	r0, r3
 8001354:	f003 f891 	bl	800447a <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 8001358:	f001 fa48 	bl	80027ec <regInit>
 800135c:	1e03      	subs	r3, r0, #0
 800135e:	d004      	beq.n	800136a <main+0xaa>
  {
	  flags.conErr = 1;
 8001360:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <main+0x208>)
 8001362:	7e1a      	ldrb	r2, [r3, #24]
 8001364:	2140      	movs	r1, #64	; 0x40
 8001366:	430a      	orrs	r2, r1
 8001368:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 800136a:	4b58      	ldr	r3, [pc, #352]	; (80014cc <main+0x20c>)
 800136c:	0018      	movs	r0, r3
 800136e:	f006 faf3 	bl	8007958 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 8001372:	4b55      	ldr	r3, [pc, #340]	; (80014c8 <main+0x208>)
 8001374:	7c1a      	ldrb	r2, [r3, #16]
 8001376:	2102      	movs	r1, #2
 8001378:	430a      	orrs	r2, r1
 800137a:	741a      	strb	r2, [r3, #16]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t savedSec;

	  if(flags.time.ten_ms)	// 10 ms
 800137c:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <main+0x208>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	07db      	lsls	r3, r3, #31
 8001382:	0fdb      	lsrs	r3, r3, #31
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f8      	beq.n	800137c <main+0xbc>
	  {
		  clkHandler();
 800138a:	f000 fbf7 	bl	8001b7c <clkHandler>
		  buttonDebounce();
 800138e:	f000 fc73 	bl	8001c78 <buttonDebounce>
		  comHandler();
 8001392:	f7ff f841 	bl	8000418 <comHandler>
		  if(flags.instructions.calibRequest)
 8001396:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <main+0x208>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	071b      	lsls	r3, r3, #28
 800139c:	0fdb      	lsrs	r3, r3, #31
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d032      	beq.n	800140a <main+0x14a>
		  {
				sourceInTesting = &regValues[regCount - 1];
 80013a4:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <main+0x210>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <main+0x214>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	18d2      	adds	r2, r2, r3
 80013b0:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <main+0x218>)
 80013b2:	601a      	str	r2, [r3, #0]

				for(int i = 0; i < regCount; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	e008      	b.n	80013cc <main+0x10c>
				{
					regValues[i] = 0;
 80013ba:	4b45      	ldr	r3, [pc, #276]	; (80014d0 <main+0x210>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	18d3      	adds	r3, r2, r3
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < regCount; i++)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <main+0x214>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	001a      	movs	r2, r3
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	4293      	cmp	r3, r2
 80013d6:	dbf0      	blt.n	80013ba <main+0xfa>
				}
				RELAY_ON(*sourceInTesting);	//připojit relé
 80013d8:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <main+0x218>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <main+0x218>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2102      	movs	r1, #2
 80013e4:	430a      	orrs	r2, r1
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]

				sendData();	//poslat konfiguraci shift registrům
 80013ea:	f001 fa5b 	bl	80028a4 <sendData>

				savedSec = sysTime[SYSTIME_SEC];
 80013ee:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <main+0x21c>)
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <main+0x220>)
 80013f4:	601a      	str	r2, [r3, #0]

				flags.instructions.calibRequest = 0;
 80013f6:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <main+0x208>)
 80013f8:	7b1a      	ldrb	r2, [r3, #12]
 80013fa:	2108      	movs	r1, #8
 80013fc:	438a      	bics	r2, r1
 80013fe:	731a      	strb	r2, [r3, #12]
				flags.calibRunning = 1;
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <main+0x208>)
 8001402:	7e1a      	ldrb	r2, [r3, #24]
 8001404:	2108      	movs	r1, #8
 8001406:	430a      	orrs	r2, r1
 8001408:	761a      	strb	r2, [r3, #24]


		  }
		  if(flags.calibRunning)
 800140a:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <main+0x208>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	071b      	lsls	r3, r3, #28
 8001410:	0fdb      	lsrs	r3, r3, #31
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d043      	beq.n	80014a0 <main+0x1e0>
		  {
			  static uint8_t lock = 0;
			  if((sysTime[SYSTIME_SEC] >= savedSec + 3) & !lock)
 8001418:	4b30      	ldr	r3, [pc, #192]	; (80014dc <main+0x21c>)
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <main+0x220>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	1cda      	adds	r2, r3, #3
 8001422:	2300      	movs	r3, #0
 8001424:	4291      	cmp	r1, r2
 8001426:	415b      	adcs	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4a2e      	ldr	r2, [pc, #184]	; (80014e4 <main+0x224>)
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	4251      	negs	r1, r2
 8001430:	414a      	adcs	r2, r1
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	4013      	ands	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00c      	beq.n	8001456 <main+0x196>
				{
					flags.meas.measRequest = 1;
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <main+0x208>)
 800143e:	7d1a      	ldrb	r2, [r3, #20]
 8001440:	2101      	movs	r1, #1
 8001442:	430a      	orrs	r2, r1
 8001444:	751a      	strb	r2, [r3, #20]
					flags.meas.calibMeas = 1;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <main+0x208>)
 8001448:	7d1a      	ldrb	r2, [r3, #20]
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	430a      	orrs	r2, r1
 800144e:	751a      	strb	r2, [r3, #20]
					lock = 1;
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <main+0x224>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
				}
				if(flags.instructions.calibDone)
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <main+0x208>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	06db      	lsls	r3, r3, #27
 800145c:	0fdb      	lsrs	r3, r3, #31
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01d      	beq.n	80014a0 <main+0x1e0>
				{
					for(int i = 0; i < regCount; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	e008      	b.n	800147c <main+0x1bc>
					{
						regValues[i] = 0;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <main+0x210>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	18d3      	adds	r3, r2, r3
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < regCount; i++)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	3301      	adds	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <main+0x214>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	001a      	movs	r2, r3
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4293      	cmp	r3, r2
 8001486:	dbf0      	blt.n	800146a <main+0x1aa>
					}

					sendData();	//poslat konfiguraci shift registrům
 8001488:	f001 fa0c 	bl	80028a4 <sendData>
					flags.calibRunning = 0;
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <main+0x208>)
 800148e:	7e1a      	ldrb	r2, [r3, #24]
 8001490:	2108      	movs	r1, #8
 8001492:	438a      	bics	r2, r1
 8001494:	761a      	strb	r2, [r3, #24]
					flags.instructions.calibDone = 0;
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <main+0x208>)
 8001498:	7b1a      	ldrb	r2, [r3, #12]
 800149a:	2110      	movs	r1, #16
 800149c:	438a      	bics	r2, r1
 800149e:	731a      	strb	r2, [r3, #12]
				}
		  }
		  dispHandler();
 80014a0:	f000 fc72 	bl	8001d88 <dispHandler>
		  UI_Handler();
 80014a4:	f000 fe4c 	bl	8002140 <UI_Handler>
		  testHandler();
 80014a8:	f001 fc50 	bl	8002d4c <testHandler>
		  measHandler();
 80014ac:	f000 ff96 	bl	80023dc <measHandler>
  {
 80014b0:	e764      	b.n	800137c <main+0xbc>
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	20000eb4 	.word	0x20000eb4
 80014b8:	200001fc 	.word	0x200001fc
 80014bc:	0800e074 	.word	0x0800e074
 80014c0:	0800e080 	.word	0x0800e080
 80014c4:	48000800 	.word	0x48000800
 80014c8:	200003d0 	.word	0x200003d0
 80014cc:	200002b4 	.word	0x200002b4
 80014d0:	20000400 	.word	0x20000400
 80014d4:	20000404 	.word	0x20000404
 80014d8:	20000414 	.word	0x20000414
 80014dc:	200003c0 	.word	0x200003c0
 80014e0:	200003f0 	.word	0x200003f0
 80014e4:	200003f4 	.word	0x200003f4

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b099      	sub	sp, #100	; 0x64
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	242c      	movs	r4, #44	; 0x2c
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	0018      	movs	r0, r3
 80014f4:	2334      	movs	r3, #52	; 0x34
 80014f6:	001a      	movs	r2, r3
 80014f8:	2100      	movs	r1, #0
 80014fa:	f00c f93c 	bl	800d776 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fe:	231c      	movs	r3, #28
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	0018      	movs	r0, r3
 8001504:	2310      	movs	r3, #16
 8001506:	001a      	movs	r2, r3
 8001508:	2100      	movs	r1, #0
 800150a:	f00c f934 	bl	800d776 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800150e:	003b      	movs	r3, r7
 8001510:	0018      	movs	r0, r3
 8001512:	231c      	movs	r3, #28
 8001514:	001a      	movs	r2, r3
 8001516:	2100      	movs	r1, #0
 8001518:	f00c f92d 	bl	800d776 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800151c:	0021      	movs	r1, r4
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2232      	movs	r2, #50	; 0x32
 8001522:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2201      	movs	r2, #1
 8001528:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2201      	movs	r2, #1
 800152e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2201      	movs	r2, #1
 8001534:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001536:	187b      	adds	r3, r7, r1
 8001538:	2210      	movs	r2, #16
 800153a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800153c:	187b      	adds	r3, r7, r1
 800153e:	2210      	movs	r2, #16
 8001540:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001542:	187b      	adds	r3, r7, r1
 8001544:	2202      	movs	r2, #2
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001548:	187b      	adds	r3, r7, r1
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	0212      	lsls	r2, r2, #8
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2200      	movs	r2, #0
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001556:	187b      	adds	r3, r7, r1
 8001558:	2200      	movs	r2, #0
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	187b      	adds	r3, r7, r1
 800155e:	0018      	movs	r0, r3
 8001560:	f004 fe52 	bl	8006208 <HAL_RCC_OscConfig>
 8001564:	1e03      	subs	r3, r0, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001568:	f000 ffea 	bl	8002540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156c:	211c      	movs	r1, #28
 800156e:	187b      	adds	r3, r7, r1
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001574:	187b      	adds	r3, r7, r1
 8001576:	2202      	movs	r2, #2
 8001578:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2100      	movs	r1, #0
 800158a:	0018      	movs	r0, r3
 800158c:	f005 f9c2 	bl	8006914 <HAL_RCC_ClockConfig>
 8001590:	1e03      	subs	r3, r0, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001594:	f000 ffd4 	bl	8002540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001598:	003b      	movs	r3, r7
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	0292      	lsls	r2, r2, #10
 800159e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80015a0:	003b      	movs	r3, r7
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a6:	003b      	movs	r3, r7
 80015a8:	0018      	movs	r0, r3
 80015aa:	f005 fb2f 	bl	8006c0c <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80015b2:	f000 ffc5 	bl	8002540 <Error_Handler>
  }
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b019      	add	sp, #100	; 0x64
 80015bc:	bd90      	pop	{r4, r7, pc}
	...

080015c0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	0018      	movs	r0, r3
 80015ca:	230c      	movs	r3, #12
 80015cc:	001a      	movs	r2, r3
 80015ce:	2100      	movs	r1, #0
 80015d0:	f00c f8d1 	bl	800d776 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80015d4:	4b87      	ldr	r3, [pc, #540]	; (80017f4 <MX_ADC_Init+0x234>)
 80015d6:	4a88      	ldr	r2, [pc, #544]	; (80017f8 <MX_ADC_Init+0x238>)
 80015d8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015da:	4b86      	ldr	r3, [pc, #536]	; (80017f4 <MX_ADC_Init+0x234>)
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80015e0:	4b84      	ldr	r3, [pc, #528]	; (80017f4 <MX_ADC_Init+0x234>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e6:	4b83      	ldr	r3, [pc, #524]	; (80017f4 <MX_ADC_Init+0x234>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80015ec:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <MX_ADC_Init+0x234>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f2:	4b80      	ldr	r3, [pc, #512]	; (80017f4 <MX_ADC_Init+0x234>)
 80015f4:	2204      	movs	r2, #4
 80015f6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80015f8:	4b7e      	ldr	r3, [pc, #504]	; (80017f4 <MX_ADC_Init+0x234>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80015fe:	4b7d      	ldr	r3, [pc, #500]	; (80017f4 <MX_ADC_Init+0x234>)
 8001600:	2200      	movs	r2, #0
 8001602:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001604:	4b7b      	ldr	r3, [pc, #492]	; (80017f4 <MX_ADC_Init+0x234>)
 8001606:	2200      	movs	r2, #0
 8001608:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800160a:	4b7a      	ldr	r3, [pc, #488]	; (80017f4 <MX_ADC_Init+0x234>)
 800160c:	2200      	movs	r2, #0
 800160e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001610:	4b78      	ldr	r3, [pc, #480]	; (80017f4 <MX_ADC_Init+0x234>)
 8001612:	22c2      	movs	r2, #194	; 0xc2
 8001614:	32ff      	adds	r2, #255	; 0xff
 8001616:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001618:	4b76      	ldr	r3, [pc, #472]	; (80017f4 <MX_ADC_Init+0x234>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800161e:	4b75      	ldr	r3, [pc, #468]	; (80017f4 <MX_ADC_Init+0x234>)
 8001620:	2224      	movs	r2, #36	; 0x24
 8001622:	2100      	movs	r1, #0
 8001624:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001626:	4b73      	ldr	r3, [pc, #460]	; (80017f4 <MX_ADC_Init+0x234>)
 8001628:	2201      	movs	r2, #1
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800162c:	4b71      	ldr	r3, [pc, #452]	; (80017f4 <MX_ADC_Init+0x234>)
 800162e:	0018      	movs	r0, r3
 8001630:	f001 ff12 	bl	8003458 <HAL_ADC_Init>
 8001634:	1e03      	subs	r3, r0, #0
 8001636:	d001      	beq.n	800163c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001638:	f000 ff82 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	0152      	lsls	r2, r2, #5
 8001648:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2205      	movs	r2, #5
 800164e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001650:	1d3a      	adds	r2, r7, #4
 8001652:	4b68      	ldr	r3, [pc, #416]	; (80017f4 <MX_ADC_Init+0x234>)
 8001654:	0011      	movs	r1, r2
 8001656:	0018      	movs	r0, r3
 8001658:	f002 f9ce 	bl	80039f8 <HAL_ADC_ConfigChannel>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d001      	beq.n	8001664 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001660:	f000 ff6e 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800166a:	1d3a      	adds	r2, r7, #4
 800166c:	4b61      	ldr	r3, [pc, #388]	; (80017f4 <MX_ADC_Init+0x234>)
 800166e:	0011      	movs	r1, r2
 8001670:	0018      	movs	r0, r3
 8001672:	f002 f9c1 	bl	80039f8 <HAL_ADC_ConfigChannel>
 8001676:	1e03      	subs	r3, r0, #0
 8001678:	d001      	beq.n	800167e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800167a:	f000 ff61 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2202      	movs	r2, #2
 8001682:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001684:	1d3a      	adds	r2, r7, #4
 8001686:	4b5b      	ldr	r3, [pc, #364]	; (80017f4 <MX_ADC_Init+0x234>)
 8001688:	0011      	movs	r1, r2
 800168a:	0018      	movs	r0, r3
 800168c:	f002 f9b4 	bl	80039f8 <HAL_ADC_ConfigChannel>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8001694:	f000 ff54 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2203      	movs	r2, #3
 800169c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800169e:	1d3a      	adds	r2, r7, #4
 80016a0:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <MX_ADC_Init+0x234>)
 80016a2:	0011      	movs	r1, r2
 80016a4:	0018      	movs	r0, r3
 80016a6:	f002 f9a7 	bl	80039f8 <HAL_ADC_ConfigChannel>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d001      	beq.n	80016b2 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80016ae:	f000 ff47 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2204      	movs	r2, #4
 80016b6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016b8:	1d3a      	adds	r2, r7, #4
 80016ba:	4b4e      	ldr	r3, [pc, #312]	; (80017f4 <MX_ADC_Init+0x234>)
 80016bc:	0011      	movs	r1, r2
 80016be:	0018      	movs	r0, r3
 80016c0:	f002 f99a 	bl	80039f8 <HAL_ADC_ConfigChannel>
 80016c4:	1e03      	subs	r3, r0, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 80016c8:	f000 ff3a 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2205      	movs	r2, #5
 80016d0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016d2:	1d3a      	adds	r2, r7, #4
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <MX_ADC_Init+0x234>)
 80016d6:	0011      	movs	r1, r2
 80016d8:	0018      	movs	r0, r3
 80016da:	f002 f98d 	bl	80039f8 <HAL_ADC_ConfigChannel>
 80016de:	1e03      	subs	r3, r0, #0
 80016e0:	d001      	beq.n	80016e6 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 80016e2:	f000 ff2d 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2206      	movs	r2, #6
 80016ea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016ec:	1d3a      	adds	r2, r7, #4
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <MX_ADC_Init+0x234>)
 80016f0:	0011      	movs	r1, r2
 80016f2:	0018      	movs	r0, r3
 80016f4:	f002 f980 	bl	80039f8 <HAL_ADC_ConfigChannel>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d001      	beq.n	8001700 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 80016fc:	f000 ff20 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2207      	movs	r2, #7
 8001704:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001706:	1d3a      	adds	r2, r7, #4
 8001708:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <MX_ADC_Init+0x234>)
 800170a:	0011      	movs	r1, r2
 800170c:	0018      	movs	r0, r3
 800170e:	f002 f973 	bl	80039f8 <HAL_ADC_ConfigChannel>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8001716:	f000 ff13 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2208      	movs	r2, #8
 800171e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001720:	1d3a      	adds	r2, r7, #4
 8001722:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <MX_ADC_Init+0x234>)
 8001724:	0011      	movs	r1, r2
 8001726:	0018      	movs	r0, r3
 8001728:	f002 f966 	bl	80039f8 <HAL_ADC_ConfigChannel>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8001730:	f000 ff06 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2209      	movs	r2, #9
 8001738:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800173a:	1d3a      	adds	r2, r7, #4
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <MX_ADC_Init+0x234>)
 800173e:	0011      	movs	r1, r2
 8001740:	0018      	movs	r0, r3
 8001742:	f002 f959 	bl	80039f8 <HAL_ADC_ConfigChannel>
 8001746:	1e03      	subs	r3, r0, #0
 8001748:	d001      	beq.n	800174e <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 800174a:	f000 fef9 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	220a      	movs	r2, #10
 8001752:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001754:	1d3a      	adds	r2, r7, #4
 8001756:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <MX_ADC_Init+0x234>)
 8001758:	0011      	movs	r1, r2
 800175a:	0018      	movs	r0, r3
 800175c:	f002 f94c 	bl	80039f8 <HAL_ADC_ConfigChannel>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d001      	beq.n	8001768 <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 8001764:	f000 feec 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	220b      	movs	r2, #11
 800176c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800176e:	1d3a      	adds	r2, r7, #4
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <MX_ADC_Init+0x234>)
 8001772:	0011      	movs	r1, r2
 8001774:	0018      	movs	r0, r3
 8001776:	f002 f93f 	bl	80039f8 <HAL_ADC_ConfigChannel>
 800177a:	1e03      	subs	r3, r0, #0
 800177c:	d001      	beq.n	8001782 <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 800177e:	f000 fedf 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	220c      	movs	r2, #12
 8001786:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001788:	1d3a      	adds	r2, r7, #4
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_ADC_Init+0x234>)
 800178c:	0011      	movs	r1, r2
 800178e:	0018      	movs	r0, r3
 8001790:	f002 f932 	bl	80039f8 <HAL_ADC_ConfigChannel>
 8001794:	1e03      	subs	r3, r0, #0
 8001796:	d001      	beq.n	800179c <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 8001798:	f000 fed2 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	220d      	movs	r2, #13
 80017a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017a2:	1d3a      	adds	r2, r7, #4
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <MX_ADC_Init+0x234>)
 80017a6:	0011      	movs	r1, r2
 80017a8:	0018      	movs	r0, r3
 80017aa:	f002 f925 	bl	80039f8 <HAL_ADC_ConfigChannel>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d001      	beq.n	80017b6 <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 80017b2:	f000 fec5 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	220e      	movs	r2, #14
 80017ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017bc:	1d3a      	adds	r2, r7, #4
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <MX_ADC_Init+0x234>)
 80017c0:	0011      	movs	r1, r2
 80017c2:	0018      	movs	r0, r3
 80017c4:	f002 f918 	bl	80039f8 <HAL_ADC_ConfigChannel>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 80017cc:	f000 feb8 	bl	8002540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	220f      	movs	r2, #15
 80017d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017d6:	1d3a      	adds	r2, r7, #4
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_ADC_Init+0x234>)
 80017da:	0011      	movs	r1, r2
 80017dc:	0018      	movs	r0, r3
 80017de:	f002 f90b 	bl	80039f8 <HAL_ADC_ConfigChannel>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d001      	beq.n	80017ea <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 80017e6:	f000 feab 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b004      	add	sp, #16
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	20000210 	.word	0x20000210
 80017f8:	40012400 	.word	0x40012400

080017fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <MX_SPI1_Init+0x80>)
 8001802:	4a1f      	ldr	r2, [pc, #124]	; (8001880 <MX_SPI1_Init+0x84>)
 8001804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <MX_SPI1_Init+0x80>)
 8001808:	2282      	movs	r2, #130	; 0x82
 800180a:	0052      	lsls	r2, r2, #1
 800180c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <MX_SPI1_Init+0x80>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_SPI1_Init+0x80>)
 8001816:	22e0      	movs	r2, #224	; 0xe0
 8001818:	00d2      	lsls	r2, r2, #3
 800181a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_SPI1_Init+0x80>)
 800181e:	2202      	movs	r2, #2
 8001820:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_SPI1_Init+0x80>)
 8001824:	2201      	movs	r2, #1
 8001826:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_SPI1_Init+0x80>)
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_SPI1_Init+0x80>)
 8001832:	2230      	movs	r2, #48	; 0x30
 8001834:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_SPI1_Init+0x80>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_SPI1_Init+0x80>)
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_SPI1_Init+0x80>)
 8001844:	2200      	movs	r2, #0
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_SPI1_Init+0x80>)
 800184a:	2207      	movs	r2, #7
 800184c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <MX_SPI1_Init+0x80>)
 8001850:	2200      	movs	r2, #0
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_SPI1_Init+0x80>)
 8001856:	2200      	movs	r2, #0
 8001858:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <MX_SPI1_Init+0x80>)
 800185c:	0018      	movs	r0, r3
 800185e:	f005 fad3 	bl	8006e08 <HAL_SPI_Init>
 8001862:	1e03      	subs	r3, r0, #0
 8001864:	d001      	beq.n	800186a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001866:	f000 fe6b 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_SPI1_Init+0x88>)
 800186c:	2201      	movs	r2, #1
 800186e:	2140      	movs	r1, #64	; 0x40
 8001870:	0018      	movs	r0, r3
 8001872:	f002 fe02 	bl	800447a <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000250 	.word	0x20000250
 8001880:	40013000 	.word	0x40013000
 8001884:	48000400 	.word	0x48000400

08001888 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	0018      	movs	r0, r3
 8001892:	231c      	movs	r3, #28
 8001894:	001a      	movs	r2, r3
 8001896:	2100      	movs	r1, #0
 8001898:	f00b ff6d 	bl	800d776 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MX_TIM14_Init+0x8c>)
 800189e:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <MX_TIM14_Init+0x90>)
 80018a0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <MX_TIM14_Init+0x8c>)
 80018a4:	220f      	movs	r2, #15
 80018a6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_TIM14_Init+0x8c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <MX_TIM14_Init+0x8c>)
 80018b0:	4a1a      	ldr	r2, [pc, #104]	; (800191c <MX_TIM14_Init+0x94>)
 80018b2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_TIM14_Init+0x8c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <MX_TIM14_Init+0x8c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MX_TIM14_Init+0x8c>)
 80018c2:	0018      	movs	r0, r3
 80018c4:	f005 fff8 	bl	80078b8 <HAL_TIM_Base_Init>
 80018c8:	1e03      	subs	r3, r0, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80018cc:	f000 fe38 	bl	8002540 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80018d0:	4b10      	ldr	r3, [pc, #64]	; (8001914 <MX_TIM14_Init+0x8c>)
 80018d2:	0018      	movs	r0, r3
 80018d4:	f006 f892 	bl	80079fc <HAL_TIM_OC_Init>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80018dc:	f000 fe30 	bl	8002540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f8:	1d39      	adds	r1, r7, #4
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_TIM14_Init+0x8c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	0018      	movs	r0, r3
 8001900:	f006 f9ea 	bl	8007cd8 <HAL_TIM_OC_ConfigChannel>
 8001904:	1e03      	subs	r3, r0, #0
 8001906:	d001      	beq.n	800190c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001908:	f000 fe1a 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b008      	add	sp, #32
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200002b4 	.word	0x200002b4
 8001918:	40002000 	.word	0x40002000
 800191c:	0000270f 	.word	0x0000270f

08001920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001926:	4a15      	ldr	r2, [pc, #84]	; (800197c <MX_USART3_UART_Init+0x5c>)
 8001928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_USART3_UART_Init+0x58>)
 800192c:	2296      	movs	r2, #150	; 0x96
 800192e:	0212      	lsls	r2, r2, #8
 8001930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_USART3_UART_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_USART3_UART_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_USART3_UART_Init+0x58>)
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001964:	0018      	movs	r0, r3
 8001966:	f006 fcbb 	bl	80082e0 <HAL_UART_Init>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d001      	beq.n	8001972 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800196e:	f000 fde7 	bl	8002540 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200002fc 	.word	0x200002fc
 800197c:	40004800 	.word	0x40004800

08001980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b08b      	sub	sp, #44	; 0x2c
 8001984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	2414      	movs	r4, #20
 8001988:	193b      	adds	r3, r7, r4
 800198a:	0018      	movs	r0, r3
 800198c:	2314      	movs	r3, #20
 800198e:	001a      	movs	r2, r3
 8001990:	2100      	movs	r1, #0
 8001992:	f00b fef0 	bl	800d776 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001996:	4b74      	ldr	r3, [pc, #464]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	03c9      	lsls	r1, r1, #15
 80019a0:	430a      	orrs	r2, r1
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	4b70      	ldr	r3, [pc, #448]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	03db      	lsls	r3, r3, #15
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	4b6d      	ldr	r3, [pc, #436]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	4b6c      	ldr	r3, [pc, #432]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	0309      	lsls	r1, r1, #12
 80019bc:	430a      	orrs	r2, r1
 80019be:	615a      	str	r2, [r3, #20]
 80019c0:	4b69      	ldr	r3, [pc, #420]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	031b      	lsls	r3, r3, #12
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	4b66      	ldr	r3, [pc, #408]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	0289      	lsls	r1, r1, #10
 80019d8:	430a      	orrs	r2, r1
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	029b      	lsls	r3, r3, #10
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	02c9      	lsls	r1, r1, #11
 80019f4:	430a      	orrs	r2, r1
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	02db      	lsls	r3, r3, #11
 8001a00:	4013      	ands	r3, r2
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a06:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	0349      	lsls	r1, r1, #13
 8001a10:	430a      	orrs	r2, r1
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <MX_GPIO_Init+0x1e8>)
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	035b      	lsls	r3, r3, #13
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|SR_CLR_Pin|SR_RCLK_Pin|SR_OE_Pin
 8001a22:	4952      	ldr	r1, [pc, #328]	; (8001b6c <MX_GPIO_Init+0x1ec>)
 8001a24:	4b52      	ldr	r3, [pc, #328]	; (8001b70 <MX_GPIO_Init+0x1f0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f002 fd26 	bl	800447a <HAL_GPIO_WritePin>
                          |DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin|BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001a2e:	239e      	movs	r3, #158	; 0x9e
 8001a30:	015b      	lsls	r3, r3, #5
 8001a32:	4850      	ldr	r0, [pc, #320]	; (8001b74 <MX_GPIO_Init+0x1f4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	0019      	movs	r1, r3
 8001a38:	f002 fd1f 	bl	800447a <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	0219      	lsls	r1, r3, #8
 8001a40:	2390      	movs	r3, #144	; 0x90
 8001a42:	05db      	lsls	r3, r3, #23
 8001a44:	2200      	movs	r2, #0
 8001a46:	0018      	movs	r0, r3
 8001a48:	f002 fd17 	bl	800447a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin SR_CLR_Pin SR_RCLK_Pin SR_OE_Pin
                           DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|SR_CLR_Pin|SR_RCLK_Pin|SR_OE_Pin
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	4a47      	ldr	r2, [pc, #284]	; (8001b6c <MX_GPIO_Init+0x1ec>)
 8001a50:	601a      	str	r2, [r3, #0]
                          |DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin|BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	2201      	movs	r2, #1
 8001a56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	193b      	adds	r3, r7, r4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	4a42      	ldr	r2, [pc, #264]	; (8001b70 <MX_GPIO_Init+0x1f0>)
 8001a68:	0019      	movs	r1, r3
 8001a6a:	0010      	movs	r0, r2
 8001a6c:	f002 fb70 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEATER_STATE_Pin */
  GPIO_InitStruct.Pin = HEATER_STATE_Pin;
 8001a70:	0021      	movs	r1, r4
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	0152      	lsls	r2, r2, #5
 8001a78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7a:	000c      	movs	r4, r1
 8001a7c:	193b      	adds	r3, r7, r4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	193b      	adds	r3, r7, r4
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HEATER_STATE_GPIO_Port, &GPIO_InitStruct);
 8001a88:	193b      	adds	r3, r7, r4
 8001a8a:	4a39      	ldr	r2, [pc, #228]	; (8001b70 <MX_GPIO_Init+0x1f0>)
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	0010      	movs	r0, r2
 8001a90:	f002 fb5e 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001a94:	0021      	movs	r1, r4
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	229e      	movs	r2, #158	; 0x9e
 8001a9a:	0152      	lsls	r2, r2, #5
 8001a9c:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	000c      	movs	r4, r1
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	193b      	adds	r3, r7, r4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	4a2f      	ldr	r2, [pc, #188]	; (8001b74 <MX_GPIO_Init+0x1f4>)
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	0010      	movs	r0, r2
 8001aba:	f002 fb49 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	22c0      	movs	r2, #192	; 0xc0
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ac6:	193b      	adds	r3, r7, r4
 8001ac8:	2288      	movs	r2, #136	; 0x88
 8001aca:	0352      	lsls	r2, r2, #13
 8001acc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	193a      	adds	r2, r7, r4
 8001ad6:	2390      	movs	r3, #144	; 0x90
 8001ad8:	05db      	lsls	r3, r3, #23
 8001ada:	0011      	movs	r1, r2
 8001adc:	0018      	movs	r0, r3
 8001ade:	f002 fb37 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ae2:	193b      	adds	r3, r7, r4
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	00d2      	lsls	r2, r2, #3
 8001ae8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aea:	193b      	adds	r3, r7, r4
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	193b      	adds	r3, r7, r4
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001af6:	193a      	adds	r2, r7, r4
 8001af8:	2390      	movs	r3, #144	; 0x90
 8001afa:	05db      	lsls	r3, r3, #23
 8001afc:	0011      	movs	r1, r2
 8001afe:	0018      	movs	r0, r3
 8001b00:	f002 fb26 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8001b04:	0021      	movs	r1, r4
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	0212      	lsls	r2, r2, #8
 8001b0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	000c      	movs	r4, r1
 8001b10:	193b      	adds	r3, r7, r4
 8001b12:	2201      	movs	r2, #1
 8001b14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	193b      	adds	r3, r7, r4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8001b22:	193a      	adds	r2, r7, r4
 8001b24:	2390      	movs	r3, #144	; 0x90
 8001b26:	05db      	lsls	r3, r3, #23
 8001b28:	0011      	movs	r1, r2
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f002 fb10 	bl	8004150 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8001b30:	193b      	adds	r3, r7, r4
 8001b32:	2204      	movs	r2, #4
 8001b34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	193b      	adds	r3, r7, r4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	193b      	adds	r3, r7, r4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <MX_GPIO_Init+0x1f8>)
 8001b46:	0019      	movs	r1, r3
 8001b48:	0010      	movs	r0, r2
 8001b4a:	f002 fb01 	bl	8004150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2007      	movs	r0, #7
 8001b54:	f002 fa4c 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001b58:	2007      	movs	r0, #7
 8001b5a:	f002 fa5e 	bl	800401a <HAL_NVIC_EnableIRQ>

}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b00b      	add	sp, #44	; 0x2c
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	0000e3c4 	.word	0x0000e3c4
 8001b70:	48000400 	.word	0x48000400
 8001b74:	48000800 	.word	0x48000800
 8001b78:	48000c00 	.word	0x48000c00

08001b7c <clkHandler>:

/* USER CODE BEGIN 4 */

//_____Hodiny_____//
 void clkHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	//___nulování všech flagů___//
	flags.time.ten_ms = 0;
 8001b80:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <clkHandler+0xf4>)
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	438a      	bics	r2, r1
 8001b88:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 8001b8a:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <clkHandler+0xf4>)
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	2102      	movs	r1, #2
 8001b90:	438a      	bics	r2, r1
 8001b92:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8001b94:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <clkHandler+0xf4>)
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	2104      	movs	r1, #4
 8001b9a:	438a      	bics	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <clkHandler+0xf4>)
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	701a      	strb	r2, [r3, #0]

	sysTime[SYSTIME_TEN_MS]++;	//uplynulo dalších 10 ms
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <clkHandler+0xf8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <clkHandler+0xf8>)
 8001bb0:	601a      	str	r2, [r3, #0]

#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 8001bb2:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <clkHandler+0xf8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2164      	movs	r1, #100	; 0x64
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7fe fb3d 	bl	8000238 <__aeabi_uidivmod>
 8001bbe:	1e0b      	subs	r3, r1, #0
 8001bc0:	d109      	bne.n	8001bd6 <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <clkHandler+0xf8>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <clkHandler+0xf8>)
 8001bca:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <clkHandler+0xf4>)
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)	//Uplynula 1 s
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <clkHandler+0xf4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	079b      	lsls	r3, r3, #30
 8001bdc:	0fdb      	lsrs	r3, r3, #31
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d042      	beq.n	8001c6a <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <clkHandler+0xf8>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	213c      	movs	r1, #60	; 0x3c
 8001bea:	0018      	movs	r0, r3
 8001bec:	f7fe fb24 	bl	8000238 <__aeabi_uidivmod>
 8001bf0:	1e0b      	subs	r3, r1, #0
 8001bf2:	d110      	bne.n	8001c16 <clkHandler+0x9a>
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <clkHandler+0xf8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00c      	beq.n	8001c16 <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <clkHandler+0xf8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <clkHandler+0xf8>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <clkHandler+0xf8>)
 8001c0a:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <clkHandler+0xf4>)
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	2104      	movs	r1, #4
 8001c12:	430a      	orrs	r2, r1
 8001c14:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)	//Uplynula 1 min
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <clkHandler+0xf4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	075b      	lsls	r3, r3, #29
 8001c1c:	0fdb      	lsrs	r3, r3, #31
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d022      	beq.n	8001c6a <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <clkHandler+0xf8>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	213c      	movs	r1, #60	; 0x3c
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7fe fb04 	bl	8000238 <__aeabi_uidivmod>
 8001c30:	1e0b      	subs	r3, r1, #0
 8001c32:	d11a      	bne.n	8001c6a <clkHandler+0xee>
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <clkHandler+0xf8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d016      	beq.n	8001c6a <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <clkHandler+0xf8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <clkHandler+0xf8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <clkHandler+0xf8>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <clkHandler+0xf8>)
 8001c50:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <clkHandler+0xf4>)
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	2108      	movs	r1, #8
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <clkHandler+0xf8>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b16      	cmp	r3, #22
 8001c62:	d902      	bls.n	8001c6a <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <clkHandler+0xf8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli �?as
	}
#endif
}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200003d0 	.word	0x200003d0
 8001c74:	200003c0 	.word	0x200003c0

08001c78 <buttonDebounce>:

//_____Debounce tla�?ítek_____//
 void buttonDebounce(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	//___nulování flagů___//
	flags.buttons.butt0_ver = 0;
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <buttonDebounce+0x104>)
 8001c7e:	791a      	ldrb	r2, [r3, #4]
 8001c80:	2102      	movs	r1, #2
 8001c82:	438a      	bics	r2, r1
 8001c84:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <buttonDebounce+0x104>)
 8001c88:	791a      	ldrb	r2, [r3, #4]
 8001c8a:	2108      	movs	r1, #8
 8001c8c:	438a      	bics	r2, r1
 8001c8e:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)	//interrupt tla�?ítka 0
 8001c90:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <buttonDebounce+0x104>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	07db      	lsls	r3, r3, #31
 8001c96:	0fdb      	lsrs	r3, r3, #31
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d031      	beq.n	8001d02 <buttonDebounce+0x8a>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	009a      	lsls	r2, r3, #2
 8001ca2:	2390      	movs	r3, #144	; 0x90
 8001ca4:	05db      	lsls	r3, r3, #23
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f002 fbc9 	bl	8004440 <HAL_GPIO_ReadPin>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 8001cb4:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <buttonDebounce+0x108>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <buttonDebounce+0x108>)
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e007      	b.n	8001cd4 <buttonDebounce+0x5c>
		}
		else	//pin tla�?ítka na Low -> šlo o zákmit
		{
			button0_Debounce = 0;
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <buttonDebounce+0x108>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <buttonDebounce+0x104>)
 8001ccc:	791a      	ldrb	r2, [r3, #4]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)	//pin tla�?ítka na High 5*10 ms -> ustálený stisk
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	; (8001d80 <buttonDebounce+0x108>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d911      	bls.n	8001d02 <buttonDebounce+0x8a>
		{
			flags.buttons.butt0_ver = 1;
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <buttonDebounce+0x104>)
 8001ce0:	791a      	ldrb	r2, [r3, #4]
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <buttonDebounce+0x104>)
 8001cea:	791a      	ldrb	r2, [r3, #4]
 8001cec:	2101      	movs	r1, #1
 8001cee:	438a      	bics	r2, r1
 8001cf0:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <buttonDebounce+0x108>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <buttonDebounce+0x104>)
 8001cfa:	7c1a      	ldrb	r2, [r3, #16]
 8001cfc:	2120      	movs	r1, #32
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	741a      	strb	r2, [r3, #16]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)	//interrupt tla�?ítka 1
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <buttonDebounce+0x104>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	075b      	lsls	r3, r3, #29
 8001d08:	0fdb      	lsrs	r3, r3, #31
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d031      	beq.n	8001d74 <buttonDebounce+0xfc>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	005a      	lsls	r2, r3, #1
 8001d14:	2390      	movs	r3, #144	; 0x90
 8001d16:	05db      	lsls	r3, r3, #23
 8001d18:	0011      	movs	r1, r2
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f002 fb90 	bl	8004440 <HAL_GPIO_ReadPin>
 8001d20:	0003      	movs	r3, r0
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <buttonDebounce+0xbe>
		{
			button1_Debounce++;
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <buttonDebounce+0x10c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <buttonDebounce+0x10c>)
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e007      	b.n	8001d46 <buttonDebounce+0xce>
		}
		else	//pin tla�?ítka na Low -> šlo o zákmit
		{
			button1_Debounce = 0;
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <buttonDebounce+0x10c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <buttonDebounce+0x104>)
 8001d3e:	791a      	ldrb	r2, [r3, #4]
 8001d40:	2104      	movs	r1, #4
 8001d42:	438a      	bics	r2, r1
 8001d44:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)	//pin tla�?ítka na High 5*10 ms -> ustálený stisk
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <buttonDebounce+0x10c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d911      	bls.n	8001d74 <buttonDebounce+0xfc>
		{
			flags.buttons.butt1_ver = 1;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <buttonDebounce+0x104>)
 8001d52:	791a      	ldrb	r2, [r3, #4]
 8001d54:	2108      	movs	r1, #8
 8001d56:	430a      	orrs	r2, r1
 8001d58:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <buttonDebounce+0x104>)
 8001d5c:	791a      	ldrb	r2, [r3, #4]
 8001d5e:	2104      	movs	r1, #4
 8001d60:	438a      	bics	r2, r1
 8001d62:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <buttonDebounce+0x10c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <buttonDebounce+0x104>)
 8001d6c:	7c1a      	ldrb	r2, [r3, #16]
 8001d6e:	2120      	movs	r1, #32
 8001d70:	430a      	orrs	r2, r1
 8001d72:	741a      	strb	r2, [r3, #16]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	200003d0 	.word	0x200003d0
 8001d80:	200003ec 	.word	0x200003ec
 8001d84:	200003ed 	.word	0x200003ed

08001d88 <dispHandler>:

//_____Obsluha výtisků textu na displej_____//
 void dispHandler()
{
 8001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8a:	b0bd      	sub	sp, #244	; 0xf4
 8001d8c:	af02      	add	r7, sp, #8
	char emptyString[] = "                ";
 8001d8e:	25cc      	movs	r5, #204	; 0xcc
 8001d90:	197b      	adds	r3, r7, r5
 8001d92:	4ada      	ldr	r2, [pc, #872]	; (80020fc <dispHandler+0x374>)
 8001d94:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d96:	c313      	stmia	r3!, {r0, r1, r4}
 8001d98:	6811      	ldr	r1, [r2, #0]
 8001d9a:	6019      	str	r1, [r3, #0]
 8001d9c:	7912      	ldrb	r2, [r2, #4]
 8001d9e:	711a      	strb	r2, [r3, #4]
	char* strings[4] = {emptyString};
 8001da0:	24bc      	movs	r4, #188	; 0xbc
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	0018      	movs	r0, r3
 8001da6:	2310      	movs	r3, #16
 8001da8:	001a      	movs	r2, r3
 8001daa:	2100      	movs	r1, #0
 8001dac:	f00b fce3 	bl	800d776 <memset>
 8001db0:	193b      	adds	r3, r7, r4
 8001db2:	197a      	adds	r2, r7, r5
 8001db4:	601a      	str	r2, [r3, #0]
	ALIGN align[4] = {CENTER};
 8001db6:	25b8      	movs	r5, #184	; 0xb8
 8001db8:	197b      	adds	r3, r7, r5
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	197b      	adds	r3, r7, r5
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	701a      	strb	r2, [r3, #0]
		strings[3] = ADC_value;
		writeRow(strings[3], strlen(strings[3]), 3, align[3]);
	}
#endif

	if(flags.testProgress && !flags.instructions.stopRequest)
 8001dc4:	4bce      	ldr	r3, [pc, #824]	; (8002100 <dispHandler+0x378>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	079b      	lsls	r3, r3, #30
 8001dca:	0fdb      	lsrs	r3, r3, #31
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d100      	bne.n	8001dd4 <dispHandler+0x4c>
 8001dd2:	e0f6      	b.n	8001fc2 <dispHandler+0x23a>
 8001dd4:	4bca      	ldr	r3, [pc, #808]	; (8002100 <dispHandler+0x378>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	079b      	lsls	r3, r3, #30
 8001dda:	0fdb      	lsrs	r3, r3, #31
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d000      	beq.n	8001de4 <dispHandler+0x5c>
 8001de2:	e0ee      	b.n	8001fc2 <dispHandler+0x23a>
	{
		if(currentPhase() != WAITING)
 8001de4:	f000 ffa8 	bl	8002d38 <currentPhase>
 8001de8:	1e03      	subs	r3, r0, #0
 8001dea:	d010      	beq.n	8001e0e <dispHandler+0x86>
		{
			char supplyInTestingNum[6];
			sprintf(supplyInTestingNum, "%d/%d", supplyToTest+1, regCount);
 8001dec:	4bc5      	ldr	r3, [pc, #788]	; (8002104 <dispHandler+0x37c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	4bc4      	ldr	r3, [pc, #784]	; (8002108 <dispHandler+0x380>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	49c4      	ldr	r1, [pc, #784]	; (800210c <dispHandler+0x384>)
 8001dfa:	26b0      	movs	r6, #176	; 0xb0
 8001dfc:	19b8      	adds	r0, r7, r6
 8001dfe:	f00b fdb7 	bl	800d970 <siprintf>

			strings[0] = supplyInTestingNum;
 8001e02:	193b      	adds	r3, r7, r4
 8001e04:	19ba      	adds	r2, r7, r6
 8001e06:	601a      	str	r2, [r3, #0]
			align[0] = LEFT;
 8001e08:	197b      	adds	r3, r7, r5
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
		}

		switch(currentPhase())
 8001e0e:	f000 ff93 	bl	8002d38 <currentPhase>
 8001e12:	0003      	movs	r3, r0
 8001e14:	2b06      	cmp	r3, #6
 8001e16:	d900      	bls.n	8001e1a <dispHandler+0x92>
 8001e18:	e087      	b.n	8001f2a <dispHandler+0x1a2>
 8001e1a:	009a      	lsls	r2, r3, #2
 8001e1c:	4bbc      	ldr	r3, [pc, #752]	; (8002110 <dispHandler+0x388>)
 8001e1e:	18d3      	adds	r3, r2, r3
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	469f      	mov	pc, r3
		{
		case START:
		{
			char start1[] = "Spousteni";
 8001e24:	21a4      	movs	r1, #164	; 0xa4
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	4aba      	ldr	r2, [pc, #744]	; (8002114 <dispHandler+0x38c>)
 8001e2a:	ca11      	ldmia	r2!, {r0, r4}
 8001e2c:	c311      	stmia	r3!, {r0, r4}
 8001e2e:	8812      	ldrh	r2, [r2, #0]
 8001e30:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001e32:	23bc      	movs	r3, #188	; 0xbc
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	187a      	adds	r2, r7, r1
 8001e38:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001e3a:	23b8      	movs	r3, #184	; 0xb8
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	2202      	movs	r2, #2
 8001e40:	705a      	strb	r2, [r3, #1]

			break;
 8001e42:	e091      	b.n	8001f68 <dispHandler+0x1e0>
		}
		case START_DONE:
		{
			char start1[] = "Spousteni";
 8001e44:	2198      	movs	r1, #152	; 0x98
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	4ab2      	ldr	r2, [pc, #712]	; (8002114 <dispHandler+0x38c>)
 8001e4a:	ca11      	ldmia	r2!, {r0, r4}
 8001e4c:	c311      	stmia	r3!, {r0, r4}
 8001e4e:	8812      	ldrh	r2, [r2, #0]
 8001e50:	801a      	strh	r2, [r3, #0]
			char start2[] = "dokonceno";
 8001e52:	208c      	movs	r0, #140	; 0x8c
 8001e54:	183b      	adds	r3, r7, r0
 8001e56:	4ab0      	ldr	r2, [pc, #704]	; (8002118 <dispHandler+0x390>)
 8001e58:	ca30      	ldmia	r2!, {r4, r5}
 8001e5a:	c330      	stmia	r3!, {r4, r5}
 8001e5c:	8812      	ldrh	r2, [r2, #0]
 8001e5e:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001e60:	24bc      	movs	r4, #188	; 0xbc
 8001e62:	193b      	adds	r3, r7, r4
 8001e64:	187a      	adds	r2, r7, r1
 8001e66:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001e68:	21b8      	movs	r1, #184	; 0xb8
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	705a      	strb	r2, [r3, #1]
			strings[2] = start2;
 8001e70:	193b      	adds	r3, r7, r4
 8001e72:	183a      	adds	r2, r7, r0
 8001e74:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	2202      	movs	r2, #2
 8001e7a:	709a      	strb	r2, [r3, #2]
			break;
 8001e7c:	e074      	b.n	8001f68 <dispHandler+0x1e0>
		}
		case MAIN_TEST:
		{
			char main1[] = "Hlavni test";
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	4aa6      	ldr	r2, [pc, #664]	; (800211c <dispHandler+0x394>)
 8001e84:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001e86:	c331      	stmia	r3!, {r0, r4, r5}
			strings[1] = main1;
 8001e88:	23bc      	movs	r3, #188	; 0xbc
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	187a      	adds	r2, r7, r1
 8001e8e:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001e90:	23b8      	movs	r3, #184	; 0xb8
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2202      	movs	r2, #2
 8001e96:	705a      	strb	r2, [r3, #1]
			break;
 8001e98:	e066      	b.n	8001f68 <dispHandler+0x1e0>
		}
		case MAIN_TEST_DONE:
		{
			char main1[] = "Hlavni test";
 8001e9a:	2174      	movs	r1, #116	; 0x74
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	4a9f      	ldr	r2, [pc, #636]	; (800211c <dispHandler+0x394>)
 8001ea0:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001ea2:	c331      	stmia	r3!, {r0, r4, r5}
			char main2[] = "dokoncen";
 8001ea4:	2068      	movs	r0, #104	; 0x68
 8001ea6:	183b      	adds	r3, r7, r0
 8001ea8:	4a9d      	ldr	r2, [pc, #628]	; (8002120 <dispHandler+0x398>)
 8001eaa:	ca30      	ldmia	r2!, {r4, r5}
 8001eac:	c330      	stmia	r3!, {r4, r5}
 8001eae:	7812      	ldrb	r2, [r2, #0]
 8001eb0:	701a      	strb	r2, [r3, #0]
			strings[1] = main1;
 8001eb2:	24bc      	movs	r4, #188	; 0xbc
 8001eb4:	193b      	adds	r3, r7, r4
 8001eb6:	187a      	adds	r2, r7, r1
 8001eb8:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001eba:	21b8      	movs	r1, #184	; 0xb8
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	705a      	strb	r2, [r3, #1]
			strings[2] = main2;
 8001ec2:	193b      	adds	r3, r7, r4
 8001ec4:	183a      	adds	r2, r7, r0
 8001ec6:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	2202      	movs	r2, #2
 8001ecc:	709a      	strb	r2, [r3, #2]
			break;
 8001ece:	e04b      	b.n	8001f68 <dispHandler+0x1e0>
		}
		case BATTERY_TEST:
		{
			char bat1[] = "Test baterie";
 8001ed0:	2158      	movs	r1, #88	; 0x58
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	4a93      	ldr	r2, [pc, #588]	; (8002124 <dispHandler+0x39c>)
 8001ed6:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001ed8:	c331      	stmia	r3!, {r0, r4, r5}
 8001eda:	7812      	ldrb	r2, [r2, #0]
 8001edc:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001ede:	23bc      	movs	r3, #188	; 0xbc
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	187a      	adds	r2, r7, r1
 8001ee4:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001ee6:	23b8      	movs	r3, #184	; 0xb8
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	2202      	movs	r2, #2
 8001eec:	705a      	strb	r2, [r3, #1]
			break;
 8001eee:	e03b      	b.n	8001f68 <dispHandler+0x1e0>
		}
		case BATTERY_TEST_DONE:
		{
			char bat1[] = "Test baterie";
 8001ef0:	2148      	movs	r1, #72	; 0x48
 8001ef2:	187b      	adds	r3, r7, r1
 8001ef4:	4a8b      	ldr	r2, [pc, #556]	; (8002124 <dispHandler+0x39c>)
 8001ef6:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001ef8:	c331      	stmia	r3!, {r0, r4, r5}
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	701a      	strb	r2, [r3, #0]
			char bat2[] = "dokoncen";
 8001efe:	203c      	movs	r0, #60	; 0x3c
 8001f00:	183b      	adds	r3, r7, r0
 8001f02:	4a87      	ldr	r2, [pc, #540]	; (8002120 <dispHandler+0x398>)
 8001f04:	ca30      	ldmia	r2!, {r4, r5}
 8001f06:	c330      	stmia	r3!, {r4, r5}
 8001f08:	7812      	ldrb	r2, [r2, #0]
 8001f0a:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001f0c:	24bc      	movs	r4, #188	; 0xbc
 8001f0e:	193b      	adds	r3, r7, r4
 8001f10:	187a      	adds	r2, r7, r1
 8001f12:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001f14:	21b8      	movs	r1, #184	; 0xb8
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	2202      	movs	r2, #2
 8001f1a:	705a      	strb	r2, [r3, #1]
			strings[2] = bat2;
 8001f1c:	193b      	adds	r3, r7, r4
 8001f1e:	183a      	adds	r2, r7, r0
 8001f20:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001f22:	187b      	adds	r3, r7, r1
 8001f24:	2202      	movs	r2, #2
 8001f26:	709a      	strb	r2, [r3, #2]
			break;
 8001f28:	e01e      	b.n	8001f68 <dispHandler+0x1e0>
		}
		default:
		{
			char default1[] = "Zahoreni";
 8001f2a:	2030      	movs	r0, #48	; 0x30
 8001f2c:	183b      	adds	r3, r7, r0
 8001f2e:	4a7e      	ldr	r2, [pc, #504]	; (8002128 <dispHandler+0x3a0>)
 8001f30:	ca12      	ldmia	r2!, {r1, r4}
 8001f32:	c312      	stmia	r3!, {r1, r4}
 8001f34:	7812      	ldrb	r2, [r2, #0]
 8001f36:	701a      	strb	r2, [r3, #0]
			char default2[] = "zdroju";
 8001f38:	2428      	movs	r4, #40	; 0x28
 8001f3a:	193b      	adds	r3, r7, r4
 8001f3c:	4a7b      	ldr	r2, [pc, #492]	; (800212c <dispHandler+0x3a4>)
 8001f3e:	6811      	ldr	r1, [r2, #0]
 8001f40:	6019      	str	r1, [r3, #0]
 8001f42:	8891      	ldrh	r1, [r2, #4]
 8001f44:	8099      	strh	r1, [r3, #4]
 8001f46:	7992      	ldrb	r2, [r2, #6]
 8001f48:	719a      	strb	r2, [r3, #6]
			strings[1] = default1;
 8001f4a:	21bc      	movs	r1, #188	; 0xbc
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	183a      	adds	r2, r7, r0
 8001f50:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001f52:	20b8      	movs	r0, #184	; 0xb8
 8001f54:	183b      	adds	r3, r7, r0
 8001f56:	2202      	movs	r2, #2
 8001f58:	705a      	strb	r2, [r3, #1]
			strings[2] = default2;
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	193a      	adds	r2, r7, r4
 8001f5e:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001f60:	183b      	adds	r3, r7, r0
 8001f62:	2202      	movs	r2, #2
 8001f64:	709a      	strb	r2, [r3, #2]

			break;
 8001f66:	46c0      	nop			; (mov r8, r8)
		}
		}

		for(int i = 0; i < 4; i++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	22e4      	movs	r2, #228	; 0xe4
 8001f6c:	18ba      	adds	r2, r7, r2
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	e022      	b.n	8001fb8 <dispHandler+0x230>
		{
			writeRow(strings[i], strlen(strings[i]), i, align[i]);
 8001f72:	21bc      	movs	r1, #188	; 0xbc
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	25e4      	movs	r5, #228	; 0xe4
 8001f78:	197a      	adds	r2, r7, r5
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	58d4      	ldr	r4, [r2, r3]
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	197a      	adds	r2, r7, r5
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	58d3      	ldr	r3, [r2, r3]
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7fe f8bc 	bl	8000108 <strlen>
 8001f90:	0003      	movs	r3, r0
 8001f92:	b2d9      	uxtb	r1, r3
 8001f94:	197b      	adds	r3, r7, r5
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	b2d8      	uxtb	r0, r3
 8001f9a:	23b8      	movs	r3, #184	; 0xb8
 8001f9c:	18fa      	adds	r2, r7, r3
 8001f9e:	197b      	adds	r3, r7, r5
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	18d3      	adds	r3, r2, r3
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	0020      	movs	r0, r4
 8001faa:	f7ff f893 	bl	80010d4 <writeRow>
		for(int i = 0; i < 4; i++)
 8001fae:	197b      	adds	r3, r7, r5
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	197a      	adds	r2, r7, r5
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	23e4      	movs	r3, #228	; 0xe4
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	ddd7      	ble.n	8001f72 <dispHandler+0x1ea>
		}
	}

	//_____Zobrazení �?asu u hlavních testů_____//
	if(flags.time.sec)
 8001fc2:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <dispHandler+0x378>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	079b      	lsls	r3, r3, #30
 8001fc8:	0fdb      	lsrs	r3, r3, #31
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d051      	beq.n	8002074 <dispHandler+0x2ec>
	{
		switch(currentPhase())
 8001fd0:	f000 feb2 	bl	8002d38 <currentPhase>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d002      	beq.n	8001fe0 <dispHandler+0x258>
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d028      	beq.n	8002030 <dispHandler+0x2a8>
			sprintf(time, "%lu:%lu", 14-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
			writeRow(time, strlen(time), 2, CENTER);
			break;
		}
		default:
			break;
 8001fde:	e04a      	b.n	8002076 <dispHandler+0x2ee>
			char time[9] = {0};
 8001fe0:	251c      	movs	r5, #28
 8001fe2:	197b      	adds	r3, r7, r5
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2205      	movs	r2, #5
 8001fec:	2100      	movs	r1, #0
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f00b fbc1 	bl	800d776 <memset>
			sprintf(time, "%lu:%lu:%lu", 2-sysTime[SYSTIME_HOUR], 59-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
 8001ff4:	4b4e      	ldr	r3, [pc, #312]	; (8002130 <dispHandler+0x3a8>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	1ad2      	subs	r2, r2, r3
 8001ffc:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <dispHandler+0x3a8>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	213b      	movs	r1, #59	; 0x3b
 8002002:	1acc      	subs	r4, r1, r3
 8002004:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <dispHandler+0x3a8>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	213b      	movs	r1, #59	; 0x3b
 800200a:	1acb      	subs	r3, r1, r3
 800200c:	4949      	ldr	r1, [pc, #292]	; (8002134 <dispHandler+0x3ac>)
 800200e:	1978      	adds	r0, r7, r5
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	0023      	movs	r3, r4
 8002014:	f00b fcac 	bl	800d970 <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 8002018:	197b      	adds	r3, r7, r5
 800201a:	0018      	movs	r0, r3
 800201c:	f7fe f874 	bl	8000108 <strlen>
 8002020:	0003      	movs	r3, r0
 8002022:	b2d9      	uxtb	r1, r3
 8002024:	1978      	adds	r0, r7, r5
 8002026:	2302      	movs	r3, #2
 8002028:	2202      	movs	r2, #2
 800202a:	f7ff f853 	bl	80010d4 <writeRow>
			break;
 800202e:	e022      	b.n	8002076 <dispHandler+0x2ee>
			char time[9] = {0};
 8002030:	2410      	movs	r4, #16
 8002032:	193b      	adds	r3, r7, r4
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	3304      	adds	r3, #4
 800203a:	2205      	movs	r2, #5
 800203c:	2100      	movs	r1, #0
 800203e:	0018      	movs	r0, r3
 8002040:	f00b fb99 	bl	800d776 <memset>
			sprintf(time, "%lu:%lu", 14-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
 8002044:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <dispHandler+0x3a8>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	220e      	movs	r2, #14
 800204a:	1ad2      	subs	r2, r2, r3
 800204c:	4b38      	ldr	r3, [pc, #224]	; (8002130 <dispHandler+0x3a8>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	213b      	movs	r1, #59	; 0x3b
 8002052:	1acb      	subs	r3, r1, r3
 8002054:	4938      	ldr	r1, [pc, #224]	; (8002138 <dispHandler+0x3b0>)
 8002056:	1938      	adds	r0, r7, r4
 8002058:	f00b fc8a 	bl	800d970 <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 800205c:	193b      	adds	r3, r7, r4
 800205e:	0018      	movs	r0, r3
 8002060:	f7fe f852 	bl	8000108 <strlen>
 8002064:	0003      	movs	r3, r0
 8002066:	b2d9      	uxtb	r1, r3
 8002068:	1938      	adds	r0, r7, r4
 800206a:	2302      	movs	r3, #2
 800206c:	2202      	movs	r2, #2
 800206e:	f7ff f831 	bl	80010d4 <writeRow>
			break;
 8002072:	e000      	b.n	8002076 <dispHandler+0x2ee>
		}
	}
 8002074:	46c0      	nop			; (mov r8, r8)

	if(flags.instructions.stopRequest || flags.testCanceled)
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <dispHandler+0x378>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	079b      	lsls	r3, r3, #30
 800207c:	0fdb      	lsrs	r3, r3, #31
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d106      	bne.n	8002092 <dispHandler+0x30a>
 8002084:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <dispHandler+0x378>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	075b      	lsls	r3, r3, #29
 800208a:	0fdb      	lsrs	r3, r3, #31
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d030      	beq.n	80020f4 <dispHandler+0x36c>
	{
		char err[] = "Preruseni";
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4a29      	ldr	r2, [pc, #164]	; (800213c <dispHandler+0x3b4>)
 8002096:	ca03      	ldmia	r2!, {r0, r1}
 8002098:	c303      	stmia	r3!, {r0, r1}
 800209a:	8812      	ldrh	r2, [r2, #0]
 800209c:	801a      	strh	r2, [r3, #0]
		strings[1] = err;
 800209e:	23bc      	movs	r3, #188	; 0xbc
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	1d3a      	adds	r2, r7, #4
 80020a4:	605a      	str	r2, [r3, #4]

		for(int i = 0; i < 4; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	22e0      	movs	r2, #224	; 0xe0
 80020aa:	18ba      	adds	r2, r7, r2
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e01c      	b.n	80020ea <dispHandler+0x362>
		{
			writeRow(strings[i], strlen(strings[i]), i, CENTER);
 80020b0:	21bc      	movs	r1, #188	; 0xbc
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	25e0      	movs	r5, #224	; 0xe0
 80020b6:	197a      	adds	r2, r7, r5
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	58d4      	ldr	r4, [r2, r3]
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	197a      	adds	r2, r7, r5
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	58d3      	ldr	r3, [r2, r3]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7fe f81d 	bl	8000108 <strlen>
 80020ce:	0003      	movs	r3, r0
 80020d0:	b2d9      	uxtb	r1, r3
 80020d2:	197b      	adds	r3, r7, r5
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	2302      	movs	r3, #2
 80020da:	0020      	movs	r0, r4
 80020dc:	f7fe fffa 	bl	80010d4 <writeRow>
		for(int i = 0; i < 4; i++)
 80020e0:	197b      	adds	r3, r7, r5
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	197a      	adds	r2, r7, r5
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	23e0      	movs	r3, #224	; 0xe0
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	dddd      	ble.n	80020b0 <dispHandler+0x328>
		}
	}
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b03b      	add	sp, #236	; 0xec
 80020fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fc:	0800e0a4 	.word	0x0800e0a4
 8002100:	200003d0 	.word	0x200003d0
 8002104:	200003ee 	.word	0x200003ee
 8002108:	20000404 	.word	0x20000404
 800210c:	0800e088 	.word	0x0800e088
 8002110:	0800e230 	.word	0x0800e230
 8002114:	0800e0b8 	.word	0x0800e0b8
 8002118:	0800e0c4 	.word	0x0800e0c4
 800211c:	0800e0d0 	.word	0x0800e0d0
 8002120:	0800e0dc 	.word	0x0800e0dc
 8002124:	0800e0e8 	.word	0x0800e0e8
 8002128:	0800e074 	.word	0x0800e074
 800212c:	0800e080 	.word	0x0800e080
 8002130:	200003c0 	.word	0x200003c0
 8002134:	0800e090 	.word	0x0800e090
 8002138:	0800e09c 	.word	0x0800e09c
 800213c:	0800e0f8 	.word	0x0800e0f8

08002140 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
 void UI_Handler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	if((sysTime[SYSTIME_TEN_MS] - startTime_LCD) >= 6000)	//1min
	{
		setColour(BACKLIGHT_OFF);
	}*/

	if(flags.conErr)
 8002144:	4b9e      	ldr	r3, [pc, #632]	; (80023c0 <UI_Handler+0x280>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	065b      	lsls	r3, r3, #25
 800214a:	0fdb      	lsrs	r3, r3, #31
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <UI_Handler+0x1c>
		flags.ui.error = 1;
 8002152:	4b9b      	ldr	r3, [pc, #620]	; (80023c0 <UI_Handler+0x280>)
 8002154:	7c1a      	ldrb	r2, [r3, #16]
 8002156:	2104      	movs	r1, #4
 8002158:	430a      	orrs	r2, r1
 800215a:	741a      	strb	r2, [r3, #16]

	flags.ui.active = 0;
 800215c:	4b98      	ldr	r3, [pc, #608]	; (80023c0 <UI_Handler+0x280>)
 800215e:	7c1a      	ldrb	r2, [r3, #16]
 8002160:	2120      	movs	r1, #32
 8002162:	438a      	bics	r2, r1
 8002164:	741a      	strb	r2, [r3, #16]

	static uint32_t startTime;	//proměnná pro �?asování dějů

	//___Nastavení stavu podle požadavků___//
	//___Stavy výše mají vyšší prioritu (error nejvyšší)___//
	if(flags.ui.error && (UI_State != ERROR))
 8002166:	4b96      	ldr	r3, [pc, #600]	; (80023c0 <UI_Handler+0x280>)
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	075b      	lsls	r3, r3, #29
 800216c:	0fdb      	lsrs	r3, r3, #31
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <UI_Handler+0x4c>
 8002174:	4b93      	ldr	r3, [pc, #588]	; (80023c4 <UI_Handler+0x284>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d007      	beq.n	800218c <UI_Handler+0x4c>
	{
		UI_State = ERROR;
 800217c:	4b91      	ldr	r3, [pc, #580]	; (80023c4 <UI_Handler+0x284>)
 800217e:	2203      	movs	r2, #3
 8002180:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8002182:	4b91      	ldr	r3, [pc, #580]	; (80023c8 <UI_Handler+0x288>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b91      	ldr	r3, [pc, #580]	; (80023cc <UI_Handler+0x28c>)
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e05e      	b.n	800224a <UI_Handler+0x10a>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 800218c:	4b8c      	ldr	r3, [pc, #560]	; (80023c0 <UI_Handler+0x280>)
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	071b      	lsls	r3, r3, #28
 8002192:	0fdb      	lsrs	r3, r3, #31
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d010      	beq.n	80021bc <UI_Handler+0x7c>
 800219a:	4b8a      	ldr	r3, [pc, #552]	; (80023c4 <UI_Handler+0x284>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10c      	bne.n	80021bc <UI_Handler+0x7c>
	{
		UI_State = NOTICE;
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <UI_Handler+0x284>)
 80021a4:	2204      	movs	r2, #4
 80021a6:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80021a8:	4b87      	ldr	r3, [pc, #540]	; (80023c8 <UI_Handler+0x288>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b87      	ldr	r3, [pc, #540]	; (80023cc <UI_Handler+0x28c>)
 80021ae:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 80021b0:	4b83      	ldr	r3, [pc, #524]	; (80023c0 <UI_Handler+0x280>)
 80021b2:	7c1a      	ldrb	r2, [r3, #16]
 80021b4:	2108      	movs	r1, #8
 80021b6:	438a      	bics	r2, r1
 80021b8:	741a      	strb	r2, [r3, #16]
 80021ba:	e046      	b.n	800224a <UI_Handler+0x10a>
	}
	else if(flags.ui.done && (UI_State == OFF))
 80021bc:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <UI_Handler+0x280>)
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	06db      	lsls	r3, r3, #27
 80021c2:	0fdb      	lsrs	r3, r3, #31
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d010      	beq.n	80021ec <UI_Handler+0xac>
 80021ca:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <UI_Handler+0x284>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <UI_Handler+0xac>
	{
		UI_State = DONE;
 80021d2:	4b7c      	ldr	r3, [pc, #496]	; (80023c4 <UI_Handler+0x284>)
 80021d4:	2205      	movs	r2, #5
 80021d6:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80021d8:	4b7b      	ldr	r3, [pc, #492]	; (80023c8 <UI_Handler+0x288>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b7b      	ldr	r3, [pc, #492]	; (80023cc <UI_Handler+0x28c>)
 80021de:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 80021e0:	4b77      	ldr	r3, [pc, #476]	; (80023c0 <UI_Handler+0x280>)
 80021e2:	7c1a      	ldrb	r2, [r3, #16]
 80021e4:	2110      	movs	r1, #16
 80021e6:	438a      	bics	r2, r1
 80021e8:	741a      	strb	r2, [r3, #16]
 80021ea:	e02e      	b.n	800224a <UI_Handler+0x10a>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 80021ec:	4b74      	ldr	r3, [pc, #464]	; (80023c0 <UI_Handler+0x280>)
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	079b      	lsls	r3, r3, #30
 80021f2:	0fdb      	lsrs	r3, r3, #31
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d010      	beq.n	800221c <UI_Handler+0xdc>
 80021fa:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <UI_Handler+0x284>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <UI_Handler+0xdc>
	{
		UI_State = LONG_BEEP;
 8002202:	4b70      	ldr	r3, [pc, #448]	; (80023c4 <UI_Handler+0x284>)
 8002204:	2202      	movs	r2, #2
 8002206:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8002208:	4b6f      	ldr	r3, [pc, #444]	; (80023c8 <UI_Handler+0x288>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <UI_Handler+0x28c>)
 800220e:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 8002210:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <UI_Handler+0x280>)
 8002212:	7c1a      	ldrb	r2, [r3, #16]
 8002214:	2102      	movs	r1, #2
 8002216:	438a      	bics	r2, r1
 8002218:	741a      	strb	r2, [r3, #16]
 800221a:	e016      	b.n	800224a <UI_Handler+0x10a>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 800221c:	4b68      	ldr	r3, [pc, #416]	; (80023c0 <UI_Handler+0x280>)
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	07db      	lsls	r3, r3, #31
 8002222:	0fdb      	lsrs	r3, r3, #31
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00f      	beq.n	800224a <UI_Handler+0x10a>
 800222a:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <UI_Handler+0x284>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10b      	bne.n	800224a <UI_Handler+0x10a>
	{
		UI_State = SHORT_BEEP;
 8002232:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <UI_Handler+0x284>)
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8002238:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <UI_Handler+0x288>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b63      	ldr	r3, [pc, #396]	; (80023cc <UI_Handler+0x28c>)
 800223e:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 8002240:	4b5f      	ldr	r3, [pc, #380]	; (80023c0 <UI_Handler+0x280>)
 8002242:	7c1a      	ldrb	r2, [r3, #16]
 8002244:	2101      	movs	r1, #1
 8002246:	438a      	bics	r2, r1
 8002248:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 800224a:	4b5e      	ldr	r3, [pc, #376]	; (80023c4 <UI_Handler+0x284>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b05      	cmp	r3, #5
 8002250:	d900      	bls.n	8002254 <UI_Handler+0x114>
 8002252:	e0a0      	b.n	8002396 <UI_Handler+0x256>
 8002254:	009a      	lsls	r2, r3, #2
 8002256:	4b5e      	ldr	r3, [pc, #376]	; (80023d0 <UI_Handler+0x290>)
 8002258:	18d3      	adds	r3, r2, r3
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	015b      	lsls	r3, r3, #5
 8002262:	485c      	ldr	r0, [pc, #368]	; (80023d4 <UI_Handler+0x294>)
 8002264:	2201      	movs	r2, #1
 8002266:	0019      	movs	r1, r3
 8002268:	f002 f907 	bl	800447a <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)		//0,5s
 800226c:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <UI_Handler+0x288>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b56      	ldr	r3, [pc, #344]	; (80023cc <UI_Handler+0x28c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b31      	cmp	r3, #49	; 0x31
 8002278:	d800      	bhi.n	800227c <UI_Handler+0x13c>
 800227a:	e094      	b.n	80023a6 <UI_Handler+0x266>
		{
			UI_State = OFF;
 800227c:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <UI_Handler+0x284>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	4853      	ldr	r0, [pc, #332]	; (80023d4 <UI_Handler+0x294>)
 8002288:	2200      	movs	r2, #0
 800228a:	0019      	movs	r1, r3
 800228c:	f002 f8f5 	bl	800447a <HAL_GPIO_WritePin>
		}
		break;
 8002290:	e089      	b.n	80023a6 <UI_Handler+0x266>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	015b      	lsls	r3, r3, #5
 8002296:	484f      	ldr	r0, [pc, #316]	; (80023d4 <UI_Handler+0x294>)
 8002298:	2201      	movs	r2, #1
 800229a:	0019      	movs	r1, r3
 800229c:	f002 f8ed 	bl	800447a <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)	//1s
 80022a0:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <UI_Handler+0x288>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b49      	ldr	r3, [pc, #292]	; (80023cc <UI_Handler+0x28c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b63      	cmp	r3, #99	; 0x63
 80022ac:	d800      	bhi.n	80022b0 <UI_Handler+0x170>
 80022ae:	e07c      	b.n	80023aa <UI_Handler+0x26a>
		{
			UI_State = OFF;
 80022b0:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <UI_Handler+0x284>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	015b      	lsls	r3, r3, #5
 80022ba:	4846      	ldr	r0, [pc, #280]	; (80023d4 <UI_Handler+0x294>)
 80022bc:	2200      	movs	r2, #0
 80022be:	0019      	movs	r1, r3
 80022c0:	f002 f8db 	bl	800447a <HAL_GPIO_WritePin>
		}
		break;
 80022c4:	e071      	b.n	80023aa <UI_Handler+0x26a>

	case ERROR:
		if(!flags.ui.error)	//dokud není požadavek zrušen provádí se error
 80022c6:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <UI_Handler+0x280>)
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	075b      	lsls	r3, r3, #29
 80022cc:	0fdb      	lsrs	r3, r3, #31
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <UI_Handler+0x19a>
			UI_State = OFF;
 80022d4:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <UI_Handler+0x284>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 80022da:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <UI_Handler+0x288>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <UI_Handler+0x28c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2132      	movs	r1, #50	; 0x32
 80022e6:	0018      	movs	r0, r3
 80022e8:	f7fd ffa6 	bl	8000238 <__aeabi_uidivmod>
 80022ec:	1e0b      	subs	r3, r1, #0
 80022ee:	d15e      	bne.n	80023ae <UI_Handler+0x26e>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	015b      	lsls	r3, r3, #5
 80022f4:	4a37      	ldr	r2, [pc, #220]	; (80023d4 <UI_Handler+0x294>)
 80022f6:	0019      	movs	r1, r3
 80022f8:	0010      	movs	r0, r2
 80022fa:	f002 f8db 	bl	80044b4 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	021a      	lsls	r2, r3, #8
 8002302:	2390      	movs	r3, #144	; 0x90
 8002304:	05db      	lsls	r3, r3, #23
 8002306:	0011      	movs	r1, r2
 8002308:	0018      	movs	r0, r3
 800230a:	f002 f8d3 	bl	80044b4 <HAL_GPIO_TogglePin>
		}
		break;
 800230e:	e04e      	b.n	80023ae <UI_Handler+0x26e>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))	//každých 0,35s
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <UI_Handler+0x288>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <UI_Handler+0x28c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2123      	movs	r1, #35	; 0x23
 800231c:	0018      	movs	r0, r3
 800231e:	f7fd ff8b 	bl	8000238 <__aeabi_uidivmod>
 8002322:	1e0b      	subs	r3, r1, #0
 8002324:	d106      	bne.n	8002334 <UI_Handler+0x1f4>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	015b      	lsls	r3, r3, #5
 800232a:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <UI_Handler+0x294>)
 800232c:	0019      	movs	r1, r3
 800232e:	0010      	movs	r0, r2
 8002330:	f002 f8c0 	bl	80044b4 <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)	//Po 2,1s ukon�?i
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <UI_Handler+0x288>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <UI_Handler+0x28c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2bd0      	cmp	r3, #208	; 0xd0
 8002340:	d937      	bls.n	80023b2 <UI_Handler+0x272>
			UI_State = OFF;
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <UI_Handler+0x284>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
		break;
 8002348:	e033      	b.n	80023b2 <UI_Handler+0x272>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 800234a:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <UI_Handler+0x288>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <UI_Handler+0x28c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2132      	movs	r1, #50	; 0x32
 8002356:	0018      	movs	r0, r3
 8002358:	f7fd ff6e 	bl	8000238 <__aeabi_uidivmod>
 800235c:	1e0b      	subs	r3, r1, #0
 800235e:	d10d      	bne.n	800237c <UI_Handler+0x23c>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	015b      	lsls	r3, r3, #5
 8002364:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <UI_Handler+0x294>)
 8002366:	0019      	movs	r1, r3
 8002368:	0010      	movs	r0, r2
 800236a:	f002 f8a3 	bl	80044b4 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4a19      	ldr	r2, [pc, #100]	; (80023d8 <UI_Handler+0x298>)
 8002374:	0019      	movs	r1, r3
 8002376:	0010      	movs	r0, r2
 8002378:	f002 f89c 	bl	80044b4 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)	//Po 3s ukon�?i
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <UI_Handler+0x288>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <UI_Handler+0x28c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	1ad2      	subs	r2, r2, r3
 8002386:	2395      	movs	r3, #149	; 0x95
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	429a      	cmp	r2, r3
 800238c:	d913      	bls.n	80023b6 <UI_Handler+0x276>
			UI_State = OFF;
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <UI_Handler+0x284>)
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
		break;
 8002394:	e00f      	b.n	80023b6 <UI_Handler+0x276>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	015b      	lsls	r3, r3, #5
 800239a:	480e      	ldr	r0, [pc, #56]	; (80023d4 <UI_Handler+0x294>)
 800239c:	2200      	movs	r2, #0
 800239e:	0019      	movs	r1, r3
 80023a0:	f002 f86b 	bl	800447a <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		//setColour(BACKLIGHT_OFF);
#endif
		break;
 80023a4:	e008      	b.n	80023b8 <UI_Handler+0x278>
		break;
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	e006      	b.n	80023b8 <UI_Handler+0x278>
		break;
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	e004      	b.n	80023b8 <UI_Handler+0x278>
		break;
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	e002      	b.n	80023b8 <UI_Handler+0x278>
		break;
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	e000      	b.n	80023b8 <UI_Handler+0x278>
		break;
 80023b6:	46c0      	nop			; (mov r8, r8)

	}
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	200003d0 	.word	0x200003d0
 80023c4:	200003f5 	.word	0x200003f5
 80023c8:	200003c0 	.word	0x200003c0
 80023cc:	200003f8 	.word	0x200003f8
 80023d0:	0800e24c 	.word	0x0800e24c
 80023d4:	48000800 	.word	0x48000800
 80023d8:	48000400 	.word	0x48000400

080023dc <measHandler>:

//_____Osluha AD převodníků_____//
 void measHandler(void)
{
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;

	//___Nulování flagů___//
	flags.meas.measComplete = 0;
 80023e0:	4b51      	ldr	r3, [pc, #324]	; (8002528 <measHandler+0x14c>)
 80023e2:	7d1a      	ldrb	r2, [r3, #20]
 80023e4:	2102      	movs	r1, #2
 80023e6:	438a      	bics	r2, r1
 80023e8:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 80023ea:	4b4f      	ldr	r3, [pc, #316]	; (8002528 <measHandler+0x14c>)
 80023ec:	7d1a      	ldrb	r2, [r3, #20]
 80023ee:	2110      	movs	r1, #16
 80023f0:	438a      	bics	r2, r1
 80023f2:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 80023f4:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <measHandler+0x14c>)
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	07db      	lsls	r3, r3, #31
 80023fa:	0fdb      	lsrs	r3, r3, #31
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d045      	beq.n	800248e <measHandler+0xb2>
	{
		if(!flags.meas.measRunning)
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <measHandler+0x14c>)
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	071b      	lsls	r3, r3, #28
 8002408:	0fdb      	lsrs	r3, r3, #31
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d134      	bne.n	800247a <measHandler+0x9e>
		{
			flags.meas.measRunning = 1;
 8002410:	4b45      	ldr	r3, [pc, #276]	; (8002528 <measHandler+0x14c>)
 8002412:	7d1a      	ldrb	r2, [r3, #20]
 8002414:	2108      	movs	r1, #8
 8002416:	430a      	orrs	r2, r1
 8002418:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 800241a:	f000 fc8d 	bl	8002d38 <currentPhase>
 800241e:	0003      	movs	r3, r0
 8002420:	2b05      	cmp	r3, #5
 8002422:	d004      	beq.n	800242e <measHandler+0x52>
 8002424:	f000 fc88 	bl	8002d38 <currentPhase>
 8002428:	0003      	movs	r3, r0
 800242a:	2b06      	cmp	r3, #6
 800242c:	d110      	bne.n	8002450 <measHandler+0x74>
			{
				flags.meas.onlyBattery = 1;
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <measHandler+0x14c>)
 8002430:	7d1a      	ldrb	r2, [r3, #20]
 8002432:	2120      	movs	r1, #32
 8002434:	430a      	orrs	r2, r1
 8002436:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8002438:	4b3c      	ldr	r3, [pc, #240]	; (800252c <measHandler+0x150>)
 800243a:	220d      	movs	r2, #13
 800243c:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <measHandler+0x150>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	1e59      	subs	r1, r3, #1
 8002444:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <measHandler+0x154>)
 8002446:	4a3b      	ldr	r2, [pc, #236]	; (8002534 <measHandler+0x158>)
 8002448:	0089      	lsls	r1, r1, #2
 800244a:	588a      	ldr	r2, [r1, r2]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
 800244e:	e00f      	b.n	8002470 <measHandler+0x94>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 8002450:	4b35      	ldr	r3, [pc, #212]	; (8002528 <measHandler+0x14c>)
 8002452:	7d1a      	ldrb	r2, [r3, #20]
 8002454:	2120      	movs	r1, #32
 8002456:	438a      	bics	r2, r1
 8002458:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 800245a:	4b34      	ldr	r3, [pc, #208]	; (800252c <measHandler+0x150>)
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <measHandler+0x150>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	1e59      	subs	r1, r3, #1
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <measHandler+0x154>)
 8002468:	4a32      	ldr	r2, [pc, #200]	; (8002534 <measHandler+0x158>)
 800246a:	0089      	lsls	r1, r1, #2
 800246c:	588a      	ldr	r2, [r1, r2]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			HAL_ADC_Start_IT(&hadc);
 8002470:	4b31      	ldr	r3, [pc, #196]	; (8002538 <measHandler+0x15c>)
 8002472:	0018      	movs	r0, r3
 8002474:	f001 f930 	bl	80036d8 <HAL_ADC_Start_IT>
 8002478:	e004      	b.n	8002484 <measHandler+0xa8>
		}
		else
		{
			flags.meas.measConflict = 1;
 800247a:	4b2b      	ldr	r3, [pc, #172]	; (8002528 <measHandler+0x14c>)
 800247c:	7d1a      	ldrb	r2, [r3, #20]
 800247e:	2110      	movs	r1, #16
 8002480:	430a      	orrs	r2, r1
 8002482:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 8002484:	4b28      	ldr	r3, [pc, #160]	; (8002528 <measHandler+0x14c>)
 8002486:	7d1a      	ldrb	r2, [r3, #20]
 8002488:	2101      	movs	r1, #1
 800248a:	438a      	bics	r2, r1
 800248c:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING)
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <measHandler+0x150>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d045      	beq.n	8002522 <measHandler+0x146>
	{
		if(flags.meas.measDataReady)
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <measHandler+0x14c>)
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	075b      	lsls	r3, r3, #29
 800249c:	0fdb      	lsrs	r3, r3, #31
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d03e      	beq.n	8002522 <measHandler+0x146>
		{
			flags.meas.measDataReady = 0;
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <measHandler+0x14c>)
 80024a6:	7d1a      	ldrb	r2, [r3, #20]
 80024a8:	2104      	movs	r1, #4
 80024aa:	438a      	bics	r2, r1
 80024ac:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 80024ae:	4b1f      	ldr	r3, [pc, #124]	; (800252c <measHandler+0x150>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b0d      	cmp	r3, #13
 80024b4:	d118      	bne.n	80024e8 <measHandler+0x10c>
			{
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <measHandler+0x150>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	1e5c      	subs	r4, r3, #1
 80024bc:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <measHandler+0x15c>)
 80024be:	0018      	movs	r0, r3
 80024c0:	f001 f9c6 	bl	8003850 <HAL_ADC_GetValue>
 80024c4:	0001      	movs	r1, r0
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <measHandler+0x160>)
 80024c8:	00a2      	lsls	r2, r4, #2
 80024ca:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <measHandler+0x14c>)
 80024ce:	7d1a      	ldrb	r2, [r3, #20]
 80024d0:	2102      	movs	r1, #2
 80024d2:	430a      	orrs	r2, r1
 80024d4:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <measHandler+0x14c>)
 80024d8:	7d1a      	ldrb	r2, [r3, #20]
 80024da:	2108      	movs	r1, #8
 80024dc:	438a      	bics	r2, r1
 80024de:	751a      	strb	r2, [r3, #20]
				ADC_State = ADC_WAITING;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <measHandler+0x150>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_IT(&hadc);
			}
		}
	}
}
 80024e6:	e01c      	b.n	8002522 <measHandler+0x146>
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <measHandler+0x150>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	1e5c      	subs	r4, r3, #1
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <measHandler+0x15c>)
 80024f0:	0018      	movs	r0, r3
 80024f2:	f001 f9ad 	bl	8003850 <HAL_ADC_GetValue>
 80024f6:	0001      	movs	r1, r0
 80024f8:	4b10      	ldr	r3, [pc, #64]	; (800253c <measHandler+0x160>)
 80024fa:	00a2      	lsls	r2, r4, #2
 80024fc:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;	//Měř další kanál (měření proudů se přeskakuje)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <measHandler+0x150>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	3302      	adds	r3, #2
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <measHandler+0x150>)
 8002508:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];	//Nastav měřený kanál
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <measHandler+0x150>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	1e59      	subs	r1, r3, #1
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <measHandler+0x154>)
 8002512:	4a08      	ldr	r2, [pc, #32]	; (8002534 <measHandler+0x158>)
 8002514:	0089      	lsls	r1, r1, #2
 8002516:	588a      	ldr	r2, [r1, r2]
 8002518:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <measHandler+0x15c>)
 800251c:	0018      	movs	r0, r3
 800251e:	f001 f8db 	bl	80036d8 <HAL_ADC_Start_IT>
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	bdb0      	pop	{r4, r5, r7, pc}
 8002528:	200003d0 	.word	0x200003d0
 800252c:	200003fc 	.word	0x200003fc
 8002530:	40012400 	.word	0x40012400
 8002534:	0800e1f0 	.word	0x0800e1f0
 8002538:	20000210 	.word	0x20000210
 800253c:	20000380 	.word	0x20000380

08002540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
}
 8002546:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002548:	e7fe      	b.n	8002548 <Error_Handler+0x8>

0800254a <createBuffer>:
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	2018      	movs	r0, #24
 8002554:	f00b f8f2 	bl	800d73c <malloc>
 8002558:	0003      	movs	r3, r0
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <createBuffer+0x1c>
 8002562:	2300      	movs	r3, #0
 8002564:	e022      	b.n	80025ac <createBuffer+0x62>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f00b f8e7 	bl	800d73c <malloc>
 800256e:	0003      	movs	r3, r0
 8002570:	001a      	movs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <createBuffer+0x40>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	0018      	movs	r0, r3
 8002582:	f00b f8e5 	bl	800d750 <free>
 8002586:	2300      	movs	r3, #0
 8002588:	e010      	b.n	80025ac <createBuffer+0x62>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	1e5a      	subs	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	611a      	str	r2, [r3, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	751a      	strb	r2, [r3, #20]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b004      	add	sp, #16
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <clearBuffer>:
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	1e5a      	subs	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	611a      	str	r2, [r3, #16]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	751a      	strb	r2, [r3, #20]
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}

080025e0 <push>:
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	000a      	movs	r2, r1
 80025ea:	1cfb      	adds	r3, r7, #3
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7d1b      	ldrb	r3, [r3, #20]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d101      	bne.n	80025fa <push+0x1a>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e025      	b.n	8002646 <push+0x66>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	0019      	movs	r1, r3
 8002606:	0010      	movs	r0, r2
 8002608:	f7fd ff00 	bl	800040c <__aeabi_idivmod>
 800260c:	000b      	movs	r3, r1
 800260e:	001a      	movs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	611a      	str	r2, [r3, #16]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	18d3      	adds	r3, r2, r3
 8002628:	1cfa      	adds	r2, r7, #3
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	db01      	blt.n	800263e <push+0x5e>
 800263a:	2202      	movs	r2, #2
 800263c:	e000      	b.n	8002640 <push+0x60>
 800263e:	2200      	movs	r2, #0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	751a      	strb	r2, [r3, #20]
 8002644:	2300      	movs	r3, #0
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b002      	add	sp, #8
 800264c:	bd80      	pop	{r7, pc}

0800264e <pushStr>:
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6899      	ldr	r1, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	18cb      	adds	r3, r1, r3
 8002666:	429a      	cmp	r2, r3
 8002668:	da01      	bge.n	800266e <pushStr+0x20>
 800266a:	2302      	movs	r3, #2
 800266c:	e013      	b.n	8002696 <pushStr+0x48>
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e00b      	b.n	800268c <pushStr+0x3e>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	18d3      	adds	r3, r2, r3
 800267a:	781a      	ldrb	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	0011      	movs	r1, r2
 8002680:	0018      	movs	r0, r3
 8002682:	f7ff ffad 	bl	80025e0 <push>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	dbef      	blt.n	8002674 <pushStr+0x26>
 8002694:	2300      	movs	r3, #0
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b006      	add	sp, #24
 800269c:	bd80      	pop	{r7, pc}

0800269e <pop>:
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7d1b      	ldrb	r3, [r3, #20]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <pop+0x16>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e023      	b.n	80026fc <pop+0x5e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	18d3      	adds	r3, r2, r3
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0019      	movs	r1, r3
 80026d0:	0010      	movs	r0, r2
 80026d2:	f7fd fe9b 	bl	800040c <__aeabi_idivmod>
 80026d6:	000b      	movs	r3, r1
 80026d8:	001a      	movs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	1e5a      	subs	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	4313      	orrs	r3, r2
 80026f0:	0fdb      	lsrs	r3, r3, #31
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	001a      	movs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	751a      	strb	r2, [r3, #20]
 80026fa:	2300      	movs	r3, #0
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	b002      	add	sp, #8
 8002702:	bd80      	pop	{r7, pc}

08002704 <at>:
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	7d1b      	ldrb	r3, [r3, #20]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <at+0x18>
 8002718:	2301      	movs	r3, #1
 800271a:	e01a      	b.n	8002752 <at+0x4e>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	429a      	cmp	r2, r3
 8002724:	db01      	blt.n	800272a <at+0x26>
 8002726:	2303      	movs	r3, #3
 8002728:	e013      	b.n	8002752 <at+0x4e>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	18d2      	adds	r2, r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	0019      	movs	r1, r3
 8002738:	0010      	movs	r0, r2
 800273a:	f7fd fe67 	bl	800040c <__aeabi_idivmod>
 800273e:	000b      	movs	r3, r1
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	18d3      	adds	r3, r2, r3
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	2300      	movs	r3, #0
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b006      	add	sp, #24
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 8002762:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <getCount+0x84>)
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 8002768:	1dfb      	adds	r3, r7, #7
 800276a:	222a      	movs	r2, #42	; 0x2a
 800276c:	701a      	strb	r2, [r3, #0]
		answer = 0;
 800276e:	1dbb      	adds	r3, r7, #6
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 8002774:	1dba      	adds	r2, r7, #6
 8002776:	1df9      	adds	r1, r7, #7
 8002778:	481a      	ldr	r0, [pc, #104]	; (80027e4 <getCount+0x88>)
 800277a:	2364      	movs	r3, #100	; 0x64
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2301      	movs	r3, #1
 8002780:	f004 fd52 	bl	8007228 <HAL_SPI_TransmitReceive>
 8002784:	1e03      	subs	r3, r0, #0
 8002786:	d001      	beq.n	800278c <getCount+0x30>
			return 0;
 8002788:	2300      	movs	r3, #0
 800278a:	e024      	b.n	80027d6 <getCount+0x7a>
		regCount++;
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <getCount+0x84>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <getCount+0x84>)
 8002796:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8002798:	2001      	movs	r0, #1
 800279a:	f000 fe39 	bl	8003410 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <getCount+0x84>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b63      	cmp	r3, #99	; 0x63
 80027a4:	d909      	bls.n	80027ba <getCount+0x5e>
		{
			flags.conErr = 1;
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <getCount+0x8c>)
 80027a8:	7e1a      	ldrb	r2, [r3, #24]
 80027aa:	2140      	movs	r1, #64	; 0x40
 80027ac:	430a      	orrs	r2, r1
 80027ae:	761a      	strb	r2, [r3, #24]
			regCount = 0;
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <getCount+0x84>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
			return 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e00d      	b.n	80027d6 <getCount+0x7a>
		}
	}
	while(answer != question);
 80027ba:	1dbb      	adds	r3, r7, #6
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d1d0      	bne.n	8002768 <getCount+0xc>

	regCount--;
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <getCount+0x84>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <getCount+0x84>)
 80027d0:	701a      	strb	r2, [r3, #0]

	return regCount;
 80027d2:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <getCount+0x84>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b002      	add	sp, #8
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	20000404 	.word	0x20000404
 80027e4:	20000250 	.word	0x20000250
 80027e8:	200003d0 	.word	0x200003d0

080027ec <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
	//___Clear registrů___//
	REG_CLR_ACTIVE;
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	019b      	lsls	r3, r3, #6
 80027f6:	4827      	ldr	r0, [pc, #156]	; (8002894 <regInit+0xa8>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	0019      	movs	r1, r3
 80027fc:	f001 fe3d 	bl	800447a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002800:	2005      	movs	r0, #5
 8002802:	f000 fe05 	bl	8003410 <HAL_Delay>
	REG_CLR_INACTIVE;
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	4822      	ldr	r0, [pc, #136]	; (8002894 <regInit+0xa8>)
 800280c:	2201      	movs	r2, #1
 800280e:	0019      	movs	r1, r3
 8002810:	f001 fe33 	bl	800447a <HAL_GPIO_WritePin>

	REG_DISABLE;
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	481e      	ldr	r0, [pc, #120]	; (8002894 <regInit+0xa8>)
 800281a:	2201      	movs	r2, #1
 800281c:	0019      	movs	r1, r3
 800281e:	f001 fe2c 	bl	800447a <HAL_GPIO_WritePin>

		if(getCount() == 0)
 8002822:	f7ff ff9b 	bl	800275c <getCount>
 8002826:	1e03      	subs	r3, r0, #0
 8002828:	d101      	bne.n	800282e <regInit+0x42>
		{
			return REG_CON_ERR;	//Connection error
 800282a:	2301      	movs	r3, #1
 800282c:	e02e      	b.n	800288c <regInit+0xa0>
		}

		regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <regInit+0xac>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	0018      	movs	r0, r3
 8002834:	f00a ff82 	bl	800d73c <malloc>
 8002838:	0003      	movs	r3, r0
 800283a:	001a      	movs	r2, r3
 800283c:	4b17      	ldr	r3, [pc, #92]	; (800289c <regInit+0xb0>)
 800283e:	601a      	str	r2, [r3, #0]
		if(regValues == NULL)
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <regInit+0xb0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <regInit+0x66>
		{
			regState = REG_ERR;
 8002848:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <regInit+0xb4>)
 800284a:	2202      	movs	r2, #2
 800284c:	701a      	strb	r2, [r3, #0]
			return REG_ERR;
 800284e:	2302      	movs	r3, #2
 8002850:	e01c      	b.n	800288c <regInit+0xa0>
		}

		for(int i = 0; i < regCount; i++)
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	e008      	b.n	800286a <regInit+0x7e>
		{
			regValues[i] = 0;
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <regInit+0xb0>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	18d3      	adds	r3, r2, r3
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3301      	adds	r3, #1
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <regInit+0xac>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	001a      	movs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4293      	cmp	r3, r2
 8002874:	dbf0      	blt.n	8002858 <regInit+0x6c>
		}

		sendData();
 8002876:	f000 f815 	bl	80028a4 <sendData>

	REG_ENABLE;
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <regInit+0xa8>)
 8002880:	2200      	movs	r2, #0
 8002882:	0019      	movs	r1, r3
 8002884:	f001 fdf9 	bl	800447a <HAL_GPIO_WritePin>

	return regState;
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <regInit+0xb4>)
 800288a:	781b      	ldrb	r3, [r3, #0]
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}
 8002894:	48000400 	.word	0x48000400
 8002898:	20000404 	.word	0x20000404
 800289c:	20000400 	.word	0x20000400
 80028a0:	200003fd 	.word	0x200003fd

080028a4 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <sendData+0x64>)
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <sendData+0x68>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	4817      	ldr	r0, [pc, #92]	; (8002910 <sendData+0x6c>)
 80028b4:	2364      	movs	r3, #100	; 0x64
 80028b6:	f004 fb5f 	bl	8006f78 <HAL_SPI_Transmit>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d114      	bne.n	80028e8 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	01db      	lsls	r3, r3, #7
 80028c2:	4814      	ldr	r0, [pc, #80]	; (8002914 <sendData+0x70>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	0019      	movs	r1, r3
 80028c8:	f001 fdd7 	bl	800447a <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f000 fd9f 	bl	8003410 <HAL_Delay>
		REG_RCLK_LOW;
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	01db      	lsls	r3, r3, #7
 80028d6:	480f      	ldr	r0, [pc, #60]	; (8002914 <sendData+0x70>)
 80028d8:	2200      	movs	r2, #0
 80028da:	0019      	movs	r1, r3
 80028dc:	f001 fdcd 	bl	800447a <HAL_GPIO_WritePin>

		regState = REG_OK;
 80028e0:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <sendData+0x74>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e009      	b.n	80028fc <sendData+0x58>
	}
	else
	{
		regState = REG_ERR;
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <sendData+0x74>)
 80028ea:	2202      	movs	r2, #2
 80028ec:	701a      	strb	r2, [r3, #0]

		REG_DISABLE;	//výstup ve stavu vysoké impedance (zabrání nechtěnému nastavení relé)
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	4808      	ldr	r0, [pc, #32]	; (8002914 <sendData+0x70>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	0019      	movs	r1, r3
 80028f8:	f001 fdbf 	bl	800447a <HAL_GPIO_WritePin>
	}

	return regState;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <sendData+0x74>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	20000400 	.word	0x20000400
 800290c:	20000404 	.word	0x20000404
 8002910:	20000250 	.word	0x20000250
 8002914:	48000400 	.word	0x48000400
 8002918:	200003fd 	.word	0x200003fd

0800291c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_MspInit+0x44>)
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <HAL_MspInit+0x44>)
 8002928:	2101      	movs	r1, #1
 800292a:	430a      	orrs	r2, r1
 800292c:	619a      	str	r2, [r3, #24]
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_MspInit+0x44>)
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2201      	movs	r2, #1
 8002934:	4013      	ands	r3, r2
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_MspInit+0x44>)
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_MspInit+0x44>)
 8002940:	2180      	movs	r1, #128	; 0x80
 8002942:	0549      	lsls	r1, r1, #21
 8002944:	430a      	orrs	r2, r1
 8002946:	61da      	str	r2, [r3, #28]
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_MspInit+0x44>)
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	055b      	lsls	r3, r3, #21
 8002950:	4013      	ands	r3, r2
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b002      	add	sp, #8
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	40021000 	.word	0x40021000

08002964 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b08d      	sub	sp, #52	; 0x34
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	241c      	movs	r4, #28
 800296e:	193b      	adds	r3, r7, r4
 8002970:	0018      	movs	r0, r3
 8002972:	2314      	movs	r3, #20
 8002974:	001a      	movs	r2, r3
 8002976:	2100      	movs	r1, #0
 8002978:	f00a fefd 	bl	800d776 <memset>
  if(hadc->Instance==ADC1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a3a      	ldr	r2, [pc, #232]	; (8002a6c <HAL_ADC_MspInit+0x108>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d16d      	bne.n	8002a62 <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002986:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	0089      	lsls	r1, r1, #2
 8002990:	430a      	orrs	r2, r1
 8002992:	619a      	str	r2, [r3, #24]
 8002994:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a2:	4b33      	ldr	r3, [pc, #204]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	4b32      	ldr	r3, [pc, #200]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 80029a8:	2180      	movs	r1, #128	; 0x80
 80029aa:	0309      	lsls	r1, r1, #12
 80029ac:	430a      	orrs	r2, r1
 80029ae:	615a      	str	r2, [r3, #20]
 80029b0:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	031b      	lsls	r3, r3, #12
 80029b8:	4013      	ands	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	0289      	lsls	r1, r1, #10
 80029c8:	430a      	orrs	r2, r1
 80029ca:	615a      	str	r2, [r3, #20]
 80029cc:	4b28      	ldr	r3, [pc, #160]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	029b      	lsls	r3, r3, #10
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 80029e0:	2180      	movs	r1, #128	; 0x80
 80029e2:	02c9      	lsls	r1, r1, #11
 80029e4:	430a      	orrs	r2, r1
 80029e6:	615a      	str	r2, [r3, #20]
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_ADC_MspInit+0x10c>)
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	02db      	lsls	r3, r3, #11
 80029f0:	4013      	ands	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	223f      	movs	r2, #63	; 0x3f
 80029fa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	2203      	movs	r2, #3
 8002a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <HAL_ADC_MspInit+0x110>)
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	0010      	movs	r0, r2
 8002a10:	f001 fb9e 	bl	8004150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	22ff      	movs	r2, #255	; 0xff
 8002a18:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	193b      	adds	r3, r7, r4
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a26:	193a      	adds	r2, r7, r4
 8002a28:	2390      	movs	r3, #144	; 0x90
 8002a2a:	05db      	lsls	r3, r3, #23
 8002a2c:	0011      	movs	r1, r2
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f001 fb8e 	bl	8004150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a34:	193b      	adds	r3, r7, r4
 8002a36:	2203      	movs	r2, #3
 8002a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a3a:	193b      	adds	r3, r7, r4
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	193b      	adds	r3, r7, r4
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a46:	193b      	adds	r3, r7, r4
 8002a48:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <HAL_ADC_MspInit+0x114>)
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	f001 fb7f 	bl	8004150 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	200c      	movs	r0, #12
 8002a58:	f001 faca 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002a5c:	200c      	movs	r0, #12
 8002a5e:	f001 fadc 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b00d      	add	sp, #52	; 0x34
 8002a68:	bd90      	pop	{r4, r7, pc}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	40012400 	.word	0x40012400
 8002a70:	40021000 	.word	0x40021000
 8002a74:	48000800 	.word	0x48000800
 8002a78:	48000400 	.word	0x48000400

08002a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b08b      	sub	sp, #44	; 0x2c
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	2414      	movs	r4, #20
 8002a86:	193b      	adds	r3, r7, r4
 8002a88:	0018      	movs	r0, r3
 8002a8a:	2314      	movs	r3, #20
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f00a fe71 	bl	800d776 <memset>
  if(hspi->Instance==SPI1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <HAL_SPI_MspInit+0x90>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d131      	bne.n	8002b02 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <HAL_SPI_MspInit+0x94>)
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <HAL_SPI_MspInit+0x94>)
 8002aa4:	2180      	movs	r1, #128	; 0x80
 8002aa6:	0149      	lsls	r1, r1, #5
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	619a      	str	r2, [r3, #24]
 8002aac:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <HAL_SPI_MspInit+0x94>)
 8002aae:	699a      	ldr	r2, [r3, #24]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	015b      	lsls	r3, r3, #5
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <HAL_SPI_MspInit+0x94>)
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_SPI_MspInit+0x94>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	02c9      	lsls	r1, r1, #11
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	615a      	str	r2, [r3, #20]
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_SPI_MspInit+0x94>)
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	02db      	lsls	r3, r3, #11
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002ad6:	0021      	movs	r1, r4
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	2238      	movs	r2, #56	; 0x38
 8002adc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2203      	movs	r2, #3
 8002aee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <HAL_SPI_MspInit+0x98>)
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f001 fb27 	bl	8004150 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b00b      	add	sp, #44	; 0x2c
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	40013000 	.word	0x40013000
 8002b10:	40021000 	.word	0x40021000
 8002b14:	48000400 	.word	0x48000400

08002b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <HAL_TIM_Base_MspInit+0x48>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d115      	bne.n	8002b56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_TIM_Base_MspInit+0x4c>)
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_TIM_Base_MspInit+0x4c>)
 8002b30:	2180      	movs	r1, #128	; 0x80
 8002b32:	0049      	lsls	r1, r1, #1
 8002b34:	430a      	orrs	r2, r1
 8002b36:	61da      	str	r2, [r3, #28]
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_TIM_Base_MspInit+0x4c>)
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2013      	movs	r0, #19
 8002b4c:	f001 fa50 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002b50:	2013      	movs	r0, #19
 8002b52:	f001 fa62 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b004      	add	sp, #16
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	40002000 	.word	0x40002000
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b08b      	sub	sp, #44	; 0x2c
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	2414      	movs	r4, #20
 8002b72:	193b      	adds	r3, r7, r4
 8002b74:	0018      	movs	r0, r3
 8002b76:	2314      	movs	r3, #20
 8002b78:	001a      	movs	r2, r3
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	f00a fdfb 	bl	800d776 <memset>
  if(huart->Instance==USART3)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_UART_MspInit+0xa0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d13a      	bne.n	8002c00 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_UART_MspInit+0xa4>)
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <HAL_UART_MspInit+0xa4>)
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	02c9      	lsls	r1, r1, #11
 8002b94:	430a      	orrs	r2, r1
 8002b96:	61da      	str	r2, [r3, #28]
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_UART_MspInit+0xa4>)
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	02db      	lsls	r3, r3, #11
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_UART_MspInit+0xa4>)
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <HAL_UART_MspInit+0xa4>)
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	0309      	lsls	r1, r1, #12
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	615a      	str	r2, [r3, #20]
 8002bb4:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_UART_MspInit+0xa4>)
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	031b      	lsls	r3, r3, #12
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	22c0      	movs	r2, #192	; 0xc0
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	0021      	movs	r1, r4
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2202      	movs	r2, #2
 8002bd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	2203      	movs	r2, #3
 8002bdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	2201      	movs	r2, #1
 8002be2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <HAL_UART_MspInit+0xa8>)
 8002be8:	0019      	movs	r1, r3
 8002bea:	0010      	movs	r0, r2
 8002bec:	f001 fab0 	bl	8004150 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	201d      	movs	r0, #29
 8002bf6:	f001 f9fb 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002bfa:	201d      	movs	r0, #29
 8002bfc:	f001 fa0d 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b00b      	add	sp, #44	; 0x2c
 8002c06:	bd90      	pop	{r4, r7, pc}
 8002c08:	40004800 	.word	0x40004800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	48000800 	.word	0x48000800

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <NMI_Handler+0x4>

08002c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <HardFault_Handler+0x4>

08002c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c38:	f000 fbce 	bl	80033d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f001 fc4e 	bl	80044ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_0_Pin);
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	0018      	movs	r0, r3
 8002c56:	f001 fc49 	bl	80044ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <ADC1_COMP_IRQHandler+0x14>)
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 fdfe 	bl	8003868 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	20000210 	.word	0x20000210

08002c78 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <TIM14_IRQHandler+0x14>)
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f004 ff14 	bl	8007aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	200002b4 	.word	0x200002b4

08002c90 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <USART3_4_IRQHandler+0x14>)
 8002c96:	0018      	movs	r0, r3
 8002c98:	f005 fb76 	bl	8008388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	200002fc 	.word	0x200002fc

08002ca8 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <USB_IRQHandler+0x14>)
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f001 fd6e 	bl	8004790 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	200010b8 	.word	0x200010b8

08002cc0 <_sbrk>:
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <_sbrk+0x5c>)
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <_sbrk+0x60>)
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <_sbrk+0x22>
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <_sbrk+0x64>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <_sbrk+0x68>)
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <_sbrk+0x64>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d207      	bcs.n	8002d00 <_sbrk+0x40>
 8002cf0:	f00a fcfa 	bl	800d6e8 <__errno>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	425b      	negs	r3, r3
 8002cfe:	e009      	b.n	8002d14 <_sbrk+0x54>
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	18d2      	adds	r2, r2, r3
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <_sbrk+0x64>)
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b006      	add	sp, #24
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20004000 	.word	0x20004000
 8002d20:	00000400 	.word	0x00000400
 8002d24:	20000408 	.word	0x20000408
 8002d28:	200015e0 	.word	0x200015e0

08002d2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
	return testPhase;
 8002d3c:	4b02      	ldr	r3, [pc, #8]	; (8002d48 <currentPhase+0x10>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
}
 8002d40:	0018      	movs	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	2000040c 	.word	0x2000040c

08002d4c <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b08b      	sub	sp, #44	; 0x2c
 8002d50:	af00      	add	r7, sp, #0
	flags.testProgress = 0;
 8002d52:	4bc5      	ldr	r3, [pc, #788]	; (8003068 <testHandler+0x31c>)
 8002d54:	7e1a      	ldrb	r2, [r3, #24]
 8002d56:	2102      	movs	r1, #2
 8002d58:	438a      	bics	r2, r1
 8002d5a:	761a      	strb	r2, [r3, #24]
	flags.testCanceled = 0;
 8002d5c:	4bc2      	ldr	r3, [pc, #776]	; (8003068 <testHandler+0x31c>)
 8002d5e:	7e1a      	ldrb	r2, [r3, #24]
 8002d60:	2104      	movs	r1, #4
 8002d62:	438a      	bics	r2, r1
 8002d64:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8002d66:	4bc0      	ldr	r3, [pc, #768]	; (8003068 <testHandler+0x31c>)
 8002d68:	7b1b      	ldrb	r3, [r3, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d032      	beq.n	8002dda <testHandler+0x8e>
	{
		if(testPhase == WAITING)
 8002d74:	4bbd      	ldr	r3, [pc, #756]	; (800306c <testHandler+0x320>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d124      	bne.n	8002dc6 <testHandler+0x7a>
		{
			if(flags.conErr)
 8002d7c:	4bba      	ldr	r3, [pc, #744]	; (8003068 <testHandler+0x31c>)
 8002d7e:	7e1b      	ldrb	r3, [r3, #24]
 8002d80:	2240      	movs	r2, #64	; 0x40
 8002d82:	4013      	ands	r3, r2
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01a      	beq.n	8002dc0 <testHandler+0x74>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	4ab8      	ldr	r2, [pc, #736]	; (8003070 <testHandler+0x324>)
 8002d8e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d90:	c313      	stmia	r3!, {r0, r1, r4}
 8002d92:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d94:	c313      	stmia	r3!, {r0, r1, r4}
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8002d9a:	4bb6      	ldr	r3, [pc, #728]	; (8003074 <testHandler+0x328>)
 8002d9c:	681c      	ldr	r4, [r3, #0]
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7fd f9b1 	bl	8000108 <strlen>
 8002da6:	0003      	movs	r3, r0
 8002da8:	001a      	movs	r2, r3
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	0019      	movs	r1, r3
 8002dae:	0020      	movs	r0, r4
 8002db0:	f7ff fc4d 	bl	800264e <pushStr>
				flags.instructions.startRequest = 0;
 8002db4:	4bac      	ldr	r3, [pc, #688]	; (8003068 <testHandler+0x31c>)
 8002db6:	7b1a      	ldrb	r2, [r3, #12]
 8002db8:	2101      	movs	r1, #1
 8002dba:	438a      	bics	r2, r1
 8002dbc:	731a      	strb	r2, [r3, #12]
 8002dbe:	e00c      	b.n	8002dda <testHandler+0x8e>
			}
			else
			{
				startTest();
 8002dc0:	f000 f9e8 	bl	8003194 <startTest>
 8002dc4:	e009      	b.n	8002dda <testHandler+0x8e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8002dc6:	4ba8      	ldr	r3, [pc, #672]	; (8003068 <testHandler+0x31c>)
 8002dc8:	7e1a      	ldrb	r2, [r3, #24]
 8002dca:	2101      	movs	r1, #1
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	761a      	strb	r2, [r3, #24]
			flags.instructions.startRequest = 0;
 8002dd0:	4ba5      	ldr	r3, [pc, #660]	; (8003068 <testHandler+0x31c>)
 8002dd2:	7b1a      	ldrb	r2, [r3, #12]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	438a      	bics	r2, r1
 8002dd8:	731a      	strb	r2, [r3, #12]
		}
	}
	if(flags.instructions.stopRequest)
 8002dda:	4ba3      	ldr	r3, [pc, #652]	; (8003068 <testHandler+0x31c>)
 8002ddc:	7b1b      	ldrb	r3, [r3, #12]
 8002dde:	2202      	movs	r2, #2
 8002de0:	4013      	ands	r3, r2
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <testHandler+0xa0>
	{
		stopTest();
 8002de8:	f000 fa4a 	bl	8003280 <stopTest>
	}

	if(testPhase != WAITING)
 8002dec:	4b9f      	ldr	r3, [pc, #636]	; (800306c <testHandler+0x320>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00d      	beq.n	8002e10 <testHandler+0xc4>
	{
		if(flags.buttons.butt0_ver)
 8002df4:	4b9c      	ldr	r3, [pc, #624]	; (8003068 <testHandler+0x31c>)
 8002df6:	791b      	ldrb	r3, [r3, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <testHandler+0xc4>
		{
			stopTest();
 8002e02:	f000 fa3d 	bl	8003280 <stopTest>
			flags.testCanceled = 1;
 8002e06:	4b98      	ldr	r3, [pc, #608]	; (8003068 <testHandler+0x31c>)
 8002e08:	7e1a      	ldrb	r2, [r3, #24]
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	761a      	strb	r2, [r3, #24]
		}
	}

	switch(testPhase)
 8002e10:	4b96      	ldr	r3, [pc, #600]	; (800306c <testHandler+0x320>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b06      	cmp	r3, #6
 8002e16:	d900      	bls.n	8002e1a <testHandler+0xce>
 8002e18:	e1b0      	b.n	800317c <testHandler+0x430>
 8002e1a:	009a      	lsls	r2, r3, #2
 8002e1c:	4b96      	ldr	r3, [pc, #600]	; (8003078 <testHandler+0x32c>)
 8002e1e:	18d3      	adds	r3, r2, r3
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8002e24:	4b90      	ldr	r3, [pc, #576]	; (8003068 <testHandler+0x31c>)
 8002e26:	7e1a      	ldrb	r2, [r3, #24]
 8002e28:	2102      	movs	r1, #2
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 8002e2e:	e1a5      	b.n	800317c <testHandler+0x430>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8002e30:	4b8d      	ldr	r3, [pc, #564]	; (8003068 <testHandler+0x31c>)
 8002e32:	7d1b      	ldrb	r3, [r3, #20]
 8002e34:	2202      	movs	r2, #2
 8002e36:	4013      	ands	r3, r2
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <testHandler+0xfe>
		{
			testPhase++;
 8002e3e:	4b8b      	ldr	r3, [pc, #556]	; (800306c <testHandler+0x320>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	3301      	adds	r3, #1
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <testHandler+0x320>)
 8002e48:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.sec)
 8002e4a:	4b87      	ldr	r3, [pc, #540]	; (8003068 <testHandler+0x31c>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	4013      	ands	r3, r2
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d052      	beq.n	8002efe <testHandler+0x1b2>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED1);	//blikání prvni progress led
 8002e58:	4b88      	ldr	r3, [pc, #544]	; (800307c <testHandler+0x330>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	4b87      	ldr	r3, [pc, #540]	; (800307c <testHandler+0x330>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2120      	movs	r1, #32
 8002e64:	404a      	eors	r2, r1
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]
			sendData();
 8002e6a:	f7ff fd1b 	bl	80028a4 <sendData>

			switch(sysTime[SYSTIME_SEC])
 8002e6e:	4b84      	ldr	r3, [pc, #528]	; (8003080 <testHandler+0x334>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d03d      	beq.n	8002ef2 <testHandler+0x1a6>
 8002e76:	dc44      	bgt.n	8002f02 <testHandler+0x1b6>
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d002      	beq.n	8002e82 <testHandler+0x136>
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d00f      	beq.n	8002ea0 <testHandler+0x154>
				break;
			case 3:	//ve treti sekunde zmerit napeti naprazdno
				flags.meas.measRequest = 1;
				break;
			default:
				break;
 8002e80:	e03f      	b.n	8002f02 <testHandler+0x1b6>
				HTR_ON;
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	487f      	ldr	r0, [pc, #508]	; (8003084 <testHandler+0x338>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	f001 faf5 	bl	800447a <HAL_GPIO_WritePin>
				EM_HTR_ON;
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	487b      	ldr	r0, [pc, #492]	; (8003084 <testHandler+0x338>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	0019      	movs	r1, r3
 8002e9a:	f001 faee 	bl	800447a <HAL_GPIO_WritePin>
				break;
 8002e9e:	e031      	b.n	8002f04 <testHandler+0x1b8>
				if(HAL_GPIO_ReadPin(HEATER_STATE_GPIO_Port, HEATER_STATE_Pin) == GPIO_PIN_RESET)	//Topení neni v poradku
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	015b      	lsls	r3, r3, #5
 8002ea4:	4a78      	ldr	r2, [pc, #480]	; (8003088 <testHandler+0x33c>)
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	f001 fac9 	bl	8004440 <HAL_GPIO_ReadPin>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d108      	bne.n	8002ec4 <testHandler+0x178>
					flags.heaterState = HEATER_ERR;
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <testHandler+0x31c>)
 8002eb4:	7e1a      	ldrb	r2, [r3, #24]
 8002eb6:	2130      	movs	r1, #48	; 0x30
 8002eb8:	438a      	bics	r2, r1
 8002eba:	1c11      	adds	r1, r2, #0
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	761a      	strb	r2, [r3, #24]
 8002ec2:	e007      	b.n	8002ed4 <testHandler+0x188>
					flags.heaterState = HEATER_OK;
 8002ec4:	4b68      	ldr	r3, [pc, #416]	; (8003068 <testHandler+0x31c>)
 8002ec6:	7e1a      	ldrb	r2, [r3, #24]
 8002ec8:	2130      	movs	r1, #48	; 0x30
 8002eca:	438a      	bics	r2, r1
 8002ecc:	1c11      	adds	r1, r2, #0
 8002ece:	2210      	movs	r2, #16
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
				HTR_OFF;
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	486a      	ldr	r0, [pc, #424]	; (8003084 <testHandler+0x338>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	0019      	movs	r1, r3
 8002ede:	f001 facc 	bl	800447a <HAL_GPIO_WritePin>
				EM_HTR_OFF;
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4867      	ldr	r0, [pc, #412]	; (8003084 <testHandler+0x338>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	0019      	movs	r1, r3
 8002eec:	f001 fac5 	bl	800447a <HAL_GPIO_WritePin>
				break;
 8002ef0:	e008      	b.n	8002f04 <testHandler+0x1b8>
				flags.meas.measRequest = 1;
 8002ef2:	4b5d      	ldr	r3, [pc, #372]	; (8003068 <testHandler+0x31c>)
 8002ef4:	7d1a      	ldrb	r2, [r3, #20]
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	751a      	strb	r2, [r3, #20]
				break;
 8002efc:	e002      	b.n	8002f04 <testHandler+0x1b8>
			}
		}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	e13c      	b.n	800317c <testHandler+0x430>
				break;
 8002f02:	46c0      	nop			; (mov r8, r8)
		break;
 8002f04:	e13a      	b.n	800317c <testHandler+0x430>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8002f06:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <testHandler+0x338>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2180      	movs	r1, #128	; 0x80
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f001 fab4 	bl	800447a <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8002f12:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <testHandler+0x338>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	2140      	movs	r1, #64	; 0x40
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f001 faae 	bl	800447a <HAL_GPIO_WritePin>

		testPhase++;
 8002f1e:	4b53      	ldr	r3, [pc, #332]	; (800306c <testHandler+0x320>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4b51      	ldr	r3, [pc, #324]	; (800306c <testHandler+0x320>)
 8002f28:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8002f2a:	4b4f      	ldr	r3, [pc, #316]	; (8003068 <testHandler+0x31c>)
 8002f2c:	7e1a      	ldrb	r2, [r3, #24]
 8002f2e:	2102      	movs	r1, #2
 8002f30:	430a      	orrs	r2, r1
 8002f32:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první led
 8002f34:	4b51      	ldr	r3, [pc, #324]	; (800307c <testHandler+0x330>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	4b50      	ldr	r3, [pc, #320]	; (800307c <testHandler+0x330>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2120      	movs	r1, #32
 8002f40:	430a      	orrs	r2, r1
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8002f46:	2301      	movs	r3, #1
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	e007      	b.n	8002f5c <testHandler+0x210>
		{
			sysTime[i] = 0;
 8002f4c:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <testHandler+0x334>)
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	0092      	lsls	r2, r2, #2
 8002f52:	2100      	movs	r1, #0
 8002f54:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	3301      	adds	r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	ddf4      	ble.n	8002f4c <testHandler+0x200>
		}
		break;
 8002f62:	e10b      	b.n	800317c <testHandler+0x430>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002f64:	4b40      	ldr	r3, [pc, #256]	; (8003068 <testHandler+0x31c>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <testHandler+0x23c>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8002f72:	4b42      	ldr	r3, [pc, #264]	; (800307c <testHandler+0x330>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	4b40      	ldr	r3, [pc, #256]	; (800307c <testHandler+0x330>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	404a      	eors	r2, r1
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	701a      	strb	r2, [r3, #0]
			sendData();
 8002f84:	f7ff fc8e 	bl	80028a4 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && !(sysTime[SYSTIME_MIN] == 0 && sysTime[SYSTIME_HOUR] == 0) && flags.time.min)	//___Měření napětí každých deset minut___//
 8002f88:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <testHandler+0x334>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	210a      	movs	r1, #10
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7fd fa3c 	bl	800040c <__aeabi_idivmod>
 8002f94:	1e0b      	subs	r3, r1, #0
 8002f96:	d113      	bne.n	8002fc0 <testHandler+0x274>
 8002f98:	4b39      	ldr	r3, [pc, #228]	; (8003080 <testHandler+0x334>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d103      	bne.n	8002fa8 <testHandler+0x25c>
 8002fa0:	4b37      	ldr	r3, [pc, #220]	; (8003080 <testHandler+0x334>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <testHandler+0x274>
 8002fa8:	4b2f      	ldr	r3, [pc, #188]	; (8003068 <testHandler+0x31c>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2204      	movs	r2, #4
 8002fae:	4013      	ands	r3, r2
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <testHandler+0x274>
#endif
		{
			flags.meas.measRequest = 1;
 8002fb6:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <testHandler+0x31c>)
 8002fb8:	7d1a      	ldrb	r2, [r3, #20]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po deseti minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
 8002fc0:	4b2f      	ldr	r3, [pc, #188]	; (8003080 <testHandler+0x334>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	dc00      	bgt.n	8002fca <testHandler+0x27e>
 8002fc8:	e0d1      	b.n	800316e <testHandler+0x422>
#endif
		{
			testPhase++;
 8002fca:	4b28      	ldr	r3, [pc, #160]	; (800306c <testHandler+0x320>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <testHandler+0x320>)
 8002fd4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002fd6:	e0ca      	b.n	800316e <testHandler+0x422>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8002fd8:	4b23      	ldr	r3, [pc, #140]	; (8003068 <testHandler+0x31c>)
 8002fda:	7d1b      	ldrb	r3, [r3, #20]
 8002fdc:	2208      	movs	r2, #8
 8002fde:	4013      	ands	r3, r2
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d000      	beq.n	8002fe8 <testHandler+0x29c>
 8002fe6:	e0c4      	b.n	8003172 <testHandler+0x426>
		{
			flags.ui.notice = 1;
 8002fe8:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <testHandler+0x31c>)
 8002fea:	7c1a      	ldrb	r2, [r3, #16]
 8002fec:	2108      	movs	r1, #8
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <testHandler+0x31c>)
 8002ff4:	7e1a      	ldrb	r2, [r3, #24]
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <testHandler+0x320>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	b2da      	uxtb	r2, r3
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <testHandler+0x320>)
 8003006:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 8003008:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <testHandler+0x338>)
 800300a:	2200      	movs	r2, #0
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	0018      	movs	r0, r3
 8003010:	f001 fa33 	bl	800447a <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <testHandler+0x338>)
 8003016:	2200      	movs	r2, #0
 8003018:	2140      	movs	r1, #64	; 0x40
 800301a:	0018      	movs	r0, r3
 800301c:	f001 fa2d 	bl	800447a <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8003020:	4b16      	ldr	r3, [pc, #88]	; (800307c <testHandler+0x330>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <testHandler+0x330>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2110      	movs	r1, #16
 800302c:	430a      	orrs	r2, r1
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <testHandler+0x330>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	781a      	ldrb	r2, [r3, #0]
 8003038:	4b10      	ldr	r3, [pc, #64]	; (800307c <testHandler+0x330>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2101      	movs	r1, #1
 800303e:	430a      	orrs	r2, r1
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]
			sendData();
 8003044:	f7ff fc2e 	bl	80028a4 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8003048:	2301      	movs	r3, #1
 800304a:	623b      	str	r3, [r7, #32]
 800304c:	e007      	b.n	800305e <testHandler+0x312>
			{
				sysTime[i] = 0;
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <testHandler+0x334>)
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	2100      	movs	r1, #0
 8003056:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	3301      	adds	r3, #1
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2b03      	cmp	r3, #3
 8003062:	ddf4      	ble.n	800304e <testHandler+0x302>
			}
		}
		break;
 8003064:	e085      	b.n	8003172 <testHandler+0x426>
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	200003d0 	.word	0x200003d0
 800306c:	2000040c 	.word	0x2000040c
 8003070:	0800e104 	.word	0x0800e104
 8003074:	200001fc 	.word	0x200001fc
 8003078:	0800e27c 	.word	0x0800e27c
 800307c:	20000414 	.word	0x20000414
 8003080:	200003c0 	.word	0x200003c0
 8003084:	48000800 	.word	0x48000800
 8003088:	48000400 	.word	0x48000400
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 800308c:	4b3d      	ldr	r3, [pc, #244]	; (8003184 <testHandler+0x438>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2202      	movs	r2, #2
 8003092:	4013      	ands	r3, r2
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <testHandler+0x364>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 800309a:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <testHandler+0x43c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	4b39      	ldr	r3, [pc, #228]	; (8003188 <testHandler+0x43c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2108      	movs	r1, #8
 80030a6:	404a      	eors	r2, r1
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]
			sendData();
 80030ac:	f7ff fbfa 	bl	80028a4 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
 80030b0:	4b36      	ldr	r3, [pc, #216]	; (800318c <testHandler+0x440>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2105      	movs	r1, #5
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7fd f9a8 	bl	800040c <__aeabi_idivmod>
 80030bc:	1e0b      	subs	r3, r1, #0
 80030be:	d114      	bne.n	80030ea <testHandler+0x39e>
 80030c0:	4b32      	ldr	r3, [pc, #200]	; (800318c <testHandler+0x440>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <testHandler+0x39e>
 80030c8:	4b2e      	ldr	r3, [pc, #184]	; (8003184 <testHandler+0x438>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2204      	movs	r2, #4
 80030ce:	4013      	ands	r3, r2
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <testHandler+0x39e>
#endif
		{
			flags.meas.onlyBattery = 1;
 80030d6:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <testHandler+0x438>)
 80030d8:	7d1a      	ldrb	r2, [r3, #20]
 80030da:	2120      	movs	r1, #32
 80030dc:	430a      	orrs	r2, r1
 80030de:	751a      	strb	r2, [r3, #20]
			flags.meas.measRequest = 1;
 80030e0:	4b28      	ldr	r3, [pc, #160]	; (8003184 <testHandler+0x438>)
 80030e2:	7d1a      	ldrb	r2, [r3, #20]
 80030e4:	2101      	movs	r1, #1
 80030e6:	430a      	orrs	r2, r1
 80030e8:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 2)	//___Po třech minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
 80030ea:	4b28      	ldr	r3, [pc, #160]	; (800318c <testHandler+0x440>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b0e      	cmp	r3, #14
 80030f0:	dd41      	ble.n	8003176 <testHandler+0x42a>
#endif
		{
			testPhase++;
 80030f2:	4b27      	ldr	r3, [pc, #156]	; (8003190 <testHandler+0x444>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	3301      	adds	r3, #1
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b25      	ldr	r3, [pc, #148]	; (8003190 <testHandler+0x444>)
 80030fc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80030fe:	e03a      	b.n	8003176 <testHandler+0x42a>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 8003100:	4b20      	ldr	r3, [pc, #128]	; (8003184 <testHandler+0x438>)
 8003102:	7d1b      	ldrb	r3, [r3, #20]
 8003104:	2208      	movs	r2, #8
 8003106:	4013      	ands	r3, r2
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d135      	bne.n	800317a <testHandler+0x42e>
		{
			flags.ui.done = 1;
 800310e:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <testHandler+0x438>)
 8003110:	7c1a      	ldrb	r2, [r3, #16]
 8003112:	2110      	movs	r1, #16
 8003114:	430a      	orrs	r2, r1
 8003116:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8003118:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <testHandler+0x438>)
 800311a:	7e1a      	ldrb	r2, [r3, #24]
 800311c:	2102      	movs	r1, #2
 800311e:	430a      	orrs	r2, r1
 8003120:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 8003122:	4b19      	ldr	r3, [pc, #100]	; (8003188 <testHandler+0x43c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	781a      	ldrb	r2, [r3, #0]
 8003128:	4b17      	ldr	r3, [pc, #92]	; (8003188 <testHandler+0x43c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2108      	movs	r1, #8
 800312e:	430a      	orrs	r2, r1
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <testHandler+0x43c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <testHandler+0x43c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2102      	movs	r1, #2
 8003140:	438a      	bics	r2, r1
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <testHandler+0x43c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <testHandler+0x43c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	438a      	bics	r2, r1
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]
			sendData();
 8003158:	f7ff fba4 	bl	80028a4 <sendData>

			flags.meas.onlyBattery = 0;
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <testHandler+0x438>)
 800315e:	7d1a      	ldrb	r2, [r3, #20]
 8003160:	2120      	movs	r1, #32
 8003162:	438a      	bics	r2, r1
 8003164:	751a      	strb	r2, [r3, #20]

			testPhase = WAITING;
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <testHandler+0x444>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800316c:	e005      	b.n	800317a <testHandler+0x42e>
		break;
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	e004      	b.n	800317c <testHandler+0x430>
		break;
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	e002      	b.n	800317c <testHandler+0x430>
		break;
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	e000      	b.n	800317c <testHandler+0x430>
		break;
 800317a:	46c0      	nop			; (mov r8, r8)

	}
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b00b      	add	sp, #44	; 0x2c
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	200003d0 	.word	0x200003d0
 8003188:	20000414 	.word	0x20000414
 800318c:	200003c0 	.word	0x200003c0
 8003190:	2000040c 	.word	0x2000040c

08003194 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
	if(supplyToTest > regCount)
 800319a:	4b31      	ldr	r3, [pc, #196]	; (8003260 <startTest+0xcc>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	4b30      	ldr	r3, [pc, #192]	; (8003264 <startTest+0xd0>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d856      	bhi.n	8003256 <startTest+0xc2>
	{
		return;
	}

	flags.ui.shortBeep = 1;
 80031a8:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <startTest+0xd4>)
 80031aa:	7c1a      	ldrb	r2, [r3, #16]
 80031ac:	2101      	movs	r1, #1
 80031ae:	430a      	orrs	r2, r1
 80031b0:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 80031b2:	4b2e      	ldr	r3, [pc, #184]	; (800326c <startTest+0xd8>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 80031b8:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <startTest+0xdc>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 80031be:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <startTest+0xd4>)
 80031c0:	7e1a      	ldrb	r2, [r3, #24]
 80031c2:	2102      	movs	r1, #2
 80031c4:	430a      	orrs	r2, r1
 80031c6:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[regCount - (supplyToTest+1)];	//První deska (spodní) je řízena posledním bytem
 80031c8:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <startTest+0xe0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a25      	ldr	r2, [pc, #148]	; (8003264 <startTest+0xd0>)
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	0011      	movs	r1, r2
 80031d2:	4a23      	ldr	r2, [pc, #140]	; (8003260 <startTest+0xcc>)
 80031d4:	7812      	ldrb	r2, [r2, #0]
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	3201      	adds	r2, #1
 80031da:	1a8a      	subs	r2, r1, r2
 80031dc:	189a      	adds	r2, r3, r2
 80031de:	4b26      	ldr	r3, [pc, #152]	; (8003278 <startTest+0xe4>)
 80031e0:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	e008      	b.n	80031fa <startTest+0x66>
	{
		regValues[i] = 0;
 80031e8:	4b22      	ldr	r3, [pc, #136]	; (8003274 <startTest+0xe0>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	18d3      	adds	r3, r2, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3301      	adds	r3, #1
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <startTest+0xd0>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	001a      	movs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4293      	cmp	r3, r2
 8003204:	dbf0      	blt.n	80031e8 <startTest+0x54>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 8003206:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <startTest+0xe4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <startTest+0xe4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2120      	movs	r1, #32
 8003212:	430a      	orrs	r2, r1
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 8003218:	4b17      	ldr	r3, [pc, #92]	; (8003278 <startTest+0xe4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	4b16      	ldr	r3, [pc, #88]	; (8003278 <startTest+0xe4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2102      	movs	r1, #2
 8003224:	430a      	orrs	r2, r1
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 800322a:	f7ff fb3b 	bl	80028a4 <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 800322e:	2301      	movs	r3, #1
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	e007      	b.n	8003244 <startTest+0xb0>
	{
		sysTime[i] = 0;
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <startTest+0xe8>)
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	0092      	lsls	r2, r2, #2
 800323a:	2100      	movs	r1, #0
 800323c:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b03      	cmp	r3, #3
 8003248:	ddf4      	ble.n	8003234 <startTest+0xa0>
	}

	flags.instructions.startRequest = 0;
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <startTest+0xd4>)
 800324c:	7b1a      	ldrb	r2, [r3, #12]
 800324e:	2101      	movs	r1, #1
 8003250:	438a      	bics	r2, r1
 8003252:	731a      	strb	r2, [r3, #12]
 8003254:	e000      	b.n	8003258 <startTest+0xc4>
		return;
 8003256:	46c0      	nop			; (mov r8, r8)
}
 8003258:	46bd      	mov	sp, r7
 800325a:	b002      	add	sp, #8
 800325c:	bd80      	pop	{r7, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	200003ee 	.word	0x200003ee
 8003264:	20000404 	.word	0x20000404
 8003268:	200003d0 	.word	0x200003d0
 800326c:	2000040c 	.word	0x2000040c
 8003270:	20000410 	.word	0x20000410
 8003274:	20000400 	.word	0x20000400
 8003278:	20000414 	.word	0x20000414
 800327c:	200003c0 	.word	0x200003c0

08003280 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 8003284:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <stopTest+0x64>)
 8003286:	7c1a      	ldrb	r2, [r3, #16]
 8003288:	2102      	movs	r1, #2
 800328a:	430a      	orrs	r2, r1
 800328c:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <stopTest+0x68>)
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <stopTest+0x6c>)
 8003296:	2200      	movs	r2, #0
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	0018      	movs	r0, r3
 800329c:	f001 f8ed 	bl	800447a <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <stopTest+0x6c>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	2140      	movs	r1, #64	; 0x40
 80032a6:	0018      	movs	r0, r3
 80032a8:	f001 f8e7 	bl	800447a <HAL_GPIO_WritePin>

	if(sourceInTesting != NULL)
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <stopTest+0x70>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00c      	beq.n	80032ce <stopTest+0x4e>
	{
		*sourceInTesting = 0;
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <stopTest+0x70>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
		ERROR_ON(*sourceInTesting);
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <stopTest+0x70>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <stopTest+0x70>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2104      	movs	r1, #4
 80032c8:	430a      	orrs	r2, r1
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]
	}
	sendData();
 80032ce:	f7ff fae9 	bl	80028a4 <sendData>

	flags.instructions.stopRequest = 0;
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <stopTest+0x64>)
 80032d4:	7b1a      	ldrb	r2, [r3, #12]
 80032d6:	2102      	movs	r1, #2
 80032d8:	438a      	bics	r2, r1
 80032da:	731a      	strb	r2, [r3, #12]
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	200003d0 	.word	0x200003d0
 80032e8:	2000040c 	.word	0x2000040c
 80032ec:	48000800 	.word	0x48000800
 80032f0:	20000414 	.word	0x20000414

080032f4 <Reset_Handler>:
 80032f4:	480d      	ldr	r0, [pc, #52]	; (800332c <LoopForever+0x2>)
 80032f6:	4685      	mov	sp, r0
 80032f8:	480d      	ldr	r0, [pc, #52]	; (8003330 <LoopForever+0x6>)
 80032fa:	490e      	ldr	r1, [pc, #56]	; (8003334 <LoopForever+0xa>)
 80032fc:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <LoopForever+0xe>)
 80032fe:	2300      	movs	r3, #0
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:
 8003302:	58d4      	ldr	r4, [r2, r3]
 8003304:	50c4      	str	r4, [r0, r3]
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:
 8003308:	18c4      	adds	r4, r0, r3
 800330a:	428c      	cmp	r4, r1
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <LoopForever+0x12>)
 8003310:	4c0b      	ldr	r4, [pc, #44]	; (8003340 <LoopForever+0x16>)
 8003312:	2300      	movs	r3, #0
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:
 800331a:	42a2      	cmp	r2, r4
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>
 800331e:	f7ff fd05 	bl	8002d2c <SystemInit>
 8003322:	f00a f9e7 	bl	800d6f4 <__libc_init_array>
 8003326:	f7fd ffcb 	bl	80012c0 <main>

0800332a <LoopForever>:
 800332a:	e7fe      	b.n	800332a <LoopForever>
 800332c:	20004000 	.word	0x20004000
 8003330:	20000000 	.word	0x20000000
 8003334:	200001e0 	.word	0x200001e0
 8003338:	0800e3c4 	.word	0x0800e3c4
 800333c:	200001e0 	.word	0x200001e0
 8003340:	200015dc 	.word	0x200015dc

08003344 <CEC_CAN_IRQHandler>:
 8003344:	e7fe      	b.n	8003344 <CEC_CAN_IRQHandler>
	...

08003348 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <HAL_Init+0x24>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_Init+0x24>)
 8003352:	2110      	movs	r1, #16
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003358:	2003      	movs	r0, #3
 800335a:	f000 f809 	bl	8003370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800335e:	f7ff fadd 	bl	800291c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	40022000 	.word	0x40022000

08003370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_InitTick+0x5c>)
 800337a:	681c      	ldr	r4, [r3, #0]
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_InitTick+0x60>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	0019      	movs	r1, r3
 8003382:	23fa      	movs	r3, #250	; 0xfa
 8003384:	0098      	lsls	r0, r3, #2
 8003386:	f7fc fed1 	bl	800012c <__udivsi3>
 800338a:	0003      	movs	r3, r0
 800338c:	0019      	movs	r1, r3
 800338e:	0020      	movs	r0, r4
 8003390:	f7fc fecc 	bl	800012c <__udivsi3>
 8003394:	0003      	movs	r3, r0
 8003396:	0018      	movs	r0, r3
 8003398:	f000 fe4f 	bl	800403a <HAL_SYSTICK_Config>
 800339c:	1e03      	subs	r3, r0, #0
 800339e:	d001      	beq.n	80033a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e00f      	b.n	80033c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d80b      	bhi.n	80033c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	2301      	movs	r3, #1
 80033ae:	425b      	negs	r3, r3
 80033b0:	2200      	movs	r2, #0
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 fe1c 	bl	8003ff0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_InitTick+0x64>)
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e000      	b.n	80033c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b003      	add	sp, #12
 80033ca:	bd90      	pop	{r4, r7, pc}
 80033cc:	20000000 	.word	0x20000000
 80033d0:	20000008 	.word	0x20000008
 80033d4:	20000004 	.word	0x20000004

080033d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_IncTick+0x1c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	001a      	movs	r2, r3
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_IncTick+0x20>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	18d2      	adds	r2, r2, r3
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <HAL_IncTick+0x20>)
 80033ea:	601a      	str	r2, [r3, #0]
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	20000008 	.word	0x20000008
 80033f8:	20000418 	.word	0x20000418

080033fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003400:	4b02      	ldr	r3, [pc, #8]	; (800340c <HAL_GetTick+0x10>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	20000418 	.word	0x20000418

08003410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003418:	f7ff fff0 	bl	80033fc <HAL_GetTick>
 800341c:	0003      	movs	r3, r0
 800341e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3301      	adds	r3, #1
 8003428:	d005      	beq.n	8003436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_Delay+0x44>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	001a      	movs	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	189b      	adds	r3, r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	f7ff ffe0 	bl	80033fc <HAL_GetTick>
 800343c:	0002      	movs	r2, r0
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	429a      	cmp	r2, r3
 8003446:	d8f7      	bhi.n	8003438 <HAL_Delay+0x28>
  {
  }
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46bd      	mov	sp, r7
 800344e:	b004      	add	sp, #16
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	20000008 	.word	0x20000008

08003458 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003460:	230f      	movs	r3, #15
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e125      	b.n	80036c2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2234      	movs	r2, #52	; 0x34
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f7ff fa68 	bl	8002964 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	2210      	movs	r2, #16
 800349a:	4013      	ands	r3, r2
 800349c:	d000      	beq.n	80034a0 <HAL_ADC_Init+0x48>
 800349e:	e103      	b.n	80036a8 <HAL_ADC_Init+0x250>
 80034a0:	230f      	movs	r3, #15
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d000      	beq.n	80034ac <HAL_ADC_Init+0x54>
 80034aa:	e0fd      	b.n	80036a8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2204      	movs	r2, #4
 80034b4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80034b6:	d000      	beq.n	80034ba <HAL_ADC_Init+0x62>
 80034b8:	e0f6      	b.n	80036a8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	4a83      	ldr	r2, [pc, #524]	; (80036cc <HAL_ADC_Init+0x274>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	2202      	movs	r2, #2
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2203      	movs	r2, #3
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d112      	bne.n	80034fe <HAL_ADC_Init+0xa6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2201      	movs	r2, #1
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d009      	beq.n	80034fa <HAL_ADC_Init+0xa2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	401a      	ands	r2, r3
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_Init+0xa6>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_ADC_Init+0xa8>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d116      	bne.n	8003532 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2218      	movs	r2, #24
 800350c:	4393      	bics	r3, r2
 800350e:	0019      	movs	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	0899      	lsrs	r1, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4964      	ldr	r1, [pc, #400]	; (80036d0 <HAL_ADC_Init+0x278>)
 800353e:	400a      	ands	r2, r1
 8003540:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7e1b      	ldrb	r3, [r3, #24]
 8003546:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	7e5b      	ldrb	r3, [r3, #25]
 800354c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800354e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7e9b      	ldrb	r3, [r3, #26]
 8003554:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003556:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	2b01      	cmp	r3, #1
 800355e:	d002      	beq.n	8003566 <HAL_ADC_Init+0x10e>
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	015b      	lsls	r3, r3, #5
 8003564:	e000      	b.n	8003568 <HAL_ADC_Init+0x110>
 8003566:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003568:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800356e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d101      	bne.n	800357c <HAL_ADC_Init+0x124>
 8003578:	2304      	movs	r3, #4
 800357a:	e000      	b.n	800357e <HAL_ADC_Init+0x126>
 800357c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800357e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2124      	movs	r1, #36	; 0x24
 8003584:	5c5b      	ldrb	r3, [r3, r1]
 8003586:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003588:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4313      	orrs	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	7edb      	ldrb	r3, [r3, #27]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d115      	bne.n	80035c4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	7e9b      	ldrb	r3, [r3, #26]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2280      	movs	r2, #128	; 0x80
 80035a4:	0252      	lsls	r2, r2, #9
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	e00b      	b.n	80035c4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	2220      	movs	r2, #32
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	2201      	movs	r2, #1
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	23c2      	movs	r3, #194	; 0xc2
 80035ca:	33ff      	adds	r3, #255	; 0xff
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d007      	beq.n	80035e0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80035d8:	4313      	orrs	r3, r2
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68d9      	ldr	r1, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	2380      	movs	r3, #128	; 0x80
 80035f6:	055b      	lsls	r3, r3, #21
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d01b      	beq.n	8003634 <HAL_ADC_Init+0x1dc>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d017      	beq.n	8003634 <HAL_ADC_Init+0x1dc>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	2b02      	cmp	r3, #2
 800360a:	d013      	beq.n	8003634 <HAL_ADC_Init+0x1dc>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	2b03      	cmp	r3, #3
 8003612:	d00f      	beq.n	8003634 <HAL_ADC_Init+0x1dc>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	2b04      	cmp	r3, #4
 800361a:	d00b      	beq.n	8003634 <HAL_ADC_Init+0x1dc>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	2b05      	cmp	r3, #5
 8003622:	d007      	beq.n	8003634 <HAL_ADC_Init+0x1dc>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	2b06      	cmp	r3, #6
 800362a:	d003      	beq.n	8003634 <HAL_ADC_Init+0x1dc>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	2b07      	cmp	r3, #7
 8003632:	d112      	bne.n	800365a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2107      	movs	r1, #7
 8003640:	438a      	bics	r2, r1
 8003642:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6959      	ldr	r1, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	2207      	movs	r2, #7
 8003650:	401a      	ands	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <HAL_ADC_Init+0x27c>)
 8003662:	4013      	ands	r3, r2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d10b      	bne.n	8003682 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	2203      	movs	r2, #3
 8003676:	4393      	bics	r3, r2
 8003678:	2201      	movs	r2, #1
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003680:	e01c      	b.n	80036bc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	2212      	movs	r2, #18
 8003688:	4393      	bics	r3, r2
 800368a:	2210      	movs	r2, #16
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	2201      	movs	r2, #1
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800369e:	230f      	movs	r3, #15
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80036a6:	e009      	b.n	80036bc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	2210      	movs	r2, #16
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80036b4:	230f      	movs	r3, #15
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036bc:	230f      	movs	r3, #15
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	781b      	ldrb	r3, [r3, #0]
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b004      	add	sp, #16
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	fffffefd 	.word	0xfffffefd
 80036d0:	fffe0219 	.word	0xfffe0219
 80036d4:	833fffe7 	.word	0x833fffe7

080036d8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e0:	230f      	movs	r3, #15
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2204      	movs	r2, #4
 80036f0:	4013      	ands	r3, r2
 80036f2:	d156      	bne.n	80037a2 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2234      	movs	r2, #52	; 0x34
 80036f8:	5c9b      	ldrb	r3, [r3, r2]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_ADC_Start_IT+0x2a>
 80036fe:	2302      	movs	r3, #2
 8003700:	e056      	b.n	80037b0 <HAL_ADC_Start_IT+0xd8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2234      	movs	r2, #52	; 0x34
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	7e5b      	ldrb	r3, [r3, #25]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d007      	beq.n	8003722 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003712:	230f      	movs	r3, #15
 8003714:	18fc      	adds	r4, r7, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	0018      	movs	r0, r3
 800371a:	f000 fa7b 	bl	8003c14 <ADC_Enable>
 800371e:	0003      	movs	r3, r0
 8003720:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003722:	230f      	movs	r3, #15
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d13e      	bne.n	80037aa <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <HAL_ADC_Start_IT+0xe0>)
 8003732:	4013      	ands	r3, r2
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	0052      	lsls	r2, r2, #1
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2234      	movs	r2, #52	; 0x34
 8003748:	2100      	movs	r1, #0
 800374a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	221c      	movs	r2, #28
 8003752:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d110      	bne.n	800377e <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2104      	movs	r1, #4
 8003768:	438a      	bics	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2118      	movs	r1, #24
 8003778:	430a      	orrs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]
          break;
 800377c:	e008      	b.n	8003790 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	211c      	movs	r1, #28
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
          break;
 800378e:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2104      	movs	r1, #4
 800379c:	430a      	orrs	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	e003      	b.n	80037aa <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037a2:	230f      	movs	r3, #15
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	2202      	movs	r2, #2
 80037a8:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80037aa:	230f      	movs	r3, #15
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	781b      	ldrb	r3, [r3, #0]
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b005      	add	sp, #20
 80037b6:	bd90      	pop	{r4, r7, pc}
 80037b8:	fffff0fe 	.word	0xfffff0fe

080037bc <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80037bc:	b5b0      	push	{r4, r5, r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c4:	230f      	movs	r3, #15
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2234      	movs	r2, #52	; 0x34
 80037d0:	5c9b      	ldrb	r3, [r3, r2]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_ADC_Stop_IT+0x1e>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e033      	b.n	8003842 <HAL_ADC_Stop_IT+0x86>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2234      	movs	r2, #52	; 0x34
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80037e2:	250f      	movs	r5, #15
 80037e4:	197c      	adds	r4, r7, r5
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 fb08 	bl	8003dfe <ADC_ConversionStop>
 80037ee:	0003      	movs	r3, r0
 80037f0:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037f2:	0028      	movs	r0, r5
 80037f4:	183b      	adds	r3, r7, r0
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d11b      	bne.n	8003834 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	211c      	movs	r1, #28
 8003808:	438a      	bics	r2, r1
 800380a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800380c:	0005      	movs	r5, r0
 800380e:	183c      	adds	r4, r7, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	0018      	movs	r0, r3
 8003814:	f000 fa82 	bl	8003d1c <ADC_Disable>
 8003818:	0003      	movs	r3, r0
 800381a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800381c:	197b      	adds	r3, r7, r5
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d107      	bne.n	8003834 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	4a08      	ldr	r2, [pc, #32]	; (800384c <HAL_ADC_Stop_IT+0x90>)
 800382a:	4013      	ands	r3, r2
 800382c:	2201      	movs	r2, #1
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2234      	movs	r2, #52	; 0x34
 8003838:	2100      	movs	r1, #0
 800383a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800383c:	230f      	movs	r3, #15
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	781b      	ldrb	r3, [r3, #0]
}
 8003842:	0018      	movs	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	b004      	add	sp, #16
 8003848:	bdb0      	pop	{r4, r5, r7, pc}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	fffffefe 	.word	0xfffffefe

08003850 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800385e:	0018      	movs	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	b002      	add	sp, #8
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2204      	movs	r2, #4
 8003878:	4013      	ands	r3, r2
 800387a:	2b04      	cmp	r3, #4
 800387c:	d106      	bne.n	800388c <HAL_ADC_IRQHandler+0x24>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2204      	movs	r2, #4
 8003886:	4013      	ands	r3, r2
 8003888:	2b04      	cmp	r3, #4
 800388a:	d00d      	beq.n	80038a8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2208      	movs	r2, #8
 8003894:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003896:	2b08      	cmp	r3, #8
 8003898:	d14f      	bne.n	800393a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2208      	movs	r2, #8
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d148      	bne.n	800393a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	2210      	movs	r2, #16
 80038ae:	4013      	ands	r3, r2
 80038b0:	d106      	bne.n	80038c0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	0092      	lsls	r2, r2, #2
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	23c0      	movs	r3, #192	; 0xc0
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	4013      	ands	r3, r2
 80038cc:	d12d      	bne.n	800392a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d129      	bne.n	800392a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2208      	movs	r2, #8
 80038de:	4013      	ands	r3, r2
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d122      	bne.n	800392a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2204      	movs	r2, #4
 80038ec:	4013      	ands	r3, r2
 80038ee:	d110      	bne.n	8003912 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	210c      	movs	r1, #12
 80038fc:	438a      	bics	r2, r1
 80038fe:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <HAL_ADC_IRQHandler+0x16c>)
 8003906:	4013      	ands	r3, r2
 8003908:	2201      	movs	r2, #1
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
 8003910:	e00b      	b.n	800392a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	2220      	movs	r2, #32
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	2201      	movs	r2, #1
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0018      	movs	r0, r3
 800392e:	f7fd fcb3 	bl	8001298 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	220c      	movs	r2, #12
 8003938:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	4013      	ands	r3, r2
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d115      	bne.n	8003974 <HAL_ADC_IRQHandler+0x10c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	4013      	ands	r3, r2
 8003952:	2b80      	cmp	r3, #128	; 0x80
 8003954:	d10e      	bne.n	8003974 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	0252      	lsls	r2, r2, #9
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	0018      	movs	r0, r3
 8003968:	f000 f836 	bl	80039d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2280      	movs	r2, #128	; 0x80
 8003972:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2210      	movs	r2, #16
 800397c:	4013      	ands	r3, r2
 800397e:	2b10      	cmp	r3, #16
 8003980:	d123      	bne.n	80039ca <HAL_ADC_IRQHandler+0x162>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2210      	movs	r2, #16
 800398a:	4013      	ands	r3, r2
 800398c:	2b10      	cmp	r3, #16
 800398e:	d11c      	bne.n	80039ca <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	2b01      	cmp	r3, #1
 8003996:	d006      	beq.n	80039a6 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d10d      	bne.n	80039c2 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	2202      	movs	r2, #2
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2210      	movs	r2, #16
 80039b8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 f813 	bl	80039e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2210      	movs	r2, #16
 80039c8:	601a      	str	r2, [r3, #0]
  }

}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	fffffefe 	.word	0xfffffefe

080039d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a02:	230f      	movs	r3, #15
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	055b      	lsls	r3, r3, #21
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d011      	beq.n	8003a3e <HAL_ADC_ConfigChannel+0x46>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d00d      	beq.n	8003a3e <HAL_ADC_ConfigChannel+0x46>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d009      	beq.n	8003a3e <HAL_ADC_ConfigChannel+0x46>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d005      	beq.n	8003a3e <HAL_ADC_ConfigChannel+0x46>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d001      	beq.n	8003a3e <HAL_ADC_ConfigChannel+0x46>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2234      	movs	r2, #52	; 0x34
 8003a42:	5c9b      	ldrb	r3, [r3, r2]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x54>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e0d0      	b.n	8003bee <HAL_ADC_ConfigChannel+0x1f6>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2234      	movs	r2, #52	; 0x34
 8003a50:	2101      	movs	r1, #1
 8003a52:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d000      	beq.n	8003a62 <HAL_ADC_ConfigChannel+0x6a>
 8003a60:	e0b4      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a64      	ldr	r2, [pc, #400]	; (8003bf8 <HAL_ADC_ConfigChannel+0x200>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x76>
 8003a6c:	e082      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	055b      	lsls	r3, r3, #21
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d037      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x108>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d033      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x108>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d02f      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x108>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d02b      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x108>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d027      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x108>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	2b05      	cmp	r3, #5
 8003ab6:	d023      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x108>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	2b06      	cmp	r3, #6
 8003abe:	d01f      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x108>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	2b07      	cmp	r3, #7
 8003ac6:	d01b      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	2107      	movs	r1, #7
 8003ad4:	400b      	ands	r3, r1
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d012      	beq.n	8003b00 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2107      	movs	r1, #7
 8003ae6:	438a      	bics	r2, r1
 8003ae8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6959      	ldr	r1, [r3, #20]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2207      	movs	r2, #7
 8003af6:	401a      	ands	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d007      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x120>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b11      	cmp	r3, #17
 8003b0e:	d003      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x120>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b12      	cmp	r3, #18
 8003b16:	d163      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b18:	4b38      	ldr	r3, [pc, #224]	; (8003bfc <HAL_ADC_ConfigChannel+0x204>)
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d009      	beq.n	8003b38 <HAL_ADC_ConfigChannel+0x140>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b11      	cmp	r3, #17
 8003b2a:	d102      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x13a>
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	03db      	lsls	r3, r3, #15
 8003b30:	e004      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x144>
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	045b      	lsls	r3, r3, #17
 8003b36:	e001      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x144>
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	4a2f      	ldr	r2, [pc, #188]	; (8003bfc <HAL_ADC_ConfigChannel+0x204>)
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d14a      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b4a:	4b2d      	ldr	r3, [pc, #180]	; (8003c00 <HAL_ADC_ConfigChannel+0x208>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	492d      	ldr	r1, [pc, #180]	; (8003c04 <HAL_ADC_ConfigChannel+0x20c>)
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7fc faeb 	bl	800012c <__udivsi3>
 8003b56:	0003      	movs	r3, r0
 8003b58:	001a      	movs	r2, r3
 8003b5a:	0013      	movs	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	189b      	adds	r3, r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b64:	e002      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f9      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x16e>
 8003b72:	e035      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4099      	lsls	r1, r3
 8003b82:	000b      	movs	r3, r1
 8003b84:	43d9      	mvns	r1, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	400a      	ands	r2, r1
 8003b8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d007      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x1ae>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b11      	cmp	r3, #17
 8003b9c:	d003      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x1ae>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b12      	cmp	r3, #18
 8003ba4:	d11c      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_ADC_ConfigChannel+0x204>)
 8003ba8:	6819      	ldr	r1, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	d007      	beq.n	8003bc2 <HAL_ADC_ConfigChannel+0x1ca>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b11      	cmp	r3, #17
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x1c6>
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <HAL_ADC_ConfigChannel+0x210>)
 8003bbc:	e002      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x1cc>
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <HAL_ADC_ConfigChannel+0x214>)
 8003bc0:	e000      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x1cc>
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <HAL_ADC_ConfigChannel+0x218>)
 8003bc4:	4a0d      	ldr	r2, [pc, #52]	; (8003bfc <HAL_ADC_ConfigChannel+0x204>)
 8003bc6:	400b      	ands	r3, r1
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e009      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003bd8:	230f      	movs	r3, #15
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2234      	movs	r2, #52	; 0x34
 8003be4:	2100      	movs	r1, #0
 8003be6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003be8:	230f      	movs	r3, #15
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	781b      	ldrb	r3, [r3, #0]
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	00001001 	.word	0x00001001
 8003bfc:	40012708 	.word	0x40012708
 8003c00:	20000000 	.word	0x20000000
 8003c04:	000f4240 	.word	0x000f4240
 8003c08:	ffbfffff 	.word	0xffbfffff
 8003c0c:	feffffff 	.word	0xfeffffff
 8003c10:	ff7fffff 	.word	0xff7fffff

08003c14 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d112      	bne.n	8003c58 <ADC_Enable+0x44>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d009      	beq.n	8003c54 <ADC_Enable+0x40>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d101      	bne.n	8003c58 <ADC_Enable+0x44>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <ADC_Enable+0x46>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d152      	bne.n	8003d04 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a2a      	ldr	r2, [pc, #168]	; (8003d10 <ADC_Enable+0xfc>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	d00d      	beq.n	8003c86 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	2210      	movs	r2, #16
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e03f      	b.n	8003d06 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c96:	4b1f      	ldr	r3, [pc, #124]	; (8003d14 <ADC_Enable+0x100>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	491f      	ldr	r1, [pc, #124]	; (8003d18 <ADC_Enable+0x104>)
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7fc fa45 	bl	800012c <__udivsi3>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ca6:	e002      	b.n	8003cae <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f9      	bne.n	8003ca8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cb4:	f7ff fba2 	bl	80033fc <HAL_GetTick>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cbc:	e01b      	b.n	8003cf6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cbe:	f7ff fb9d 	bl	80033fc <HAL_GetTick>
 8003cc2:	0002      	movs	r2, r0
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d914      	bls.n	8003cf6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d00d      	beq.n	8003cf6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	2210      	movs	r2, #16
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	2201      	movs	r2, #1
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e007      	b.n	8003d06 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d1dc      	bne.n	8003cbe <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b004      	add	sp, #16
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	80000017 	.word	0x80000017
 8003d14:	20000000 	.word	0x20000000
 8003d18:	000f4240 	.word	0x000f4240

08003d1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d112      	bne.n	8003d5c <ADC_Disable+0x40>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d009      	beq.n	8003d58 <ADC_Disable+0x3c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	401a      	ands	r2, r3
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d101      	bne.n	8003d5c <ADC_Disable+0x40>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <ADC_Disable+0x42>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d048      	beq.n	8003df4 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2205      	movs	r2, #5
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d110      	bne.n	8003d92 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2203      	movs	r2, #3
 8003d86:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d88:	f7ff fb38 	bl	80033fc <HAL_GetTick>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d90:	e029      	b.n	8003de6 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	2210      	movs	r2, #16
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	2201      	movs	r2, #1
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e023      	b.n	8003df6 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dae:	f7ff fb25 	bl	80033fc <HAL_GetTick>
 8003db2:	0002      	movs	r2, r0
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d914      	bls.n	8003de6 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10d      	bne.n	8003de6 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	2210      	movs	r2, #16
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	2201      	movs	r2, #1
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e007      	b.n	8003df6 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2201      	movs	r2, #1
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d0dc      	beq.n	8003dae <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	0018      	movs	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b004      	add	sp, #16
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2204      	movs	r2, #4
 8003e12:	4013      	ands	r3, r2
 8003e14:	d03a      	beq.n	8003e8c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d10d      	bne.n	8003e40 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003e2e:	d107      	bne.n	8003e40 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2110      	movs	r1, #16
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e40:	f7ff fadc 	bl	80033fc <HAL_GetTick>
 8003e44:	0003      	movs	r3, r0
 8003e46:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003e48:	e01a      	b.n	8003e80 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e4a:	f7ff fad7 	bl	80033fc <HAL_GetTick>
 8003e4e:	0002      	movs	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d913      	bls.n	8003e80 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2204      	movs	r2, #4
 8003e60:	4013      	ands	r3, r2
 8003e62:	d00d      	beq.n	8003e80 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	2210      	movs	r2, #16
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e74:	2201      	movs	r2, #1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e006      	b.n	8003e8e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2204      	movs	r2, #4
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d1de      	bne.n	8003e4a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b004      	add	sp, #16
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ea4:	1dfb      	adds	r3, r7, #7
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8003eaa:	d809      	bhi.n	8003ec0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eac:	1dfb      	adds	r3, r7, #7
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	001a      	movs	r2, r3
 8003eb2:	231f      	movs	r3, #31
 8003eb4:	401a      	ands	r2, r3
 8003eb6:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <__NVIC_EnableIRQ+0x30>)
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4091      	lsls	r1, r2
 8003ebc:	000a      	movs	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]
  }
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b002      	add	sp, #8
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	6039      	str	r1, [r7, #0]
 8003ed6:	1dfb      	adds	r3, r7, #7
 8003ed8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003eda:	1dfb      	adds	r3, r7, #7
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee0:	d828      	bhi.n	8003f34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ee2:	4a2f      	ldr	r2, [pc, #188]	; (8003fa0 <__NVIC_SetPriority+0xd4>)
 8003ee4:	1dfb      	adds	r3, r7, #7
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	33c0      	adds	r3, #192	; 0xc0
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	589b      	ldr	r3, [r3, r2]
 8003ef2:	1dfa      	adds	r2, r7, #7
 8003ef4:	7812      	ldrb	r2, [r2, #0]
 8003ef6:	0011      	movs	r1, r2
 8003ef8:	2203      	movs	r2, #3
 8003efa:	400a      	ands	r2, r1
 8003efc:	00d2      	lsls	r2, r2, #3
 8003efe:	21ff      	movs	r1, #255	; 0xff
 8003f00:	4091      	lsls	r1, r2
 8003f02:	000a      	movs	r2, r1
 8003f04:	43d2      	mvns	r2, r2
 8003f06:	401a      	ands	r2, r3
 8003f08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	019b      	lsls	r3, r3, #6
 8003f0e:	22ff      	movs	r2, #255	; 0xff
 8003f10:	401a      	ands	r2, r3
 8003f12:	1dfb      	adds	r3, r7, #7
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	0018      	movs	r0, r3
 8003f18:	2303      	movs	r3, #3
 8003f1a:	4003      	ands	r3, r0
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f20:	481f      	ldr	r0, [pc, #124]	; (8003fa0 <__NVIC_SetPriority+0xd4>)
 8003f22:	1dfb      	adds	r3, r7, #7
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	089b      	lsrs	r3, r3, #2
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	33c0      	adds	r3, #192	; 0xc0
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f32:	e031      	b.n	8003f98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f34:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <__NVIC_SetPriority+0xd8>)
 8003f36:	1dfb      	adds	r3, r7, #7
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	230f      	movs	r3, #15
 8003f3e:	400b      	ands	r3, r1
 8003f40:	3b08      	subs	r3, #8
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	3306      	adds	r3, #6
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	18d3      	adds	r3, r2, r3
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	1dfa      	adds	r2, r7, #7
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	0011      	movs	r1, r2
 8003f54:	2203      	movs	r2, #3
 8003f56:	400a      	ands	r2, r1
 8003f58:	00d2      	lsls	r2, r2, #3
 8003f5a:	21ff      	movs	r1, #255	; 0xff
 8003f5c:	4091      	lsls	r1, r2
 8003f5e:	000a      	movs	r2, r1
 8003f60:	43d2      	mvns	r2, r2
 8003f62:	401a      	ands	r2, r3
 8003f64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	019b      	lsls	r3, r3, #6
 8003f6a:	22ff      	movs	r2, #255	; 0xff
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	1dfb      	adds	r3, r7, #7
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	0018      	movs	r0, r3
 8003f74:	2303      	movs	r3, #3
 8003f76:	4003      	ands	r3, r0
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f7c:	4809      	ldr	r0, [pc, #36]	; (8003fa4 <__NVIC_SetPriority+0xd8>)
 8003f7e:	1dfb      	adds	r3, r7, #7
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	001c      	movs	r4, r3
 8003f84:	230f      	movs	r3, #15
 8003f86:	4023      	ands	r3, r4
 8003f88:	3b08      	subs	r3, #8
 8003f8a:	089b      	lsrs	r3, r3, #2
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	3306      	adds	r3, #6
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	18c3      	adds	r3, r0, r3
 8003f94:	3304      	adds	r3, #4
 8003f96:	601a      	str	r2, [r3, #0]
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b003      	add	sp, #12
 8003f9e:	bd90      	pop	{r4, r7, pc}
 8003fa0:	e000e100 	.word	0xe000e100
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	045b      	lsls	r3, r3, #17
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d301      	bcc.n	8003fc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e010      	b.n	8003fe2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <SysTick_Config+0x44>)
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	3a01      	subs	r2, #1
 8003fc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fc8:	2301      	movs	r3, #1
 8003fca:	425b      	negs	r3, r3
 8003fcc:	2103      	movs	r1, #3
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7ff ff7c 	bl	8003ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <SysTick_Config+0x44>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fda:	4b04      	ldr	r3, [pc, #16]	; (8003fec <SysTick_Config+0x44>)
 8003fdc:	2207      	movs	r2, #7
 8003fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b002      	add	sp, #8
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	e000e010 	.word	0xe000e010

08003ff0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	210f      	movs	r1, #15
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	1c02      	adds	r2, r0, #0
 8004000:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	187b      	adds	r3, r7, r1
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	b25b      	sxtb	r3, r3
 800400a:	0011      	movs	r1, r2
 800400c:	0018      	movs	r0, r3
 800400e:	f7ff ff5d 	bl	8003ecc <__NVIC_SetPriority>
}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b004      	add	sp, #16
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	0002      	movs	r2, r0
 8004022:	1dfb      	adds	r3, r7, #7
 8004024:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004026:	1dfb      	adds	r3, r7, #7
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	b25b      	sxtb	r3, r3
 800402c:	0018      	movs	r0, r3
 800402e:	f7ff ff33 	bl	8003e98 <__NVIC_EnableIRQ>
}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	b002      	add	sp, #8
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0018      	movs	r0, r3
 8004046:	f7ff ffaf 	bl	8003fa8 <SysTick_Config>
 800404a:	0003      	movs	r3, r0
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b002      	add	sp, #8
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2221      	movs	r2, #33	; 0x21
 8004060:	5c9b      	ldrb	r3, [r3, r2]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d008      	beq.n	800407a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2204      	movs	r2, #4
 800406c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	2100      	movs	r1, #0
 8004074:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e020      	b.n	80040bc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	210e      	movs	r1, #14
 8004086:	438a      	bics	r2, r1
 8004088:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2101      	movs	r1, #1
 8004096:	438a      	bics	r2, r1
 8004098:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	2101      	movs	r1, #1
 80040a4:	4091      	lsls	r1, r2
 80040a6:	000a      	movs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2221      	movs	r2, #33	; 0x21
 80040ae:	2101      	movs	r1, #1
 80040b0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	0018      	movs	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	b002      	add	sp, #8
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040cc:	210f      	movs	r1, #15
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2221      	movs	r2, #33	; 0x21
 80040d8:	5c9b      	ldrb	r3, [r3, r2]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d006      	beq.n	80040ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2204      	movs	r2, #4
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80040e6:	187b      	adds	r3, r7, r1
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	e028      	b.n	8004140 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	210e      	movs	r1, #14
 80040fa:	438a      	bics	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2101      	movs	r1, #1
 800410a:	438a      	bics	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	2101      	movs	r1, #1
 8004118:	4091      	lsls	r1, r2
 800411a:	000a      	movs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2221      	movs	r2, #33	; 0x21
 8004122:	2101      	movs	r1, #1
 8004124:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	2100      	movs	r1, #0
 800412c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	0010      	movs	r0, r2
 800413e:	4798      	blx	r3
    } 
  }
  return status;
 8004140:	230f      	movs	r3, #15
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	781b      	ldrb	r3, [r3, #0]
}
 8004146:	0018      	movs	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	b004      	add	sp, #16
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800415e:	e155      	b.n	800440c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2101      	movs	r1, #1
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4091      	lsls	r1, r2
 800416a:	000a      	movs	r2, r1
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d100      	bne.n	8004178 <HAL_GPIO_Init+0x28>
 8004176:	e146      	b.n	8004406 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2203      	movs	r2, #3
 800417e:	4013      	ands	r3, r2
 8004180:	2b01      	cmp	r3, #1
 8004182:	d005      	beq.n	8004190 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2203      	movs	r2, #3
 800418a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800418c:	2b02      	cmp	r3, #2
 800418e:	d130      	bne.n	80041f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	2203      	movs	r2, #3
 800419c:	409a      	lsls	r2, r3
 800419e:	0013      	movs	r3, r2
 80041a0:	43da      	mvns	r2, r3
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	409a      	lsls	r2, r3
 80041b2:	0013      	movs	r3, r2
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041c6:	2201      	movs	r2, #1
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	409a      	lsls	r2, r3
 80041cc:	0013      	movs	r3, r2
 80041ce:	43da      	mvns	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	2201      	movs	r2, #1
 80041de:	401a      	ands	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	409a      	lsls	r2, r3
 80041e4:	0013      	movs	r3, r2
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2203      	movs	r2, #3
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d017      	beq.n	800422e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	2203      	movs	r2, #3
 800420a:	409a      	lsls	r2, r3
 800420c:	0013      	movs	r3, r2
 800420e:	43da      	mvns	r2, r3
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4013      	ands	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	409a      	lsls	r2, r3
 8004220:	0013      	movs	r3, r2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2203      	movs	r2, #3
 8004234:	4013      	ands	r3, r2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d123      	bne.n	8004282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	08da      	lsrs	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3208      	adds	r2, #8
 8004242:	0092      	lsls	r2, r2, #2
 8004244:	58d3      	ldr	r3, [r2, r3]
 8004246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2207      	movs	r2, #7
 800424c:	4013      	ands	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	220f      	movs	r2, #15
 8004252:	409a      	lsls	r2, r3
 8004254:	0013      	movs	r3, r2
 8004256:	43da      	mvns	r2, r3
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2107      	movs	r1, #7
 8004266:	400b      	ands	r3, r1
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	409a      	lsls	r2, r3
 800426c:	0013      	movs	r3, r2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	08da      	lsrs	r2, r3, #3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3208      	adds	r2, #8
 800427c:	0092      	lsls	r2, r2, #2
 800427e:	6939      	ldr	r1, [r7, #16]
 8004280:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	2203      	movs	r2, #3
 800428e:	409a      	lsls	r2, r3
 8004290:	0013      	movs	r3, r2
 8004292:	43da      	mvns	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2203      	movs	r2, #3
 80042a0:	401a      	ands	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	409a      	lsls	r2, r3
 80042a8:	0013      	movs	r3, r2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	23c0      	movs	r3, #192	; 0xc0
 80042bc:	029b      	lsls	r3, r3, #10
 80042be:	4013      	ands	r3, r2
 80042c0:	d100      	bne.n	80042c4 <HAL_GPIO_Init+0x174>
 80042c2:	e0a0      	b.n	8004406 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042c4:	4b57      	ldr	r3, [pc, #348]	; (8004424 <HAL_GPIO_Init+0x2d4>)
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	4b56      	ldr	r3, [pc, #344]	; (8004424 <HAL_GPIO_Init+0x2d4>)
 80042ca:	2101      	movs	r1, #1
 80042cc:	430a      	orrs	r2, r1
 80042ce:	619a      	str	r2, [r3, #24]
 80042d0:	4b54      	ldr	r3, [pc, #336]	; (8004424 <HAL_GPIO_Init+0x2d4>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2201      	movs	r2, #1
 80042d6:	4013      	ands	r3, r2
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042dc:	4a52      	ldr	r2, [pc, #328]	; (8004428 <HAL_GPIO_Init+0x2d8>)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	3302      	adds	r3, #2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	589b      	ldr	r3, [r3, r2]
 80042e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2203      	movs	r2, #3
 80042ee:	4013      	ands	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	220f      	movs	r2, #15
 80042f4:	409a      	lsls	r2, r3
 80042f6:	0013      	movs	r3, r2
 80042f8:	43da      	mvns	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4013      	ands	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	2390      	movs	r3, #144	; 0x90
 8004304:	05db      	lsls	r3, r3, #23
 8004306:	429a      	cmp	r2, r3
 8004308:	d019      	beq.n	800433e <HAL_GPIO_Init+0x1ee>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a47      	ldr	r2, [pc, #284]	; (800442c <HAL_GPIO_Init+0x2dc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d013      	beq.n	800433a <HAL_GPIO_Init+0x1ea>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a46      	ldr	r2, [pc, #280]	; (8004430 <HAL_GPIO_Init+0x2e0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00d      	beq.n	8004336 <HAL_GPIO_Init+0x1e6>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a45      	ldr	r2, [pc, #276]	; (8004434 <HAL_GPIO_Init+0x2e4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d007      	beq.n	8004332 <HAL_GPIO_Init+0x1e2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a44      	ldr	r2, [pc, #272]	; (8004438 <HAL_GPIO_Init+0x2e8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d101      	bne.n	800432e <HAL_GPIO_Init+0x1de>
 800432a:	2304      	movs	r3, #4
 800432c:	e008      	b.n	8004340 <HAL_GPIO_Init+0x1f0>
 800432e:	2305      	movs	r3, #5
 8004330:	e006      	b.n	8004340 <HAL_GPIO_Init+0x1f0>
 8004332:	2303      	movs	r3, #3
 8004334:	e004      	b.n	8004340 <HAL_GPIO_Init+0x1f0>
 8004336:	2302      	movs	r3, #2
 8004338:	e002      	b.n	8004340 <HAL_GPIO_Init+0x1f0>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <HAL_GPIO_Init+0x1f0>
 800433e:	2300      	movs	r3, #0
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	2103      	movs	r1, #3
 8004344:	400a      	ands	r2, r1
 8004346:	0092      	lsls	r2, r2, #2
 8004348:	4093      	lsls	r3, r2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004350:	4935      	ldr	r1, [pc, #212]	; (8004428 <HAL_GPIO_Init+0x2d8>)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	3302      	adds	r3, #2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800435e:	4b37      	ldr	r3, [pc, #220]	; (800443c <HAL_GPIO_Init+0x2ec>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	43da      	mvns	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	025b      	lsls	r3, r3, #9
 8004376:	4013      	ands	r3, r2
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004382:	4b2e      	ldr	r3, [pc, #184]	; (800443c <HAL_GPIO_Init+0x2ec>)
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004388:	4b2c      	ldr	r3, [pc, #176]	; (800443c <HAL_GPIO_Init+0x2ec>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	43da      	mvns	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	029b      	lsls	r3, r3, #10
 80043a0:	4013      	ands	r3, r2
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043ac:	4b23      	ldr	r3, [pc, #140]	; (800443c <HAL_GPIO_Init+0x2ec>)
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_GPIO_Init+0x2ec>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	43da      	mvns	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	035b      	lsls	r3, r3, #13
 80043ca:	4013      	ands	r3, r2
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043d6:	4b19      	ldr	r3, [pc, #100]	; (800443c <HAL_GPIO_Init+0x2ec>)
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043dc:	4b17      	ldr	r3, [pc, #92]	; (800443c <HAL_GPIO_Init+0x2ec>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	43da      	mvns	r2, r3
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	039b      	lsls	r3, r3, #14
 80043f4:	4013      	ands	r3, r2
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004400:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_GPIO_Init+0x2ec>)
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3301      	adds	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	40da      	lsrs	r2, r3
 8004414:	1e13      	subs	r3, r2, #0
 8004416:	d000      	beq.n	800441a <HAL_GPIO_Init+0x2ca>
 8004418:	e6a2      	b.n	8004160 <HAL_GPIO_Init+0x10>
  } 
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	b006      	add	sp, #24
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	40010000 	.word	0x40010000
 800442c:	48000400 	.word	0x48000400
 8004430:	48000800 	.word	0x48000800
 8004434:	48000c00 	.word	0x48000c00
 8004438:	48001000 	.word	0x48001000
 800443c:	40010400 	.word	0x40010400

08004440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	000a      	movs	r2, r1
 800444a:	1cbb      	adds	r3, r7, #2
 800444c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	1cba      	adds	r2, r7, #2
 8004454:	8812      	ldrh	r2, [r2, #0]
 8004456:	4013      	ands	r3, r2
 8004458:	d004      	beq.n	8004464 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800445a:	230f      	movs	r3, #15
 800445c:	18fb      	adds	r3, r7, r3
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	e003      	b.n	800446c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004464:	230f      	movs	r3, #15
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800446c:	230f      	movs	r3, #15
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	781b      	ldrb	r3, [r3, #0]
  }
 8004472:	0018      	movs	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	b004      	add	sp, #16
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	0008      	movs	r0, r1
 8004484:	0011      	movs	r1, r2
 8004486:	1cbb      	adds	r3, r7, #2
 8004488:	1c02      	adds	r2, r0, #0
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	1c7b      	adds	r3, r7, #1
 800448e:	1c0a      	adds	r2, r1, #0
 8004490:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004492:	1c7b      	adds	r3, r7, #1
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800449a:	1cbb      	adds	r3, r7, #2
 800449c:	881a      	ldrh	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044a2:	e003      	b.n	80044ac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044a4:	1cbb      	adds	r3, r7, #2
 80044a6:	881a      	ldrh	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044ac:	46c0      	nop			; (mov r8, r8)
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b002      	add	sp, #8
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	000a      	movs	r2, r1
 80044be:	1cbb      	adds	r3, r7, #2
 80044c0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044c8:	1cbb      	adds	r3, r7, #2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4013      	ands	r3, r2
 80044d0:	041a      	lsls	r2, r3, #16
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	43db      	mvns	r3, r3
 80044d6:	1cb9      	adds	r1, r7, #2
 80044d8:	8809      	ldrh	r1, [r1, #0]
 80044da:	400b      	ands	r3, r1
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	619a      	str	r2, [r3, #24]
}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b004      	add	sp, #16
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	0002      	movs	r2, r0
 80044f4:	1dbb      	adds	r3, r7, #6
 80044f6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044f8:	4b09      	ldr	r3, [pc, #36]	; (8004520 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	1dba      	adds	r2, r7, #6
 80044fe:	8812      	ldrh	r2, [r2, #0]
 8004500:	4013      	ands	r3, r2
 8004502:	d008      	beq.n	8004516 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004506:	1dba      	adds	r2, r7, #6
 8004508:	8812      	ldrh	r2, [r2, #0]
 800450a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800450c:	1dbb      	adds	r3, r7, #6
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	0018      	movs	r0, r3
 8004512:	f7fc fe7d 	bl	8001210 <HAL_GPIO_EXTI_Callback>
  }
}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b002      	add	sp, #8
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	40010400 	.word	0x40010400

08004524 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004526:	b08b      	sub	sp, #44	; 0x2c
 8004528:	af06      	add	r7, sp, #24
 800452a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e0ff      	b.n	8004736 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a81      	ldr	r2, [pc, #516]	; (8004740 <HAL_PCD_Init+0x21c>)
 800453a:	5c9b      	ldrb	r3, [r3, r2]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d108      	bne.n	8004554 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	23aa      	movs	r3, #170	; 0xaa
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	2100      	movs	r1, #0
 800454a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0018      	movs	r0, r3
 8004550:	f008 fd6c 	bl	800d02c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a7a      	ldr	r2, [pc, #488]	; (8004740 <HAL_PCD_Init+0x21c>)
 8004558:	2103      	movs	r1, #3
 800455a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	0018      	movs	r0, r3
 8004562:	f004 fe0f 	bl	8009184 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004566:	230f      	movs	r3, #15
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	e058      	b.n	8004622 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004570:	200f      	movs	r0, #15
 8004572:	183b      	adds	r3, r7, r0
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	0013      	movs	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	189b      	adds	r3, r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	18cb      	adds	r3, r1, r3
 8004584:	3301      	adds	r3, #1
 8004586:	2201      	movs	r2, #1
 8004588:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800458a:	183b      	adds	r3, r7, r0
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	0013      	movs	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	189b      	adds	r3, r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	183a      	adds	r2, r7, r0
 800459c:	7812      	ldrb	r2, [r2, #0]
 800459e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045a0:	0004      	movs	r4, r0
 80045a2:	183b      	adds	r3, r7, r0
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	193b      	adds	r3, r7, r4
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	b298      	uxth	r0, r3
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	0013      	movs	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	18cb      	adds	r3, r1, r3
 80045b8:	3336      	adds	r3, #54	; 0x36
 80045ba:	1c02      	adds	r2, r0, #0
 80045bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045be:	193b      	adds	r3, r7, r4
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	0013      	movs	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	189b      	adds	r3, r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	18cb      	adds	r3, r1, r3
 80045d0:	3303      	adds	r3, #3
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045d6:	193b      	adds	r3, r7, r4
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	0013      	movs	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	189b      	adds	r3, r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	18cb      	adds	r3, r1, r3
 80045e6:	3338      	adds	r3, #56	; 0x38
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045ec:	193b      	adds	r3, r7, r4
 80045ee:	781a      	ldrb	r2, [r3, #0]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	0013      	movs	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	189b      	adds	r3, r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	18cb      	adds	r3, r1, r3
 80045fc:	333c      	adds	r3, #60	; 0x3c
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004602:	193b      	adds	r3, r7, r4
 8004604:	781a      	ldrb	r2, [r3, #0]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	0013      	movs	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	189b      	adds	r3, r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	18cb      	adds	r3, r1, r3
 8004612:	3340      	adds	r3, #64	; 0x40
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004618:	193b      	adds	r3, r7, r4
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	193b      	adds	r3, r7, r4
 800461e:	3201      	adds	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	210f      	movs	r1, #15
 8004624:	187b      	adds	r3, r7, r1
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	d39f      	bcc.n	8004570 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004630:	187b      	adds	r3, r7, r1
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	e056      	b.n	80046e6 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004638:	240f      	movs	r4, #15
 800463a:	193b      	adds	r3, r7, r4
 800463c:	781a      	ldrb	r2, [r3, #0]
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	236a      	movs	r3, #106	; 0x6a
 8004642:	33ff      	adds	r3, #255	; 0xff
 8004644:	0019      	movs	r1, r3
 8004646:	0013      	movs	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	189b      	adds	r3, r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	18c3      	adds	r3, r0, r3
 8004650:	185b      	adds	r3, r3, r1
 8004652:	2200      	movs	r2, #0
 8004654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004656:	193b      	adds	r3, r7, r4
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	23b4      	movs	r3, #180	; 0xb4
 800465e:	0059      	lsls	r1, r3, #1
 8004660:	0013      	movs	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	189b      	adds	r3, r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	18c3      	adds	r3, r0, r3
 800466a:	185b      	adds	r3, r3, r1
 800466c:	193a      	adds	r2, r7, r4
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004672:	193b      	adds	r3, r7, r4
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	236c      	movs	r3, #108	; 0x6c
 800467a:	33ff      	adds	r3, #255	; 0xff
 800467c:	0019      	movs	r1, r3
 800467e:	0013      	movs	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	189b      	adds	r3, r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	18c3      	adds	r3, r0, r3
 8004688:	185b      	adds	r3, r3, r1
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800468e:	193b      	adds	r3, r7, r4
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	23bc      	movs	r3, #188	; 0xbc
 8004696:	0059      	lsls	r1, r3, #1
 8004698:	0013      	movs	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	189b      	adds	r3, r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	18c3      	adds	r3, r0, r3
 80046a2:	185b      	adds	r3, r3, r1
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046a8:	193b      	adds	r3, r7, r4
 80046aa:	781a      	ldrb	r2, [r3, #0]
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	23be      	movs	r3, #190	; 0xbe
 80046b0:	0059      	lsls	r1, r3, #1
 80046b2:	0013      	movs	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	18c3      	adds	r3, r0, r3
 80046bc:	185b      	adds	r3, r3, r1
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046c2:	193b      	adds	r3, r7, r4
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	23c0      	movs	r3, #192	; 0xc0
 80046ca:	0059      	lsls	r1, r3, #1
 80046cc:	0013      	movs	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	18c3      	adds	r3, r0, r3
 80046d6:	185b      	adds	r3, r3, r1
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046dc:	193b      	adds	r3, r7, r4
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	193b      	adds	r3, r7, r4
 80046e2:	3201      	adds	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	230f      	movs	r3, #15
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d3a1      	bcc.n	8004638 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	466a      	mov	r2, sp
 80046fc:	0011      	movs	r1, r2
 80046fe:	001a      	movs	r2, r3
 8004700:	3210      	adds	r2, #16
 8004702:	ca70      	ldmia	r2!, {r4, r5, r6}
 8004704:	c170      	stmia	r1!, {r4, r5, r6}
 8004706:	ca30      	ldmia	r2!, {r4, r5}
 8004708:	c130      	stmia	r1!, {r4, r5}
 800470a:	6859      	ldr	r1, [r3, #4]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f004 fd52 	bl	80091b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	; 0x24
 8004718:	2100      	movs	r1, #0
 800471a:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a08      	ldr	r2, [pc, #32]	; (8004740 <HAL_PCD_Init+0x21c>)
 8004720:	2101      	movs	r1, #1
 8004722:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d103      	bne.n	8004734 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	0018      	movs	r0, r3
 8004730:	f001 fd34 	bl	800619c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	0018      	movs	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	b005      	add	sp, #20
 800473c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	000002a9 	.word	0x000002a9

08004744 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	23aa      	movs	r3, #170	; 0xaa
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	5cd3      	ldrb	r3, [r2, r3]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_PCD_Start+0x18>
 8004758:	2302      	movs	r3, #2
 800475a:	e014      	b.n	8004786 <HAL_PCD_Start+0x42>
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	23aa      	movs	r3, #170	; 0xaa
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	2101      	movs	r1, #1
 8004764:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	0018      	movs	r0, r3
 800476c:	f004 fcf4 	bl	8009158 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	0018      	movs	r0, r3
 8004776:	f006 fc4b 	bl	800b010 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	23aa      	movs	r3, #170	; 0xaa
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	2100      	movs	r1, #0
 8004782:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b002      	add	sp, #8
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	0018      	movs	r0, r3
 800479e:	f006 fc4d 	bl	800b03c <USB_ReadInterrupts>
 80047a2:	0002      	movs	r2, r0
 80047a4:	2380      	movs	r3, #128	; 0x80
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	401a      	ands	r2, r3
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d103      	bne.n	80047ba <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 fbbb 	bl	8004f30 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	0018      	movs	r0, r3
 80047c0:	f006 fc3c 	bl	800b03c <USB_ReadInterrupts>
 80047c4:	0002      	movs	r2, r0
 80047c6:	2380      	movs	r3, #128	; 0x80
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	401a      	ands	r2, r3
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d114      	bne.n	80047fe <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2244      	movs	r2, #68	; 0x44
 80047da:	5a9b      	ldrh	r3, [r3, r2]
 80047dc:	b29a      	uxth	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	49a2      	ldr	r1, [pc, #648]	; (8004a6c <HAL_PCD_IRQHandler+0x2dc>)
 80047e4:	400a      	ands	r2, r1
 80047e6:	b291      	uxth	r1, r2
 80047e8:	2244      	movs	r2, #68	; 0x44
 80047ea:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	0018      	movs	r0, r3
 80047f0:	f008 fca7 	bl	800d142 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2100      	movs	r1, #0
 80047f8:	0018      	movs	r0, r3
 80047fa:	f000 f945 	bl	8004a88 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	0018      	movs	r0, r3
 8004804:	f006 fc1a 	bl	800b03c <USB_ReadInterrupts>
 8004808:	0002      	movs	r2, r0
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	01db      	lsls	r3, r3, #7
 800480e:	401a      	ands	r2, r3
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	01db      	lsls	r3, r3, #7
 8004814:	429a      	cmp	r2, r3
 8004816:	d10b      	bne.n	8004830 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2244      	movs	r2, #68	; 0x44
 800481e:	5a9b      	ldrh	r3, [r3, r2]
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4992      	ldr	r1, [pc, #584]	; (8004a70 <HAL_PCD_IRQHandler+0x2e0>)
 8004828:	400a      	ands	r2, r1
 800482a:	b291      	uxth	r1, r2
 800482c:	2244      	movs	r2, #68	; 0x44
 800482e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0018      	movs	r0, r3
 8004836:	f006 fc01 	bl	800b03c <USB_ReadInterrupts>
 800483a:	0002      	movs	r2, r0
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	019b      	lsls	r3, r3, #6
 8004840:	401a      	ands	r2, r3
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	019b      	lsls	r3, r3, #6
 8004846:	429a      	cmp	r2, r3
 8004848:	d10b      	bne.n	8004862 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2244      	movs	r2, #68	; 0x44
 8004850:	5a9b      	ldrh	r3, [r3, r2]
 8004852:	b29a      	uxth	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4986      	ldr	r1, [pc, #536]	; (8004a74 <HAL_PCD_IRQHandler+0x2e4>)
 800485a:	400a      	ands	r2, r1
 800485c:	b291      	uxth	r1, r2
 800485e:	2244      	movs	r2, #68	; 0x44
 8004860:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	0018      	movs	r0, r3
 8004868:	f006 fbe8 	bl	800b03c <USB_ReadInterrupts>
 800486c:	0002      	movs	r2, r0
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	015b      	lsls	r3, r3, #5
 8004872:	401a      	ands	r2, r3
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	015b      	lsls	r3, r3, #5
 8004878:	429a      	cmp	r2, r3
 800487a:	d137      	bne.n	80048ec <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2240      	movs	r2, #64	; 0x40
 8004882:	5a9b      	ldrh	r3, [r3, r2]
 8004884:	b29a      	uxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2104      	movs	r1, #4
 800488c:	438a      	bics	r2, r1
 800488e:	b291      	uxth	r1, r2
 8004890:	2240      	movs	r2, #64	; 0x40
 8004892:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2240      	movs	r2, #64	; 0x40
 800489a:	5a9b      	ldrh	r3, [r3, r2]
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2108      	movs	r1, #8
 80048a4:	438a      	bics	r2, r1
 80048a6:	b291      	uxth	r1, r2
 80048a8:	2240      	movs	r2, #64	; 0x40
 80048aa:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	23b8      	movs	r3, #184	; 0xb8
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	5cd3      	ldrb	r3, [r2, r3]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d109      	bne.n	80048cc <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	23b8      	movs	r3, #184	; 0xb8
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	2100      	movs	r1, #0
 80048c0:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2100      	movs	r1, #0
 80048c6:	0018      	movs	r0, r3
 80048c8:	f001 fc92 	bl	80061f0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0018      	movs	r0, r3
 80048d0:	f008 fc78 	bl	800d1c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2244      	movs	r2, #68	; 0x44
 80048da:	5a9b      	ldrh	r3, [r3, r2]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4965      	ldr	r1, [pc, #404]	; (8004a78 <HAL_PCD_IRQHandler+0x2e8>)
 80048e4:	400a      	ands	r2, r1
 80048e6:	b291      	uxth	r1, r2
 80048e8:	2244      	movs	r2, #68	; 0x44
 80048ea:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f006 fba3 	bl	800b03c <USB_ReadInterrupts>
 80048f6:	0002      	movs	r2, r0
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	401a      	ands	r2, r3
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	429a      	cmp	r2, r3
 8004904:	d127      	bne.n	8004956 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2240      	movs	r2, #64	; 0x40
 800490c:	5a9b      	ldrh	r3, [r3, r2]
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2108      	movs	r1, #8
 8004916:	430a      	orrs	r2, r1
 8004918:	b291      	uxth	r1, r2
 800491a:	2240      	movs	r2, #64	; 0x40
 800491c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2244      	movs	r2, #68	; 0x44
 8004924:	5a9b      	ldrh	r3, [r3, r2]
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4953      	ldr	r1, [pc, #332]	; (8004a7c <HAL_PCD_IRQHandler+0x2ec>)
 800492e:	400a      	ands	r2, r1
 8004930:	b291      	uxth	r1, r2
 8004932:	2244      	movs	r2, #68	; 0x44
 8004934:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2240      	movs	r2, #64	; 0x40
 800493c:	5a9b      	ldrh	r3, [r3, r2]
 800493e:	b29a      	uxth	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2104      	movs	r1, #4
 8004946:	430a      	orrs	r2, r1
 8004948:	b291      	uxth	r1, r2
 800494a:	2240      	movs	r2, #64	; 0x40
 800494c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	0018      	movs	r0, r3
 8004952:	f008 fc1b 	bl	800d18c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	0018      	movs	r0, r3
 800495c:	f006 fb6e 	bl	800b03c <USB_ReadInterrupts>
 8004960:	0003      	movs	r3, r0
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	4013      	ands	r3, r2
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d145      	bne.n	80049f6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2244      	movs	r2, #68	; 0x44
 8004970:	5a9b      	ldrh	r3, [r3, r2]
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2180      	movs	r1, #128	; 0x80
 800497a:	438a      	bics	r2, r1
 800497c:	b291      	uxth	r1, r2
 800497e:	2244      	movs	r2, #68	; 0x44
 8004980:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	23b8      	movs	r3, #184	; 0xb8
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	5cd3      	ldrb	r3, [r2, r3]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d12f      	bne.n	80049ee <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2240      	movs	r2, #64	; 0x40
 8004994:	5a9b      	ldrh	r3, [r3, r2]
 8004996:	b29a      	uxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2104      	movs	r1, #4
 800499e:	430a      	orrs	r2, r1
 80049a0:	b291      	uxth	r1, r2
 80049a2:	2240      	movs	r2, #64	; 0x40
 80049a4:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	5a9b      	ldrh	r3, [r3, r2]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2108      	movs	r1, #8
 80049b6:	430a      	orrs	r2, r1
 80049b8:	b291      	uxth	r1, r2
 80049ba:	2240      	movs	r2, #64	; 0x40
 80049bc:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	23b8      	movs	r3, #184	; 0xb8
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	2101      	movs	r1, #1
 80049c6:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2254      	movs	r2, #84	; 0x54
 80049ce:	5a9b      	ldrh	r3, [r3, r2]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	223c      	movs	r2, #60	; 0x3c
 80049d6:	4013      	ands	r3, r2
 80049d8:	0019      	movs	r1, r3
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	23b9      	movs	r3, #185	; 0xb9
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2101      	movs	r1, #1
 80049e6:	0018      	movs	r0, r3
 80049e8:	f001 fc02 	bl	80061f0 <HAL_PCDEx_LPM_Callback>
 80049ec:	e003      	b.n	80049f6 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f008 fbcb 	bl	800d18c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f006 fb1e 	bl	800b03c <USB_ReadInterrupts>
 8004a00:	0002      	movs	r2, r0
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	401a      	ands	r2, r3
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d10f      	bne.n	8004a30 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2244      	movs	r2, #68	; 0x44
 8004a16:	5a9b      	ldrh	r3, [r3, r2]
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4918      	ldr	r1, [pc, #96]	; (8004a80 <HAL_PCD_IRQHandler+0x2f0>)
 8004a20:	400a      	ands	r2, r1
 8004a22:	b291      	uxth	r1, r2
 8004a24:	2244      	movs	r2, #68	; 0x44
 8004a26:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f008 fb7a 	bl	800d124 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f006 fb01 	bl	800b03c <USB_ReadInterrupts>
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	401a      	ands	r2, r3
 8004a42:	2380      	movs	r3, #128	; 0x80
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d10b      	bne.n	8004a62 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2244      	movs	r2, #68	; 0x44
 8004a50:	5a9b      	ldrh	r3, [r3, r2]
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	490a      	ldr	r1, [pc, #40]	; (8004a84 <HAL_PCD_IRQHandler+0x2f4>)
 8004a5a:	400a      	ands	r2, r1
 8004a5c:	b291      	uxth	r1, r2
 8004a5e:	2244      	movs	r2, #68	; 0x44
 8004a60:	5299      	strh	r1, [r3, r2]
  }
}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b002      	add	sp, #8
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	fffffbff 	.word	0xfffffbff
 8004a70:	ffffbfff 	.word	0xffffbfff
 8004a74:	ffffdfff 	.word	0xffffdfff
 8004a78:	ffffefff 	.word	0xffffefff
 8004a7c:	fffff7ff 	.word	0xfffff7ff
 8004a80:	fffffdff 	.word	0xfffffdff
 8004a84:	fffffeff 	.word	0xfffffeff

08004a88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	000a      	movs	r2, r1
 8004a92:	1cfb      	adds	r3, r7, #3
 8004a94:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	23aa      	movs	r3, #170	; 0xaa
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	5cd3      	ldrb	r3, [r2, r3]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_PCD_SetAddress+0x1e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e017      	b.n	8004ad6 <HAL_PCD_SetAddress+0x4e>
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	23aa      	movs	r3, #170	; 0xaa
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	2101      	movs	r1, #1
 8004aae:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1cfa      	adds	r2, r7, #3
 8004ab4:	2124      	movs	r1, #36	; 0x24
 8004ab6:	7812      	ldrb	r2, [r2, #0]
 8004ab8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	1cfb      	adds	r3, r7, #3
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	0010      	movs	r0, r2
 8004ac6:	f006 fa8f 	bl	800afe8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	23aa      	movs	r3, #170	; 0xaa
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	b002      	add	sp, #8
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ade:	b590      	push	{r4, r7, lr}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	000c      	movs	r4, r1
 8004ae8:	0010      	movs	r0, r2
 8004aea:	0019      	movs	r1, r3
 8004aec:	1cfb      	adds	r3, r7, #3
 8004aee:	1c22      	adds	r2, r4, #0
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	003b      	movs	r3, r7
 8004af4:	1c02      	adds	r2, r0, #0
 8004af6:	801a      	strh	r2, [r3, #0]
 8004af8:	1cbb      	adds	r3, r7, #2
 8004afa:	1c0a      	adds	r2, r1, #0
 8004afc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004afe:	230b      	movs	r3, #11
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b06:	1cfb      	adds	r3, r7, #3
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	b25b      	sxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	da0f      	bge.n	8004b30 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b10:	1cfb      	adds	r3, r7, #3
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2207      	movs	r2, #7
 8004b16:	4013      	ands	r3, r2
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	0013      	movs	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	18d3      	adds	r3, r2, r3
 8004b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	705a      	strb	r2, [r3, #1]
 8004b2e:	e00f      	b.n	8004b50 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b30:	1cfb      	adds	r3, r7, #3
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2207      	movs	r2, #7
 8004b36:	401a      	ands	r2, r3
 8004b38:	0013      	movs	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	189b      	adds	r3, r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	3369      	adds	r3, #105	; 0x69
 8004b42:	33ff      	adds	r3, #255	; 0xff
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	18d3      	adds	r3, r2, r3
 8004b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b50:	1cfb      	adds	r3, r7, #3
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2207      	movs	r2, #7
 8004b56:	4013      	ands	r3, r2
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b5e:	003b      	movs	r3, r7
 8004b60:	881a      	ldrh	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1cba      	adds	r2, r7, #2
 8004b6a:	7812      	ldrb	r2, [r2, #0]
 8004b6c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b80:	1cbb      	adds	r3, r7, #2
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d102      	bne.n	8004b8e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	23aa      	movs	r3, #170	; 0xaa
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	5cd3      	ldrb	r3, [r2, r3]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_PCD_EP_Open+0xc0>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e013      	b.n	8004bc6 <HAL_PCD_EP_Open+0xe8>
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	23aa      	movs	r3, #170	; 0xaa
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	0011      	movs	r1, r2
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f004 fb29 	bl	8009208 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	23aa      	movs	r3, #170	; 0xaa
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004bc0:	230b      	movs	r3, #11
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	781b      	ldrb	r3, [r3, #0]
}
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b005      	add	sp, #20
 8004bcc:	bd90      	pop	{r4, r7, pc}

08004bce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	000a      	movs	r2, r1
 8004bd8:	1cfb      	adds	r3, r7, #3
 8004bda:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bdc:	1cfb      	adds	r3, r7, #3
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	b25b      	sxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da0f      	bge.n	8004c06 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004be6:	1cfb      	adds	r3, r7, #3
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2207      	movs	r2, #7
 8004bec:	4013      	ands	r3, r2
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	0013      	movs	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	189b      	adds	r3, r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	18d3      	adds	r3, r2, r3
 8004bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	705a      	strb	r2, [r3, #1]
 8004c04:	e00f      	b.n	8004c26 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c06:	1cfb      	adds	r3, r7, #3
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2207      	movs	r2, #7
 8004c0c:	401a      	ands	r2, r3
 8004c0e:	0013      	movs	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	189b      	adds	r3, r3, r2
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	3369      	adds	r3, #105	; 0x69
 8004c18:	33ff      	adds	r3, #255	; 0xff
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	18d3      	adds	r3, r2, r3
 8004c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c26:	1cfb      	adds	r3, r7, #3
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2207      	movs	r2, #7
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	23aa      	movs	r3, #170	; 0xaa
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	5cd3      	ldrb	r3, [r2, r3]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_PCD_EP_Close+0x76>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e011      	b.n	8004c68 <HAL_PCD_EP_Close+0x9a>
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	23aa      	movs	r3, #170	; 0xaa
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	0011      	movs	r1, r2
 8004c56:	0018      	movs	r0, r3
 8004c58:	f004 fe4a 	bl	80098f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	23aa      	movs	r3, #170	; 0xaa
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	2100      	movs	r1, #0
 8004c64:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b004      	add	sp, #16
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	607a      	str	r2, [r7, #4]
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	200b      	movs	r0, #11
 8004c7e:	183b      	adds	r3, r7, r0
 8004c80:	1c0a      	adds	r2, r1, #0
 8004c82:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c84:	0001      	movs	r1, r0
 8004c86:	187b      	adds	r3, r7, r1
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2207      	movs	r2, #7
 8004c8c:	401a      	ands	r2, r3
 8004c8e:	0013      	movs	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	3369      	adds	r3, #105	; 0x69
 8004c98:	33ff      	adds	r3, #255	; 0xff
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	18d3      	adds	r3, r2, r3
 8004c9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cb8:	187b      	adds	r3, r7, r1
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cc6:	187b      	adds	r3, r7, r1
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2207      	movs	r2, #7
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d107      	bne.n	8004ce0 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	0011      	movs	r1, r2
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f004 ffc9 	bl	8009c70 <USB_EPStartXfer>
 8004cde:	e006      	b.n	8004cee <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	0011      	movs	r1, r2
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f004 ffc1 	bl	8009c70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b006      	add	sp, #24
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	000a      	movs	r2, r1
 8004d02:	1cfb      	adds	r3, r7, #3
 8004d04:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d06:	1cfb      	adds	r3, r7, #3
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2207      	movs	r2, #7
 8004d0c:	401a      	ands	r2, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	23c2      	movs	r3, #194	; 0xc2
 8004d12:	0059      	lsls	r1, r3, #1
 8004d14:	0013      	movs	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	189b      	adds	r3, r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	18c3      	adds	r3, r0, r3
 8004d1e:	185b      	adds	r3, r3, r1
 8004d20:	681b      	ldr	r3, [r3, #0]
}
 8004d22:	0018      	movs	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b002      	add	sp, #8
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b086      	sub	sp, #24
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
 8004d36:	200b      	movs	r0, #11
 8004d38:	183b      	adds	r3, r7, r0
 8004d3a:	1c0a      	adds	r2, r1, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d3e:	183b      	adds	r3, r7, r0
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2207      	movs	r2, #7
 8004d44:	4013      	ands	r3, r2
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	0013      	movs	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	189b      	adds	r3, r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	18d3      	adds	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2224      	movs	r2, #36	; 0x24
 8004d66:	2101      	movs	r1, #1
 8004d68:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2200      	movs	r2, #0
 8004d74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d7c:	183b      	adds	r3, r7, r0
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2207      	movs	r2, #7
 8004d82:	4013      	ands	r3, r2
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d8a:	183b      	adds	r3, r7, r0
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2207      	movs	r2, #7
 8004d90:	4013      	ands	r3, r2
 8004d92:	d107      	bne.n	8004da4 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f004 ff67 	bl	8009c70 <USB_EPStartXfer>
 8004da2:	e006      	b.n	8004db2 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	0011      	movs	r1, r2
 8004dac:	0018      	movs	r0, r3
 8004dae:	f004 ff5f 	bl	8009c70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b006      	add	sp, #24
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	000a      	movs	r2, r1
 8004dc6:	1cfb      	adds	r3, r7, #3
 8004dc8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004dca:	1cfb      	adds	r3, r7, #3
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2207      	movs	r2, #7
 8004dd0:	401a      	ands	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d901      	bls.n	8004dde <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e046      	b.n	8004e6c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dde:	1cfb      	adds	r3, r7, #3
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	b25b      	sxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	da0f      	bge.n	8004e08 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004de8:	1cfb      	adds	r3, r7, #3
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2207      	movs	r2, #7
 8004dee:	4013      	ands	r3, r2
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	0013      	movs	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	189b      	adds	r3, r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	18d3      	adds	r3, r2, r3
 8004dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	705a      	strb	r2, [r3, #1]
 8004e06:	e00d      	b.n	8004e24 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e08:	1cfb      	adds	r3, r7, #3
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	0013      	movs	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	189b      	adds	r3, r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	3369      	adds	r3, #105	; 0x69
 8004e16:	33ff      	adds	r3, #255	; 0xff
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	18d3      	adds	r3, r2, r3
 8004e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e2a:	1cfb      	adds	r3, r7, #3
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2207      	movs	r2, #7
 8004e30:	4013      	ands	r3, r2
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	23aa      	movs	r3, #170	; 0xaa
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	5cd3      	ldrb	r3, [r2, r3]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_PCD_EP_SetStall+0x8c>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e011      	b.n	8004e6c <HAL_PCD_EP_SetStall+0xb0>
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	23aa      	movs	r3, #170	; 0xaa
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	2101      	movs	r1, #1
 8004e50:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	0011      	movs	r1, r2
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f005 ffc2 	bl	800ade4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	23aa      	movs	r3, #170	; 0xaa
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	2100      	movs	r1, #0
 8004e68:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b004      	add	sp, #16
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	000a      	movs	r2, r1
 8004e7e:	1cfb      	adds	r3, r7, #3
 8004e80:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e82:	1cfb      	adds	r3, r7, #3
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	220f      	movs	r2, #15
 8004e88:	401a      	ands	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d901      	bls.n	8004e96 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e048      	b.n	8004f28 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e96:	1cfb      	adds	r3, r7, #3
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	b25b      	sxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	da0f      	bge.n	8004ec0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ea0:	1cfb      	adds	r3, r7, #3
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	0013      	movs	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	189b      	adds	r3, r3, r2
 8004eb0:	00db      	lsls	r3, r3, #3
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	18d3      	adds	r3, r2, r3
 8004eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	705a      	strb	r2, [r3, #1]
 8004ebe:	e00f      	b.n	8004ee0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ec0:	1cfb      	adds	r3, r7, #3
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2207      	movs	r2, #7
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	0013      	movs	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	189b      	adds	r3, r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	3369      	adds	r3, #105	; 0x69
 8004ed2:	33ff      	adds	r3, #255	; 0xff
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	18d3      	adds	r3, r2, r3
 8004ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ee6:	1cfb      	adds	r3, r7, #3
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2207      	movs	r2, #7
 8004eec:	4013      	ands	r3, r2
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	23aa      	movs	r3, #170	; 0xaa
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	5cd3      	ldrb	r3, [r2, r3]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_PCD_EP_ClrStall+0x90>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e011      	b.n	8004f28 <HAL_PCD_EP_ClrStall+0xb4>
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	23aa      	movs	r3, #170	; 0xaa
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	0011      	movs	r1, r2
 8004f16:	0018      	movs	r0, r3
 8004f18:	f005 ffb4 	bl	800ae84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	23aa      	movs	r3, #170	; 0xaa
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	2100      	movs	r1, #0
 8004f24:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	0018      	movs	r0, r3
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b004      	add	sp, #16
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004f30:	b5b0      	push	{r4, r5, r7, lr}
 8004f32:	b096      	sub	sp, #88	; 0x58
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f38:	f000 fbd8 	bl	80056ec <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	2056      	movs	r0, #86	; 0x56
 8004f42:	183b      	adds	r3, r7, r0
 8004f44:	2144      	movs	r1, #68	; 0x44
 8004f46:	5a52      	ldrh	r2, [r2, r1]
 8004f48:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004f4a:	183b      	adds	r3, r7, r0
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	2455      	movs	r4, #85	; 0x55
 8004f52:	193b      	adds	r3, r7, r4
 8004f54:	210f      	movs	r1, #15
 8004f56:	400a      	ands	r2, r1
 8004f58:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004f5a:	193b      	adds	r3, r7, r4
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d000      	beq.n	8004f64 <PCD_EP_ISR_Handler+0x34>
 8004f62:	e179      	b.n	8005258 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f64:	183b      	adds	r3, r7, r0
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	2210      	movs	r2, #16
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d154      	bne.n	8005018 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	200e      	movs	r0, #14
 8004f78:	183b      	adds	r3, r7, r0
 8004f7a:	49af      	ldr	r1, [pc, #700]	; (8005238 <PCD_EP_ISR_Handler+0x308>)
 8004f7c:	400a      	ands	r2, r1
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	183a      	adds	r2, r7, r0
 8004f86:	8812      	ldrh	r2, [r2, #0]
 8004f88:	49ac      	ldr	r1, [pc, #688]	; (800523c <PCD_EP_ISR_Handler+0x30c>)
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	b292      	uxth	r2, r2
 8004f8e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3328      	adds	r3, #40	; 0x28
 8004f94:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2250      	movs	r2, #80	; 0x50
 8004f9c:	5a9b      	ldrh	r3, [r3, r2]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	001a      	movs	r2, r3
 8004fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	18d2      	adds	r2, r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	18d3      	adds	r3, r2, r3
 8004fb0:	4aa3      	ldr	r2, [pc, #652]	; (8005240 <PCD_EP_ISR_Handler+0x310>)
 8004fb2:	4694      	mov	ip, r2
 8004fb4:	4463      	add	r3, ip
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	059b      	lsls	r3, r3, #22
 8004fba:	0d9a      	lsrs	r2, r3, #22
 8004fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	18d2      	adds	r2, r2, r3
 8004fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fcc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f008 f888 	bl	800d0e8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2224      	movs	r2, #36	; 0x24
 8004fdc:	5c9b      	ldrb	r3, [r3, r2]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <PCD_EP_ISR_Handler+0xb8>
 8004fe4:	f000 fb82 	bl	80056ec <PCD_EP_ISR_Handler+0x7bc>
 8004fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <PCD_EP_ISR_Handler+0xc4>
 8004ff0:	f000 fb7c 	bl	80056ec <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2224      	movs	r2, #36	; 0x24
 8004ff8:	5c9b      	ldrb	r3, [r3, r2]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2280      	movs	r2, #128	; 0x80
 8004ffe:	4252      	negs	r2, r2
 8005000:	4313      	orrs	r3, r2
 8005002:	b2da      	uxtb	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	b291      	uxth	r1, r2
 800500a:	224c      	movs	r2, #76	; 0x4c
 800500c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2224      	movs	r2, #36	; 0x24
 8005012:	2100      	movs	r1, #0
 8005014:	5499      	strb	r1, [r3, r2]
 8005016:	e369      	b.n	80056ec <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3369      	adds	r3, #105	; 0x69
 800501c:	33ff      	adds	r3, #255	; 0xff
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	2152      	movs	r1, #82	; 0x52
 8005026:	187b      	adds	r3, r7, r1
 8005028:	8812      	ldrh	r2, [r2, #0]
 800502a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800502c:	187b      	adds	r3, r7, r1
 800502e:	881a      	ldrh	r2, [r3, #0]
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	4013      	ands	r3, r2
 8005036:	d037      	beq.n	80050a8 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2250      	movs	r2, #80	; 0x50
 800503e:	5a9b      	ldrh	r3, [r3, r2]
 8005040:	b29b      	uxth	r3, r3
 8005042:	001a      	movs	r2, r3
 8005044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	18d2      	adds	r2, r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	18d3      	adds	r3, r2, r3
 8005052:	4a7c      	ldr	r2, [pc, #496]	; (8005244 <PCD_EP_ISR_Handler+0x314>)
 8005054:	4694      	mov	ip, r2
 8005056:	4463      	add	r3, ip
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	059b      	lsls	r3, r3, #22
 800505c:	0d9a      	lsrs	r2, r3, #22
 800505e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005060:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	22ac      	movs	r2, #172	; 0xac
 800506a:	0092      	lsls	r2, r2, #2
 800506c:	1899      	adds	r1, r3, r2
 800506e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005070:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005074:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005076:	b29b      	uxth	r3, r3
 8005078:	f006 f832 	bl	800b0e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29a      	uxth	r2, r3
 8005084:	2010      	movs	r0, #16
 8005086:	183b      	adds	r3, r7, r0
 8005088:	496f      	ldr	r1, [pc, #444]	; (8005248 <PCD_EP_ISR_Handler+0x318>)
 800508a:	400a      	ands	r2, r1
 800508c:	801a      	strh	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	183a      	adds	r2, r7, r0
 8005094:	8812      	ldrh	r2, [r2, #0]
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	430a      	orrs	r2, r1
 800509a:	b292      	uxth	r2, r2
 800509c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	0018      	movs	r0, r3
 80050a2:	f007 ffeb 	bl	800d07c <HAL_PCD_SetupStageCallback>
 80050a6:	e321      	b.n	80056ec <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80050a8:	2352      	movs	r3, #82	; 0x52
 80050aa:	18fb      	adds	r3, r7, r3
 80050ac:	2200      	movs	r2, #0
 80050ae:	5e9b      	ldrsh	r3, [r3, r2]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	db00      	blt.n	80050b6 <PCD_EP_ISR_Handler+0x186>
 80050b4:	e31a      	b.n	80056ec <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	201e      	movs	r0, #30
 80050c0:	183b      	adds	r3, r7, r0
 80050c2:	4961      	ldr	r1, [pc, #388]	; (8005248 <PCD_EP_ISR_Handler+0x318>)
 80050c4:	400a      	ands	r2, r1
 80050c6:	801a      	strh	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	183a      	adds	r2, r7, r0
 80050ce:	8812      	ldrh	r2, [r2, #0]
 80050d0:	2180      	movs	r1, #128	; 0x80
 80050d2:	430a      	orrs	r2, r1
 80050d4:	b292      	uxth	r2, r2
 80050d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2250      	movs	r2, #80	; 0x50
 80050de:	5a9b      	ldrh	r3, [r3, r2]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	001a      	movs	r2, r3
 80050e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	18d2      	adds	r2, r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	18d3      	adds	r3, r2, r3
 80050f2:	4a54      	ldr	r2, [pc, #336]	; (8005244 <PCD_EP_ISR_Handler+0x314>)
 80050f4:	4694      	mov	ip, r2
 80050f6:	4463      	add	r3, ip
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	059b      	lsls	r3, r3, #22
 80050fc:	0d9a      	lsrs	r2, r3, #22
 80050fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005100:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01a      	beq.n	8005140 <PCD_EP_ISR_Handler+0x210>
 800510a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005118:	6959      	ldr	r1, [r3, #20]
 800511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800511e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005120:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005122:	b29b      	uxth	r3, r3
 8005124:	f005 ffdc 	bl	800b0e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	18d2      	adds	r2, r2, r3
 8005132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005134:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2100      	movs	r1, #0
 800513a:	0018      	movs	r0, r3
 800513c:	f007 ffb3 	bl	800d0a6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	001a      	movs	r2, r3
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	4013      	ands	r3, r2
 8005150:	d000      	beq.n	8005154 <PCD_EP_ISR_Handler+0x224>
 8005152:	e2cb      	b.n	80056ec <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2250      	movs	r2, #80	; 0x50
 8005160:	5a9b      	ldrh	r3, [r3, r2]
 8005162:	b29b      	uxth	r3, r3
 8005164:	001a      	movs	r2, r3
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	189b      	adds	r3, r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	4a35      	ldr	r2, [pc, #212]	; (8005244 <PCD_EP_ISR_Handler+0x314>)
 8005170:	4694      	mov	ip, r2
 8005172:	4463      	add	r3, ip
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d110      	bne.n	80051a0 <PCD_EP_ISR_Handler+0x270>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	4a31      	ldr	r2, [pc, #196]	; (800524c <PCD_EP_ISR_Handler+0x31c>)
 8005186:	4013      	ands	r3, r2
 8005188:	b29a      	uxth	r2, r3
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	801a      	strh	r2, [r3, #0]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	4a29      	ldr	r2, [pc, #164]	; (800523c <PCD_EP_ISR_Handler+0x30c>)
 8005196:	4313      	orrs	r3, r2
 8005198:	b29a      	uxth	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	e02b      	b.n	80051f8 <PCD_EP_ISR_Handler+0x2c8>
 80051a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	2b3e      	cmp	r3, #62	; 0x3e
 80051a6:	d812      	bhi.n	80051ce <PCD_EP_ISR_Handler+0x29e>
 80051a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	085b      	lsrs	r3, r3, #1
 80051ae:	647b      	str	r3, [r7, #68]	; 0x44
 80051b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2201      	movs	r2, #1
 80051b6:	4013      	ands	r3, r2
 80051b8:	d002      	beq.n	80051c0 <PCD_EP_ISR_Handler+0x290>
 80051ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051bc:	3301      	adds	r3, #1
 80051be:	647b      	str	r3, [r7, #68]	; 0x44
 80051c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	029b      	lsls	r3, r3, #10
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	e014      	b.n	80051f8 <PCD_EP_ISR_Handler+0x2c8>
 80051ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	647b      	str	r3, [r7, #68]	; 0x44
 80051d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	221f      	movs	r2, #31
 80051dc:	4013      	ands	r3, r2
 80051de:	d102      	bne.n	80051e6 <PCD_EP_ISR_Handler+0x2b6>
 80051e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e2:	3b01      	subs	r3, #1
 80051e4:	647b      	str	r3, [r7, #68]	; 0x44
 80051e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	029b      	lsls	r3, r3, #10
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	4a13      	ldr	r2, [pc, #76]	; (800523c <PCD_EP_ISR_Handler+0x30c>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29a      	uxth	r2, r3
 8005200:	2012      	movs	r0, #18
 8005202:	183b      	adds	r3, r7, r0
 8005204:	4912      	ldr	r1, [pc, #72]	; (8005250 <PCD_EP_ISR_Handler+0x320>)
 8005206:	400a      	ands	r2, r1
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	183b      	adds	r3, r7, r0
 800520c:	183a      	adds	r2, r7, r0
 800520e:	8812      	ldrh	r2, [r2, #0]
 8005210:	2180      	movs	r1, #128	; 0x80
 8005212:	0149      	lsls	r1, r1, #5
 8005214:	404a      	eors	r2, r1
 8005216:	801a      	strh	r2, [r3, #0]
 8005218:	183b      	adds	r3, r7, r0
 800521a:	183a      	adds	r2, r7, r0
 800521c:	8812      	ldrh	r2, [r2, #0]
 800521e:	2180      	movs	r1, #128	; 0x80
 8005220:	0189      	lsls	r1, r1, #6
 8005222:	404a      	eors	r2, r1
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	183a      	adds	r2, r7, r0
 800522c:	8812      	ldrh	r2, [r2, #0]
 800522e:	4909      	ldr	r1, [pc, #36]	; (8005254 <PCD_EP_ISR_Handler+0x324>)
 8005230:	430a      	orrs	r2, r1
 8005232:	b292      	uxth	r2, r2
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e259      	b.n	80056ec <PCD_EP_ISR_Handler+0x7bc>
 8005238:	ffff8f0f 	.word	0xffff8f0f
 800523c:	ffff8000 	.word	0xffff8000
 8005240:	00000402 	.word	0x00000402
 8005244:	00000406 	.word	0x00000406
 8005248:	00000f8f 	.word	0x00000f8f
 800524c:	ffff83ff 	.word	0xffff83ff
 8005250:	ffffbf8f 	.word	0xffffbf8f
 8005254:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	001a      	movs	r2, r3
 800525e:	2055      	movs	r0, #85	; 0x55
 8005260:	183b      	adds	r3, r7, r0
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	18d2      	adds	r2, r2, r3
 8005268:	2152      	movs	r1, #82	; 0x52
 800526a:	187b      	adds	r3, r7, r1
 800526c:	8812      	ldrh	r2, [r2, #0]
 800526e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005270:	187b      	adds	r3, r7, r1
 8005272:	2200      	movs	r2, #0
 8005274:	5e9b      	ldrsh	r3, [r3, r2]
 8005276:	2b00      	cmp	r3, #0
 8005278:	db00      	blt.n	800527c <PCD_EP_ISR_Handler+0x34c>
 800527a:	e0fa      	b.n	8005472 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	001a      	movs	r2, r3
 8005282:	183b      	adds	r3, r7, r0
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	18d3      	adds	r3, r2, r3
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	2450      	movs	r4, #80	; 0x50
 8005290:	193b      	adds	r3, r7, r4
 8005292:	49cf      	ldr	r1, [pc, #828]	; (80055d0 <PCD_EP_ISR_Handler+0x6a0>)
 8005294:	400a      	ands	r2, r1
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	001a      	movs	r2, r3
 800529e:	183b      	adds	r3, r7, r0
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	18d3      	adds	r3, r2, r3
 80052a6:	193a      	adds	r2, r7, r4
 80052a8:	8812      	ldrh	r2, [r2, #0]
 80052aa:	2180      	movs	r1, #128	; 0x80
 80052ac:	430a      	orrs	r2, r1
 80052ae:	b292      	uxth	r2, r2
 80052b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80052b2:	183b      	adds	r3, r7, r0
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	0013      	movs	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	189b      	adds	r3, r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	3369      	adds	r3, #105	; 0x69
 80052c0:	33ff      	adds	r3, #255	; 0xff
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	18d3      	adds	r3, r2, r3
 80052c6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80052c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ca:	7b1b      	ldrb	r3, [r3, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d125      	bne.n	800531c <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2250      	movs	r2, #80	; 0x50
 80052d6:	5a9b      	ldrh	r3, [r3, r2]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	001a      	movs	r2, r3
 80052dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	18d2      	adds	r2, r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	18d3      	adds	r3, r2, r3
 80052ea:	4aba      	ldr	r2, [pc, #744]	; (80055d4 <PCD_EP_ISR_Handler+0x6a4>)
 80052ec:	4694      	mov	ip, r2
 80052ee:	4463      	add	r3, ip
 80052f0:	881a      	ldrh	r2, [r3, #0]
 80052f2:	2448      	movs	r4, #72	; 0x48
 80052f4:	193b      	adds	r3, r7, r4
 80052f6:	0592      	lsls	r2, r2, #22
 80052f8:	0d92      	lsrs	r2, r2, #22
 80052fa:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80052fc:	193b      	adds	r3, r7, r4
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d100      	bne.n	8005306 <PCD_EP_ISR_Handler+0x3d6>
 8005304:	e08d      	b.n	8005422 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530c:	6959      	ldr	r1, [r3, #20]
 800530e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005310:	88da      	ldrh	r2, [r3, #6]
 8005312:	193b      	adds	r3, r7, r4
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	f005 fee3 	bl	800b0e0 <USB_ReadPMA>
 800531a:	e082      	b.n	8005422 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800531c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531e:	78db      	ldrb	r3, [r3, #3]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d10c      	bne.n	800533e <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005324:	2348      	movs	r3, #72	; 0x48
 8005326:	18fc      	adds	r4, r7, r3
 8005328:	2352      	movs	r3, #82	; 0x52
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	881a      	ldrh	r2, [r3, #0]
 800532e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 f9ee 	bl	8005714 <HAL_PCD_EP_DB_Receive>
 8005338:	0003      	movs	r3, r0
 800533a:	8023      	strh	r3, [r4, #0]
 800533c:	e071      	b.n	8005422 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	001a      	movs	r2, r3
 8005344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	18d3      	adds	r3, r2, r3
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29a      	uxth	r2, r3
 8005350:	204a      	movs	r0, #74	; 0x4a
 8005352:	183b      	adds	r3, r7, r0
 8005354:	49a0      	ldr	r1, [pc, #640]	; (80055d8 <PCD_EP_ISR_Handler+0x6a8>)
 8005356:	400a      	ands	r2, r1
 8005358:	801a      	strh	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	001a      	movs	r2, r3
 8005360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	18d3      	adds	r3, r2, r3
 8005368:	183a      	adds	r2, r7, r0
 800536a:	8812      	ldrh	r2, [r2, #0]
 800536c:	499b      	ldr	r1, [pc, #620]	; (80055dc <PCD_EP_ISR_Handler+0x6ac>)
 800536e:	430a      	orrs	r2, r1
 8005370:	b292      	uxth	r2, r2
 8005372:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	001a      	movs	r2, r3
 800537a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	18d3      	adds	r3, r2, r3
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	001a      	movs	r2, r3
 8005388:	2380      	movs	r3, #128	; 0x80
 800538a:	01db      	lsls	r3, r3, #7
 800538c:	4013      	ands	r3, r2
 800538e:	d024      	beq.n	80053da <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2250      	movs	r2, #80	; 0x50
 8005396:	5a9b      	ldrh	r3, [r3, r2]
 8005398:	b29b      	uxth	r3, r3
 800539a:	001a      	movs	r2, r3
 800539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	18d2      	adds	r2, r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	18d3      	adds	r3, r2, r3
 80053aa:	4a8d      	ldr	r2, [pc, #564]	; (80055e0 <PCD_EP_ISR_Handler+0x6b0>)
 80053ac:	4694      	mov	ip, r2
 80053ae:	4463      	add	r3, ip
 80053b0:	881a      	ldrh	r2, [r3, #0]
 80053b2:	2448      	movs	r4, #72	; 0x48
 80053b4:	193b      	adds	r3, r7, r4
 80053b6:	0592      	lsls	r2, r2, #22
 80053b8:	0d92      	lsrs	r2, r2, #22
 80053ba:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80053bc:	193b      	adds	r3, r7, r4
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d02e      	beq.n	8005422 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ca:	6959      	ldr	r1, [r3, #20]
 80053cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ce:	891a      	ldrh	r2, [r3, #8]
 80053d0:	193b      	adds	r3, r7, r4
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	f005 fe84 	bl	800b0e0 <USB_ReadPMA>
 80053d8:	e023      	b.n	8005422 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2250      	movs	r2, #80	; 0x50
 80053e0:	5a9b      	ldrh	r3, [r3, r2]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	001a      	movs	r2, r3
 80053e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	18d2      	adds	r2, r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	18d3      	adds	r3, r2, r3
 80053f4:	4a77      	ldr	r2, [pc, #476]	; (80055d4 <PCD_EP_ISR_Handler+0x6a4>)
 80053f6:	4694      	mov	ip, r2
 80053f8:	4463      	add	r3, ip
 80053fa:	881a      	ldrh	r2, [r3, #0]
 80053fc:	2448      	movs	r4, #72	; 0x48
 80053fe:	193b      	adds	r3, r7, r4
 8005400:	0592      	lsls	r2, r2, #22
 8005402:	0d92      	lsrs	r2, r2, #22
 8005404:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005406:	193b      	adds	r3, r7, r4
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005414:	6959      	ldr	r1, [r3, #20]
 8005416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005418:	895a      	ldrh	r2, [r3, #10]
 800541a:	193b      	adds	r3, r7, r4
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	f005 fe5f 	bl	800b0e0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	2148      	movs	r1, #72	; 0x48
 8005428:	187b      	adds	r3, r7, r1
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	18d2      	adds	r2, r2, r3
 800542e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005430:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	187b      	adds	r3, r7, r1
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	18d2      	adds	r2, r2, r3
 800543c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <PCD_EP_ISR_Handler+0x524>
 8005448:	187b      	adds	r3, r7, r1
 800544a:	881a      	ldrh	r2, [r3, #0]
 800544c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	429a      	cmp	r2, r3
 8005452:	d207      	bcs.n	8005464 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005456:	781a      	ldrb	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	0011      	movs	r1, r2
 800545c:	0018      	movs	r0, r3
 800545e:	f007 fe22 	bl	800d0a6 <HAL_PCD_DataOutStageCallback>
 8005462:	e006      	b.n	8005472 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800546a:	0011      	movs	r1, r2
 800546c:	0018      	movs	r0, r3
 800546e:	f004 fbff 	bl	8009c70 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005472:	2452      	movs	r4, #82	; 0x52
 8005474:	193b      	adds	r3, r7, r4
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	2280      	movs	r2, #128	; 0x80
 800547a:	4013      	ands	r3, r2
 800547c:	d100      	bne.n	8005480 <PCD_EP_ISR_Handler+0x550>
 800547e:	e135      	b.n	80056ec <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8005480:	2055      	movs	r0, #85	; 0x55
 8005482:	183b      	adds	r3, r7, r0
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	0013      	movs	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	189b      	adds	r3, r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	18d3      	adds	r3, r2, r3
 8005494:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	001a      	movs	r2, r3
 800549c:	183b      	adds	r3, r7, r0
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	18d3      	adds	r3, r2, r3
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	2542      	movs	r5, #66	; 0x42
 80054aa:	197b      	adds	r3, r7, r5
 80054ac:	494d      	ldr	r1, [pc, #308]	; (80055e4 <PCD_EP_ISR_Handler+0x6b4>)
 80054ae:	400a      	ands	r2, r1
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	001a      	movs	r2, r3
 80054b8:	183b      	adds	r3, r7, r0
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	18d3      	adds	r3, r2, r3
 80054c0:	197a      	adds	r2, r7, r5
 80054c2:	8812      	ldrh	r2, [r2, #0]
 80054c4:	4948      	ldr	r1, [pc, #288]	; (80055e8 <PCD_EP_ISR_Handler+0x6b8>)
 80054c6:	430a      	orrs	r2, r1
 80054c8:	b292      	uxth	r2, r2
 80054ca:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80054cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ce:	78db      	ldrb	r3, [r3, #3]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d100      	bne.n	80054d6 <PCD_EP_ISR_Handler+0x5a6>
 80054d4:	e0ad      	b.n	8005632 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80054d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d8:	2200      	movs	r2, #0
 80054da:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054dc:	193b      	adds	r3, r7, r4
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	2240      	movs	r2, #64	; 0x40
 80054e2:	4013      	ands	r3, r2
 80054e4:	d046      	beq.n	8005574 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e8:	785b      	ldrb	r3, [r3, #1]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d125      	bne.n	800553a <PCD_EP_ISR_Handler+0x60a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2250      	movs	r2, #80	; 0x50
 80054fa:	5a9b      	ldrh	r3, [r3, r2]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	001a      	movs	r2, r3
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	189b      	adds	r3, r3, r2
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
 8005506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	00da      	lsls	r2, r3, #3
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	18d3      	adds	r3, r2, r3
 8005510:	4a33      	ldr	r2, [pc, #204]	; (80055e0 <PCD_EP_ISR_Handler+0x6b0>)
 8005512:	4694      	mov	ip, r2
 8005514:	4463      	add	r3, ip
 8005516:	623b      	str	r3, [r7, #32]
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	4a33      	ldr	r2, [pc, #204]	; (80055ec <PCD_EP_ISR_Handler+0x6bc>)
 8005520:	4013      	ands	r3, r2
 8005522:	b29a      	uxth	r2, r3
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	801a      	strh	r2, [r3, #0]
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	4a2e      	ldr	r2, [pc, #184]	; (80055e8 <PCD_EP_ISR_Handler+0x6b8>)
 8005530:	4313      	orrs	r3, r2
 8005532:	b29a      	uxth	r2, r3
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	e073      	b.n	8005622 <PCD_EP_ISR_Handler+0x6f2>
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d16f      	bne.n	8005622 <PCD_EP_ISR_Handler+0x6f2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2250      	movs	r2, #80	; 0x50
 800554e:	5a9b      	ldrh	r3, [r3, r2]
 8005550:	b29b      	uxth	r3, r3
 8005552:	001a      	movs	r2, r3
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	189b      	adds	r3, r3, r2
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	00da      	lsls	r2, r3, #3
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	18d3      	adds	r3, r2, r3
 8005564:	4a1e      	ldr	r2, [pc, #120]	; (80055e0 <PCD_EP_ISR_Handler+0x6b0>)
 8005566:	4694      	mov	ip, r2
 8005568:	4463      	add	r3, ip
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	2200      	movs	r2, #0
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	e056      	b.n	8005622 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800557a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557c:	785b      	ldrb	r3, [r3, #1]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d136      	bne.n	80055f0 <PCD_EP_ISR_Handler+0x6c0>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	637b      	str	r3, [r7, #52]	; 0x34
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2250      	movs	r2, #80	; 0x50
 800558e:	5a9b      	ldrh	r3, [r3, r2]
 8005590:	b29b      	uxth	r3, r3
 8005592:	001a      	movs	r2, r3
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	189b      	adds	r3, r3, r2
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
 800559a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	00da      	lsls	r2, r3, #3
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	18d3      	adds	r3, r2, r3
 80055a4:	4a0b      	ldr	r2, [pc, #44]	; (80055d4 <PCD_EP_ISR_Handler+0x6a4>)
 80055a6:	4694      	mov	ip, r2
 80055a8:	4463      	add	r3, ip
 80055aa:	633b      	str	r3, [r7, #48]	; 0x30
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	4a0e      	ldr	r2, [pc, #56]	; (80055ec <PCD_EP_ISR_Handler+0x6bc>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	4a09      	ldr	r2, [pc, #36]	; (80055e8 <PCD_EP_ISR_Handler+0x6b8>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	e029      	b.n	8005622 <PCD_EP_ISR_Handler+0x6f2>
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	00000f8f 	.word	0x00000f8f
 80055d4:	00000406 	.word	0x00000406
 80055d8:	ffff8f8f 	.word	0xffff8f8f
 80055dc:	ffff80c0 	.word	0xffff80c0
 80055e0:	00000402 	.word	0x00000402
 80055e4:	ffff8f0f 	.word	0xffff8f0f
 80055e8:	ffff8000 	.word	0xffff8000
 80055ec:	ffff83ff 	.word	0xffff83ff
 80055f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d114      	bne.n	8005622 <PCD_EP_ISR_Handler+0x6f2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2250      	movs	r2, #80	; 0x50
 80055fe:	5a9b      	ldrh	r3, [r3, r2]
 8005600:	b29b      	uxth	r3, r3
 8005602:	001a      	movs	r2, r3
 8005604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005606:	189b      	adds	r3, r3, r2
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800560a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	00da      	lsls	r2, r3, #3
 8005610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005612:	18d3      	adds	r3, r2, r3
 8005614:	4a3d      	ldr	r2, [pc, #244]	; (800570c <PCD_EP_ISR_Handler+0x7dc>)
 8005616:	4694      	mov	ip, r2
 8005618:	4463      	add	r3, ip
 800561a:	63bb      	str	r3, [r7, #56]	; 0x38
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	2200      	movs	r2, #0
 8005620:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	0011      	movs	r1, r2
 800562a:	0018      	movs	r0, r3
 800562c:	f007 fd5c 	bl	800d0e8 <HAL_PCD_DataInStageCallback>
 8005630:	e05c      	b.n	80056ec <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	78db      	ldrb	r3, [r3, #3]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d150      	bne.n	80056dc <PCD_EP_ISR_Handler+0x7ac>
 800563a:	2352      	movs	r3, #82	; 0x52
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	881a      	ldrh	r2, [r3, #0]
 8005640:	2380      	movs	r3, #128	; 0x80
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	4013      	ands	r3, r2
 8005646:	d149      	bne.n	80056dc <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2250      	movs	r2, #80	; 0x50
 800564e:	5a9b      	ldrh	r3, [r3, r2]
 8005650:	b29b      	uxth	r3, r3
 8005652:	001a      	movs	r2, r3
 8005654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	18d2      	adds	r2, r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	18d3      	adds	r3, r2, r3
 8005662:	4a2b      	ldr	r2, [pc, #172]	; (8005710 <PCD_EP_ISR_Handler+0x7e0>)
 8005664:	4694      	mov	ip, r2
 8005666:	4463      	add	r3, ip
 8005668:	881a      	ldrh	r2, [r3, #0]
 800566a:	2140      	movs	r1, #64	; 0x40
 800566c:	187b      	adds	r3, r7, r1
 800566e:	0592      	lsls	r2, r2, #22
 8005670:	0d92      	lsrs	r2, r2, #22
 8005672:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8005674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	187b      	adds	r3, r7, r1
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d907      	bls.n	8005690 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8005680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	187b      	adds	r3, r7, r1
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	1ad2      	subs	r2, r2, r3
 800568a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568c:	619a      	str	r2, [r3, #24]
 800568e:	e002      	b.n	8005696 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8005690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005692:	2200      	movs	r2, #0
 8005694:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d107      	bne.n	80056ae <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800569e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	0011      	movs	r1, r2
 80056a6:	0018      	movs	r0, r3
 80056a8:	f007 fd1e 	bl	800d0e8 <HAL_PCD_DataInStageCallback>
 80056ac:	e01e      	b.n	80056ec <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80056ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	2140      	movs	r1, #64	; 0x40
 80056b4:	187b      	adds	r3, r7, r1
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	18d2      	adds	r2, r2, r3
 80056ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056bc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80056be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c0:	69da      	ldr	r2, [r3, #28]
 80056c2:	187b      	adds	r3, r7, r1
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	18d2      	adds	r2, r2, r3
 80056c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ca:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056d2:	0011      	movs	r1, r2
 80056d4:	0018      	movs	r0, r3
 80056d6:	f004 facb 	bl	8009c70 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80056da:	e007      	b.n	80056ec <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80056dc:	2352      	movs	r3, #82	; 0x52
 80056de:	18fb      	adds	r3, r7, r3
 80056e0:	881a      	ldrh	r2, [r3, #0]
 80056e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	0018      	movs	r0, r3
 80056e8:	f000 f930 	bl	800594c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2244      	movs	r2, #68	; 0x44
 80056f2:	5a9b      	ldrh	r3, [r3, r2]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	b21b      	sxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	da01      	bge.n	8005700 <PCD_EP_ISR_Handler+0x7d0>
 80056fc:	f7ff fc1e 	bl	8004f3c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	0018      	movs	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	b016      	add	sp, #88	; 0x58
 8005708:	bdb0      	pop	{r4, r5, r7, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	00000406 	.word	0x00000406
 8005710:	00000402 	.word	0x00000402

08005714 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005714:	b590      	push	{r4, r7, lr}
 8005716:	b089      	sub	sp, #36	; 0x24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	1dbb      	adds	r3, r7, #6
 8005720:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005722:	1dbb      	adds	r3, r7, #6
 8005724:	881a      	ldrh	r2, [r3, #0]
 8005726:	2380      	movs	r3, #128	; 0x80
 8005728:	01db      	lsls	r3, r3, #7
 800572a:	4013      	ands	r3, r2
 800572c:	d100      	bne.n	8005730 <HAL_PCD_EP_DB_Receive+0x1c>
 800572e:	e07d      	b.n	800582c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2250      	movs	r2, #80	; 0x50
 8005736:	5a9b      	ldrh	r3, [r3, r2]
 8005738:	b29b      	uxth	r3, r3
 800573a:	001a      	movs	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	18d2      	adds	r2, r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	18d3      	adds	r3, r2, r3
 800574a:	4a7a      	ldr	r2, [pc, #488]	; (8005934 <HAL_PCD_EP_DB_Receive+0x220>)
 800574c:	4694      	mov	ip, r2
 800574e:	4463      	add	r3, ip
 8005750:	881a      	ldrh	r2, [r3, #0]
 8005752:	211a      	movs	r1, #26
 8005754:	187b      	adds	r3, r7, r1
 8005756:	0592      	lsls	r2, r2, #22
 8005758:	0d92      	lsrs	r2, r2, #22
 800575a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	187b      	adds	r3, r7, r1
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d307      	bcc.n	8005778 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	699a      	ldr	r2, [r3, #24]
 800576c:	187b      	adds	r3, r7, r1
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	1ad2      	subs	r2, r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	619a      	str	r2, [r3, #24]
 8005776:	e002      	b.n	800577e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d121      	bne.n	80057ca <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	001a      	movs	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	18d3      	adds	r3, r2, r3
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29a      	uxth	r2, r3
 8005798:	2018      	movs	r0, #24
 800579a:	183b      	adds	r3, r7, r0
 800579c:	4966      	ldr	r1, [pc, #408]	; (8005938 <HAL_PCD_EP_DB_Receive+0x224>)
 800579e:	400a      	ands	r2, r1
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	183b      	adds	r3, r7, r0
 80057a4:	183a      	adds	r2, r7, r0
 80057a6:	8812      	ldrh	r2, [r2, #0]
 80057a8:	2180      	movs	r1, #128	; 0x80
 80057aa:	0189      	lsls	r1, r1, #6
 80057ac:	404a      	eors	r2, r1
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	001a      	movs	r2, r3
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	18d3      	adds	r3, r2, r3
 80057be:	183a      	adds	r2, r7, r0
 80057c0:	8812      	ldrh	r2, [r2, #0]
 80057c2:	495e      	ldr	r1, [pc, #376]	; (800593c <HAL_PCD_EP_DB_Receive+0x228>)
 80057c4:	430a      	orrs	r2, r1
 80057c6:	b292      	uxth	r2, r2
 80057c8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057ca:	1dbb      	adds	r3, r7, #6
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	2240      	movs	r2, #64	; 0x40
 80057d0:	4013      	ands	r3, r2
 80057d2:	d01a      	beq.n	800580a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	001a      	movs	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	18d3      	adds	r3, r2, r3
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	2016      	movs	r0, #22
 80057e8:	183b      	adds	r3, r7, r0
 80057ea:	4955      	ldr	r1, [pc, #340]	; (8005940 <HAL_PCD_EP_DB_Receive+0x22c>)
 80057ec:	400a      	ands	r2, r1
 80057ee:	801a      	strh	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	001a      	movs	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	18d3      	adds	r3, r2, r3
 80057fe:	183a      	adds	r2, r7, r0
 8005800:	8812      	ldrh	r2, [r2, #0]
 8005802:	4950      	ldr	r1, [pc, #320]	; (8005944 <HAL_PCD_EP_DB_Receive+0x230>)
 8005804:	430a      	orrs	r2, r1
 8005806:	b292      	uxth	r2, r2
 8005808:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800580a:	241a      	movs	r4, #26
 800580c:	193b      	adds	r3, r7, r4
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d100      	bne.n	8005816 <HAL_PCD_EP_DB_Receive+0x102>
 8005814:	e086      	b.n	8005924 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6959      	ldr	r1, [r3, #20]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	891a      	ldrh	r2, [r3, #8]
 8005822:	193b      	adds	r3, r7, r4
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	f005 fc5b 	bl	800b0e0 <USB_ReadPMA>
 800582a:	e07b      	b.n	8005924 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2250      	movs	r2, #80	; 0x50
 8005832:	5a9b      	ldrh	r3, [r3, r2]
 8005834:	b29b      	uxth	r3, r3
 8005836:	001a      	movs	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	18d2      	adds	r2, r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	18d3      	adds	r3, r2, r3
 8005846:	4a40      	ldr	r2, [pc, #256]	; (8005948 <HAL_PCD_EP_DB_Receive+0x234>)
 8005848:	4694      	mov	ip, r2
 800584a:	4463      	add	r3, ip
 800584c:	881a      	ldrh	r2, [r3, #0]
 800584e:	211a      	movs	r1, #26
 8005850:	187b      	adds	r3, r7, r1
 8005852:	0592      	lsls	r2, r2, #22
 8005854:	0d92      	lsrs	r2, r2, #22
 8005856:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	699a      	ldr	r2, [r3, #24]
 800585c:	187b      	adds	r3, r7, r1
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d307      	bcc.n	8005874 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	699a      	ldr	r2, [r3, #24]
 8005868:	187b      	adds	r3, r7, r1
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	1ad2      	subs	r2, r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	619a      	str	r2, [r3, #24]
 8005872:	e002      	b.n	800587a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d121      	bne.n	80058c6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	001a      	movs	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	18d3      	adds	r3, r2, r3
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29a      	uxth	r2, r3
 8005894:	201e      	movs	r0, #30
 8005896:	183b      	adds	r3, r7, r0
 8005898:	4927      	ldr	r1, [pc, #156]	; (8005938 <HAL_PCD_EP_DB_Receive+0x224>)
 800589a:	400a      	ands	r2, r1
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	183b      	adds	r3, r7, r0
 80058a0:	183a      	adds	r2, r7, r0
 80058a2:	8812      	ldrh	r2, [r2, #0]
 80058a4:	2180      	movs	r1, #128	; 0x80
 80058a6:	0189      	lsls	r1, r1, #6
 80058a8:	404a      	eors	r2, r1
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	001a      	movs	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	18d3      	adds	r3, r2, r3
 80058ba:	183a      	adds	r2, r7, r0
 80058bc:	8812      	ldrh	r2, [r2, #0]
 80058be:	491f      	ldr	r1, [pc, #124]	; (800593c <HAL_PCD_EP_DB_Receive+0x228>)
 80058c0:	430a      	orrs	r2, r1
 80058c2:	b292      	uxth	r2, r2
 80058c4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058c6:	1dbb      	adds	r3, r7, #6
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	2240      	movs	r2, #64	; 0x40
 80058cc:	4013      	ands	r3, r2
 80058ce:	d11a      	bne.n	8005906 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	001a      	movs	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	18d3      	adds	r3, r2, r3
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	201c      	movs	r0, #28
 80058e4:	183b      	adds	r3, r7, r0
 80058e6:	4916      	ldr	r1, [pc, #88]	; (8005940 <HAL_PCD_EP_DB_Receive+0x22c>)
 80058e8:	400a      	ands	r2, r1
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	001a      	movs	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	18d3      	adds	r3, r2, r3
 80058fa:	183a      	adds	r2, r7, r0
 80058fc:	8812      	ldrh	r2, [r2, #0]
 80058fe:	4911      	ldr	r1, [pc, #68]	; (8005944 <HAL_PCD_EP_DB_Receive+0x230>)
 8005900:	430a      	orrs	r2, r1
 8005902:	b292      	uxth	r2, r2
 8005904:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005906:	241a      	movs	r4, #26
 8005908:	193b      	adds	r3, r7, r4
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6959      	ldr	r1, [r3, #20]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	895a      	ldrh	r2, [r3, #10]
 800591c:	193b      	adds	r3, r7, r4
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	f005 fbde 	bl	800b0e0 <USB_ReadPMA>
    }
  }

  return count;
 8005924:	231a      	movs	r3, #26
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	881b      	ldrh	r3, [r3, #0]
}
 800592a:	0018      	movs	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	b009      	add	sp, #36	; 0x24
 8005930:	bd90      	pop	{r4, r7, pc}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	00000402 	.word	0x00000402
 8005938:	ffffbf8f 	.word	0xffffbf8f
 800593c:	ffff8080 	.word	0xffff8080
 8005940:	ffff8f8f 	.word	0xffff8f8f
 8005944:	ffff80c0 	.word	0xffff80c0
 8005948:	00000406 	.word	0x00000406

0800594c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b0a2      	sub	sp, #136	; 0x88
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	1dbb      	adds	r3, r7, #6
 8005958:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800595a:	1dbb      	adds	r3, r7, #6
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	2240      	movs	r2, #64	; 0x40
 8005960:	4013      	ands	r3, r2
 8005962:	d100      	bne.n	8005966 <HAL_PCD_EP_DB_Transmit+0x1a>
 8005964:	e1c8      	b.n	8005cf8 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2250      	movs	r2, #80	; 0x50
 800596c:	5a9b      	ldrh	r3, [r3, r2]
 800596e:	b29b      	uxth	r3, r3
 8005970:	001a      	movs	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	18d2      	adds	r2, r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	18d3      	adds	r3, r2, r3
 8005980:	4ad7      	ldr	r2, [pc, #860]	; (8005ce0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005982:	4694      	mov	ip, r2
 8005984:	4463      	add	r3, ip
 8005986:	881a      	ldrh	r2, [r3, #0]
 8005988:	214e      	movs	r1, #78	; 0x4e
 800598a:	187b      	adds	r3, r7, r1
 800598c:	0592      	lsls	r2, r2, #22
 800598e:	0d92      	lsrs	r2, r2, #22
 8005990:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	187b      	adds	r3, r7, r1
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d907      	bls.n	80059ae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	187b      	adds	r3, r7, r1
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	1ad2      	subs	r2, r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	619a      	str	r2, [r3, #24]
 80059ac:	e002      	b.n	80059b4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2200      	movs	r2, #0
 80059b2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d000      	beq.n	80059be <HAL_PCD_EP_DB_Transmit+0x72>
 80059bc:	e0b5      	b.n	8005b2a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d125      	bne.n	8005a12 <HAL_PCD_EP_DB_Transmit+0xc6>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2250      	movs	r2, #80	; 0x50
 80059d2:	5a9b      	ldrh	r3, [r3, r2]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	001a      	movs	r2, r3
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	189b      	adds	r3, r3, r2
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	00da      	lsls	r2, r3, #3
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	18d3      	adds	r3, r2, r3
 80059e8:	4abd      	ldr	r2, [pc, #756]	; (8005ce0 <HAL_PCD_EP_DB_Transmit+0x394>)
 80059ea:	4694      	mov	ip, r2
 80059ec:	4463      	add	r3, ip
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	4abb      	ldr	r2, [pc, #748]	; (8005ce4 <HAL_PCD_EP_DB_Transmit+0x398>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	4ab8      	ldr	r2, [pc, #736]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	801a      	strh	r2, [r3, #0]
 8005a10:	e01b      	b.n	8005a4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d117      	bne.n	8005a4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2250      	movs	r2, #80	; 0x50
 8005a26:	5a9b      	ldrh	r3, [r3, r2]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	001a      	movs	r2, r3
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	189b      	adds	r3, r3, r2
 8005a30:	633b      	str	r3, [r7, #48]	; 0x30
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	00da      	lsls	r2, r3, #3
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	18d3      	adds	r3, r2, r3
 8005a3c:	4aa8      	ldr	r2, [pc, #672]	; (8005ce0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005a3e:	4694      	mov	ip, r2
 8005a40:	4463      	add	r3, ip
 8005a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	2200      	movs	r2, #0
 8005a48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	623b      	str	r3, [r7, #32]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d125      	bne.n	8005aa4 <HAL_PCD_EP_DB_Transmit+0x158>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2250      	movs	r2, #80	; 0x50
 8005a64:	5a9b      	ldrh	r3, [r3, r2]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	001a      	movs	r2, r3
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	00da      	lsls	r2, r3, #3
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	18d3      	adds	r3, r2, r3
 8005a7a:	4a9c      	ldr	r2, [pc, #624]	; (8005cec <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005a7c:	4694      	mov	ip, r2
 8005a7e:	4463      	add	r3, ip
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	4a96      	ldr	r2, [pc, #600]	; (8005ce4 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	4a93      	ldr	r2, [pc, #588]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e018      	b.n	8005ad6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d114      	bne.n	8005ad6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2250      	movs	r2, #80	; 0x50
 8005ab2:	5a9b      	ldrh	r3, [r3, r2]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	001a      	movs	r2, r3
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	189b      	adds	r3, r3, r2
 8005abc:	623b      	str	r3, [r7, #32]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	00da      	lsls	r2, r3, #3
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	18d3      	adds	r3, r2, r3
 8005ac8:	4a88      	ldr	r2, [pc, #544]	; (8005cec <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005aca:	4694      	mov	ip, r2
 8005acc:	4463      	add	r3, ip
 8005ace:	61fb      	str	r3, [r7, #28]
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	781a      	ldrb	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	0011      	movs	r1, r2
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f007 fb02 	bl	800d0e8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ae4:	1dbb      	adds	r3, r7, #6
 8005ae6:	881a      	ldrh	r2, [r3, #0]
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	01db      	lsls	r3, r3, #7
 8005aec:	4013      	ands	r3, r2
 8005aee:	d100      	bne.n	8005af2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005af0:	e2d4      	b.n	800609c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	001a      	movs	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	18d3      	adds	r3, r2, r3
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	2012      	movs	r0, #18
 8005b06:	183b      	adds	r3, r7, r0
 8005b08:	4979      	ldr	r1, [pc, #484]	; (8005cf0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005b0a:	400a      	ands	r2, r1
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	001a      	movs	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	18d3      	adds	r3, r2, r3
 8005b1c:	183a      	adds	r2, r7, r0
 8005b1e:	8812      	ldrh	r2, [r2, #0]
 8005b20:	4974      	ldr	r1, [pc, #464]	; (8005cf4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005b22:	430a      	orrs	r2, r1
 8005b24:	b292      	uxth	r2, r2
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	e2b8      	b.n	800609c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b2a:	1dbb      	adds	r3, r7, #6
 8005b2c:	881a      	ldrh	r2, [r3, #0]
 8005b2e:	2380      	movs	r3, #128	; 0x80
 8005b30:	01db      	lsls	r3, r3, #7
 8005b32:	4013      	ands	r3, r2
 8005b34:	d01a      	beq.n	8005b6c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	001a      	movs	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	18d3      	adds	r3, r2, r3
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	2044      	movs	r0, #68	; 0x44
 8005b4a:	183b      	adds	r3, r7, r0
 8005b4c:	4968      	ldr	r1, [pc, #416]	; (8005cf0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005b4e:	400a      	ands	r2, r1
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	001a      	movs	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	18d3      	adds	r3, r2, r3
 8005b60:	183a      	adds	r2, r7, r0
 8005b62:	8812      	ldrh	r2, [r2, #0]
 8005b64:	4963      	ldr	r1, [pc, #396]	; (8005cf4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005b66:	430a      	orrs	r2, r1
 8005b68:	b292      	uxth	r2, r2
 8005b6a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2224      	movs	r2, #36	; 0x24
 8005b70:	5c9b      	ldrb	r3, [r3, r2]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d000      	beq.n	8005b78 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005b76:	e291      	b.n	800609c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	214e      	movs	r1, #78	; 0x4e
 8005b7e:	187b      	adds	r3, r7, r1
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	18d2      	adds	r2, r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	187b      	adds	r3, r7, r1
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	18d2      	adds	r2, r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6a1a      	ldr	r2, [r3, #32]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d309      	bcc.n	8005bb6 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bae:	1ad2      	subs	r2, r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	621a      	str	r2, [r3, #32]
 8005bb4:	e016      	b.n	8005be4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d108      	bne.n	8005bd0 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8005bbe:	234e      	movs	r3, #78	; 0x4e
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2224      	movs	r2, #36	; 0x24
 8005bca:	2100      	movs	r1, #0
 8005bcc:	5499      	strb	r1, [r3, r2]
 8005bce:	e009      	b.n	8005be4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2224      	movs	r2, #36	; 0x24
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2200      	movs	r2, #0
 8005be2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d150      	bne.n	8005c8e <HAL_PCD_EP_DB_Transmit+0x342>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2250      	movs	r2, #80	; 0x50
 8005bf8:	5a9b      	ldrh	r3, [r3, r2]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	001a      	movs	r2, r3
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	189b      	adds	r3, r3, r2
 8005c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	00da      	lsls	r2, r3, #3
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	18d3      	adds	r3, r2, r3
 8005c0e:	4a34      	ldr	r2, [pc, #208]	; (8005ce0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005c10:	4694      	mov	ip, r2
 8005c12:	4463      	add	r3, ip
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
 8005c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d110      	bne.n	8005c3e <HAL_PCD_EP_DB_Transmit+0x2f2>
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	4a30      	ldr	r2, [pc, #192]	; (8005ce4 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2a:	801a      	strh	r2, [r3, #0]
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	4a2d      	ldr	r2, [pc, #180]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3a:	801a      	strh	r2, [r3, #0]
 8005c3c:	e044      	b.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c40:	2b3e      	cmp	r3, #62	; 0x3e
 8005c42:	d810      	bhi.n	8005c66 <HAL_PCD_EP_DB_Transmit+0x31a>
 8005c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d002      	beq.n	8005c58 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c54:	3301      	adds	r3, #1
 8005c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	029b      	lsls	r3, r3, #10
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	e030      	b.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6e:	221f      	movs	r2, #31
 8005c70:	4013      	ands	r3, r2
 8005c72:	d102      	bne.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x32e>
 8005c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c76:	3b01      	subs	r3, #1
 8005c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	029b      	lsls	r3, r3, #10
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	4a19      	ldr	r2, [pc, #100]	; (8005ce8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	e01c      	b.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d118      	bne.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2250      	movs	r2, #80	; 0x50
 8005ca2:	5a9b      	ldrh	r3, [r3, r2]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	001a      	movs	r2, r3
 8005ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005caa:	189b      	adds	r3, r3, r2
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	00da      	lsls	r2, r3, #3
 8005cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb6:	18d3      	adds	r3, r2, r3
 8005cb8:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005cba:	4694      	mov	ip, r2
 8005cbc:	4463      	add	r3, ip
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	6959      	ldr	r1, [r3, #20]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	891a      	ldrh	r2, [r3, #8]
 8005cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f005 f9be 	bl	800b058 <USB_WritePMA>
 8005cdc:	e1de      	b.n	800609c <HAL_PCD_EP_DB_Transmit+0x750>
 8005cde:	46c0      	nop			; (mov r8, r8)
 8005ce0:	00000402 	.word	0x00000402
 8005ce4:	ffff83ff 	.word	0xffff83ff
 8005ce8:	ffff8000 	.word	0xffff8000
 8005cec:	00000406 	.word	0x00000406
 8005cf0:	ffff8f8f 	.word	0xffff8f8f
 8005cf4:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2250      	movs	r2, #80	; 0x50
 8005cfe:	5a9b      	ldrh	r3, [r3, r2]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	001a      	movs	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	18d2      	adds	r2, r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	18d3      	adds	r3, r2, r3
 8005d12:	4aca      	ldr	r2, [pc, #808]	; (800603c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005d14:	4694      	mov	ip, r2
 8005d16:	4463      	add	r3, ip
 8005d18:	881a      	ldrh	r2, [r3, #0]
 8005d1a:	214e      	movs	r1, #78	; 0x4e
 8005d1c:	187b      	adds	r3, r7, r1
 8005d1e:	0592      	lsls	r2, r2, #22
 8005d20:	0d92      	lsrs	r2, r2, #22
 8005d22:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	699a      	ldr	r2, [r3, #24]
 8005d28:	187b      	adds	r3, r7, r1
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d307      	bcc.n	8005d40 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	699a      	ldr	r2, [r3, #24]
 8005d34:	187b      	adds	r3, r7, r1
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	1ad2      	subs	r2, r2, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	619a      	str	r2, [r3, #24]
 8005d3e:	e002      	b.n	8005d46 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2200      	movs	r2, #0
 8005d44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d000      	beq.n	8005d50 <HAL_PCD_EP_DB_Transmit+0x404>
 8005d4e:	e0c0      	b.n	8005ed2 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d125      	bne.n	8005da4 <HAL_PCD_EP_DB_Transmit+0x458>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2250      	movs	r2, #80	; 0x50
 8005d64:	5a9b      	ldrh	r3, [r3, r2]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	001a      	movs	r2, r3
 8005d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6c:	189b      	adds	r3, r3, r2
 8005d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	00da      	lsls	r2, r3, #3
 8005d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d78:	18d3      	adds	r3, r2, r3
 8005d7a:	4ab1      	ldr	r2, [pc, #708]	; (8006040 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005d7c:	4694      	mov	ip, r2
 8005d7e:	4463      	add	r3, ip
 8005d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	4aae      	ldr	r2, [pc, #696]	; (8006044 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	4aab      	ldr	r2, [pc, #684]	; (8006048 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	e01b      	b.n	8005ddc <HAL_PCD_EP_DB_Transmit+0x490>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d117      	bne.n	8005ddc <HAL_PCD_EP_DB_Transmit+0x490>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	677b      	str	r3, [r7, #116]	; 0x74
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2250      	movs	r2, #80	; 0x50
 8005db8:	5a9b      	ldrh	r3, [r3, r2]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	001a      	movs	r2, r3
 8005dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc0:	189b      	adds	r3, r3, r2
 8005dc2:	677b      	str	r3, [r7, #116]	; 0x74
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	00da      	lsls	r2, r3, #3
 8005dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dcc:	18d3      	adds	r3, r2, r3
 8005dce:	4a9c      	ldr	r2, [pc, #624]	; (8006040 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005dd0:	4694      	mov	ip, r2
 8005dd2:	4463      	add	r3, ip
 8005dd4:	673b      	str	r3, [r7, #112]	; 0x70
 8005dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dd8:	2200      	movs	r2, #0
 8005dda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d130      	bne.n	8005e4c <HAL_PCD_EP_DB_Transmit+0x500>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2180      	movs	r1, #128	; 0x80
 8005df0:	187a      	adds	r2, r7, r1
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2250      	movs	r2, #80	; 0x50
 8005dfa:	5a9b      	ldrh	r3, [r3, r2]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	001a      	movs	r2, r3
 8005e00:	187b      	adds	r3, r7, r1
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	189b      	adds	r3, r3, r2
 8005e06:	187a      	adds	r2, r7, r1
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	00da      	lsls	r2, r3, #3
 8005e10:	187b      	adds	r3, r7, r1
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	18d3      	adds	r3, r2, r3
 8005e16:	4a89      	ldr	r2, [pc, #548]	; (800603c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005e18:	4694      	mov	ip, r2
 8005e1a:	4463      	add	r3, ip
 8005e1c:	2184      	movs	r1, #132	; 0x84
 8005e1e:	187a      	adds	r2, r7, r1
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	187b      	adds	r3, r7, r1
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4a86      	ldr	r2, [pc, #536]	; (8006044 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	187b      	adds	r3, r7, r1
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	187b      	adds	r3, r7, r1
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	4a82      	ldr	r2, [pc, #520]	; (8006048 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	187b      	adds	r3, r7, r1
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	801a      	strh	r2, [r3, #0]
 8005e4a:	e018      	b.n	8005e7e <HAL_PCD_EP_DB_Transmit+0x532>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d114      	bne.n	8005e7e <HAL_PCD_EP_DB_Transmit+0x532>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2250      	movs	r2, #80	; 0x50
 8005e5a:	5a9b      	ldrh	r3, [r3, r2]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	001a      	movs	r2, r3
 8005e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e62:	189b      	adds	r3, r3, r2
 8005e64:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	00da      	lsls	r2, r3, #3
 8005e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e6e:	18d3      	adds	r3, r2, r3
 8005e70:	4a72      	ldr	r2, [pc, #456]	; (800603c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005e72:	4694      	mov	ip, r2
 8005e74:	4463      	add	r3, ip
 8005e76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	781a      	ldrb	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	0011      	movs	r1, r2
 8005e86:	0018      	movs	r0, r3
 8005e88:	f007 f92e 	bl	800d0e8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e8c:	1dbb      	adds	r3, r7, #6
 8005e8e:	881a      	ldrh	r2, [r3, #0]
 8005e90:	2380      	movs	r3, #128	; 0x80
 8005e92:	01db      	lsls	r3, r3, #7
 8005e94:	4013      	ands	r3, r2
 8005e96:	d000      	beq.n	8005e9a <HAL_PCD_EP_DB_Transmit+0x54e>
 8005e98:	e100      	b.n	800609c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	001a      	movs	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	18d3      	adds	r3, r2, r3
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	2046      	movs	r0, #70	; 0x46
 8005eae:	183b      	adds	r3, r7, r0
 8005eb0:	4966      	ldr	r1, [pc, #408]	; (800604c <HAL_PCD_EP_DB_Transmit+0x700>)
 8005eb2:	400a      	ands	r2, r1
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	001a      	movs	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	18d3      	adds	r3, r2, r3
 8005ec4:	183a      	adds	r2, r7, r0
 8005ec6:	8812      	ldrh	r2, [r2, #0]
 8005ec8:	4961      	ldr	r1, [pc, #388]	; (8006050 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	b292      	uxth	r2, r2
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	e0e4      	b.n	800609c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ed2:	1dbb      	adds	r3, r7, #6
 8005ed4:	881a      	ldrh	r2, [r3, #0]
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	01db      	lsls	r3, r3, #7
 8005eda:	4013      	ands	r3, r2
 8005edc:	d11a      	bne.n	8005f14 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	001a      	movs	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	18d3      	adds	r3, r2, r3
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	204c      	movs	r0, #76	; 0x4c
 8005ef2:	183b      	adds	r3, r7, r0
 8005ef4:	4955      	ldr	r1, [pc, #340]	; (800604c <HAL_PCD_EP_DB_Transmit+0x700>)
 8005ef6:	400a      	ands	r2, r1
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	001a      	movs	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	18d3      	adds	r3, r2, r3
 8005f08:	183a      	adds	r2, r7, r0
 8005f0a:	8812      	ldrh	r2, [r2, #0]
 8005f0c:	4950      	ldr	r1, [pc, #320]	; (8006050 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	b292      	uxth	r2, r2
 8005f12:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2224      	movs	r2, #36	; 0x24
 8005f18:	5c9b      	ldrb	r3, [r3, r2]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d000      	beq.n	8005f20 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8005f1e:	e0bd      	b.n	800609c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	214e      	movs	r1, #78	; 0x4e
 8005f26:	187b      	adds	r3, r7, r1
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	18d2      	adds	r2, r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	187b      	adds	r3, r7, r1
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	18d2      	adds	r2, r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	6a1a      	ldr	r2, [r3, #32]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d309      	bcc.n	8005f5e <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6a1a      	ldr	r2, [r3, #32]
 8005f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f56:	1ad2      	subs	r2, r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	621a      	str	r2, [r3, #32]
 8005f5c:	e016      	b.n	8005f8c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d108      	bne.n	8005f78 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8005f66:	234e      	movs	r3, #78	; 0x4e
 8005f68:	18fb      	adds	r3, r7, r3
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2224      	movs	r2, #36	; 0x24
 8005f72:	2100      	movs	r1, #0
 8005f74:	5499      	strb	r1, [r3, r2]
 8005f76:	e009      	b.n	8005f8c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2200      	movs	r2, #0
 8005f82:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2224      	movs	r2, #36	; 0x24
 8005f88:	2100      	movs	r1, #0
 8005f8a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	667b      	str	r3, [r7, #100]	; 0x64
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d15c      	bne.n	8006054 <HAL_PCD_EP_DB_Transmit+0x708>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2250      	movs	r2, #80	; 0x50
 8005fa6:	5a9b      	ldrh	r3, [r3, r2]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	001a      	movs	r2, r3
 8005fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fae:	189b      	adds	r3, r3, r2
 8005fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	00da      	lsls	r2, r3, #3
 8005fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fba:	18d3      	adds	r3, r2, r3
 8005fbc:	4a1f      	ldr	r2, [pc, #124]	; (800603c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005fbe:	4694      	mov	ip, r2
 8005fc0:	4463      	add	r3, ip
 8005fc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d110      	bne.n	8005fec <HAL_PCD_EP_DB_Transmit+0x6a0>
 8005fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	4a19      	ldr	r2, [pc, #100]	; (8006048 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	e04d      	b.n	8006088 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fee:	2b3e      	cmp	r3, #62	; 0x3e
 8005ff0:	d810      	bhi.n	8006014 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff4:	085b      	lsrs	r3, r3, #1
 8005ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d002      	beq.n	8006006 <HAL_PCD_EP_DB_Transmit+0x6ba>
 8006000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006002:	3301      	adds	r3, #1
 8006004:	657b      	str	r3, [r7, #84]	; 0x54
 8006006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006008:	b29b      	uxth	r3, r3
 800600a:	029b      	lsls	r3, r3, #10
 800600c:	b29a      	uxth	r2, r3
 800600e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006010:	801a      	strh	r2, [r3, #0]
 8006012:	e039      	b.n	8006088 <HAL_PCD_EP_DB_Transmit+0x73c>
 8006014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	657b      	str	r3, [r7, #84]	; 0x54
 800601a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800601c:	221f      	movs	r2, #31
 800601e:	4013      	ands	r3, r2
 8006020:	d102      	bne.n	8006028 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8006022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006024:	3b01      	subs	r3, #1
 8006026:	657b      	str	r3, [r7, #84]	; 0x54
 8006028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800602a:	b29b      	uxth	r3, r3
 800602c:	029b      	lsls	r3, r3, #10
 800602e:	b29b      	uxth	r3, r3
 8006030:	4a05      	ldr	r2, [pc, #20]	; (8006048 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8006032:	4313      	orrs	r3, r2
 8006034:	b29a      	uxth	r2, r3
 8006036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	e025      	b.n	8006088 <HAL_PCD_EP_DB_Transmit+0x73c>
 800603c:	00000406 	.word	0x00000406
 8006040:	00000402 	.word	0x00000402
 8006044:	ffff83ff 	.word	0xffff83ff
 8006048:	ffff8000 	.word	0xffff8000
 800604c:	ffff8f8f 	.word	0xffff8f8f
 8006050:	ffffc080 	.word	0xffffc080
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d115      	bne.n	8006088 <HAL_PCD_EP_DB_Transmit+0x73c>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2250      	movs	r2, #80	; 0x50
 8006062:	5a9b      	ldrh	r3, [r3, r2]
 8006064:	b29b      	uxth	r3, r3
 8006066:	001a      	movs	r2, r3
 8006068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800606a:	189b      	adds	r3, r3, r2
 800606c:	667b      	str	r3, [r7, #100]	; 0x64
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	00da      	lsls	r2, r3, #3
 8006074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006076:	18d3      	adds	r3, r2, r3
 8006078:	4a1e      	ldr	r2, [pc, #120]	; (80060f4 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800607a:	4694      	mov	ip, r2
 800607c:	4463      	add	r3, ip
 800607e:	663b      	str	r3, [r7, #96]	; 0x60
 8006080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006082:	b29a      	uxth	r2, r3
 8006084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006086:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6959      	ldr	r1, [r3, #20]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	895a      	ldrh	r2, [r3, #10]
 8006094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006096:	b29b      	uxth	r3, r3
 8006098:	f004 ffde 	bl	800b058 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	001a      	movs	r2, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	18d3      	adds	r3, r2, r3
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	2010      	movs	r0, #16
 80060b0:	183b      	adds	r3, r7, r0
 80060b2:	4911      	ldr	r1, [pc, #68]	; (80060f8 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80060b4:	400a      	ands	r2, r1
 80060b6:	801a      	strh	r2, [r3, #0]
 80060b8:	183b      	adds	r3, r7, r0
 80060ba:	183a      	adds	r2, r7, r0
 80060bc:	8812      	ldrh	r2, [r2, #0]
 80060be:	2110      	movs	r1, #16
 80060c0:	404a      	eors	r2, r1
 80060c2:	801a      	strh	r2, [r3, #0]
 80060c4:	183b      	adds	r3, r7, r0
 80060c6:	183a      	adds	r2, r7, r0
 80060c8:	8812      	ldrh	r2, [r2, #0]
 80060ca:	2120      	movs	r1, #32
 80060cc:	404a      	eors	r2, r1
 80060ce:	801a      	strh	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	001a      	movs	r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	18d3      	adds	r3, r2, r3
 80060de:	183a      	adds	r2, r7, r0
 80060e0:	8812      	ldrh	r2, [r2, #0]
 80060e2:	4906      	ldr	r1, [pc, #24]	; (80060fc <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80060e4:	430a      	orrs	r2, r1
 80060e6:	b292      	uxth	r2, r2
 80060e8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	0018      	movs	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b022      	add	sp, #136	; 0x88
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	00000406 	.word	0x00000406
 80060f8:	ffff8fbf 	.word	0xffff8fbf
 80060fc:	ffff8080 	.word	0xffff8080

08006100 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006100:	b590      	push	{r4, r7, lr}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	0008      	movs	r0, r1
 800610a:	0011      	movs	r1, r2
 800610c:	607b      	str	r3, [r7, #4]
 800610e:	240a      	movs	r4, #10
 8006110:	193b      	adds	r3, r7, r4
 8006112:	1c02      	adds	r2, r0, #0
 8006114:	801a      	strh	r2, [r3, #0]
 8006116:	2308      	movs	r3, #8
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	1c0a      	adds	r2, r1, #0
 800611c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800611e:	0021      	movs	r1, r4
 8006120:	187b      	adds	r3, r7, r1
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	2280      	movs	r2, #128	; 0x80
 8006126:	4013      	ands	r3, r2
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800612e:	187b      	adds	r3, r7, r1
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	2207      	movs	r2, #7
 8006134:	4013      	ands	r3, r2
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	0013      	movs	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	189b      	adds	r3, r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	18d3      	adds	r3, r2, r3
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	e00b      	b.n	8006160 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006148:	230a      	movs	r3, #10
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	881a      	ldrh	r2, [r3, #0]
 800614e:	0013      	movs	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	189b      	adds	r3, r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	3369      	adds	r3, #105	; 0x69
 8006158:	33ff      	adds	r3, #255	; 0xff
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	18d3      	adds	r3, r2, r3
 800615e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006160:	2308      	movs	r3, #8
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d107      	bne.n	800617a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2200      	movs	r2, #0
 800616e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	b29a      	uxth	r2, r3
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	80da      	strh	r2, [r3, #6]
 8006178:	e00b      	b.n	8006192 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2201      	movs	r2, #1
 800617e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	b29a      	uxth	r2, r3
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	0c1b      	lsrs	r3, r3, #16
 800618c:	b29a      	uxth	r2, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	0018      	movs	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	b007      	add	sp, #28
 800619a:	bd90      	pop	{r4, r7, pc}

0800619c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	23ba      	movs	r3, #186	; 0xba
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	2101      	movs	r1, #1
 80061b2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	23b8      	movs	r3, #184	; 0xb8
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	2100      	movs	r1, #0
 80061bc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2254      	movs	r2, #84	; 0x54
 80061c2:	5a9b      	ldrh	r3, [r3, r2]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2201      	movs	r2, #1
 80061c8:	4313      	orrs	r3, r2
 80061ca:	b299      	uxth	r1, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2254      	movs	r2, #84	; 0x54
 80061d0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2254      	movs	r2, #84	; 0x54
 80061d6:	5a9b      	ldrh	r3, [r3, r2]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2202      	movs	r2, #2
 80061dc:	4313      	orrs	r3, r2
 80061de:	b299      	uxth	r1, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2254      	movs	r2, #84	; 0x54
 80061e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	0018      	movs	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b004      	add	sp, #16
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	000a      	movs	r2, r1
 80061fa:	1cfb      	adds	r3, r7, #3
 80061fc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	46bd      	mov	sp, r7
 8006202:	b002      	add	sp, #8
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f000 fb76 	bl	8006908 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2201      	movs	r2, #1
 8006222:	4013      	ands	r3, r2
 8006224:	d100      	bne.n	8006228 <HAL_RCC_OscConfig+0x20>
 8006226:	e08e      	b.n	8006346 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006228:	4bc5      	ldr	r3, [pc, #788]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	220c      	movs	r2, #12
 800622e:	4013      	ands	r3, r2
 8006230:	2b04      	cmp	r3, #4
 8006232:	d00e      	beq.n	8006252 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006234:	4bc2      	ldr	r3, [pc, #776]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	220c      	movs	r2, #12
 800623a:	4013      	ands	r3, r2
 800623c:	2b08      	cmp	r3, #8
 800623e:	d117      	bne.n	8006270 <HAL_RCC_OscConfig+0x68>
 8006240:	4bbf      	ldr	r3, [pc, #764]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	23c0      	movs	r3, #192	; 0xc0
 8006246:	025b      	lsls	r3, r3, #9
 8006248:	401a      	ands	r2, r3
 800624a:	2380      	movs	r3, #128	; 0x80
 800624c:	025b      	lsls	r3, r3, #9
 800624e:	429a      	cmp	r2, r3
 8006250:	d10e      	bne.n	8006270 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006252:	4bbb      	ldr	r3, [pc, #748]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	2380      	movs	r3, #128	; 0x80
 8006258:	029b      	lsls	r3, r3, #10
 800625a:	4013      	ands	r3, r2
 800625c:	d100      	bne.n	8006260 <HAL_RCC_OscConfig+0x58>
 800625e:	e071      	b.n	8006344 <HAL_RCC_OscConfig+0x13c>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d000      	beq.n	800626a <HAL_RCC_OscConfig+0x62>
 8006268:	e06c      	b.n	8006344 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	f000 fb4c 	bl	8006908 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <HAL_RCC_OscConfig+0x80>
 8006278:	4bb1      	ldr	r3, [pc, #708]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4bb0      	ldr	r3, [pc, #704]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 800627e:	2180      	movs	r1, #128	; 0x80
 8006280:	0249      	lsls	r1, r1, #9
 8006282:	430a      	orrs	r2, r1
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	e02f      	b.n	80062e8 <HAL_RCC_OscConfig+0xe0>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10c      	bne.n	80062aa <HAL_RCC_OscConfig+0xa2>
 8006290:	4bab      	ldr	r3, [pc, #684]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4baa      	ldr	r3, [pc, #680]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006296:	49ab      	ldr	r1, [pc, #684]	; (8006544 <HAL_RCC_OscConfig+0x33c>)
 8006298:	400a      	ands	r2, r1
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	4ba8      	ldr	r3, [pc, #672]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4ba7      	ldr	r3, [pc, #668]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80062a2:	49a9      	ldr	r1, [pc, #676]	; (8006548 <HAL_RCC_OscConfig+0x340>)
 80062a4:	400a      	ands	r2, r1
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	e01e      	b.n	80062e8 <HAL_RCC_OscConfig+0xe0>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	d10e      	bne.n	80062d0 <HAL_RCC_OscConfig+0xc8>
 80062b2:	4ba3      	ldr	r3, [pc, #652]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	4ba2      	ldr	r3, [pc, #648]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80062b8:	2180      	movs	r1, #128	; 0x80
 80062ba:	02c9      	lsls	r1, r1, #11
 80062bc:	430a      	orrs	r2, r1
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	4b9f      	ldr	r3, [pc, #636]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	4b9e      	ldr	r3, [pc, #632]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80062c6:	2180      	movs	r1, #128	; 0x80
 80062c8:	0249      	lsls	r1, r1, #9
 80062ca:	430a      	orrs	r2, r1
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e00b      	b.n	80062e8 <HAL_RCC_OscConfig+0xe0>
 80062d0:	4b9b      	ldr	r3, [pc, #620]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4b9a      	ldr	r3, [pc, #616]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80062d6:	499b      	ldr	r1, [pc, #620]	; (8006544 <HAL_RCC_OscConfig+0x33c>)
 80062d8:	400a      	ands	r2, r1
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	4b98      	ldr	r3, [pc, #608]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4b97      	ldr	r3, [pc, #604]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80062e2:	4999      	ldr	r1, [pc, #612]	; (8006548 <HAL_RCC_OscConfig+0x340>)
 80062e4:	400a      	ands	r2, r1
 80062e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d014      	beq.n	800631a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f0:	f7fd f884 	bl	80033fc <HAL_GetTick>
 80062f4:	0003      	movs	r3, r0
 80062f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062fa:	f7fd f87f 	bl	80033fc <HAL_GetTick>
 80062fe:	0002      	movs	r2, r0
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b64      	cmp	r3, #100	; 0x64
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e2fd      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630c:	4b8c      	ldr	r3, [pc, #560]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	2380      	movs	r3, #128	; 0x80
 8006312:	029b      	lsls	r3, r3, #10
 8006314:	4013      	ands	r3, r2
 8006316:	d0f0      	beq.n	80062fa <HAL_RCC_OscConfig+0xf2>
 8006318:	e015      	b.n	8006346 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631a:	f7fd f86f 	bl	80033fc <HAL_GetTick>
 800631e:	0003      	movs	r3, r0
 8006320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006324:	f7fd f86a 	bl	80033fc <HAL_GetTick>
 8006328:	0002      	movs	r2, r0
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b64      	cmp	r3, #100	; 0x64
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e2e8      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006336:	4b82      	ldr	r3, [pc, #520]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	2380      	movs	r3, #128	; 0x80
 800633c:	029b      	lsls	r3, r3, #10
 800633e:	4013      	ands	r3, r2
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x11c>
 8006342:	e000      	b.n	8006346 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006344:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2202      	movs	r2, #2
 800634c:	4013      	ands	r3, r2
 800634e:	d100      	bne.n	8006352 <HAL_RCC_OscConfig+0x14a>
 8006350:	e06c      	b.n	800642c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006352:	4b7b      	ldr	r3, [pc, #492]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	220c      	movs	r2, #12
 8006358:	4013      	ands	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800635c:	4b78      	ldr	r3, [pc, #480]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	220c      	movs	r2, #12
 8006362:	4013      	ands	r3, r2
 8006364:	2b08      	cmp	r3, #8
 8006366:	d11f      	bne.n	80063a8 <HAL_RCC_OscConfig+0x1a0>
 8006368:	4b75      	ldr	r3, [pc, #468]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	23c0      	movs	r3, #192	; 0xc0
 800636e:	025b      	lsls	r3, r3, #9
 8006370:	401a      	ands	r2, r3
 8006372:	2380      	movs	r3, #128	; 0x80
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	429a      	cmp	r2, r3
 8006378:	d116      	bne.n	80063a8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800637a:	4b71      	ldr	r3, [pc, #452]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2202      	movs	r2, #2
 8006380:	4013      	ands	r3, r2
 8006382:	d005      	beq.n	8006390 <HAL_RCC_OscConfig+0x188>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d001      	beq.n	8006390 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e2bb      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006390:	4b6b      	ldr	r3, [pc, #428]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	22f8      	movs	r2, #248	; 0xf8
 8006396:	4393      	bics	r3, r2
 8006398:	0019      	movs	r1, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	00da      	lsls	r2, r3, #3
 80063a0:	4b67      	ldr	r3, [pc, #412]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80063a2:	430a      	orrs	r2, r1
 80063a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063a6:	e041      	b.n	800642c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d024      	beq.n	80063fa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063b0:	4b63      	ldr	r3, [pc, #396]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	4b62      	ldr	r3, [pc, #392]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80063b6:	2101      	movs	r1, #1
 80063b8:	430a      	orrs	r2, r1
 80063ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063bc:	f7fd f81e 	bl	80033fc <HAL_GetTick>
 80063c0:	0003      	movs	r3, r0
 80063c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063c6:	f7fd f819 	bl	80033fc <HAL_GetTick>
 80063ca:	0002      	movs	r2, r0
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e297      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d8:	4b59      	ldr	r3, [pc, #356]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2202      	movs	r2, #2
 80063de:	4013      	ands	r3, r2
 80063e0:	d0f1      	beq.n	80063c6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e2:	4b57      	ldr	r3, [pc, #348]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	22f8      	movs	r2, #248	; 0xf8
 80063e8:	4393      	bics	r3, r2
 80063ea:	0019      	movs	r1, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	00da      	lsls	r2, r3, #3
 80063f2:	4b53      	ldr	r3, [pc, #332]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80063f4:	430a      	orrs	r2, r1
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	e018      	b.n	800642c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063fa:	4b51      	ldr	r3, [pc, #324]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4b50      	ldr	r3, [pc, #320]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006400:	2101      	movs	r1, #1
 8006402:	438a      	bics	r2, r1
 8006404:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006406:	f7fc fff9 	bl	80033fc <HAL_GetTick>
 800640a:	0003      	movs	r3, r0
 800640c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006410:	f7fc fff4 	bl	80033fc <HAL_GetTick>
 8006414:	0002      	movs	r2, r0
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e272      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006422:	4b47      	ldr	r3, [pc, #284]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2202      	movs	r2, #2
 8006428:	4013      	ands	r3, r2
 800642a:	d1f1      	bne.n	8006410 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2208      	movs	r2, #8
 8006432:	4013      	ands	r3, r2
 8006434:	d036      	beq.n	80064a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d019      	beq.n	8006472 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800643e:	4b40      	ldr	r3, [pc, #256]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006442:	4b3f      	ldr	r3, [pc, #252]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006444:	2101      	movs	r1, #1
 8006446:	430a      	orrs	r2, r1
 8006448:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800644a:	f7fc ffd7 	bl	80033fc <HAL_GetTick>
 800644e:	0003      	movs	r3, r0
 8006450:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006454:	f7fc ffd2 	bl	80033fc <HAL_GetTick>
 8006458:	0002      	movs	r2, r0
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e250      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006466:	4b36      	ldr	r3, [pc, #216]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	2202      	movs	r2, #2
 800646c:	4013      	ands	r3, r2
 800646e:	d0f1      	beq.n	8006454 <HAL_RCC_OscConfig+0x24c>
 8006470:	e018      	b.n	80064a4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006472:	4b33      	ldr	r3, [pc, #204]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006476:	4b32      	ldr	r3, [pc, #200]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006478:	2101      	movs	r1, #1
 800647a:	438a      	bics	r2, r1
 800647c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800647e:	f7fc ffbd 	bl	80033fc <HAL_GetTick>
 8006482:	0003      	movs	r3, r0
 8006484:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006488:	f7fc ffb8 	bl	80033fc <HAL_GetTick>
 800648c:	0002      	movs	r2, r0
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e236      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800649a:	4b29      	ldr	r3, [pc, #164]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	2202      	movs	r2, #2
 80064a0:	4013      	ands	r3, r2
 80064a2:	d1f1      	bne.n	8006488 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2204      	movs	r2, #4
 80064aa:	4013      	ands	r3, r2
 80064ac:	d100      	bne.n	80064b0 <HAL_RCC_OscConfig+0x2a8>
 80064ae:	e0b5      	b.n	800661c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064b0:	201f      	movs	r0, #31
 80064b2:	183b      	adds	r3, r7, r0
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064b8:	4b21      	ldr	r3, [pc, #132]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	2380      	movs	r3, #128	; 0x80
 80064be:	055b      	lsls	r3, r3, #21
 80064c0:	4013      	ands	r3, r2
 80064c2:	d110      	bne.n	80064e6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064c4:	4b1e      	ldr	r3, [pc, #120]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80064ca:	2180      	movs	r1, #128	; 0x80
 80064cc:	0549      	lsls	r1, r1, #21
 80064ce:	430a      	orrs	r2, r1
 80064d0:	61da      	str	r2, [r3, #28]
 80064d2:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	2380      	movs	r3, #128	; 0x80
 80064d8:	055b      	lsls	r3, r3, #21
 80064da:	4013      	ands	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064e0:	183b      	adds	r3, r7, r0
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e6:	4b19      	ldr	r3, [pc, #100]	; (800654c <HAL_RCC_OscConfig+0x344>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4013      	ands	r3, r2
 80064f0:	d11a      	bne.n	8006528 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064f2:	4b16      	ldr	r3, [pc, #88]	; (800654c <HAL_RCC_OscConfig+0x344>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b15      	ldr	r3, [pc, #84]	; (800654c <HAL_RCC_OscConfig+0x344>)
 80064f8:	2180      	movs	r1, #128	; 0x80
 80064fa:	0049      	lsls	r1, r1, #1
 80064fc:	430a      	orrs	r2, r1
 80064fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006500:	f7fc ff7c 	bl	80033fc <HAL_GetTick>
 8006504:	0003      	movs	r3, r0
 8006506:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800650a:	f7fc ff77 	bl	80033fc <HAL_GetTick>
 800650e:	0002      	movs	r2, r0
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b64      	cmp	r3, #100	; 0x64
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e1f5      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651c:	4b0b      	ldr	r3, [pc, #44]	; (800654c <HAL_RCC_OscConfig+0x344>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	2380      	movs	r3, #128	; 0x80
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	4013      	ands	r3, r2
 8006526:	d0f0      	beq.n	800650a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d10f      	bne.n	8006550 <HAL_RCC_OscConfig+0x348>
 8006530:	4b03      	ldr	r3, [pc, #12]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	4b02      	ldr	r3, [pc, #8]	; (8006540 <HAL_RCC_OscConfig+0x338>)
 8006536:	2101      	movs	r1, #1
 8006538:	430a      	orrs	r2, r1
 800653a:	621a      	str	r2, [r3, #32]
 800653c:	e036      	b.n	80065ac <HAL_RCC_OscConfig+0x3a4>
 800653e:	46c0      	nop			; (mov r8, r8)
 8006540:	40021000 	.word	0x40021000
 8006544:	fffeffff 	.word	0xfffeffff
 8006548:	fffbffff 	.word	0xfffbffff
 800654c:	40007000 	.word	0x40007000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10c      	bne.n	8006572 <HAL_RCC_OscConfig+0x36a>
 8006558:	4bca      	ldr	r3, [pc, #808]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800655a:	6a1a      	ldr	r2, [r3, #32]
 800655c:	4bc9      	ldr	r3, [pc, #804]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800655e:	2101      	movs	r1, #1
 8006560:	438a      	bics	r2, r1
 8006562:	621a      	str	r2, [r3, #32]
 8006564:	4bc7      	ldr	r3, [pc, #796]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006566:	6a1a      	ldr	r2, [r3, #32]
 8006568:	4bc6      	ldr	r3, [pc, #792]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800656a:	2104      	movs	r1, #4
 800656c:	438a      	bics	r2, r1
 800656e:	621a      	str	r2, [r3, #32]
 8006570:	e01c      	b.n	80065ac <HAL_RCC_OscConfig+0x3a4>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	2b05      	cmp	r3, #5
 8006578:	d10c      	bne.n	8006594 <HAL_RCC_OscConfig+0x38c>
 800657a:	4bc2      	ldr	r3, [pc, #776]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800657c:	6a1a      	ldr	r2, [r3, #32]
 800657e:	4bc1      	ldr	r3, [pc, #772]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006580:	2104      	movs	r1, #4
 8006582:	430a      	orrs	r2, r1
 8006584:	621a      	str	r2, [r3, #32]
 8006586:	4bbf      	ldr	r3, [pc, #764]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006588:	6a1a      	ldr	r2, [r3, #32]
 800658a:	4bbe      	ldr	r3, [pc, #760]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800658c:	2101      	movs	r1, #1
 800658e:	430a      	orrs	r2, r1
 8006590:	621a      	str	r2, [r3, #32]
 8006592:	e00b      	b.n	80065ac <HAL_RCC_OscConfig+0x3a4>
 8006594:	4bbb      	ldr	r3, [pc, #748]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006596:	6a1a      	ldr	r2, [r3, #32]
 8006598:	4bba      	ldr	r3, [pc, #744]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800659a:	2101      	movs	r1, #1
 800659c:	438a      	bics	r2, r1
 800659e:	621a      	str	r2, [r3, #32]
 80065a0:	4bb8      	ldr	r3, [pc, #736]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80065a2:	6a1a      	ldr	r2, [r3, #32]
 80065a4:	4bb7      	ldr	r3, [pc, #732]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80065a6:	2104      	movs	r1, #4
 80065a8:	438a      	bics	r2, r1
 80065aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d014      	beq.n	80065de <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065b4:	f7fc ff22 	bl	80033fc <HAL_GetTick>
 80065b8:	0003      	movs	r3, r0
 80065ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065bc:	e009      	b.n	80065d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065be:	f7fc ff1d 	bl	80033fc <HAL_GetTick>
 80065c2:	0002      	movs	r2, r0
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	4aaf      	ldr	r2, [pc, #700]	; (8006888 <HAL_RCC_OscConfig+0x680>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e19a      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d2:	4bac      	ldr	r3, [pc, #688]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	2202      	movs	r2, #2
 80065d8:	4013      	ands	r3, r2
 80065da:	d0f0      	beq.n	80065be <HAL_RCC_OscConfig+0x3b6>
 80065dc:	e013      	b.n	8006606 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065de:	f7fc ff0d 	bl	80033fc <HAL_GetTick>
 80065e2:	0003      	movs	r3, r0
 80065e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065e6:	e009      	b.n	80065fc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065e8:	f7fc ff08 	bl	80033fc <HAL_GetTick>
 80065ec:	0002      	movs	r2, r0
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	4aa5      	ldr	r2, [pc, #660]	; (8006888 <HAL_RCC_OscConfig+0x680>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e185      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065fc:	4ba1      	ldr	r3, [pc, #644]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	2202      	movs	r2, #2
 8006602:	4013      	ands	r3, r2
 8006604:	d1f0      	bne.n	80065e8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006606:	231f      	movs	r3, #31
 8006608:	18fb      	adds	r3, r7, r3
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d105      	bne.n	800661c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006610:	4b9c      	ldr	r3, [pc, #624]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	4b9b      	ldr	r3, [pc, #620]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006616:	499d      	ldr	r1, [pc, #628]	; (800688c <HAL_RCC_OscConfig+0x684>)
 8006618:	400a      	ands	r2, r1
 800661a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2210      	movs	r2, #16
 8006622:	4013      	ands	r3, r2
 8006624:	d063      	beq.n	80066ee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d12a      	bne.n	8006684 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800662e:	4b95      	ldr	r3, [pc, #596]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006632:	4b94      	ldr	r3, [pc, #592]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006634:	2104      	movs	r1, #4
 8006636:	430a      	orrs	r2, r1
 8006638:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800663a:	4b92      	ldr	r3, [pc, #584]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800663c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800663e:	4b91      	ldr	r3, [pc, #580]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006640:	2101      	movs	r1, #1
 8006642:	430a      	orrs	r2, r1
 8006644:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006646:	f7fc fed9 	bl	80033fc <HAL_GetTick>
 800664a:	0003      	movs	r3, r0
 800664c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006650:	f7fc fed4 	bl	80033fc <HAL_GetTick>
 8006654:	0002      	movs	r2, r0
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e152      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006662:	4b88      	ldr	r3, [pc, #544]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006666:	2202      	movs	r2, #2
 8006668:	4013      	ands	r3, r2
 800666a:	d0f1      	beq.n	8006650 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800666c:	4b85      	ldr	r3, [pc, #532]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800666e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006670:	22f8      	movs	r2, #248	; 0xf8
 8006672:	4393      	bics	r3, r2
 8006674:	0019      	movs	r1, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	00da      	lsls	r2, r3, #3
 800667c:	4b81      	ldr	r3, [pc, #516]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800667e:	430a      	orrs	r2, r1
 8006680:	635a      	str	r2, [r3, #52]	; 0x34
 8006682:	e034      	b.n	80066ee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	3305      	adds	r3, #5
 800668a:	d111      	bne.n	80066b0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800668c:	4b7d      	ldr	r3, [pc, #500]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800668e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006690:	4b7c      	ldr	r3, [pc, #496]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006692:	2104      	movs	r1, #4
 8006694:	438a      	bics	r2, r1
 8006696:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006698:	4b7a      	ldr	r3, [pc, #488]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	22f8      	movs	r2, #248	; 0xf8
 800669e:	4393      	bics	r3, r2
 80066a0:	0019      	movs	r1, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	00da      	lsls	r2, r3, #3
 80066a8:	4b76      	ldr	r3, [pc, #472]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80066aa:	430a      	orrs	r2, r1
 80066ac:	635a      	str	r2, [r3, #52]	; 0x34
 80066ae:	e01e      	b.n	80066ee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80066b0:	4b74      	ldr	r3, [pc, #464]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80066b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066b4:	4b73      	ldr	r3, [pc, #460]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80066b6:	2104      	movs	r1, #4
 80066b8:	430a      	orrs	r2, r1
 80066ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80066bc:	4b71      	ldr	r3, [pc, #452]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80066be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066c0:	4b70      	ldr	r3, [pc, #448]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80066c2:	2101      	movs	r1, #1
 80066c4:	438a      	bics	r2, r1
 80066c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c8:	f7fc fe98 	bl	80033fc <HAL_GetTick>
 80066cc:	0003      	movs	r3, r0
 80066ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80066d2:	f7fc fe93 	bl	80033fc <HAL_GetTick>
 80066d6:	0002      	movs	r2, r0
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e111      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80066e4:	4b67      	ldr	r3, [pc, #412]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80066e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e8:	2202      	movs	r2, #2
 80066ea:	4013      	ands	r3, r2
 80066ec:	d1f1      	bne.n	80066d2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2220      	movs	r2, #32
 80066f4:	4013      	ands	r3, r2
 80066f6:	d05c      	beq.n	80067b2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80066f8:	4b62      	ldr	r3, [pc, #392]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	220c      	movs	r2, #12
 80066fe:	4013      	ands	r3, r2
 8006700:	2b0c      	cmp	r3, #12
 8006702:	d00e      	beq.n	8006722 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006704:	4b5f      	ldr	r3, [pc, #380]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	220c      	movs	r2, #12
 800670a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800670c:	2b08      	cmp	r3, #8
 800670e:	d114      	bne.n	800673a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006710:	4b5c      	ldr	r3, [pc, #368]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	23c0      	movs	r3, #192	; 0xc0
 8006716:	025b      	lsls	r3, r3, #9
 8006718:	401a      	ands	r2, r3
 800671a:	23c0      	movs	r3, #192	; 0xc0
 800671c:	025b      	lsls	r3, r3, #9
 800671e:	429a      	cmp	r2, r3
 8006720:	d10b      	bne.n	800673a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006722:	4b58      	ldr	r3, [pc, #352]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006726:	2380      	movs	r3, #128	; 0x80
 8006728:	025b      	lsls	r3, r3, #9
 800672a:	4013      	ands	r3, r2
 800672c:	d040      	beq.n	80067b0 <HAL_RCC_OscConfig+0x5a8>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d03c      	beq.n	80067b0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e0e6      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01b      	beq.n	800677a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006742:	4b50      	ldr	r3, [pc, #320]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006746:	4b4f      	ldr	r3, [pc, #316]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006748:	2180      	movs	r1, #128	; 0x80
 800674a:	0249      	lsls	r1, r1, #9
 800674c:	430a      	orrs	r2, r1
 800674e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006750:	f7fc fe54 	bl	80033fc <HAL_GetTick>
 8006754:	0003      	movs	r3, r0
 8006756:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800675a:	f7fc fe4f 	bl	80033fc <HAL_GetTick>
 800675e:	0002      	movs	r2, r0
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e0cd      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800676c:	4b45      	ldr	r3, [pc, #276]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800676e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	025b      	lsls	r3, r3, #9
 8006774:	4013      	ands	r3, r2
 8006776:	d0f0      	beq.n	800675a <HAL_RCC_OscConfig+0x552>
 8006778:	e01b      	b.n	80067b2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800677a:	4b42      	ldr	r3, [pc, #264]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800677c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800677e:	4b41      	ldr	r3, [pc, #260]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006780:	4943      	ldr	r1, [pc, #268]	; (8006890 <HAL_RCC_OscConfig+0x688>)
 8006782:	400a      	ands	r2, r1
 8006784:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006786:	f7fc fe39 	bl	80033fc <HAL_GetTick>
 800678a:	0003      	movs	r3, r0
 800678c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006790:	f7fc fe34 	bl	80033fc <HAL_GetTick>
 8006794:	0002      	movs	r2, r0
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e0b2      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80067a2:	4b38      	ldr	r3, [pc, #224]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80067a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a6:	2380      	movs	r3, #128	; 0x80
 80067a8:	025b      	lsls	r3, r3, #9
 80067aa:	4013      	ands	r3, r2
 80067ac:	d1f0      	bne.n	8006790 <HAL_RCC_OscConfig+0x588>
 80067ae:	e000      	b.n	80067b2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80067b0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d100      	bne.n	80067bc <HAL_RCC_OscConfig+0x5b4>
 80067ba:	e0a4      	b.n	8006906 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067bc:	4b31      	ldr	r3, [pc, #196]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	220c      	movs	r2, #12
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d100      	bne.n	80067ca <HAL_RCC_OscConfig+0x5c2>
 80067c8:	e078      	b.n	80068bc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d14c      	bne.n	800686c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d2:	4b2c      	ldr	r3, [pc, #176]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	4b2b      	ldr	r3, [pc, #172]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80067d8:	492e      	ldr	r1, [pc, #184]	; (8006894 <HAL_RCC_OscConfig+0x68c>)
 80067da:	400a      	ands	r2, r1
 80067dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067de:	f7fc fe0d 	bl	80033fc <HAL_GetTick>
 80067e2:	0003      	movs	r3, r0
 80067e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067e8:	f7fc fe08 	bl	80033fc <HAL_GetTick>
 80067ec:	0002      	movs	r2, r0
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e086      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067fa:	4b22      	ldr	r3, [pc, #136]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	049b      	lsls	r3, r3, #18
 8006802:	4013      	ands	r3, r2
 8006804:	d1f0      	bne.n	80067e8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006806:	4b1f      	ldr	r3, [pc, #124]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680a:	220f      	movs	r2, #15
 800680c:	4393      	bics	r3, r2
 800680e:	0019      	movs	r1, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006814:	4b1b      	ldr	r3, [pc, #108]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006816:	430a      	orrs	r2, r1
 8006818:	62da      	str	r2, [r3, #44]	; 0x2c
 800681a:	4b1a      	ldr	r3, [pc, #104]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	4a1e      	ldr	r2, [pc, #120]	; (8006898 <HAL_RCC_OscConfig+0x690>)
 8006820:	4013      	ands	r3, r2
 8006822:	0019      	movs	r1, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682c:	431a      	orrs	r2, r3
 800682e:	4b15      	ldr	r3, [pc, #84]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006830:	430a      	orrs	r2, r1
 8006832:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006834:	4b13      	ldr	r3, [pc, #76]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4b12      	ldr	r3, [pc, #72]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800683a:	2180      	movs	r1, #128	; 0x80
 800683c:	0449      	lsls	r1, r1, #17
 800683e:	430a      	orrs	r2, r1
 8006840:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006842:	f7fc fddb 	bl	80033fc <HAL_GetTick>
 8006846:	0003      	movs	r3, r0
 8006848:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684c:	f7fc fdd6 	bl	80033fc <HAL_GetTick>
 8006850:	0002      	movs	r2, r0
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e054      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	2380      	movs	r3, #128	; 0x80
 8006864:	049b      	lsls	r3, r3, #18
 8006866:	4013      	ands	r3, r2
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0x644>
 800686a:	e04c      	b.n	8006906 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686c:	4b05      	ldr	r3, [pc, #20]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	4b04      	ldr	r3, [pc, #16]	; (8006884 <HAL_RCC_OscConfig+0x67c>)
 8006872:	4908      	ldr	r1, [pc, #32]	; (8006894 <HAL_RCC_OscConfig+0x68c>)
 8006874:	400a      	ands	r2, r1
 8006876:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006878:	f7fc fdc0 	bl	80033fc <HAL_GetTick>
 800687c:	0003      	movs	r3, r0
 800687e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006880:	e015      	b.n	80068ae <HAL_RCC_OscConfig+0x6a6>
 8006882:	46c0      	nop			; (mov r8, r8)
 8006884:	40021000 	.word	0x40021000
 8006888:	00001388 	.word	0x00001388
 800688c:	efffffff 	.word	0xefffffff
 8006890:	fffeffff 	.word	0xfffeffff
 8006894:	feffffff 	.word	0xfeffffff
 8006898:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800689c:	f7fc fdae 	bl	80033fc <HAL_GetTick>
 80068a0:	0002      	movs	r2, r0
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e02c      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068ae:	4b18      	ldr	r3, [pc, #96]	; (8006910 <HAL_RCC_OscConfig+0x708>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	049b      	lsls	r3, r3, #18
 80068b6:	4013      	ands	r3, r2
 80068b8:	d1f0      	bne.n	800689c <HAL_RCC_OscConfig+0x694>
 80068ba:	e024      	b.n	8006906 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e01f      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80068c8:	4b11      	ldr	r3, [pc, #68]	; (8006910 <HAL_RCC_OscConfig+0x708>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80068ce:	4b10      	ldr	r3, [pc, #64]	; (8006910 <HAL_RCC_OscConfig+0x708>)
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	23c0      	movs	r3, #192	; 0xc0
 80068d8:	025b      	lsls	r3, r3, #9
 80068da:	401a      	ands	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d10e      	bne.n	8006902 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	220f      	movs	r2, #15
 80068e8:	401a      	ands	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d107      	bne.n	8006902 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	23f0      	movs	r3, #240	; 0xf0
 80068f6:	039b      	lsls	r3, r3, #14
 80068f8:	401a      	ands	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80068fe:	429a      	cmp	r2, r3
 8006900:	d001      	beq.n	8006906 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	0018      	movs	r0, r3
 800690a:	46bd      	mov	sp, r7
 800690c:	b008      	add	sp, #32
 800690e:	bd80      	pop	{r7, pc}
 8006910:	40021000 	.word	0x40021000

08006914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e0bf      	b.n	8006aa8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006928:	4b61      	ldr	r3, [pc, #388]	; (8006ab0 <HAL_RCC_ClockConfig+0x19c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2201      	movs	r2, #1
 800692e:	4013      	ands	r3, r2
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d911      	bls.n	800695a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006936:	4b5e      	ldr	r3, [pc, #376]	; (8006ab0 <HAL_RCC_ClockConfig+0x19c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2201      	movs	r2, #1
 800693c:	4393      	bics	r3, r2
 800693e:	0019      	movs	r1, r3
 8006940:	4b5b      	ldr	r3, [pc, #364]	; (8006ab0 <HAL_RCC_ClockConfig+0x19c>)
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006948:	4b59      	ldr	r3, [pc, #356]	; (8006ab0 <HAL_RCC_ClockConfig+0x19c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2201      	movs	r2, #1
 800694e:	4013      	ands	r3, r2
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d001      	beq.n	800695a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e0a6      	b.n	8006aa8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2202      	movs	r2, #2
 8006960:	4013      	ands	r3, r2
 8006962:	d015      	beq.n	8006990 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2204      	movs	r2, #4
 800696a:	4013      	ands	r3, r2
 800696c:	d006      	beq.n	800697c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800696e:	4b51      	ldr	r3, [pc, #324]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	4b50      	ldr	r3, [pc, #320]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8006974:	21e0      	movs	r1, #224	; 0xe0
 8006976:	00c9      	lsls	r1, r1, #3
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800697c:	4b4d      	ldr	r3, [pc, #308]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	22f0      	movs	r2, #240	; 0xf0
 8006982:	4393      	bics	r3, r2
 8006984:	0019      	movs	r1, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	4b4a      	ldr	r3, [pc, #296]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 800698c:	430a      	orrs	r2, r1
 800698e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2201      	movs	r2, #1
 8006996:	4013      	ands	r3, r2
 8006998:	d04c      	beq.n	8006a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d107      	bne.n	80069b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069a2:	4b44      	ldr	r3, [pc, #272]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	2380      	movs	r3, #128	; 0x80
 80069a8:	029b      	lsls	r3, r3, #10
 80069aa:	4013      	ands	r3, r2
 80069ac:	d120      	bne.n	80069f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e07a      	b.n	8006aa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d107      	bne.n	80069ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ba:	4b3e      	ldr	r3, [pc, #248]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	2380      	movs	r3, #128	; 0x80
 80069c0:	049b      	lsls	r3, r3, #18
 80069c2:	4013      	ands	r3, r2
 80069c4:	d114      	bne.n	80069f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e06e      	b.n	8006aa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d107      	bne.n	80069e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80069d2:	4b38      	ldr	r3, [pc, #224]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 80069d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d6:	2380      	movs	r3, #128	; 0x80
 80069d8:	025b      	lsls	r3, r3, #9
 80069da:	4013      	ands	r3, r2
 80069dc:	d108      	bne.n	80069f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e062      	b.n	8006aa8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e2:	4b34      	ldr	r3, [pc, #208]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2202      	movs	r2, #2
 80069e8:	4013      	ands	r3, r2
 80069ea:	d101      	bne.n	80069f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e05b      	b.n	8006aa8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069f0:	4b30      	ldr	r3, [pc, #192]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2203      	movs	r2, #3
 80069f6:	4393      	bics	r3, r2
 80069f8:	0019      	movs	r1, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	4b2d      	ldr	r3, [pc, #180]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8006a00:	430a      	orrs	r2, r1
 8006a02:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a04:	f7fc fcfa 	bl	80033fc <HAL_GetTick>
 8006a08:	0003      	movs	r3, r0
 8006a0a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a0c:	e009      	b.n	8006a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a0e:	f7fc fcf5 	bl	80033fc <HAL_GetTick>
 8006a12:	0002      	movs	r2, r0
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	4a27      	ldr	r2, [pc, #156]	; (8006ab8 <HAL_RCC_ClockConfig+0x1a4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e042      	b.n	8006aa8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	220c      	movs	r2, #12
 8006a28:	401a      	ands	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d1ec      	bne.n	8006a0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a34:	4b1e      	ldr	r3, [pc, #120]	; (8006ab0 <HAL_RCC_ClockConfig+0x19c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d211      	bcs.n	8006a66 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a42:	4b1b      	ldr	r3, [pc, #108]	; (8006ab0 <HAL_RCC_ClockConfig+0x19c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2201      	movs	r2, #1
 8006a48:	4393      	bics	r3, r2
 8006a4a:	0019      	movs	r1, r3
 8006a4c:	4b18      	ldr	r3, [pc, #96]	; (8006ab0 <HAL_RCC_ClockConfig+0x19c>)
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a54:	4b16      	ldr	r3, [pc, #88]	; (8006ab0 <HAL_RCC_ClockConfig+0x19c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d001      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e020      	b.n	8006aa8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2204      	movs	r2, #4
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	d009      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006a70:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4a11      	ldr	r2, [pc, #68]	; (8006abc <HAL_RCC_ClockConfig+0x1a8>)
 8006a76:	4013      	ands	r3, r2
 8006a78:	0019      	movs	r1, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8006a80:	430a      	orrs	r2, r1
 8006a82:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006a84:	f000 f820 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 8006a88:	0001      	movs	r1, r0
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <HAL_RCC_ClockConfig+0x1a0>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	091b      	lsrs	r3, r3, #4
 8006a90:	220f      	movs	r2, #15
 8006a92:	4013      	ands	r3, r2
 8006a94:	4a0a      	ldr	r2, [pc, #40]	; (8006ac0 <HAL_RCC_ClockConfig+0x1ac>)
 8006a96:	5cd3      	ldrb	r3, [r2, r3]
 8006a98:	000a      	movs	r2, r1
 8006a9a:	40da      	lsrs	r2, r3
 8006a9c:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <HAL_RCC_ClockConfig+0x1b0>)
 8006a9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006aa0:	2003      	movs	r0, #3
 8006aa2:	f7fc fc65 	bl	8003370 <HAL_InitTick>
  
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	b004      	add	sp, #16
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40022000 	.word	0x40022000
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	00001388 	.word	0x00001388
 8006abc:	fffff8ff 	.word	0xfffff8ff
 8006ac0:	0800e264 	.word	0x0800e264
 8006ac4:	20000000 	.word	0x20000000

08006ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b08f      	sub	sp, #60	; 0x3c
 8006acc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006ace:	2314      	movs	r3, #20
 8006ad0:	18fb      	adds	r3, r7, r3
 8006ad2:	4a38      	ldr	r2, [pc, #224]	; (8006bb4 <HAL_RCC_GetSysClockFreq+0xec>)
 8006ad4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006ad6:	c313      	stmia	r3!, {r0, r1, r4}
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006adc:	1d3b      	adds	r3, r7, #4
 8006ade:	4a36      	ldr	r2, [pc, #216]	; (8006bb8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006ae0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006ae2:	c313      	stmia	r3!, {r0, r1, r4}
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aec:	2300      	movs	r3, #0
 8006aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8006af0:	2300      	movs	r3, #0
 8006af2:	637b      	str	r3, [r7, #52]	; 0x34
 8006af4:	2300      	movs	r3, #0
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006afc:	4b2f      	ldr	r3, [pc, #188]	; (8006bbc <HAL_RCC_GetSysClockFreq+0xf4>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b04:	220c      	movs	r2, #12
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b0c      	cmp	r3, #12
 8006b0a:	d047      	beq.n	8006b9c <HAL_RCC_GetSysClockFreq+0xd4>
 8006b0c:	d849      	bhi.n	8006ba2 <HAL_RCC_GetSysClockFreq+0xda>
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d002      	beq.n	8006b18 <HAL_RCC_GetSysClockFreq+0x50>
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d003      	beq.n	8006b1e <HAL_RCC_GetSysClockFreq+0x56>
 8006b16:	e044      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b18:	4b29      	ldr	r3, [pc, #164]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b1c:	e044      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	0c9b      	lsrs	r3, r3, #18
 8006b22:	220f      	movs	r2, #15
 8006b24:	4013      	ands	r3, r2
 8006b26:	2214      	movs	r2, #20
 8006b28:	18ba      	adds	r2, r7, r2
 8006b2a:	5cd3      	ldrb	r3, [r2, r3]
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006b2e:	4b23      	ldr	r3, [pc, #140]	; (8006bbc <HAL_RCC_GetSysClockFreq+0xf4>)
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	220f      	movs	r2, #15
 8006b34:	4013      	ands	r3, r2
 8006b36:	1d3a      	adds	r2, r7, #4
 8006b38:	5cd3      	ldrb	r3, [r2, r3]
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b3e:	23c0      	movs	r3, #192	; 0xc0
 8006b40:	025b      	lsls	r3, r3, #9
 8006b42:	401a      	ands	r2, r3
 8006b44:	2380      	movs	r3, #128	; 0x80
 8006b46:	025b      	lsls	r3, r3, #9
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d109      	bne.n	8006b60 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b4e:	481c      	ldr	r0, [pc, #112]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b50:	f7f9 faec 	bl	800012c <__udivsi3>
 8006b54:	0003      	movs	r3, r0
 8006b56:	001a      	movs	r2, r3
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	4353      	muls	r3, r2
 8006b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b5e:	e01a      	b.n	8006b96 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b62:	23c0      	movs	r3, #192	; 0xc0
 8006b64:	025b      	lsls	r3, r3, #9
 8006b66:	401a      	ands	r2, r3
 8006b68:	23c0      	movs	r3, #192	; 0xc0
 8006b6a:	025b      	lsls	r3, r3, #9
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d109      	bne.n	8006b84 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b72:	4814      	ldr	r0, [pc, #80]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006b74:	f7f9 fada 	bl	800012c <__udivsi3>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	001a      	movs	r2, r3
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	4353      	muls	r3, r2
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b86:	4810      	ldr	r0, [pc, #64]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006b88:	f7f9 fad0 	bl	800012c <__udivsi3>
 8006b8c:	0003      	movs	r3, r0
 8006b8e:	001a      	movs	r2, r3
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	4353      	muls	r3, r2
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b9a:	e005      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006b9c:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006b9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006ba0:	e002      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ba2:	4b09      	ldr	r3, [pc, #36]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8006ba4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006ba6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006baa:	0018      	movs	r0, r3
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b00f      	add	sp, #60	; 0x3c
 8006bb0:	bd90      	pop	{r4, r7, pc}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	0800e120 	.word	0x0800e120
 8006bb8:	0800e130 	.word	0x0800e130
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	00f42400 	.word	0x00f42400
 8006bc4:	02dc6c00 	.word	0x02dc6c00
 8006bc8:	007a1200 	.word	0x007a1200

08006bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bd0:	4b02      	ldr	r3, [pc, #8]	; (8006bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
}
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	20000000 	.word	0x20000000

08006be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006be4:	f7ff fff2 	bl	8006bcc <HAL_RCC_GetHCLKFreq>
 8006be8:	0001      	movs	r1, r0
 8006bea:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	2207      	movs	r2, #7
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	4a04      	ldr	r2, [pc, #16]	; (8006c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bf6:	5cd3      	ldrb	r3, [r2, r3]
 8006bf8:	40d9      	lsrs	r1, r3
 8006bfa:	000b      	movs	r3, r1
}    
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	40021000 	.word	0x40021000
 8006c08:	0800e274 	.word	0x0800e274

08006c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	2380      	movs	r3, #128	; 0x80
 8006c22:	025b      	lsls	r3, r3, #9
 8006c24:	4013      	ands	r3, r2
 8006c26:	d100      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006c28:	e08e      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006c2a:	2017      	movs	r0, #23
 8006c2c:	183b      	adds	r3, r7, r0
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c32:	4b6e      	ldr	r3, [pc, #440]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c34:	69da      	ldr	r2, [r3, #28]
 8006c36:	2380      	movs	r3, #128	; 0x80
 8006c38:	055b      	lsls	r3, r3, #21
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	d110      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c3e:	4b6b      	ldr	r3, [pc, #428]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c40:	69da      	ldr	r2, [r3, #28]
 8006c42:	4b6a      	ldr	r3, [pc, #424]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c44:	2180      	movs	r1, #128	; 0x80
 8006c46:	0549      	lsls	r1, r1, #21
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	61da      	str	r2, [r3, #28]
 8006c4c:	4b67      	ldr	r3, [pc, #412]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c4e:	69da      	ldr	r2, [r3, #28]
 8006c50:	2380      	movs	r3, #128	; 0x80
 8006c52:	055b      	lsls	r3, r3, #21
 8006c54:	4013      	ands	r3, r2
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5a:	183b      	adds	r3, r7, r0
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c60:	4b63      	ldr	r3, [pc, #396]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	2380      	movs	r3, #128	; 0x80
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	4013      	ands	r3, r2
 8006c6a:	d11a      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c6c:	4b60      	ldr	r3, [pc, #384]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	4b5f      	ldr	r3, [pc, #380]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c72:	2180      	movs	r1, #128	; 0x80
 8006c74:	0049      	lsls	r1, r1, #1
 8006c76:	430a      	orrs	r2, r1
 8006c78:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c7a:	f7fc fbbf 	bl	80033fc <HAL_GetTick>
 8006c7e:	0003      	movs	r3, r0
 8006c80:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c82:	e008      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c84:	f7fc fbba 	bl	80033fc <HAL_GetTick>
 8006c88:	0002      	movs	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b64      	cmp	r3, #100	; 0x64
 8006c90:	d901      	bls.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e0a6      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c96:	4b56      	ldr	r3, [pc, #344]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	2380      	movs	r3, #128	; 0x80
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	d0f0      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ca2:	4b52      	ldr	r3, [pc, #328]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ca4:	6a1a      	ldr	r2, [r3, #32]
 8006ca6:	23c0      	movs	r3, #192	; 0xc0
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4013      	ands	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d034      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	23c0      	movs	r3, #192	; 0xc0
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d02c      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cc4:	4b49      	ldr	r3, [pc, #292]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	4a4a      	ldr	r2, [pc, #296]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cce:	4b47      	ldr	r3, [pc, #284]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cd0:	6a1a      	ldr	r2, [r3, #32]
 8006cd2:	4b46      	ldr	r3, [pc, #280]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cd4:	2180      	movs	r1, #128	; 0x80
 8006cd6:	0249      	lsls	r1, r1, #9
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cdc:	4b43      	ldr	r3, [pc, #268]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cde:	6a1a      	ldr	r2, [r3, #32]
 8006ce0:	4b42      	ldr	r3, [pc, #264]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ce2:	4945      	ldr	r1, [pc, #276]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006ce4:	400a      	ands	r2, r1
 8006ce6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ce8:	4b40      	ldr	r3, [pc, #256]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d013      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf6:	f7fc fb81 	bl	80033fc <HAL_GetTick>
 8006cfa:	0003      	movs	r3, r0
 8006cfc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cfe:	e009      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d00:	f7fc fb7c 	bl	80033fc <HAL_GetTick>
 8006d04:	0002      	movs	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	4a3c      	ldr	r2, [pc, #240]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d901      	bls.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e067      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d14:	4b35      	ldr	r3, [pc, #212]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	d0f0      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d1e:	4b33      	ldr	r3, [pc, #204]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	4a34      	ldr	r2, [pc, #208]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	0019      	movs	r1, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	4b2f      	ldr	r3, [pc, #188]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006d32:	2317      	movs	r3, #23
 8006d34:	18fb      	adds	r3, r7, r3
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d105      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d3c:	4b2b      	ldr	r3, [pc, #172]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d3e:	69da      	ldr	r2, [r3, #28]
 8006d40:	4b2a      	ldr	r3, [pc, #168]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d42:	492f      	ldr	r1, [pc, #188]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006d44:	400a      	ands	r2, r1
 8006d46:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d009      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d52:	4b26      	ldr	r3, [pc, #152]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	2203      	movs	r2, #3
 8006d58:	4393      	bics	r3, r2
 8006d5a:	0019      	movs	r1, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	4b22      	ldr	r3, [pc, #136]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d62:	430a      	orrs	r2, r1
 8006d64:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	d009      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d70:	4b1e      	ldr	r3, [pc, #120]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d74:	4a23      	ldr	r2, [pc, #140]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	0019      	movs	r1, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d80:	430a      	orrs	r2, r1
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d009      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d8e:	4b17      	ldr	r3, [pc, #92]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	2210      	movs	r2, #16
 8006d94:	4393      	bics	r3, r2
 8006d96:	0019      	movs	r1, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	4b13      	ldr	r3, [pc, #76]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	2380      	movs	r3, #128	; 0x80
 8006da8:	029b      	lsls	r3, r3, #10
 8006daa:	4013      	ands	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006dae:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	2280      	movs	r2, #128	; 0x80
 8006db4:	4393      	bics	r3, r2
 8006db6:	0019      	movs	r1, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	2380      	movs	r3, #128	; 0x80
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	4013      	ands	r3, r2
 8006dcc:	d009      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006dce:	4b07      	ldr	r3, [pc, #28]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd2:	2240      	movs	r2, #64	; 0x40
 8006dd4:	4393      	bics	r3, r2
 8006dd6:	0019      	movs	r1, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	695a      	ldr	r2, [r3, #20]
 8006ddc:	4b03      	ldr	r3, [pc, #12]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006dde:	430a      	orrs	r2, r1
 8006de0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	0018      	movs	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b006      	add	sp, #24
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40021000 	.word	0x40021000
 8006df0:	40007000 	.word	0x40007000
 8006df4:	fffffcff 	.word	0xfffffcff
 8006df8:	fffeffff 	.word	0xfffeffff
 8006dfc:	00001388 	.word	0x00001388
 8006e00:	efffffff 	.word	0xefffffff
 8006e04:	fffcffff 	.word	0xfffcffff

08006e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e0a8      	b.n	8006f6c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	2382      	movs	r3, #130	; 0x82
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d009      	beq.n	8006e42 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	61da      	str	r2, [r3, #28]
 8006e34:	e005      	b.n	8006e42 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	225d      	movs	r2, #93	; 0x5d
 8006e4c:	5c9b      	ldrb	r3, [r3, r2]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d107      	bne.n	8006e64 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	225c      	movs	r2, #92	; 0x5c
 8006e58:	2100      	movs	r1, #0
 8006e5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f7fb fe0c 	bl	8002a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	225d      	movs	r2, #93	; 0x5d
 8006e68:	2102      	movs	r1, #2
 8006e6a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2140      	movs	r1, #64	; 0x40
 8006e78:	438a      	bics	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	23e0      	movs	r3, #224	; 0xe0
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d902      	bls.n	8006e8e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e002      	b.n	8006e94 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e8e:	2380      	movs	r3, #128	; 0x80
 8006e90:	015b      	lsls	r3, r3, #5
 8006e92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	23f0      	movs	r3, #240	; 0xf0
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d008      	beq.n	8006eb2 <HAL_SPI_Init+0xaa>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	23e0      	movs	r3, #224	; 0xe0
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d002      	beq.n	8006eb2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	2382      	movs	r3, #130	; 0x82
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	401a      	ands	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6899      	ldr	r1, [r3, #8]
 8006ec0:	2384      	movs	r3, #132	; 0x84
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	400b      	ands	r3, r1
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	2102      	movs	r1, #2
 8006ece:	400b      	ands	r3, r1
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	400b      	ands	r3, r1
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6999      	ldr	r1, [r3, #24]
 8006ee0:	2380      	movs	r3, #128	; 0x80
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	400b      	ands	r3, r1
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	2138      	movs	r1, #56	; 0x38
 8006eee:	400b      	ands	r3, r1
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	2180      	movs	r1, #128	; 0x80
 8006ef8:	400b      	ands	r3, r1
 8006efa:	431a      	orrs	r2, r3
 8006efc:	0011      	movs	r1, r2
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f02:	2380      	movs	r3, #128	; 0x80
 8006f04:	019b      	lsls	r3, r3, #6
 8006f06:	401a      	ands	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	0c1b      	lsrs	r3, r3, #16
 8006f16:	2204      	movs	r2, #4
 8006f18:	401a      	ands	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2110      	movs	r1, #16
 8006f20:	400b      	ands	r3, r1
 8006f22:	431a      	orrs	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	2108      	movs	r1, #8
 8006f2a:	400b      	ands	r3, r1
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68d9      	ldr	r1, [r3, #12]
 8006f32:	23f0      	movs	r3, #240	; 0xf0
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	400b      	ands	r3, r1
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	0011      	movs	r1, r2
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	2380      	movs	r3, #128	; 0x80
 8006f40:	015b      	lsls	r3, r3, #5
 8006f42:	401a      	ands	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69da      	ldr	r2, [r3, #28]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4907      	ldr	r1, [pc, #28]	; (8006f74 <HAL_SPI_Init+0x16c>)
 8006f58:	400a      	ands	r2, r1
 8006f5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	225d      	movs	r2, #93	; 0x5d
 8006f66:	2101      	movs	r1, #1
 8006f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b004      	add	sp, #16
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	fffff7ff 	.word	0xfffff7ff

08006f78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	1dbb      	adds	r3, r7, #6
 8006f86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f88:	231f      	movs	r3, #31
 8006f8a:	18fb      	adds	r3, r7, r3
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	225c      	movs	r2, #92	; 0x5c
 8006f94:	5c9b      	ldrb	r3, [r3, r2]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <HAL_SPI_Transmit+0x26>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e140      	b.n	8007220 <HAL_SPI_Transmit+0x2a8>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	225c      	movs	r2, #92	; 0x5c
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fa6:	f7fc fa29 	bl	80033fc <HAL_GetTick>
 8006faa:	0003      	movs	r3, r0
 8006fac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006fae:	2316      	movs	r3, #22
 8006fb0:	18fb      	adds	r3, r7, r3
 8006fb2:	1dba      	adds	r2, r7, #6
 8006fb4:	8812      	ldrh	r2, [r2, #0]
 8006fb6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	225d      	movs	r2, #93	; 0x5d
 8006fbc:	5c9b      	ldrb	r3, [r3, r2]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d004      	beq.n	8006fce <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006fc4:	231f      	movs	r3, #31
 8006fc6:	18fb      	adds	r3, r7, r3
 8006fc8:	2202      	movs	r2, #2
 8006fca:	701a      	strb	r2, [r3, #0]
    goto error;
 8006fcc:	e11d      	b.n	800720a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_SPI_Transmit+0x64>
 8006fd4:	1dbb      	adds	r3, r7, #6
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d104      	bne.n	8006fe6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006fdc:	231f      	movs	r3, #31
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006fe4:	e111      	b.n	800720a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	225d      	movs	r2, #93	; 0x5d
 8006fea:	2103      	movs	r1, #3
 8006fec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	1dba      	adds	r2, r7, #6
 8006ffe:	8812      	ldrh	r2, [r2, #0]
 8007000:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	1dba      	adds	r2, r7, #6
 8007006:	8812      	ldrh	r2, [r2, #0]
 8007008:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2244      	movs	r2, #68	; 0x44
 8007014:	2100      	movs	r1, #0
 8007016:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2246      	movs	r2, #70	; 0x46
 800701c:	2100      	movs	r1, #0
 800701e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	429a      	cmp	r2, r3
 8007036:	d110      	bne.n	800705a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2140      	movs	r1, #64	; 0x40
 8007044:	438a      	bics	r2, r1
 8007046:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2180      	movs	r1, #128	; 0x80
 8007054:	01c9      	lsls	r1, r1, #7
 8007056:	430a      	orrs	r2, r1
 8007058:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2240      	movs	r2, #64	; 0x40
 8007062:	4013      	ands	r3, r2
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d007      	beq.n	8007078 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2140      	movs	r1, #64	; 0x40
 8007074:	430a      	orrs	r2, r1
 8007076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	23e0      	movs	r3, #224	; 0xe0
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	429a      	cmp	r2, r3
 8007082:	d94e      	bls.n	8007122 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d004      	beq.n	8007096 <HAL_SPI_Transmit+0x11e>
 800708c:	2316      	movs	r3, #22
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d13f      	bne.n	8007116 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	881a      	ldrh	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	1c9a      	adds	r2, r3, #2
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070ba:	e02c      	b.n	8007116 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2202      	movs	r2, #2
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d112      	bne.n	80070f0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	881a      	ldrh	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	1c9a      	adds	r2, r3, #2
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070ee:	e012      	b.n	8007116 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070f0:	f7fc f984 	bl	80033fc <HAL_GetTick>
 80070f4:	0002      	movs	r2, r0
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d802      	bhi.n	8007106 <HAL_SPI_Transmit+0x18e>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	d102      	bne.n	800710c <HAL_SPI_Transmit+0x194>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d104      	bne.n	8007116 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800710c:	231f      	movs	r3, #31
 800710e:	18fb      	adds	r3, r7, r3
 8007110:	2203      	movs	r2, #3
 8007112:	701a      	strb	r2, [r3, #0]
          goto error;
 8007114:	e079      	b.n	800720a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1cd      	bne.n	80070bc <HAL_SPI_Transmit+0x144>
 8007120:	e04f      	b.n	80071c2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d004      	beq.n	8007134 <HAL_SPI_Transmit+0x1bc>
 800712a:	2316      	movs	r3, #22
 800712c:	18fb      	adds	r3, r7, r3
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d141      	bne.n	80071b8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	330c      	adds	r3, #12
 800713e:	7812      	ldrb	r2, [r2, #0]
 8007140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800715a:	e02d      	b.n	80071b8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	2202      	movs	r2, #2
 8007164:	4013      	ands	r3, r2
 8007166:	2b02      	cmp	r3, #2
 8007168:	d113      	bne.n	8007192 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	7812      	ldrb	r2, [r2, #0]
 8007176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007190:	e012      	b.n	80071b8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007192:	f7fc f933 	bl	80033fc <HAL_GetTick>
 8007196:	0002      	movs	r2, r0
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d802      	bhi.n	80071a8 <HAL_SPI_Transmit+0x230>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	3301      	adds	r3, #1
 80071a6:	d102      	bne.n	80071ae <HAL_SPI_Transmit+0x236>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80071ae:	231f      	movs	r3, #31
 80071b0:	18fb      	adds	r3, r7, r3
 80071b2:	2203      	movs	r2, #3
 80071b4:	701a      	strb	r2, [r3, #0]
          goto error;
 80071b6:	e028      	b.n	800720a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1cc      	bne.n	800715c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	0018      	movs	r0, r3
 80071ca:	f000 fb2f 	bl	800782c <SPI_EndRxTxTransaction>
 80071ce:	1e03      	subs	r3, r0, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071e0:	2300      	movs	r3, #0
 80071e2:	613b      	str	r3, [r7, #16]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d004      	beq.n	8007208 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80071fe:	231f      	movs	r3, #31
 8007200:	18fb      	adds	r3, r7, r3
 8007202:	2201      	movs	r2, #1
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	e000      	b.n	800720a <HAL_SPI_Transmit+0x292>
  }

error:
 8007208:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	225d      	movs	r2, #93	; 0x5d
 800720e:	2101      	movs	r1, #1
 8007210:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	225c      	movs	r2, #92	; 0x5c
 8007216:	2100      	movs	r1, #0
 8007218:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800721a:	231f      	movs	r3, #31
 800721c:	18fb      	adds	r3, r7, r3
 800721e:	781b      	ldrb	r3, [r3, #0]
}
 8007220:	0018      	movs	r0, r3
 8007222:	46bd      	mov	sp, r7
 8007224:	b008      	add	sp, #32
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	001a      	movs	r2, r3
 8007236:	1cbb      	adds	r3, r7, #2
 8007238:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800723a:	2301      	movs	r3, #1
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800723e:	2323      	movs	r3, #35	; 0x23
 8007240:	18fb      	adds	r3, r7, r3
 8007242:	2200      	movs	r2, #0
 8007244:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	225c      	movs	r2, #92	; 0x5c
 800724a:	5c9b      	ldrb	r3, [r3, r2]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_SPI_TransmitReceive+0x2c>
 8007250:	2302      	movs	r3, #2
 8007252:	e1b5      	b.n	80075c0 <HAL_SPI_TransmitReceive+0x398>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	225c      	movs	r2, #92	; 0x5c
 8007258:	2101      	movs	r1, #1
 800725a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800725c:	f7fc f8ce 	bl	80033fc <HAL_GetTick>
 8007260:	0003      	movs	r3, r0
 8007262:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007264:	201b      	movs	r0, #27
 8007266:	183b      	adds	r3, r7, r0
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	215d      	movs	r1, #93	; 0x5d
 800726c:	5c52      	ldrb	r2, [r2, r1]
 800726e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007276:	2312      	movs	r3, #18
 8007278:	18fb      	adds	r3, r7, r3
 800727a:	1cba      	adds	r2, r7, #2
 800727c:	8812      	ldrh	r2, [r2, #0]
 800727e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007280:	183b      	adds	r3, r7, r0
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d011      	beq.n	80072ac <HAL_SPI_TransmitReceive+0x84>
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	2382      	movs	r3, #130	; 0x82
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	429a      	cmp	r2, r3
 8007290:	d107      	bne.n	80072a2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d103      	bne.n	80072a2 <HAL_SPI_TransmitReceive+0x7a>
 800729a:	183b      	adds	r3, r7, r0
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d004      	beq.n	80072ac <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80072a2:	2323      	movs	r3, #35	; 0x23
 80072a4:	18fb      	adds	r3, r7, r3
 80072a6:	2202      	movs	r2, #2
 80072a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80072aa:	e17e      	b.n	80075aa <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d006      	beq.n	80072c0 <HAL_SPI_TransmitReceive+0x98>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <HAL_SPI_TransmitReceive+0x98>
 80072b8:	1cbb      	adds	r3, r7, #2
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80072c0:	2323      	movs	r3, #35	; 0x23
 80072c2:	18fb      	adds	r3, r7, r3
 80072c4:	2201      	movs	r2, #1
 80072c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80072c8:	e16f      	b.n	80075aa <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	225d      	movs	r2, #93	; 0x5d
 80072ce:	5c9b      	ldrb	r3, [r3, r2]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d003      	beq.n	80072de <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	225d      	movs	r2, #93	; 0x5d
 80072da:	2105      	movs	r1, #5
 80072dc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	1cba      	adds	r2, r7, #2
 80072ee:	2146      	movs	r1, #70	; 0x46
 80072f0:	8812      	ldrh	r2, [r2, #0]
 80072f2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	1cba      	adds	r2, r7, #2
 80072f8:	2144      	movs	r1, #68	; 0x44
 80072fa:	8812      	ldrh	r2, [r2, #0]
 80072fc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	1cba      	adds	r2, r7, #2
 8007308:	8812      	ldrh	r2, [r2, #0]
 800730a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	1cba      	adds	r2, r7, #2
 8007310:	8812      	ldrh	r2, [r2, #0]
 8007312:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	23e0      	movs	r3, #224	; 0xe0
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	429a      	cmp	r2, r3
 800732a:	d908      	bls.n	800733e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	49a4      	ldr	r1, [pc, #656]	; (80075c8 <HAL_SPI_TransmitReceive+0x3a0>)
 8007338:	400a      	ands	r2, r1
 800733a:	605a      	str	r2, [r3, #4]
 800733c:	e008      	b.n	8007350 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2180      	movs	r1, #128	; 0x80
 800734a:	0149      	lsls	r1, r1, #5
 800734c:	430a      	orrs	r2, r1
 800734e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2240      	movs	r2, #64	; 0x40
 8007358:	4013      	ands	r3, r2
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d007      	beq.n	800736e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2140      	movs	r1, #64	; 0x40
 800736a:	430a      	orrs	r2, r1
 800736c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	23e0      	movs	r3, #224	; 0xe0
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	429a      	cmp	r2, r3
 8007378:	d800      	bhi.n	800737c <HAL_SPI_TransmitReceive+0x154>
 800737a:	e07f      	b.n	800747c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d005      	beq.n	8007390 <HAL_SPI_TransmitReceive+0x168>
 8007384:	2312      	movs	r3, #18
 8007386:	18fb      	adds	r3, r7, r3
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d000      	beq.n	8007390 <HAL_SPI_TransmitReceive+0x168>
 800738e:	e069      	b.n	8007464 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	881a      	ldrh	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a0:	1c9a      	adds	r2, r3, #2
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073b4:	e056      	b.n	8007464 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	2202      	movs	r2, #2
 80073be:	4013      	ands	r3, r2
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d11b      	bne.n	80073fc <HAL_SPI_TransmitReceive+0x1d4>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d016      	beq.n	80073fc <HAL_SPI_TransmitReceive+0x1d4>
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d113      	bne.n	80073fc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	881a      	ldrh	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	1c9a      	adds	r2, r3, #2
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2201      	movs	r2, #1
 8007404:	4013      	ands	r3, r2
 8007406:	2b01      	cmp	r3, #1
 8007408:	d11c      	bne.n	8007444 <HAL_SPI_TransmitReceive+0x21c>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2246      	movs	r2, #70	; 0x46
 800740e:	5a9b      	ldrh	r3, [r3, r2]
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d016      	beq.n	8007444 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	b292      	uxth	r2, r2
 8007422:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	1c9a      	adds	r2, r3, #2
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2246      	movs	r2, #70	; 0x46
 8007432:	5a9b      	ldrh	r3, [r3, r2]
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b299      	uxth	r1, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2246      	movs	r2, #70	; 0x46
 800743e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007440:	2301      	movs	r3, #1
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007444:	f7fb ffda 	bl	80033fc <HAL_GetTick>
 8007448:	0002      	movs	r2, r0
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007450:	429a      	cmp	r2, r3
 8007452:	d807      	bhi.n	8007464 <HAL_SPI_TransmitReceive+0x23c>
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	3301      	adds	r3, #1
 8007458:	d004      	beq.n	8007464 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800745a:	2323      	movs	r3, #35	; 0x23
 800745c:	18fb      	adds	r3, r7, r3
 800745e:	2203      	movs	r2, #3
 8007460:	701a      	strb	r2, [r3, #0]
        goto error;
 8007462:	e0a2      	b.n	80075aa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1a3      	bne.n	80073b6 <HAL_SPI_TransmitReceive+0x18e>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2246      	movs	r2, #70	; 0x46
 8007472:	5a9b      	ldrh	r3, [r3, r2]
 8007474:	b29b      	uxth	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d19d      	bne.n	80073b6 <HAL_SPI_TransmitReceive+0x18e>
 800747a:	e085      	b.n	8007588 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_SPI_TransmitReceive+0x268>
 8007484:	2312      	movs	r3, #18
 8007486:	18fb      	adds	r3, r7, r3
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d000      	beq.n	8007490 <HAL_SPI_TransmitReceive+0x268>
 800748e:	e070      	b.n	8007572 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	330c      	adds	r3, #12
 800749a:	7812      	ldrb	r2, [r2, #0]
 800749c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b6:	e05c      	b.n	8007572 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2202      	movs	r2, #2
 80074c0:	4013      	ands	r3, r2
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d11c      	bne.n	8007500 <HAL_SPI_TransmitReceive+0x2d8>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d017      	beq.n	8007500 <HAL_SPI_TransmitReceive+0x2d8>
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d114      	bne.n	8007500 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	330c      	adds	r3, #12
 80074e0:	7812      	ldrb	r2, [r2, #0]
 80074e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2201      	movs	r2, #1
 8007508:	4013      	ands	r3, r2
 800750a:	2b01      	cmp	r3, #1
 800750c:	d11e      	bne.n	800754c <HAL_SPI_TransmitReceive+0x324>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2246      	movs	r2, #70	; 0x46
 8007512:	5a9b      	ldrh	r3, [r3, r2]
 8007514:	b29b      	uxth	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d018      	beq.n	800754c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	001a      	movs	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	7812      	ldrb	r2, [r2, #0]
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2246      	movs	r2, #70	; 0x46
 800753a:	5a9b      	ldrh	r3, [r3, r2]
 800753c:	b29b      	uxth	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	b299      	uxth	r1, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2246      	movs	r2, #70	; 0x46
 8007546:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007548:	2301      	movs	r3, #1
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800754c:	f7fb ff56 	bl	80033fc <HAL_GetTick>
 8007550:	0002      	movs	r2, r0
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007558:	429a      	cmp	r2, r3
 800755a:	d802      	bhi.n	8007562 <HAL_SPI_TransmitReceive+0x33a>
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	3301      	adds	r3, #1
 8007560:	d102      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x340>
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	2b00      	cmp	r3, #0
 8007566:	d104      	bne.n	8007572 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8007568:	2323      	movs	r3, #35	; 0x23
 800756a:	18fb      	adds	r3, r7, r3
 800756c:	2203      	movs	r2, #3
 800756e:	701a      	strb	r2, [r3, #0]
        goto error;
 8007570:	e01b      	b.n	80075aa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d19d      	bne.n	80074b8 <HAL_SPI_TransmitReceive+0x290>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2246      	movs	r2, #70	; 0x46
 8007580:	5a9b      	ldrh	r3, [r3, r2]
 8007582:	b29b      	uxth	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	d197      	bne.n	80074b8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007588:	69fa      	ldr	r2, [r7, #28]
 800758a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	0018      	movs	r0, r3
 8007590:	f000 f94c 	bl	800782c <SPI_EndRxTxTransaction>
 8007594:	1e03      	subs	r3, r0, #0
 8007596:	d007      	beq.n	80075a8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007598:	2323      	movs	r3, #35	; 0x23
 800759a:	18fb      	adds	r3, r7, r3
 800759c:	2201      	movs	r2, #1
 800759e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2220      	movs	r2, #32
 80075a4:	661a      	str	r2, [r3, #96]	; 0x60
 80075a6:	e000      	b.n	80075aa <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80075a8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	225d      	movs	r2, #93	; 0x5d
 80075ae:	2101      	movs	r1, #1
 80075b0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	225c      	movs	r2, #92	; 0x5c
 80075b6:	2100      	movs	r1, #0
 80075b8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80075ba:	2323      	movs	r3, #35	; 0x23
 80075bc:	18fb      	adds	r3, r7, r3
 80075be:	781b      	ldrb	r3, [r3, #0]
}
 80075c0:	0018      	movs	r0, r3
 80075c2:	46bd      	mov	sp, r7
 80075c4:	b00a      	add	sp, #40	; 0x28
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	ffffefff 	.word	0xffffefff

080075cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	1dfb      	adds	r3, r7, #7
 80075da:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075dc:	f7fb ff0e 	bl	80033fc <HAL_GetTick>
 80075e0:	0002      	movs	r2, r0
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	18d3      	adds	r3, r2, r3
 80075ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075ec:	f7fb ff06 	bl	80033fc <HAL_GetTick>
 80075f0:	0003      	movs	r3, r0
 80075f2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075f4:	4b3a      	ldr	r3, [pc, #232]	; (80076e0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	015b      	lsls	r3, r3, #5
 80075fa:	0d1b      	lsrs	r3, r3, #20
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	4353      	muls	r3, r2
 8007600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007602:	e058      	b.n	80076b6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	3301      	adds	r3, #1
 8007608:	d055      	beq.n	80076b6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800760a:	f7fb fef7 	bl	80033fc <HAL_GetTick>
 800760e:	0002      	movs	r2, r0
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	429a      	cmp	r2, r3
 8007618:	d902      	bls.n	8007620 <SPI_WaitFlagStateUntilTimeout+0x54>
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d142      	bne.n	80076a6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	21e0      	movs	r1, #224	; 0xe0
 800762c:	438a      	bics	r2, r1
 800762e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	2382      	movs	r3, #130	; 0x82
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	429a      	cmp	r2, r3
 800763a:	d113      	bne.n	8007664 <SPI_WaitFlagStateUntilTimeout+0x98>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	2380      	movs	r3, #128	; 0x80
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	429a      	cmp	r2, r3
 8007646:	d005      	beq.n	8007654 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	2380      	movs	r3, #128	; 0x80
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	429a      	cmp	r2, r3
 8007652:	d107      	bne.n	8007664 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2140      	movs	r1, #64	; 0x40
 8007660:	438a      	bics	r2, r1
 8007662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007668:	2380      	movs	r3, #128	; 0x80
 800766a:	019b      	lsls	r3, r3, #6
 800766c:	429a      	cmp	r2, r3
 800766e:	d110      	bne.n	8007692 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	491a      	ldr	r1, [pc, #104]	; (80076e4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800767c:	400a      	ands	r2, r1
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2180      	movs	r1, #128	; 0x80
 800768c:	0189      	lsls	r1, r1, #6
 800768e:	430a      	orrs	r2, r1
 8007690:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	225d      	movs	r2, #93	; 0x5d
 8007696:	2101      	movs	r1, #1
 8007698:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	225c      	movs	r2, #92	; 0x5c
 800769e:	2100      	movs	r1, #0
 80076a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e017      	b.n	80076d6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	4013      	ands	r3, r2
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	425a      	negs	r2, r3
 80076c6:	4153      	adcs	r3, r2
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	001a      	movs	r2, r3
 80076cc:	1dfb      	adds	r3, r7, #7
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d197      	bne.n	8007604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	0018      	movs	r0, r3
 80076d8:	46bd      	mov	sp, r7
 80076da:	b008      	add	sp, #32
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	20000000 	.word	0x20000000
 80076e4:	ffffdfff 	.word	0xffffdfff

080076e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076f6:	2317      	movs	r3, #23
 80076f8:	18fb      	adds	r3, r7, r3
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076fe:	f7fb fe7d 	bl	80033fc <HAL_GetTick>
 8007702:	0002      	movs	r2, r0
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	1a9b      	subs	r3, r3, r2
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	18d3      	adds	r3, r2, r3
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800770e:	f7fb fe75 	bl	80033fc <HAL_GetTick>
 8007712:	0003      	movs	r3, r0
 8007714:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	330c      	adds	r3, #12
 800771c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800771e:	4b41      	ldr	r3, [pc, #260]	; (8007824 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	0013      	movs	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	189b      	adds	r3, r3, r2
 8007728:	00da      	lsls	r2, r3, #3
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	0d1b      	lsrs	r3, r3, #20
 800772e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007730:	4353      	muls	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007734:	e068      	b.n	8007808 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	23c0      	movs	r3, #192	; 0xc0
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	429a      	cmp	r2, r3
 800773e:	d10a      	bne.n	8007756 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d107      	bne.n	8007756 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b2da      	uxtb	r2, r3
 800774c:	2117      	movs	r1, #23
 800774e:	187b      	adds	r3, r7, r1
 8007750:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007752:	187b      	adds	r3, r7, r1
 8007754:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	3301      	adds	r3, #1
 800775a:	d055      	beq.n	8007808 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800775c:	f7fb fe4e 	bl	80033fc <HAL_GetTick>
 8007760:	0002      	movs	r2, r0
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007768:	429a      	cmp	r2, r3
 800776a:	d902      	bls.n	8007772 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	2b00      	cmp	r3, #0
 8007770:	d142      	bne.n	80077f8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	21e0      	movs	r1, #224	; 0xe0
 800777e:	438a      	bics	r2, r1
 8007780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	2382      	movs	r3, #130	; 0x82
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	429a      	cmp	r2, r3
 800778c:	d113      	bne.n	80077b6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	2380      	movs	r3, #128	; 0x80
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	429a      	cmp	r2, r3
 8007798:	d005      	beq.n	80077a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689a      	ldr	r2, [r3, #8]
 800779e:	2380      	movs	r3, #128	; 0x80
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d107      	bne.n	80077b6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2140      	movs	r1, #64	; 0x40
 80077b2:	438a      	bics	r2, r1
 80077b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ba:	2380      	movs	r3, #128	; 0x80
 80077bc:	019b      	lsls	r3, r3, #6
 80077be:	429a      	cmp	r2, r3
 80077c0:	d110      	bne.n	80077e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4916      	ldr	r1, [pc, #88]	; (8007828 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80077ce:	400a      	ands	r2, r1
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2180      	movs	r1, #128	; 0x80
 80077de:	0189      	lsls	r1, r1, #6
 80077e0:	430a      	orrs	r2, r1
 80077e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	225d      	movs	r2, #93	; 0x5d
 80077e8:	2101      	movs	r1, #1
 80077ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	225c      	movs	r2, #92	; 0x5c
 80077f0:	2100      	movs	r1, #0
 80077f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e010      	b.n	800781a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	3b01      	subs	r3, #1
 8007806:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	4013      	ands	r3, r2
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	429a      	cmp	r2, r3
 8007816:	d18e      	bne.n	8007736 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	0018      	movs	r0, r3
 800781c:	46bd      	mov	sp, r7
 800781e:	b00a      	add	sp, #40	; 0x28
 8007820:	bd80      	pop	{r7, pc}
 8007822:	46c0      	nop			; (mov r8, r8)
 8007824:	20000000 	.word	0x20000000
 8007828:	ffffdfff 	.word	0xffffdfff

0800782c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	23c0      	movs	r3, #192	; 0xc0
 800783c:	0159      	lsls	r1, r3, #5
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	0013      	movs	r3, r2
 8007846:	2200      	movs	r2, #0
 8007848:	f7ff ff4e 	bl	80076e8 <SPI_WaitFifoStateUntilTimeout>
 800784c:	1e03      	subs	r3, r0, #0
 800784e:	d007      	beq.n	8007860 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007854:	2220      	movs	r2, #32
 8007856:	431a      	orrs	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e027      	b.n	80078b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	0013      	movs	r3, r2
 800786a:	2200      	movs	r2, #0
 800786c:	2180      	movs	r1, #128	; 0x80
 800786e:	f7ff fead 	bl	80075cc <SPI_WaitFlagStateUntilTimeout>
 8007872:	1e03      	subs	r3, r0, #0
 8007874:	d007      	beq.n	8007886 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787a:	2220      	movs	r2, #32
 800787c:	431a      	orrs	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e014      	b.n	80078b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	23c0      	movs	r3, #192	; 0xc0
 800788a:	00d9      	lsls	r1, r3, #3
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	0013      	movs	r3, r2
 8007894:	2200      	movs	r2, #0
 8007896:	f7ff ff27 	bl	80076e8 <SPI_WaitFifoStateUntilTimeout>
 800789a:	1e03      	subs	r3, r0, #0
 800789c:	d007      	beq.n	80078ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a2:	2220      	movs	r2, #32
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e000      	b.n	80078b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	0018      	movs	r0, r3
 80078b2:	46bd      	mov	sp, r7
 80078b4:	b004      	add	sp, #16
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e042      	b.n	8007950 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	223d      	movs	r2, #61	; 0x3d
 80078ce:	5c9b      	ldrb	r3, [r3, r2]
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d107      	bne.n	80078e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	223c      	movs	r2, #60	; 0x3c
 80078da:	2100      	movs	r1, #0
 80078dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	0018      	movs	r0, r3
 80078e2:	f7fb f919 	bl	8002b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	223d      	movs	r2, #61	; 0x3d
 80078ea:	2102      	movs	r1, #2
 80078ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3304      	adds	r3, #4
 80078f6:	0019      	movs	r1, r3
 80078f8:	0010      	movs	r0, r2
 80078fa:	f000 fa65 	bl	8007dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2246      	movs	r2, #70	; 0x46
 8007902:	2101      	movs	r1, #1
 8007904:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	223e      	movs	r2, #62	; 0x3e
 800790a:	2101      	movs	r1, #1
 800790c:	5499      	strb	r1, [r3, r2]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	223f      	movs	r2, #63	; 0x3f
 8007912:	2101      	movs	r1, #1
 8007914:	5499      	strb	r1, [r3, r2]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2240      	movs	r2, #64	; 0x40
 800791a:	2101      	movs	r1, #1
 800791c:	5499      	strb	r1, [r3, r2]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2241      	movs	r2, #65	; 0x41
 8007922:	2101      	movs	r1, #1
 8007924:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2242      	movs	r2, #66	; 0x42
 800792a:	2101      	movs	r1, #1
 800792c:	5499      	strb	r1, [r3, r2]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2243      	movs	r2, #67	; 0x43
 8007932:	2101      	movs	r1, #1
 8007934:	5499      	strb	r1, [r3, r2]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2244      	movs	r2, #68	; 0x44
 800793a:	2101      	movs	r1, #1
 800793c:	5499      	strb	r1, [r3, r2]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2245      	movs	r2, #69	; 0x45
 8007942:	2101      	movs	r1, #1
 8007944:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	223d      	movs	r2, #61	; 0x3d
 800794a:	2101      	movs	r1, #1
 800794c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	0018      	movs	r0, r3
 8007952:	46bd      	mov	sp, r7
 8007954:	b002      	add	sp, #8
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	223d      	movs	r2, #61	; 0x3d
 8007964:	5c9b      	ldrb	r3, [r3, r2]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b01      	cmp	r3, #1
 800796a:	d001      	beq.n	8007970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e03b      	b.n	80079e8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	223d      	movs	r2, #61	; 0x3d
 8007974:	2102      	movs	r1, #2
 8007976:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2101      	movs	r1, #1
 8007984:	430a      	orrs	r2, r1
 8007986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a18      	ldr	r2, [pc, #96]	; (80079f0 <HAL_TIM_Base_Start_IT+0x98>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00f      	beq.n	80079b2 <HAL_TIM_Base_Start_IT+0x5a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	2380      	movs	r3, #128	; 0x80
 8007998:	05db      	lsls	r3, r3, #23
 800799a:	429a      	cmp	r2, r3
 800799c:	d009      	beq.n	80079b2 <HAL_TIM_Base_Start_IT+0x5a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a14      	ldr	r2, [pc, #80]	; (80079f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d004      	beq.n	80079b2 <HAL_TIM_Base_Start_IT+0x5a>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a12      	ldr	r2, [pc, #72]	; (80079f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d111      	bne.n	80079d6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	2207      	movs	r2, #7
 80079ba:	4013      	ands	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b06      	cmp	r3, #6
 80079c2:	d010      	beq.n	80079e6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2101      	movs	r1, #1
 80079d0:	430a      	orrs	r2, r1
 80079d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d4:	e007      	b.n	80079e6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2101      	movs	r1, #1
 80079e2:	430a      	orrs	r2, r1
 80079e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	0018      	movs	r0, r3
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b004      	add	sp, #16
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	40012c00 	.word	0x40012c00
 80079f4:	40000400 	.word	0x40000400
 80079f8:	40014000 	.word	0x40014000

080079fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e042      	b.n	8007a94 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	223d      	movs	r2, #61	; 0x3d
 8007a12:	5c9b      	ldrb	r3, [r3, r2]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d107      	bne.n	8007a2a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	223c      	movs	r2, #60	; 0x3c
 8007a1e:	2100      	movs	r1, #0
 8007a20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	0018      	movs	r0, r3
 8007a26:	f000 f839 	bl	8007a9c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	223d      	movs	r2, #61	; 0x3d
 8007a2e:	2102      	movs	r1, #2
 8007a30:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	0019      	movs	r1, r3
 8007a3c:	0010      	movs	r0, r2
 8007a3e:	f000 f9c3 	bl	8007dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2246      	movs	r2, #70	; 0x46
 8007a46:	2101      	movs	r1, #1
 8007a48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	223e      	movs	r2, #62	; 0x3e
 8007a4e:	2101      	movs	r1, #1
 8007a50:	5499      	strb	r1, [r3, r2]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	223f      	movs	r2, #63	; 0x3f
 8007a56:	2101      	movs	r1, #1
 8007a58:	5499      	strb	r1, [r3, r2]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2240      	movs	r2, #64	; 0x40
 8007a5e:	2101      	movs	r1, #1
 8007a60:	5499      	strb	r1, [r3, r2]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2241      	movs	r2, #65	; 0x41
 8007a66:	2101      	movs	r1, #1
 8007a68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2242      	movs	r2, #66	; 0x42
 8007a6e:	2101      	movs	r1, #1
 8007a70:	5499      	strb	r1, [r3, r2]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2243      	movs	r2, #67	; 0x43
 8007a76:	2101      	movs	r1, #1
 8007a78:	5499      	strb	r1, [r3, r2]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2244      	movs	r2, #68	; 0x44
 8007a7e:	2101      	movs	r1, #1
 8007a80:	5499      	strb	r1, [r3, r2]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2245      	movs	r2, #69	; 0x45
 8007a86:	2101      	movs	r1, #1
 8007a88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	223d      	movs	r2, #61	; 0x3d
 8007a8e:	2101      	movs	r1, #1
 8007a90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	0018      	movs	r0, r3
 8007a96:	46bd      	mov	sp, r7
 8007a98:	b002      	add	sp, #8
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007aa4:	46c0      	nop			; (mov r8, r8)
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	b002      	add	sp, #8
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2202      	movs	r2, #2
 8007abc:	4013      	ands	r3, r2
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d124      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d11d      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	4252      	negs	r2, r2
 8007ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	2203      	movs	r2, #3
 8007ae8:	4013      	ands	r3, r2
 8007aea:	d004      	beq.n	8007af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	0018      	movs	r0, r3
 8007af0:	f000 f952 	bl	8007d98 <HAL_TIM_IC_CaptureCallback>
 8007af4:	e007      	b.n	8007b06 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	0018      	movs	r0, r3
 8007afa:	f000 f945 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	0018      	movs	r0, r3
 8007b02:	f000 f951 	bl	8007da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2204      	movs	r2, #4
 8007b14:	4013      	ands	r3, r2
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d125      	bne.n	8007b66 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	2204      	movs	r2, #4
 8007b22:	4013      	ands	r3, r2
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	d11e      	bne.n	8007b66 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2205      	movs	r2, #5
 8007b2e:	4252      	negs	r2, r2
 8007b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	23c0      	movs	r3, #192	; 0xc0
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4013      	ands	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	0018      	movs	r0, r3
 8007b4a:	f000 f925 	bl	8007d98 <HAL_TIM_IC_CaptureCallback>
 8007b4e:	e007      	b.n	8007b60 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f000 f918 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f000 f924 	bl	8007da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2208      	movs	r2, #8
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d124      	bne.n	8007bbe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	2b08      	cmp	r3, #8
 8007b80:	d11d      	bne.n	8007bbe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2209      	movs	r2, #9
 8007b88:	4252      	negs	r2, r2
 8007b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2204      	movs	r2, #4
 8007b90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	2203      	movs	r2, #3
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	d004      	beq.n	8007ba8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f000 f8f9 	bl	8007d98 <HAL_TIM_IC_CaptureCallback>
 8007ba6:	e007      	b.n	8007bb8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	0018      	movs	r0, r3
 8007bac:	f000 f8ec 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	f000 f8f8 	bl	8007da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2210      	movs	r2, #16
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b10      	cmp	r3, #16
 8007bca:	d125      	bne.n	8007c18 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	2210      	movs	r2, #16
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d11e      	bne.n	8007c18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2211      	movs	r2, #17
 8007be0:	4252      	negs	r2, r2
 8007be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2208      	movs	r2, #8
 8007be8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69da      	ldr	r2, [r3, #28]
 8007bf0:	23c0      	movs	r3, #192	; 0xc0
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	d004      	beq.n	8007c02 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	f000 f8cc 	bl	8007d98 <HAL_TIM_IC_CaptureCallback>
 8007c00:	e007      	b.n	8007c12 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	0018      	movs	r0, r3
 8007c06:	f000 f8bf 	bl	8007d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f000 f8cb 	bl	8007da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4013      	ands	r3, r2
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d10f      	bne.n	8007c46 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	4013      	ands	r3, r2
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d108      	bne.n	8007c46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	4252      	negs	r2, r2
 8007c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	0018      	movs	r0, r3
 8007c42:	f7f9 fb07 	bl	8001254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2280      	movs	r2, #128	; 0x80
 8007c4e:	4013      	ands	r3, r2
 8007c50:	2b80      	cmp	r3, #128	; 0x80
 8007c52:	d10f      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	2280      	movs	r2, #128	; 0x80
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	2b80      	cmp	r3, #128	; 0x80
 8007c60:	d108      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2281      	movs	r2, #129	; 0x81
 8007c68:	4252      	negs	r2, r2
 8007c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f000 fb2e 	bl	80082d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2240      	movs	r2, #64	; 0x40
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	2b40      	cmp	r3, #64	; 0x40
 8007c80:	d10f      	bne.n	8007ca2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2240      	movs	r2, #64	; 0x40
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b40      	cmp	r3, #64	; 0x40
 8007c8e:	d108      	bne.n	8007ca2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2241      	movs	r2, #65	; 0x41
 8007c96:	4252      	negs	r2, r2
 8007c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	f000 f88b 	bl	8007db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d10f      	bne.n	8007cd0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d108      	bne.n	8007cd0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2221      	movs	r2, #33	; 0x21
 8007cc4:	4252      	negs	r2, r2
 8007cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f000 faf8 	bl	80082c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cd0:	46c0      	nop			; (mov r8, r8)
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b002      	add	sp, #8
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce4:	2317      	movs	r3, #23
 8007ce6:	18fb      	adds	r3, r7, r3
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	223c      	movs	r2, #60	; 0x3c
 8007cf0:	5c9b      	ldrb	r3, [r3, r2]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <HAL_TIM_OC_ConfigChannel+0x22>
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e042      	b.n	8007d80 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	223c      	movs	r2, #60	; 0x3c
 8007cfe:	2101      	movs	r1, #1
 8007d00:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b0c      	cmp	r3, #12
 8007d06:	d027      	beq.n	8007d58 <HAL_TIM_OC_ConfigChannel+0x80>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b0c      	cmp	r3, #12
 8007d0c:	d82c      	bhi.n	8007d68 <HAL_TIM_OC_ConfigChannel+0x90>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d019      	beq.n	8007d48 <HAL_TIM_OC_ConfigChannel+0x70>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d826      	bhi.n	8007d68 <HAL_TIM_OC_ConfigChannel+0x90>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <HAL_TIM_OC_ConfigChannel+0x50>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d008      	beq.n	8007d38 <HAL_TIM_OC_ConfigChannel+0x60>
 8007d26:	e01f      	b.n	8007d68 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	0011      	movs	r1, r2
 8007d30:	0018      	movs	r0, r3
 8007d32:	f000 f8c9 	bl	8007ec8 <TIM_OC1_SetConfig>
      break;
 8007d36:	e01c      	b.n	8007d72 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	0011      	movs	r1, r2
 8007d40:	0018      	movs	r0, r3
 8007d42:	f000 f949 	bl	8007fd8 <TIM_OC2_SetConfig>
      break;
 8007d46:	e014      	b.n	8007d72 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	0011      	movs	r1, r2
 8007d50:	0018      	movs	r0, r3
 8007d52:	f000 f9c5 	bl	80080e0 <TIM_OC3_SetConfig>
      break;
 8007d56:	e00c      	b.n	8007d72 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	0011      	movs	r1, r2
 8007d60:	0018      	movs	r0, r3
 8007d62:	f000 fa43 	bl	80081ec <TIM_OC4_SetConfig>
      break;
 8007d66:	e004      	b.n	8007d72 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8007d68:	2317      	movs	r3, #23
 8007d6a:	18fb      	adds	r3, r7, r3
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	701a      	strb	r2, [r3, #0]
      break;
 8007d70:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	223c      	movs	r2, #60	; 0x3c
 8007d76:	2100      	movs	r1, #0
 8007d78:	5499      	strb	r1, [r3, r2]

  return status;
 8007d7a:	2317      	movs	r3, #23
 8007d7c:	18fb      	adds	r3, r7, r3
 8007d7e:	781b      	ldrb	r3, [r3, #0]
}
 8007d80:	0018      	movs	r0, r3
 8007d82:	46bd      	mov	sp, r7
 8007d84:	b006      	add	sp, #24
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d90:	46c0      	nop			; (mov r8, r8)
 8007d92:	46bd      	mov	sp, r7
 8007d94:	b002      	add	sp, #8
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007da0:	46c0      	nop			; (mov r8, r8)
 8007da2:	46bd      	mov	sp, r7
 8007da4:	b002      	add	sp, #8
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007db0:	46c0      	nop			; (mov r8, r8)
 8007db2:	46bd      	mov	sp, r7
 8007db4:	b002      	add	sp, #8
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dc0:	46c0      	nop			; (mov r8, r8)
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	b002      	add	sp, #8
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a34      	ldr	r2, [pc, #208]	; (8007eac <TIM_Base_SetConfig+0xe4>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d008      	beq.n	8007df2 <TIM_Base_SetConfig+0x2a>
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	2380      	movs	r3, #128	; 0x80
 8007de4:	05db      	lsls	r3, r3, #23
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d003      	beq.n	8007df2 <TIM_Base_SetConfig+0x2a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a30      	ldr	r2, [pc, #192]	; (8007eb0 <TIM_Base_SetConfig+0xe8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d108      	bne.n	8007e04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2270      	movs	r2, #112	; 0x70
 8007df6:	4393      	bics	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a29      	ldr	r2, [pc, #164]	; (8007eac <TIM_Base_SetConfig+0xe4>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d018      	beq.n	8007e3e <TIM_Base_SetConfig+0x76>
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	2380      	movs	r3, #128	; 0x80
 8007e10:	05db      	lsls	r3, r3, #23
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d013      	beq.n	8007e3e <TIM_Base_SetConfig+0x76>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a25      	ldr	r2, [pc, #148]	; (8007eb0 <TIM_Base_SetConfig+0xe8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00f      	beq.n	8007e3e <TIM_Base_SetConfig+0x76>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a24      	ldr	r2, [pc, #144]	; (8007eb4 <TIM_Base_SetConfig+0xec>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00b      	beq.n	8007e3e <TIM_Base_SetConfig+0x76>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a23      	ldr	r2, [pc, #140]	; (8007eb8 <TIM_Base_SetConfig+0xf0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d007      	beq.n	8007e3e <TIM_Base_SetConfig+0x76>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a22      	ldr	r2, [pc, #136]	; (8007ebc <TIM_Base_SetConfig+0xf4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d003      	beq.n	8007e3e <TIM_Base_SetConfig+0x76>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a21      	ldr	r2, [pc, #132]	; (8007ec0 <TIM_Base_SetConfig+0xf8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d108      	bne.n	8007e50 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4a20      	ldr	r2, [pc, #128]	; (8007ec4 <TIM_Base_SetConfig+0xfc>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2280      	movs	r2, #128	; 0x80
 8007e54:	4393      	bics	r3, r2
 8007e56:	001a      	movs	r2, r3
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a0c      	ldr	r2, [pc, #48]	; (8007eac <TIM_Base_SetConfig+0xe4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00b      	beq.n	8007e96 <TIM_Base_SetConfig+0xce>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a0d      	ldr	r2, [pc, #52]	; (8007eb8 <TIM_Base_SetConfig+0xf0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d007      	beq.n	8007e96 <TIM_Base_SetConfig+0xce>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a0c      	ldr	r2, [pc, #48]	; (8007ebc <TIM_Base_SetConfig+0xf4>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d003      	beq.n	8007e96 <TIM_Base_SetConfig+0xce>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a0b      	ldr	r2, [pc, #44]	; (8007ec0 <TIM_Base_SetConfig+0xf8>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d103      	bne.n	8007e9e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	691a      	ldr	r2, [r3, #16]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	615a      	str	r2, [r3, #20]
}
 8007ea4:	46c0      	nop			; (mov r8, r8)
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b004      	add	sp, #16
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	40000400 	.word	0x40000400
 8007eb4:	40002000 	.word	0x40002000
 8007eb8:	40014000 	.word	0x40014000
 8007ebc:	40014400 	.word	0x40014400
 8007ec0:	40014800 	.word	0x40014800
 8007ec4:	fffffcff 	.word	0xfffffcff

08007ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	4393      	bics	r3, r2
 8007eda:	001a      	movs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2270      	movs	r2, #112	; 0x70
 8007ef6:	4393      	bics	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2203      	movs	r2, #3
 8007efe:	4393      	bics	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	4393      	bics	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a27      	ldr	r2, [pc, #156]	; (8007fc0 <TIM_OC1_SetConfig+0xf8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00b      	beq.n	8007f3e <TIM_OC1_SetConfig+0x76>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a26      	ldr	r2, [pc, #152]	; (8007fc4 <TIM_OC1_SetConfig+0xfc>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d007      	beq.n	8007f3e <TIM_OC1_SetConfig+0x76>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a25      	ldr	r2, [pc, #148]	; (8007fc8 <TIM_OC1_SetConfig+0x100>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d003      	beq.n	8007f3e <TIM_OC1_SetConfig+0x76>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a24      	ldr	r2, [pc, #144]	; (8007fcc <TIM_OC1_SetConfig+0x104>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d10c      	bne.n	8007f58 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2208      	movs	r2, #8
 8007f42:	4393      	bics	r3, r2
 8007f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2204      	movs	r2, #4
 8007f54:	4393      	bics	r3, r2
 8007f56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a19      	ldr	r2, [pc, #100]	; (8007fc0 <TIM_OC1_SetConfig+0xf8>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d00b      	beq.n	8007f78 <TIM_OC1_SetConfig+0xb0>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a18      	ldr	r2, [pc, #96]	; (8007fc4 <TIM_OC1_SetConfig+0xfc>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d007      	beq.n	8007f78 <TIM_OC1_SetConfig+0xb0>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a17      	ldr	r2, [pc, #92]	; (8007fc8 <TIM_OC1_SetConfig+0x100>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d003      	beq.n	8007f78 <TIM_OC1_SetConfig+0xb0>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a16      	ldr	r2, [pc, #88]	; (8007fcc <TIM_OC1_SetConfig+0x104>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d111      	bne.n	8007f9c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	4a15      	ldr	r2, [pc, #84]	; (8007fd0 <TIM_OC1_SetConfig+0x108>)
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	4a14      	ldr	r2, [pc, #80]	; (8007fd4 <TIM_OC1_SetConfig+0x10c>)
 8007f84:	4013      	ands	r3, r2
 8007f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	621a      	str	r2, [r3, #32]
}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b006      	add	sp, #24
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	40012c00 	.word	0x40012c00
 8007fc4:	40014000 	.word	0x40014000
 8007fc8:	40014400 	.word	0x40014400
 8007fcc:	40014800 	.word	0x40014800
 8007fd0:	fffffeff 	.word	0xfffffeff
 8007fd4:	fffffdff 	.word	0xfffffdff

08007fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	4393      	bics	r3, r2
 8007fea:	001a      	movs	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4a2e      	ldr	r2, [pc, #184]	; (80080c0 <TIM_OC2_SetConfig+0xe8>)
 8008006:	4013      	ands	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4a2d      	ldr	r2, [pc, #180]	; (80080c4 <TIM_OC2_SetConfig+0xec>)
 800800e:	4013      	ands	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	021b      	lsls	r3, r3, #8
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2220      	movs	r2, #32
 8008022:	4393      	bics	r3, r2
 8008024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a24      	ldr	r2, [pc, #144]	; (80080c8 <TIM_OC2_SetConfig+0xf0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d10d      	bne.n	8008056 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2280      	movs	r2, #128	; 0x80
 800803e:	4393      	bics	r3, r2
 8008040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2240      	movs	r2, #64	; 0x40
 8008052:	4393      	bics	r3, r2
 8008054:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1b      	ldr	r2, [pc, #108]	; (80080c8 <TIM_OC2_SetConfig+0xf0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00b      	beq.n	8008076 <TIM_OC2_SetConfig+0x9e>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a1a      	ldr	r2, [pc, #104]	; (80080cc <TIM_OC2_SetConfig+0xf4>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d007      	beq.n	8008076 <TIM_OC2_SetConfig+0x9e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a19      	ldr	r2, [pc, #100]	; (80080d0 <TIM_OC2_SetConfig+0xf8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d003      	beq.n	8008076 <TIM_OC2_SetConfig+0x9e>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a18      	ldr	r2, [pc, #96]	; (80080d4 <TIM_OC2_SetConfig+0xfc>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d113      	bne.n	800809e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	4a17      	ldr	r2, [pc, #92]	; (80080d8 <TIM_OC2_SetConfig+0x100>)
 800807a:	4013      	ands	r3, r2
 800807c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	4a16      	ldr	r2, [pc, #88]	; (80080dc <TIM_OC2_SetConfig+0x104>)
 8008082:	4013      	ands	r3, r2
 8008084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	4313      	orrs	r3, r2
 8008090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	621a      	str	r2, [r3, #32]
}
 80080b8:	46c0      	nop			; (mov r8, r8)
 80080ba:	46bd      	mov	sp, r7
 80080bc:	b006      	add	sp, #24
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	ffff8fff 	.word	0xffff8fff
 80080c4:	fffffcff 	.word	0xfffffcff
 80080c8:	40012c00 	.word	0x40012c00
 80080cc:	40014000 	.word	0x40014000
 80080d0:	40014400 	.word	0x40014400
 80080d4:	40014800 	.word	0x40014800
 80080d8:	fffffbff 	.word	0xfffffbff
 80080dc:	fffff7ff 	.word	0xfffff7ff

080080e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	4a35      	ldr	r2, [pc, #212]	; (80081c4 <TIM_OC3_SetConfig+0xe4>)
 80080f0:	401a      	ands	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2270      	movs	r2, #112	; 0x70
 800810c:	4393      	bics	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2203      	movs	r2, #3
 8008114:	4393      	bics	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	4a28      	ldr	r2, [pc, #160]	; (80081c8 <TIM_OC3_SetConfig+0xe8>)
 8008126:	4013      	ands	r3, r2
 8008128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a24      	ldr	r2, [pc, #144]	; (80081cc <TIM_OC3_SetConfig+0xec>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d10d      	bne.n	800815a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	4a23      	ldr	r2, [pc, #140]	; (80081d0 <TIM_OC3_SetConfig+0xf0>)
 8008142:	4013      	ands	r3, r2
 8008144:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	021b      	lsls	r3, r3, #8
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	4a1f      	ldr	r2, [pc, #124]	; (80081d4 <TIM_OC3_SetConfig+0xf4>)
 8008156:	4013      	ands	r3, r2
 8008158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a1b      	ldr	r2, [pc, #108]	; (80081cc <TIM_OC3_SetConfig+0xec>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00b      	beq.n	800817a <TIM_OC3_SetConfig+0x9a>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a1c      	ldr	r2, [pc, #112]	; (80081d8 <TIM_OC3_SetConfig+0xf8>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d007      	beq.n	800817a <TIM_OC3_SetConfig+0x9a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a1b      	ldr	r2, [pc, #108]	; (80081dc <TIM_OC3_SetConfig+0xfc>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d003      	beq.n	800817a <TIM_OC3_SetConfig+0x9a>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a1a      	ldr	r2, [pc, #104]	; (80081e0 <TIM_OC3_SetConfig+0x100>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d113      	bne.n	80081a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	4a19      	ldr	r2, [pc, #100]	; (80081e4 <TIM_OC3_SetConfig+0x104>)
 800817e:	4013      	ands	r3, r2
 8008180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	4a18      	ldr	r2, [pc, #96]	; (80081e8 <TIM_OC3_SetConfig+0x108>)
 8008186:	4013      	ands	r3, r2
 8008188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	4313      	orrs	r3, r2
 8008194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	4313      	orrs	r3, r2
 80081a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	621a      	str	r2, [r3, #32]
}
 80081bc:	46c0      	nop			; (mov r8, r8)
 80081be:	46bd      	mov	sp, r7
 80081c0:	b006      	add	sp, #24
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	fffffeff 	.word	0xfffffeff
 80081c8:	fffffdff 	.word	0xfffffdff
 80081cc:	40012c00 	.word	0x40012c00
 80081d0:	fffff7ff 	.word	0xfffff7ff
 80081d4:	fffffbff 	.word	0xfffffbff
 80081d8:	40014000 	.word	0x40014000
 80081dc:	40014400 	.word	0x40014400
 80081e0:	40014800 	.word	0x40014800
 80081e4:	ffffefff 	.word	0xffffefff
 80081e8:	ffffdfff 	.word	0xffffdfff

080081ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	4a28      	ldr	r2, [pc, #160]	; (800829c <TIM_OC4_SetConfig+0xb0>)
 80081fc:	401a      	ands	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4a22      	ldr	r2, [pc, #136]	; (80082a0 <TIM_OC4_SetConfig+0xb4>)
 8008218:	4013      	ands	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4a21      	ldr	r2, [pc, #132]	; (80082a4 <TIM_OC4_SetConfig+0xb8>)
 8008220:	4013      	ands	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	4a1d      	ldr	r2, [pc, #116]	; (80082a8 <TIM_OC4_SetConfig+0xbc>)
 8008234:	4013      	ands	r3, r2
 8008236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	031b      	lsls	r3, r3, #12
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a19      	ldr	r2, [pc, #100]	; (80082ac <TIM_OC4_SetConfig+0xc0>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d00b      	beq.n	8008264 <TIM_OC4_SetConfig+0x78>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a18      	ldr	r2, [pc, #96]	; (80082b0 <TIM_OC4_SetConfig+0xc4>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d007      	beq.n	8008264 <TIM_OC4_SetConfig+0x78>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a17      	ldr	r2, [pc, #92]	; (80082b4 <TIM_OC4_SetConfig+0xc8>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d003      	beq.n	8008264 <TIM_OC4_SetConfig+0x78>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a16      	ldr	r2, [pc, #88]	; (80082b8 <TIM_OC4_SetConfig+0xcc>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d109      	bne.n	8008278 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	4a15      	ldr	r2, [pc, #84]	; (80082bc <TIM_OC4_SetConfig+0xd0>)
 8008268:	4013      	ands	r3, r2
 800826a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	019b      	lsls	r3, r3, #6
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	621a      	str	r2, [r3, #32]
}
 8008292:	46c0      	nop			; (mov r8, r8)
 8008294:	46bd      	mov	sp, r7
 8008296:	b006      	add	sp, #24
 8008298:	bd80      	pop	{r7, pc}
 800829a:	46c0      	nop			; (mov r8, r8)
 800829c:	ffffefff 	.word	0xffffefff
 80082a0:	ffff8fff 	.word	0xffff8fff
 80082a4:	fffffcff 	.word	0xfffffcff
 80082a8:	ffffdfff 	.word	0xffffdfff
 80082ac:	40012c00 	.word	0x40012c00
 80082b0:	40014000 	.word	0x40014000
 80082b4:	40014400 	.word	0x40014400
 80082b8:	40014800 	.word	0x40014800
 80082bc:	ffffbfff 	.word	0xffffbfff

080082c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082c8:	46c0      	nop			; (mov r8, r8)
 80082ca:	46bd      	mov	sp, r7
 80082cc:	b002      	add	sp, #8
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082d8:	46c0      	nop			; (mov r8, r8)
 80082da:	46bd      	mov	sp, r7
 80082dc:	b002      	add	sp, #8
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e044      	b.n	800837c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d107      	bne.n	800830a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2274      	movs	r2, #116	; 0x74
 80082fe:	2100      	movs	r1, #0
 8008300:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	0018      	movs	r0, r3
 8008306:	f7fa fc2f 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2224      	movs	r2, #36	; 0x24
 800830e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2101      	movs	r1, #1
 800831c:	438a      	bics	r2, r1
 800831e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	0018      	movs	r0, r3
 8008324:	f000 fb24 	bl	8008970 <UART_SetConfig>
 8008328:	0003      	movs	r3, r0
 800832a:	2b01      	cmp	r3, #1
 800832c:	d101      	bne.n	8008332 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e024      	b.n	800837c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	0018      	movs	r0, r3
 800833e:	f000 fc9f 	bl	8008c80 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	490d      	ldr	r1, [pc, #52]	; (8008384 <HAL_UART_Init+0xa4>)
 800834e:	400a      	ands	r2, r1
 8008350:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689a      	ldr	r2, [r3, #8]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	212a      	movs	r1, #42	; 0x2a
 800835e:	438a      	bics	r2, r1
 8008360:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2101      	movs	r1, #1
 800836e:	430a      	orrs	r2, r1
 8008370:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	0018      	movs	r0, r3
 8008376:	f000 fd37 	bl	8008de8 <UART_CheckIdleState>
 800837a:	0003      	movs	r3, r0
}
 800837c:	0018      	movs	r0, r3
 800837e:	46bd      	mov	sp, r7
 8008380:	b002      	add	sp, #8
 8008382:	bd80      	pop	{r7, pc}
 8008384:	ffffb7ff 	.word	0xffffb7ff

08008388 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008388:	b590      	push	{r4, r7, lr}
 800838a:	b0ab      	sub	sp, #172	; 0xac
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	22a4      	movs	r2, #164	; 0xa4
 8008398:	18b9      	adds	r1, r7, r2
 800839a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	20a0      	movs	r0, #160	; 0xa0
 80083a4:	1839      	adds	r1, r7, r0
 80083a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	219c      	movs	r1, #156	; 0x9c
 80083b0:	1879      	adds	r1, r7, r1
 80083b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083b4:	0011      	movs	r1, r2
 80083b6:	18bb      	adds	r3, r7, r2
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a99      	ldr	r2, [pc, #612]	; (8008620 <HAL_UART_IRQHandler+0x298>)
 80083bc:	4013      	ands	r3, r2
 80083be:	2298      	movs	r2, #152	; 0x98
 80083c0:	18bc      	adds	r4, r7, r2
 80083c2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80083c4:	18bb      	adds	r3, r7, r2
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d114      	bne.n	80083f6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80083cc:	187b      	adds	r3, r7, r1
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2220      	movs	r2, #32
 80083d2:	4013      	ands	r3, r2
 80083d4:	d00f      	beq.n	80083f6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80083d6:	183b      	adds	r3, r7, r0
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2220      	movs	r2, #32
 80083dc:	4013      	ands	r3, r2
 80083de:	d00a      	beq.n	80083f6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d100      	bne.n	80083ea <HAL_UART_IRQHandler+0x62>
 80083e8:	e296      	b.n	8008918 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	0010      	movs	r0, r2
 80083f2:	4798      	blx	r3
      }
      return;
 80083f4:	e290      	b.n	8008918 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80083f6:	2398      	movs	r3, #152	; 0x98
 80083f8:	18fb      	adds	r3, r7, r3
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d100      	bne.n	8008402 <HAL_UART_IRQHandler+0x7a>
 8008400:	e114      	b.n	800862c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008402:	239c      	movs	r3, #156	; 0x9c
 8008404:	18fb      	adds	r3, r7, r3
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2201      	movs	r2, #1
 800840a:	4013      	ands	r3, r2
 800840c:	d106      	bne.n	800841c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800840e:	23a0      	movs	r3, #160	; 0xa0
 8008410:	18fb      	adds	r3, r7, r3
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a83      	ldr	r2, [pc, #524]	; (8008624 <HAL_UART_IRQHandler+0x29c>)
 8008416:	4013      	ands	r3, r2
 8008418:	d100      	bne.n	800841c <HAL_UART_IRQHandler+0x94>
 800841a:	e107      	b.n	800862c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800841c:	23a4      	movs	r3, #164	; 0xa4
 800841e:	18fb      	adds	r3, r7, r3
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2201      	movs	r2, #1
 8008424:	4013      	ands	r3, r2
 8008426:	d012      	beq.n	800844e <HAL_UART_IRQHandler+0xc6>
 8008428:	23a0      	movs	r3, #160	; 0xa0
 800842a:	18fb      	adds	r3, r7, r3
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	2380      	movs	r3, #128	; 0x80
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4013      	ands	r3, r2
 8008434:	d00b      	beq.n	800844e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2201      	movs	r2, #1
 800843c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2280      	movs	r2, #128	; 0x80
 8008442:	589b      	ldr	r3, [r3, r2]
 8008444:	2201      	movs	r2, #1
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2180      	movs	r1, #128	; 0x80
 800844c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800844e:	23a4      	movs	r3, #164	; 0xa4
 8008450:	18fb      	adds	r3, r7, r3
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2202      	movs	r2, #2
 8008456:	4013      	ands	r3, r2
 8008458:	d011      	beq.n	800847e <HAL_UART_IRQHandler+0xf6>
 800845a:	239c      	movs	r3, #156	; 0x9c
 800845c:	18fb      	adds	r3, r7, r3
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2201      	movs	r2, #1
 8008462:	4013      	ands	r3, r2
 8008464:	d00b      	beq.n	800847e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2202      	movs	r2, #2
 800846c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2280      	movs	r2, #128	; 0x80
 8008472:	589b      	ldr	r3, [r3, r2]
 8008474:	2204      	movs	r2, #4
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2180      	movs	r1, #128	; 0x80
 800847c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800847e:	23a4      	movs	r3, #164	; 0xa4
 8008480:	18fb      	adds	r3, r7, r3
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2204      	movs	r2, #4
 8008486:	4013      	ands	r3, r2
 8008488:	d011      	beq.n	80084ae <HAL_UART_IRQHandler+0x126>
 800848a:	239c      	movs	r3, #156	; 0x9c
 800848c:	18fb      	adds	r3, r7, r3
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2201      	movs	r2, #1
 8008492:	4013      	ands	r3, r2
 8008494:	d00b      	beq.n	80084ae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2204      	movs	r2, #4
 800849c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2280      	movs	r2, #128	; 0x80
 80084a2:	589b      	ldr	r3, [r3, r2]
 80084a4:	2202      	movs	r2, #2
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2180      	movs	r1, #128	; 0x80
 80084ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084ae:	23a4      	movs	r3, #164	; 0xa4
 80084b0:	18fb      	adds	r3, r7, r3
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2208      	movs	r2, #8
 80084b6:	4013      	ands	r3, r2
 80084b8:	d017      	beq.n	80084ea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084ba:	23a0      	movs	r3, #160	; 0xa0
 80084bc:	18fb      	adds	r3, r7, r3
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2220      	movs	r2, #32
 80084c2:	4013      	ands	r3, r2
 80084c4:	d105      	bne.n	80084d2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80084c6:	239c      	movs	r3, #156	; 0x9c
 80084c8:	18fb      	adds	r3, r7, r3
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2201      	movs	r2, #1
 80084ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084d0:	d00b      	beq.n	80084ea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2208      	movs	r2, #8
 80084d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2280      	movs	r2, #128	; 0x80
 80084de:	589b      	ldr	r3, [r3, r2]
 80084e0:	2208      	movs	r2, #8
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2180      	movs	r1, #128	; 0x80
 80084e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80084ea:	23a4      	movs	r3, #164	; 0xa4
 80084ec:	18fb      	adds	r3, r7, r3
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	2380      	movs	r3, #128	; 0x80
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	4013      	ands	r3, r2
 80084f6:	d013      	beq.n	8008520 <HAL_UART_IRQHandler+0x198>
 80084f8:	23a0      	movs	r3, #160	; 0xa0
 80084fa:	18fb      	adds	r3, r7, r3
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	2380      	movs	r3, #128	; 0x80
 8008500:	04db      	lsls	r3, r3, #19
 8008502:	4013      	ands	r3, r2
 8008504:	d00c      	beq.n	8008520 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2280      	movs	r2, #128	; 0x80
 800850c:	0112      	lsls	r2, r2, #4
 800850e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2280      	movs	r2, #128	; 0x80
 8008514:	589b      	ldr	r3, [r3, r2]
 8008516:	2220      	movs	r2, #32
 8008518:	431a      	orrs	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2180      	movs	r1, #128	; 0x80
 800851e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2280      	movs	r2, #128	; 0x80
 8008524:	589b      	ldr	r3, [r3, r2]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d100      	bne.n	800852c <HAL_UART_IRQHandler+0x1a4>
 800852a:	e1f7      	b.n	800891c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800852c:	23a4      	movs	r3, #164	; 0xa4
 800852e:	18fb      	adds	r3, r7, r3
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2220      	movs	r2, #32
 8008534:	4013      	ands	r3, r2
 8008536:	d00e      	beq.n	8008556 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008538:	23a0      	movs	r3, #160	; 0xa0
 800853a:	18fb      	adds	r3, r7, r3
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2220      	movs	r2, #32
 8008540:	4013      	ands	r3, r2
 8008542:	d008      	beq.n	8008556 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	0010      	movs	r0, r2
 8008554:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2280      	movs	r2, #128	; 0x80
 800855a:	589b      	ldr	r3, [r3, r2]
 800855c:	2194      	movs	r1, #148	; 0x94
 800855e:	187a      	adds	r2, r7, r1
 8008560:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	2240      	movs	r2, #64	; 0x40
 800856a:	4013      	ands	r3, r2
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d004      	beq.n	800857a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008570:	187b      	adds	r3, r7, r1
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2228      	movs	r2, #40	; 0x28
 8008576:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008578:	d047      	beq.n	800860a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	0018      	movs	r0, r3
 800857e:	f000 fd3f 	bl	8009000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	2240      	movs	r2, #64	; 0x40
 800858a:	4013      	ands	r3, r2
 800858c:	2b40      	cmp	r3, #64	; 0x40
 800858e:	d137      	bne.n	8008600 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008590:	f3ef 8310 	mrs	r3, PRIMASK
 8008594:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008598:	2090      	movs	r0, #144	; 0x90
 800859a:	183a      	adds	r2, r7, r0
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	2301      	movs	r3, #1
 80085a0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085a4:	f383 8810 	msr	PRIMASK, r3
}
 80085a8:	46c0      	nop			; (mov r8, r8)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2140      	movs	r1, #64	; 0x40
 80085b6:	438a      	bics	r2, r1
 80085b8:	609a      	str	r2, [r3, #8]
 80085ba:	183b      	adds	r3, r7, r0
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085c2:	f383 8810 	msr	PRIMASK, r3
}
 80085c6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d012      	beq.n	80085f6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d4:	4a14      	ldr	r2, [pc, #80]	; (8008628 <HAL_UART_IRQHandler+0x2a0>)
 80085d6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085dc:	0018      	movs	r0, r3
 80085de:	f7fb fd71 	bl	80040c4 <HAL_DMA_Abort_IT>
 80085e2:	1e03      	subs	r3, r0, #0
 80085e4:	d01a      	beq.n	800861c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f0:	0018      	movs	r0, r3
 80085f2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f4:	e012      	b.n	800861c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	0018      	movs	r0, r3
 80085fa:	f000 f9a5 	bl	8008948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085fe:	e00d      	b.n	800861c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	0018      	movs	r0, r3
 8008604:	f000 f9a0 	bl	8008948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008608:	e008      	b.n	800861c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	0018      	movs	r0, r3
 800860e:	f000 f99b 	bl	8008948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2280      	movs	r2, #128	; 0x80
 8008616:	2100      	movs	r1, #0
 8008618:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800861a:	e17f      	b.n	800891c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800861c:	46c0      	nop			; (mov r8, r8)
    return;
 800861e:	e17d      	b.n	800891c <HAL_UART_IRQHandler+0x594>
 8008620:	0000080f 	.word	0x0000080f
 8008624:	04000120 	.word	0x04000120
 8008628:	080090c5 	.word	0x080090c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008630:	2b01      	cmp	r3, #1
 8008632:	d000      	beq.n	8008636 <HAL_UART_IRQHandler+0x2ae>
 8008634:	e131      	b.n	800889a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008636:	23a4      	movs	r3, #164	; 0xa4
 8008638:	18fb      	adds	r3, r7, r3
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2210      	movs	r2, #16
 800863e:	4013      	ands	r3, r2
 8008640:	d100      	bne.n	8008644 <HAL_UART_IRQHandler+0x2bc>
 8008642:	e12a      	b.n	800889a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008644:	23a0      	movs	r3, #160	; 0xa0
 8008646:	18fb      	adds	r3, r7, r3
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2210      	movs	r2, #16
 800864c:	4013      	ands	r3, r2
 800864e:	d100      	bne.n	8008652 <HAL_UART_IRQHandler+0x2ca>
 8008650:	e123      	b.n	800889a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2210      	movs	r2, #16
 8008658:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2240      	movs	r2, #64	; 0x40
 8008662:	4013      	ands	r3, r2
 8008664:	2b40      	cmp	r3, #64	; 0x40
 8008666:	d000      	beq.n	800866a <HAL_UART_IRQHandler+0x2e2>
 8008668:	e09b      	b.n	80087a2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	217e      	movs	r1, #126	; 0x7e
 8008674:	187b      	adds	r3, r7, r1
 8008676:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008678:	187b      	adds	r3, r7, r1
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d100      	bne.n	8008682 <HAL_UART_IRQHandler+0x2fa>
 8008680:	e14e      	b.n	8008920 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2258      	movs	r2, #88	; 0x58
 8008686:	5a9b      	ldrh	r3, [r3, r2]
 8008688:	187a      	adds	r2, r7, r1
 800868a:	8812      	ldrh	r2, [r2, #0]
 800868c:	429a      	cmp	r2, r3
 800868e:	d300      	bcc.n	8008692 <HAL_UART_IRQHandler+0x30a>
 8008690:	e146      	b.n	8008920 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	187a      	adds	r2, r7, r1
 8008696:	215a      	movs	r1, #90	; 0x5a
 8008698:	8812      	ldrh	r2, [r2, #0]
 800869a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d06e      	beq.n	8008784 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086a6:	f3ef 8310 	mrs	r3, PRIMASK
 80086aa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80086b0:	2301      	movs	r3, #1
 80086b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b6:	f383 8810 	msr	PRIMASK, r3
}
 80086ba:	46c0      	nop			; (mov r8, r8)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	499a      	ldr	r1, [pc, #616]	; (8008930 <HAL_UART_IRQHandler+0x5a8>)
 80086c8:	400a      	ands	r2, r1
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	f383 8810 	msr	PRIMASK, r3
}
 80086d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086d8:	f3ef 8310 	mrs	r3, PRIMASK
 80086dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80086de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e0:	677b      	str	r3, [r7, #116]	; 0x74
 80086e2:	2301      	movs	r3, #1
 80086e4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e8:	f383 8810 	msr	PRIMASK, r3
}
 80086ec:	46c0      	nop			; (mov r8, r8)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2101      	movs	r1, #1
 80086fa:	438a      	bics	r2, r1
 80086fc:	609a      	str	r2, [r3, #8]
 80086fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008700:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008704:	f383 8810 	msr	PRIMASK, r3
}
 8008708:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800870a:	f3ef 8310 	mrs	r3, PRIMASK
 800870e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008710:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008712:	673b      	str	r3, [r7, #112]	; 0x70
 8008714:	2301      	movs	r3, #1
 8008716:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871a:	f383 8810 	msr	PRIMASK, r3
}
 800871e:	46c0      	nop			; (mov r8, r8)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689a      	ldr	r2, [r3, #8]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2140      	movs	r1, #64	; 0x40
 800872c:	438a      	bics	r2, r1
 800872e:	609a      	str	r2, [r3, #8]
 8008730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008732:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008736:	f383 8810 	msr	PRIMASK, r3
}
 800873a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008748:	f3ef 8310 	mrs	r3, PRIMASK
 800874c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800874e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008750:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008752:	2301      	movs	r3, #1
 8008754:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008758:	f383 8810 	msr	PRIMASK, r3
}
 800875c:	46c0      	nop			; (mov r8, r8)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2110      	movs	r1, #16
 800876a:	438a      	bics	r2, r1
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008770:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008774:	f383 8810 	msr	PRIMASK, r3
}
 8008778:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877e:	0018      	movs	r0, r3
 8008780:	f7fb fc68 	bl	8004054 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2258      	movs	r2, #88	; 0x58
 8008788:	5a9a      	ldrh	r2, [r3, r2]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	215a      	movs	r1, #90	; 0x5a
 800878e:	5a5b      	ldrh	r3, [r3, r1]
 8008790:	b29b      	uxth	r3, r3
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	b29a      	uxth	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	0011      	movs	r1, r2
 800879a:	0018      	movs	r0, r3
 800879c:	f000 f8dc 	bl	8008958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087a0:	e0be      	b.n	8008920 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2258      	movs	r2, #88	; 0x58
 80087a6:	5a99      	ldrh	r1, [r3, r2]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	225a      	movs	r2, #90	; 0x5a
 80087ac:	5a9b      	ldrh	r3, [r3, r2]
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	208e      	movs	r0, #142	; 0x8e
 80087b2:	183b      	adds	r3, r7, r0
 80087b4:	1a8a      	subs	r2, r1, r2
 80087b6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	225a      	movs	r2, #90	; 0x5a
 80087bc:	5a9b      	ldrh	r3, [r3, r2]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d100      	bne.n	80087c6 <HAL_UART_IRQHandler+0x43e>
 80087c4:	e0ae      	b.n	8008924 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80087c6:	183b      	adds	r3, r7, r0
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d100      	bne.n	80087d0 <HAL_UART_IRQHandler+0x448>
 80087ce:	e0a9      	b.n	8008924 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d0:	f3ef 8310 	mrs	r3, PRIMASK
 80087d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80087d6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087d8:	2488      	movs	r4, #136	; 0x88
 80087da:	193a      	adds	r2, r7, r4
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	2301      	movs	r3, #1
 80087e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f383 8810 	msr	PRIMASK, r3
}
 80087e8:	46c0      	nop			; (mov r8, r8)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	494f      	ldr	r1, [pc, #316]	; (8008934 <HAL_UART_IRQHandler+0x5ac>)
 80087f6:	400a      	ands	r2, r1
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	193b      	adds	r3, r7, r4
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f383 8810 	msr	PRIMASK, r3
}
 8008806:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008808:	f3ef 8310 	mrs	r3, PRIMASK
 800880c:	61bb      	str	r3, [r7, #24]
  return(result);
 800880e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008810:	2484      	movs	r4, #132	; 0x84
 8008812:	193a      	adds	r2, r7, r4
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	2301      	movs	r3, #1
 8008818:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	f383 8810 	msr	PRIMASK, r3
}
 8008820:	46c0      	nop			; (mov r8, r8)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2101      	movs	r1, #1
 800882e:	438a      	bics	r2, r1
 8008830:	609a      	str	r2, [r3, #8]
 8008832:	193b      	adds	r3, r7, r4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	f383 8810 	msr	PRIMASK, r3
}
 800883e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2220      	movs	r2, #32
 8008844:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008852:	f3ef 8310 	mrs	r3, PRIMASK
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800885a:	2480      	movs	r4, #128	; 0x80
 800885c:	193a      	adds	r2, r7, r4
 800885e:	6013      	str	r3, [r2, #0]
 8008860:	2301      	movs	r3, #1
 8008862:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	f383 8810 	msr	PRIMASK, r3
}
 800886a:	46c0      	nop			; (mov r8, r8)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2110      	movs	r1, #16
 8008878:	438a      	bics	r2, r1
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	193b      	adds	r3, r7, r4
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008884:	f383 8810 	msr	PRIMASK, r3
}
 8008888:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800888a:	183b      	adds	r3, r7, r0
 800888c:	881a      	ldrh	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	0011      	movs	r1, r2
 8008892:	0018      	movs	r0, r3
 8008894:	f000 f860 	bl	8008958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008898:	e044      	b.n	8008924 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800889a:	23a4      	movs	r3, #164	; 0xa4
 800889c:	18fb      	adds	r3, r7, r3
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	2380      	movs	r3, #128	; 0x80
 80088a2:	035b      	lsls	r3, r3, #13
 80088a4:	4013      	ands	r3, r2
 80088a6:	d010      	beq.n	80088ca <HAL_UART_IRQHandler+0x542>
 80088a8:	239c      	movs	r3, #156	; 0x9c
 80088aa:	18fb      	adds	r3, r7, r3
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	2380      	movs	r3, #128	; 0x80
 80088b0:	03db      	lsls	r3, r3, #15
 80088b2:	4013      	ands	r3, r2
 80088b4:	d009      	beq.n	80088ca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2280      	movs	r2, #128	; 0x80
 80088bc:	0352      	lsls	r2, r2, #13
 80088be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	0018      	movs	r0, r3
 80088c4:	f000 fc40 	bl	8009148 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088c8:	e02f      	b.n	800892a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80088ca:	23a4      	movs	r3, #164	; 0xa4
 80088cc:	18fb      	adds	r3, r7, r3
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2280      	movs	r2, #128	; 0x80
 80088d2:	4013      	ands	r3, r2
 80088d4:	d00f      	beq.n	80088f6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80088d6:	23a0      	movs	r3, #160	; 0xa0
 80088d8:	18fb      	adds	r3, r7, r3
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2280      	movs	r2, #128	; 0x80
 80088de:	4013      	ands	r3, r2
 80088e0:	d009      	beq.n	80088f6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d01e      	beq.n	8008928 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	0010      	movs	r0, r2
 80088f2:	4798      	blx	r3
    }
    return;
 80088f4:	e018      	b.n	8008928 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088f6:	23a4      	movs	r3, #164	; 0xa4
 80088f8:	18fb      	adds	r3, r7, r3
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2240      	movs	r2, #64	; 0x40
 80088fe:	4013      	ands	r3, r2
 8008900:	d013      	beq.n	800892a <HAL_UART_IRQHandler+0x5a2>
 8008902:	23a0      	movs	r3, #160	; 0xa0
 8008904:	18fb      	adds	r3, r7, r3
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2240      	movs	r2, #64	; 0x40
 800890a:	4013      	ands	r3, r2
 800890c:	d00d      	beq.n	800892a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	0018      	movs	r0, r3
 8008912:	f000 fbee 	bl	80090f2 <UART_EndTransmit_IT>
    return;
 8008916:	e008      	b.n	800892a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008918:	46c0      	nop			; (mov r8, r8)
 800891a:	e006      	b.n	800892a <HAL_UART_IRQHandler+0x5a2>
    return;
 800891c:	46c0      	nop			; (mov r8, r8)
 800891e:	e004      	b.n	800892a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008920:	46c0      	nop			; (mov r8, r8)
 8008922:	e002      	b.n	800892a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008924:	46c0      	nop			; (mov r8, r8)
 8008926:	e000      	b.n	800892a <HAL_UART_IRQHandler+0x5a2>
    return;
 8008928:	46c0      	nop			; (mov r8, r8)
  }

}
 800892a:	46bd      	mov	sp, r7
 800892c:	b02b      	add	sp, #172	; 0xac
 800892e:	bd90      	pop	{r4, r7, pc}
 8008930:	fffffeff 	.word	0xfffffeff
 8008934:	fffffedf 	.word	0xfffffedf

08008938 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008940:	46c0      	nop			; (mov r8, r8)
 8008942:	46bd      	mov	sp, r7
 8008944:	b002      	add	sp, #8
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008950:	46c0      	nop			; (mov r8, r8)
 8008952:	46bd      	mov	sp, r7
 8008954:	b002      	add	sp, #8
 8008956:	bd80      	pop	{r7, pc}

08008958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	000a      	movs	r2, r1
 8008962:	1cbb      	adds	r3, r7, #2
 8008964:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008966:	46c0      	nop			; (mov r8, r8)
 8008968:	46bd      	mov	sp, r7
 800896a:	b002      	add	sp, #8
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008978:	231e      	movs	r3, #30
 800897a:	18fb      	adds	r3, r7, r3
 800897c:	2200      	movs	r2, #0
 800897e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	431a      	orrs	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	431a      	orrs	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	4313      	orrs	r3, r2
 8008996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4aaf      	ldr	r2, [pc, #700]	; (8008c5c <UART_SetConfig+0x2ec>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	0019      	movs	r1, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	4aaa      	ldr	r2, [pc, #680]	; (8008c60 <UART_SetConfig+0x2f0>)
 80089b6:	4013      	ands	r3, r2
 80089b8:	0019      	movs	r1, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	4aa1      	ldr	r2, [pc, #644]	; (8008c64 <UART_SetConfig+0x2f4>)
 80089de:	4013      	ands	r3, r2
 80089e0:	0019      	movs	r1, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a9d      	ldr	r2, [pc, #628]	; (8008c68 <UART_SetConfig+0x2f8>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d127      	bne.n	8008a46 <UART_SetConfig+0xd6>
 80089f6:	4b9d      	ldr	r3, [pc, #628]	; (8008c6c <UART_SetConfig+0x2fc>)
 80089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fa:	2203      	movs	r2, #3
 80089fc:	4013      	ands	r3, r2
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d00d      	beq.n	8008a1e <UART_SetConfig+0xae>
 8008a02:	d81b      	bhi.n	8008a3c <UART_SetConfig+0xcc>
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d014      	beq.n	8008a32 <UART_SetConfig+0xc2>
 8008a08:	d818      	bhi.n	8008a3c <UART_SetConfig+0xcc>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <UART_SetConfig+0xa4>
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d00a      	beq.n	8008a28 <UART_SetConfig+0xb8>
 8008a12:	e013      	b.n	8008a3c <UART_SetConfig+0xcc>
 8008a14:	231f      	movs	r3, #31
 8008a16:	18fb      	adds	r3, r7, r3
 8008a18:	2200      	movs	r2, #0
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	e065      	b.n	8008aea <UART_SetConfig+0x17a>
 8008a1e:	231f      	movs	r3, #31
 8008a20:	18fb      	adds	r3, r7, r3
 8008a22:	2202      	movs	r2, #2
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	e060      	b.n	8008aea <UART_SetConfig+0x17a>
 8008a28:	231f      	movs	r3, #31
 8008a2a:	18fb      	adds	r3, r7, r3
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	701a      	strb	r2, [r3, #0]
 8008a30:	e05b      	b.n	8008aea <UART_SetConfig+0x17a>
 8008a32:	231f      	movs	r3, #31
 8008a34:	18fb      	adds	r3, r7, r3
 8008a36:	2208      	movs	r2, #8
 8008a38:	701a      	strb	r2, [r3, #0]
 8008a3a:	e056      	b.n	8008aea <UART_SetConfig+0x17a>
 8008a3c:	231f      	movs	r3, #31
 8008a3e:	18fb      	adds	r3, r7, r3
 8008a40:	2210      	movs	r2, #16
 8008a42:	701a      	strb	r2, [r3, #0]
 8008a44:	e051      	b.n	8008aea <UART_SetConfig+0x17a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a89      	ldr	r2, [pc, #548]	; (8008c70 <UART_SetConfig+0x300>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d134      	bne.n	8008aba <UART_SetConfig+0x14a>
 8008a50:	4b86      	ldr	r3, [pc, #536]	; (8008c6c <UART_SetConfig+0x2fc>)
 8008a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a54:	23c0      	movs	r3, #192	; 0xc0
 8008a56:	029b      	lsls	r3, r3, #10
 8008a58:	4013      	ands	r3, r2
 8008a5a:	22c0      	movs	r2, #192	; 0xc0
 8008a5c:	0292      	lsls	r2, r2, #10
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d017      	beq.n	8008a92 <UART_SetConfig+0x122>
 8008a62:	22c0      	movs	r2, #192	; 0xc0
 8008a64:	0292      	lsls	r2, r2, #10
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d822      	bhi.n	8008ab0 <UART_SetConfig+0x140>
 8008a6a:	2280      	movs	r2, #128	; 0x80
 8008a6c:	0292      	lsls	r2, r2, #10
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d019      	beq.n	8008aa6 <UART_SetConfig+0x136>
 8008a72:	2280      	movs	r2, #128	; 0x80
 8008a74:	0292      	lsls	r2, r2, #10
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d81a      	bhi.n	8008ab0 <UART_SetConfig+0x140>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <UART_SetConfig+0x118>
 8008a7e:	2280      	movs	r2, #128	; 0x80
 8008a80:	0252      	lsls	r2, r2, #9
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d00a      	beq.n	8008a9c <UART_SetConfig+0x12c>
 8008a86:	e013      	b.n	8008ab0 <UART_SetConfig+0x140>
 8008a88:	231f      	movs	r3, #31
 8008a8a:	18fb      	adds	r3, r7, r3
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]
 8008a90:	e02b      	b.n	8008aea <UART_SetConfig+0x17a>
 8008a92:	231f      	movs	r3, #31
 8008a94:	18fb      	adds	r3, r7, r3
 8008a96:	2202      	movs	r2, #2
 8008a98:	701a      	strb	r2, [r3, #0]
 8008a9a:	e026      	b.n	8008aea <UART_SetConfig+0x17a>
 8008a9c:	231f      	movs	r3, #31
 8008a9e:	18fb      	adds	r3, r7, r3
 8008aa0:	2204      	movs	r2, #4
 8008aa2:	701a      	strb	r2, [r3, #0]
 8008aa4:	e021      	b.n	8008aea <UART_SetConfig+0x17a>
 8008aa6:	231f      	movs	r3, #31
 8008aa8:	18fb      	adds	r3, r7, r3
 8008aaa:	2208      	movs	r2, #8
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	e01c      	b.n	8008aea <UART_SetConfig+0x17a>
 8008ab0:	231f      	movs	r3, #31
 8008ab2:	18fb      	adds	r3, r7, r3
 8008ab4:	2210      	movs	r2, #16
 8008ab6:	701a      	strb	r2, [r3, #0]
 8008ab8:	e017      	b.n	8008aea <UART_SetConfig+0x17a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a6d      	ldr	r2, [pc, #436]	; (8008c74 <UART_SetConfig+0x304>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d104      	bne.n	8008ace <UART_SetConfig+0x15e>
 8008ac4:	231f      	movs	r3, #31
 8008ac6:	18fb      	adds	r3, r7, r3
 8008ac8:	2200      	movs	r2, #0
 8008aca:	701a      	strb	r2, [r3, #0]
 8008acc:	e00d      	b.n	8008aea <UART_SetConfig+0x17a>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a69      	ldr	r2, [pc, #420]	; (8008c78 <UART_SetConfig+0x308>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d104      	bne.n	8008ae2 <UART_SetConfig+0x172>
 8008ad8:	231f      	movs	r3, #31
 8008ada:	18fb      	adds	r3, r7, r3
 8008adc:	2200      	movs	r2, #0
 8008ade:	701a      	strb	r2, [r3, #0]
 8008ae0:	e003      	b.n	8008aea <UART_SetConfig+0x17a>
 8008ae2:	231f      	movs	r3, #31
 8008ae4:	18fb      	adds	r3, r7, r3
 8008ae6:	2210      	movs	r2, #16
 8008ae8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	69da      	ldr	r2, [r3, #28]
 8008aee:	2380      	movs	r3, #128	; 0x80
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d15d      	bne.n	8008bb2 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8008af6:	231f      	movs	r3, #31
 8008af8:	18fb      	adds	r3, r7, r3
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d015      	beq.n	8008b2c <UART_SetConfig+0x1bc>
 8008b00:	dc18      	bgt.n	8008b34 <UART_SetConfig+0x1c4>
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d00d      	beq.n	8008b22 <UART_SetConfig+0x1b2>
 8008b06:	dc15      	bgt.n	8008b34 <UART_SetConfig+0x1c4>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <UART_SetConfig+0x1a2>
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d005      	beq.n	8008b1c <UART_SetConfig+0x1ac>
 8008b10:	e010      	b.n	8008b34 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b12:	f7fe f865 	bl	8006be0 <HAL_RCC_GetPCLK1Freq>
 8008b16:	0003      	movs	r3, r0
 8008b18:	61bb      	str	r3, [r7, #24]
        break;
 8008b1a:	e012      	b.n	8008b42 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b1c:	4b57      	ldr	r3, [pc, #348]	; (8008c7c <UART_SetConfig+0x30c>)
 8008b1e:	61bb      	str	r3, [r7, #24]
        break;
 8008b20:	e00f      	b.n	8008b42 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b22:	f7fd ffd1 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 8008b26:	0003      	movs	r3, r0
 8008b28:	61bb      	str	r3, [r7, #24]
        break;
 8008b2a:	e00a      	b.n	8008b42 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b2c:	2380      	movs	r3, #128	; 0x80
 8008b2e:	021b      	lsls	r3, r3, #8
 8008b30:	61bb      	str	r3, [r7, #24]
        break;
 8008b32:	e006      	b.n	8008b42 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b38:	231e      	movs	r3, #30
 8008b3a:	18fb      	adds	r3, r7, r3
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	701a      	strb	r2, [r3, #0]
        break;
 8008b40:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d100      	bne.n	8008b4a <UART_SetConfig+0x1da>
 8008b48:	e07b      	b.n	8008c42 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	005a      	lsls	r2, r3, #1
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	085b      	lsrs	r3, r3, #1
 8008b54:	18d2      	adds	r2, r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	0019      	movs	r1, r3
 8008b5c:	0010      	movs	r0, r2
 8008b5e:	f7f7 fae5 	bl	800012c <__udivsi3>
 8008b62:	0003      	movs	r3, r0
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	2b0f      	cmp	r3, #15
 8008b6c:	d91c      	bls.n	8008ba8 <UART_SetConfig+0x238>
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	2380      	movs	r3, #128	; 0x80
 8008b72:	025b      	lsls	r3, r3, #9
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d217      	bcs.n	8008ba8 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	200e      	movs	r0, #14
 8008b7e:	183b      	adds	r3, r7, r0
 8008b80:	210f      	movs	r1, #15
 8008b82:	438a      	bics	r2, r1
 8008b84:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	085b      	lsrs	r3, r3, #1
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	2207      	movs	r2, #7
 8008b8e:	4013      	ands	r3, r2
 8008b90:	b299      	uxth	r1, r3
 8008b92:	183b      	adds	r3, r7, r0
 8008b94:	183a      	adds	r2, r7, r0
 8008b96:	8812      	ldrh	r2, [r2, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	183a      	adds	r2, r7, r0
 8008ba2:	8812      	ldrh	r2, [r2, #0]
 8008ba4:	60da      	str	r2, [r3, #12]
 8008ba6:	e04c      	b.n	8008c42 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008ba8:	231e      	movs	r3, #30
 8008baa:	18fb      	adds	r3, r7, r3
 8008bac:	2201      	movs	r2, #1
 8008bae:	701a      	strb	r2, [r3, #0]
 8008bb0:	e047      	b.n	8008c42 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bb2:	231f      	movs	r3, #31
 8008bb4:	18fb      	adds	r3, r7, r3
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	d015      	beq.n	8008be8 <UART_SetConfig+0x278>
 8008bbc:	dc18      	bgt.n	8008bf0 <UART_SetConfig+0x280>
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d00d      	beq.n	8008bde <UART_SetConfig+0x26e>
 8008bc2:	dc15      	bgt.n	8008bf0 <UART_SetConfig+0x280>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <UART_SetConfig+0x25e>
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d005      	beq.n	8008bd8 <UART_SetConfig+0x268>
 8008bcc:	e010      	b.n	8008bf0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bce:	f7fe f807 	bl	8006be0 <HAL_RCC_GetPCLK1Freq>
 8008bd2:	0003      	movs	r3, r0
 8008bd4:	61bb      	str	r3, [r7, #24]
        break;
 8008bd6:	e012      	b.n	8008bfe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bd8:	4b28      	ldr	r3, [pc, #160]	; (8008c7c <UART_SetConfig+0x30c>)
 8008bda:	61bb      	str	r3, [r7, #24]
        break;
 8008bdc:	e00f      	b.n	8008bfe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bde:	f7fd ff73 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 8008be2:	0003      	movs	r3, r0
 8008be4:	61bb      	str	r3, [r7, #24]
        break;
 8008be6:	e00a      	b.n	8008bfe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008be8:	2380      	movs	r3, #128	; 0x80
 8008bea:	021b      	lsls	r3, r3, #8
 8008bec:	61bb      	str	r3, [r7, #24]
        break;
 8008bee:	e006      	b.n	8008bfe <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008bf4:	231e      	movs	r3, #30
 8008bf6:	18fb      	adds	r3, r7, r3
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	701a      	strb	r2, [r3, #0]
        break;
 8008bfc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d01e      	beq.n	8008c42 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	085a      	lsrs	r2, r3, #1
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	18d2      	adds	r2, r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	0019      	movs	r1, r3
 8008c14:	0010      	movs	r0, r2
 8008c16:	f7f7 fa89 	bl	800012c <__udivsi3>
 8008c1a:	0003      	movs	r3, r0
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	2b0f      	cmp	r3, #15
 8008c24:	d909      	bls.n	8008c3a <UART_SetConfig+0x2ca>
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	2380      	movs	r3, #128	; 0x80
 8008c2a:	025b      	lsls	r3, r3, #9
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d204      	bcs.n	8008c3a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	60da      	str	r2, [r3, #12]
 8008c38:	e003      	b.n	8008c42 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008c3a:	231e      	movs	r3, #30
 8008c3c:	18fb      	adds	r3, r7, r3
 8008c3e:	2201      	movs	r2, #1
 8008c40:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008c4e:	231e      	movs	r3, #30
 8008c50:	18fb      	adds	r3, r7, r3
 8008c52:	781b      	ldrb	r3, [r3, #0]
}
 8008c54:	0018      	movs	r0, r3
 8008c56:	46bd      	mov	sp, r7
 8008c58:	b008      	add	sp, #32
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	efff69f3 	.word	0xefff69f3
 8008c60:	ffffcfff 	.word	0xffffcfff
 8008c64:	fffff4ff 	.word	0xfffff4ff
 8008c68:	40013800 	.word	0x40013800
 8008c6c:	40021000 	.word	0x40021000
 8008c70:	40004400 	.word	0x40004400
 8008c74:	40004800 	.word	0x40004800
 8008c78:	40004c00 	.word	0x40004c00
 8008c7c:	007a1200 	.word	0x007a1200

08008c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	4013      	ands	r3, r2
 8008c90:	d00b      	beq.n	8008caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	4a4a      	ldr	r2, [pc, #296]	; (8008dc4 <UART_AdvFeatureConfig+0x144>)
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	0019      	movs	r1, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	2202      	movs	r2, #2
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	d00b      	beq.n	8008ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	4a43      	ldr	r2, [pc, #268]	; (8008dc8 <UART_AdvFeatureConfig+0x148>)
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	0019      	movs	r1, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	2204      	movs	r2, #4
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	d00b      	beq.n	8008cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	4a3b      	ldr	r2, [pc, #236]	; (8008dcc <UART_AdvFeatureConfig+0x14c>)
 8008cde:	4013      	ands	r3, r2
 8008ce0:	0019      	movs	r1, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	2208      	movs	r2, #8
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	d00b      	beq.n	8008d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	4a34      	ldr	r2, [pc, #208]	; (8008dd0 <UART_AdvFeatureConfig+0x150>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	0019      	movs	r1, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	2210      	movs	r2, #16
 8008d16:	4013      	ands	r3, r2
 8008d18:	d00b      	beq.n	8008d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	4a2c      	ldr	r2, [pc, #176]	; (8008dd4 <UART_AdvFeatureConfig+0x154>)
 8008d22:	4013      	ands	r3, r2
 8008d24:	0019      	movs	r1, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	2220      	movs	r2, #32
 8008d38:	4013      	ands	r3, r2
 8008d3a:	d00b      	beq.n	8008d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	4a25      	ldr	r2, [pc, #148]	; (8008dd8 <UART_AdvFeatureConfig+0x158>)
 8008d44:	4013      	ands	r3, r2
 8008d46:	0019      	movs	r1, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	2240      	movs	r2, #64	; 0x40
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	d01d      	beq.n	8008d9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4a1d      	ldr	r2, [pc, #116]	; (8008ddc <UART_AdvFeatureConfig+0x15c>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	0019      	movs	r1, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d7a:	2380      	movs	r3, #128	; 0x80
 8008d7c:	035b      	lsls	r3, r3, #13
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d10b      	bne.n	8008d9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	4a15      	ldr	r2, [pc, #84]	; (8008de0 <UART_AdvFeatureConfig+0x160>)
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	0019      	movs	r1, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2280      	movs	r2, #128	; 0x80
 8008da0:	4013      	ands	r3, r2
 8008da2:	d00b      	beq.n	8008dbc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	4a0e      	ldr	r2, [pc, #56]	; (8008de4 <UART_AdvFeatureConfig+0x164>)
 8008dac:	4013      	ands	r3, r2
 8008dae:	0019      	movs	r1, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	605a      	str	r2, [r3, #4]
  }
}
 8008dbc:	46c0      	nop			; (mov r8, r8)
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	b002      	add	sp, #8
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	fffdffff 	.word	0xfffdffff
 8008dc8:	fffeffff 	.word	0xfffeffff
 8008dcc:	fffbffff 	.word	0xfffbffff
 8008dd0:	ffff7fff 	.word	0xffff7fff
 8008dd4:	ffffefff 	.word	0xffffefff
 8008dd8:	ffffdfff 	.word	0xffffdfff
 8008ddc:	ffefffff 	.word	0xffefffff
 8008de0:	ff9fffff 	.word	0xff9fffff
 8008de4:	fff7ffff 	.word	0xfff7ffff

08008de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2280      	movs	r2, #128	; 0x80
 8008df4:	2100      	movs	r1, #0
 8008df6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008df8:	f7fa fb00 	bl	80033fc <HAL_GetTick>
 8008dfc:	0003      	movs	r3, r0
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2208      	movs	r2, #8
 8008e08:	4013      	ands	r3, r2
 8008e0a:	2b08      	cmp	r3, #8
 8008e0c:	d10c      	bne.n	8008e28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2280      	movs	r2, #128	; 0x80
 8008e12:	0391      	lsls	r1, r2, #14
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	4a17      	ldr	r2, [pc, #92]	; (8008e74 <UART_CheckIdleState+0x8c>)
 8008e18:	9200      	str	r2, [sp, #0]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f000 f82c 	bl	8008e78 <UART_WaitOnFlagUntilTimeout>
 8008e20:	1e03      	subs	r3, r0, #0
 8008e22:	d001      	beq.n	8008e28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e021      	b.n	8008e6c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2204      	movs	r2, #4
 8008e30:	4013      	ands	r3, r2
 8008e32:	2b04      	cmp	r3, #4
 8008e34:	d10c      	bne.n	8008e50 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2280      	movs	r2, #128	; 0x80
 8008e3a:	03d1      	lsls	r1, r2, #15
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	4a0d      	ldr	r2, [pc, #52]	; (8008e74 <UART_CheckIdleState+0x8c>)
 8008e40:	9200      	str	r2, [sp, #0]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f000 f818 	bl	8008e78 <UART_WaitOnFlagUntilTimeout>
 8008e48:	1e03      	subs	r3, r0, #0
 8008e4a:	d001      	beq.n	8008e50 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e00d      	b.n	8008e6c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2274      	movs	r2, #116	; 0x74
 8008e66:	2100      	movs	r1, #0
 8008e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	0018      	movs	r0, r3
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	b004      	add	sp, #16
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	01ffffff 	.word	0x01ffffff

08008e78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b094      	sub	sp, #80	; 0x50
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	1dfb      	adds	r3, r7, #7
 8008e86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e88:	e0a3      	b.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	d100      	bne.n	8008e92 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008e90:	e09f      	b.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e92:	f7fa fab3 	bl	80033fc <HAL_GetTick>
 8008e96:	0002      	movs	r2, r0
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d302      	bcc.n	8008ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d13d      	bne.n	8008f24 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8008eac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	f383 8810 	msr	PRIMASK, r3
}
 8008ebc:	46c0      	nop			; (mov r8, r8)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	494c      	ldr	r1, [pc, #304]	; (8008ffc <UART_WaitOnFlagUntilTimeout+0x184>)
 8008eca:	400a      	ands	r2, r1
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	f383 8810 	msr	PRIMASK, r3
}
 8008ed8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eda:	f3ef 8310 	mrs	r3, PRIMASK
 8008ede:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	f383 8810 	msr	PRIMASK, r3
}
 8008eee:	46c0      	nop			; (mov r8, r8)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689a      	ldr	r2, [r3, #8]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2101      	movs	r1, #1
 8008efc:	438a      	bics	r2, r1
 8008efe:	609a      	str	r2, [r3, #8]
 8008f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f06:	f383 8810 	msr	PRIMASK, r3
}
 8008f0a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2220      	movs	r2, #32
 8008f16:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2274      	movs	r2, #116	; 0x74
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e067      	b.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2204      	movs	r2, #4
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	d050      	beq.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	69da      	ldr	r2, [r3, #28]
 8008f36:	2380      	movs	r3, #128	; 0x80
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	401a      	ands	r2, r3
 8008f3c:	2380      	movs	r3, #128	; 0x80
 8008f3e:	011b      	lsls	r3, r3, #4
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d146      	bne.n	8008fd2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2280      	movs	r2, #128	; 0x80
 8008f4a:	0112      	lsls	r2, r2, #4
 8008f4c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f52:	613b      	str	r3, [r7, #16]
  return(result);
 8008f54:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f58:	2301      	movs	r3, #1
 8008f5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f383 8810 	msr	PRIMASK, r3
}
 8008f62:	46c0      	nop			; (mov r8, r8)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4923      	ldr	r1, [pc, #140]	; (8008ffc <UART_WaitOnFlagUntilTimeout+0x184>)
 8008f70:	400a      	ands	r2, r1
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	f383 8810 	msr	PRIMASK, r3
}
 8008f7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f80:	f3ef 8310 	mrs	r3, PRIMASK
 8008f84:	61fb      	str	r3, [r7, #28]
  return(result);
 8008f86:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8e:	6a3b      	ldr	r3, [r7, #32]
 8008f90:	f383 8810 	msr	PRIMASK, r3
}
 8008f94:	46c0      	nop			; (mov r8, r8)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	438a      	bics	r2, r1
 8008fa4:	609a      	str	r2, [r3, #8]
 8008fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	f383 8810 	msr	PRIMASK, r3
}
 8008fb0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2280      	movs	r2, #128	; 0x80
 8008fc2:	2120      	movs	r1, #32
 8008fc4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2274      	movs	r2, #116	; 0x74
 8008fca:	2100      	movs	r1, #0
 8008fcc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e010      	b.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	4013      	ands	r3, r2
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	425a      	negs	r2, r3
 8008fe2:	4153      	adcs	r3, r2
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	001a      	movs	r2, r3
 8008fe8:	1dfb      	adds	r3, r7, #7
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d100      	bne.n	8008ff2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8008ff0:	e74b      	b.n	8008e8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b014      	add	sp, #80	; 0x50
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	fffffe5f 	.word	0xfffffe5f

08009000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b08e      	sub	sp, #56	; 0x38
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009008:	f3ef 8310 	mrs	r3, PRIMASK
 800900c:	617b      	str	r3, [r7, #20]
  return(result);
 800900e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009010:	637b      	str	r3, [r7, #52]	; 0x34
 8009012:	2301      	movs	r3, #1
 8009014:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	f383 8810 	msr	PRIMASK, r3
}
 800901c:	46c0      	nop			; (mov r8, r8)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4925      	ldr	r1, [pc, #148]	; (80090c0 <UART_EndRxTransfer+0xc0>)
 800902a:	400a      	ands	r2, r1
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009030:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	f383 8810 	msr	PRIMASK, r3
}
 8009038:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800903a:	f3ef 8310 	mrs	r3, PRIMASK
 800903e:	623b      	str	r3, [r7, #32]
  return(result);
 8009040:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009042:	633b      	str	r3, [r7, #48]	; 0x30
 8009044:	2301      	movs	r3, #1
 8009046:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	f383 8810 	msr	PRIMASK, r3
}
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2101      	movs	r1, #1
 800905c:	438a      	bics	r2, r1
 800905e:	609a      	str	r2, [r3, #8]
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	f383 8810 	msr	PRIMASK, r3
}
 800906a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009070:	2b01      	cmp	r3, #1
 8009072:	d118      	bne.n	80090a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009074:	f3ef 8310 	mrs	r3, PRIMASK
 8009078:	60bb      	str	r3, [r7, #8]
  return(result);
 800907a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800907e:	2301      	movs	r3, #1
 8009080:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f383 8810 	msr	PRIMASK, r3
}
 8009088:	46c0      	nop			; (mov r8, r8)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2110      	movs	r1, #16
 8009096:	438a      	bics	r2, r1
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f383 8810 	msr	PRIMASK, r3
}
 80090a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2220      	movs	r2, #32
 80090aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80090b8:	46c0      	nop			; (mov r8, r8)
 80090ba:	46bd      	mov	sp, r7
 80090bc:	b00e      	add	sp, #56	; 0x38
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	fffffedf 	.word	0xfffffedf

080090c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	225a      	movs	r2, #90	; 0x5a
 80090d6:	2100      	movs	r1, #0
 80090d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2252      	movs	r2, #82	; 0x52
 80090de:	2100      	movs	r1, #0
 80090e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	0018      	movs	r0, r3
 80090e6:	f7ff fc2f 	bl	8008948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	46bd      	mov	sp, r7
 80090ee:	b004      	add	sp, #16
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b086      	sub	sp, #24
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090fa:	f3ef 8310 	mrs	r3, PRIMASK
 80090fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009100:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	2301      	movs	r3, #1
 8009106:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f383 8810 	msr	PRIMASK, r3
}
 800910e:	46c0      	nop			; (mov r8, r8)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2140      	movs	r1, #64	; 0x40
 800911c:	438a      	bics	r2, r1
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f383 8810 	msr	PRIMASK, r3
}
 800912a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2220      	movs	r2, #32
 8009130:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	0018      	movs	r0, r3
 800913c:	f7ff fbfc 	bl	8008938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009140:	46c0      	nop			; (mov r8, r8)
 8009142:	46bd      	mov	sp, r7
 8009144:	b006      	add	sp, #24
 8009146:	bd80      	pop	{r7, pc}

08009148 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009150:	46c0      	nop			; (mov r8, r8)
 8009152:	46bd      	mov	sp, r7
 8009154:	b002      	add	sp, #8
 8009156:	bd80      	pop	{r7, pc}

08009158 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2244      	movs	r2, #68	; 0x44
 8009164:	2100      	movs	r1, #0
 8009166:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009168:	4b05      	ldr	r3, [pc, #20]	; (8009180 <USB_EnableGlobalInt+0x28>)
 800916a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	b299      	uxth	r1, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2240      	movs	r2, #64	; 0x40
 8009174:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	0018      	movs	r0, r3
 800917a:	46bd      	mov	sp, r7
 800917c:	b004      	add	sp, #16
 800917e:	bd80      	pop	{r7, pc}
 8009180:	0000bf80 	.word	0x0000bf80

08009184 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800918c:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <USB_DisableGlobalInt+0x30>)
 800918e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2240      	movs	r2, #64	; 0x40
 8009194:	5a9b      	ldrh	r3, [r3, r2]
 8009196:	b29b      	uxth	r3, r3
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	b292      	uxth	r2, r2
 800919c:	43d2      	mvns	r2, r2
 800919e:	b292      	uxth	r2, r2
 80091a0:	4013      	ands	r3, r2
 80091a2:	b299      	uxth	r1, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2240      	movs	r2, #64	; 0x40
 80091a8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	0018      	movs	r0, r3
 80091ae:	46bd      	mov	sp, r7
 80091b0:	b004      	add	sp, #16
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	0000bf80 	.word	0x0000bf80

080091b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80091b8:	b084      	sub	sp, #16
 80091ba:	b590      	push	{r4, r7, lr}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	2004      	movs	r0, #4
 80091c4:	2410      	movs	r4, #16
 80091c6:	1900      	adds	r0, r0, r4
 80091c8:	2408      	movs	r4, #8
 80091ca:	46a4      	mov	ip, r4
 80091cc:	44bc      	add	ip, r7
 80091ce:	4460      	add	r0, ip
 80091d0:	6001      	str	r1, [r0, #0]
 80091d2:	6042      	str	r2, [r0, #4]
 80091d4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2240      	movs	r2, #64	; 0x40
 80091da:	2101      	movs	r1, #1
 80091dc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2240      	movs	r2, #64	; 0x40
 80091e2:	2100      	movs	r1, #0
 80091e4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2244      	movs	r2, #68	; 0x44
 80091ea:	2100      	movs	r1, #0
 80091ec:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2250      	movs	r2, #80	; 0x50
 80091f2:	2100      	movs	r1, #0
 80091f4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	0018      	movs	r0, r3
 80091fa:	46bd      	mov	sp, r7
 80091fc:	b003      	add	sp, #12
 80091fe:	bc90      	pop	{r4, r7}
 8009200:	bc08      	pop	{r3}
 8009202:	b004      	add	sp, #16
 8009204:	4718      	bx	r3
	...

08009208 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b09c      	sub	sp, #112	; 0x70
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009212:	236f      	movs	r3, #111	; 0x6f
 8009214:	18fb      	adds	r3, r7, r3
 8009216:	2200      	movs	r2, #0
 8009218:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	18d3      	adds	r3, r2, r3
 8009224:	881b      	ldrh	r3, [r3, #0]
 8009226:	b29a      	uxth	r2, r3
 8009228:	236c      	movs	r3, #108	; 0x6c
 800922a:	18fb      	adds	r3, r7, r3
 800922c:	49cf      	ldr	r1, [pc, #828]	; (800956c <USB_ActivateEndpoint+0x364>)
 800922e:	400a      	ands	r2, r1
 8009230:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	78db      	ldrb	r3, [r3, #3]
 8009236:	2b03      	cmp	r3, #3
 8009238:	d017      	beq.n	800926a <USB_ActivateEndpoint+0x62>
 800923a:	dc28      	bgt.n	800928e <USB_ActivateEndpoint+0x86>
 800923c:	2b02      	cmp	r3, #2
 800923e:	d00e      	beq.n	800925e <USB_ActivateEndpoint+0x56>
 8009240:	dc25      	bgt.n	800928e <USB_ActivateEndpoint+0x86>
 8009242:	2b00      	cmp	r3, #0
 8009244:	d002      	beq.n	800924c <USB_ActivateEndpoint+0x44>
 8009246:	2b01      	cmp	r3, #1
 8009248:	d018      	beq.n	800927c <USB_ActivateEndpoint+0x74>
 800924a:	e020      	b.n	800928e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800924c:	226c      	movs	r2, #108	; 0x6c
 800924e:	18bb      	adds	r3, r7, r2
 8009250:	18ba      	adds	r2, r7, r2
 8009252:	8812      	ldrh	r2, [r2, #0]
 8009254:	2180      	movs	r1, #128	; 0x80
 8009256:	0089      	lsls	r1, r1, #2
 8009258:	430a      	orrs	r2, r1
 800925a:	801a      	strh	r2, [r3, #0]
      break;
 800925c:	e01c      	b.n	8009298 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800925e:	226c      	movs	r2, #108	; 0x6c
 8009260:	18bb      	adds	r3, r7, r2
 8009262:	18ba      	adds	r2, r7, r2
 8009264:	8812      	ldrh	r2, [r2, #0]
 8009266:	801a      	strh	r2, [r3, #0]
      break;
 8009268:	e016      	b.n	8009298 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800926a:	226c      	movs	r2, #108	; 0x6c
 800926c:	18bb      	adds	r3, r7, r2
 800926e:	18ba      	adds	r2, r7, r2
 8009270:	8812      	ldrh	r2, [r2, #0]
 8009272:	21c0      	movs	r1, #192	; 0xc0
 8009274:	00c9      	lsls	r1, r1, #3
 8009276:	430a      	orrs	r2, r1
 8009278:	801a      	strh	r2, [r3, #0]
      break;
 800927a:	e00d      	b.n	8009298 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800927c:	226c      	movs	r2, #108	; 0x6c
 800927e:	18bb      	adds	r3, r7, r2
 8009280:	18ba      	adds	r2, r7, r2
 8009282:	8812      	ldrh	r2, [r2, #0]
 8009284:	2180      	movs	r1, #128	; 0x80
 8009286:	00c9      	lsls	r1, r1, #3
 8009288:	430a      	orrs	r2, r1
 800928a:	801a      	strh	r2, [r3, #0]
      break;
 800928c:	e004      	b.n	8009298 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800928e:	236f      	movs	r3, #111	; 0x6f
 8009290:	18fb      	adds	r3, r7, r3
 8009292:	2201      	movs	r2, #1
 8009294:	701a      	strb	r2, [r3, #0]
      break;
 8009296:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	18d3      	adds	r3, r2, r3
 80092a2:	226c      	movs	r2, #108	; 0x6c
 80092a4:	18ba      	adds	r2, r7, r2
 80092a6:	8812      	ldrh	r2, [r2, #0]
 80092a8:	49b1      	ldr	r1, [pc, #708]	; (8009570 <USB_ActivateEndpoint+0x368>)
 80092aa:	430a      	orrs	r2, r1
 80092ac:	b292      	uxth	r2, r2
 80092ae:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	18d3      	adds	r3, r2, r3
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	b21b      	sxth	r3, r3
 80092c0:	4aac      	ldr	r2, [pc, #688]	; (8009574 <USB_ActivateEndpoint+0x36c>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	b21a      	sxth	r2, r3
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	b21b      	sxth	r3, r3
 80092cc:	4313      	orrs	r3, r2
 80092ce:	b21a      	sxth	r2, r3
 80092d0:	2166      	movs	r1, #102	; 0x66
 80092d2:	187b      	adds	r3, r7, r1
 80092d4:	801a      	strh	r2, [r3, #0]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	18d3      	adds	r3, r2, r3
 80092e0:	187a      	adds	r2, r7, r1
 80092e2:	8812      	ldrh	r2, [r2, #0]
 80092e4:	49a2      	ldr	r1, [pc, #648]	; (8009570 <USB_ActivateEndpoint+0x368>)
 80092e6:	430a      	orrs	r2, r1
 80092e8:	b292      	uxth	r2, r2
 80092ea:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	7b1b      	ldrb	r3, [r3, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d000      	beq.n	80092f6 <USB_ActivateEndpoint+0xee>
 80092f4:	e150      	b.n	8009598 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	785b      	ldrb	r3, [r3, #1]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d100      	bne.n	8009300 <USB_ActivateEndpoint+0xf8>
 80092fe:	e07a      	b.n	80093f6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	61bb      	str	r3, [r7, #24]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2250      	movs	r2, #80	; 0x50
 8009308:	5a9b      	ldrh	r3, [r3, r2]
 800930a:	b29b      	uxth	r3, r3
 800930c:	001a      	movs	r2, r3
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	189b      	adds	r3, r3, r2
 8009312:	61bb      	str	r3, [r7, #24]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	00da      	lsls	r2, r3, #3
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	18d3      	adds	r3, r2, r3
 800931e:	2280      	movs	r2, #128	; 0x80
 8009320:	00d2      	lsls	r2, r2, #3
 8009322:	4694      	mov	ip, r2
 8009324:	4463      	add	r3, ip
 8009326:	617b      	str	r3, [r7, #20]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	88db      	ldrh	r3, [r3, #6]
 800932c:	085b      	lsrs	r3, r3, #1
 800932e:	b29b      	uxth	r3, r3
 8009330:	18db      	adds	r3, r3, r3
 8009332:	b29a      	uxth	r2, r3
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	18d2      	adds	r2, r2, r3
 8009342:	2112      	movs	r1, #18
 8009344:	187b      	adds	r3, r7, r1
 8009346:	8812      	ldrh	r2, [r2, #0]
 8009348:	801a      	strh	r2, [r3, #0]
 800934a:	187b      	adds	r3, r7, r1
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	2240      	movs	r2, #64	; 0x40
 8009350:	4013      	ands	r3, r2
 8009352:	d016      	beq.n	8009382 <USB_ActivateEndpoint+0x17a>
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	18d3      	adds	r3, r2, r3
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29a      	uxth	r2, r3
 8009362:	2010      	movs	r0, #16
 8009364:	183b      	adds	r3, r7, r0
 8009366:	4983      	ldr	r1, [pc, #524]	; (8009574 <USB_ActivateEndpoint+0x36c>)
 8009368:	400a      	ands	r2, r1
 800936a:	801a      	strh	r2, [r3, #0]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	18d3      	adds	r3, r2, r3
 8009376:	183a      	adds	r2, r7, r0
 8009378:	8812      	ldrh	r2, [r2, #0]
 800937a:	497f      	ldr	r1, [pc, #508]	; (8009578 <USB_ActivateEndpoint+0x370>)
 800937c:	430a      	orrs	r2, r1
 800937e:	b292      	uxth	r2, r2
 8009380:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	78db      	ldrb	r3, [r3, #3]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d01d      	beq.n	80093c6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	18d3      	adds	r3, r2, r3
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	b29a      	uxth	r2, r3
 8009398:	200c      	movs	r0, #12
 800939a:	183b      	adds	r3, r7, r0
 800939c:	4977      	ldr	r1, [pc, #476]	; (800957c <USB_ActivateEndpoint+0x374>)
 800939e:	400a      	ands	r2, r1
 80093a0:	801a      	strh	r2, [r3, #0]
 80093a2:	183b      	adds	r3, r7, r0
 80093a4:	183a      	adds	r2, r7, r0
 80093a6:	8812      	ldrh	r2, [r2, #0]
 80093a8:	2120      	movs	r1, #32
 80093aa:	404a      	eors	r2, r1
 80093ac:	801a      	strh	r2, [r3, #0]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	18d3      	adds	r3, r2, r3
 80093b8:	183a      	adds	r2, r7, r0
 80093ba:	8812      	ldrh	r2, [r2, #0]
 80093bc:	496c      	ldr	r1, [pc, #432]	; (8009570 <USB_ActivateEndpoint+0x368>)
 80093be:	430a      	orrs	r2, r1
 80093c0:	b292      	uxth	r2, r2
 80093c2:	801a      	strh	r2, [r3, #0]
 80093c4:	e27a      	b.n	80098bc <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	18d3      	adds	r3, r2, r3
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	200e      	movs	r0, #14
 80093d6:	183b      	adds	r3, r7, r0
 80093d8:	4968      	ldr	r1, [pc, #416]	; (800957c <USB_ActivateEndpoint+0x374>)
 80093da:	400a      	ands	r2, r1
 80093dc:	801a      	strh	r2, [r3, #0]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	18d3      	adds	r3, r2, r3
 80093e8:	183a      	adds	r2, r7, r0
 80093ea:	8812      	ldrh	r2, [r2, #0]
 80093ec:	4960      	ldr	r1, [pc, #384]	; (8009570 <USB_ActivateEndpoint+0x368>)
 80093ee:	430a      	orrs	r2, r1
 80093f0:	b292      	uxth	r2, r2
 80093f2:	801a      	strh	r2, [r3, #0]
 80093f4:	e262      	b.n	80098bc <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	633b      	str	r3, [r7, #48]	; 0x30
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2250      	movs	r2, #80	; 0x50
 80093fe:	5a9b      	ldrh	r3, [r3, r2]
 8009400:	b29b      	uxth	r3, r3
 8009402:	001a      	movs	r2, r3
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	189b      	adds	r3, r3, r2
 8009408:	633b      	str	r3, [r7, #48]	; 0x30
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	00da      	lsls	r2, r3, #3
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	18d3      	adds	r3, r2, r3
 8009414:	4a5a      	ldr	r2, [pc, #360]	; (8009580 <USB_ActivateEndpoint+0x378>)
 8009416:	4694      	mov	ip, r2
 8009418:	4463      	add	r3, ip
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	88db      	ldrh	r3, [r3, #6]
 8009420:	085b      	lsrs	r3, r3, #1
 8009422:	b29b      	uxth	r3, r3
 8009424:	18db      	adds	r3, r3, r3
 8009426:	b29a      	uxth	r2, r3
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2250      	movs	r2, #80	; 0x50
 8009434:	5a9b      	ldrh	r3, [r3, r2]
 8009436:	b29b      	uxth	r3, r3
 8009438:	001a      	movs	r2, r3
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	189b      	adds	r3, r3, r2
 800943e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	00da      	lsls	r2, r3, #3
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	18d3      	adds	r3, r2, r3
 800944a:	4a4e      	ldr	r2, [pc, #312]	; (8009584 <USB_ActivateEndpoint+0x37c>)
 800944c:	4694      	mov	ip, r2
 800944e:	4463      	add	r3, ip
 8009450:	627b      	str	r3, [r7, #36]	; 0x24
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d110      	bne.n	800947c <USB_ActivateEndpoint+0x274>
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	b29b      	uxth	r3, r3
 8009460:	4a49      	ldr	r2, [pc, #292]	; (8009588 <USB_ActivateEndpoint+0x380>)
 8009462:	4013      	ands	r3, r2
 8009464:	b29a      	uxth	r2, r3
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	801a      	strh	r2, [r3, #0]
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	b29b      	uxth	r3, r3
 8009470:	4a46      	ldr	r2, [pc, #280]	; (800958c <USB_ActivateEndpoint+0x384>)
 8009472:	4313      	orrs	r3, r2
 8009474:	b29a      	uxth	r2, r3
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	801a      	strh	r2, [r3, #0]
 800947a:	e02b      	b.n	80094d4 <USB_ActivateEndpoint+0x2cc>
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	2b3e      	cmp	r3, #62	; 0x3e
 8009482:	d812      	bhi.n	80094aa <USB_ActivateEndpoint+0x2a2>
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	085b      	lsrs	r3, r3, #1
 800948a:	66bb      	str	r3, [r7, #104]	; 0x68
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	2201      	movs	r2, #1
 8009492:	4013      	ands	r3, r2
 8009494:	d002      	beq.n	800949c <USB_ActivateEndpoint+0x294>
 8009496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009498:	3301      	adds	r3, #1
 800949a:	66bb      	str	r3, [r7, #104]	; 0x68
 800949c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800949e:	b29b      	uxth	r3, r3
 80094a0:	029b      	lsls	r3, r3, #10
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	801a      	strh	r2, [r3, #0]
 80094a8:	e014      	b.n	80094d4 <USB_ActivateEndpoint+0x2cc>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	095b      	lsrs	r3, r3, #5
 80094b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	221f      	movs	r2, #31
 80094b8:	4013      	ands	r3, r2
 80094ba:	d102      	bne.n	80094c2 <USB_ActivateEndpoint+0x2ba>
 80094bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094be:	3b01      	subs	r3, #1
 80094c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80094c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	029b      	lsls	r3, r3, #10
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	4a30      	ldr	r2, [pc, #192]	; (800958c <USB_ActivateEndpoint+0x384>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	18d2      	adds	r2, r2, r3
 80094de:	2122      	movs	r1, #34	; 0x22
 80094e0:	187b      	adds	r3, r7, r1
 80094e2:	8812      	ldrh	r2, [r2, #0]
 80094e4:	801a      	strh	r2, [r3, #0]
 80094e6:	187b      	adds	r3, r7, r1
 80094e8:	881a      	ldrh	r2, [r3, #0]
 80094ea:	2380      	movs	r3, #128	; 0x80
 80094ec:	01db      	lsls	r3, r3, #7
 80094ee:	4013      	ands	r3, r2
 80094f0:	d016      	beq.n	8009520 <USB_ActivateEndpoint+0x318>
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	18d3      	adds	r3, r2, r3
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	b29a      	uxth	r2, r3
 8009500:	2020      	movs	r0, #32
 8009502:	183b      	adds	r3, r7, r0
 8009504:	491b      	ldr	r1, [pc, #108]	; (8009574 <USB_ActivateEndpoint+0x36c>)
 8009506:	400a      	ands	r2, r1
 8009508:	801a      	strh	r2, [r3, #0]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	18d3      	adds	r3, r2, r3
 8009514:	183a      	adds	r2, r7, r0
 8009516:	8812      	ldrh	r2, [r2, #0]
 8009518:	491d      	ldr	r1, [pc, #116]	; (8009590 <USB_ActivateEndpoint+0x388>)
 800951a:	430a      	orrs	r2, r1
 800951c:	b292      	uxth	r2, r2
 800951e:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	18d3      	adds	r3, r2, r3
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	b29a      	uxth	r2, r3
 800952e:	201e      	movs	r0, #30
 8009530:	183b      	adds	r3, r7, r0
 8009532:	4918      	ldr	r1, [pc, #96]	; (8009594 <USB_ActivateEndpoint+0x38c>)
 8009534:	400a      	ands	r2, r1
 8009536:	801a      	strh	r2, [r3, #0]
 8009538:	183b      	adds	r3, r7, r0
 800953a:	183a      	adds	r2, r7, r0
 800953c:	8812      	ldrh	r2, [r2, #0]
 800953e:	2180      	movs	r1, #128	; 0x80
 8009540:	0149      	lsls	r1, r1, #5
 8009542:	404a      	eors	r2, r1
 8009544:	801a      	strh	r2, [r3, #0]
 8009546:	183b      	adds	r3, r7, r0
 8009548:	183a      	adds	r2, r7, r0
 800954a:	8812      	ldrh	r2, [r2, #0]
 800954c:	2180      	movs	r1, #128	; 0x80
 800954e:	0189      	lsls	r1, r1, #6
 8009550:	404a      	eors	r2, r1
 8009552:	801a      	strh	r2, [r3, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	18d3      	adds	r3, r2, r3
 800955e:	183a      	adds	r2, r7, r0
 8009560:	8812      	ldrh	r2, [r2, #0]
 8009562:	4903      	ldr	r1, [pc, #12]	; (8009570 <USB_ActivateEndpoint+0x368>)
 8009564:	430a      	orrs	r2, r1
 8009566:	b292      	uxth	r2, r2
 8009568:	801a      	strh	r2, [r3, #0]
 800956a:	e1a7      	b.n	80098bc <USB_ActivateEndpoint+0x6b4>
 800956c:	ffff898f 	.word	0xffff898f
 8009570:	ffff8080 	.word	0xffff8080
 8009574:	ffff8f8f 	.word	0xffff8f8f
 8009578:	ffff80c0 	.word	0xffff80c0
 800957c:	ffff8fbf 	.word	0xffff8fbf
 8009580:	00000404 	.word	0x00000404
 8009584:	00000406 	.word	0x00000406
 8009588:	ffff83ff 	.word	0xffff83ff
 800958c:	ffff8000 	.word	0xffff8000
 8009590:	ffffc080 	.word	0xffffc080
 8009594:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	78db      	ldrb	r3, [r3, #3]
 800959c:	2b02      	cmp	r3, #2
 800959e:	d117      	bne.n	80095d0 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	18d3      	adds	r3, r2, r3
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	2062      	movs	r0, #98	; 0x62
 80095b0:	183b      	adds	r3, r7, r0
 80095b2:	49c6      	ldr	r1, [pc, #792]	; (80098cc <USB_ActivateEndpoint+0x6c4>)
 80095b4:	400a      	ands	r2, r1
 80095b6:	801a      	strh	r2, [r3, #0]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	18d3      	adds	r3, r2, r3
 80095c2:	183a      	adds	r2, r7, r0
 80095c4:	8812      	ldrh	r2, [r2, #0]
 80095c6:	49c2      	ldr	r1, [pc, #776]	; (80098d0 <USB_ActivateEndpoint+0x6c8>)
 80095c8:	430a      	orrs	r2, r1
 80095ca:	b292      	uxth	r2, r2
 80095cc:	801a      	strh	r2, [r3, #0]
 80095ce:	e016      	b.n	80095fe <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	18d3      	adds	r3, r2, r3
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	b29a      	uxth	r2, r3
 80095de:	2064      	movs	r0, #100	; 0x64
 80095e0:	183b      	adds	r3, r7, r0
 80095e2:	49bc      	ldr	r1, [pc, #752]	; (80098d4 <USB_ActivateEndpoint+0x6cc>)
 80095e4:	400a      	ands	r2, r1
 80095e6:	801a      	strh	r2, [r3, #0]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	18d3      	adds	r3, r2, r3
 80095f2:	183a      	adds	r2, r7, r0
 80095f4:	8812      	ldrh	r2, [r2, #0]
 80095f6:	49b8      	ldr	r1, [pc, #736]	; (80098d8 <USB_ActivateEndpoint+0x6d0>)
 80095f8:	430a      	orrs	r2, r1
 80095fa:	b292      	uxth	r2, r2
 80095fc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2250      	movs	r2, #80	; 0x50
 8009606:	5a9b      	ldrh	r3, [r3, r2]
 8009608:	b29b      	uxth	r3, r3
 800960a:	001a      	movs	r2, r3
 800960c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800960e:	189b      	adds	r3, r3, r2
 8009610:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	00da      	lsls	r2, r3, #3
 8009618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800961a:	18d3      	adds	r3, r2, r3
 800961c:	2280      	movs	r2, #128	; 0x80
 800961e:	00d2      	lsls	r2, r2, #3
 8009620:	4694      	mov	ip, r2
 8009622:	4463      	add	r3, ip
 8009624:	65bb      	str	r3, [r7, #88]	; 0x58
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	891b      	ldrh	r3, [r3, #8]
 800962a:	085b      	lsrs	r3, r3, #1
 800962c:	b29b      	uxth	r3, r3
 800962e:	18db      	adds	r3, r3, r3
 8009630:	b29a      	uxth	r2, r3
 8009632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009634:	801a      	strh	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	657b      	str	r3, [r7, #84]	; 0x54
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2250      	movs	r2, #80	; 0x50
 800963e:	5a9b      	ldrh	r3, [r3, r2]
 8009640:	b29b      	uxth	r3, r3
 8009642:	001a      	movs	r2, r3
 8009644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009646:	189b      	adds	r3, r3, r2
 8009648:	657b      	str	r3, [r7, #84]	; 0x54
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	00da      	lsls	r2, r3, #3
 8009650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009652:	18d3      	adds	r3, r2, r3
 8009654:	4aa1      	ldr	r2, [pc, #644]	; (80098dc <USB_ActivateEndpoint+0x6d4>)
 8009656:	4694      	mov	ip, r2
 8009658:	4463      	add	r3, ip
 800965a:	653b      	str	r3, [r7, #80]	; 0x50
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	895b      	ldrh	r3, [r3, #10]
 8009660:	085b      	lsrs	r3, r3, #1
 8009662:	b29b      	uxth	r3, r3
 8009664:	18db      	adds	r3, r3, r3
 8009666:	b29a      	uxth	r2, r3
 8009668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800966a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	785b      	ldrb	r3, [r3, #1]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d000      	beq.n	8009676 <USB_ActivateEndpoint+0x46e>
 8009674:	e087      	b.n	8009786 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	18d2      	adds	r2, r2, r3
 8009680:	2140      	movs	r1, #64	; 0x40
 8009682:	187b      	adds	r3, r7, r1
 8009684:	8812      	ldrh	r2, [r2, #0]
 8009686:	801a      	strh	r2, [r3, #0]
 8009688:	187b      	adds	r3, r7, r1
 800968a:	881a      	ldrh	r2, [r3, #0]
 800968c:	2380      	movs	r3, #128	; 0x80
 800968e:	01db      	lsls	r3, r3, #7
 8009690:	4013      	ands	r3, r2
 8009692:	d016      	beq.n	80096c2 <USB_ActivateEndpoint+0x4ba>
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	18d3      	adds	r3, r2, r3
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	203e      	movs	r0, #62	; 0x3e
 80096a4:	183b      	adds	r3, r7, r0
 80096a6:	4989      	ldr	r1, [pc, #548]	; (80098cc <USB_ActivateEndpoint+0x6c4>)
 80096a8:	400a      	ands	r2, r1
 80096aa:	801a      	strh	r2, [r3, #0]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	18d3      	adds	r3, r2, r3
 80096b6:	183a      	adds	r2, r7, r0
 80096b8:	8812      	ldrh	r2, [r2, #0]
 80096ba:	4989      	ldr	r1, [pc, #548]	; (80098e0 <USB_ActivateEndpoint+0x6d8>)
 80096bc:	430a      	orrs	r2, r1
 80096be:	b292      	uxth	r2, r2
 80096c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	18d2      	adds	r2, r2, r3
 80096cc:	213c      	movs	r1, #60	; 0x3c
 80096ce:	187b      	adds	r3, r7, r1
 80096d0:	8812      	ldrh	r2, [r2, #0]
 80096d2:	801a      	strh	r2, [r3, #0]
 80096d4:	187b      	adds	r3, r7, r1
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	2240      	movs	r2, #64	; 0x40
 80096da:	4013      	ands	r3, r2
 80096dc:	d016      	beq.n	800970c <USB_ActivateEndpoint+0x504>
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	18d3      	adds	r3, r2, r3
 80096e8:	881b      	ldrh	r3, [r3, #0]
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	203a      	movs	r0, #58	; 0x3a
 80096ee:	183b      	adds	r3, r7, r0
 80096f0:	4976      	ldr	r1, [pc, #472]	; (80098cc <USB_ActivateEndpoint+0x6c4>)
 80096f2:	400a      	ands	r2, r1
 80096f4:	801a      	strh	r2, [r3, #0]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	18d3      	adds	r3, r2, r3
 8009700:	183a      	adds	r2, r7, r0
 8009702:	8812      	ldrh	r2, [r2, #0]
 8009704:	4977      	ldr	r1, [pc, #476]	; (80098e4 <USB_ActivateEndpoint+0x6dc>)
 8009706:	430a      	orrs	r2, r1
 8009708:	b292      	uxth	r2, r2
 800970a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	18d3      	adds	r3, r2, r3
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	b29a      	uxth	r2, r3
 800971a:	2038      	movs	r0, #56	; 0x38
 800971c:	183b      	adds	r3, r7, r0
 800971e:	4972      	ldr	r1, [pc, #456]	; (80098e8 <USB_ActivateEndpoint+0x6e0>)
 8009720:	400a      	ands	r2, r1
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	183b      	adds	r3, r7, r0
 8009726:	183a      	adds	r2, r7, r0
 8009728:	8812      	ldrh	r2, [r2, #0]
 800972a:	2180      	movs	r1, #128	; 0x80
 800972c:	0149      	lsls	r1, r1, #5
 800972e:	404a      	eors	r2, r1
 8009730:	801a      	strh	r2, [r3, #0]
 8009732:	183b      	adds	r3, r7, r0
 8009734:	183a      	adds	r2, r7, r0
 8009736:	8812      	ldrh	r2, [r2, #0]
 8009738:	2180      	movs	r1, #128	; 0x80
 800973a:	0189      	lsls	r1, r1, #6
 800973c:	404a      	eors	r2, r1
 800973e:	801a      	strh	r2, [r3, #0]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	18d3      	adds	r3, r2, r3
 800974a:	183a      	adds	r2, r7, r0
 800974c:	8812      	ldrh	r2, [r2, #0]
 800974e:	4962      	ldr	r1, [pc, #392]	; (80098d8 <USB_ActivateEndpoint+0x6d0>)
 8009750:	430a      	orrs	r2, r1
 8009752:	b292      	uxth	r2, r2
 8009754:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	18d3      	adds	r3, r2, r3
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	b29a      	uxth	r2, r3
 8009764:	2036      	movs	r0, #54	; 0x36
 8009766:	183b      	adds	r3, r7, r0
 8009768:	4960      	ldr	r1, [pc, #384]	; (80098ec <USB_ActivateEndpoint+0x6e4>)
 800976a:	400a      	ands	r2, r1
 800976c:	801a      	strh	r2, [r3, #0]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	18d3      	adds	r3, r2, r3
 8009778:	183a      	adds	r2, r7, r0
 800977a:	8812      	ldrh	r2, [r2, #0]
 800977c:	4956      	ldr	r1, [pc, #344]	; (80098d8 <USB_ActivateEndpoint+0x6d0>)
 800977e:	430a      	orrs	r2, r1
 8009780:	b292      	uxth	r2, r2
 8009782:	801a      	strh	r2, [r3, #0]
 8009784:	e09a      	b.n	80098bc <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	18d2      	adds	r2, r2, r3
 8009790:	214e      	movs	r1, #78	; 0x4e
 8009792:	187b      	adds	r3, r7, r1
 8009794:	8812      	ldrh	r2, [r2, #0]
 8009796:	801a      	strh	r2, [r3, #0]
 8009798:	187b      	adds	r3, r7, r1
 800979a:	881a      	ldrh	r2, [r3, #0]
 800979c:	2380      	movs	r3, #128	; 0x80
 800979e:	01db      	lsls	r3, r3, #7
 80097a0:	4013      	ands	r3, r2
 80097a2:	d016      	beq.n	80097d2 <USB_ActivateEndpoint+0x5ca>
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	18d3      	adds	r3, r2, r3
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	204c      	movs	r0, #76	; 0x4c
 80097b4:	183b      	adds	r3, r7, r0
 80097b6:	4945      	ldr	r1, [pc, #276]	; (80098cc <USB_ActivateEndpoint+0x6c4>)
 80097b8:	400a      	ands	r2, r1
 80097ba:	801a      	strh	r2, [r3, #0]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	18d3      	adds	r3, r2, r3
 80097c6:	183a      	adds	r2, r7, r0
 80097c8:	8812      	ldrh	r2, [r2, #0]
 80097ca:	4945      	ldr	r1, [pc, #276]	; (80098e0 <USB_ActivateEndpoint+0x6d8>)
 80097cc:	430a      	orrs	r2, r1
 80097ce:	b292      	uxth	r2, r2
 80097d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	18d2      	adds	r2, r2, r3
 80097dc:	214a      	movs	r1, #74	; 0x4a
 80097de:	187b      	adds	r3, r7, r1
 80097e0:	8812      	ldrh	r2, [r2, #0]
 80097e2:	801a      	strh	r2, [r3, #0]
 80097e4:	187b      	adds	r3, r7, r1
 80097e6:	881b      	ldrh	r3, [r3, #0]
 80097e8:	2240      	movs	r2, #64	; 0x40
 80097ea:	4013      	ands	r3, r2
 80097ec:	d016      	beq.n	800981c <USB_ActivateEndpoint+0x614>
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	18d3      	adds	r3, r2, r3
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	2048      	movs	r0, #72	; 0x48
 80097fe:	183b      	adds	r3, r7, r0
 8009800:	4932      	ldr	r1, [pc, #200]	; (80098cc <USB_ActivateEndpoint+0x6c4>)
 8009802:	400a      	ands	r2, r1
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	18d3      	adds	r3, r2, r3
 8009810:	183a      	adds	r2, r7, r0
 8009812:	8812      	ldrh	r2, [r2, #0]
 8009814:	4933      	ldr	r1, [pc, #204]	; (80098e4 <USB_ActivateEndpoint+0x6dc>)
 8009816:	430a      	orrs	r2, r1
 8009818:	b292      	uxth	r2, r2
 800981a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	78db      	ldrb	r3, [r3, #3]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d01d      	beq.n	8009860 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	18d3      	adds	r3, r2, r3
 800982e:	881b      	ldrh	r3, [r3, #0]
 8009830:	b29a      	uxth	r2, r3
 8009832:	2044      	movs	r0, #68	; 0x44
 8009834:	183b      	adds	r3, r7, r0
 8009836:	492d      	ldr	r1, [pc, #180]	; (80098ec <USB_ActivateEndpoint+0x6e4>)
 8009838:	400a      	ands	r2, r1
 800983a:	801a      	strh	r2, [r3, #0]
 800983c:	183b      	adds	r3, r7, r0
 800983e:	183a      	adds	r2, r7, r0
 8009840:	8812      	ldrh	r2, [r2, #0]
 8009842:	2120      	movs	r1, #32
 8009844:	404a      	eors	r2, r1
 8009846:	801a      	strh	r2, [r3, #0]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	18d3      	adds	r3, r2, r3
 8009852:	183a      	adds	r2, r7, r0
 8009854:	8812      	ldrh	r2, [r2, #0]
 8009856:	4920      	ldr	r1, [pc, #128]	; (80098d8 <USB_ActivateEndpoint+0x6d0>)
 8009858:	430a      	orrs	r2, r1
 800985a:	b292      	uxth	r2, r2
 800985c:	801a      	strh	r2, [r3, #0]
 800985e:	e016      	b.n	800988e <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	18d3      	adds	r3, r2, r3
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	b29a      	uxth	r2, r3
 800986e:	2046      	movs	r0, #70	; 0x46
 8009870:	183b      	adds	r3, r7, r0
 8009872:	491e      	ldr	r1, [pc, #120]	; (80098ec <USB_ActivateEndpoint+0x6e4>)
 8009874:	400a      	ands	r2, r1
 8009876:	801a      	strh	r2, [r3, #0]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	18d3      	adds	r3, r2, r3
 8009882:	183a      	adds	r2, r7, r0
 8009884:	8812      	ldrh	r2, [r2, #0]
 8009886:	4914      	ldr	r1, [pc, #80]	; (80098d8 <USB_ActivateEndpoint+0x6d0>)
 8009888:	430a      	orrs	r2, r1
 800988a:	b292      	uxth	r2, r2
 800988c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	18d3      	adds	r3, r2, r3
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	b29a      	uxth	r2, r3
 800989c:	2042      	movs	r0, #66	; 0x42
 800989e:	183b      	adds	r3, r7, r0
 80098a0:	4911      	ldr	r1, [pc, #68]	; (80098e8 <USB_ActivateEndpoint+0x6e0>)
 80098a2:	400a      	ands	r2, r1
 80098a4:	801a      	strh	r2, [r3, #0]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	18d3      	adds	r3, r2, r3
 80098b0:	183a      	adds	r2, r7, r0
 80098b2:	8812      	ldrh	r2, [r2, #0]
 80098b4:	4908      	ldr	r1, [pc, #32]	; (80098d8 <USB_ActivateEndpoint+0x6d0>)
 80098b6:	430a      	orrs	r2, r1
 80098b8:	b292      	uxth	r2, r2
 80098ba:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80098bc:	236f      	movs	r3, #111	; 0x6f
 80098be:	18fb      	adds	r3, r7, r3
 80098c0:	781b      	ldrb	r3, [r3, #0]
}
 80098c2:	0018      	movs	r0, r3
 80098c4:	46bd      	mov	sp, r7
 80098c6:	b01c      	add	sp, #112	; 0x70
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	46c0      	nop			; (mov r8, r8)
 80098cc:	ffff8f8f 	.word	0xffff8f8f
 80098d0:	ffff8180 	.word	0xffff8180
 80098d4:	ffff8e8f 	.word	0xffff8e8f
 80098d8:	ffff8080 	.word	0xffff8080
 80098dc:	00000404 	.word	0x00000404
 80098e0:	ffffc080 	.word	0xffffc080
 80098e4:	ffff80c0 	.word	0xffff80c0
 80098e8:	ffffbf8f 	.word	0xffffbf8f
 80098ec:	ffff8fbf 	.word	0xffff8fbf

080098f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08c      	sub	sp, #48	; 0x30
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	7b1b      	ldrb	r3, [r3, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d000      	beq.n	8009904 <USB_DeactivateEndpoint+0x14>
 8009902:	e07e      	b.n	8009a02 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	785b      	ldrb	r3, [r3, #1]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d03c      	beq.n	8009986 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	18d2      	adds	r2, r2, r3
 8009916:	210c      	movs	r1, #12
 8009918:	187b      	adds	r3, r7, r1
 800991a:	8812      	ldrh	r2, [r2, #0]
 800991c:	801a      	strh	r2, [r3, #0]
 800991e:	187b      	adds	r3, r7, r1
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	2240      	movs	r2, #64	; 0x40
 8009924:	4013      	ands	r3, r2
 8009926:	d016      	beq.n	8009956 <USB_DeactivateEndpoint+0x66>
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	18d3      	adds	r3, r2, r3
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29a      	uxth	r2, r3
 8009936:	200a      	movs	r0, #10
 8009938:	183b      	adds	r3, r7, r0
 800993a:	49c7      	ldr	r1, [pc, #796]	; (8009c58 <USB_DeactivateEndpoint+0x368>)
 800993c:	400a      	ands	r2, r1
 800993e:	801a      	strh	r2, [r3, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	18d3      	adds	r3, r2, r3
 800994a:	183a      	adds	r2, r7, r0
 800994c:	8812      	ldrh	r2, [r2, #0]
 800994e:	49c3      	ldr	r1, [pc, #780]	; (8009c5c <USB_DeactivateEndpoint+0x36c>)
 8009950:	430a      	orrs	r2, r1
 8009952:	b292      	uxth	r2, r2
 8009954:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	18d3      	adds	r3, r2, r3
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	b29a      	uxth	r2, r3
 8009964:	2008      	movs	r0, #8
 8009966:	183b      	adds	r3, r7, r0
 8009968:	49bd      	ldr	r1, [pc, #756]	; (8009c60 <USB_DeactivateEndpoint+0x370>)
 800996a:	400a      	ands	r2, r1
 800996c:	801a      	strh	r2, [r3, #0]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	18d3      	adds	r3, r2, r3
 8009978:	183a      	adds	r2, r7, r0
 800997a:	8812      	ldrh	r2, [r2, #0]
 800997c:	49b9      	ldr	r1, [pc, #740]	; (8009c64 <USB_DeactivateEndpoint+0x374>)
 800997e:	430a      	orrs	r2, r1
 8009980:	b292      	uxth	r2, r2
 8009982:	801a      	strh	r2, [r3, #0]
 8009984:	e163      	b.n	8009c4e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	18d2      	adds	r2, r2, r3
 8009990:	2112      	movs	r1, #18
 8009992:	187b      	adds	r3, r7, r1
 8009994:	8812      	ldrh	r2, [r2, #0]
 8009996:	801a      	strh	r2, [r3, #0]
 8009998:	187b      	adds	r3, r7, r1
 800999a:	881a      	ldrh	r2, [r3, #0]
 800999c:	2380      	movs	r3, #128	; 0x80
 800999e:	01db      	lsls	r3, r3, #7
 80099a0:	4013      	ands	r3, r2
 80099a2:	d016      	beq.n	80099d2 <USB_DeactivateEndpoint+0xe2>
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	18d3      	adds	r3, r2, r3
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	2010      	movs	r0, #16
 80099b4:	183b      	adds	r3, r7, r0
 80099b6:	49a8      	ldr	r1, [pc, #672]	; (8009c58 <USB_DeactivateEndpoint+0x368>)
 80099b8:	400a      	ands	r2, r1
 80099ba:	801a      	strh	r2, [r3, #0]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	18d3      	adds	r3, r2, r3
 80099c6:	183a      	adds	r2, r7, r0
 80099c8:	8812      	ldrh	r2, [r2, #0]
 80099ca:	49a7      	ldr	r1, [pc, #668]	; (8009c68 <USB_DeactivateEndpoint+0x378>)
 80099cc:	430a      	orrs	r2, r1
 80099ce:	b292      	uxth	r2, r2
 80099d0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	18d3      	adds	r3, r2, r3
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	b29a      	uxth	r2, r3
 80099e0:	200e      	movs	r0, #14
 80099e2:	183b      	adds	r3, r7, r0
 80099e4:	49a1      	ldr	r1, [pc, #644]	; (8009c6c <USB_DeactivateEndpoint+0x37c>)
 80099e6:	400a      	ands	r2, r1
 80099e8:	801a      	strh	r2, [r3, #0]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	18d3      	adds	r3, r2, r3
 80099f4:	183a      	adds	r2, r7, r0
 80099f6:	8812      	ldrh	r2, [r2, #0]
 80099f8:	499a      	ldr	r1, [pc, #616]	; (8009c64 <USB_DeactivateEndpoint+0x374>)
 80099fa:	430a      	orrs	r2, r1
 80099fc:	b292      	uxth	r2, r2
 80099fe:	801a      	strh	r2, [r3, #0]
 8009a00:	e125      	b.n	8009c4e <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d000      	beq.n	8009a0c <USB_DeactivateEndpoint+0x11c>
 8009a0a:	e090      	b.n	8009b2e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	18d2      	adds	r2, r2, r3
 8009a16:	2120      	movs	r1, #32
 8009a18:	187b      	adds	r3, r7, r1
 8009a1a:	8812      	ldrh	r2, [r2, #0]
 8009a1c:	801a      	strh	r2, [r3, #0]
 8009a1e:	187b      	adds	r3, r7, r1
 8009a20:	881a      	ldrh	r2, [r3, #0]
 8009a22:	2380      	movs	r3, #128	; 0x80
 8009a24:	01db      	lsls	r3, r3, #7
 8009a26:	4013      	ands	r3, r2
 8009a28:	d016      	beq.n	8009a58 <USB_DeactivateEndpoint+0x168>
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	18d3      	adds	r3, r2, r3
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	201e      	movs	r0, #30
 8009a3a:	183b      	adds	r3, r7, r0
 8009a3c:	4986      	ldr	r1, [pc, #536]	; (8009c58 <USB_DeactivateEndpoint+0x368>)
 8009a3e:	400a      	ands	r2, r1
 8009a40:	801a      	strh	r2, [r3, #0]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	18d3      	adds	r3, r2, r3
 8009a4c:	183a      	adds	r2, r7, r0
 8009a4e:	8812      	ldrh	r2, [r2, #0]
 8009a50:	4985      	ldr	r1, [pc, #532]	; (8009c68 <USB_DeactivateEndpoint+0x378>)
 8009a52:	430a      	orrs	r2, r1
 8009a54:	b292      	uxth	r2, r2
 8009a56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	18d2      	adds	r2, r2, r3
 8009a62:	211c      	movs	r1, #28
 8009a64:	187b      	adds	r3, r7, r1
 8009a66:	8812      	ldrh	r2, [r2, #0]
 8009a68:	801a      	strh	r2, [r3, #0]
 8009a6a:	187b      	adds	r3, r7, r1
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	2240      	movs	r2, #64	; 0x40
 8009a70:	4013      	ands	r3, r2
 8009a72:	d016      	beq.n	8009aa2 <USB_DeactivateEndpoint+0x1b2>
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	18d3      	adds	r3, r2, r3
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	201a      	movs	r0, #26
 8009a84:	183b      	adds	r3, r7, r0
 8009a86:	4974      	ldr	r1, [pc, #464]	; (8009c58 <USB_DeactivateEndpoint+0x368>)
 8009a88:	400a      	ands	r2, r1
 8009a8a:	801a      	strh	r2, [r3, #0]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	18d3      	adds	r3, r2, r3
 8009a96:	183a      	adds	r2, r7, r0
 8009a98:	8812      	ldrh	r2, [r2, #0]
 8009a9a:	4970      	ldr	r1, [pc, #448]	; (8009c5c <USB_DeactivateEndpoint+0x36c>)
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	b292      	uxth	r2, r2
 8009aa0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	18d3      	adds	r3, r2, r3
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	2018      	movs	r0, #24
 8009ab2:	183b      	adds	r3, r7, r0
 8009ab4:	4968      	ldr	r1, [pc, #416]	; (8009c58 <USB_DeactivateEndpoint+0x368>)
 8009ab6:	400a      	ands	r2, r1
 8009ab8:	801a      	strh	r2, [r3, #0]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	18d3      	adds	r3, r2, r3
 8009ac4:	183a      	adds	r2, r7, r0
 8009ac6:	8812      	ldrh	r2, [r2, #0]
 8009ac8:	4964      	ldr	r1, [pc, #400]	; (8009c5c <USB_DeactivateEndpoint+0x36c>)
 8009aca:	430a      	orrs	r2, r1
 8009acc:	b292      	uxth	r2, r2
 8009ace:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	18d3      	adds	r3, r2, r3
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	2016      	movs	r0, #22
 8009ae0:	183b      	adds	r3, r7, r0
 8009ae2:	4962      	ldr	r1, [pc, #392]	; (8009c6c <USB_DeactivateEndpoint+0x37c>)
 8009ae4:	400a      	ands	r2, r1
 8009ae6:	801a      	strh	r2, [r3, #0]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	18d3      	adds	r3, r2, r3
 8009af2:	183a      	adds	r2, r7, r0
 8009af4:	8812      	ldrh	r2, [r2, #0]
 8009af6:	495b      	ldr	r1, [pc, #364]	; (8009c64 <USB_DeactivateEndpoint+0x374>)
 8009af8:	430a      	orrs	r2, r1
 8009afa:	b292      	uxth	r2, r2
 8009afc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	18d3      	adds	r3, r2, r3
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	2014      	movs	r0, #20
 8009b0e:	183b      	adds	r3, r7, r0
 8009b10:	4953      	ldr	r1, [pc, #332]	; (8009c60 <USB_DeactivateEndpoint+0x370>)
 8009b12:	400a      	ands	r2, r1
 8009b14:	801a      	strh	r2, [r3, #0]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	18d3      	adds	r3, r2, r3
 8009b20:	183a      	adds	r2, r7, r0
 8009b22:	8812      	ldrh	r2, [r2, #0]
 8009b24:	494f      	ldr	r1, [pc, #316]	; (8009c64 <USB_DeactivateEndpoint+0x374>)
 8009b26:	430a      	orrs	r2, r1
 8009b28:	b292      	uxth	r2, r2
 8009b2a:	801a      	strh	r2, [r3, #0]
 8009b2c:	e08f      	b.n	8009c4e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	18d2      	adds	r2, r2, r3
 8009b38:	212e      	movs	r1, #46	; 0x2e
 8009b3a:	187b      	adds	r3, r7, r1
 8009b3c:	8812      	ldrh	r2, [r2, #0]
 8009b3e:	801a      	strh	r2, [r3, #0]
 8009b40:	187b      	adds	r3, r7, r1
 8009b42:	881a      	ldrh	r2, [r3, #0]
 8009b44:	2380      	movs	r3, #128	; 0x80
 8009b46:	01db      	lsls	r3, r3, #7
 8009b48:	4013      	ands	r3, r2
 8009b4a:	d016      	beq.n	8009b7a <USB_DeactivateEndpoint+0x28a>
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	18d3      	adds	r3, r2, r3
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	202c      	movs	r0, #44	; 0x2c
 8009b5c:	183b      	adds	r3, r7, r0
 8009b5e:	493e      	ldr	r1, [pc, #248]	; (8009c58 <USB_DeactivateEndpoint+0x368>)
 8009b60:	400a      	ands	r2, r1
 8009b62:	801a      	strh	r2, [r3, #0]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	18d3      	adds	r3, r2, r3
 8009b6e:	183a      	adds	r2, r7, r0
 8009b70:	8812      	ldrh	r2, [r2, #0]
 8009b72:	493d      	ldr	r1, [pc, #244]	; (8009c68 <USB_DeactivateEndpoint+0x378>)
 8009b74:	430a      	orrs	r2, r1
 8009b76:	b292      	uxth	r2, r2
 8009b78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	18d2      	adds	r2, r2, r3
 8009b84:	212a      	movs	r1, #42	; 0x2a
 8009b86:	187b      	adds	r3, r7, r1
 8009b88:	8812      	ldrh	r2, [r2, #0]
 8009b8a:	801a      	strh	r2, [r3, #0]
 8009b8c:	187b      	adds	r3, r7, r1
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	2240      	movs	r2, #64	; 0x40
 8009b92:	4013      	ands	r3, r2
 8009b94:	d016      	beq.n	8009bc4 <USB_DeactivateEndpoint+0x2d4>
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	18d3      	adds	r3, r2, r3
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	2028      	movs	r0, #40	; 0x28
 8009ba6:	183b      	adds	r3, r7, r0
 8009ba8:	492b      	ldr	r1, [pc, #172]	; (8009c58 <USB_DeactivateEndpoint+0x368>)
 8009baa:	400a      	ands	r2, r1
 8009bac:	801a      	strh	r2, [r3, #0]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	18d3      	adds	r3, r2, r3
 8009bb8:	183a      	adds	r2, r7, r0
 8009bba:	8812      	ldrh	r2, [r2, #0]
 8009bbc:	4927      	ldr	r1, [pc, #156]	; (8009c5c <USB_DeactivateEndpoint+0x36c>)
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	b292      	uxth	r2, r2
 8009bc2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	18d3      	adds	r3, r2, r3
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	2026      	movs	r0, #38	; 0x26
 8009bd4:	183b      	adds	r3, r7, r0
 8009bd6:	4920      	ldr	r1, [pc, #128]	; (8009c58 <USB_DeactivateEndpoint+0x368>)
 8009bd8:	400a      	ands	r2, r1
 8009bda:	801a      	strh	r2, [r3, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	18d3      	adds	r3, r2, r3
 8009be6:	183a      	adds	r2, r7, r0
 8009be8:	8812      	ldrh	r2, [r2, #0]
 8009bea:	491f      	ldr	r1, [pc, #124]	; (8009c68 <USB_DeactivateEndpoint+0x378>)
 8009bec:	430a      	orrs	r2, r1
 8009bee:	b292      	uxth	r2, r2
 8009bf0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	18d3      	adds	r3, r2, r3
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	2024      	movs	r0, #36	; 0x24
 8009c02:	183b      	adds	r3, r7, r0
 8009c04:	4916      	ldr	r1, [pc, #88]	; (8009c60 <USB_DeactivateEndpoint+0x370>)
 8009c06:	400a      	ands	r2, r1
 8009c08:	801a      	strh	r2, [r3, #0]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	18d3      	adds	r3, r2, r3
 8009c14:	183a      	adds	r2, r7, r0
 8009c16:	8812      	ldrh	r2, [r2, #0]
 8009c18:	4912      	ldr	r1, [pc, #72]	; (8009c64 <USB_DeactivateEndpoint+0x374>)
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	b292      	uxth	r2, r2
 8009c1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	18d3      	adds	r3, r2, r3
 8009c2a:	881b      	ldrh	r3, [r3, #0]
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	2022      	movs	r0, #34	; 0x22
 8009c30:	183b      	adds	r3, r7, r0
 8009c32:	490e      	ldr	r1, [pc, #56]	; (8009c6c <USB_DeactivateEndpoint+0x37c>)
 8009c34:	400a      	ands	r2, r1
 8009c36:	801a      	strh	r2, [r3, #0]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	18d3      	adds	r3, r2, r3
 8009c42:	183a      	adds	r2, r7, r0
 8009c44:	8812      	ldrh	r2, [r2, #0]
 8009c46:	4907      	ldr	r1, [pc, #28]	; (8009c64 <USB_DeactivateEndpoint+0x374>)
 8009c48:	430a      	orrs	r2, r1
 8009c4a:	b292      	uxth	r2, r2
 8009c4c:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	0018      	movs	r0, r3
 8009c52:	46bd      	mov	sp, r7
 8009c54:	b00c      	add	sp, #48	; 0x30
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	ffff8f8f 	.word	0xffff8f8f
 8009c5c:	ffff80c0 	.word	0xffff80c0
 8009c60:	ffff8fbf 	.word	0xffff8fbf
 8009c64:	ffff8080 	.word	0xffff8080
 8009c68:	ffffc080 	.word	0xffffc080
 8009c6c:	ffffbf8f 	.word	0xffffbf8f

08009c70 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c70:	b590      	push	{r4, r7, lr}
 8009c72:	b0c3      	sub	sp, #268	; 0x10c
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d001      	beq.n	8009c86 <USB_EPStartXfer+0x16>
 8009c82:	f000 fcef 	bl	800a664 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	699a      	ldr	r2, [r3, #24]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d905      	bls.n	8009c9e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	1d7a      	adds	r2, r7, #5
 8009c98:	32ff      	adds	r2, #255	; 0xff
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	e004      	b.n	8009ca8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	1d7a      	adds	r2, r7, #5
 8009ca4:	32ff      	adds	r2, #255	; 0xff
 8009ca6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	7b1b      	ldrb	r3, [r3, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d125      	bne.n	8009cfc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	6959      	ldr	r1, [r3, #20]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	88da      	ldrh	r2, [r3, #6]
 8009cb8:	1d7b      	adds	r3, r7, #5
 8009cba:	33ff      	adds	r3, #255	; 0xff
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f001 f9c9 	bl	800b058 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	613b      	str	r3, [r7, #16]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2250      	movs	r2, #80	; 0x50
 8009cce:	5a9b      	ldrh	r3, [r3, r2]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	001a      	movs	r2, r3
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	189b      	adds	r3, r3, r2
 8009cd8:	613b      	str	r3, [r7, #16]
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	00da      	lsls	r2, r3, #3
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	18d3      	adds	r3, r2, r3
 8009ce4:	4acc      	ldr	r2, [pc, #816]	; (800a018 <USB_EPStartXfer+0x3a8>)
 8009ce6:	4694      	mov	ip, r2
 8009ce8:	4463      	add	r3, ip
 8009cea:	60fb      	str	r3, [r7, #12]
 8009cec:	1d7b      	adds	r3, r7, #5
 8009cee:	33ff      	adds	r3, #255	; 0xff
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	801a      	strh	r2, [r3, #0]
 8009cf8:	f000 fc8f 	bl	800a61a <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	78db      	ldrb	r3, [r3, #3]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d000      	beq.n	8009d06 <USB_EPStartXfer+0x96>
 8009d04:	e33a      	b.n	800a37c <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	6a1a      	ldr	r2, [r3, #32]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d800      	bhi.n	8009d14 <USB_EPStartXfer+0xa4>
 8009d12:	e2df      	b.n	800a2d4 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	18d3      	adds	r3, r2, r3
 8009d1e:	881b      	ldrh	r3, [r3, #0]
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	2056      	movs	r0, #86	; 0x56
 8009d24:	183b      	adds	r3, r7, r0
 8009d26:	49bd      	ldr	r1, [pc, #756]	; (800a01c <USB_EPStartXfer+0x3ac>)
 8009d28:	400a      	ands	r2, r1
 8009d2a:	801a      	strh	r2, [r3, #0]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	18d3      	adds	r3, r2, r3
 8009d36:	183a      	adds	r2, r7, r0
 8009d38:	8812      	ldrh	r2, [r2, #0]
 8009d3a:	49b9      	ldr	r1, [pc, #740]	; (800a020 <USB_EPStartXfer+0x3b0>)
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	b292      	uxth	r2, r2
 8009d40:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	6a1a      	ldr	r2, [r3, #32]
 8009d46:	1d7b      	adds	r3, r7, #5
 8009d48:	33ff      	adds	r3, #255	; 0xff
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	1ad2      	subs	r2, r2, r3
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	18d3      	adds	r3, r2, r3
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	001a      	movs	r2, r3
 8009d62:	2340      	movs	r3, #64	; 0x40
 8009d64:	4013      	ands	r3, r2
 8009d66:	d100      	bne.n	8009d6a <USB_EPStartXfer+0xfa>
 8009d68:	e162      	b.n	800a030 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	785b      	ldrb	r3, [r3, #1]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d16a      	bne.n	8009e4c <USB_EPStartXfer+0x1dc>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2250      	movs	r2, #80	; 0x50
 8009d7e:	5a9b      	ldrh	r3, [r3, r2]
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	001a      	movs	r2, r3
 8009d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d86:	189b      	adds	r3, r3, r2
 8009d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	00da      	lsls	r2, r3, #3
 8009d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d92:	18d3      	adds	r3, r2, r3
 8009d94:	4aa3      	ldr	r2, [pc, #652]	; (800a024 <USB_EPStartXfer+0x3b4>)
 8009d96:	4694      	mov	ip, r2
 8009d98:	4463      	add	r3, ip
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d9c:	1d7b      	adds	r3, r7, #5
 8009d9e:	33ff      	adds	r3, #255	; 0xff
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d110      	bne.n	8009dc8 <USB_EPStartXfer+0x158>
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	881b      	ldrh	r3, [r3, #0]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	4a9e      	ldr	r2, [pc, #632]	; (800a028 <USB_EPStartXfer+0x3b8>)
 8009dae:	4013      	ands	r3, r2
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db4:	801a      	strh	r2, [r3, #0]
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	4a9b      	ldr	r2, [pc, #620]	; (800a02c <USB_EPStartXfer+0x3bc>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc4:	801a      	strh	r2, [r3, #0]
 8009dc6:	e05c      	b.n	8009e82 <USB_EPStartXfer+0x212>
 8009dc8:	1d7b      	adds	r3, r7, #5
 8009dca:	33ff      	adds	r3, #255	; 0xff
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b3e      	cmp	r3, #62	; 0x3e
 8009dd0:	d81c      	bhi.n	8009e0c <USB_EPStartXfer+0x19c>
 8009dd2:	1d7b      	adds	r3, r7, #5
 8009dd4:	33ff      	adds	r3, #255	; 0xff
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	085b      	lsrs	r3, r3, #1
 8009dda:	1c7a      	adds	r2, r7, #1
 8009ddc:	32ff      	adds	r2, #255	; 0xff
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	1d7b      	adds	r3, r7, #5
 8009de2:	33ff      	adds	r3, #255	; 0xff
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2201      	movs	r2, #1
 8009de8:	4013      	ands	r3, r2
 8009dea:	d006      	beq.n	8009dfa <USB_EPStartXfer+0x18a>
 8009dec:	1c7b      	adds	r3, r7, #1
 8009dee:	33ff      	adds	r3, #255	; 0xff
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3301      	adds	r3, #1
 8009df4:	1c7a      	adds	r2, r7, #1
 8009df6:	32ff      	adds	r2, #255	; 0xff
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	1c7b      	adds	r3, r7, #1
 8009dfc:	33ff      	adds	r3, #255	; 0xff
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	029b      	lsls	r3, r3, #10
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	801a      	strh	r2, [r3, #0]
 8009e0a:	e03a      	b.n	8009e82 <USB_EPStartXfer+0x212>
 8009e0c:	1d7b      	adds	r3, r7, #5
 8009e0e:	33ff      	adds	r3, #255	; 0xff
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	095b      	lsrs	r3, r3, #5
 8009e14:	1c7a      	adds	r2, r7, #1
 8009e16:	32ff      	adds	r2, #255	; 0xff
 8009e18:	6013      	str	r3, [r2, #0]
 8009e1a:	1d7b      	adds	r3, r7, #5
 8009e1c:	33ff      	adds	r3, #255	; 0xff
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	221f      	movs	r2, #31
 8009e22:	4013      	ands	r3, r2
 8009e24:	d106      	bne.n	8009e34 <USB_EPStartXfer+0x1c4>
 8009e26:	1c7b      	adds	r3, r7, #1
 8009e28:	33ff      	adds	r3, #255	; 0xff
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	1c7a      	adds	r2, r7, #1
 8009e30:	32ff      	adds	r2, #255	; 0xff
 8009e32:	6013      	str	r3, [r2, #0]
 8009e34:	1c7b      	adds	r3, r7, #1
 8009e36:	33ff      	adds	r3, #255	; 0xff
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	029b      	lsls	r3, r3, #10
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	4a7a      	ldr	r2, [pc, #488]	; (800a02c <USB_EPStartXfer+0x3bc>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	801a      	strh	r2, [r3, #0]
 8009e4a:	e01a      	b.n	8009e82 <USB_EPStartXfer+0x212>
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d116      	bne.n	8009e82 <USB_EPStartXfer+0x212>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2250      	movs	r2, #80	; 0x50
 8009e58:	5a9b      	ldrh	r3, [r3, r2]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	001a      	movs	r2, r3
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e60:	189b      	adds	r3, r3, r2
 8009e62:	633b      	str	r3, [r7, #48]	; 0x30
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	00da      	lsls	r2, r3, #3
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	18d3      	adds	r3, r2, r3
 8009e6e:	4a6d      	ldr	r2, [pc, #436]	; (800a024 <USB_EPStartXfer+0x3b4>)
 8009e70:	4694      	mov	ip, r2
 8009e72:	4463      	add	r3, ip
 8009e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e76:	1d7b      	adds	r3, r7, #5
 8009e78:	33ff      	adds	r3, #255	; 0xff
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009e82:	2076      	movs	r0, #118	; 0x76
 8009e84:	183b      	adds	r3, r7, r0
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	8952      	ldrh	r2, [r2, #10]
 8009e8a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	6959      	ldr	r1, [r3, #20]
 8009e90:	1d7b      	adds	r3, r7, #5
 8009e92:	33ff      	adds	r3, #255	; 0xff
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	b29c      	uxth	r4, r3
 8009e98:	183b      	adds	r3, r7, r0
 8009e9a:	881a      	ldrh	r2, [r3, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	0023      	movs	r3, r4
 8009ea0:	f001 f8da 	bl	800b058 <USB_WritePMA>
            ep->xfer_buff += len;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	695a      	ldr	r2, [r3, #20]
 8009ea8:	1d7b      	adds	r3, r7, #5
 8009eaa:	33ff      	adds	r3, #255	; 0xff
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	18d2      	adds	r2, r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	6a1a      	ldr	r2, [r3, #32]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d908      	bls.n	8009ed2 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	6a1a      	ldr	r2, [r3, #32]
 8009ec4:	1d7b      	adds	r3, r7, #5
 8009ec6:	33ff      	adds	r3, #255	; 0xff
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	1ad2      	subs	r2, r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	621a      	str	r2, [r3, #32]
 8009ed0:	e007      	b.n	8009ee2 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	1d7a      	adds	r2, r7, #5
 8009ed8:	32ff      	adds	r2, #255	; 0xff
 8009eda:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	785b      	ldrb	r3, [r3, #1]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d166      	bne.n	8009fb8 <USB_EPStartXfer+0x348>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	61bb      	str	r3, [r7, #24]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2250      	movs	r2, #80	; 0x50
 8009ef2:	5a9b      	ldrh	r3, [r3, r2]
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	001a      	movs	r2, r3
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	189b      	adds	r3, r3, r2
 8009efc:	61bb      	str	r3, [r7, #24]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	00da      	lsls	r2, r3, #3
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	18d3      	adds	r3, r2, r3
 8009f08:	4a43      	ldr	r2, [pc, #268]	; (800a018 <USB_EPStartXfer+0x3a8>)
 8009f0a:	4694      	mov	ip, r2
 8009f0c:	4463      	add	r3, ip
 8009f0e:	617b      	str	r3, [r7, #20]
 8009f10:	1d7b      	adds	r3, r7, #5
 8009f12:	33ff      	adds	r3, #255	; 0xff
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d110      	bne.n	8009f3c <USB_EPStartXfer+0x2cc>
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	4a41      	ldr	r2, [pc, #260]	; (800a028 <USB_EPStartXfer+0x3b8>)
 8009f22:	4013      	ands	r3, r2
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	801a      	strh	r2, [r3, #0]
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	4a3e      	ldr	r2, [pc, #248]	; (800a02c <USB_EPStartXfer+0x3bc>)
 8009f32:	4313      	orrs	r3, r2
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	e05a      	b.n	8009ff2 <USB_EPStartXfer+0x382>
 8009f3c:	1d7b      	adds	r3, r7, #5
 8009f3e:	33ff      	adds	r3, #255	; 0xff
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b3e      	cmp	r3, #62	; 0x3e
 8009f44:	d81a      	bhi.n	8009f7c <USB_EPStartXfer+0x30c>
 8009f46:	1d7b      	adds	r3, r7, #5
 8009f48:	33ff      	adds	r3, #255	; 0xff
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	085b      	lsrs	r3, r3, #1
 8009f4e:	21fc      	movs	r1, #252	; 0xfc
 8009f50:	187a      	adds	r2, r7, r1
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	1d7b      	adds	r3, r7, #5
 8009f56:	33ff      	adds	r3, #255	; 0xff
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	d004      	beq.n	8009f6a <USB_EPStartXfer+0x2fa>
 8009f60:	187b      	adds	r3, r7, r1
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3301      	adds	r3, #1
 8009f66:	187a      	adds	r2, r7, r1
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	23fc      	movs	r3, #252	; 0xfc
 8009f6c:	18fb      	adds	r3, r7, r3
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	029b      	lsls	r3, r3, #10
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	801a      	strh	r2, [r3, #0]
 8009f7a:	e03a      	b.n	8009ff2 <USB_EPStartXfer+0x382>
 8009f7c:	1d7b      	adds	r3, r7, #5
 8009f7e:	33ff      	adds	r3, #255	; 0xff
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	095b      	lsrs	r3, r3, #5
 8009f84:	21fc      	movs	r1, #252	; 0xfc
 8009f86:	187a      	adds	r2, r7, r1
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	1d7b      	adds	r3, r7, #5
 8009f8c:	33ff      	adds	r3, #255	; 0xff
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	221f      	movs	r2, #31
 8009f92:	4013      	ands	r3, r2
 8009f94:	d104      	bne.n	8009fa0 <USB_EPStartXfer+0x330>
 8009f96:	187b      	adds	r3, r7, r1
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	187a      	adds	r2, r7, r1
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	23fc      	movs	r3, #252	; 0xfc
 8009fa2:	18fb      	adds	r3, r7, r3
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	029b      	lsls	r3, r3, #10
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	4a1f      	ldr	r2, [pc, #124]	; (800a02c <USB_EPStartXfer+0x3bc>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	801a      	strh	r2, [r3, #0]
 8009fb6:	e01c      	b.n	8009ff2 <USB_EPStartXfer+0x382>
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	785b      	ldrb	r3, [r3, #1]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d118      	bne.n	8009ff2 <USB_EPStartXfer+0x382>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	623b      	str	r3, [r7, #32]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2250      	movs	r2, #80	; 0x50
 8009fc8:	5a9b      	ldrh	r3, [r3, r2]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	001a      	movs	r2, r3
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	189b      	adds	r3, r3, r2
 8009fd2:	623b      	str	r3, [r7, #32]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	00da      	lsls	r2, r3, #3
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	18d3      	adds	r3, r2, r3
 8009fde:	4a0e      	ldr	r2, [pc, #56]	; (800a018 <USB_EPStartXfer+0x3a8>)
 8009fe0:	4694      	mov	ip, r2
 8009fe2:	4463      	add	r3, ip
 8009fe4:	61fb      	str	r3, [r7, #28]
 8009fe6:	1d7b      	adds	r3, r7, #5
 8009fe8:	33ff      	adds	r3, #255	; 0xff
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009ff2:	2076      	movs	r0, #118	; 0x76
 8009ff4:	183b      	adds	r3, r7, r0
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	8912      	ldrh	r2, [r2, #8]
 8009ffa:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	6959      	ldr	r1, [r3, #20]
 800a000:	1d7b      	adds	r3, r7, #5
 800a002:	33ff      	adds	r3, #255	; 0xff
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	b29c      	uxth	r4, r3
 800a008:	183b      	adds	r3, r7, r0
 800a00a:	881a      	ldrh	r2, [r3, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	0023      	movs	r3, r4
 800a010:	f001 f822 	bl	800b058 <USB_WritePMA>
 800a014:	e301      	b.n	800a61a <USB_EPStartXfer+0x9aa>
 800a016:	46c0      	nop			; (mov r8, r8)
 800a018:	00000402 	.word	0x00000402
 800a01c:	ffff8f8f 	.word	0xffff8f8f
 800a020:	ffff8180 	.word	0xffff8180
 800a024:	00000406 	.word	0x00000406
 800a028:	ffff83ff 	.word	0xffff83ff
 800a02c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	785b      	ldrb	r3, [r3, #1]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d166      	bne.n	800a106 <USB_EPStartXfer+0x496>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2250      	movs	r2, #80	; 0x50
 800a040:	5a9b      	ldrh	r3, [r3, r2]
 800a042:	b29b      	uxth	r3, r3
 800a044:	001a      	movs	r2, r3
 800a046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a048:	189b      	adds	r3, r3, r2
 800a04a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	00da      	lsls	r2, r3, #3
 800a052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a054:	18d3      	adds	r3, r2, r3
 800a056:	4ac3      	ldr	r2, [pc, #780]	; (800a364 <USB_EPStartXfer+0x6f4>)
 800a058:	4694      	mov	ip, r2
 800a05a:	4463      	add	r3, ip
 800a05c:	647b      	str	r3, [r7, #68]	; 0x44
 800a05e:	1d7b      	adds	r3, r7, #5
 800a060:	33ff      	adds	r3, #255	; 0xff
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d110      	bne.n	800a08a <USB_EPStartXfer+0x41a>
 800a068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a06a:	881b      	ldrh	r3, [r3, #0]
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	4abe      	ldr	r2, [pc, #760]	; (800a368 <USB_EPStartXfer+0x6f8>)
 800a070:	4013      	ands	r3, r2
 800a072:	b29a      	uxth	r2, r3
 800a074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a076:	801a      	strh	r2, [r3, #0]
 800a078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	4abb      	ldr	r2, [pc, #748]	; (800a36c <USB_EPStartXfer+0x6fc>)
 800a080:	4313      	orrs	r3, r2
 800a082:	b29a      	uxth	r2, r3
 800a084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a086:	801a      	strh	r2, [r3, #0]
 800a088:	e05a      	b.n	800a140 <USB_EPStartXfer+0x4d0>
 800a08a:	1d7b      	adds	r3, r7, #5
 800a08c:	33ff      	adds	r3, #255	; 0xff
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b3e      	cmp	r3, #62	; 0x3e
 800a092:	d81a      	bhi.n	800a0ca <USB_EPStartXfer+0x45a>
 800a094:	1d7b      	adds	r3, r7, #5
 800a096:	33ff      	adds	r3, #255	; 0xff
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	085b      	lsrs	r3, r3, #1
 800a09c:	21f8      	movs	r1, #248	; 0xf8
 800a09e:	187a      	adds	r2, r7, r1
 800a0a0:	6013      	str	r3, [r2, #0]
 800a0a2:	1d7b      	adds	r3, r7, #5
 800a0a4:	33ff      	adds	r3, #255	; 0xff
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	d004      	beq.n	800a0b8 <USB_EPStartXfer+0x448>
 800a0ae:	187b      	adds	r3, r7, r1
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	187a      	adds	r2, r7, r1
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	23f8      	movs	r3, #248	; 0xf8
 800a0ba:	18fb      	adds	r3, r7, r3
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	029b      	lsls	r3, r3, #10
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0c6:	801a      	strh	r2, [r3, #0]
 800a0c8:	e03a      	b.n	800a140 <USB_EPStartXfer+0x4d0>
 800a0ca:	1d7b      	adds	r3, r7, #5
 800a0cc:	33ff      	adds	r3, #255	; 0xff
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	095b      	lsrs	r3, r3, #5
 800a0d2:	21f8      	movs	r1, #248	; 0xf8
 800a0d4:	187a      	adds	r2, r7, r1
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	1d7b      	adds	r3, r7, #5
 800a0da:	33ff      	adds	r3, #255	; 0xff
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	221f      	movs	r2, #31
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	d104      	bne.n	800a0ee <USB_EPStartXfer+0x47e>
 800a0e4:	187b      	adds	r3, r7, r1
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	187a      	adds	r2, r7, r1
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	23f8      	movs	r3, #248	; 0xf8
 800a0f0:	18fb      	adds	r3, r7, r3
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	029b      	lsls	r3, r3, #10
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	4a9c      	ldr	r2, [pc, #624]	; (800a36c <USB_EPStartXfer+0x6fc>)
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a102:	801a      	strh	r2, [r3, #0]
 800a104:	e01c      	b.n	800a140 <USB_EPStartXfer+0x4d0>
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	785b      	ldrb	r3, [r3, #1]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d118      	bne.n	800a140 <USB_EPStartXfer+0x4d0>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	653b      	str	r3, [r7, #80]	; 0x50
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2250      	movs	r2, #80	; 0x50
 800a116:	5a9b      	ldrh	r3, [r3, r2]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	001a      	movs	r2, r3
 800a11c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a11e:	189b      	adds	r3, r3, r2
 800a120:	653b      	str	r3, [r7, #80]	; 0x50
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	00da      	lsls	r2, r3, #3
 800a128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a12a:	18d3      	adds	r3, r2, r3
 800a12c:	4a8d      	ldr	r2, [pc, #564]	; (800a364 <USB_EPStartXfer+0x6f4>)
 800a12e:	4694      	mov	ip, r2
 800a130:	4463      	add	r3, ip
 800a132:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a134:	1d7b      	adds	r3, r7, #5
 800a136:	33ff      	adds	r3, #255	; 0xff
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a13e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a140:	2076      	movs	r0, #118	; 0x76
 800a142:	183b      	adds	r3, r7, r0
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	8912      	ldrh	r2, [r2, #8]
 800a148:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	6959      	ldr	r1, [r3, #20]
 800a14e:	1d7b      	adds	r3, r7, #5
 800a150:	33ff      	adds	r3, #255	; 0xff
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	b29c      	uxth	r4, r3
 800a156:	183b      	adds	r3, r7, r0
 800a158:	881a      	ldrh	r2, [r3, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	0023      	movs	r3, r4
 800a15e:	f000 ff7b 	bl	800b058 <USB_WritePMA>
            ep->xfer_buff += len;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	695a      	ldr	r2, [r3, #20]
 800a166:	1d7b      	adds	r3, r7, #5
 800a168:	33ff      	adds	r3, #255	; 0xff
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	18d2      	adds	r2, r2, r3
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	6a1a      	ldr	r2, [r3, #32]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d908      	bls.n	800a190 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	6a1a      	ldr	r2, [r3, #32]
 800a182:	1d7b      	adds	r3, r7, #5
 800a184:	33ff      	adds	r3, #255	; 0xff
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	1ad2      	subs	r2, r2, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	621a      	str	r2, [r3, #32]
 800a18e:	e007      	b.n	800a1a0 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	1d7a      	adds	r2, r7, #5
 800a196:	32ff      	adds	r2, #255	; 0xff
 800a198:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2200      	movs	r2, #0
 800a19e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	643b      	str	r3, [r7, #64]	; 0x40
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	785b      	ldrb	r3, [r3, #1]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d166      	bne.n	800a27a <USB_EPStartXfer+0x60a>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2250      	movs	r2, #80	; 0x50
 800a1b4:	5a9b      	ldrh	r3, [r3, r2]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	001a      	movs	r2, r3
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1bc:	189b      	adds	r3, r3, r2
 800a1be:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	00da      	lsls	r2, r3, #3
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c8:	18d3      	adds	r3, r2, r3
 800a1ca:	4a69      	ldr	r2, [pc, #420]	; (800a370 <USB_EPStartXfer+0x700>)
 800a1cc:	4694      	mov	ip, r2
 800a1ce:	4463      	add	r3, ip
 800a1d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a1d2:	1d7b      	adds	r3, r7, #5
 800a1d4:	33ff      	adds	r3, #255	; 0xff
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d110      	bne.n	800a1fe <USB_EPStartXfer+0x58e>
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	4a61      	ldr	r2, [pc, #388]	; (800a368 <USB_EPStartXfer+0x6f8>)
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ea:	801a      	strh	r2, [r3, #0]
 800a1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	4a5e      	ldr	r2, [pc, #376]	; (800a36c <USB_EPStartXfer+0x6fc>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fa:	801a      	strh	r2, [r3, #0]
 800a1fc:	e058      	b.n	800a2b0 <USB_EPStartXfer+0x640>
 800a1fe:	1d7b      	adds	r3, r7, #5
 800a200:	33ff      	adds	r3, #255	; 0xff
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2b3e      	cmp	r3, #62	; 0x3e
 800a206:	d81a      	bhi.n	800a23e <USB_EPStartXfer+0x5ce>
 800a208:	1d7b      	adds	r3, r7, #5
 800a20a:	33ff      	adds	r3, #255	; 0xff
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	085b      	lsrs	r3, r3, #1
 800a210:	21f4      	movs	r1, #244	; 0xf4
 800a212:	187a      	adds	r2, r7, r1
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	1d7b      	adds	r3, r7, #5
 800a218:	33ff      	adds	r3, #255	; 0xff
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2201      	movs	r2, #1
 800a21e:	4013      	ands	r3, r2
 800a220:	d004      	beq.n	800a22c <USB_EPStartXfer+0x5bc>
 800a222:	187b      	adds	r3, r7, r1
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	3301      	adds	r3, #1
 800a228:	187a      	adds	r2, r7, r1
 800a22a:	6013      	str	r3, [r2, #0]
 800a22c:	23f4      	movs	r3, #244	; 0xf4
 800a22e:	18fb      	adds	r3, r7, r3
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	b29b      	uxth	r3, r3
 800a234:	029b      	lsls	r3, r3, #10
 800a236:	b29a      	uxth	r2, r3
 800a238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23a:	801a      	strh	r2, [r3, #0]
 800a23c:	e038      	b.n	800a2b0 <USB_EPStartXfer+0x640>
 800a23e:	1d7b      	adds	r3, r7, #5
 800a240:	33ff      	adds	r3, #255	; 0xff
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	095b      	lsrs	r3, r3, #5
 800a246:	21f4      	movs	r1, #244	; 0xf4
 800a248:	187a      	adds	r2, r7, r1
 800a24a:	6013      	str	r3, [r2, #0]
 800a24c:	1d7b      	adds	r3, r7, #5
 800a24e:	33ff      	adds	r3, #255	; 0xff
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	221f      	movs	r2, #31
 800a254:	4013      	ands	r3, r2
 800a256:	d104      	bne.n	800a262 <USB_EPStartXfer+0x5f2>
 800a258:	187b      	adds	r3, r7, r1
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	187a      	adds	r2, r7, r1
 800a260:	6013      	str	r3, [r2, #0]
 800a262:	23f4      	movs	r3, #244	; 0xf4
 800a264:	18fb      	adds	r3, r7, r3
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	029b      	lsls	r3, r3, #10
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4a3f      	ldr	r2, [pc, #252]	; (800a36c <USB_EPStartXfer+0x6fc>)
 800a270:	4313      	orrs	r3, r2
 800a272:	b29a      	uxth	r2, r3
 800a274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a276:	801a      	strh	r2, [r3, #0]
 800a278:	e01a      	b.n	800a2b0 <USB_EPStartXfer+0x640>
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d116      	bne.n	800a2b0 <USB_EPStartXfer+0x640>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2250      	movs	r2, #80	; 0x50
 800a286:	5a9b      	ldrh	r3, [r3, r2]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	001a      	movs	r2, r3
 800a28c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a28e:	189b      	adds	r3, r3, r2
 800a290:	643b      	str	r3, [r7, #64]	; 0x40
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	00da      	lsls	r2, r3, #3
 800a298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a29a:	18d3      	adds	r3, r2, r3
 800a29c:	4a34      	ldr	r2, [pc, #208]	; (800a370 <USB_EPStartXfer+0x700>)
 800a29e:	4694      	mov	ip, r2
 800a2a0:	4463      	add	r3, ip
 800a2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2a4:	1d7b      	adds	r3, r7, #5
 800a2a6:	33ff      	adds	r3, #255	; 0xff
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a2b0:	2076      	movs	r0, #118	; 0x76
 800a2b2:	183b      	adds	r3, r7, r0
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	8952      	ldrh	r2, [r2, #10]
 800a2b8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	6959      	ldr	r1, [r3, #20]
 800a2be:	1d7b      	adds	r3, r7, #5
 800a2c0:	33ff      	adds	r3, #255	; 0xff
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	b29c      	uxth	r4, r3
 800a2c6:	183b      	adds	r3, r7, r0
 800a2c8:	881a      	ldrh	r2, [r3, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	0023      	movs	r3, r4
 800a2ce:	f000 fec3 	bl	800b058 <USB_WritePMA>
 800a2d2:	e1a2      	b.n	800a61a <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	6a1b      	ldr	r3, [r3, #32]
 800a2d8:	1d7a      	adds	r2, r7, #5
 800a2da:	32ff      	adds	r2, #255	; 0xff
 800a2dc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	18d3      	adds	r3, r2, r3
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	2062      	movs	r0, #98	; 0x62
 800a2ee:	183b      	adds	r3, r7, r0
 800a2f0:	4920      	ldr	r1, [pc, #128]	; (800a374 <USB_EPStartXfer+0x704>)
 800a2f2:	400a      	ands	r2, r1
 800a2f4:	801a      	strh	r2, [r3, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	18d3      	adds	r3, r2, r3
 800a300:	183a      	adds	r2, r7, r0
 800a302:	8812      	ldrh	r2, [r2, #0]
 800a304:	491c      	ldr	r1, [pc, #112]	; (800a378 <USB_EPStartXfer+0x708>)
 800a306:	430a      	orrs	r2, r1
 800a308:	b292      	uxth	r2, r2
 800a30a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2250      	movs	r2, #80	; 0x50
 800a314:	5a9b      	ldrh	r3, [r3, r2]
 800a316:	b29b      	uxth	r3, r3
 800a318:	001a      	movs	r2, r3
 800a31a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a31c:	189b      	adds	r3, r3, r2
 800a31e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	00da      	lsls	r2, r3, #3
 800a326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a328:	18d3      	adds	r3, r2, r3
 800a32a:	4a0e      	ldr	r2, [pc, #56]	; (800a364 <USB_EPStartXfer+0x6f4>)
 800a32c:	4694      	mov	ip, r2
 800a32e:	4463      	add	r3, ip
 800a330:	65bb      	str	r3, [r7, #88]	; 0x58
 800a332:	1d7b      	adds	r3, r7, #5
 800a334:	33ff      	adds	r3, #255	; 0xff
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	b29a      	uxth	r2, r3
 800a33a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a33c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a33e:	2076      	movs	r0, #118	; 0x76
 800a340:	183b      	adds	r3, r7, r0
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	8912      	ldrh	r2, [r2, #8]
 800a346:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	6959      	ldr	r1, [r3, #20]
 800a34c:	1d7b      	adds	r3, r7, #5
 800a34e:	33ff      	adds	r3, #255	; 0xff
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	b29c      	uxth	r4, r3
 800a354:	183b      	adds	r3, r7, r0
 800a356:	881a      	ldrh	r2, [r3, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	0023      	movs	r3, r4
 800a35c:	f000 fe7c 	bl	800b058 <USB_WritePMA>
 800a360:	e15b      	b.n	800a61a <USB_EPStartXfer+0x9aa>
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	00000402 	.word	0x00000402
 800a368:	ffff83ff 	.word	0xffff83ff
 800a36c:	ffff8000 	.word	0xffff8000
 800a370:	00000406 	.word	0x00000406
 800a374:	ffff8e8f 	.word	0xffff8e8f
 800a378:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	6a1a      	ldr	r2, [r3, #32]
 800a380:	1d7b      	adds	r3, r7, #5
 800a382:	33ff      	adds	r3, #255	; 0xff
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	1ad2      	subs	r2, r2, r3
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	18d3      	adds	r3, r2, r3
 800a396:	881b      	ldrh	r3, [r3, #0]
 800a398:	b29b      	uxth	r3, r3
 800a39a:	001a      	movs	r2, r3
 800a39c:	2340      	movs	r3, #64	; 0x40
 800a39e:	4013      	ands	r3, r2
 800a3a0:	d100      	bne.n	800a3a4 <USB_EPStartXfer+0x734>
 800a3a2:	e099      	b.n	800a4d8 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	673b      	str	r3, [r7, #112]	; 0x70
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	785b      	ldrb	r3, [r3, #1]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d166      	bne.n	800a47e <USB_EPStartXfer+0x80e>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2250      	movs	r2, #80	; 0x50
 800a3b8:	5a9b      	ldrh	r3, [r3, r2]
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	001a      	movs	r2, r3
 800a3be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3c0:	189b      	adds	r3, r3, r2
 800a3c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	00da      	lsls	r2, r3, #3
 800a3ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3cc:	18d3      	adds	r3, r2, r3
 800a3ce:	4ad0      	ldr	r2, [pc, #832]	; (800a710 <USB_EPStartXfer+0xaa0>)
 800a3d0:	4694      	mov	ip, r2
 800a3d2:	4463      	add	r3, ip
 800a3d4:	667b      	str	r3, [r7, #100]	; 0x64
 800a3d6:	1d7b      	adds	r3, r7, #5
 800a3d8:	33ff      	adds	r3, #255	; 0xff
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d110      	bne.n	800a402 <USB_EPStartXfer+0x792>
 800a3e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	4acb      	ldr	r2, [pc, #812]	; (800a714 <USB_EPStartXfer+0xaa4>)
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3ee:	801a      	strh	r2, [r3, #0]
 800a3f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	4ac8      	ldr	r2, [pc, #800]	; (800a718 <USB_EPStartXfer+0xaa8>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3fe:	801a      	strh	r2, [r3, #0]
 800a400:	e058      	b.n	800a4b4 <USB_EPStartXfer+0x844>
 800a402:	1d7b      	adds	r3, r7, #5
 800a404:	33ff      	adds	r3, #255	; 0xff
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b3e      	cmp	r3, #62	; 0x3e
 800a40a:	d81a      	bhi.n	800a442 <USB_EPStartXfer+0x7d2>
 800a40c:	1d7b      	adds	r3, r7, #5
 800a40e:	33ff      	adds	r3, #255	; 0xff
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	085b      	lsrs	r3, r3, #1
 800a414:	21f0      	movs	r1, #240	; 0xf0
 800a416:	187a      	adds	r2, r7, r1
 800a418:	6013      	str	r3, [r2, #0]
 800a41a:	1d7b      	adds	r3, r7, #5
 800a41c:	33ff      	adds	r3, #255	; 0xff
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2201      	movs	r2, #1
 800a422:	4013      	ands	r3, r2
 800a424:	d004      	beq.n	800a430 <USB_EPStartXfer+0x7c0>
 800a426:	187b      	adds	r3, r7, r1
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3301      	adds	r3, #1
 800a42c:	187a      	adds	r2, r7, r1
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	23f0      	movs	r3, #240	; 0xf0
 800a432:	18fb      	adds	r3, r7, r3
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	b29b      	uxth	r3, r3
 800a438:	029b      	lsls	r3, r3, #10
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a43e:	801a      	strh	r2, [r3, #0]
 800a440:	e038      	b.n	800a4b4 <USB_EPStartXfer+0x844>
 800a442:	1d7b      	adds	r3, r7, #5
 800a444:	33ff      	adds	r3, #255	; 0xff
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	095b      	lsrs	r3, r3, #5
 800a44a:	21f0      	movs	r1, #240	; 0xf0
 800a44c:	187a      	adds	r2, r7, r1
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	1d7b      	adds	r3, r7, #5
 800a452:	33ff      	adds	r3, #255	; 0xff
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	221f      	movs	r2, #31
 800a458:	4013      	ands	r3, r2
 800a45a:	d104      	bne.n	800a466 <USB_EPStartXfer+0x7f6>
 800a45c:	187b      	adds	r3, r7, r1
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3b01      	subs	r3, #1
 800a462:	187a      	adds	r2, r7, r1
 800a464:	6013      	str	r3, [r2, #0]
 800a466:	23f0      	movs	r3, #240	; 0xf0
 800a468:	18fb      	adds	r3, r7, r3
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	029b      	lsls	r3, r3, #10
 800a470:	b29b      	uxth	r3, r3
 800a472:	4aa9      	ldr	r2, [pc, #676]	; (800a718 <USB_EPStartXfer+0xaa8>)
 800a474:	4313      	orrs	r3, r2
 800a476:	b29a      	uxth	r2, r3
 800a478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a47a:	801a      	strh	r2, [r3, #0]
 800a47c:	e01a      	b.n	800a4b4 <USB_EPStartXfer+0x844>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	785b      	ldrb	r3, [r3, #1]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d116      	bne.n	800a4b4 <USB_EPStartXfer+0x844>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2250      	movs	r2, #80	; 0x50
 800a48a:	5a9b      	ldrh	r3, [r3, r2]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	001a      	movs	r2, r3
 800a490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a492:	189b      	adds	r3, r3, r2
 800a494:	673b      	str	r3, [r7, #112]	; 0x70
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	00da      	lsls	r2, r3, #3
 800a49c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a49e:	18d3      	adds	r3, r2, r3
 800a4a0:	4a9b      	ldr	r2, [pc, #620]	; (800a710 <USB_EPStartXfer+0xaa0>)
 800a4a2:	4694      	mov	ip, r2
 800a4a4:	4463      	add	r3, ip
 800a4a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4a8:	1d7b      	adds	r3, r7, #5
 800a4aa:	33ff      	adds	r3, #255	; 0xff
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a4b4:	2076      	movs	r0, #118	; 0x76
 800a4b6:	183b      	adds	r3, r7, r0
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	8952      	ldrh	r2, [r2, #10]
 800a4bc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	6959      	ldr	r1, [r3, #20]
 800a4c2:	1d7b      	adds	r3, r7, #5
 800a4c4:	33ff      	adds	r3, #255	; 0xff
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	b29c      	uxth	r4, r3
 800a4ca:	183b      	adds	r3, r7, r0
 800a4cc:	881a      	ldrh	r2, [r3, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	0023      	movs	r3, r4
 800a4d2:	f000 fdc1 	bl	800b058 <USB_WritePMA>
 800a4d6:	e0a0      	b.n	800a61a <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	785b      	ldrb	r3, [r3, #1]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d166      	bne.n	800a5ae <USB_EPStartXfer+0x93e>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2250      	movs	r2, #80	; 0x50
 800a4e8:	5a9b      	ldrh	r3, [r3, r2]
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	001a      	movs	r2, r3
 800a4ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4f0:	189b      	adds	r3, r3, r2
 800a4f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	00da      	lsls	r2, r3, #3
 800a4fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4fc:	18d3      	adds	r3, r2, r3
 800a4fe:	4a87      	ldr	r2, [pc, #540]	; (800a71c <USB_EPStartXfer+0xaac>)
 800a500:	4694      	mov	ip, r2
 800a502:	4463      	add	r3, ip
 800a504:	67bb      	str	r3, [r7, #120]	; 0x78
 800a506:	1d7b      	adds	r3, r7, #5
 800a508:	33ff      	adds	r3, #255	; 0xff
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d110      	bne.n	800a532 <USB_EPStartXfer+0x8c2>
 800a510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	b29b      	uxth	r3, r3
 800a516:	4a7f      	ldr	r2, [pc, #508]	; (800a714 <USB_EPStartXfer+0xaa4>)
 800a518:	4013      	ands	r3, r2
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a51e:	801a      	strh	r2, [r3, #0]
 800a520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	b29b      	uxth	r3, r3
 800a526:	4a7c      	ldr	r2, [pc, #496]	; (800a718 <USB_EPStartXfer+0xaa8>)
 800a528:	4313      	orrs	r3, r2
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a52e:	801a      	strh	r2, [r3, #0]
 800a530:	e062      	b.n	800a5f8 <USB_EPStartXfer+0x988>
 800a532:	1d7b      	adds	r3, r7, #5
 800a534:	33ff      	adds	r3, #255	; 0xff
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b3e      	cmp	r3, #62	; 0x3e
 800a53a:	d81a      	bhi.n	800a572 <USB_EPStartXfer+0x902>
 800a53c:	1d7b      	adds	r3, r7, #5
 800a53e:	33ff      	adds	r3, #255	; 0xff
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	085b      	lsrs	r3, r3, #1
 800a544:	21ec      	movs	r1, #236	; 0xec
 800a546:	187a      	adds	r2, r7, r1
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	1d7b      	adds	r3, r7, #5
 800a54c:	33ff      	adds	r3, #255	; 0xff
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2201      	movs	r2, #1
 800a552:	4013      	ands	r3, r2
 800a554:	d004      	beq.n	800a560 <USB_EPStartXfer+0x8f0>
 800a556:	187b      	adds	r3, r7, r1
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	187a      	adds	r2, r7, r1
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	23ec      	movs	r3, #236	; 0xec
 800a562:	18fb      	adds	r3, r7, r3
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	b29b      	uxth	r3, r3
 800a568:	029b      	lsls	r3, r3, #10
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a56e:	801a      	strh	r2, [r3, #0]
 800a570:	e042      	b.n	800a5f8 <USB_EPStartXfer+0x988>
 800a572:	1d7b      	adds	r3, r7, #5
 800a574:	33ff      	adds	r3, #255	; 0xff
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	095b      	lsrs	r3, r3, #5
 800a57a:	21ec      	movs	r1, #236	; 0xec
 800a57c:	187a      	adds	r2, r7, r1
 800a57e:	6013      	str	r3, [r2, #0]
 800a580:	1d7b      	adds	r3, r7, #5
 800a582:	33ff      	adds	r3, #255	; 0xff
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	221f      	movs	r2, #31
 800a588:	4013      	ands	r3, r2
 800a58a:	d104      	bne.n	800a596 <USB_EPStartXfer+0x926>
 800a58c:	187b      	adds	r3, r7, r1
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3b01      	subs	r3, #1
 800a592:	187a      	adds	r2, r7, r1
 800a594:	6013      	str	r3, [r2, #0]
 800a596:	23ec      	movs	r3, #236	; 0xec
 800a598:	18fb      	adds	r3, r7, r3
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	029b      	lsls	r3, r3, #10
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	4a5d      	ldr	r2, [pc, #372]	; (800a718 <USB_EPStartXfer+0xaa8>)
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5aa:	801a      	strh	r2, [r3, #0]
 800a5ac:	e024      	b.n	800a5f8 <USB_EPStartXfer+0x988>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	785b      	ldrb	r3, [r3, #1]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d120      	bne.n	800a5f8 <USB_EPStartXfer+0x988>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2184      	movs	r1, #132	; 0x84
 800a5ba:	187a      	adds	r2, r7, r1
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2250      	movs	r2, #80	; 0x50
 800a5c2:	5a9b      	ldrh	r3, [r3, r2]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	001a      	movs	r2, r3
 800a5c8:	187b      	adds	r3, r7, r1
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	189b      	adds	r3, r3, r2
 800a5ce:	187a      	adds	r2, r7, r1
 800a5d0:	6013      	str	r3, [r2, #0]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	00da      	lsls	r2, r3, #3
 800a5d8:	187b      	adds	r3, r7, r1
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	18d3      	adds	r3, r2, r3
 800a5de:	4a4f      	ldr	r2, [pc, #316]	; (800a71c <USB_EPStartXfer+0xaac>)
 800a5e0:	4694      	mov	ip, r2
 800a5e2:	4463      	add	r3, ip
 800a5e4:	2180      	movs	r1, #128	; 0x80
 800a5e6:	187a      	adds	r2, r7, r1
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	1d7b      	adds	r3, r7, #5
 800a5ec:	33ff      	adds	r3, #255	; 0xff
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	187b      	adds	r3, r7, r1
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a5f8:	2076      	movs	r0, #118	; 0x76
 800a5fa:	183b      	adds	r3, r7, r0
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	8912      	ldrh	r2, [r2, #8]
 800a600:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	6959      	ldr	r1, [r3, #20]
 800a606:	1d7b      	adds	r3, r7, #5
 800a608:	33ff      	adds	r3, #255	; 0xff
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	b29c      	uxth	r4, r3
 800a60e:	183b      	adds	r3, r7, r0
 800a610:	881a      	ldrh	r2, [r3, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	0023      	movs	r3, r4
 800a616:	f000 fd1f 	bl	800b058 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	18d3      	adds	r3, r2, r3
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	b29a      	uxth	r2, r3
 800a628:	200a      	movs	r0, #10
 800a62a:	183b      	adds	r3, r7, r0
 800a62c:	493c      	ldr	r1, [pc, #240]	; (800a720 <USB_EPStartXfer+0xab0>)
 800a62e:	400a      	ands	r2, r1
 800a630:	801a      	strh	r2, [r3, #0]
 800a632:	183b      	adds	r3, r7, r0
 800a634:	183a      	adds	r2, r7, r0
 800a636:	8812      	ldrh	r2, [r2, #0]
 800a638:	2110      	movs	r1, #16
 800a63a:	404a      	eors	r2, r1
 800a63c:	801a      	strh	r2, [r3, #0]
 800a63e:	183b      	adds	r3, r7, r0
 800a640:	183a      	adds	r2, r7, r0
 800a642:	8812      	ldrh	r2, [r2, #0]
 800a644:	2120      	movs	r1, #32
 800a646:	404a      	eors	r2, r1
 800a648:	801a      	strh	r2, [r3, #0]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	18d3      	adds	r3, r2, r3
 800a654:	183a      	adds	r2, r7, r0
 800a656:	8812      	ldrh	r2, [r2, #0]
 800a658:	4932      	ldr	r1, [pc, #200]	; (800a724 <USB_EPStartXfer+0xab4>)
 800a65a:	430a      	orrs	r2, r1
 800a65c:	b292      	uxth	r2, r2
 800a65e:	801a      	strh	r2, [r3, #0]
 800a660:	f000 fbaf 	bl	800adc2 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	7b1b      	ldrb	r3, [r3, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d000      	beq.n	800a66e <USB_EPStartXfer+0x9fe>
 800a66c:	e09e      	b.n	800a7ac <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	699a      	ldr	r2, [r3, #24]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	429a      	cmp	r2, r3
 800a678:	d90d      	bls.n	800a696 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	1d7a      	adds	r2, r7, #5
 800a680:	32ff      	adds	r2, #255	; 0xff
 800a682:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	699a      	ldr	r2, [r3, #24]
 800a688:	1d7b      	adds	r3, r7, #5
 800a68a:	33ff      	adds	r3, #255	; 0xff
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	1ad2      	subs	r2, r2, r3
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	619a      	str	r2, [r3, #24]
 800a694:	e007      	b.n	800a6a6 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	1d7a      	adds	r2, r7, #5
 800a69c:	32ff      	adds	r2, #255	; 0xff
 800a69e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2190      	movs	r1, #144	; 0x90
 800a6aa:	187a      	adds	r2, r7, r1
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2250      	movs	r2, #80	; 0x50
 800a6b2:	5a9b      	ldrh	r3, [r3, r2]
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	001a      	movs	r2, r3
 800a6b8:	187b      	adds	r3, r7, r1
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	189b      	adds	r3, r3, r2
 800a6be:	187a      	adds	r2, r7, r1
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	00da      	lsls	r2, r3, #3
 800a6c8:	187b      	adds	r3, r7, r1
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	18d3      	adds	r3, r2, r3
 800a6ce:	4a10      	ldr	r2, [pc, #64]	; (800a710 <USB_EPStartXfer+0xaa0>)
 800a6d0:	4694      	mov	ip, r2
 800a6d2:	4463      	add	r3, ip
 800a6d4:	218c      	movs	r1, #140	; 0x8c
 800a6d6:	187a      	adds	r2, r7, r1
 800a6d8:	6013      	str	r3, [r2, #0]
 800a6da:	1d7b      	adds	r3, r7, #5
 800a6dc:	33ff      	adds	r3, #255	; 0xff
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d121      	bne.n	800a728 <USB_EPStartXfer+0xab8>
 800a6e4:	187b      	adds	r3, r7, r1
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	4a09      	ldr	r2, [pc, #36]	; (800a714 <USB_EPStartXfer+0xaa4>)
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	187b      	adds	r3, r7, r1
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	801a      	strh	r2, [r3, #0]
 800a6f8:	187b      	adds	r3, r7, r1
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	4a05      	ldr	r2, [pc, #20]	; (800a718 <USB_EPStartXfer+0xaa8>)
 800a702:	4313      	orrs	r3, r2
 800a704:	b29a      	uxth	r2, r3
 800a706:	187b      	adds	r3, r7, r1
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	801a      	strh	r2, [r3, #0]
 800a70c:	e334      	b.n	800ad78 <USB_EPStartXfer+0x1108>
 800a70e:	46c0      	nop			; (mov r8, r8)
 800a710:	00000406 	.word	0x00000406
 800a714:	ffff83ff 	.word	0xffff83ff
 800a718:	ffff8000 	.word	0xffff8000
 800a71c:	00000402 	.word	0x00000402
 800a720:	ffff8fbf 	.word	0xffff8fbf
 800a724:	ffff8080 	.word	0xffff8080
 800a728:	1d7b      	adds	r3, r7, #5
 800a72a:	33ff      	adds	r3, #255	; 0xff
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b3e      	cmp	r3, #62	; 0x3e
 800a730:	d81c      	bhi.n	800a76c <USB_EPStartXfer+0xafc>
 800a732:	1d7b      	adds	r3, r7, #5
 800a734:	33ff      	adds	r3, #255	; 0xff
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	085b      	lsrs	r3, r3, #1
 800a73a:	21e8      	movs	r1, #232	; 0xe8
 800a73c:	187a      	adds	r2, r7, r1
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	1d7b      	adds	r3, r7, #5
 800a742:	33ff      	adds	r3, #255	; 0xff
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2201      	movs	r2, #1
 800a748:	4013      	ands	r3, r2
 800a74a:	d004      	beq.n	800a756 <USB_EPStartXfer+0xae6>
 800a74c:	187b      	adds	r3, r7, r1
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3301      	adds	r3, #1
 800a752:	187a      	adds	r2, r7, r1
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	23e8      	movs	r3, #232	; 0xe8
 800a758:	18fb      	adds	r3, r7, r3
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	029b      	lsls	r3, r3, #10
 800a760:	b29a      	uxth	r2, r3
 800a762:	238c      	movs	r3, #140	; 0x8c
 800a764:	18fb      	adds	r3, r7, r3
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	801a      	strh	r2, [r3, #0]
 800a76a:	e305      	b.n	800ad78 <USB_EPStartXfer+0x1108>
 800a76c:	1d7b      	adds	r3, r7, #5
 800a76e:	33ff      	adds	r3, #255	; 0xff
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	095b      	lsrs	r3, r3, #5
 800a774:	21e8      	movs	r1, #232	; 0xe8
 800a776:	187a      	adds	r2, r7, r1
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	1d7b      	adds	r3, r7, #5
 800a77c:	33ff      	adds	r3, #255	; 0xff
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	221f      	movs	r2, #31
 800a782:	4013      	ands	r3, r2
 800a784:	d104      	bne.n	800a790 <USB_EPStartXfer+0xb20>
 800a786:	187b      	adds	r3, r7, r1
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	187a      	adds	r2, r7, r1
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	23e8      	movs	r3, #232	; 0xe8
 800a792:	18fb      	adds	r3, r7, r3
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	b29b      	uxth	r3, r3
 800a798:	029b      	lsls	r3, r3, #10
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	4aca      	ldr	r2, [pc, #808]	; (800aac8 <USB_EPStartXfer+0xe58>)
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	238c      	movs	r3, #140	; 0x8c
 800a7a4:	18fb      	adds	r3, r7, r3
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	801a      	strh	r2, [r3, #0]
 800a7aa:	e2e5      	b.n	800ad78 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	78db      	ldrb	r3, [r3, #3]
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d000      	beq.n	800a7b6 <USB_EPStartXfer+0xb46>
 800a7b4:	e16f      	b.n	800aa96 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	785b      	ldrb	r3, [r3, #1]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d16f      	bne.n	800a89e <USB_EPStartXfer+0xc2e>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	21ac      	movs	r1, #172	; 0xac
 800a7c2:	187a      	adds	r2, r7, r1
 800a7c4:	6013      	str	r3, [r2, #0]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2250      	movs	r2, #80	; 0x50
 800a7ca:	5a9b      	ldrh	r3, [r3, r2]
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	001a      	movs	r2, r3
 800a7d0:	187b      	adds	r3, r7, r1
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	189b      	adds	r3, r3, r2
 800a7d6:	187a      	adds	r2, r7, r1
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	00da      	lsls	r2, r3, #3
 800a7e0:	187b      	adds	r3, r7, r1
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	18d3      	adds	r3, r2, r3
 800a7e6:	4ab9      	ldr	r2, [pc, #740]	; (800aacc <USB_EPStartXfer+0xe5c>)
 800a7e8:	4694      	mov	ip, r2
 800a7ea:	4463      	add	r3, ip
 800a7ec:	21a8      	movs	r1, #168	; 0xa8
 800a7ee:	187a      	adds	r2, r7, r1
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d114      	bne.n	800a824 <USB_EPStartXfer+0xbb4>
 800a7fa:	187b      	adds	r3, r7, r1
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	b29b      	uxth	r3, r3
 800a802:	4ab3      	ldr	r2, [pc, #716]	; (800aad0 <USB_EPStartXfer+0xe60>)
 800a804:	4013      	ands	r3, r2
 800a806:	b29a      	uxth	r2, r3
 800a808:	187b      	adds	r3, r7, r1
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	801a      	strh	r2, [r3, #0]
 800a80e:	187b      	adds	r3, r7, r1
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	b29b      	uxth	r3, r3
 800a816:	4aac      	ldr	r2, [pc, #688]	; (800aac8 <USB_EPStartXfer+0xe58>)
 800a818:	4313      	orrs	r3, r2
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	187b      	adds	r3, r7, r1
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	801a      	strh	r2, [r3, #0]
 800a822:	e060      	b.n	800a8e6 <USB_EPStartXfer+0xc76>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	2b3e      	cmp	r3, #62	; 0x3e
 800a82a:	d81a      	bhi.n	800a862 <USB_EPStartXfer+0xbf2>
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	085b      	lsrs	r3, r3, #1
 800a832:	21e4      	movs	r1, #228	; 0xe4
 800a834:	187a      	adds	r2, r7, r1
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	2201      	movs	r2, #1
 800a83e:	4013      	ands	r3, r2
 800a840:	d004      	beq.n	800a84c <USB_EPStartXfer+0xbdc>
 800a842:	187b      	adds	r3, r7, r1
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3301      	adds	r3, #1
 800a848:	187a      	adds	r2, r7, r1
 800a84a:	6013      	str	r3, [r2, #0]
 800a84c:	23e4      	movs	r3, #228	; 0xe4
 800a84e:	18fb      	adds	r3, r7, r3
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	b29b      	uxth	r3, r3
 800a854:	029b      	lsls	r3, r3, #10
 800a856:	b29a      	uxth	r2, r3
 800a858:	23a8      	movs	r3, #168	; 0xa8
 800a85a:	18fb      	adds	r3, r7, r3
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	801a      	strh	r2, [r3, #0]
 800a860:	e041      	b.n	800a8e6 <USB_EPStartXfer+0xc76>
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	095b      	lsrs	r3, r3, #5
 800a868:	21e4      	movs	r1, #228	; 0xe4
 800a86a:	187a      	adds	r2, r7, r1
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	221f      	movs	r2, #31
 800a874:	4013      	ands	r3, r2
 800a876:	d104      	bne.n	800a882 <USB_EPStartXfer+0xc12>
 800a878:	187b      	adds	r3, r7, r1
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	3b01      	subs	r3, #1
 800a87e:	187a      	adds	r2, r7, r1
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	23e4      	movs	r3, #228	; 0xe4
 800a884:	18fb      	adds	r3, r7, r3
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	b29b      	uxth	r3, r3
 800a88a:	029b      	lsls	r3, r3, #10
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	4a8e      	ldr	r2, [pc, #568]	; (800aac8 <USB_EPStartXfer+0xe58>)
 800a890:	4313      	orrs	r3, r2
 800a892:	b29a      	uxth	r2, r3
 800a894:	23a8      	movs	r3, #168	; 0xa8
 800a896:	18fb      	adds	r3, r7, r3
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	801a      	strh	r2, [r3, #0]
 800a89c:	e023      	b.n	800a8e6 <USB_EPStartXfer+0xc76>
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	785b      	ldrb	r3, [r3, #1]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d11f      	bne.n	800a8e6 <USB_EPStartXfer+0xc76>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	21b4      	movs	r1, #180	; 0xb4
 800a8aa:	187a      	adds	r2, r7, r1
 800a8ac:	6013      	str	r3, [r2, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2250      	movs	r2, #80	; 0x50
 800a8b2:	5a9b      	ldrh	r3, [r3, r2]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	001a      	movs	r2, r3
 800a8b8:	187b      	adds	r3, r7, r1
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	189b      	adds	r3, r3, r2
 800a8be:	187a      	adds	r2, r7, r1
 800a8c0:	6013      	str	r3, [r2, #0]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	00da      	lsls	r2, r3, #3
 800a8c8:	187b      	adds	r3, r7, r1
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	18d3      	adds	r3, r2, r3
 800a8ce:	4a7f      	ldr	r2, [pc, #508]	; (800aacc <USB_EPStartXfer+0xe5c>)
 800a8d0:	4694      	mov	ip, r2
 800a8d2:	4463      	add	r3, ip
 800a8d4:	21b0      	movs	r1, #176	; 0xb0
 800a8d6:	187a      	adds	r2, r7, r1
 800a8d8:	6013      	str	r3, [r2, #0]
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	187b      	adds	r3, r7, r1
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	801a      	strh	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	22a4      	movs	r2, #164	; 0xa4
 800a8ea:	18ba      	adds	r2, r7, r2
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	785b      	ldrb	r3, [r3, #1]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d16f      	bne.n	800a9d6 <USB_EPStartXfer+0xd66>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	219c      	movs	r1, #156	; 0x9c
 800a8fa:	187a      	adds	r2, r7, r1
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2250      	movs	r2, #80	; 0x50
 800a902:	5a9b      	ldrh	r3, [r3, r2]
 800a904:	b29b      	uxth	r3, r3
 800a906:	001a      	movs	r2, r3
 800a908:	187b      	adds	r3, r7, r1
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	189b      	adds	r3, r3, r2
 800a90e:	187a      	adds	r2, r7, r1
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	00da      	lsls	r2, r3, #3
 800a918:	187b      	adds	r3, r7, r1
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	18d3      	adds	r3, r2, r3
 800a91e:	4a6d      	ldr	r2, [pc, #436]	; (800aad4 <USB_EPStartXfer+0xe64>)
 800a920:	4694      	mov	ip, r2
 800a922:	4463      	add	r3, ip
 800a924:	2198      	movs	r1, #152	; 0x98
 800a926:	187a      	adds	r2, r7, r1
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d114      	bne.n	800a95c <USB_EPStartXfer+0xcec>
 800a932:	187b      	adds	r3, r7, r1
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	881b      	ldrh	r3, [r3, #0]
 800a938:	b29b      	uxth	r3, r3
 800a93a:	4a65      	ldr	r2, [pc, #404]	; (800aad0 <USB_EPStartXfer+0xe60>)
 800a93c:	4013      	ands	r3, r2
 800a93e:	b29a      	uxth	r2, r3
 800a940:	187b      	adds	r3, r7, r1
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	801a      	strh	r2, [r3, #0]
 800a946:	187b      	adds	r3, r7, r1
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	4a5e      	ldr	r2, [pc, #376]	; (800aac8 <USB_EPStartXfer+0xe58>)
 800a950:	4313      	orrs	r3, r2
 800a952:	b29a      	uxth	r2, r3
 800a954:	187b      	adds	r3, r7, r1
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	801a      	strh	r2, [r3, #0]
 800a95a:	e05d      	b.n	800aa18 <USB_EPStartXfer+0xda8>
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	2b3e      	cmp	r3, #62	; 0x3e
 800a962:	d81a      	bhi.n	800a99a <USB_EPStartXfer+0xd2a>
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	085b      	lsrs	r3, r3, #1
 800a96a:	21e0      	movs	r1, #224	; 0xe0
 800a96c:	187a      	adds	r2, r7, r1
 800a96e:	6013      	str	r3, [r2, #0]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	2201      	movs	r2, #1
 800a976:	4013      	ands	r3, r2
 800a978:	d004      	beq.n	800a984 <USB_EPStartXfer+0xd14>
 800a97a:	187b      	adds	r3, r7, r1
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	3301      	adds	r3, #1
 800a980:	187a      	adds	r2, r7, r1
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	23e0      	movs	r3, #224	; 0xe0
 800a986:	18fb      	adds	r3, r7, r3
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	029b      	lsls	r3, r3, #10
 800a98e:	b29a      	uxth	r2, r3
 800a990:	2398      	movs	r3, #152	; 0x98
 800a992:	18fb      	adds	r3, r7, r3
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	801a      	strh	r2, [r3, #0]
 800a998:	e03e      	b.n	800aa18 <USB_EPStartXfer+0xda8>
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	095b      	lsrs	r3, r3, #5
 800a9a0:	21e0      	movs	r1, #224	; 0xe0
 800a9a2:	187a      	adds	r2, r7, r1
 800a9a4:	6013      	str	r3, [r2, #0]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	221f      	movs	r2, #31
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	d104      	bne.n	800a9ba <USB_EPStartXfer+0xd4a>
 800a9b0:	187b      	adds	r3, r7, r1
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	187a      	adds	r2, r7, r1
 800a9b8:	6013      	str	r3, [r2, #0]
 800a9ba:	23e0      	movs	r3, #224	; 0xe0
 800a9bc:	18fb      	adds	r3, r7, r3
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	029b      	lsls	r3, r3, #10
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	4a40      	ldr	r2, [pc, #256]	; (800aac8 <USB_EPStartXfer+0xe58>)
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	2398      	movs	r3, #152	; 0x98
 800a9ce:	18fb      	adds	r3, r7, r3
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	801a      	strh	r2, [r3, #0]
 800a9d4:	e020      	b.n	800aa18 <USB_EPStartXfer+0xda8>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	785b      	ldrb	r3, [r3, #1]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d11c      	bne.n	800aa18 <USB_EPStartXfer+0xda8>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2250      	movs	r2, #80	; 0x50
 800a9e2:	5a9b      	ldrh	r3, [r3, r2]
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	001a      	movs	r2, r3
 800a9e8:	21a4      	movs	r1, #164	; 0xa4
 800a9ea:	187b      	adds	r3, r7, r1
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	189b      	adds	r3, r3, r2
 800a9f0:	187a      	adds	r2, r7, r1
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	00da      	lsls	r2, r3, #3
 800a9fa:	187b      	adds	r3, r7, r1
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	18d3      	adds	r3, r2, r3
 800aa00:	4a34      	ldr	r2, [pc, #208]	; (800aad4 <USB_EPStartXfer+0xe64>)
 800aa02:	4694      	mov	ip, r2
 800aa04:	4463      	add	r3, ip
 800aa06:	21a0      	movs	r1, #160	; 0xa0
 800aa08:	187a      	adds	r2, r7, r1
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	187b      	adds	r3, r7, r1
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	69db      	ldr	r3, [r3, #28]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d100      	bne.n	800aa22 <USB_EPStartXfer+0xdb2>
 800aa20:	e1aa      	b.n	800ad78 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	18d2      	adds	r2, r2, r3
 800aa2c:	2196      	movs	r1, #150	; 0x96
 800aa2e:	187b      	adds	r3, r7, r1
 800aa30:	8812      	ldrh	r2, [r2, #0]
 800aa32:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa34:	187b      	adds	r3, r7, r1
 800aa36:	881a      	ldrh	r2, [r3, #0]
 800aa38:	2380      	movs	r3, #128	; 0x80
 800aa3a:	01db      	lsls	r3, r3, #7
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	d004      	beq.n	800aa4a <USB_EPStartXfer+0xdda>
 800aa40:	187b      	adds	r3, r7, r1
 800aa42:	881b      	ldrh	r3, [r3, #0]
 800aa44:	2240      	movs	r2, #64	; 0x40
 800aa46:	4013      	ands	r3, r2
 800aa48:	d10d      	bne.n	800aa66 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa4a:	2196      	movs	r1, #150	; 0x96
 800aa4c:	187b      	adds	r3, r7, r1
 800aa4e:	881a      	ldrh	r2, [r3, #0]
 800aa50:	2380      	movs	r3, #128	; 0x80
 800aa52:	01db      	lsls	r3, r3, #7
 800aa54:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa56:	d000      	beq.n	800aa5a <USB_EPStartXfer+0xdea>
 800aa58:	e18e      	b.n	800ad78 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa5a:	187b      	adds	r3, r7, r1
 800aa5c:	881b      	ldrh	r3, [r3, #0]
 800aa5e:	2240      	movs	r2, #64	; 0x40
 800aa60:	4013      	ands	r3, r2
 800aa62:	d000      	beq.n	800aa66 <USB_EPStartXfer+0xdf6>
 800aa64:	e188      	b.n	800ad78 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	18d3      	adds	r3, r2, r3
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	2094      	movs	r0, #148	; 0x94
 800aa76:	183b      	adds	r3, r7, r0
 800aa78:	4917      	ldr	r1, [pc, #92]	; (800aad8 <USB_EPStartXfer+0xe68>)
 800aa7a:	400a      	ands	r2, r1
 800aa7c:	801a      	strh	r2, [r3, #0]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	18d3      	adds	r3, r2, r3
 800aa88:	183a      	adds	r2, r7, r0
 800aa8a:	8812      	ldrh	r2, [r2, #0]
 800aa8c:	4913      	ldr	r1, [pc, #76]	; (800aadc <USB_EPStartXfer+0xe6c>)
 800aa8e:	430a      	orrs	r2, r1
 800aa90:	b292      	uxth	r2, r2
 800aa92:	801a      	strh	r2, [r3, #0]
 800aa94:	e170      	b.n	800ad78 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	78db      	ldrb	r3, [r3, #3]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d000      	beq.n	800aaa0 <USB_EPStartXfer+0xe30>
 800aa9e:	e169      	b.n	800ad74 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	699a      	ldr	r2, [r3, #24]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d919      	bls.n	800aae0 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	1d7a      	adds	r2, r7, #5
 800aab2:	32ff      	adds	r2, #255	; 0xff
 800aab4:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	699a      	ldr	r2, [r3, #24]
 800aaba:	1d7b      	adds	r3, r7, #5
 800aabc:	33ff      	adds	r3, #255	; 0xff
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	1ad2      	subs	r2, r2, r3
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	619a      	str	r2, [r3, #24]
 800aac6:	e013      	b.n	800aaf0 <USB_EPStartXfer+0xe80>
 800aac8:	ffff8000 	.word	0xffff8000
 800aacc:	00000402 	.word	0x00000402
 800aad0:	ffff83ff 	.word	0xffff83ff
 800aad4:	00000406 	.word	0x00000406
 800aad8:	ffff8f8f 	.word	0xffff8f8f
 800aadc:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	1d7a      	adds	r2, r7, #5
 800aae6:	32ff      	adds	r2, #255	; 0xff
 800aae8:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2200      	movs	r2, #0
 800aaee:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	785b      	ldrb	r3, [r3, #1]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d000      	beq.n	800aafa <USB_EPStartXfer+0xe8a>
 800aaf8:	e075      	b.n	800abe6 <USB_EPStartXfer+0xf76>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	21cc      	movs	r1, #204	; 0xcc
 800aafe:	187a      	adds	r2, r7, r1
 800ab00:	6013      	str	r3, [r2, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2250      	movs	r2, #80	; 0x50
 800ab06:	5a9b      	ldrh	r3, [r3, r2]
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	001a      	movs	r2, r3
 800ab0c:	187b      	adds	r3, r7, r1
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	189b      	adds	r3, r3, r2
 800ab12:	187a      	adds	r2, r7, r1
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	00da      	lsls	r2, r3, #3
 800ab1c:	187b      	adds	r3, r7, r1
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	18d3      	adds	r3, r2, r3
 800ab22:	4aaa      	ldr	r2, [pc, #680]	; (800adcc <USB_EPStartXfer+0x115c>)
 800ab24:	4694      	mov	ip, r2
 800ab26:	4463      	add	r3, ip
 800ab28:	21c8      	movs	r1, #200	; 0xc8
 800ab2a:	187a      	adds	r2, r7, r1
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	1d7b      	adds	r3, r7, #5
 800ab30:	33ff      	adds	r3, #255	; 0xff
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d114      	bne.n	800ab62 <USB_EPStartXfer+0xef2>
 800ab38:	187b      	adds	r3, r7, r1
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	4aa3      	ldr	r2, [pc, #652]	; (800add0 <USB_EPStartXfer+0x1160>)
 800ab42:	4013      	ands	r3, r2
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	187b      	adds	r3, r7, r1
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	801a      	strh	r2, [r3, #0]
 800ab4c:	187b      	adds	r3, r7, r1
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	4a9f      	ldr	r2, [pc, #636]	; (800add4 <USB_EPStartXfer+0x1164>)
 800ab56:	4313      	orrs	r3, r2
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	187b      	adds	r3, r7, r1
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	801a      	strh	r2, [r3, #0]
 800ab60:	e066      	b.n	800ac30 <USB_EPStartXfer+0xfc0>
 800ab62:	1d7b      	adds	r3, r7, #5
 800ab64:	33ff      	adds	r3, #255	; 0xff
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b3e      	cmp	r3, #62	; 0x3e
 800ab6a:	d81c      	bhi.n	800aba6 <USB_EPStartXfer+0xf36>
 800ab6c:	1d7b      	adds	r3, r7, #5
 800ab6e:	33ff      	adds	r3, #255	; 0xff
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	085b      	lsrs	r3, r3, #1
 800ab74:	21dc      	movs	r1, #220	; 0xdc
 800ab76:	187a      	adds	r2, r7, r1
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	1d7b      	adds	r3, r7, #5
 800ab7c:	33ff      	adds	r3, #255	; 0xff
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2201      	movs	r2, #1
 800ab82:	4013      	ands	r3, r2
 800ab84:	d004      	beq.n	800ab90 <USB_EPStartXfer+0xf20>
 800ab86:	187b      	adds	r3, r7, r1
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	187a      	adds	r2, r7, r1
 800ab8e:	6013      	str	r3, [r2, #0]
 800ab90:	23dc      	movs	r3, #220	; 0xdc
 800ab92:	18fb      	adds	r3, r7, r3
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	029b      	lsls	r3, r3, #10
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	23c8      	movs	r3, #200	; 0xc8
 800ab9e:	18fb      	adds	r3, r7, r3
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	801a      	strh	r2, [r3, #0]
 800aba4:	e044      	b.n	800ac30 <USB_EPStartXfer+0xfc0>
 800aba6:	1d7b      	adds	r3, r7, #5
 800aba8:	33ff      	adds	r3, #255	; 0xff
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	095b      	lsrs	r3, r3, #5
 800abae:	21dc      	movs	r1, #220	; 0xdc
 800abb0:	187a      	adds	r2, r7, r1
 800abb2:	6013      	str	r3, [r2, #0]
 800abb4:	1d7b      	adds	r3, r7, #5
 800abb6:	33ff      	adds	r3, #255	; 0xff
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	221f      	movs	r2, #31
 800abbc:	4013      	ands	r3, r2
 800abbe:	d104      	bne.n	800abca <USB_EPStartXfer+0xf5a>
 800abc0:	187b      	adds	r3, r7, r1
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3b01      	subs	r3, #1
 800abc6:	187a      	adds	r2, r7, r1
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	23dc      	movs	r3, #220	; 0xdc
 800abcc:	18fb      	adds	r3, r7, r3
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	029b      	lsls	r3, r3, #10
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	4a7f      	ldr	r2, [pc, #508]	; (800add4 <USB_EPStartXfer+0x1164>)
 800abd8:	4313      	orrs	r3, r2
 800abda:	b29a      	uxth	r2, r3
 800abdc:	23c8      	movs	r3, #200	; 0xc8
 800abde:	18fb      	adds	r3, r7, r3
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	801a      	strh	r2, [r3, #0]
 800abe4:	e024      	b.n	800ac30 <USB_EPStartXfer+0xfc0>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	785b      	ldrb	r3, [r3, #1]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d120      	bne.n	800ac30 <USB_EPStartXfer+0xfc0>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	21d4      	movs	r1, #212	; 0xd4
 800abf2:	187a      	adds	r2, r7, r1
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2250      	movs	r2, #80	; 0x50
 800abfa:	5a9b      	ldrh	r3, [r3, r2]
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	001a      	movs	r2, r3
 800ac00:	187b      	adds	r3, r7, r1
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	189b      	adds	r3, r3, r2
 800ac06:	187a      	adds	r2, r7, r1
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	00da      	lsls	r2, r3, #3
 800ac10:	187b      	adds	r3, r7, r1
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	18d3      	adds	r3, r2, r3
 800ac16:	4a6d      	ldr	r2, [pc, #436]	; (800adcc <USB_EPStartXfer+0x115c>)
 800ac18:	4694      	mov	ip, r2
 800ac1a:	4463      	add	r3, ip
 800ac1c:	21d0      	movs	r1, #208	; 0xd0
 800ac1e:	187a      	adds	r2, r7, r1
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	1d7b      	adds	r3, r7, #5
 800ac24:	33ff      	adds	r3, #255	; 0xff
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	187b      	adds	r3, r7, r1
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	801a      	strh	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	22c4      	movs	r2, #196	; 0xc4
 800ac34:	18ba      	adds	r2, r7, r2
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	785b      	ldrb	r3, [r3, #1]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d000      	beq.n	800ac42 <USB_EPStartXfer+0xfd2>
 800ac40:	e075      	b.n	800ad2e <USB_EPStartXfer+0x10be>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	21bc      	movs	r1, #188	; 0xbc
 800ac46:	187a      	adds	r2, r7, r1
 800ac48:	6013      	str	r3, [r2, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2250      	movs	r2, #80	; 0x50
 800ac4e:	5a9b      	ldrh	r3, [r3, r2]
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	001a      	movs	r2, r3
 800ac54:	187b      	adds	r3, r7, r1
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	189b      	adds	r3, r3, r2
 800ac5a:	187a      	adds	r2, r7, r1
 800ac5c:	6013      	str	r3, [r2, #0]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	00da      	lsls	r2, r3, #3
 800ac64:	187b      	adds	r3, r7, r1
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	18d3      	adds	r3, r2, r3
 800ac6a:	4a5b      	ldr	r2, [pc, #364]	; (800add8 <USB_EPStartXfer+0x1168>)
 800ac6c:	4694      	mov	ip, r2
 800ac6e:	4463      	add	r3, ip
 800ac70:	21b8      	movs	r1, #184	; 0xb8
 800ac72:	187a      	adds	r2, r7, r1
 800ac74:	6013      	str	r3, [r2, #0]
 800ac76:	1d7b      	adds	r3, r7, #5
 800ac78:	33ff      	adds	r3, #255	; 0xff
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d114      	bne.n	800acaa <USB_EPStartXfer+0x103a>
 800ac80:	187b      	adds	r3, r7, r1
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	881b      	ldrh	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	4a51      	ldr	r2, [pc, #324]	; (800add0 <USB_EPStartXfer+0x1160>)
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	187b      	adds	r3, r7, r1
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	801a      	strh	r2, [r3, #0]
 800ac94:	187b      	adds	r3, r7, r1
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	4a4d      	ldr	r2, [pc, #308]	; (800add4 <USB_EPStartXfer+0x1164>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	187b      	adds	r3, r7, r1
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	801a      	strh	r2, [r3, #0]
 800aca8:	e066      	b.n	800ad78 <USB_EPStartXfer+0x1108>
 800acaa:	1d7b      	adds	r3, r7, #5
 800acac:	33ff      	adds	r3, #255	; 0xff
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b3e      	cmp	r3, #62	; 0x3e
 800acb2:	d81c      	bhi.n	800acee <USB_EPStartXfer+0x107e>
 800acb4:	1d7b      	adds	r3, r7, #5
 800acb6:	33ff      	adds	r3, #255	; 0xff
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	085b      	lsrs	r3, r3, #1
 800acbc:	21d8      	movs	r1, #216	; 0xd8
 800acbe:	187a      	adds	r2, r7, r1
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	1d7b      	adds	r3, r7, #5
 800acc4:	33ff      	adds	r3, #255	; 0xff
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2201      	movs	r2, #1
 800acca:	4013      	ands	r3, r2
 800accc:	d004      	beq.n	800acd8 <USB_EPStartXfer+0x1068>
 800acce:	187b      	adds	r3, r7, r1
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3301      	adds	r3, #1
 800acd4:	187a      	adds	r2, r7, r1
 800acd6:	6013      	str	r3, [r2, #0]
 800acd8:	23d8      	movs	r3, #216	; 0xd8
 800acda:	18fb      	adds	r3, r7, r3
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	029b      	lsls	r3, r3, #10
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	23b8      	movs	r3, #184	; 0xb8
 800ace6:	18fb      	adds	r3, r7, r3
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	801a      	strh	r2, [r3, #0]
 800acec:	e044      	b.n	800ad78 <USB_EPStartXfer+0x1108>
 800acee:	1d7b      	adds	r3, r7, #5
 800acf0:	33ff      	adds	r3, #255	; 0xff
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	095b      	lsrs	r3, r3, #5
 800acf6:	21d8      	movs	r1, #216	; 0xd8
 800acf8:	187a      	adds	r2, r7, r1
 800acfa:	6013      	str	r3, [r2, #0]
 800acfc:	1d7b      	adds	r3, r7, #5
 800acfe:	33ff      	adds	r3, #255	; 0xff
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	221f      	movs	r2, #31
 800ad04:	4013      	ands	r3, r2
 800ad06:	d104      	bne.n	800ad12 <USB_EPStartXfer+0x10a2>
 800ad08:	187b      	adds	r3, r7, r1
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	187a      	adds	r2, r7, r1
 800ad10:	6013      	str	r3, [r2, #0]
 800ad12:	23d8      	movs	r3, #216	; 0xd8
 800ad14:	18fb      	adds	r3, r7, r3
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	029b      	lsls	r3, r3, #10
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	4a2d      	ldr	r2, [pc, #180]	; (800add4 <USB_EPStartXfer+0x1164>)
 800ad20:	4313      	orrs	r3, r2
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	23b8      	movs	r3, #184	; 0xb8
 800ad26:	18fb      	adds	r3, r7, r3
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	801a      	strh	r2, [r3, #0]
 800ad2c:	e024      	b.n	800ad78 <USB_EPStartXfer+0x1108>
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	785b      	ldrb	r3, [r3, #1]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d120      	bne.n	800ad78 <USB_EPStartXfer+0x1108>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2250      	movs	r2, #80	; 0x50
 800ad3a:	5a9b      	ldrh	r3, [r3, r2]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	001a      	movs	r2, r3
 800ad40:	21c4      	movs	r1, #196	; 0xc4
 800ad42:	187b      	adds	r3, r7, r1
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	189b      	adds	r3, r3, r2
 800ad48:	187a      	adds	r2, r7, r1
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	00da      	lsls	r2, r3, #3
 800ad52:	187b      	adds	r3, r7, r1
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	18d3      	adds	r3, r2, r3
 800ad58:	4a1f      	ldr	r2, [pc, #124]	; (800add8 <USB_EPStartXfer+0x1168>)
 800ad5a:	4694      	mov	ip, r2
 800ad5c:	4463      	add	r3, ip
 800ad5e:	21c0      	movs	r1, #192	; 0xc0
 800ad60:	187a      	adds	r2, r7, r1
 800ad62:	6013      	str	r3, [r2, #0]
 800ad64:	1d7b      	adds	r3, r7, #5
 800ad66:	33ff      	adds	r3, #255	; 0xff
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	187b      	adds	r3, r7, r1
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	801a      	strh	r2, [r3, #0]
 800ad72:	e001      	b.n	800ad78 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e025      	b.n	800adc4 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	18d3      	adds	r3, r2, r3
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	208a      	movs	r0, #138	; 0x8a
 800ad88:	183b      	adds	r3, r7, r0
 800ad8a:	4914      	ldr	r1, [pc, #80]	; (800addc <USB_EPStartXfer+0x116c>)
 800ad8c:	400a      	ands	r2, r1
 800ad8e:	801a      	strh	r2, [r3, #0]
 800ad90:	183b      	adds	r3, r7, r0
 800ad92:	183a      	adds	r2, r7, r0
 800ad94:	8812      	ldrh	r2, [r2, #0]
 800ad96:	2180      	movs	r1, #128	; 0x80
 800ad98:	0149      	lsls	r1, r1, #5
 800ad9a:	404a      	eors	r2, r1
 800ad9c:	801a      	strh	r2, [r3, #0]
 800ad9e:	183b      	adds	r3, r7, r0
 800ada0:	183a      	adds	r2, r7, r0
 800ada2:	8812      	ldrh	r2, [r2, #0]
 800ada4:	2180      	movs	r1, #128	; 0x80
 800ada6:	0189      	lsls	r1, r1, #6
 800ada8:	404a      	eors	r2, r1
 800adaa:	801a      	strh	r2, [r3, #0]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	18d3      	adds	r3, r2, r3
 800adb6:	183a      	adds	r2, r7, r0
 800adb8:	8812      	ldrh	r2, [r2, #0]
 800adba:	4909      	ldr	r1, [pc, #36]	; (800ade0 <USB_EPStartXfer+0x1170>)
 800adbc:	430a      	orrs	r2, r1
 800adbe:	b292      	uxth	r2, r2
 800adc0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	0018      	movs	r0, r3
 800adc6:	46bd      	mov	sp, r7
 800adc8:	b043      	add	sp, #268	; 0x10c
 800adca:	bd90      	pop	{r4, r7, pc}
 800adcc:	00000402 	.word	0x00000402
 800add0:	ffff83ff 	.word	0xffff83ff
 800add4:	ffff8000 	.word	0xffff8000
 800add8:	00000406 	.word	0x00000406
 800addc:	ffffbf8f 	.word	0xffffbf8f
 800ade0:	ffff8080 	.word	0xffff8080

0800ade4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	785b      	ldrb	r3, [r3, #1]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d01d      	beq.n	800ae32 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	18d3      	adds	r3, r2, r3
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	200c      	movs	r0, #12
 800ae06:	183b      	adds	r3, r7, r0
 800ae08:	491b      	ldr	r1, [pc, #108]	; (800ae78 <USB_EPSetStall+0x94>)
 800ae0a:	400a      	ands	r2, r1
 800ae0c:	801a      	strh	r2, [r3, #0]
 800ae0e:	183b      	adds	r3, r7, r0
 800ae10:	183a      	adds	r2, r7, r0
 800ae12:	8812      	ldrh	r2, [r2, #0]
 800ae14:	2110      	movs	r1, #16
 800ae16:	404a      	eors	r2, r1
 800ae18:	801a      	strh	r2, [r3, #0]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	18d3      	adds	r3, r2, r3
 800ae24:	183a      	adds	r2, r7, r0
 800ae26:	8812      	ldrh	r2, [r2, #0]
 800ae28:	4914      	ldr	r1, [pc, #80]	; (800ae7c <USB_EPSetStall+0x98>)
 800ae2a:	430a      	orrs	r2, r1
 800ae2c:	b292      	uxth	r2, r2
 800ae2e:	801a      	strh	r2, [r3, #0]
 800ae30:	e01d      	b.n	800ae6e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	18d3      	adds	r3, r2, r3
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	200e      	movs	r0, #14
 800ae42:	183b      	adds	r3, r7, r0
 800ae44:	490e      	ldr	r1, [pc, #56]	; (800ae80 <USB_EPSetStall+0x9c>)
 800ae46:	400a      	ands	r2, r1
 800ae48:	801a      	strh	r2, [r3, #0]
 800ae4a:	183b      	adds	r3, r7, r0
 800ae4c:	183a      	adds	r2, r7, r0
 800ae4e:	8812      	ldrh	r2, [r2, #0]
 800ae50:	2180      	movs	r1, #128	; 0x80
 800ae52:	0149      	lsls	r1, r1, #5
 800ae54:	404a      	eors	r2, r1
 800ae56:	801a      	strh	r2, [r3, #0]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	18d3      	adds	r3, r2, r3
 800ae62:	183a      	adds	r2, r7, r0
 800ae64:	8812      	ldrh	r2, [r2, #0]
 800ae66:	4905      	ldr	r1, [pc, #20]	; (800ae7c <USB_EPSetStall+0x98>)
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	b292      	uxth	r2, r2
 800ae6c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	0018      	movs	r0, r3
 800ae72:	46bd      	mov	sp, r7
 800ae74:	b004      	add	sp, #16
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	ffff8fbf 	.word	0xffff8fbf
 800ae7c:	ffff8080 	.word	0xffff8080
 800ae80:	ffffbf8f 	.word	0xffffbf8f

0800ae84 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	7b1b      	ldrb	r3, [r3, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d000      	beq.n	800ae98 <USB_EPClearStall+0x14>
 800ae96:	e095      	b.n	800afc4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	785b      	ldrb	r3, [r3, #1]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d046      	beq.n	800af2e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	18d2      	adds	r2, r2, r3
 800aeaa:	2110      	movs	r1, #16
 800aeac:	187b      	adds	r3, r7, r1
 800aeae:	8812      	ldrh	r2, [r2, #0]
 800aeb0:	801a      	strh	r2, [r3, #0]
 800aeb2:	187b      	adds	r3, r7, r1
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	2240      	movs	r2, #64	; 0x40
 800aeb8:	4013      	ands	r3, r2
 800aeba:	d016      	beq.n	800aeea <USB_EPClearStall+0x66>
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	18d3      	adds	r3, r2, r3
 800aec6:	881b      	ldrh	r3, [r3, #0]
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	200e      	movs	r0, #14
 800aecc:	183b      	adds	r3, r7, r0
 800aece:	4940      	ldr	r1, [pc, #256]	; (800afd0 <USB_EPClearStall+0x14c>)
 800aed0:	400a      	ands	r2, r1
 800aed2:	801a      	strh	r2, [r3, #0]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	18d3      	adds	r3, r2, r3
 800aede:	183a      	adds	r2, r7, r0
 800aee0:	8812      	ldrh	r2, [r2, #0]
 800aee2:	493c      	ldr	r1, [pc, #240]	; (800afd4 <USB_EPClearStall+0x150>)
 800aee4:	430a      	orrs	r2, r1
 800aee6:	b292      	uxth	r2, r2
 800aee8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	78db      	ldrb	r3, [r3, #3]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d068      	beq.n	800afc4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	18d3      	adds	r3, r2, r3
 800aefc:	881b      	ldrh	r3, [r3, #0]
 800aefe:	b29a      	uxth	r2, r3
 800af00:	200c      	movs	r0, #12
 800af02:	183b      	adds	r3, r7, r0
 800af04:	4934      	ldr	r1, [pc, #208]	; (800afd8 <USB_EPClearStall+0x154>)
 800af06:	400a      	ands	r2, r1
 800af08:	801a      	strh	r2, [r3, #0]
 800af0a:	183b      	adds	r3, r7, r0
 800af0c:	183a      	adds	r2, r7, r0
 800af0e:	8812      	ldrh	r2, [r2, #0]
 800af10:	2120      	movs	r1, #32
 800af12:	404a      	eors	r2, r1
 800af14:	801a      	strh	r2, [r3, #0]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	18d3      	adds	r3, r2, r3
 800af20:	183a      	adds	r2, r7, r0
 800af22:	8812      	ldrh	r2, [r2, #0]
 800af24:	492d      	ldr	r1, [pc, #180]	; (800afdc <USB_EPClearStall+0x158>)
 800af26:	430a      	orrs	r2, r1
 800af28:	b292      	uxth	r2, r2
 800af2a:	801a      	strh	r2, [r3, #0]
 800af2c:	e04a      	b.n	800afc4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	18d2      	adds	r2, r2, r3
 800af38:	2116      	movs	r1, #22
 800af3a:	187b      	adds	r3, r7, r1
 800af3c:	8812      	ldrh	r2, [r2, #0]
 800af3e:	801a      	strh	r2, [r3, #0]
 800af40:	187b      	adds	r3, r7, r1
 800af42:	881a      	ldrh	r2, [r3, #0]
 800af44:	2380      	movs	r3, #128	; 0x80
 800af46:	01db      	lsls	r3, r3, #7
 800af48:	4013      	ands	r3, r2
 800af4a:	d016      	beq.n	800af7a <USB_EPClearStall+0xf6>
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	18d3      	adds	r3, r2, r3
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	b29a      	uxth	r2, r3
 800af5a:	2014      	movs	r0, #20
 800af5c:	183b      	adds	r3, r7, r0
 800af5e:	491c      	ldr	r1, [pc, #112]	; (800afd0 <USB_EPClearStall+0x14c>)
 800af60:	400a      	ands	r2, r1
 800af62:	801a      	strh	r2, [r3, #0]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	18d3      	adds	r3, r2, r3
 800af6e:	183a      	adds	r2, r7, r0
 800af70:	8812      	ldrh	r2, [r2, #0]
 800af72:	491b      	ldr	r1, [pc, #108]	; (800afe0 <USB_EPClearStall+0x15c>)
 800af74:	430a      	orrs	r2, r1
 800af76:	b292      	uxth	r2, r2
 800af78:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	18d3      	adds	r3, r2, r3
 800af84:	881b      	ldrh	r3, [r3, #0]
 800af86:	b29a      	uxth	r2, r3
 800af88:	2012      	movs	r0, #18
 800af8a:	183b      	adds	r3, r7, r0
 800af8c:	4915      	ldr	r1, [pc, #84]	; (800afe4 <USB_EPClearStall+0x160>)
 800af8e:	400a      	ands	r2, r1
 800af90:	801a      	strh	r2, [r3, #0]
 800af92:	183b      	adds	r3, r7, r0
 800af94:	183a      	adds	r2, r7, r0
 800af96:	8812      	ldrh	r2, [r2, #0]
 800af98:	2180      	movs	r1, #128	; 0x80
 800af9a:	0149      	lsls	r1, r1, #5
 800af9c:	404a      	eors	r2, r1
 800af9e:	801a      	strh	r2, [r3, #0]
 800afa0:	183b      	adds	r3, r7, r0
 800afa2:	183a      	adds	r2, r7, r0
 800afa4:	8812      	ldrh	r2, [r2, #0]
 800afa6:	2180      	movs	r1, #128	; 0x80
 800afa8:	0189      	lsls	r1, r1, #6
 800afaa:	404a      	eors	r2, r1
 800afac:	801a      	strh	r2, [r3, #0]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	18d3      	adds	r3, r2, r3
 800afb8:	183a      	adds	r2, r7, r0
 800afba:	8812      	ldrh	r2, [r2, #0]
 800afbc:	4907      	ldr	r1, [pc, #28]	; (800afdc <USB_EPClearStall+0x158>)
 800afbe:	430a      	orrs	r2, r1
 800afc0:	b292      	uxth	r2, r2
 800afc2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	0018      	movs	r0, r3
 800afc8:	46bd      	mov	sp, r7
 800afca:	b006      	add	sp, #24
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	46c0      	nop			; (mov r8, r8)
 800afd0:	ffff8f8f 	.word	0xffff8f8f
 800afd4:	ffff80c0 	.word	0xffff80c0
 800afd8:	ffff8fbf 	.word	0xffff8fbf
 800afdc:	ffff8080 	.word	0xffff8080
 800afe0:	ffffc080 	.word	0xffffc080
 800afe4:	ffffbf8f 	.word	0xffffbf8f

0800afe8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	000a      	movs	r2, r1
 800aff2:	1cfb      	adds	r3, r7, #3
 800aff4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800aff6:	1cfb      	adds	r3, r7, #3
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d103      	bne.n	800b006 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	224c      	movs	r2, #76	; 0x4c
 800b002:	2180      	movs	r1, #128	; 0x80
 800b004:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	0018      	movs	r0, r3
 800b00a:	46bd      	mov	sp, r7
 800b00c:	b002      	add	sp, #8
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2258      	movs	r2, #88	; 0x58
 800b01c:	5a9b      	ldrh	r3, [r3, r2]
 800b01e:	b29b      	uxth	r3, r3
 800b020:	4a05      	ldr	r2, [pc, #20]	; (800b038 <USB_DevConnect+0x28>)
 800b022:	4313      	orrs	r3, r2
 800b024:	b299      	uxth	r1, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2258      	movs	r2, #88	; 0x58
 800b02a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	0018      	movs	r0, r3
 800b030:	46bd      	mov	sp, r7
 800b032:	b002      	add	sp, #8
 800b034:	bd80      	pop	{r7, pc}
 800b036:	46c0      	nop			; (mov r8, r8)
 800b038:	ffff8000 	.word	0xffff8000

0800b03c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2244      	movs	r2, #68	; 0x44
 800b048:	5a9b      	ldrh	r3, [r3, r2]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b04e:	68fb      	ldr	r3, [r7, #12]
}
 800b050:	0018      	movs	r0, r3
 800b052:	46bd      	mov	sp, r7
 800b054:	b004      	add	sp, #16
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b08c      	sub	sp, #48	; 0x30
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	0019      	movs	r1, r3
 800b064:	1dbb      	adds	r3, r7, #6
 800b066:	801a      	strh	r2, [r3, #0]
 800b068:	1d3b      	adds	r3, r7, #4
 800b06a:	1c0a      	adds	r2, r1, #0
 800b06c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b06e:	1d3b      	adds	r3, r7, #4
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	3301      	adds	r3, #1
 800b074:	085b      	lsrs	r3, r3, #1
 800b076:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b080:	1dbb      	adds	r3, r7, #6
 800b082:	881a      	ldrh	r2, [r3, #0]
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	18d3      	adds	r3, r2, r3
 800b088:	2280      	movs	r2, #128	; 0x80
 800b08a:	00d2      	lsls	r2, r2, #3
 800b08c:	4694      	mov	ip, r2
 800b08e:	4463      	add	r3, ip
 800b090:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b096:	e01b      	b.n	800b0d0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	021b      	lsls	r3, r3, #8
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	001a      	movs	r2, r3
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c0:	3302      	adds	r3, #2
 800b0c2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1e0      	bne.n	800b098 <USB_WritePMA+0x40>
  }
}
 800b0d6:	46c0      	nop			; (mov r8, r8)
 800b0d8:	46c0      	nop			; (mov r8, r8)
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	b00c      	add	sp, #48	; 0x30
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08a      	sub	sp, #40	; 0x28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	0019      	movs	r1, r3
 800b0ec:	1dbb      	adds	r3, r7, #6
 800b0ee:	801a      	strh	r2, [r3, #0]
 800b0f0:	1d3b      	adds	r3, r7, #4
 800b0f2:	1c0a      	adds	r2, r1, #0
 800b0f4:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b0f6:	1d3b      	adds	r3, r7, #4
 800b0f8:	881b      	ldrh	r3, [r3, #0]
 800b0fa:	085b      	lsrs	r3, r3, #1
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b108:	1dbb      	adds	r3, r7, #6
 800b10a:	881a      	ldrh	r2, [r3, #0]
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	18d3      	adds	r3, r2, r3
 800b110:	2280      	movs	r2, #128	; 0x80
 800b112:	00d2      	lsls	r2, r2, #3
 800b114:	4694      	mov	ip, r2
 800b116:	4463      	add	r3, ip
 800b118:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
 800b11e:	e018      	b.n	800b152 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b120:	6a3b      	ldr	r3, [r7, #32]
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	b29b      	uxth	r3, r3
 800b126:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b128:	6a3b      	ldr	r3, [r7, #32]
 800b12a:	3302      	adds	r3, #2
 800b12c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	b2da      	uxtb	r2, r3
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	3301      	adds	r3, #1
 800b13a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	0a1b      	lsrs	r3, r3, #8
 800b140:	b2da      	uxtb	r2, r3
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	3301      	adds	r3, #1
 800b14a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14e:	3b01      	subs	r3, #1
 800b150:	627b      	str	r3, [r7, #36]	; 0x24
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1e3      	bne.n	800b120 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b158:	1d3b      	adds	r3, r7, #4
 800b15a:	881b      	ldrh	r3, [r3, #0]
 800b15c:	2201      	movs	r2, #1
 800b15e:	4013      	ands	r3, r2
 800b160:	b29b      	uxth	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d007      	beq.n	800b176 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	b2da      	uxtb	r2, r3
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	701a      	strb	r2, [r3, #0]
  }
}
 800b176:	46c0      	nop			; (mov r8, r8)
 800b178:	46bd      	mov	sp, r7
 800b17a:	b00a      	add	sp, #40	; 0x28
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	000a      	movs	r2, r1
 800b188:	1cfb      	adds	r3, r7, #3
 800b18a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b18c:	230f      	movs	r3, #15
 800b18e:	18fb      	adds	r3, r7, r3
 800b190:	2200      	movs	r2, #0
 800b192:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	7c1b      	ldrb	r3, [r3, #16]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d116      	bne.n	800b1ca <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b19c:	2380      	movs	r3, #128	; 0x80
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	2181      	movs	r1, #129	; 0x81
 800b1a6:	f002 f8b4 	bl	800d312 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b1b0:	2380      	movs	r3, #128	; 0x80
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	2101      	movs	r1, #1
 800b1ba:	f002 f8aa 	bl	800d312 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	23b6      	movs	r3, #182	; 0xb6
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	50d1      	str	r1, [r2, r3]
 800b1c8:	e013      	b.n	800b1f2 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	2340      	movs	r3, #64	; 0x40
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	2181      	movs	r1, #129	; 0x81
 800b1d2:	f002 f89e 	bl	800d312 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	2340      	movs	r3, #64	; 0x40
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	f002 f895 	bl	800d312 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	23b6      	movs	r3, #182	; 0xb6
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	2308      	movs	r3, #8
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	2182      	movs	r1, #130	; 0x82
 800b1fa:	f002 f88a 	bl	800d312 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2201      	movs	r2, #1
 800b202:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b204:	2387      	movs	r3, #135	; 0x87
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	0018      	movs	r0, r3
 800b20a:	f002 fa1b 	bl	800d644 <USBD_static_malloc>
 800b20e:	0001      	movs	r1, r0
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	23ae      	movs	r3, #174	; 0xae
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	23ae      	movs	r3, #174	; 0xae
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	58d3      	ldr	r3, [r2, r3]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d104      	bne.n	800b22e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800b224:	230f      	movs	r3, #15
 800b226:	18fb      	adds	r3, r7, r3
 800b228:	2201      	movs	r2, #1
 800b22a:	701a      	strb	r2, [r3, #0]
 800b22c:	e02c      	b.n	800b288 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	23ae      	movs	r3, #174	; 0xae
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	58d3      	ldr	r3, [r2, r3]
 800b236:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	23af      	movs	r3, #175	; 0xaf
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	58d3      	ldr	r3, [r2, r3]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	2385      	movs	r3, #133	; 0x85
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	2100      	movs	r1, #0
 800b24c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	2386      	movs	r3, #134	; 0x86
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	2100      	movs	r1, #0
 800b256:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	7c1b      	ldrb	r3, [r3, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10a      	bne.n	800b276 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	2381      	movs	r3, #129	; 0x81
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	58d2      	ldr	r2, [r2, r3]
 800b268:	2380      	movs	r3, #128	; 0x80
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	2101      	movs	r1, #1
 800b270:	f002 f99a 	bl	800d5a8 <USBD_LL_PrepareReceive>
 800b274:	e008      	b.n	800b288 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	2381      	movs	r3, #129	; 0x81
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	58d2      	ldr	r2, [r2, r3]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	2340      	movs	r3, #64	; 0x40
 800b282:	2101      	movs	r1, #1
 800b284:	f002 f990 	bl	800d5a8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b288:	230f      	movs	r3, #15
 800b28a:	18fb      	adds	r3, r7, r3
 800b28c:	781b      	ldrb	r3, [r3, #0]
}
 800b28e:	0018      	movs	r0, r3
 800b290:	46bd      	mov	sp, r7
 800b292:	b004      	add	sp, #16
 800b294:	bd80      	pop	{r7, pc}

0800b296 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b084      	sub	sp, #16
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	000a      	movs	r2, r1
 800b2a0:	1cfb      	adds	r3, r7, #3
 800b2a2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b2a4:	230f      	movs	r3, #15
 800b2a6:	18fb      	adds	r3, r7, r3
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2181      	movs	r1, #129	; 0x81
 800b2b0:	0018      	movs	r0, r3
 800b2b2:	f002 f865 	bl	800d380 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2101      	movs	r1, #1
 800b2c0:	0018      	movs	r0, r3
 800b2c2:	f002 f85d 	bl	800d380 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	23b6      	movs	r3, #182	; 0xb6
 800b2ca:	005b      	lsls	r3, r3, #1
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2182      	movs	r1, #130	; 0x82
 800b2d4:	0018      	movs	r0, r3
 800b2d6:	f002 f853 	bl	800d380 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	23ae      	movs	r3, #174	; 0xae
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	58d3      	ldr	r3, [r2, r3]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d011      	beq.n	800b310 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	23af      	movs	r3, #175	; 0xaf
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	58d3      	ldr	r3, [r2, r3]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	23ae      	movs	r3, #174	; 0xae
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	58d3      	ldr	r3, [r2, r3]
 800b300:	0018      	movs	r0, r3
 800b302:	f002 f9ab 	bl	800d65c <USBD_static_free>
    pdev->pClassData = NULL;
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	23ae      	movs	r3, #174	; 0xae
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	2100      	movs	r1, #0
 800b30e:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800b310:	230f      	movs	r3, #15
 800b312:	18fb      	adds	r3, r7, r3
 800b314:	781b      	ldrb	r3, [r3, #0]
}
 800b316:	0018      	movs	r0, r3
 800b318:	46bd      	mov	sp, r7
 800b31a:	b004      	add	sp, #16
 800b31c:	bd80      	pop	{r7, pc}
	...

0800b320 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	23ae      	movs	r3, #174	; 0xae
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	58d3      	ldr	r3, [r2, r3]
 800b332:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b334:	230f      	movs	r3, #15
 800b336:	18fb      	adds	r3, r7, r3
 800b338:	2200      	movs	r2, #0
 800b33a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800b33c:	230c      	movs	r3, #12
 800b33e:	18fb      	adds	r3, r7, r3
 800b340:	2200      	movs	r2, #0
 800b342:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800b344:	2317      	movs	r3, #23
 800b346:	18fb      	adds	r3, r7, r3
 800b348:	2200      	movs	r2, #0
 800b34a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	001a      	movs	r2, r3
 800b352:	2360      	movs	r3, #96	; 0x60
 800b354:	4013      	ands	r3, r2
 800b356:	d03d      	beq.n	800b3d4 <USBD_CDC_Setup+0xb4>
 800b358:	2b20      	cmp	r3, #32
 800b35a:	d000      	beq.n	800b35e <USBD_CDC_Setup+0x3e>
 800b35c:	e094      	b.n	800b488 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	88db      	ldrh	r3, [r3, #6]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d02b      	beq.n	800b3be <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	b25b      	sxtb	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	da12      	bge.n	800b396 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	23af      	movs	r3, #175	; 0xaf
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	58d3      	ldr	r3, [r2, r3]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b37e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	88d2      	ldrh	r2, [r2, #6]
 800b384:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b386:	6939      	ldr	r1, [r7, #16]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	88da      	ldrh	r2, [r3, #6]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	0018      	movs	r0, r3
 800b390:	f001 fbb2 	bl	800caf8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b394:	e083      	b.n	800b49e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	7859      	ldrb	r1, [r3, #1]
 800b39a:	693a      	ldr	r2, [r7, #16]
 800b39c:	2380      	movs	r3, #128	; 0x80
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	88db      	ldrh	r3, [r3, #6]
 800b3a6:	b2d9      	uxtb	r1, r3
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	4a40      	ldr	r2, [pc, #256]	; (800b4ac <USBD_CDC_Setup+0x18c>)
 800b3ac:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b3ae:	6939      	ldr	r1, [r7, #16]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	88da      	ldrh	r2, [r3, #6]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	0018      	movs	r0, r3
 800b3b8:	f001 fbd1 	bl	800cb5e <USBD_CtlPrepareRx>
      break;
 800b3bc:	e06f      	b.n	800b49e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	23af      	movs	r3, #175	; 0xaf
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	58d3      	ldr	r3, [r2, r3]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	7850      	ldrb	r0, [r2, #1]
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	4798      	blx	r3
      break;
 800b3d2:	e064      	b.n	800b49e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	785b      	ldrb	r3, [r3, #1]
 800b3d8:	2b0b      	cmp	r3, #11
 800b3da:	d037      	beq.n	800b44c <USBD_CDC_Setup+0x12c>
 800b3dc:	dc47      	bgt.n	800b46e <USBD_CDC_Setup+0x14e>
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <USBD_CDC_Setup+0xc8>
 800b3e2:	2b0a      	cmp	r3, #10
 800b3e4:	d019      	beq.n	800b41a <USBD_CDC_Setup+0xfa>
 800b3e6:	e042      	b.n	800b46e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	23a7      	movs	r3, #167	; 0xa7
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	5cd3      	ldrb	r3, [r2, r3]
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d107      	bne.n	800b404 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b3f4:	230c      	movs	r3, #12
 800b3f6:	18f9      	adds	r1, r7, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2202      	movs	r2, #2
 800b3fc:	0018      	movs	r0, r3
 800b3fe:	f001 fb7b 	bl	800caf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b402:	e040      	b.n	800b486 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b404:	683a      	ldr	r2, [r7, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	0011      	movs	r1, r2
 800b40a:	0018      	movs	r0, r3
 800b40c:	f001 faf6 	bl	800c9fc <USBD_CtlError>
            ret = USBD_FAIL;
 800b410:	2317      	movs	r3, #23
 800b412:	18fb      	adds	r3, r7, r3
 800b414:	2202      	movs	r2, #2
 800b416:	701a      	strb	r2, [r3, #0]
          break;
 800b418:	e035      	b.n	800b486 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	23a7      	movs	r3, #167	; 0xa7
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	5cd3      	ldrb	r3, [r2, r3]
 800b422:	2b03      	cmp	r3, #3
 800b424:	d107      	bne.n	800b436 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b426:	230f      	movs	r3, #15
 800b428:	18f9      	adds	r1, r7, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	0018      	movs	r0, r3
 800b430:	f001 fb62 	bl	800caf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b434:	e027      	b.n	800b486 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	0011      	movs	r1, r2
 800b43c:	0018      	movs	r0, r3
 800b43e:	f001 fadd 	bl	800c9fc <USBD_CtlError>
            ret = USBD_FAIL;
 800b442:	2317      	movs	r3, #23
 800b444:	18fb      	adds	r3, r7, r3
 800b446:	2202      	movs	r2, #2
 800b448:	701a      	strb	r2, [r3, #0]
          break;
 800b44a:	e01c      	b.n	800b486 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	23a7      	movs	r3, #167	; 0xa7
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	5cd3      	ldrb	r3, [r2, r3]
 800b454:	2b03      	cmp	r3, #3
 800b456:	d015      	beq.n	800b484 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	0011      	movs	r1, r2
 800b45e:	0018      	movs	r0, r3
 800b460:	f001 facc 	bl	800c9fc <USBD_CtlError>
            ret = USBD_FAIL;
 800b464:	2317      	movs	r3, #23
 800b466:	18fb      	adds	r3, r7, r3
 800b468:	2202      	movs	r2, #2
 800b46a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800b46c:	e00a      	b.n	800b484 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	0011      	movs	r1, r2
 800b474:	0018      	movs	r0, r3
 800b476:	f001 fac1 	bl	800c9fc <USBD_CtlError>
          ret = USBD_FAIL;
 800b47a:	2317      	movs	r3, #23
 800b47c:	18fb      	adds	r3, r7, r3
 800b47e:	2202      	movs	r2, #2
 800b480:	701a      	strb	r2, [r3, #0]
          break;
 800b482:	e000      	b.n	800b486 <USBD_CDC_Setup+0x166>
          break;
 800b484:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b486:	e00a      	b.n	800b49e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	0011      	movs	r1, r2
 800b48e:	0018      	movs	r0, r3
 800b490:	f001 fab4 	bl	800c9fc <USBD_CtlError>
      ret = USBD_FAIL;
 800b494:	2317      	movs	r3, #23
 800b496:	18fb      	adds	r3, r7, r3
 800b498:	2202      	movs	r2, #2
 800b49a:	701a      	strb	r2, [r3, #0]
      break;
 800b49c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b49e:	2317      	movs	r3, #23
 800b4a0:	18fb      	adds	r3, r7, r3
 800b4a2:	781b      	ldrb	r3, [r3, #0]
}
 800b4a4:	0018      	movs	r0, r3
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	b006      	add	sp, #24
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	00000201 	.word	0x00000201

0800b4b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	000a      	movs	r2, r1
 800b4ba:	1cfb      	adds	r3, r7, #3
 800b4bc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	23ae      	movs	r3, #174	; 0xae
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	58d3      	ldr	r3, [r2, r3]
 800b4c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	23b0      	movs	r3, #176	; 0xb0
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	58d3      	ldr	r3, [r2, r3]
 800b4d0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	23ae      	movs	r3, #174	; 0xae
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	58d3      	ldr	r3, [r2, r3]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d03e      	beq.n	800b55c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b4de:	1cfb      	adds	r3, r7, #3
 800b4e0:	781a      	ldrb	r2, [r3, #0]
 800b4e2:	6879      	ldr	r1, [r7, #4]
 800b4e4:	0013      	movs	r3, r2
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	189b      	adds	r3, r3, r2
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	18cb      	adds	r3, r1, r3
 800b4ee:	331c      	adds	r3, #28
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d02b      	beq.n	800b54e <USBD_CDC_DataIn+0x9e>
 800b4f6:	1cfb      	adds	r3, r7, #3
 800b4f8:	781a      	ldrb	r2, [r3, #0]
 800b4fa:	6879      	ldr	r1, [r7, #4]
 800b4fc:	0013      	movs	r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	189b      	adds	r3, r3, r2
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	18cb      	adds	r3, r1, r3
 800b506:	331c      	adds	r3, #28
 800b508:	6818      	ldr	r0, [r3, #0]
 800b50a:	1cfb      	adds	r3, r7, #3
 800b50c:	781a      	ldrb	r2, [r3, #0]
 800b50e:	68b9      	ldr	r1, [r7, #8]
 800b510:	0013      	movs	r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	189b      	adds	r3, r3, r2
 800b516:	00db      	lsls	r3, r3, #3
 800b518:	18cb      	adds	r3, r1, r3
 800b51a:	3338      	adds	r3, #56	; 0x38
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	0019      	movs	r1, r3
 800b520:	f7f4 fe8a 	bl	8000238 <__aeabi_uidivmod>
 800b524:	1e0b      	subs	r3, r1, #0
 800b526:	d112      	bne.n	800b54e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b528:	1cfb      	adds	r3, r7, #3
 800b52a:	781a      	ldrb	r2, [r3, #0]
 800b52c:	6879      	ldr	r1, [r7, #4]
 800b52e:	0013      	movs	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	189b      	adds	r3, r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	18cb      	adds	r3, r1, r3
 800b538:	331c      	adds	r3, #28
 800b53a:	2200      	movs	r2, #0
 800b53c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b53e:	1cfb      	adds	r3, r7, #3
 800b540:	7819      	ldrb	r1, [r3, #0]
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	2300      	movs	r3, #0
 800b546:	2200      	movs	r2, #0
 800b548:	f001 fff7 	bl	800d53a <USBD_LL_Transmit>
 800b54c:	e004      	b.n	800b558 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	2385      	movs	r3, #133	; 0x85
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	2100      	movs	r1, #0
 800b556:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800b558:	2300      	movs	r3, #0
 800b55a:	e000      	b.n	800b55e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800b55c:	2302      	movs	r3, #2
  }
}
 800b55e:	0018      	movs	r0, r3
 800b560:	46bd      	mov	sp, r7
 800b562:	b004      	add	sp, #16
 800b564:	bd80      	pop	{r7, pc}

0800b566 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	000a      	movs	r2, r1
 800b570:	1cfb      	adds	r3, r7, #3
 800b572:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	23ae      	movs	r3, #174	; 0xae
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	58d3      	ldr	r3, [r2, r3]
 800b57c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b57e:	1cfb      	adds	r3, r7, #3
 800b580:	781a      	ldrb	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	0011      	movs	r1, r2
 800b586:	0018      	movs	r0, r3
 800b588:	f002 f845 	bl	800d616 <USBD_LL_GetRxDataSize>
 800b58c:	0001      	movs	r1, r0
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	2383      	movs	r3, #131	; 0x83
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	23ae      	movs	r3, #174	; 0xae
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	58d3      	ldr	r3, [r2, r3]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d011      	beq.n	800b5c6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	23af      	movs	r3, #175	; 0xaf
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	58d3      	ldr	r3, [r2, r3]
 800b5aa:	68da      	ldr	r2, [r3, #12]
 800b5ac:	68f9      	ldr	r1, [r7, #12]
 800b5ae:	2381      	movs	r3, #129	; 0x81
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	58c8      	ldr	r0, [r1, r3]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2183      	movs	r1, #131	; 0x83
 800b5b8:	0089      	lsls	r1, r1, #2
 800b5ba:	468c      	mov	ip, r1
 800b5bc:	4463      	add	r3, ip
 800b5be:	0019      	movs	r1, r3
 800b5c0:	4790      	blx	r2

    return USBD_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e000      	b.n	800b5c8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800b5c6:	2302      	movs	r3, #2
  }
}
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	b004      	add	sp, #16
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b5d0:	b590      	push	{r4, r7, lr}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	23ae      	movs	r3, #174	; 0xae
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	58d3      	ldr	r3, [r2, r3]
 800b5e0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	23af      	movs	r3, #175	; 0xaf
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	58d3      	ldr	r3, [r2, r3]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d019      	beq.n	800b622 <USBD_CDC_EP0_RxReady+0x52>
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	2380      	movs	r3, #128	; 0x80
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	5cd3      	ldrb	r3, [r2, r3]
 800b5f6:	2bff      	cmp	r3, #255	; 0xff
 800b5f8:	d013      	beq.n	800b622 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	23af      	movs	r3, #175	; 0xaf
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	58d3      	ldr	r3, [r2, r3]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	68f9      	ldr	r1, [r7, #12]
 800b606:	2280      	movs	r2, #128	; 0x80
 800b608:	0092      	lsls	r2, r2, #2
 800b60a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800b60c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	4c06      	ldr	r4, [pc, #24]	; (800b62c <USBD_CDC_EP0_RxReady+0x5c>)
 800b612:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b614:	b292      	uxth	r2, r2
 800b616:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	2380      	movs	r3, #128	; 0x80
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	21ff      	movs	r1, #255	; 0xff
 800b620:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	0018      	movs	r0, r3
 800b626:	46bd      	mov	sp, r7
 800b628:	b005      	add	sp, #20
 800b62a:	bd90      	pop	{r4, r7, pc}
 800b62c:	00000201 	.word	0x00000201

0800b630 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2243      	movs	r2, #67	; 0x43
 800b63c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b63e:	4b02      	ldr	r3, [pc, #8]	; (800b648 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800b640:	0018      	movs	r0, r3
 800b642:	46bd      	mov	sp, r7
 800b644:	b002      	add	sp, #8
 800b646:	bd80      	pop	{r7, pc}
 800b648:	20000094 	.word	0x20000094

0800b64c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2243      	movs	r2, #67	; 0x43
 800b658:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b65a:	4b02      	ldr	r3, [pc, #8]	; (800b664 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800b65c:	0018      	movs	r0, r3
 800b65e:	46bd      	mov	sp, r7
 800b660:	b002      	add	sp, #8
 800b662:	bd80      	pop	{r7, pc}
 800b664:	20000050 	.word	0x20000050

0800b668 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2243      	movs	r2, #67	; 0x43
 800b674:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b676:	4b02      	ldr	r3, [pc, #8]	; (800b680 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800b678:	0018      	movs	r0, r3
 800b67a:	46bd      	mov	sp, r7
 800b67c:	b002      	add	sp, #8
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	200000d8 	.word	0x200000d8

0800b684 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	220a      	movs	r2, #10
 800b690:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b692:	4b02      	ldr	r3, [pc, #8]	; (800b69c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800b694:	0018      	movs	r0, r3
 800b696:	46bd      	mov	sp, r7
 800b698:	b002      	add	sp, #8
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	2000000c 	.word	0x2000000c

0800b6a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b6aa:	200f      	movs	r0, #15
 800b6ac:	183b      	adds	r3, r7, r0
 800b6ae:	2202      	movs	r2, #2
 800b6b0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d007      	beq.n	800b6c8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	23af      	movs	r3, #175	; 0xaf
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800b6c2:	183b      	adds	r3, r7, r0
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b6c8:	230f      	movs	r3, #15
 800b6ca:	18fb      	adds	r3, r7, r3
 800b6cc:	781b      	ldrb	r3, [r3, #0]
}
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	b004      	add	sp, #16
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b086      	sub	sp, #24
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	60b9      	str	r1, [r7, #8]
 800b6e0:	1dbb      	adds	r3, r7, #6
 800b6e2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	23ae      	movs	r3, #174	; 0xae
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	58d3      	ldr	r3, [r2, r3]
 800b6ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	2382      	movs	r3, #130	; 0x82
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	68b9      	ldr	r1, [r7, #8]
 800b6f6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800b6f8:	1dbb      	adds	r3, r7, #6
 800b6fa:	8819      	ldrh	r1, [r3, #0]
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	2384      	movs	r3, #132	; 0x84
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	0018      	movs	r0, r3
 800b708:	46bd      	mov	sp, r7
 800b70a:	b006      	add	sp, #24
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	23ae      	movs	r3, #174	; 0xae
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	58d3      	ldr	r3, [r2, r3]
 800b720:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	2381      	movs	r3, #129	; 0x81
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	6839      	ldr	r1, [r7, #0]
 800b72a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	0018      	movs	r0, r3
 800b730:	46bd      	mov	sp, r7
 800b732:	b004      	add	sp, #16
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	23ae      	movs	r3, #174	; 0xae
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	58d3      	ldr	r3, [r2, r3]
 800b746:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	23ae      	movs	r3, #174	; 0xae
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	58d3      	ldr	r3, [r2, r3]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d022      	beq.n	800b79a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	2385      	movs	r3, #133	; 0x85
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	58d3      	ldr	r3, [r2, r3]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d11a      	bne.n	800b796 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	2385      	movs	r3, #133	; 0x85
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	2101      	movs	r1, #1
 800b768:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	2384      	movs	r3, #132	; 0x84
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	58d2      	ldr	r2, [r2, r3]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	2382      	movs	r3, #130	; 0x82
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	2384      	movs	r3, #132	; 0x84
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b786:	b29b      	uxth	r3, r3
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	000a      	movs	r2, r1
 800b78c:	2181      	movs	r1, #129	; 0x81
 800b78e:	f001 fed4 	bl	800d53a <USBD_LL_Transmit>

      return USBD_OK;
 800b792:	2300      	movs	r3, #0
 800b794:	e002      	b.n	800b79c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800b796:	2301      	movs	r3, #1
 800b798:	e000      	b.n	800b79c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800b79a:	2302      	movs	r3, #2
  }
}
 800b79c:	0018      	movs	r0, r3
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	b004      	add	sp, #16
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	23ae      	movs	r3, #174	; 0xae
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	58d3      	ldr	r3, [r2, r3]
 800b7b4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	23ae      	movs	r3, #174	; 0xae
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	58d3      	ldr	r3, [r2, r3]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d019      	beq.n	800b7f6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	7c1b      	ldrb	r3, [r3, #16]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10a      	bne.n	800b7e0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	2381      	movs	r3, #129	; 0x81
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	58d2      	ldr	r2, [r2, r3]
 800b7d2:	2380      	movs	r3, #128	; 0x80
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	2101      	movs	r1, #1
 800b7da:	f001 fee5 	bl	800d5a8 <USBD_LL_PrepareReceive>
 800b7de:	e008      	b.n	800b7f2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	2381      	movs	r3, #129	; 0x81
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	58d2      	ldr	r2, [r2, r3]
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	2340      	movs	r3, #64	; 0x40
 800b7ec:	2101      	movs	r1, #1
 800b7ee:	f001 fedb 	bl	800d5a8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e000      	b.n	800b7f8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800b7f6:	2302      	movs	r3, #2
  }
}
 800b7f8:	0018      	movs	r0, r3
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	b004      	add	sp, #16
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	1dfb      	adds	r3, r7, #7
 800b80c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d101      	bne.n	800b818 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b814:	2302      	movs	r3, #2
 800b816:	e020      	b.n	800b85a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	23ad      	movs	r3, #173	; 0xad
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	58d3      	ldr	r3, [r2, r3]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d004      	beq.n	800b82e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	23ad      	movs	r3, #173	; 0xad
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	2100      	movs	r1, #0
 800b82c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d004      	beq.n	800b83e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	23ac      	movs	r3, #172	; 0xac
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	68b9      	ldr	r1, [r7, #8]
 800b83c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	23a7      	movs	r3, #167	; 0xa7
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	2101      	movs	r1, #1
 800b846:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	1dfa      	adds	r2, r7, #7
 800b84c:	7812      	ldrb	r2, [r2, #0]
 800b84e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	0018      	movs	r0, r3
 800b854:	f001 fcd4 	bl	800d200 <USBD_LL_Init>

  return USBD_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	0018      	movs	r0, r3
 800b85c:	46bd      	mov	sp, r7
 800b85e:	b004      	add	sp, #16
 800b860:	bd80      	pop	{r7, pc}

0800b862 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b084      	sub	sp, #16
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b86c:	200f      	movs	r0, #15
 800b86e:	183b      	adds	r3, r7, r0
 800b870:	2200      	movs	r2, #0
 800b872:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d008      	beq.n	800b88c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	23ad      	movs	r3, #173	; 0xad
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800b884:	183b      	adds	r3, r7, r0
 800b886:	2200      	movs	r2, #0
 800b888:	701a      	strb	r2, [r3, #0]
 800b88a:	e003      	b.n	800b894 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b88c:	230f      	movs	r3, #15
 800b88e:	18fb      	adds	r3, r7, r3
 800b890:	2202      	movs	r2, #2
 800b892:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b894:	230f      	movs	r3, #15
 800b896:	18fb      	adds	r3, r7, r3
 800b898:	781b      	ldrb	r3, [r3, #0]
}
 800b89a:	0018      	movs	r0, r3
 800b89c:	46bd      	mov	sp, r7
 800b89e:	b004      	add	sp, #16
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b082      	sub	sp, #8
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	0018      	movs	r0, r3
 800b8ae:	f001 fd0b 	bl	800d2c8 <USBD_LL_Start>

  return USBD_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	0018      	movs	r0, r3
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	b002      	add	sp, #8
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	0018      	movs	r0, r3
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	b002      	add	sp, #8
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8ce:	b590      	push	{r4, r7, lr}
 800b8d0:	b085      	sub	sp, #20
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	000a      	movs	r2, r1
 800b8d8:	1cfb      	adds	r3, r7, #3
 800b8da:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8dc:	240f      	movs	r4, #15
 800b8de:	193b      	adds	r3, r7, r4
 800b8e0:	2202      	movs	r2, #2
 800b8e2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	23ad      	movs	r3, #173	; 0xad
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	58d3      	ldr	r3, [r2, r3]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00e      	beq.n	800b90e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	23ad      	movs	r3, #173	; 0xad
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	58d3      	ldr	r3, [r2, r3]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	1cfa      	adds	r2, r7, #3
 800b8fc:	7811      	ldrb	r1, [r2, #0]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	0010      	movs	r0, r2
 800b902:	4798      	blx	r3
 800b904:	1e03      	subs	r3, r0, #0
 800b906:	d102      	bne.n	800b90e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800b908:	193b      	adds	r3, r7, r4
 800b90a:	2200      	movs	r2, #0
 800b90c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800b90e:	230f      	movs	r3, #15
 800b910:	18fb      	adds	r3, r7, r3
 800b912:	781b      	ldrb	r3, [r3, #0]
}
 800b914:	0018      	movs	r0, r3
 800b916:	46bd      	mov	sp, r7
 800b918:	b005      	add	sp, #20
 800b91a:	bd90      	pop	{r4, r7, pc}

0800b91c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	000a      	movs	r2, r1
 800b926:	1cfb      	adds	r3, r7, #3
 800b928:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	23ad      	movs	r3, #173	; 0xad
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	58d3      	ldr	r3, [r2, r3]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	1cfa      	adds	r2, r7, #3
 800b936:	7811      	ldrb	r1, [r2, #0]
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	0010      	movs	r0, r2
 800b93c:	4798      	blx	r3

  return USBD_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	0018      	movs	r0, r3
 800b942:	46bd      	mov	sp, r7
 800b944:	b002      	add	sp, #8
 800b946:	bd80      	pop	{r7, pc}

0800b948 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	22aa      	movs	r2, #170	; 0xaa
 800b956:	0092      	lsls	r2, r2, #2
 800b958:	4694      	mov	ip, r2
 800b95a:	4463      	add	r3, ip
 800b95c:	683a      	ldr	r2, [r7, #0]
 800b95e:	0011      	movs	r1, r2
 800b960:	0018      	movs	r0, r3
 800b962:	f001 f810 	bl	800c986 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	23a5      	movs	r3, #165	; 0xa5
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	2101      	movs	r1, #1
 800b96e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a23      	ldr	r2, [pc, #140]	; (800ba00 <USBD_LL_SetupStage+0xb8>)
 800b974:	5a9b      	ldrh	r3, [r3, r2]
 800b976:	0019      	movs	r1, r3
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	23a6      	movs	r3, #166	; 0xa6
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	23aa      	movs	r3, #170	; 0xaa
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	5cd3      	ldrb	r3, [r2, r3]
 800b988:	001a      	movs	r2, r3
 800b98a:	231f      	movs	r3, #31
 800b98c:	4013      	ands	r3, r2
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d019      	beq.n	800b9c6 <USBD_LL_SetupStage+0x7e>
 800b992:	d822      	bhi.n	800b9da <USBD_LL_SetupStage+0x92>
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <USBD_LL_SetupStage+0x56>
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d00a      	beq.n	800b9b2 <USBD_LL_SetupStage+0x6a>
 800b99c:	e01d      	b.n	800b9da <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	22aa      	movs	r2, #170	; 0xaa
 800b9a2:	0092      	lsls	r2, r2, #2
 800b9a4:	189a      	adds	r2, r3, r2
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	0011      	movs	r1, r2
 800b9aa:	0018      	movs	r0, r3
 800b9ac:	f000 fa10 	bl	800bdd0 <USBD_StdDevReq>
      break;
 800b9b0:	e020      	b.n	800b9f4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	22aa      	movs	r2, #170	; 0xaa
 800b9b6:	0092      	lsls	r2, r2, #2
 800b9b8:	189a      	adds	r2, r3, r2
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	0011      	movs	r1, r2
 800b9be:	0018      	movs	r0, r3
 800b9c0:	f000 fa78 	bl	800beb4 <USBD_StdItfReq>
      break;
 800b9c4:	e016      	b.n	800b9f4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	22aa      	movs	r2, #170	; 0xaa
 800b9ca:	0092      	lsls	r2, r2, #2
 800b9cc:	189a      	adds	r2, r3, r2
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	0011      	movs	r1, r2
 800b9d2:	0018      	movs	r0, r3
 800b9d4:	f000 fac5 	bl	800bf62 <USBD_StdEPReq>
      break;
 800b9d8:	e00c      	b.n	800b9f4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	23aa      	movs	r3, #170	; 0xaa
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	5cd3      	ldrb	r3, [r2, r3]
 800b9e2:	227f      	movs	r2, #127	; 0x7f
 800b9e4:	4393      	bics	r3, r2
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	0011      	movs	r1, r2
 800b9ec:	0018      	movs	r0, r3
 800b9ee:	f001 fcf2 	bl	800d3d6 <USBD_LL_StallEP>
      break;
 800b9f2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	0018      	movs	r0, r3
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	b002      	add	sp, #8
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	46c0      	nop			; (mov r8, r8)
 800ba00:	000002ae 	.word	0x000002ae

0800ba04 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	607a      	str	r2, [r7, #4]
 800ba0e:	200b      	movs	r0, #11
 800ba10:	183b      	adds	r3, r7, r0
 800ba12:	1c0a      	adds	r2, r1, #0
 800ba14:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ba16:	183b      	adds	r3, r7, r0
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d154      	bne.n	800bac8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	3355      	adds	r3, #85	; 0x55
 800ba22:	33ff      	adds	r3, #255	; 0xff
 800ba24:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	23a5      	movs	r3, #165	; 0xa5
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	58d3      	ldr	r3, [r2, r3]
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d139      	bne.n	800baa6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	68da      	ldr	r2, [r3, #12]
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d919      	bls.n	800ba72 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	68da      	ldr	r2, [r3, #12]
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	1ad2      	subs	r2, r2, r3
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	68da      	ldr	r2, [r3, #12]
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d203      	bcs.n	800ba60 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	e002      	b.n	800ba66 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	6879      	ldr	r1, [r7, #4]
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	001a      	movs	r2, r3
 800ba6c:	f001 f89b 	bl	800cba6 <USBD_CtlContinueRx>
 800ba70:	e045      	b.n	800bafe <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	23ad      	movs	r3, #173	; 0xad
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	58d3      	ldr	r3, [r2, r3]
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00d      	beq.n	800ba9c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	23a7      	movs	r3, #167	; 0xa7
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	d107      	bne.n	800ba9c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	23ad      	movs	r3, #173	; 0xad
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	58d3      	ldr	r3, [r2, r3]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	0010      	movs	r0, r2
 800ba9a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	0018      	movs	r0, r3
 800baa0:	f001 f894 	bl	800cbcc <USBD_CtlSendStatus>
 800baa4:	e02b      	b.n	800bafe <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	23a5      	movs	r3, #165	; 0xa5
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	58d3      	ldr	r3, [r2, r3]
 800baae:	2b05      	cmp	r3, #5
 800bab0:	d125      	bne.n	800bafe <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	23a5      	movs	r3, #165	; 0xa5
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	2100      	movs	r1, #0
 800baba:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2100      	movs	r1, #0
 800bac0:	0018      	movs	r0, r3
 800bac2:	f001 fc88 	bl	800d3d6 <USBD_LL_StallEP>
 800bac6:	e01a      	b.n	800bafe <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	23ad      	movs	r3, #173	; 0xad
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	58d3      	ldr	r3, [r2, r3]
 800bad0:	699b      	ldr	r3, [r3, #24]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d011      	beq.n	800bafa <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	23a7      	movs	r3, #167	; 0xa7
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d10b      	bne.n	800bafa <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	23ad      	movs	r3, #173	; 0xad
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	58d3      	ldr	r3, [r2, r3]
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	220b      	movs	r2, #11
 800baee:	18ba      	adds	r2, r7, r2
 800baf0:	7811      	ldrb	r1, [r2, #0]
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	0010      	movs	r0, r2
 800baf6:	4798      	blx	r3
 800baf8:	e001      	b.n	800bafe <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bafa:	2302      	movs	r3, #2
 800bafc:	e000      	b.n	800bb00 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	0018      	movs	r0, r3
 800bb02:	46bd      	mov	sp, r7
 800bb04:	b006      	add	sp, #24
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	607a      	str	r2, [r7, #4]
 800bb12:	200b      	movs	r0, #11
 800bb14:	183b      	adds	r3, r7, r0
 800bb16:	1c0a      	adds	r2, r1, #0
 800bb18:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bb1a:	183b      	adds	r3, r7, r0
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d000      	beq.n	800bb24 <USBD_LL_DataInStage+0x1c>
 800bb22:	e08e      	b.n	800bc42 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	3314      	adds	r3, #20
 800bb28:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	23a5      	movs	r3, #165	; 0xa5
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	58d3      	ldr	r3, [r2, r3]
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d164      	bne.n	800bc00 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	68da      	ldr	r2, [r3, #12]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d915      	bls.n	800bb6e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	68da      	ldr	r2, [r3, #12]
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	1ad2      	subs	r2, r2, r3
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	6879      	ldr	r1, [r7, #4]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	0018      	movs	r0, r3
 800bb5c:	f000 ffec 	bl	800cb38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb60:	68f8      	ldr	r0, [r7, #12]
 800bb62:	2300      	movs	r3, #0
 800bb64:	2200      	movs	r2, #0
 800bb66:	2100      	movs	r1, #0
 800bb68:	f001 fd1e 	bl	800d5a8 <USBD_LL_PrepareReceive>
 800bb6c:	e059      	b.n	800bc22 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	689a      	ldr	r2, [r3, #8]
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	0019      	movs	r1, r3
 800bb78:	0010      	movs	r0, r2
 800bb7a:	f7f4 fb5d 	bl	8000238 <__aeabi_uidivmod>
 800bb7e:	1e0b      	subs	r3, r1, #0
 800bb80:	d11f      	bne.n	800bbc2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	689a      	ldr	r2, [r3, #8]
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d319      	bcc.n	800bbc2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	689a      	ldr	r2, [r3, #8]
 800bb92:	68f9      	ldr	r1, [r7, #12]
 800bb94:	23a6      	movs	r3, #166	; 0xa6
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d211      	bcs.n	800bbc2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	2100      	movs	r1, #0
 800bba4:	0018      	movs	r0, r3
 800bba6:	f000 ffc7 	bl	800cb38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	23a6      	movs	r3, #166	; 0xa6
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	2200      	movs	r2, #0
 800bbba:	2100      	movs	r1, #0
 800bbbc:	f001 fcf4 	bl	800d5a8 <USBD_LL_PrepareReceive>
 800bbc0:	e02f      	b.n	800bc22 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	23ad      	movs	r3, #173	; 0xad
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	58d3      	ldr	r3, [r2, r3]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00d      	beq.n	800bbec <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	23a7      	movs	r3, #167	; 0xa7
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	d107      	bne.n	800bbec <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	23ad      	movs	r3, #173	; 0xad
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	58d3      	ldr	r3, [r2, r3]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	0010      	movs	r0, r2
 800bbea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2180      	movs	r1, #128	; 0x80
 800bbf0:	0018      	movs	r0, r3
 800bbf2:	f001 fbf0 	bl	800d3d6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	0018      	movs	r0, r3
 800bbfa:	f000 fffb 	bl	800cbf4 <USBD_CtlReceiveStatus>
 800bbfe:	e010      	b.n	800bc22 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	23a5      	movs	r3, #165	; 0xa5
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	58d3      	ldr	r3, [r2, r3]
 800bc08:	2b04      	cmp	r3, #4
 800bc0a:	d005      	beq.n	800bc18 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	23a5      	movs	r3, #165	; 0xa5
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d104      	bne.n	800bc22 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2180      	movs	r1, #128	; 0x80
 800bc1c:	0018      	movs	r0, r3
 800bc1e:	f001 fbda 	bl	800d3d6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	23a8      	movs	r3, #168	; 0xa8
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	5cd3      	ldrb	r3, [r2, r3]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d124      	bne.n	800bc78 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	0018      	movs	r0, r3
 800bc32:	f7ff fe43 	bl	800b8bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	23a8      	movs	r3, #168	; 0xa8
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	54d1      	strb	r1, [r2, r3]
 800bc40:	e01a      	b.n	800bc78 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	23ad      	movs	r3, #173	; 0xad
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	58d3      	ldr	r3, [r2, r3]
 800bc4a:	695b      	ldr	r3, [r3, #20]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d011      	beq.n	800bc74 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	23a7      	movs	r3, #167	; 0xa7
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc58:	2b03      	cmp	r3, #3
 800bc5a:	d10b      	bne.n	800bc74 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	23ad      	movs	r3, #173	; 0xad
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	58d3      	ldr	r3, [r2, r3]
 800bc64:	695b      	ldr	r3, [r3, #20]
 800bc66:	220b      	movs	r2, #11
 800bc68:	18ba      	adds	r2, r7, r2
 800bc6a:	7811      	ldrb	r1, [r2, #0]
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	0010      	movs	r0, r2
 800bc70:	4798      	blx	r3
 800bc72:	e001      	b.n	800bc78 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc74:	2302      	movs	r3, #2
 800bc76:	e000      	b.n	800bc7a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	0018      	movs	r0, r3
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	b006      	add	sp, #24
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b082      	sub	sp, #8
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	2340      	movs	r3, #64	; 0x40
 800bc8e:	2200      	movs	r2, #0
 800bc90:	2100      	movs	r1, #0
 800bc92:	f001 fb3e 	bl	800d312 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	23ac      	movs	r3, #172	; 0xac
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	23b2      	movs	r3, #178	; 0xb2
 800bca4:	005b      	lsls	r3, r3, #1
 800bca6:	2140      	movs	r1, #64	; 0x40
 800bca8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	2340      	movs	r3, #64	; 0x40
 800bcae:	2200      	movs	r2, #0
 800bcb0:	2180      	movs	r1, #128	; 0x80
 800bcb2:	f001 fb2e 	bl	800d312 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2240      	movs	r2, #64	; 0x40
 800bcc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	23a7      	movs	r3, #167	; 0xa7
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	2101      	movs	r1, #1
 800bcca:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	23a5      	movs	r3, #165	; 0xa5
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	23a9      	movs	r3, #169	; 0xa9
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	2100      	movs	r1, #0
 800bce4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	23ae      	movs	r3, #174	; 0xae
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	58d3      	ldr	r3, [r2, r3]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00a      	beq.n	800bd08 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	23ad      	movs	r3, #173	; 0xad
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	58d3      	ldr	r3, [r2, r3]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	b2d9      	uxtb	r1, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	0018      	movs	r0, r3
 800bd06:	4790      	blx	r2
  }

  return USBD_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	0018      	movs	r0, r3
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	b002      	add	sp, #8
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b082      	sub	sp, #8
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	000a      	movs	r2, r1
 800bd1c:	1cfb      	adds	r3, r7, #3
 800bd1e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	1cfa      	adds	r2, r7, #3
 800bd24:	7812      	ldrb	r2, [r2, #0]
 800bd26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	0018      	movs	r0, r3
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	b002      	add	sp, #8
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	23a7      	movs	r3, #167	; 0xa7
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	5cd1      	ldrb	r1, [r2, r3]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4a06      	ldr	r2, [pc, #24]	; (800bd60 <USBD_LL_Suspend+0x2c>)
 800bd48:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	23a7      	movs	r3, #167	; 0xa7
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	2104      	movs	r1, #4
 800bd52:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800bd54:	2300      	movs	r3, #0
}
 800bd56:	0018      	movs	r0, r3
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	b002      	add	sp, #8
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	46c0      	nop			; (mov r8, r8)
 800bd60:	0000029d 	.word	0x0000029d

0800bd64 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	23a7      	movs	r3, #167	; 0xa7
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	5cd3      	ldrb	r3, [r2, r3]
 800bd74:	2b04      	cmp	r3, #4
 800bd76:	d106      	bne.n	800bd86 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a05      	ldr	r2, [pc, #20]	; (800bd90 <USBD_LL_Resume+0x2c>)
 800bd7c:	5c99      	ldrb	r1, [r3, r2]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	23a7      	movs	r3, #167	; 0xa7
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	0018      	movs	r0, r3
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	b002      	add	sp, #8
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	0000029d 	.word	0x0000029d

0800bd94 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	23a7      	movs	r3, #167	; 0xa7
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	5cd3      	ldrb	r3, [r2, r3]
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d10e      	bne.n	800bdc6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	23ad      	movs	r3, #173	; 0xad
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	58d3      	ldr	r3, [r2, r3]
 800bdb0:	69db      	ldr	r3, [r3, #28]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d007      	beq.n	800bdc6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	23ad      	movs	r3, #173	; 0xad
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	58d3      	ldr	r3, [r2, r3]
 800bdbe:	69db      	ldr	r3, [r3, #28]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	0010      	movs	r0, r2
 800bdc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	0018      	movs	r0, r3
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	b002      	add	sp, #8
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdda:	230f      	movs	r3, #15
 800bddc:	18fb      	adds	r3, r7, r3
 800bdde:	2200      	movs	r2, #0
 800bde0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	001a      	movs	r2, r3
 800bde8:	2360      	movs	r3, #96	; 0x60
 800bdea:	4013      	ands	r3, r2
 800bdec:	2b40      	cmp	r3, #64	; 0x40
 800bdee:	d004      	beq.n	800bdfa <USBD_StdDevReq+0x2a>
 800bdf0:	d84f      	bhi.n	800be92 <USBD_StdDevReq+0xc2>
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00b      	beq.n	800be0e <USBD_StdDevReq+0x3e>
 800bdf6:	2b20      	cmp	r3, #32
 800bdf8:	d14b      	bne.n	800be92 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	23ad      	movs	r3, #173	; 0xad
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	58d3      	ldr	r3, [r2, r3]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	0010      	movs	r0, r2
 800be0a:	4798      	blx	r3
      break;
 800be0c:	e048      	b.n	800bea0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	785b      	ldrb	r3, [r3, #1]
 800be12:	2b09      	cmp	r3, #9
 800be14:	d835      	bhi.n	800be82 <USBD_StdDevReq+0xb2>
 800be16:	009a      	lsls	r2, r3, #2
 800be18:	4b25      	ldr	r3, [pc, #148]	; (800beb0 <USBD_StdDevReq+0xe0>)
 800be1a:	18d3      	adds	r3, r2, r3
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be20:	683a      	ldr	r2, [r7, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	0011      	movs	r1, r2
 800be26:	0018      	movs	r0, r3
 800be28:	f000 fa52 	bl	800c2d0 <USBD_GetDescriptor>
          break;
 800be2c:	e030      	b.n	800be90 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	0011      	movs	r1, r2
 800be34:	0018      	movs	r0, r3
 800be36:	f000 fbfd 	bl	800c634 <USBD_SetAddress>
          break;
 800be3a:	e029      	b.n	800be90 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800be3c:	683a      	ldr	r2, [r7, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	0011      	movs	r1, r2
 800be42:	0018      	movs	r0, r3
 800be44:	f000 fc4a 	bl	800c6dc <USBD_SetConfig>
          break;
 800be48:	e022      	b.n	800be90 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	0011      	movs	r1, r2
 800be50:	0018      	movs	r0, r3
 800be52:	f000 fce7 	bl	800c824 <USBD_GetConfig>
          break;
 800be56:	e01b      	b.n	800be90 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	0011      	movs	r1, r2
 800be5e:	0018      	movs	r0, r3
 800be60:	f000 fd1b 	bl	800c89a <USBD_GetStatus>
          break;
 800be64:	e014      	b.n	800be90 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	0011      	movs	r1, r2
 800be6c:	0018      	movs	r0, r3
 800be6e:	f000 fd4e 	bl	800c90e <USBD_SetFeature>
          break;
 800be72:	e00d      	b.n	800be90 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be74:	683a      	ldr	r2, [r7, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	0011      	movs	r1, r2
 800be7a:	0018      	movs	r0, r3
 800be7c:	f000 fd5d 	bl	800c93a <USBD_ClrFeature>
          break;
 800be80:	e006      	b.n	800be90 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	0011      	movs	r1, r2
 800be88:	0018      	movs	r0, r3
 800be8a:	f000 fdb7 	bl	800c9fc <USBD_CtlError>
          break;
 800be8e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800be90:	e006      	b.n	800bea0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	0011      	movs	r1, r2
 800be98:	0018      	movs	r0, r3
 800be9a:	f000 fdaf 	bl	800c9fc <USBD_CtlError>
      break;
 800be9e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800bea0:	230f      	movs	r3, #15
 800bea2:	18fb      	adds	r3, r7, r3
 800bea4:	781b      	ldrb	r3, [r3, #0]
}
 800bea6:	0018      	movs	r0, r3
 800bea8:	46bd      	mov	sp, r7
 800beaa:	b004      	add	sp, #16
 800beac:	bd80      	pop	{r7, pc}
 800beae:	46c0      	nop			; (mov r8, r8)
 800beb0:	0800e298 	.word	0x0800e298

0800beb4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800beb4:	b5b0      	push	{r4, r5, r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bebe:	230f      	movs	r3, #15
 800bec0:	18fb      	adds	r3, r7, r3
 800bec2:	2200      	movs	r2, #0
 800bec4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	001a      	movs	r2, r3
 800becc:	2360      	movs	r3, #96	; 0x60
 800bece:	4013      	ands	r3, r2
 800bed0:	2b40      	cmp	r3, #64	; 0x40
 800bed2:	d004      	beq.n	800bede <USBD_StdItfReq+0x2a>
 800bed4:	d839      	bhi.n	800bf4a <USBD_StdItfReq+0x96>
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <USBD_StdItfReq+0x2a>
 800beda:	2b20      	cmp	r3, #32
 800bedc:	d135      	bne.n	800bf4a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	23a7      	movs	r3, #167	; 0xa7
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	5cd3      	ldrb	r3, [r2, r3]
 800bee6:	3b01      	subs	r3, #1
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d825      	bhi.n	800bf38 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	889b      	ldrh	r3, [r3, #4]
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d819      	bhi.n	800bf2a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	23ad      	movs	r3, #173	; 0xad
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	58d3      	ldr	r3, [r2, r3]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	250f      	movs	r5, #15
 800bf02:	197c      	adds	r4, r7, r5
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	0010      	movs	r0, r2
 800bf0a:	4798      	blx	r3
 800bf0c:	0003      	movs	r3, r0
 800bf0e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	88db      	ldrh	r3, [r3, #6]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d116      	bne.n	800bf46 <USBD_StdItfReq+0x92>
 800bf18:	197b      	adds	r3, r7, r5
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d112      	bne.n	800bf46 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	0018      	movs	r0, r3
 800bf24:	f000 fe52 	bl	800cbcc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf28:	e00d      	b.n	800bf46 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	0011      	movs	r1, r2
 800bf30:	0018      	movs	r0, r3
 800bf32:	f000 fd63 	bl	800c9fc <USBD_CtlError>
          break;
 800bf36:	e006      	b.n	800bf46 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	0011      	movs	r1, r2
 800bf3e:	0018      	movs	r0, r3
 800bf40:	f000 fd5c 	bl	800c9fc <USBD_CtlError>
          break;
 800bf44:	e000      	b.n	800bf48 <USBD_StdItfReq+0x94>
          break;
 800bf46:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800bf48:	e006      	b.n	800bf58 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	0011      	movs	r1, r2
 800bf50:	0018      	movs	r0, r3
 800bf52:	f000 fd53 	bl	800c9fc <USBD_CtlError>
      break;
 800bf56:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	0018      	movs	r0, r3
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	b004      	add	sp, #16
 800bf60:	bdb0      	pop	{r4, r5, r7, pc}

0800bf62 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bf62:	b5b0      	push	{r4, r5, r7, lr}
 800bf64:	b084      	sub	sp, #16
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf6c:	230f      	movs	r3, #15
 800bf6e:	18fb      	adds	r3, r7, r3
 800bf70:	2200      	movs	r2, #0
 800bf72:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	889a      	ldrh	r2, [r3, #4]
 800bf78:	230e      	movs	r3, #14
 800bf7a:	18fb      	adds	r3, r7, r3
 800bf7c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	001a      	movs	r2, r3
 800bf84:	2360      	movs	r3, #96	; 0x60
 800bf86:	4013      	ands	r3, r2
 800bf88:	2b40      	cmp	r3, #64	; 0x40
 800bf8a:	d006      	beq.n	800bf9a <USBD_StdEPReq+0x38>
 800bf8c:	d900      	bls.n	800bf90 <USBD_StdEPReq+0x2e>
 800bf8e:	e190      	b.n	800c2b2 <USBD_StdEPReq+0x350>
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00c      	beq.n	800bfae <USBD_StdEPReq+0x4c>
 800bf94:	2b20      	cmp	r3, #32
 800bf96:	d000      	beq.n	800bf9a <USBD_StdEPReq+0x38>
 800bf98:	e18b      	b.n	800c2b2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	23ad      	movs	r3, #173	; 0xad
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	58d3      	ldr	r3, [r2, r3]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	6839      	ldr	r1, [r7, #0]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	0010      	movs	r0, r2
 800bfaa:	4798      	blx	r3
      break;
 800bfac:	e188      	b.n	800c2c0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	001a      	movs	r2, r3
 800bfb4:	2360      	movs	r3, #96	; 0x60
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	2b20      	cmp	r3, #32
 800bfba:	d10f      	bne.n	800bfdc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	23ad      	movs	r3, #173	; 0xad
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	58d3      	ldr	r3, [r2, r3]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	250f      	movs	r5, #15
 800bfc8:	197c      	adds	r4, r7, r5
 800bfca:	6839      	ldr	r1, [r7, #0]
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	0010      	movs	r0, r2
 800bfd0:	4798      	blx	r3
 800bfd2:	0003      	movs	r3, r0
 800bfd4:	7023      	strb	r3, [r4, #0]

        return ret;
 800bfd6:	197b      	adds	r3, r7, r5
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	e174      	b.n	800c2c6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	785b      	ldrb	r3, [r3, #1]
 800bfe0:	2b03      	cmp	r3, #3
 800bfe2:	d007      	beq.n	800bff4 <USBD_StdEPReq+0x92>
 800bfe4:	dd00      	ble.n	800bfe8 <USBD_StdEPReq+0x86>
 800bfe6:	e15c      	b.n	800c2a2 <USBD_StdEPReq+0x340>
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d100      	bne.n	800bfee <USBD_StdEPReq+0x8c>
 800bfec:	e092      	b.n	800c114 <USBD_StdEPReq+0x1b2>
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d04b      	beq.n	800c08a <USBD_StdEPReq+0x128>
 800bff2:	e156      	b.n	800c2a2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	23a7      	movs	r3, #167	; 0xa7
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	5cd3      	ldrb	r3, [r2, r3]
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d002      	beq.n	800c006 <USBD_StdEPReq+0xa4>
 800c000:	2b03      	cmp	r3, #3
 800c002:	d01d      	beq.n	800c040 <USBD_StdEPReq+0xde>
 800c004:	e039      	b.n	800c07a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c006:	220e      	movs	r2, #14
 800c008:	18bb      	adds	r3, r7, r2
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d010      	beq.n	800c032 <USBD_StdEPReq+0xd0>
 800c010:	18bb      	adds	r3, r7, r2
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	2b80      	cmp	r3, #128	; 0x80
 800c016:	d00c      	beq.n	800c032 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c018:	18bb      	adds	r3, r7, r2
 800c01a:	781a      	ldrb	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	0011      	movs	r1, r2
 800c020:	0018      	movs	r0, r3
 800c022:	f001 f9d8 	bl	800d3d6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2180      	movs	r1, #128	; 0x80
 800c02a:	0018      	movs	r0, r3
 800c02c:	f001 f9d3 	bl	800d3d6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c030:	e02a      	b.n	800c088 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	0011      	movs	r1, r2
 800c038:	0018      	movs	r0, r3
 800c03a:	f000 fcdf 	bl	800c9fc <USBD_CtlError>
              break;
 800c03e:	e023      	b.n	800c088 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	885b      	ldrh	r3, [r3, #2]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d113      	bne.n	800c070 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800c048:	220e      	movs	r2, #14
 800c04a:	18bb      	adds	r3, r7, r2
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00e      	beq.n	800c070 <USBD_StdEPReq+0x10e>
 800c052:	18bb      	adds	r3, r7, r2
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	2b80      	cmp	r3, #128	; 0x80
 800c058:	d00a      	beq.n	800c070 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	88db      	ldrh	r3, [r3, #6]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d106      	bne.n	800c070 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c062:	18bb      	adds	r3, r7, r2
 800c064:	781a      	ldrb	r2, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	0011      	movs	r1, r2
 800c06a:	0018      	movs	r0, r3
 800c06c:	f001 f9b3 	bl	800d3d6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	0018      	movs	r0, r3
 800c074:	f000 fdaa 	bl	800cbcc <USBD_CtlSendStatus>

              break;
 800c078:	e006      	b.n	800c088 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	0011      	movs	r1, r2
 800c080:	0018      	movs	r0, r3
 800c082:	f000 fcbb 	bl	800c9fc <USBD_CtlError>
              break;
 800c086:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c088:	e112      	b.n	800c2b0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	23a7      	movs	r3, #167	; 0xa7
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	5cd3      	ldrb	r3, [r2, r3]
 800c092:	2b02      	cmp	r3, #2
 800c094:	d002      	beq.n	800c09c <USBD_StdEPReq+0x13a>
 800c096:	2b03      	cmp	r3, #3
 800c098:	d01d      	beq.n	800c0d6 <USBD_StdEPReq+0x174>
 800c09a:	e032      	b.n	800c102 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c09c:	220e      	movs	r2, #14
 800c09e:	18bb      	adds	r3, r7, r2
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d010      	beq.n	800c0c8 <USBD_StdEPReq+0x166>
 800c0a6:	18bb      	adds	r3, r7, r2
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2b80      	cmp	r3, #128	; 0x80
 800c0ac:	d00c      	beq.n	800c0c8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c0ae:	18bb      	adds	r3, r7, r2
 800c0b0:	781a      	ldrb	r2, [r3, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	0011      	movs	r1, r2
 800c0b6:	0018      	movs	r0, r3
 800c0b8:	f001 f98d 	bl	800d3d6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2180      	movs	r1, #128	; 0x80
 800c0c0:	0018      	movs	r0, r3
 800c0c2:	f001 f988 	bl	800d3d6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0c6:	e024      	b.n	800c112 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	0011      	movs	r1, r2
 800c0ce:	0018      	movs	r0, r3
 800c0d0:	f000 fc94 	bl	800c9fc <USBD_CtlError>
              break;
 800c0d4:	e01d      	b.n	800c112 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	885b      	ldrh	r3, [r3, #2]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d118      	bne.n	800c110 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0de:	210e      	movs	r1, #14
 800c0e0:	187b      	adds	r3, r7, r1
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	227f      	movs	r2, #127	; 0x7f
 800c0e6:	4013      	ands	r3, r2
 800c0e8:	d006      	beq.n	800c0f8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0ea:	187b      	adds	r3, r7, r1
 800c0ec:	781a      	ldrb	r2, [r3, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	0011      	movs	r1, r2
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	f001 f99a 	bl	800d42c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	0018      	movs	r0, r3
 800c0fc:	f000 fd66 	bl	800cbcc <USBD_CtlSendStatus>
              }
              break;
 800c100:	e006      	b.n	800c110 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	0011      	movs	r1, r2
 800c108:	0018      	movs	r0, r3
 800c10a:	f000 fc77 	bl	800c9fc <USBD_CtlError>
              break;
 800c10e:	e000      	b.n	800c112 <USBD_StdEPReq+0x1b0>
              break;
 800c110:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c112:	e0cd      	b.n	800c2b0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	23a7      	movs	r3, #167	; 0xa7
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	5cd3      	ldrb	r3, [r2, r3]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d002      	beq.n	800c126 <USBD_StdEPReq+0x1c4>
 800c120:	2b03      	cmp	r3, #3
 800c122:	d03c      	beq.n	800c19e <USBD_StdEPReq+0x23c>
 800c124:	e0b5      	b.n	800c292 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c126:	220e      	movs	r2, #14
 800c128:	18bb      	adds	r3, r7, r2
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00a      	beq.n	800c146 <USBD_StdEPReq+0x1e4>
 800c130:	18bb      	adds	r3, r7, r2
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	2b80      	cmp	r3, #128	; 0x80
 800c136:	d006      	beq.n	800c146 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	0011      	movs	r1, r2
 800c13e:	0018      	movs	r0, r3
 800c140:	f000 fc5c 	bl	800c9fc <USBD_CtlError>
                break;
 800c144:	e0ac      	b.n	800c2a0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c146:	220e      	movs	r2, #14
 800c148:	18bb      	adds	r3, r7, r2
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	b25b      	sxtb	r3, r3
 800c14e:	2b00      	cmp	r3, #0
 800c150:	da0c      	bge.n	800c16c <USBD_StdEPReq+0x20a>
 800c152:	18bb      	adds	r3, r7, r2
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	227f      	movs	r2, #127	; 0x7f
 800c158:	401a      	ands	r2, r3
 800c15a:	0013      	movs	r3, r2
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	189b      	adds	r3, r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	3310      	adds	r3, #16
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	18d3      	adds	r3, r2, r3
 800c168:	3304      	adds	r3, #4
 800c16a:	e00d      	b.n	800c188 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c16c:	230e      	movs	r3, #14
 800c16e:	18fb      	adds	r3, r7, r3
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	227f      	movs	r2, #127	; 0x7f
 800c174:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c176:	0013      	movs	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	189b      	adds	r3, r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	3351      	adds	r3, #81	; 0x51
 800c180:	33ff      	adds	r3, #255	; 0xff
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	18d3      	adds	r3, r2, r3
 800c186:	3304      	adds	r3, #4
 800c188:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2200      	movs	r2, #0
 800c18e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c190:	68b9      	ldr	r1, [r7, #8]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2202      	movs	r2, #2
 800c196:	0018      	movs	r0, r3
 800c198:	f000 fcae 	bl	800caf8 <USBD_CtlSendData>
              break;
 800c19c:	e080      	b.n	800c2a0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c19e:	220e      	movs	r2, #14
 800c1a0:	18bb      	adds	r3, r7, r2
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	b25b      	sxtb	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	da14      	bge.n	800c1d4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1aa:	18bb      	adds	r3, r7, r2
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	220f      	movs	r2, #15
 800c1b0:	401a      	ands	r2, r3
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	0013      	movs	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	189b      	adds	r3, r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	18cb      	adds	r3, r1, r3
 800c1be:	3318      	adds	r3, #24
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d11e      	bne.n	800c204 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	0011      	movs	r1, r2
 800c1cc:	0018      	movs	r0, r3
 800c1ce:	f000 fc15 	bl	800c9fc <USBD_CtlError>
                  break;
 800c1d2:	e065      	b.n	800c2a0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1d4:	230e      	movs	r3, #14
 800c1d6:	18fb      	adds	r3, r7, r3
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	220f      	movs	r2, #15
 800c1dc:	401a      	ands	r2, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	23ac      	movs	r3, #172	; 0xac
 800c1e2:	0059      	lsls	r1, r3, #1
 800c1e4:	0013      	movs	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	189b      	adds	r3, r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	18c3      	adds	r3, r0, r3
 800c1ee:	185b      	adds	r3, r3, r1
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d106      	bne.n	800c204 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	0011      	movs	r1, r2
 800c1fc:	0018      	movs	r0, r3
 800c1fe:	f000 fbfd 	bl	800c9fc <USBD_CtlError>
                  break;
 800c202:	e04d      	b.n	800c2a0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c204:	220e      	movs	r2, #14
 800c206:	18bb      	adds	r3, r7, r2
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	b25b      	sxtb	r3, r3
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	da0c      	bge.n	800c22a <USBD_StdEPReq+0x2c8>
 800c210:	18bb      	adds	r3, r7, r2
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	227f      	movs	r2, #127	; 0x7f
 800c216:	401a      	ands	r2, r3
 800c218:	0013      	movs	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	189b      	adds	r3, r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	3310      	adds	r3, #16
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	18d3      	adds	r3, r2, r3
 800c226:	3304      	adds	r3, #4
 800c228:	e00d      	b.n	800c246 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c22a:	230e      	movs	r3, #14
 800c22c:	18fb      	adds	r3, r7, r3
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	227f      	movs	r2, #127	; 0x7f
 800c232:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c234:	0013      	movs	r3, r2
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	189b      	adds	r3, r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	3351      	adds	r3, #81	; 0x51
 800c23e:	33ff      	adds	r3, #255	; 0xff
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	18d3      	adds	r3, r2, r3
 800c244:	3304      	adds	r3, #4
 800c246:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c248:	220e      	movs	r2, #14
 800c24a:	18bb      	adds	r3, r7, r2
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d003      	beq.n	800c25a <USBD_StdEPReq+0x2f8>
 800c252:	18bb      	adds	r3, r7, r2
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b80      	cmp	r3, #128	; 0x80
 800c258:	d103      	bne.n	800c262 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2200      	movs	r2, #0
 800c25e:	601a      	str	r2, [r3, #0]
 800c260:	e010      	b.n	800c284 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c262:	230e      	movs	r3, #14
 800c264:	18fb      	adds	r3, r7, r3
 800c266:	781a      	ldrb	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	0011      	movs	r1, r2
 800c26c:	0018      	movs	r0, r3
 800c26e:	f001 f908 	bl	800d482 <USBD_LL_IsStallEP>
 800c272:	1e03      	subs	r3, r0, #0
 800c274:	d003      	beq.n	800c27e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2201      	movs	r2, #1
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	e002      	b.n	800c284 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	2200      	movs	r2, #0
 800c282:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2202      	movs	r2, #2
 800c28a:	0018      	movs	r0, r3
 800c28c:	f000 fc34 	bl	800caf8 <USBD_CtlSendData>
              break;
 800c290:	e006      	b.n	800c2a0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	0011      	movs	r1, r2
 800c298:	0018      	movs	r0, r3
 800c29a:	f000 fbaf 	bl	800c9fc <USBD_CtlError>
              break;
 800c29e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c2a0:	e006      	b.n	800c2b0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	0011      	movs	r1, r2
 800c2a8:	0018      	movs	r0, r3
 800c2aa:	f000 fba7 	bl	800c9fc <USBD_CtlError>
          break;
 800c2ae:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800c2b0:	e006      	b.n	800c2c0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	0011      	movs	r1, r2
 800c2b8:	0018      	movs	r0, r3
 800c2ba:	f000 fb9f 	bl	800c9fc <USBD_CtlError>
      break;
 800c2be:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800c2c0:	230f      	movs	r3, #15
 800c2c2:	18fb      	adds	r3, r7, r3
 800c2c4:	781b      	ldrb	r3, [r3, #0]
}
 800c2c6:	0018      	movs	r0, r3
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	b004      	add	sp, #16
 800c2cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c2d0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2da:	2308      	movs	r3, #8
 800c2dc:	18fb      	adds	r3, r7, r3
 800c2de:	2200      	movs	r2, #0
 800c2e0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2e6:	230b      	movs	r3, #11
 800c2e8:	18fb      	adds	r3, r7, r3
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	885b      	ldrh	r3, [r3, #2]
 800c2f2:	0a1b      	lsrs	r3, r3, #8
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	2b07      	cmp	r3, #7
 800c2f8:	d900      	bls.n	800c2fc <USBD_GetDescriptor+0x2c>
 800c2fa:	e159      	b.n	800c5b0 <USBD_GetDescriptor+0x2e0>
 800c2fc:	009a      	lsls	r2, r3, #2
 800c2fe:	4bcb      	ldr	r3, [pc, #812]	; (800c62c <USBD_GetDescriptor+0x35c>)
 800c300:	18d3      	adds	r3, r2, r3
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	23ac      	movs	r3, #172	; 0xac
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	58d3      	ldr	r3, [r2, r3]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	7c12      	ldrb	r2, [r2, #16]
 800c314:	2108      	movs	r1, #8
 800c316:	1879      	adds	r1, r7, r1
 800c318:	0010      	movs	r0, r2
 800c31a:	4798      	blx	r3
 800c31c:	0003      	movs	r3, r0
 800c31e:	60fb      	str	r3, [r7, #12]
      break;
 800c320:	e153      	b.n	800c5ca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	7c1b      	ldrb	r3, [r3, #16]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10f      	bne.n	800c34a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	23ad      	movs	r3, #173	; 0xad
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	58d3      	ldr	r3, [r2, r3]
 800c332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c334:	2208      	movs	r2, #8
 800c336:	18ba      	adds	r2, r7, r2
 800c338:	0010      	movs	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	0003      	movs	r3, r0
 800c33e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	3301      	adds	r3, #1
 800c344:	2202      	movs	r2, #2
 800c346:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c348:	e13f      	b.n	800c5ca <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	23ad      	movs	r3, #173	; 0xad
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	58d3      	ldr	r3, [r2, r3]
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	2208      	movs	r2, #8
 800c356:	18ba      	adds	r2, r7, r2
 800c358:	0010      	movs	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	0003      	movs	r3, r0
 800c35e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3301      	adds	r3, #1
 800c364:	2202      	movs	r2, #2
 800c366:	701a      	strb	r2, [r3, #0]
      break;
 800c368:	e12f      	b.n	800c5ca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	885b      	ldrh	r3, [r3, #2]
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	2b05      	cmp	r3, #5
 800c372:	d900      	bls.n	800c376 <USBD_GetDescriptor+0xa6>
 800c374:	e0d0      	b.n	800c518 <USBD_GetDescriptor+0x248>
 800c376:	009a      	lsls	r2, r3, #2
 800c378:	4bad      	ldr	r3, [pc, #692]	; (800c630 <USBD_GetDescriptor+0x360>)
 800c37a:	18d3      	adds	r3, r2, r3
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	23ac      	movs	r3, #172	; 0xac
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	58d3      	ldr	r3, [r2, r3]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00d      	beq.n	800c3aa <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	23ac      	movs	r3, #172	; 0xac
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	58d3      	ldr	r3, [r2, r3]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	7c12      	ldrb	r2, [r2, #16]
 800c39c:	2108      	movs	r1, #8
 800c39e:	1879      	adds	r1, r7, r1
 800c3a0:	0010      	movs	r0, r2
 800c3a2:	4798      	blx	r3
 800c3a4:	0003      	movs	r3, r0
 800c3a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3a8:	e0c3      	b.n	800c532 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	0011      	movs	r1, r2
 800c3b0:	0018      	movs	r0, r3
 800c3b2:	f000 fb23 	bl	800c9fc <USBD_CtlError>
            err++;
 800c3b6:	210b      	movs	r1, #11
 800c3b8:	187b      	adds	r3, r7, r1
 800c3ba:	781a      	ldrb	r2, [r3, #0]
 800c3bc:	187b      	adds	r3, r7, r1
 800c3be:	3201      	adds	r2, #1
 800c3c0:	701a      	strb	r2, [r3, #0]
          break;
 800c3c2:	e0b6      	b.n	800c532 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	23ac      	movs	r3, #172	; 0xac
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	58d3      	ldr	r3, [r2, r3]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00d      	beq.n	800c3ee <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	23ac      	movs	r3, #172	; 0xac
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	58d3      	ldr	r3, [r2, r3]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	7c12      	ldrb	r2, [r2, #16]
 800c3e0:	2108      	movs	r1, #8
 800c3e2:	1879      	adds	r1, r7, r1
 800c3e4:	0010      	movs	r0, r2
 800c3e6:	4798      	blx	r3
 800c3e8:	0003      	movs	r3, r0
 800c3ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ec:	e0a1      	b.n	800c532 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	0011      	movs	r1, r2
 800c3f4:	0018      	movs	r0, r3
 800c3f6:	f000 fb01 	bl	800c9fc <USBD_CtlError>
            err++;
 800c3fa:	210b      	movs	r1, #11
 800c3fc:	187b      	adds	r3, r7, r1
 800c3fe:	781a      	ldrb	r2, [r3, #0]
 800c400:	187b      	adds	r3, r7, r1
 800c402:	3201      	adds	r2, #1
 800c404:	701a      	strb	r2, [r3, #0]
          break;
 800c406:	e094      	b.n	800c532 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	23ac      	movs	r3, #172	; 0xac
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	58d3      	ldr	r3, [r2, r3]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00d      	beq.n	800c432 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	23ac      	movs	r3, #172	; 0xac
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	58d3      	ldr	r3, [r2, r3]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	7c12      	ldrb	r2, [r2, #16]
 800c424:	2108      	movs	r1, #8
 800c426:	1879      	adds	r1, r7, r1
 800c428:	0010      	movs	r0, r2
 800c42a:	4798      	blx	r3
 800c42c:	0003      	movs	r3, r0
 800c42e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c430:	e07f      	b.n	800c532 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	0011      	movs	r1, r2
 800c438:	0018      	movs	r0, r3
 800c43a:	f000 fadf 	bl	800c9fc <USBD_CtlError>
            err++;
 800c43e:	210b      	movs	r1, #11
 800c440:	187b      	adds	r3, r7, r1
 800c442:	781a      	ldrb	r2, [r3, #0]
 800c444:	187b      	adds	r3, r7, r1
 800c446:	3201      	adds	r2, #1
 800c448:	701a      	strb	r2, [r3, #0]
          break;
 800c44a:	e072      	b.n	800c532 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	23ac      	movs	r3, #172	; 0xac
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	58d3      	ldr	r3, [r2, r3]
 800c454:	691b      	ldr	r3, [r3, #16]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00d      	beq.n	800c476 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	23ac      	movs	r3, #172	; 0xac
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	58d3      	ldr	r3, [r2, r3]
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	7c12      	ldrb	r2, [r2, #16]
 800c468:	2108      	movs	r1, #8
 800c46a:	1879      	adds	r1, r7, r1
 800c46c:	0010      	movs	r0, r2
 800c46e:	4798      	blx	r3
 800c470:	0003      	movs	r3, r0
 800c472:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c474:	e05d      	b.n	800c532 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c476:	683a      	ldr	r2, [r7, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	0011      	movs	r1, r2
 800c47c:	0018      	movs	r0, r3
 800c47e:	f000 fabd 	bl	800c9fc <USBD_CtlError>
            err++;
 800c482:	210b      	movs	r1, #11
 800c484:	187b      	adds	r3, r7, r1
 800c486:	781a      	ldrb	r2, [r3, #0]
 800c488:	187b      	adds	r3, r7, r1
 800c48a:	3201      	adds	r2, #1
 800c48c:	701a      	strb	r2, [r3, #0]
          break;
 800c48e:	e050      	b.n	800c532 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	23ac      	movs	r3, #172	; 0xac
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	58d3      	ldr	r3, [r2, r3]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00d      	beq.n	800c4ba <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	23ac      	movs	r3, #172	; 0xac
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	58d3      	ldr	r3, [r2, r3]
 800c4a6:	695b      	ldr	r3, [r3, #20]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	7c12      	ldrb	r2, [r2, #16]
 800c4ac:	2108      	movs	r1, #8
 800c4ae:	1879      	adds	r1, r7, r1
 800c4b0:	0010      	movs	r0, r2
 800c4b2:	4798      	blx	r3
 800c4b4:	0003      	movs	r3, r0
 800c4b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4b8:	e03b      	b.n	800c532 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	0011      	movs	r1, r2
 800c4c0:	0018      	movs	r0, r3
 800c4c2:	f000 fa9b 	bl	800c9fc <USBD_CtlError>
            err++;
 800c4c6:	210b      	movs	r1, #11
 800c4c8:	187b      	adds	r3, r7, r1
 800c4ca:	781a      	ldrb	r2, [r3, #0]
 800c4cc:	187b      	adds	r3, r7, r1
 800c4ce:	3201      	adds	r2, #1
 800c4d0:	701a      	strb	r2, [r3, #0]
          break;
 800c4d2:	e02e      	b.n	800c532 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	23ac      	movs	r3, #172	; 0xac
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	58d3      	ldr	r3, [r2, r3]
 800c4dc:	699b      	ldr	r3, [r3, #24]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00d      	beq.n	800c4fe <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	23ac      	movs	r3, #172	; 0xac
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	58d3      	ldr	r3, [r2, r3]
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	7c12      	ldrb	r2, [r2, #16]
 800c4f0:	2108      	movs	r1, #8
 800c4f2:	1879      	adds	r1, r7, r1
 800c4f4:	0010      	movs	r0, r2
 800c4f6:	4798      	blx	r3
 800c4f8:	0003      	movs	r3, r0
 800c4fa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4fc:	e019      	b.n	800c532 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c4fe:	683a      	ldr	r2, [r7, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	0011      	movs	r1, r2
 800c504:	0018      	movs	r0, r3
 800c506:	f000 fa79 	bl	800c9fc <USBD_CtlError>
            err++;
 800c50a:	210b      	movs	r1, #11
 800c50c:	187b      	adds	r3, r7, r1
 800c50e:	781a      	ldrb	r2, [r3, #0]
 800c510:	187b      	adds	r3, r7, r1
 800c512:	3201      	adds	r2, #1
 800c514:	701a      	strb	r2, [r3, #0]
          break;
 800c516:	e00c      	b.n	800c532 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	0011      	movs	r1, r2
 800c51e:	0018      	movs	r0, r3
 800c520:	f000 fa6c 	bl	800c9fc <USBD_CtlError>
          err++;
 800c524:	210b      	movs	r1, #11
 800c526:	187b      	adds	r3, r7, r1
 800c528:	781a      	ldrb	r2, [r3, #0]
 800c52a:	187b      	adds	r3, r7, r1
 800c52c:	3201      	adds	r2, #1
 800c52e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800c530:	e04b      	b.n	800c5ca <USBD_GetDescriptor+0x2fa>
 800c532:	e04a      	b.n	800c5ca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	7c1b      	ldrb	r3, [r3, #16]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10b      	bne.n	800c554 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	23ad      	movs	r3, #173	; 0xad
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	58d3      	ldr	r3, [r2, r3]
 800c544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c546:	2208      	movs	r2, #8
 800c548:	18ba      	adds	r2, r7, r2
 800c54a:	0010      	movs	r0, r2
 800c54c:	4798      	blx	r3
 800c54e:	0003      	movs	r3, r0
 800c550:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c552:	e03a      	b.n	800c5ca <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	0011      	movs	r1, r2
 800c55a:	0018      	movs	r0, r3
 800c55c:	f000 fa4e 	bl	800c9fc <USBD_CtlError>
        err++;
 800c560:	210b      	movs	r1, #11
 800c562:	187b      	adds	r3, r7, r1
 800c564:	781a      	ldrb	r2, [r3, #0]
 800c566:	187b      	adds	r3, r7, r1
 800c568:	3201      	adds	r2, #1
 800c56a:	701a      	strb	r2, [r3, #0]
      break;
 800c56c:	e02d      	b.n	800c5ca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	7c1b      	ldrb	r3, [r3, #16]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d10f      	bne.n	800c596 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	23ad      	movs	r3, #173	; 0xad
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	58d3      	ldr	r3, [r2, r3]
 800c57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c580:	2208      	movs	r2, #8
 800c582:	18ba      	adds	r2, r7, r2
 800c584:	0010      	movs	r0, r2
 800c586:	4798      	blx	r3
 800c588:	0003      	movs	r3, r0
 800c58a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	3301      	adds	r3, #1
 800c590:	2207      	movs	r2, #7
 800c592:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c594:	e019      	b.n	800c5ca <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c596:	683a      	ldr	r2, [r7, #0]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	0011      	movs	r1, r2
 800c59c:	0018      	movs	r0, r3
 800c59e:	f000 fa2d 	bl	800c9fc <USBD_CtlError>
        err++;
 800c5a2:	210b      	movs	r1, #11
 800c5a4:	187b      	adds	r3, r7, r1
 800c5a6:	781a      	ldrb	r2, [r3, #0]
 800c5a8:	187b      	adds	r3, r7, r1
 800c5aa:	3201      	adds	r2, #1
 800c5ac:	701a      	strb	r2, [r3, #0]
      break;
 800c5ae:	e00c      	b.n	800c5ca <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	0011      	movs	r1, r2
 800c5b6:	0018      	movs	r0, r3
 800c5b8:	f000 fa20 	bl	800c9fc <USBD_CtlError>
      err++;
 800c5bc:	210b      	movs	r1, #11
 800c5be:	187b      	adds	r3, r7, r1
 800c5c0:	781a      	ldrb	r2, [r3, #0]
 800c5c2:	187b      	adds	r3, r7, r1
 800c5c4:	3201      	adds	r2, #1
 800c5c6:	701a      	strb	r2, [r3, #0]
      break;
 800c5c8:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800c5ca:	230b      	movs	r3, #11
 800c5cc:	18fb      	adds	r3, r7, r3
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d127      	bne.n	800c624 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c5d4:	2108      	movs	r1, #8
 800c5d6:	187b      	adds	r3, r7, r1
 800c5d8:	881b      	ldrh	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d019      	beq.n	800c612 <USBD_GetDescriptor+0x342>
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	88db      	ldrh	r3, [r3, #6]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d015      	beq.n	800c612 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	88da      	ldrh	r2, [r3, #6]
 800c5ea:	187b      	adds	r3, r7, r1
 800c5ec:	881b      	ldrh	r3, [r3, #0]
 800c5ee:	1c18      	adds	r0, r3, #0
 800c5f0:	1c11      	adds	r1, r2, #0
 800c5f2:	b28a      	uxth	r2, r1
 800c5f4:	b283      	uxth	r3, r0
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d900      	bls.n	800c5fc <USBD_GetDescriptor+0x32c>
 800c5fa:	1c01      	adds	r1, r0, #0
 800c5fc:	b28a      	uxth	r2, r1
 800c5fe:	2108      	movs	r1, #8
 800c600:	187b      	adds	r3, r7, r1
 800c602:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c604:	187b      	adds	r3, r7, r1
 800c606:	881a      	ldrh	r2, [r3, #0]
 800c608:	68f9      	ldr	r1, [r7, #12]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	0018      	movs	r0, r3
 800c60e:	f000 fa73 	bl	800caf8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	88db      	ldrh	r3, [r3, #6]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d105      	bne.n	800c626 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	0018      	movs	r0, r3
 800c61e:	f000 fad5 	bl	800cbcc <USBD_CtlSendStatus>
 800c622:	e000      	b.n	800c626 <USBD_GetDescriptor+0x356>
    return;
 800c624:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c626:	46bd      	mov	sp, r7
 800c628:	b004      	add	sp, #16
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	0800e2c0 	.word	0x0800e2c0
 800c630:	0800e2e0 	.word	0x0800e2e0

0800c634 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c634:	b590      	push	{r4, r7, lr}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	889b      	ldrh	r3, [r3, #4]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d13d      	bne.n	800c6c2 <USBD_SetAddress+0x8e>
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	88db      	ldrh	r3, [r3, #6]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d139      	bne.n	800c6c2 <USBD_SetAddress+0x8e>
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	885b      	ldrh	r3, [r3, #2]
 800c652:	2b7f      	cmp	r3, #127	; 0x7f
 800c654:	d835      	bhi.n	800c6c2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	885b      	ldrh	r3, [r3, #2]
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	230f      	movs	r3, #15
 800c65e:	18fb      	adds	r3, r7, r3
 800c660:	217f      	movs	r1, #127	; 0x7f
 800c662:	400a      	ands	r2, r1
 800c664:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	23a7      	movs	r3, #167	; 0xa7
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	5cd3      	ldrb	r3, [r2, r3]
 800c66e:	2b03      	cmp	r3, #3
 800c670:	d106      	bne.n	800c680 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800c672:	683a      	ldr	r2, [r7, #0]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	0011      	movs	r1, r2
 800c678:	0018      	movs	r0, r3
 800c67a:	f000 f9bf 	bl	800c9fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c67e:	e027      	b.n	800c6d0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	240f      	movs	r4, #15
 800c684:	193a      	adds	r2, r7, r4
 800c686:	4914      	ldr	r1, [pc, #80]	; (800c6d8 <USBD_SetAddress+0xa4>)
 800c688:	7812      	ldrb	r2, [r2, #0]
 800c68a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c68c:	193b      	adds	r3, r7, r4
 800c68e:	781a      	ldrb	r2, [r3, #0]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	0011      	movs	r1, r2
 800c694:	0018      	movs	r0, r3
 800c696:	f000 ff25 	bl	800d4e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	0018      	movs	r0, r3
 800c69e:	f000 fa95 	bl	800cbcc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6a2:	193b      	adds	r3, r7, r4
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d005      	beq.n	800c6b6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	23a7      	movs	r3, #167	; 0xa7
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	2102      	movs	r1, #2
 800c6b2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6b4:	e00c      	b.n	800c6d0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	23a7      	movs	r3, #167	; 0xa7
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	2101      	movs	r1, #1
 800c6be:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c0:	e006      	b.n	800c6d0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	0011      	movs	r1, r2
 800c6c8:	0018      	movs	r0, r3
 800c6ca:	f000 f997 	bl	800c9fc <USBD_CtlError>
  }
}
 800c6ce:	46c0      	nop			; (mov r8, r8)
 800c6d0:	46c0      	nop			; (mov r8, r8)
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	b005      	add	sp, #20
 800c6d6:	bd90      	pop	{r4, r7, pc}
 800c6d8:	0000029e 	.word	0x0000029e

0800c6dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	885b      	ldrh	r3, [r3, #2]
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	4b4c      	ldr	r3, [pc, #304]	; (800c820 <USBD_SetConfig+0x144>)
 800c6ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c6f0:	4b4b      	ldr	r3, [pc, #300]	; (800c820 <USBD_SetConfig+0x144>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d906      	bls.n	800c706 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800c6f8:	683a      	ldr	r2, [r7, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	0011      	movs	r1, r2
 800c6fe:	0018      	movs	r0, r3
 800c700:	f000 f97c 	bl	800c9fc <USBD_CtlError>
 800c704:	e088      	b.n	800c818 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	23a7      	movs	r3, #167	; 0xa7
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	5cd3      	ldrb	r3, [r2, r3]
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d002      	beq.n	800c718 <USBD_SetConfig+0x3c>
 800c712:	2b03      	cmp	r3, #3
 800c714:	d029      	beq.n	800c76a <USBD_SetConfig+0x8e>
 800c716:	e071      	b.n	800c7fc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c718:	4b41      	ldr	r3, [pc, #260]	; (800c820 <USBD_SetConfig+0x144>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d01f      	beq.n	800c760 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800c720:	4b3f      	ldr	r3, [pc, #252]	; (800c820 <USBD_SetConfig+0x144>)
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	001a      	movs	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	23a7      	movs	r3, #167	; 0xa7
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	2103      	movs	r1, #3
 800c732:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c734:	4b3a      	ldr	r3, [pc, #232]	; (800c820 <USBD_SetConfig+0x144>)
 800c736:	781a      	ldrb	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	0011      	movs	r1, r2
 800c73c:	0018      	movs	r0, r3
 800c73e:	f7ff f8c6 	bl	800b8ce <USBD_SetClassConfig>
 800c742:	0003      	movs	r3, r0
 800c744:	2b02      	cmp	r3, #2
 800c746:	d106      	bne.n	800c756 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800c748:	683a      	ldr	r2, [r7, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	0011      	movs	r1, r2
 800c74e:	0018      	movs	r0, r3
 800c750:	f000 f954 	bl	800c9fc <USBD_CtlError>
            return;
 800c754:	e060      	b.n	800c818 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	0018      	movs	r0, r3
 800c75a:	f000 fa37 	bl	800cbcc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c75e:	e05b      	b.n	800c818 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	0018      	movs	r0, r3
 800c764:	f000 fa32 	bl	800cbcc <USBD_CtlSendStatus>
        break;
 800c768:	e056      	b.n	800c818 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c76a:	4b2d      	ldr	r3, [pc, #180]	; (800c820 <USBD_SetConfig+0x144>)
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d115      	bne.n	800c79e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	23a7      	movs	r3, #167	; 0xa7
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	2102      	movs	r1, #2
 800c77a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800c77c:	4b28      	ldr	r3, [pc, #160]	; (800c820 <USBD_SetConfig+0x144>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	001a      	movs	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c786:	4b26      	ldr	r3, [pc, #152]	; (800c820 <USBD_SetConfig+0x144>)
 800c788:	781a      	ldrb	r2, [r3, #0]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	0011      	movs	r1, r2
 800c78e:	0018      	movs	r0, r3
 800c790:	f7ff f8c4 	bl	800b91c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	0018      	movs	r0, r3
 800c798:	f000 fa18 	bl	800cbcc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c79c:	e03c      	b.n	800c818 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c79e:	4b20      	ldr	r3, [pc, #128]	; (800c820 <USBD_SetConfig+0x144>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	001a      	movs	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d022      	beq.n	800c7f2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	0011      	movs	r1, r2
 800c7b6:	0018      	movs	r0, r3
 800c7b8:	f7ff f8b0 	bl	800b91c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c7bc:	4b18      	ldr	r3, [pc, #96]	; (800c820 <USBD_SetConfig+0x144>)
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	001a      	movs	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c7c6:	4b16      	ldr	r3, [pc, #88]	; (800c820 <USBD_SetConfig+0x144>)
 800c7c8:	781a      	ldrb	r2, [r3, #0]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	0011      	movs	r1, r2
 800c7ce:	0018      	movs	r0, r3
 800c7d0:	f7ff f87d 	bl	800b8ce <USBD_SetClassConfig>
 800c7d4:	0003      	movs	r3, r0
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d106      	bne.n	800c7e8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c7da:	683a      	ldr	r2, [r7, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	0011      	movs	r1, r2
 800c7e0:	0018      	movs	r0, r3
 800c7e2:	f000 f90b 	bl	800c9fc <USBD_CtlError>
            return;
 800c7e6:	e017      	b.n	800c818 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	0018      	movs	r0, r3
 800c7ec:	f000 f9ee 	bl	800cbcc <USBD_CtlSendStatus>
        break;
 800c7f0:	e012      	b.n	800c818 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	0018      	movs	r0, r3
 800c7f6:	f000 f9e9 	bl	800cbcc <USBD_CtlSendStatus>
        break;
 800c7fa:	e00d      	b.n	800c818 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c7fc:	683a      	ldr	r2, [r7, #0]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	0011      	movs	r1, r2
 800c802:	0018      	movs	r0, r3
 800c804:	f000 f8fa 	bl	800c9fc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c808:	4b05      	ldr	r3, [pc, #20]	; (800c820 <USBD_SetConfig+0x144>)
 800c80a:	781a      	ldrb	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	0011      	movs	r1, r2
 800c810:	0018      	movs	r0, r3
 800c812:	f7ff f883 	bl	800b91c <USBD_ClrClassConfig>
        break;
 800c816:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c818:	46bd      	mov	sp, r7
 800c81a:	b002      	add	sp, #8
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	46c0      	nop			; (mov r8, r8)
 800c820:	2000041c 	.word	0x2000041c

0800c824 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	88db      	ldrh	r3, [r3, #6]
 800c832:	2b01      	cmp	r3, #1
 800c834:	d006      	beq.n	800c844 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	0011      	movs	r1, r2
 800c83c:	0018      	movs	r0, r3
 800c83e:	f000 f8dd 	bl	800c9fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c842:	e026      	b.n	800c892 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	23a7      	movs	r3, #167	; 0xa7
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	5cd3      	ldrb	r3, [r2, r3]
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	dc02      	bgt.n	800c856 <USBD_GetConfig+0x32>
 800c850:	2b00      	cmp	r3, #0
 800c852:	dc03      	bgt.n	800c85c <USBD_GetConfig+0x38>
 800c854:	e016      	b.n	800c884 <USBD_GetConfig+0x60>
 800c856:	2b03      	cmp	r3, #3
 800c858:	d00c      	beq.n	800c874 <USBD_GetConfig+0x50>
 800c85a:	e013      	b.n	800c884 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	3308      	adds	r3, #8
 800c866:	0019      	movs	r1, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	0018      	movs	r0, r3
 800c86e:	f000 f943 	bl	800caf8 <USBD_CtlSendData>
        break;
 800c872:	e00e      	b.n	800c892 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	1d19      	adds	r1, r3, #4
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	0018      	movs	r0, r3
 800c87e:	f000 f93b 	bl	800caf8 <USBD_CtlSendData>
        break;
 800c882:	e006      	b.n	800c892 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800c884:	683a      	ldr	r2, [r7, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	0011      	movs	r1, r2
 800c88a:	0018      	movs	r0, r3
 800c88c:	f000 f8b6 	bl	800c9fc <USBD_CtlError>
        break;
 800c890:	46c0      	nop			; (mov r8, r8)
}
 800c892:	46c0      	nop			; (mov r8, r8)
 800c894:	46bd      	mov	sp, r7
 800c896:	b002      	add	sp, #8
 800c898:	bd80      	pop	{r7, pc}

0800c89a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b082      	sub	sp, #8
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
 800c8a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	23a7      	movs	r3, #167	; 0xa7
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	5cd3      	ldrb	r3, [r2, r3]
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d822      	bhi.n	800c8f8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	88db      	ldrh	r3, [r3, #6]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d006      	beq.n	800c8c8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800c8ba:	683a      	ldr	r2, [r7, #0]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	0011      	movs	r1, r2
 800c8c0:	0018      	movs	r0, r3
 800c8c2:	f000 f89b 	bl	800c9fc <USBD_CtlError>
        break;
 800c8c6:	e01e      	b.n	800c906 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	23a9      	movs	r3, #169	; 0xa9
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	58d3      	ldr	r3, [r2, r3]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d005      	beq.n	800c8e6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	2202      	movs	r2, #2
 800c8e0:	431a      	orrs	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	330c      	adds	r3, #12
 800c8ea:	0019      	movs	r1, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2202      	movs	r2, #2
 800c8f0:	0018      	movs	r0, r3
 800c8f2:	f000 f901 	bl	800caf8 <USBD_CtlSendData>
      break;
 800c8f6:	e006      	b.n	800c906 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	0011      	movs	r1, r2
 800c8fe:	0018      	movs	r0, r3
 800c900:	f000 f87c 	bl	800c9fc <USBD_CtlError>
      break;
 800c904:	46c0      	nop			; (mov r8, r8)
  }
}
 800c906:	46c0      	nop			; (mov r8, r8)
 800c908:	46bd      	mov	sp, r7
 800c90a:	b002      	add	sp, #8
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b082      	sub	sp, #8
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	885b      	ldrh	r3, [r3, #2]
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d108      	bne.n	800c932 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	23a9      	movs	r3, #169	; 0xa9
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	2101      	movs	r1, #1
 800c928:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	0018      	movs	r0, r3
 800c92e:	f000 f94d 	bl	800cbcc <USBD_CtlSendStatus>
  }
}
 800c932:	46c0      	nop			; (mov r8, r8)
 800c934:	46bd      	mov	sp, r7
 800c936:	b002      	add	sp, #8
 800c938:	bd80      	pop	{r7, pc}

0800c93a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b082      	sub	sp, #8
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	23a7      	movs	r3, #167	; 0xa7
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	5cd3      	ldrb	r3, [r2, r3]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	2b02      	cmp	r3, #2
 800c950:	d80d      	bhi.n	800c96e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	885b      	ldrh	r3, [r3, #2]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d110      	bne.n	800c97c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	23a9      	movs	r3, #169	; 0xa9
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	2100      	movs	r1, #0
 800c962:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	0018      	movs	r0, r3
 800c968:	f000 f930 	bl	800cbcc <USBD_CtlSendStatus>
      }
      break;
 800c96c:	e006      	b.n	800c97c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800c96e:	683a      	ldr	r2, [r7, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	0011      	movs	r1, r2
 800c974:	0018      	movs	r0, r3
 800c976:	f000 f841 	bl	800c9fc <USBD_CtlError>
      break;
 800c97a:	e000      	b.n	800c97e <USBD_ClrFeature+0x44>
      break;
 800c97c:	46c0      	nop			; (mov r8, r8)
  }
}
 800c97e:	46c0      	nop			; (mov r8, r8)
 800c980:	46bd      	mov	sp, r7
 800c982:	b002      	add	sp, #8
 800c984:	bd80      	pop	{r7, pc}

0800c986 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b082      	sub	sp, #8
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	781a      	ldrb	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	785a      	ldrb	r2, [r3, #1]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	3302      	adds	r3, #2
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	3303      	adds	r3, #3
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	021b      	lsls	r3, r3, #8
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	18d3      	adds	r3, r2, r3
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	3304      	adds	r3, #4
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	3305      	adds	r3, #5
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	021b      	lsls	r3, r3, #8
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	18d3      	adds	r3, r2, r3
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	3306      	adds	r3, #6
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	3307      	adds	r3, #7
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	021b      	lsls	r3, r3, #8
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	18d3      	adds	r3, r2, r3
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	80da      	strh	r2, [r3, #6]

}
 800c9f4:	46c0      	nop			; (mov r8, r8)
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	b002      	add	sp, #8
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2180      	movs	r1, #128	; 0x80
 800ca0a:	0018      	movs	r0, r3
 800ca0c:	f000 fce3 	bl	800d3d6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2100      	movs	r1, #0
 800ca14:	0018      	movs	r0, r3
 800ca16:	f000 fcde 	bl	800d3d6 <USBD_LL_StallEP>
}
 800ca1a:	46c0      	nop			; (mov r8, r8)
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	b002      	add	sp, #8
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca22:	b590      	push	{r4, r7, lr}
 800ca24:	b087      	sub	sp, #28
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	60f8      	str	r0, [r7, #12]
 800ca2a:	60b9      	str	r1, [r7, #8]
 800ca2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca2e:	2417      	movs	r4, #23
 800ca30:	193b      	adds	r3, r7, r4
 800ca32:	2200      	movs	r2, #0
 800ca34:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d03c      	beq.n	800cab6 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	0018      	movs	r0, r3
 800ca40:	f000 f83d 	bl	800cabe <USBD_GetLen>
 800ca44:	0003      	movs	r3, r0
 800ca46:	3301      	adds	r3, #1
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	18db      	adds	r3, r3, r3
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ca52:	193b      	adds	r3, r7, r4
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	193a      	adds	r2, r7, r4
 800ca58:	1c59      	adds	r1, r3, #1
 800ca5a:	7011      	strb	r1, [r2, #0]
 800ca5c:	001a      	movs	r2, r3
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	189b      	adds	r3, r3, r2
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	7812      	ldrb	r2, [r2, #0]
 800ca66:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ca68:	193b      	adds	r3, r7, r4
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	193a      	adds	r2, r7, r4
 800ca6e:	1c59      	adds	r1, r3, #1
 800ca70:	7011      	strb	r1, [r2, #0]
 800ca72:	001a      	movs	r2, r3
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	189b      	adds	r3, r3, r2
 800ca78:	2203      	movs	r2, #3
 800ca7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ca7c:	e017      	b.n	800caae <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	1c5a      	adds	r2, r3, #1
 800ca82:	60fa      	str	r2, [r7, #12]
 800ca84:	2417      	movs	r4, #23
 800ca86:	193a      	adds	r2, r7, r4
 800ca88:	7812      	ldrb	r2, [r2, #0]
 800ca8a:	1939      	adds	r1, r7, r4
 800ca8c:	1c50      	adds	r0, r2, #1
 800ca8e:	7008      	strb	r0, [r1, #0]
 800ca90:	0011      	movs	r1, r2
 800ca92:	68ba      	ldr	r2, [r7, #8]
 800ca94:	1852      	adds	r2, r2, r1
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ca9a:	193b      	adds	r3, r7, r4
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	193a      	adds	r2, r7, r4
 800caa0:	1c59      	adds	r1, r3, #1
 800caa2:	7011      	strb	r1, [r2, #0]
 800caa4:	001a      	movs	r2, r3
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	189b      	adds	r3, r3, r2
 800caaa:	2200      	movs	r2, #0
 800caac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1e3      	bne.n	800ca7e <USBD_GetString+0x5c>
    }
  }
}
 800cab6:	46c0      	nop			; (mov r8, r8)
 800cab8:	46bd      	mov	sp, r7
 800caba:	b007      	add	sp, #28
 800cabc:	bd90      	pop	{r4, r7, pc}

0800cabe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b084      	sub	sp, #16
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cac6:	230f      	movs	r3, #15
 800cac8:	18fb      	adds	r3, r7, r3
 800caca:	2200      	movs	r2, #0
 800cacc:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800cace:	e008      	b.n	800cae2 <USBD_GetLen+0x24>
  {
    len++;
 800cad0:	210f      	movs	r1, #15
 800cad2:	187b      	adds	r3, r7, r1
 800cad4:	781a      	ldrb	r2, [r3, #0]
 800cad6:	187b      	adds	r3, r7, r1
 800cad8:	3201      	adds	r2, #1
 800cada:	701a      	strb	r2, [r3, #0]
    buf++;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	3301      	adds	r3, #1
 800cae0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d1f2      	bne.n	800cad0 <USBD_GetLen+0x12>
  }

  return len;
 800caea:	230f      	movs	r3, #15
 800caec:	18fb      	adds	r3, r7, r3
 800caee:	781b      	ldrb	r3, [r3, #0]
}
 800caf0:	0018      	movs	r0, r3
 800caf2:	46bd      	mov	sp, r7
 800caf4:	b004      	add	sp, #16
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	1dbb      	adds	r3, r7, #6
 800cb04:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb06:	68fa      	ldr	r2, [r7, #12]
 800cb08:	23a5      	movs	r3, #165	; 0xa5
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	2102      	movs	r1, #2
 800cb0e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800cb10:	1dbb      	adds	r3, r7, #6
 800cb12:	881a      	ldrh	r2, [r3, #0]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cb18:	1dbb      	adds	r3, r7, #6
 800cb1a:	881a      	ldrh	r2, [r3, #0]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb20:	1dbb      	adds	r3, r7, #6
 800cb22:	881b      	ldrh	r3, [r3, #0]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	2100      	movs	r1, #0
 800cb2a:	f000 fd06 	bl	800d53a <USBD_LL_Transmit>

  return USBD_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	0018      	movs	r0, r3
 800cb32:	46bd      	mov	sp, r7
 800cb34:	b004      	add	sp, #16
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	1dbb      	adds	r3, r7, #6
 800cb44:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb46:	1dbb      	adds	r3, r7, #6
 800cb48:	881b      	ldrh	r3, [r3, #0]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	68f8      	ldr	r0, [r7, #12]
 800cb4e:	2100      	movs	r1, #0
 800cb50:	f000 fcf3 	bl	800d53a <USBD_LL_Transmit>

  return USBD_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	0018      	movs	r0, r3
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	b004      	add	sp, #16
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	1dbb      	adds	r3, r7, #6
 800cb6a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	23a5      	movs	r3, #165	; 0xa5
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	2103      	movs	r1, #3
 800cb74:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800cb76:	1dbb      	adds	r3, r7, #6
 800cb78:	8819      	ldrh	r1, [r3, #0]
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	23ae      	movs	r3, #174	; 0xae
 800cb7e:	005b      	lsls	r3, r3, #1
 800cb80:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800cb82:	1dbb      	adds	r3, r7, #6
 800cb84:	8819      	ldrh	r1, [r3, #0]
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	23b0      	movs	r3, #176	; 0xb0
 800cb8a:	005b      	lsls	r3, r3, #1
 800cb8c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb8e:	1dbb      	adds	r3, r7, #6
 800cb90:	881b      	ldrh	r3, [r3, #0]
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	2100      	movs	r1, #0
 800cb98:	f000 fd06 	bl	800d5a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	0018      	movs	r0, r3
 800cba0:	46bd      	mov	sp, r7
 800cba2:	b004      	add	sp, #16
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b084      	sub	sp, #16
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	60f8      	str	r0, [r7, #12]
 800cbae:	60b9      	str	r1, [r7, #8]
 800cbb0:	1dbb      	adds	r3, r7, #6
 800cbb2:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbb4:	1dbb      	adds	r3, r7, #6
 800cbb6:	881b      	ldrh	r3, [r3, #0]
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	f000 fcf3 	bl	800d5a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	0018      	movs	r0, r3
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	b004      	add	sp, #16
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	23a5      	movs	r3, #165	; 0xa5
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	2104      	movs	r1, #4
 800cbdc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	f000 fca8 	bl	800d53a <USBD_LL_Transmit>

  return USBD_OK;
 800cbea:	2300      	movs	r3, #0
}
 800cbec:	0018      	movs	r0, r3
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	b002      	add	sp, #8
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	23a5      	movs	r3, #165	; 0xa5
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	2105      	movs	r1, #5
 800cc04:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	2300      	movs	r3, #0
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	f000 fccb 	bl	800d5a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc12:	2300      	movs	r3, #0
}
 800cc14:	0018      	movs	r0, r3
 800cc16:	46bd      	mov	sp, r7
 800cc18:	b002      	add	sp, #8
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc20:	4914      	ldr	r1, [pc, #80]	; (800cc74 <MX_USB_DEVICE_Init+0x58>)
 800cc22:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <MX_USB_DEVICE_Init+0x5c>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	0018      	movs	r0, r3
 800cc28:	f7fe fdea 	bl	800b800 <USBD_Init>
 800cc2c:	1e03      	subs	r3, r0, #0
 800cc2e:	d001      	beq.n	800cc34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc30:	f7f5 fc86 	bl	8002540 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cc34:	4a11      	ldr	r2, [pc, #68]	; (800cc7c <MX_USB_DEVICE_Init+0x60>)
 800cc36:	4b10      	ldr	r3, [pc, #64]	; (800cc78 <MX_USB_DEVICE_Init+0x5c>)
 800cc38:	0011      	movs	r1, r2
 800cc3a:	0018      	movs	r0, r3
 800cc3c:	f7fe fe11 	bl	800b862 <USBD_RegisterClass>
 800cc40:	1e03      	subs	r3, r0, #0
 800cc42:	d001      	beq.n	800cc48 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800cc44:	f7f5 fc7c 	bl	8002540 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cc48:	4a0d      	ldr	r2, [pc, #52]	; (800cc80 <MX_USB_DEVICE_Init+0x64>)
 800cc4a:	4b0b      	ldr	r3, [pc, #44]	; (800cc78 <MX_USB_DEVICE_Init+0x5c>)
 800cc4c:	0011      	movs	r1, r2
 800cc4e:	0018      	movs	r0, r3
 800cc50:	f7fe fd26 	bl	800b6a0 <USBD_CDC_RegisterInterface>
 800cc54:	1e03      	subs	r3, r0, #0
 800cc56:	d001      	beq.n	800cc5c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800cc58:	f7f5 fc72 	bl	8002540 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc5c:	4b06      	ldr	r3, [pc, #24]	; (800cc78 <MX_USB_DEVICE_Init+0x5c>)
 800cc5e:	0018      	movs	r0, r3
 800cc60:	f7fe fe1f 	bl	800b8a2 <USBD_Start>
 800cc64:	1e03      	subs	r3, r0, #0
 800cc66:	d001      	beq.n	800cc6c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800cc68:	f7f5 fc6a 	bl	8002540 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc6c:	46c0      	nop			; (mov r8, r8)
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	46c0      	nop			; (mov r8, r8)
 800cc74:	2000012c 	.word	0x2000012c
 800cc78:	20000420 	.word	0x20000420
 800cc7c:	20000018 	.word	0x20000018
 800cc80:	2000011c 	.word	0x2000011c

0800cc84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc88:	4907      	ldr	r1, [pc, #28]	; (800cca8 <CDC_Init_FS+0x24>)
 800cc8a:	4b08      	ldr	r3, [pc, #32]	; (800ccac <CDC_Init_FS+0x28>)
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	0018      	movs	r0, r3
 800cc90:	f7fe fd21 	bl	800b6d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc94:	4a06      	ldr	r2, [pc, #24]	; (800ccb0 <CDC_Init_FS+0x2c>)
 800cc96:	4b05      	ldr	r3, [pc, #20]	; (800ccac <CDC_Init_FS+0x28>)
 800cc98:	0011      	movs	r1, r2
 800cc9a:	0018      	movs	r0, r3
 800cc9c:	f7fe fd37 	bl	800b70e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cca0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cca2:	0018      	movs	r0, r3
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	20000acc 	.word	0x20000acc
 800ccac:	20000420 	.word	0x20000420
 800ccb0:	200006e4 	.word	0x200006e4

0800ccb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ccb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ccba:	0018      	movs	r0, r3
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6039      	str	r1, [r7, #0]
 800ccc8:	0011      	movs	r1, r2
 800ccca:	1dfb      	adds	r3, r7, #7
 800cccc:	1c02      	adds	r2, r0, #0
 800ccce:	701a      	strb	r2, [r3, #0]
 800ccd0:	1d3b      	adds	r3, r7, #4
 800ccd2:	1c0a      	adds	r2, r1, #0
 800ccd4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ccd6:	1dfb      	adds	r3, r7, #7
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b23      	cmp	r3, #35	; 0x23
 800ccdc:	d804      	bhi.n	800cce8 <CDC_Control_FS+0x28>
 800ccde:	009a      	lsls	r2, r3, #2
 800cce0:	4b04      	ldr	r3, [pc, #16]	; (800ccf4 <CDC_Control_FS+0x34>)
 800cce2:	18d3      	adds	r3, r2, r3
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cce8:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800ccea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ccec:	0018      	movs	r0, r3
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	b002      	add	sp, #8
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	0800e2f8 	.word	0x0800e2f8

0800ccf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccf8:	b590      	push	{r4, r7, lr}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800cd02:	4b18      	ldr	r3, [pc, #96]	; (800cd64 <CDC_Receive_FS+0x6c>)
 800cd04:	7a1a      	ldrb	r2, [r3, #8]
 800cd06:	2101      	movs	r1, #1
 800cd08:	430a      	orrs	r2, r1
 800cd0a:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800cd0c:	230f      	movs	r3, #15
 800cd0e:	18fb      	adds	r3, r7, r3
 800cd10:	2200      	movs	r2, #0
 800cd12:	701a      	strb	r2, [r3, #0]
 800cd14:	e00f      	b.n	800cd36 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800cd16:	4b14      	ldr	r3, [pc, #80]	; (800cd68 <CDC_Receive_FS+0x70>)
 800cd18:	6818      	ldr	r0, [r3, #0]
 800cd1a:	240f      	movs	r4, #15
 800cd1c:	193b      	adds	r3, r7, r4
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	18d3      	adds	r3, r2, r3
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	0019      	movs	r1, r3
 800cd28:	f7f5 fc5a 	bl	80025e0 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800cd2c:	193b      	adds	r3, r7, r4
 800cd2e:	781a      	ldrb	r2, [r3, #0]
 800cd30:	193b      	adds	r3, r7, r4
 800cd32:	3201      	adds	r2, #1
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	230f      	movs	r3, #15
 800cd38:	18fb      	adds	r3, r7, r3
 800cd3a:	781a      	ldrb	r2, [r3, #0]
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d3e8      	bcc.n	800cd16 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	4b09      	ldr	r3, [pc, #36]	; (800cd6c <CDC_Receive_FS+0x74>)
 800cd48:	0011      	movs	r1, r2
 800cd4a:	0018      	movs	r0, r3
 800cd4c:	f7fe fcdf 	bl	800b70e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd50:	4b06      	ldr	r3, [pc, #24]	; (800cd6c <CDC_Receive_FS+0x74>)
 800cd52:	0018      	movs	r0, r3
 800cd54:	f7fe fd26 	bl	800b7a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd5a:	0018      	movs	r0, r3
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	b005      	add	sp, #20
 800cd60:	bd90      	pop	{r4, r7, pc}
 800cd62:	46c0      	nop			; (mov r8, r8)
 800cd64:	200003d0 	.word	0x200003d0
 800cd68:	20000eb4 	.word	0x20000eb4
 800cd6c:	20000420 	.word	0x20000420

0800cd70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd70:	b5b0      	push	{r4, r5, r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	000a      	movs	r2, r1
 800cd7a:	1cbb      	adds	r3, r7, #2
 800cd7c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800cd7e:	230f      	movs	r3, #15
 800cd80:	18fb      	adds	r3, r7, r3
 800cd82:	2200      	movs	r2, #0
 800cd84:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd86:	4a11      	ldr	r2, [pc, #68]	; (800cdcc <CDC_Transmit_FS+0x5c>)
 800cd88:	23ae      	movs	r3, #174	; 0xae
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	58d3      	ldr	r3, [r2, r3]
 800cd8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	2385      	movs	r3, #133	; 0x85
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	58d3      	ldr	r3, [r2, r3]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d001      	beq.n	800cda0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e010      	b.n	800cdc2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cda0:	1cbb      	adds	r3, r7, #2
 800cda2:	881a      	ldrh	r2, [r3, #0]
 800cda4:	6879      	ldr	r1, [r7, #4]
 800cda6:	4b09      	ldr	r3, [pc, #36]	; (800cdcc <CDC_Transmit_FS+0x5c>)
 800cda8:	0018      	movs	r0, r3
 800cdaa:	f7fe fc94 	bl	800b6d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cdae:	250f      	movs	r5, #15
 800cdb0:	197c      	adds	r4, r7, r5
 800cdb2:	4b06      	ldr	r3, [pc, #24]	; (800cdcc <CDC_Transmit_FS+0x5c>)
 800cdb4:	0018      	movs	r0, r3
 800cdb6:	f7fe fcbe 	bl	800b736 <USBD_CDC_TransmitPacket>
 800cdba:	0003      	movs	r3, r0
 800cdbc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800cdbe:	197b      	adds	r3, r7, r5
 800cdc0:	781b      	ldrb	r3, [r3, #0]
}
 800cdc2:	0018      	movs	r0, r3
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	b004      	add	sp, #16
 800cdc8:	bdb0      	pop	{r4, r5, r7, pc}
 800cdca:	46c0      	nop			; (mov r8, r8)
 800cdcc:	20000420 	.word	0x20000420

0800cdd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	0002      	movs	r2, r0
 800cdd8:	6039      	str	r1, [r7, #0]
 800cdda:	1dfb      	adds	r3, r7, #7
 800cddc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2212      	movs	r2, #18
 800cde2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cde4:	4b02      	ldr	r3, [pc, #8]	; (800cdf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cde6:	0018      	movs	r0, r3
 800cde8:	46bd      	mov	sp, r7
 800cdea:	b002      	add	sp, #8
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	46c0      	nop			; (mov r8, r8)
 800cdf0:	20000148 	.word	0x20000148

0800cdf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	0002      	movs	r2, r0
 800cdfc:	6039      	str	r1, [r7, #0]
 800cdfe:	1dfb      	adds	r3, r7, #7
 800ce00:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	2204      	movs	r2, #4
 800ce06:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce08:	4b02      	ldr	r3, [pc, #8]	; (800ce14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce0a:	0018      	movs	r0, r3
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	b002      	add	sp, #8
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	46c0      	nop			; (mov r8, r8)
 800ce14:	2000015c 	.word	0x2000015c

0800ce18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	0002      	movs	r2, r0
 800ce20:	6039      	str	r1, [r7, #0]
 800ce22:	1dfb      	adds	r3, r7, #7
 800ce24:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ce26:	1dfb      	adds	r3, r7, #7
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d106      	bne.n	800ce3c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce2e:	683a      	ldr	r2, [r7, #0]
 800ce30:	4908      	ldr	r1, [pc, #32]	; (800ce54 <USBD_FS_ProductStrDescriptor+0x3c>)
 800ce32:	4b09      	ldr	r3, [pc, #36]	; (800ce58 <USBD_FS_ProductStrDescriptor+0x40>)
 800ce34:	0018      	movs	r0, r3
 800ce36:	f7ff fdf4 	bl	800ca22 <USBD_GetString>
 800ce3a:	e005      	b.n	800ce48 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	4905      	ldr	r1, [pc, #20]	; (800ce54 <USBD_FS_ProductStrDescriptor+0x3c>)
 800ce40:	4b05      	ldr	r3, [pc, #20]	; (800ce58 <USBD_FS_ProductStrDescriptor+0x40>)
 800ce42:	0018      	movs	r0, r3
 800ce44:	f7ff fded 	bl	800ca22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce48:	4b02      	ldr	r3, [pc, #8]	; (800ce54 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800ce4a:	0018      	movs	r0, r3
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	b002      	add	sp, #8
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	46c0      	nop			; (mov r8, r8)
 800ce54:	20000eb8 	.word	0x20000eb8
 800ce58:	0800e140 	.word	0x0800e140

0800ce5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	0002      	movs	r2, r0
 800ce64:	6039      	str	r1, [r7, #0]
 800ce66:	1dfb      	adds	r3, r7, #7
 800ce68:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	4904      	ldr	r1, [pc, #16]	; (800ce80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce6e:	4b05      	ldr	r3, [pc, #20]	; (800ce84 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800ce70:	0018      	movs	r0, r3
 800ce72:	f7ff fdd6 	bl	800ca22 <USBD_GetString>
  return USBD_StrDesc;
 800ce76:	4b02      	ldr	r3, [pc, #8]	; (800ce80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800ce78:	0018      	movs	r0, r3
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	b002      	add	sp, #8
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	20000eb8 	.word	0x20000eb8
 800ce84:	0800e158 	.word	0x0800e158

0800ce88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	0002      	movs	r2, r0
 800ce90:	6039      	str	r1, [r7, #0]
 800ce92:	1dfb      	adds	r3, r7, #7
 800ce94:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	221a      	movs	r2, #26
 800ce9a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce9c:	f000 f84c 	bl	800cf38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cea0:	4b02      	ldr	r3, [pc, #8]	; (800ceac <USBD_FS_SerialStrDescriptor+0x24>)
}
 800cea2:	0018      	movs	r0, r3
 800cea4:	46bd      	mov	sp, r7
 800cea6:	b002      	add	sp, #8
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	46c0      	nop			; (mov r8, r8)
 800ceac:	20000160 	.word	0x20000160

0800ceb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	0002      	movs	r2, r0
 800ceb8:	6039      	str	r1, [r7, #0]
 800ceba:	1dfb      	adds	r3, r7, #7
 800cebc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800cebe:	1dfb      	adds	r3, r7, #7
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d106      	bne.n	800ced4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cec6:	683a      	ldr	r2, [r7, #0]
 800cec8:	4908      	ldr	r1, [pc, #32]	; (800ceec <USBD_FS_ConfigStrDescriptor+0x3c>)
 800ceca:	4b09      	ldr	r3, [pc, #36]	; (800cef0 <USBD_FS_ConfigStrDescriptor+0x40>)
 800cecc:	0018      	movs	r0, r3
 800cece:	f7ff fda8 	bl	800ca22 <USBD_GetString>
 800ced2:	e005      	b.n	800cee0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	4905      	ldr	r1, [pc, #20]	; (800ceec <USBD_FS_ConfigStrDescriptor+0x3c>)
 800ced8:	4b05      	ldr	r3, [pc, #20]	; (800cef0 <USBD_FS_ConfigStrDescriptor+0x40>)
 800ceda:	0018      	movs	r0, r3
 800cedc:	f7ff fda1 	bl	800ca22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cee0:	4b02      	ldr	r3, [pc, #8]	; (800ceec <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800cee2:	0018      	movs	r0, r3
 800cee4:	46bd      	mov	sp, r7
 800cee6:	b002      	add	sp, #8
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	46c0      	nop			; (mov r8, r8)
 800ceec:	20000eb8 	.word	0x20000eb8
 800cef0:	0800e16c 	.word	0x0800e16c

0800cef4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	0002      	movs	r2, r0
 800cefc:	6039      	str	r1, [r7, #0]
 800cefe:	1dfb      	adds	r3, r7, #7
 800cf00:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800cf02:	1dfb      	adds	r3, r7, #7
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d106      	bne.n	800cf18 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf0a:	683a      	ldr	r2, [r7, #0]
 800cf0c:	4908      	ldr	r1, [pc, #32]	; (800cf30 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800cf0e:	4b09      	ldr	r3, [pc, #36]	; (800cf34 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800cf10:	0018      	movs	r0, r3
 800cf12:	f7ff fd86 	bl	800ca22 <USBD_GetString>
 800cf16:	e005      	b.n	800cf24 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf18:	683a      	ldr	r2, [r7, #0]
 800cf1a:	4905      	ldr	r1, [pc, #20]	; (800cf30 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800cf1c:	4b05      	ldr	r3, [pc, #20]	; (800cf34 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800cf1e:	0018      	movs	r0, r3
 800cf20:	f7ff fd7f 	bl	800ca22 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf24:	4b02      	ldr	r3, [pc, #8]	; (800cf30 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800cf26:	0018      	movs	r0, r3
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	b002      	add	sp, #8
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	46c0      	nop			; (mov r8, r8)
 800cf30:	20000eb8 	.word	0x20000eb8
 800cf34:	0800e178 	.word	0x0800e178

0800cf38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf3e:	4b10      	ldr	r3, [pc, #64]	; (800cf80 <Get_SerialNum+0x48>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf44:	4b0f      	ldr	r3, [pc, #60]	; (800cf84 <Get_SerialNum+0x4c>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf4a:	4b0f      	ldr	r3, [pc, #60]	; (800cf88 <Get_SerialNum+0x50>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	18d3      	adds	r3, r2, r3
 800cf56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00b      	beq.n	800cf76 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf5e:	490b      	ldr	r1, [pc, #44]	; (800cf8c <Get_SerialNum+0x54>)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2208      	movs	r2, #8
 800cf64:	0018      	movs	r0, r3
 800cf66:	f000 f815 	bl	800cf94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf6a:	4909      	ldr	r1, [pc, #36]	; (800cf90 <Get_SerialNum+0x58>)
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	2204      	movs	r2, #4
 800cf70:	0018      	movs	r0, r3
 800cf72:	f000 f80f 	bl	800cf94 <IntToUnicode>
  }
}
 800cf76:	46c0      	nop			; (mov r8, r8)
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	b004      	add	sp, #16
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	46c0      	nop			; (mov r8, r8)
 800cf80:	1ffff7ac 	.word	0x1ffff7ac
 800cf84:	1ffff7b0 	.word	0x1ffff7b0
 800cf88:	1ffff7b4 	.word	0x1ffff7b4
 800cf8c:	20000162 	.word	0x20000162
 800cf90:	20000172 	.word	0x20000172

0800cf94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	1dfb      	adds	r3, r7, #7
 800cfa0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800cfa2:	2117      	movs	r1, #23
 800cfa4:	187b      	adds	r3, r7, r1
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800cfaa:	187b      	adds	r3, r7, r1
 800cfac:	2200      	movs	r2, #0
 800cfae:	701a      	strb	r2, [r3, #0]
 800cfb0:	e02f      	b.n	800d012 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	0f1b      	lsrs	r3, r3, #28
 800cfb6:	2b09      	cmp	r3, #9
 800cfb8:	d80d      	bhi.n	800cfd6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	0f1b      	lsrs	r3, r3, #28
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	2317      	movs	r3, #23
 800cfc2:	18fb      	adds	r3, r7, r3
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	005b      	lsls	r3, r3, #1
 800cfc8:	0019      	movs	r1, r3
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	185b      	adds	r3, r3, r1
 800cfce:	3230      	adds	r2, #48	; 0x30
 800cfd0:	b2d2      	uxtb	r2, r2
 800cfd2:	701a      	strb	r2, [r3, #0]
 800cfd4:	e00c      	b.n	800cff0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	0f1b      	lsrs	r3, r3, #28
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	2317      	movs	r3, #23
 800cfde:	18fb      	adds	r3, r7, r3
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	0019      	movs	r1, r3
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	185b      	adds	r3, r3, r1
 800cfea:	3237      	adds	r2, #55	; 0x37
 800cfec:	b2d2      	uxtb	r2, r2
 800cfee:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	011b      	lsls	r3, r3, #4
 800cff4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cff6:	2117      	movs	r1, #23
 800cff8:	187b      	adds	r3, r7, r1
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	005b      	lsls	r3, r3, #1
 800cffe:	3301      	adds	r3, #1
 800d000:	68ba      	ldr	r2, [r7, #8]
 800d002:	18d3      	adds	r3, r2, r3
 800d004:	2200      	movs	r2, #0
 800d006:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d008:	187b      	adds	r3, r7, r1
 800d00a:	781a      	ldrb	r2, [r3, #0]
 800d00c:	187b      	adds	r3, r7, r1
 800d00e:	3201      	adds	r2, #1
 800d010:	701a      	strb	r2, [r3, #0]
 800d012:	2317      	movs	r3, #23
 800d014:	18fa      	adds	r2, r7, r3
 800d016:	1dfb      	adds	r3, r7, #7
 800d018:	7812      	ldrb	r2, [r2, #0]
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d3c8      	bcc.n	800cfb2 <IntToUnicode+0x1e>
  }
}
 800d020:	46c0      	nop			; (mov r8, r8)
 800d022:	46c0      	nop			; (mov r8, r8)
 800d024:	46bd      	mov	sp, r7
 800d026:	b006      	add	sp, #24
 800d028:	bd80      	pop	{r7, pc}
	...

0800d02c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a0e      	ldr	r2, [pc, #56]	; (800d074 <HAL_PCD_MspInit+0x48>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d115      	bne.n	800d06a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d03e:	4b0e      	ldr	r3, [pc, #56]	; (800d078 <HAL_PCD_MspInit+0x4c>)
 800d040:	69da      	ldr	r2, [r3, #28]
 800d042:	4b0d      	ldr	r3, [pc, #52]	; (800d078 <HAL_PCD_MspInit+0x4c>)
 800d044:	2180      	movs	r1, #128	; 0x80
 800d046:	0409      	lsls	r1, r1, #16
 800d048:	430a      	orrs	r2, r1
 800d04a:	61da      	str	r2, [r3, #28]
 800d04c:	4b0a      	ldr	r3, [pc, #40]	; (800d078 <HAL_PCD_MspInit+0x4c>)
 800d04e:	69da      	ldr	r2, [r3, #28]
 800d050:	2380      	movs	r3, #128	; 0x80
 800d052:	041b      	lsls	r3, r3, #16
 800d054:	4013      	ands	r3, r2
 800d056:	60fb      	str	r3, [r7, #12]
 800d058:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d05a:	2200      	movs	r2, #0
 800d05c:	2100      	movs	r1, #0
 800d05e:	201f      	movs	r0, #31
 800d060:	f7f6 ffc6 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d064:	201f      	movs	r0, #31
 800d066:	f7f6 ffd8 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d06a:	46c0      	nop			; (mov r8, r8)
 800d06c:	46bd      	mov	sp, r7
 800d06e:	b004      	add	sp, #16
 800d070:	bd80      	pop	{r7, pc}
 800d072:	46c0      	nop			; (mov r8, r8)
 800d074:	40005c00 	.word	0x40005c00
 800d078:	40021000 	.word	0x40021000

0800d07c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	23bc      	movs	r3, #188	; 0xbc
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	58d2      	ldr	r2, [r2, r3]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	21ac      	movs	r1, #172	; 0xac
 800d090:	0089      	lsls	r1, r1, #2
 800d092:	468c      	mov	ip, r1
 800d094:	4463      	add	r3, ip
 800d096:	0019      	movs	r1, r3
 800d098:	0010      	movs	r0, r2
 800d09a:	f7fe fc55 	bl	800b948 <USBD_LL_SetupStage>
}
 800d09e:	46c0      	nop			; (mov r8, r8)
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	b002      	add	sp, #8
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0a6:	b590      	push	{r4, r7, lr}
 800d0a8:	b083      	sub	sp, #12
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	000a      	movs	r2, r1
 800d0b0:	1cfb      	adds	r3, r7, #3
 800d0b2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	23bc      	movs	r3, #188	; 0xbc
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	58d4      	ldr	r4, [r2, r3]
 800d0bc:	1cfb      	adds	r3, r7, #3
 800d0be:	781a      	ldrb	r2, [r3, #0]
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	23be      	movs	r3, #190	; 0xbe
 800d0c4:	0059      	lsls	r1, r3, #1
 800d0c6:	0013      	movs	r3, r2
 800d0c8:	009b      	lsls	r3, r3, #2
 800d0ca:	189b      	adds	r3, r3, r2
 800d0cc:	00db      	lsls	r3, r3, #3
 800d0ce:	18c3      	adds	r3, r0, r3
 800d0d0:	185b      	adds	r3, r3, r1
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	1cfb      	adds	r3, r7, #3
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	0019      	movs	r1, r3
 800d0da:	0020      	movs	r0, r4
 800d0dc:	f7fe fc92 	bl	800ba04 <USBD_LL_DataOutStage>
}
 800d0e0:	46c0      	nop			; (mov r8, r8)
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	b003      	add	sp, #12
 800d0e6:	bd90      	pop	{r4, r7, pc}

0800d0e8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	000a      	movs	r2, r1
 800d0f2:	1cfb      	adds	r3, r7, #3
 800d0f4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	23bc      	movs	r3, #188	; 0xbc
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	58d0      	ldr	r0, [r2, r3]
 800d0fe:	1cfb      	adds	r3, r7, #3
 800d100:	781a      	ldrb	r2, [r3, #0]
 800d102:	6879      	ldr	r1, [r7, #4]
 800d104:	0013      	movs	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	189b      	adds	r3, r3, r2
 800d10a:	00db      	lsls	r3, r3, #3
 800d10c:	18cb      	adds	r3, r1, r3
 800d10e:	333c      	adds	r3, #60	; 0x3c
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	1cfb      	adds	r3, r7, #3
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	0019      	movs	r1, r3
 800d118:	f7fe fcf6 	bl	800bb08 <USBD_LL_DataInStage>
}
 800d11c:	46c0      	nop			; (mov r8, r8)
 800d11e:	46bd      	mov	sp, r7
 800d120:	b002      	add	sp, #8
 800d122:	bd80      	pop	{r7, pc}

0800d124 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	23bc      	movs	r3, #188	; 0xbc
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	58d3      	ldr	r3, [r2, r3]
 800d134:	0018      	movs	r0, r3
 800d136:	f7fe fe2d 	bl	800bd94 <USBD_LL_SOF>
}
 800d13a:	46c0      	nop			; (mov r8, r8)
 800d13c:	46bd      	mov	sp, r7
 800d13e:	b002      	add	sp, #8
 800d140:	bd80      	pop	{r7, pc}

0800d142 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b084      	sub	sp, #16
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d14a:	230f      	movs	r3, #15
 800d14c:	18fb      	adds	r3, r7, r3
 800d14e:	2201      	movs	r2, #1
 800d150:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	2b02      	cmp	r3, #2
 800d158:	d001      	beq.n	800d15e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800d15a:	f7f5 f9f1 	bl	8002540 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	23bc      	movs	r3, #188	; 0xbc
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	58d2      	ldr	r2, [r2, r3]
 800d166:	230f      	movs	r3, #15
 800d168:	18fb      	adds	r3, r7, r3
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	0019      	movs	r1, r3
 800d16e:	0010      	movs	r0, r2
 800d170:	f7fe fdcf 	bl	800bd12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	23bc      	movs	r3, #188	; 0xbc
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	58d3      	ldr	r3, [r2, r3]
 800d17c:	0018      	movs	r0, r3
 800d17e:	f7fe fd80 	bl	800bc82 <USBD_LL_Reset>
}
 800d182:	46c0      	nop			; (mov r8, r8)
 800d184:	46bd      	mov	sp, r7
 800d186:	b004      	add	sp, #16
 800d188:	bd80      	pop	{r7, pc}
	...

0800d18c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	23bc      	movs	r3, #188	; 0xbc
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	58d3      	ldr	r3, [r2, r3]
 800d19c:	0018      	movs	r0, r3
 800d19e:	f7fe fdc9 	bl	800bd34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d005      	beq.n	800d1b6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1aa:	4b05      	ldr	r3, [pc, #20]	; (800d1c0 <HAL_PCD_SuspendCallback+0x34>)
 800d1ac:	691a      	ldr	r2, [r3, #16]
 800d1ae:	4b04      	ldr	r3, [pc, #16]	; (800d1c0 <HAL_PCD_SuspendCallback+0x34>)
 800d1b0:	2106      	movs	r1, #6
 800d1b2:	430a      	orrs	r2, r1
 800d1b4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800d1b6:	46c0      	nop			; (mov r8, r8)
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	b002      	add	sp, #8
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	46c0      	nop			; (mov r8, r8)
 800d1c0:	e000ed00 	.word	0xe000ed00

0800d1c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	699b      	ldr	r3, [r3, #24]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d007      	beq.n	800d1e4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1d4:	4b09      	ldr	r3, [pc, #36]	; (800d1fc <HAL_PCD_ResumeCallback+0x38>)
 800d1d6:	691a      	ldr	r2, [r3, #16]
 800d1d8:	4b08      	ldr	r3, [pc, #32]	; (800d1fc <HAL_PCD_ResumeCallback+0x38>)
 800d1da:	2106      	movs	r1, #6
 800d1dc:	438a      	bics	r2, r1
 800d1de:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800d1e0:	f000 fa44 	bl	800d66c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	23bc      	movs	r3, #188	; 0xbc
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	58d3      	ldr	r3, [r2, r3]
 800d1ec:	0018      	movs	r0, r3
 800d1ee:	f7fe fdb9 	bl	800bd64 <USBD_LL_Resume>
}
 800d1f2:	46c0      	nop			; (mov r8, r8)
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	b002      	add	sp, #8
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	46c0      	nop			; (mov r8, r8)
 800d1fc:	e000ed00 	.word	0xe000ed00

0800d200 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d208:	4a2d      	ldr	r2, [pc, #180]	; (800d2c0 <USBD_LL_Init+0xc0>)
 800d20a:	23bc      	movs	r3, #188	; 0xbc
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	6879      	ldr	r1, [r7, #4]
 800d210:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	23b0      	movs	r3, #176	; 0xb0
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	4929      	ldr	r1, [pc, #164]	; (800d2c0 <USBD_LL_Init+0xc0>)
 800d21a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800d21c:	4b28      	ldr	r3, [pc, #160]	; (800d2c0 <USBD_LL_Init+0xc0>)
 800d21e:	4a29      	ldr	r2, [pc, #164]	; (800d2c4 <USBD_LL_Init+0xc4>)
 800d220:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d222:	4b27      	ldr	r3, [pc, #156]	; (800d2c0 <USBD_LL_Init+0xc0>)
 800d224:	2208      	movs	r2, #8
 800d226:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d228:	4b25      	ldr	r3, [pc, #148]	; (800d2c0 <USBD_LL_Init+0xc0>)
 800d22a:	2202      	movs	r2, #2
 800d22c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d22e:	4b24      	ldr	r3, [pc, #144]	; (800d2c0 <USBD_LL_Init+0xc0>)
 800d230:	2202      	movs	r2, #2
 800d232:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d234:	4b22      	ldr	r3, [pc, #136]	; (800d2c0 <USBD_LL_Init+0xc0>)
 800d236:	2200      	movs	r2, #0
 800d238:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d23a:	4b21      	ldr	r3, [pc, #132]	; (800d2c0 <USBD_LL_Init+0xc0>)
 800d23c:	2200      	movs	r2, #0
 800d23e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d240:	4b1f      	ldr	r3, [pc, #124]	; (800d2c0 <USBD_LL_Init+0xc0>)
 800d242:	2200      	movs	r2, #0
 800d244:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d246:	4b1e      	ldr	r3, [pc, #120]	; (800d2c0 <USBD_LL_Init+0xc0>)
 800d248:	0018      	movs	r0, r3
 800d24a:	f7f7 f96b 	bl	8004524 <HAL_PCD_Init>
 800d24e:	1e03      	subs	r3, r0, #0
 800d250:	d001      	beq.n	800d256 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800d252:	f7f5 f975 	bl	8002540 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	23b0      	movs	r3, #176	; 0xb0
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	58d0      	ldr	r0, [r2, r3]
 800d25e:	2318      	movs	r3, #24
 800d260:	2200      	movs	r2, #0
 800d262:	2100      	movs	r1, #0
 800d264:	f7f8 ff4c 	bl	8006100 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	23b0      	movs	r3, #176	; 0xb0
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	58d0      	ldr	r0, [r2, r3]
 800d270:	2358      	movs	r3, #88	; 0x58
 800d272:	2200      	movs	r2, #0
 800d274:	2180      	movs	r1, #128	; 0x80
 800d276:	f7f8 ff43 	bl	8006100 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	23b0      	movs	r3, #176	; 0xb0
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	58d0      	ldr	r0, [r2, r3]
 800d282:	23c0      	movs	r3, #192	; 0xc0
 800d284:	2200      	movs	r2, #0
 800d286:	2181      	movs	r1, #129	; 0x81
 800d288:	f7f8 ff3a 	bl	8006100 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	23b0      	movs	r3, #176	; 0xb0
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	58d0      	ldr	r0, [r2, r3]
 800d294:	2388      	movs	r3, #136	; 0x88
 800d296:	005b      	lsls	r3, r3, #1
 800d298:	2200      	movs	r2, #0
 800d29a:	2101      	movs	r1, #1
 800d29c:	f7f8 ff30 	bl	8006100 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	23b0      	movs	r3, #176	; 0xb0
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	58d0      	ldr	r0, [r2, r3]
 800d2a8:	2380      	movs	r3, #128	; 0x80
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	2182      	movs	r1, #130	; 0x82
 800d2b0:	f7f8 ff26 	bl	8006100 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	0018      	movs	r0, r3
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	b002      	add	sp, #8
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	46c0      	nop			; (mov r8, r8)
 800d2c0:	200010b8 	.word	0x200010b8
 800d2c4:	40005c00 	.word	0x40005c00

0800d2c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d0:	210f      	movs	r1, #15
 800d2d2:	187b      	adds	r3, r7, r1
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d8:	260e      	movs	r6, #14
 800d2da:	19bb      	adds	r3, r7, r6
 800d2dc:	2200      	movs	r2, #0
 800d2de:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	23b0      	movs	r3, #176	; 0xb0
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	58d3      	ldr	r3, [r2, r3]
 800d2e8:	000d      	movs	r5, r1
 800d2ea:	187c      	adds	r4, r7, r1
 800d2ec:	0018      	movs	r0, r3
 800d2ee:	f7f7 fa29 	bl	8004744 <HAL_PCD_Start>
 800d2f2:	0003      	movs	r3, r0
 800d2f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2f6:	19bc      	adds	r4, r7, r6
 800d2f8:	197b      	adds	r3, r7, r5
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	0018      	movs	r0, r3
 800d2fe:	f000 f9bc 	bl	800d67a <USBD_Get_USB_Status>
 800d302:	0003      	movs	r3, r0
 800d304:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d306:	19bb      	adds	r3, r7, r6
 800d308:	781b      	ldrb	r3, [r3, #0]
}
 800d30a:	0018      	movs	r0, r3
 800d30c:	46bd      	mov	sp, r7
 800d30e:	b005      	add	sp, #20
 800d310:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d312 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d312:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d314:	b085      	sub	sp, #20
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
 800d31a:	000c      	movs	r4, r1
 800d31c:	0010      	movs	r0, r2
 800d31e:	0019      	movs	r1, r3
 800d320:	1cfb      	adds	r3, r7, #3
 800d322:	1c22      	adds	r2, r4, #0
 800d324:	701a      	strb	r2, [r3, #0]
 800d326:	1cbb      	adds	r3, r7, #2
 800d328:	1c02      	adds	r2, r0, #0
 800d32a:	701a      	strb	r2, [r3, #0]
 800d32c:	003b      	movs	r3, r7
 800d32e:	1c0a      	adds	r2, r1, #0
 800d330:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d332:	260f      	movs	r6, #15
 800d334:	19bb      	adds	r3, r7, r6
 800d336:	2200      	movs	r2, #0
 800d338:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d33a:	250e      	movs	r5, #14
 800d33c:	197b      	adds	r3, r7, r5
 800d33e:	2200      	movs	r2, #0
 800d340:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	23b0      	movs	r3, #176	; 0xb0
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	58d0      	ldr	r0, [r2, r3]
 800d34a:	19bc      	adds	r4, r7, r6
 800d34c:	1cbb      	adds	r3, r7, #2
 800d34e:	781d      	ldrb	r5, [r3, #0]
 800d350:	003b      	movs	r3, r7
 800d352:	881a      	ldrh	r2, [r3, #0]
 800d354:	1cfb      	adds	r3, r7, #3
 800d356:	7819      	ldrb	r1, [r3, #0]
 800d358:	002b      	movs	r3, r5
 800d35a:	f7f7 fbc0 	bl	8004ade <HAL_PCD_EP_Open>
 800d35e:	0003      	movs	r3, r0
 800d360:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d362:	250e      	movs	r5, #14
 800d364:	197c      	adds	r4, r7, r5
 800d366:	19bb      	adds	r3, r7, r6
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	0018      	movs	r0, r3
 800d36c:	f000 f985 	bl	800d67a <USBD_Get_USB_Status>
 800d370:	0003      	movs	r3, r0
 800d372:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d374:	197b      	adds	r3, r7, r5
 800d376:	781b      	ldrb	r3, [r3, #0]
}
 800d378:	0018      	movs	r0, r3
 800d37a:	46bd      	mov	sp, r7
 800d37c:	b005      	add	sp, #20
 800d37e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d380 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	000a      	movs	r2, r1
 800d38a:	1cfb      	adds	r3, r7, #3
 800d38c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d38e:	210f      	movs	r1, #15
 800d390:	187b      	adds	r3, r7, r1
 800d392:	2200      	movs	r2, #0
 800d394:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d396:	260e      	movs	r6, #14
 800d398:	19bb      	adds	r3, r7, r6
 800d39a:	2200      	movs	r2, #0
 800d39c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	23b0      	movs	r3, #176	; 0xb0
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	58d2      	ldr	r2, [r2, r3]
 800d3a6:	000d      	movs	r5, r1
 800d3a8:	187c      	adds	r4, r7, r1
 800d3aa:	1cfb      	adds	r3, r7, #3
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	0019      	movs	r1, r3
 800d3b0:	0010      	movs	r0, r2
 800d3b2:	f7f7 fc0c 	bl	8004bce <HAL_PCD_EP_Close>
 800d3b6:	0003      	movs	r3, r0
 800d3b8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3ba:	19bc      	adds	r4, r7, r6
 800d3bc:	197b      	adds	r3, r7, r5
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	0018      	movs	r0, r3
 800d3c2:	f000 f95a 	bl	800d67a <USBD_Get_USB_Status>
 800d3c6:	0003      	movs	r3, r0
 800d3c8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d3ca:	19bb      	adds	r3, r7, r6
 800d3cc:	781b      	ldrb	r3, [r3, #0]
}
 800d3ce:	0018      	movs	r0, r3
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	b005      	add	sp, #20
 800d3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3d6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3d8:	b085      	sub	sp, #20
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	000a      	movs	r2, r1
 800d3e0:	1cfb      	adds	r3, r7, #3
 800d3e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3e4:	210f      	movs	r1, #15
 800d3e6:	187b      	adds	r3, r7, r1
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ec:	260e      	movs	r6, #14
 800d3ee:	19bb      	adds	r3, r7, r6
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	23b0      	movs	r3, #176	; 0xb0
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	58d2      	ldr	r2, [r2, r3]
 800d3fc:	000d      	movs	r5, r1
 800d3fe:	187c      	adds	r4, r7, r1
 800d400:	1cfb      	adds	r3, r7, #3
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	0019      	movs	r1, r3
 800d406:	0010      	movs	r0, r2
 800d408:	f7f7 fcd8 	bl	8004dbc <HAL_PCD_EP_SetStall>
 800d40c:	0003      	movs	r3, r0
 800d40e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d410:	19bc      	adds	r4, r7, r6
 800d412:	197b      	adds	r3, r7, r5
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	0018      	movs	r0, r3
 800d418:	f000 f92f 	bl	800d67a <USBD_Get_USB_Status>
 800d41c:	0003      	movs	r3, r0
 800d41e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d420:	19bb      	adds	r3, r7, r6
 800d422:	781b      	ldrb	r3, [r3, #0]
}
 800d424:	0018      	movs	r0, r3
 800d426:	46bd      	mov	sp, r7
 800d428:	b005      	add	sp, #20
 800d42a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d42c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	000a      	movs	r2, r1
 800d436:	1cfb      	adds	r3, r7, #3
 800d438:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d43a:	210f      	movs	r1, #15
 800d43c:	187b      	adds	r3, r7, r1
 800d43e:	2200      	movs	r2, #0
 800d440:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d442:	260e      	movs	r6, #14
 800d444:	19bb      	adds	r3, r7, r6
 800d446:	2200      	movs	r2, #0
 800d448:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	23b0      	movs	r3, #176	; 0xb0
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	58d2      	ldr	r2, [r2, r3]
 800d452:	000d      	movs	r5, r1
 800d454:	187c      	adds	r4, r7, r1
 800d456:	1cfb      	adds	r3, r7, #3
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	0019      	movs	r1, r3
 800d45c:	0010      	movs	r0, r2
 800d45e:	f7f7 fd09 	bl	8004e74 <HAL_PCD_EP_ClrStall>
 800d462:	0003      	movs	r3, r0
 800d464:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d466:	19bc      	adds	r4, r7, r6
 800d468:	197b      	adds	r3, r7, r5
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	0018      	movs	r0, r3
 800d46e:	f000 f904 	bl	800d67a <USBD_Get_USB_Status>
 800d472:	0003      	movs	r3, r0
 800d474:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d476:	19bb      	adds	r3, r7, r6
 800d478:	781b      	ldrb	r3, [r3, #0]
}
 800d47a:	0018      	movs	r0, r3
 800d47c:	46bd      	mov	sp, r7
 800d47e:	b005      	add	sp, #20
 800d480:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d482 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b084      	sub	sp, #16
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	000a      	movs	r2, r1
 800d48c:	1cfb      	adds	r3, r7, #3
 800d48e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	23b0      	movs	r3, #176	; 0xb0
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	58d3      	ldr	r3, [r2, r3]
 800d498:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d49a:	1cfb      	adds	r3, r7, #3
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	b25b      	sxtb	r3, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	da0d      	bge.n	800d4c0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4a4:	1cfb      	adds	r3, r7, #3
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	227f      	movs	r2, #127	; 0x7f
 800d4aa:	4013      	ands	r3, r2
 800d4ac:	68f9      	ldr	r1, [r7, #12]
 800d4ae:	1c5a      	adds	r2, r3, #1
 800d4b0:	0013      	movs	r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	189b      	adds	r3, r3, r2
 800d4b6:	00db      	lsls	r3, r3, #3
 800d4b8:	18cb      	adds	r3, r1, r3
 800d4ba:	3302      	adds	r3, #2
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	e00d      	b.n	800d4dc <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d4c0:	1cfb      	adds	r3, r7, #3
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	227f      	movs	r2, #127	; 0x7f
 800d4c6:	401a      	ands	r2, r3
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	23b5      	movs	r3, #181	; 0xb5
 800d4cc:	0059      	lsls	r1, r3, #1
 800d4ce:	0013      	movs	r3, r2
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	189b      	adds	r3, r3, r2
 800d4d4:	00db      	lsls	r3, r3, #3
 800d4d6:	18c3      	adds	r3, r0, r3
 800d4d8:	185b      	adds	r3, r3, r1
 800d4da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d4dc:	0018      	movs	r0, r3
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	b004      	add	sp, #16
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	000a      	movs	r2, r1
 800d4ee:	1cfb      	adds	r3, r7, #3
 800d4f0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4f2:	210f      	movs	r1, #15
 800d4f4:	187b      	adds	r3, r7, r1
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4fa:	260e      	movs	r6, #14
 800d4fc:	19bb      	adds	r3, r7, r6
 800d4fe:	2200      	movs	r2, #0
 800d500:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	23b0      	movs	r3, #176	; 0xb0
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	58d2      	ldr	r2, [r2, r3]
 800d50a:	000d      	movs	r5, r1
 800d50c:	187c      	adds	r4, r7, r1
 800d50e:	1cfb      	adds	r3, r7, #3
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	0019      	movs	r1, r3
 800d514:	0010      	movs	r0, r2
 800d516:	f7f7 fab7 	bl	8004a88 <HAL_PCD_SetAddress>
 800d51a:	0003      	movs	r3, r0
 800d51c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d51e:	19bc      	adds	r4, r7, r6
 800d520:	197b      	adds	r3, r7, r5
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	0018      	movs	r0, r3
 800d526:	f000 f8a8 	bl	800d67a <USBD_Get_USB_Status>
 800d52a:	0003      	movs	r3, r0
 800d52c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d52e:	19bb      	adds	r3, r7, r6
 800d530:	781b      	ldrb	r3, [r3, #0]
}
 800d532:	0018      	movs	r0, r3
 800d534:	46bd      	mov	sp, r7
 800d536:	b005      	add	sp, #20
 800d538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d53a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d53a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d53c:	b087      	sub	sp, #28
 800d53e:	af00      	add	r7, sp, #0
 800d540:	60f8      	str	r0, [r7, #12]
 800d542:	0008      	movs	r0, r1
 800d544:	607a      	str	r2, [r7, #4]
 800d546:	0019      	movs	r1, r3
 800d548:	230b      	movs	r3, #11
 800d54a:	18fb      	adds	r3, r7, r3
 800d54c:	1c02      	adds	r2, r0, #0
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	2408      	movs	r4, #8
 800d552:	193b      	adds	r3, r7, r4
 800d554:	1c0a      	adds	r2, r1, #0
 800d556:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d558:	2117      	movs	r1, #23
 800d55a:	187b      	adds	r3, r7, r1
 800d55c:	2200      	movs	r2, #0
 800d55e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d560:	2516      	movs	r5, #22
 800d562:	197b      	adds	r3, r7, r5
 800d564:	2200      	movs	r2, #0
 800d566:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	23b0      	movs	r3, #176	; 0xb0
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	58d0      	ldr	r0, [r2, r3]
 800d570:	193b      	adds	r3, r7, r4
 800d572:	881d      	ldrh	r5, [r3, #0]
 800d574:	000e      	movs	r6, r1
 800d576:	187c      	adds	r4, r7, r1
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	230b      	movs	r3, #11
 800d57c:	18fb      	adds	r3, r7, r3
 800d57e:	7819      	ldrb	r1, [r3, #0]
 800d580:	002b      	movs	r3, r5
 800d582:	f7f7 fbd2 	bl	8004d2a <HAL_PCD_EP_Transmit>
 800d586:	0003      	movs	r3, r0
 800d588:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d58a:	2516      	movs	r5, #22
 800d58c:	197c      	adds	r4, r7, r5
 800d58e:	19bb      	adds	r3, r7, r6
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	0018      	movs	r0, r3
 800d594:	f000 f871 	bl	800d67a <USBD_Get_USB_Status>
 800d598:	0003      	movs	r3, r0
 800d59a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d59c:	197b      	adds	r3, r7, r5
 800d59e:	781b      	ldrb	r3, [r3, #0]
}
 800d5a0:	0018      	movs	r0, r3
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	b007      	add	sp, #28
 800d5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d5a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5aa:	b087      	sub	sp, #28
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	0008      	movs	r0, r1
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	0019      	movs	r1, r3
 800d5b6:	230b      	movs	r3, #11
 800d5b8:	18fb      	adds	r3, r7, r3
 800d5ba:	1c02      	adds	r2, r0, #0
 800d5bc:	701a      	strb	r2, [r3, #0]
 800d5be:	2408      	movs	r4, #8
 800d5c0:	193b      	adds	r3, r7, r4
 800d5c2:	1c0a      	adds	r2, r1, #0
 800d5c4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5c6:	2117      	movs	r1, #23
 800d5c8:	187b      	adds	r3, r7, r1
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ce:	2516      	movs	r5, #22
 800d5d0:	197b      	adds	r3, r7, r5
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	23b0      	movs	r3, #176	; 0xb0
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	58d0      	ldr	r0, [r2, r3]
 800d5de:	193b      	adds	r3, r7, r4
 800d5e0:	881d      	ldrh	r5, [r3, #0]
 800d5e2:	000e      	movs	r6, r1
 800d5e4:	187c      	adds	r4, r7, r1
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	230b      	movs	r3, #11
 800d5ea:	18fb      	adds	r3, r7, r3
 800d5ec:	7819      	ldrb	r1, [r3, #0]
 800d5ee:	002b      	movs	r3, r5
 800d5f0:	f7f7 fb3e 	bl	8004c70 <HAL_PCD_EP_Receive>
 800d5f4:	0003      	movs	r3, r0
 800d5f6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5f8:	2516      	movs	r5, #22
 800d5fa:	197c      	adds	r4, r7, r5
 800d5fc:	19bb      	adds	r3, r7, r6
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	0018      	movs	r0, r3
 800d602:	f000 f83a 	bl	800d67a <USBD_Get_USB_Status>
 800d606:	0003      	movs	r3, r0
 800d608:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d60a:	197b      	adds	r3, r7, r5
 800d60c:	781b      	ldrb	r3, [r3, #0]
}
 800d60e:	0018      	movs	r0, r3
 800d610:	46bd      	mov	sp, r7
 800d612:	b007      	add	sp, #28
 800d614:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d616 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	000a      	movs	r2, r1
 800d620:	1cfb      	adds	r3, r7, #3
 800d622:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	23b0      	movs	r3, #176	; 0xb0
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	58d2      	ldr	r2, [r2, r3]
 800d62c:	1cfb      	adds	r3, r7, #3
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	0019      	movs	r1, r3
 800d632:	0010      	movs	r0, r2
 800d634:	f7f7 fb60 	bl	8004cf8 <HAL_PCD_EP_GetRxCount>
 800d638:	0003      	movs	r3, r0
}
 800d63a:	0018      	movs	r0, r3
 800d63c:	46bd      	mov	sp, r7
 800d63e:	b002      	add	sp, #8
 800d640:	bd80      	pop	{r7, pc}
	...

0800d644 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d64c:	4b02      	ldr	r3, [pc, #8]	; (800d658 <USBD_static_malloc+0x14>)
}
 800d64e:	0018      	movs	r0, r3
 800d650:	46bd      	mov	sp, r7
 800d652:	b002      	add	sp, #8
 800d654:	bd80      	pop	{r7, pc}
 800d656:	46c0      	nop			; (mov r8, r8)
 800d658:	200013ac 	.word	0x200013ac

0800d65c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]

}
 800d664:	46c0      	nop			; (mov r8, r8)
 800d666:	46bd      	mov	sp, r7
 800d668:	b002      	add	sp, #8
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d670:	f7f3 ff3a 	bl	80014e8 <SystemClock_Config>
}
 800d674:	46c0      	nop			; (mov r8, r8)
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	0002      	movs	r2, r0
 800d682:	1dfb      	adds	r3, r7, #7
 800d684:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d686:	230f      	movs	r3, #15
 800d688:	18fb      	adds	r3, r7, r3
 800d68a:	2200      	movs	r2, #0
 800d68c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d68e:	1dfb      	adds	r3, r7, #7
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b03      	cmp	r3, #3
 800d694:	d017      	beq.n	800d6c6 <USBD_Get_USB_Status+0x4c>
 800d696:	dc1b      	bgt.n	800d6d0 <USBD_Get_USB_Status+0x56>
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d00f      	beq.n	800d6bc <USBD_Get_USB_Status+0x42>
 800d69c:	dc18      	bgt.n	800d6d0 <USBD_Get_USB_Status+0x56>
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d002      	beq.n	800d6a8 <USBD_Get_USB_Status+0x2e>
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d005      	beq.n	800d6b2 <USBD_Get_USB_Status+0x38>
 800d6a6:	e013      	b.n	800d6d0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d6a8:	230f      	movs	r3, #15
 800d6aa:	18fb      	adds	r3, r7, r3
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	701a      	strb	r2, [r3, #0]
    break;
 800d6b0:	e013      	b.n	800d6da <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6b2:	230f      	movs	r3, #15
 800d6b4:	18fb      	adds	r3, r7, r3
 800d6b6:	2202      	movs	r2, #2
 800d6b8:	701a      	strb	r2, [r3, #0]
    break;
 800d6ba:	e00e      	b.n	800d6da <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6bc:	230f      	movs	r3, #15
 800d6be:	18fb      	adds	r3, r7, r3
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	701a      	strb	r2, [r3, #0]
    break;
 800d6c4:	e009      	b.n	800d6da <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6c6:	230f      	movs	r3, #15
 800d6c8:	18fb      	adds	r3, r7, r3
 800d6ca:	2202      	movs	r2, #2
 800d6cc:	701a      	strb	r2, [r3, #0]
    break;
 800d6ce:	e004      	b.n	800d6da <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800d6d0:	230f      	movs	r3, #15
 800d6d2:	18fb      	adds	r3, r7, r3
 800d6d4:	2202      	movs	r2, #2
 800d6d6:	701a      	strb	r2, [r3, #0]
    break;
 800d6d8:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800d6da:	230f      	movs	r3, #15
 800d6dc:	18fb      	adds	r3, r7, r3
 800d6de:	781b      	ldrb	r3, [r3, #0]
}
 800d6e0:	0018      	movs	r0, r3
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	b004      	add	sp, #16
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <__errno>:
 800d6e8:	4b01      	ldr	r3, [pc, #4]	; (800d6f0 <__errno+0x8>)
 800d6ea:	6818      	ldr	r0, [r3, #0]
 800d6ec:	4770      	bx	lr
 800d6ee:	46c0      	nop			; (mov r8, r8)
 800d6f0:	2000017c 	.word	0x2000017c

0800d6f4 <__libc_init_array>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	2600      	movs	r6, #0
 800d6f8:	4d0c      	ldr	r5, [pc, #48]	; (800d72c <__libc_init_array+0x38>)
 800d6fa:	4c0d      	ldr	r4, [pc, #52]	; (800d730 <__libc_init_array+0x3c>)
 800d6fc:	1b64      	subs	r4, r4, r5
 800d6fe:	10a4      	asrs	r4, r4, #2
 800d700:	42a6      	cmp	r6, r4
 800d702:	d109      	bne.n	800d718 <__libc_init_array+0x24>
 800d704:	2600      	movs	r6, #0
 800d706:	f000 fc9f 	bl	800e048 <_init>
 800d70a:	4d0a      	ldr	r5, [pc, #40]	; (800d734 <__libc_init_array+0x40>)
 800d70c:	4c0a      	ldr	r4, [pc, #40]	; (800d738 <__libc_init_array+0x44>)
 800d70e:	1b64      	subs	r4, r4, r5
 800d710:	10a4      	asrs	r4, r4, #2
 800d712:	42a6      	cmp	r6, r4
 800d714:	d105      	bne.n	800d722 <__libc_init_array+0x2e>
 800d716:	bd70      	pop	{r4, r5, r6, pc}
 800d718:	00b3      	lsls	r3, r6, #2
 800d71a:	58eb      	ldr	r3, [r5, r3]
 800d71c:	4798      	blx	r3
 800d71e:	3601      	adds	r6, #1
 800d720:	e7ee      	b.n	800d700 <__libc_init_array+0xc>
 800d722:	00b3      	lsls	r3, r6, #2
 800d724:	58eb      	ldr	r3, [r5, r3]
 800d726:	4798      	blx	r3
 800d728:	3601      	adds	r6, #1
 800d72a:	e7f2      	b.n	800d712 <__libc_init_array+0x1e>
 800d72c:	0800e3bc 	.word	0x0800e3bc
 800d730:	0800e3bc 	.word	0x0800e3bc
 800d734:	0800e3bc 	.word	0x0800e3bc
 800d738:	0800e3c0 	.word	0x0800e3c0

0800d73c <malloc>:
 800d73c:	b510      	push	{r4, lr}
 800d73e:	4b03      	ldr	r3, [pc, #12]	; (800d74c <malloc+0x10>)
 800d740:	0001      	movs	r1, r0
 800d742:	6818      	ldr	r0, [r3, #0]
 800d744:	f000 f88c 	bl	800d860 <_malloc_r>
 800d748:	bd10      	pop	{r4, pc}
 800d74a:	46c0      	nop			; (mov r8, r8)
 800d74c:	2000017c 	.word	0x2000017c

0800d750 <free>:
 800d750:	b510      	push	{r4, lr}
 800d752:	4b03      	ldr	r3, [pc, #12]	; (800d760 <free+0x10>)
 800d754:	0001      	movs	r1, r0
 800d756:	6818      	ldr	r0, [r3, #0]
 800d758:	f000 f816 	bl	800d788 <_free_r>
 800d75c:	bd10      	pop	{r4, pc}
 800d75e:	46c0      	nop			; (mov r8, r8)
 800d760:	2000017c 	.word	0x2000017c

0800d764 <memcpy>:
 800d764:	2300      	movs	r3, #0
 800d766:	b510      	push	{r4, lr}
 800d768:	429a      	cmp	r2, r3
 800d76a:	d100      	bne.n	800d76e <memcpy+0xa>
 800d76c:	bd10      	pop	{r4, pc}
 800d76e:	5ccc      	ldrb	r4, [r1, r3]
 800d770:	54c4      	strb	r4, [r0, r3]
 800d772:	3301      	adds	r3, #1
 800d774:	e7f8      	b.n	800d768 <memcpy+0x4>

0800d776 <memset>:
 800d776:	0003      	movs	r3, r0
 800d778:	1882      	adds	r2, r0, r2
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d100      	bne.n	800d780 <memset+0xa>
 800d77e:	4770      	bx	lr
 800d780:	7019      	strb	r1, [r3, #0]
 800d782:	3301      	adds	r3, #1
 800d784:	e7f9      	b.n	800d77a <memset+0x4>
	...

0800d788 <_free_r>:
 800d788:	b570      	push	{r4, r5, r6, lr}
 800d78a:	0005      	movs	r5, r0
 800d78c:	2900      	cmp	r1, #0
 800d78e:	d010      	beq.n	800d7b2 <_free_r+0x2a>
 800d790:	1f0c      	subs	r4, r1, #4
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	da00      	bge.n	800d79a <_free_r+0x12>
 800d798:	18e4      	adds	r4, r4, r3
 800d79a:	0028      	movs	r0, r5
 800d79c:	f000 f908 	bl	800d9b0 <__malloc_lock>
 800d7a0:	4a1d      	ldr	r2, [pc, #116]	; (800d818 <_free_r+0x90>)
 800d7a2:	6813      	ldr	r3, [r2, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d105      	bne.n	800d7b4 <_free_r+0x2c>
 800d7a8:	6063      	str	r3, [r4, #4]
 800d7aa:	6014      	str	r4, [r2, #0]
 800d7ac:	0028      	movs	r0, r5
 800d7ae:	f000 f907 	bl	800d9c0 <__malloc_unlock>
 800d7b2:	bd70      	pop	{r4, r5, r6, pc}
 800d7b4:	42a3      	cmp	r3, r4
 800d7b6:	d908      	bls.n	800d7ca <_free_r+0x42>
 800d7b8:	6821      	ldr	r1, [r4, #0]
 800d7ba:	1860      	adds	r0, r4, r1
 800d7bc:	4283      	cmp	r3, r0
 800d7be:	d1f3      	bne.n	800d7a8 <_free_r+0x20>
 800d7c0:	6818      	ldr	r0, [r3, #0]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	1841      	adds	r1, r0, r1
 800d7c6:	6021      	str	r1, [r4, #0]
 800d7c8:	e7ee      	b.n	800d7a8 <_free_r+0x20>
 800d7ca:	001a      	movs	r2, r3
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <_free_r+0x4e>
 800d7d2:	42a3      	cmp	r3, r4
 800d7d4:	d9f9      	bls.n	800d7ca <_free_r+0x42>
 800d7d6:	6811      	ldr	r1, [r2, #0]
 800d7d8:	1850      	adds	r0, r2, r1
 800d7da:	42a0      	cmp	r0, r4
 800d7dc:	d10b      	bne.n	800d7f6 <_free_r+0x6e>
 800d7de:	6820      	ldr	r0, [r4, #0]
 800d7e0:	1809      	adds	r1, r1, r0
 800d7e2:	1850      	adds	r0, r2, r1
 800d7e4:	6011      	str	r1, [r2, #0]
 800d7e6:	4283      	cmp	r3, r0
 800d7e8:	d1e0      	bne.n	800d7ac <_free_r+0x24>
 800d7ea:	6818      	ldr	r0, [r3, #0]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	1841      	adds	r1, r0, r1
 800d7f0:	6011      	str	r1, [r2, #0]
 800d7f2:	6053      	str	r3, [r2, #4]
 800d7f4:	e7da      	b.n	800d7ac <_free_r+0x24>
 800d7f6:	42a0      	cmp	r0, r4
 800d7f8:	d902      	bls.n	800d800 <_free_r+0x78>
 800d7fa:	230c      	movs	r3, #12
 800d7fc:	602b      	str	r3, [r5, #0]
 800d7fe:	e7d5      	b.n	800d7ac <_free_r+0x24>
 800d800:	6821      	ldr	r1, [r4, #0]
 800d802:	1860      	adds	r0, r4, r1
 800d804:	4283      	cmp	r3, r0
 800d806:	d103      	bne.n	800d810 <_free_r+0x88>
 800d808:	6818      	ldr	r0, [r3, #0]
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	1841      	adds	r1, r0, r1
 800d80e:	6021      	str	r1, [r4, #0]
 800d810:	6063      	str	r3, [r4, #4]
 800d812:	6054      	str	r4, [r2, #4]
 800d814:	e7ca      	b.n	800d7ac <_free_r+0x24>
 800d816:	46c0      	nop			; (mov r8, r8)
 800d818:	200015cc 	.word	0x200015cc

0800d81c <sbrk_aligned>:
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	4e0f      	ldr	r6, [pc, #60]	; (800d85c <sbrk_aligned+0x40>)
 800d820:	000d      	movs	r5, r1
 800d822:	6831      	ldr	r1, [r6, #0]
 800d824:	0004      	movs	r4, r0
 800d826:	2900      	cmp	r1, #0
 800d828:	d102      	bne.n	800d830 <sbrk_aligned+0x14>
 800d82a:	f000 f88f 	bl	800d94c <_sbrk_r>
 800d82e:	6030      	str	r0, [r6, #0]
 800d830:	0029      	movs	r1, r5
 800d832:	0020      	movs	r0, r4
 800d834:	f000 f88a 	bl	800d94c <_sbrk_r>
 800d838:	1c43      	adds	r3, r0, #1
 800d83a:	d00a      	beq.n	800d852 <sbrk_aligned+0x36>
 800d83c:	2303      	movs	r3, #3
 800d83e:	1cc5      	adds	r5, r0, #3
 800d840:	439d      	bics	r5, r3
 800d842:	42a8      	cmp	r0, r5
 800d844:	d007      	beq.n	800d856 <sbrk_aligned+0x3a>
 800d846:	1a29      	subs	r1, r5, r0
 800d848:	0020      	movs	r0, r4
 800d84a:	f000 f87f 	bl	800d94c <_sbrk_r>
 800d84e:	1c43      	adds	r3, r0, #1
 800d850:	d101      	bne.n	800d856 <sbrk_aligned+0x3a>
 800d852:	2501      	movs	r5, #1
 800d854:	426d      	negs	r5, r5
 800d856:	0028      	movs	r0, r5
 800d858:	bd70      	pop	{r4, r5, r6, pc}
 800d85a:	46c0      	nop			; (mov r8, r8)
 800d85c:	200015d0 	.word	0x200015d0

0800d860 <_malloc_r>:
 800d860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d862:	2203      	movs	r2, #3
 800d864:	1ccb      	adds	r3, r1, #3
 800d866:	4393      	bics	r3, r2
 800d868:	3308      	adds	r3, #8
 800d86a:	0006      	movs	r6, r0
 800d86c:	001f      	movs	r7, r3
 800d86e:	2b0c      	cmp	r3, #12
 800d870:	d232      	bcs.n	800d8d8 <_malloc_r+0x78>
 800d872:	270c      	movs	r7, #12
 800d874:	42b9      	cmp	r1, r7
 800d876:	d831      	bhi.n	800d8dc <_malloc_r+0x7c>
 800d878:	0030      	movs	r0, r6
 800d87a:	f000 f899 	bl	800d9b0 <__malloc_lock>
 800d87e:	4d32      	ldr	r5, [pc, #200]	; (800d948 <_malloc_r+0xe8>)
 800d880:	682b      	ldr	r3, [r5, #0]
 800d882:	001c      	movs	r4, r3
 800d884:	2c00      	cmp	r4, #0
 800d886:	d12e      	bne.n	800d8e6 <_malloc_r+0x86>
 800d888:	0039      	movs	r1, r7
 800d88a:	0030      	movs	r0, r6
 800d88c:	f7ff ffc6 	bl	800d81c <sbrk_aligned>
 800d890:	0004      	movs	r4, r0
 800d892:	1c43      	adds	r3, r0, #1
 800d894:	d11e      	bne.n	800d8d4 <_malloc_r+0x74>
 800d896:	682c      	ldr	r4, [r5, #0]
 800d898:	0025      	movs	r5, r4
 800d89a:	2d00      	cmp	r5, #0
 800d89c:	d14a      	bne.n	800d934 <_malloc_r+0xd4>
 800d89e:	6823      	ldr	r3, [r4, #0]
 800d8a0:	0029      	movs	r1, r5
 800d8a2:	18e3      	adds	r3, r4, r3
 800d8a4:	0030      	movs	r0, r6
 800d8a6:	9301      	str	r3, [sp, #4]
 800d8a8:	f000 f850 	bl	800d94c <_sbrk_r>
 800d8ac:	9b01      	ldr	r3, [sp, #4]
 800d8ae:	4283      	cmp	r3, r0
 800d8b0:	d143      	bne.n	800d93a <_malloc_r+0xda>
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	3703      	adds	r7, #3
 800d8b6:	1aff      	subs	r7, r7, r3
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	439f      	bics	r7, r3
 800d8bc:	3708      	adds	r7, #8
 800d8be:	2f0c      	cmp	r7, #12
 800d8c0:	d200      	bcs.n	800d8c4 <_malloc_r+0x64>
 800d8c2:	270c      	movs	r7, #12
 800d8c4:	0039      	movs	r1, r7
 800d8c6:	0030      	movs	r0, r6
 800d8c8:	f7ff ffa8 	bl	800d81c <sbrk_aligned>
 800d8cc:	1c43      	adds	r3, r0, #1
 800d8ce:	d034      	beq.n	800d93a <_malloc_r+0xda>
 800d8d0:	6823      	ldr	r3, [r4, #0]
 800d8d2:	19df      	adds	r7, r3, r7
 800d8d4:	6027      	str	r7, [r4, #0]
 800d8d6:	e013      	b.n	800d900 <_malloc_r+0xa0>
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	dacb      	bge.n	800d874 <_malloc_r+0x14>
 800d8dc:	230c      	movs	r3, #12
 800d8de:	2500      	movs	r5, #0
 800d8e0:	6033      	str	r3, [r6, #0]
 800d8e2:	0028      	movs	r0, r5
 800d8e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d8e6:	6822      	ldr	r2, [r4, #0]
 800d8e8:	1bd1      	subs	r1, r2, r7
 800d8ea:	d420      	bmi.n	800d92e <_malloc_r+0xce>
 800d8ec:	290b      	cmp	r1, #11
 800d8ee:	d917      	bls.n	800d920 <_malloc_r+0xc0>
 800d8f0:	19e2      	adds	r2, r4, r7
 800d8f2:	6027      	str	r7, [r4, #0]
 800d8f4:	42a3      	cmp	r3, r4
 800d8f6:	d111      	bne.n	800d91c <_malloc_r+0xbc>
 800d8f8:	602a      	str	r2, [r5, #0]
 800d8fa:	6863      	ldr	r3, [r4, #4]
 800d8fc:	6011      	str	r1, [r2, #0]
 800d8fe:	6053      	str	r3, [r2, #4]
 800d900:	0030      	movs	r0, r6
 800d902:	0025      	movs	r5, r4
 800d904:	f000 f85c 	bl	800d9c0 <__malloc_unlock>
 800d908:	2207      	movs	r2, #7
 800d90a:	350b      	adds	r5, #11
 800d90c:	1d23      	adds	r3, r4, #4
 800d90e:	4395      	bics	r5, r2
 800d910:	1aea      	subs	r2, r5, r3
 800d912:	429d      	cmp	r5, r3
 800d914:	d0e5      	beq.n	800d8e2 <_malloc_r+0x82>
 800d916:	1b5b      	subs	r3, r3, r5
 800d918:	50a3      	str	r3, [r4, r2]
 800d91a:	e7e2      	b.n	800d8e2 <_malloc_r+0x82>
 800d91c:	605a      	str	r2, [r3, #4]
 800d91e:	e7ec      	b.n	800d8fa <_malloc_r+0x9a>
 800d920:	6862      	ldr	r2, [r4, #4]
 800d922:	42a3      	cmp	r3, r4
 800d924:	d101      	bne.n	800d92a <_malloc_r+0xca>
 800d926:	602a      	str	r2, [r5, #0]
 800d928:	e7ea      	b.n	800d900 <_malloc_r+0xa0>
 800d92a:	605a      	str	r2, [r3, #4]
 800d92c:	e7e8      	b.n	800d900 <_malloc_r+0xa0>
 800d92e:	0023      	movs	r3, r4
 800d930:	6864      	ldr	r4, [r4, #4]
 800d932:	e7a7      	b.n	800d884 <_malloc_r+0x24>
 800d934:	002c      	movs	r4, r5
 800d936:	686d      	ldr	r5, [r5, #4]
 800d938:	e7af      	b.n	800d89a <_malloc_r+0x3a>
 800d93a:	230c      	movs	r3, #12
 800d93c:	0030      	movs	r0, r6
 800d93e:	6033      	str	r3, [r6, #0]
 800d940:	f000 f83e 	bl	800d9c0 <__malloc_unlock>
 800d944:	e7cd      	b.n	800d8e2 <_malloc_r+0x82>
 800d946:	46c0      	nop			; (mov r8, r8)
 800d948:	200015cc 	.word	0x200015cc

0800d94c <_sbrk_r>:
 800d94c:	2300      	movs	r3, #0
 800d94e:	b570      	push	{r4, r5, r6, lr}
 800d950:	4d06      	ldr	r5, [pc, #24]	; (800d96c <_sbrk_r+0x20>)
 800d952:	0004      	movs	r4, r0
 800d954:	0008      	movs	r0, r1
 800d956:	602b      	str	r3, [r5, #0]
 800d958:	f7f5 f9b2 	bl	8002cc0 <_sbrk>
 800d95c:	1c43      	adds	r3, r0, #1
 800d95e:	d103      	bne.n	800d968 <_sbrk_r+0x1c>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d000      	beq.n	800d968 <_sbrk_r+0x1c>
 800d966:	6023      	str	r3, [r4, #0]
 800d968:	bd70      	pop	{r4, r5, r6, pc}
 800d96a:	46c0      	nop			; (mov r8, r8)
 800d96c:	200015d4 	.word	0x200015d4

0800d970 <siprintf>:
 800d970:	b40e      	push	{r1, r2, r3}
 800d972:	b500      	push	{lr}
 800d974:	490b      	ldr	r1, [pc, #44]	; (800d9a4 <siprintf+0x34>)
 800d976:	b09c      	sub	sp, #112	; 0x70
 800d978:	ab1d      	add	r3, sp, #116	; 0x74
 800d97a:	9002      	str	r0, [sp, #8]
 800d97c:	9006      	str	r0, [sp, #24]
 800d97e:	9107      	str	r1, [sp, #28]
 800d980:	9104      	str	r1, [sp, #16]
 800d982:	4809      	ldr	r0, [pc, #36]	; (800d9a8 <siprintf+0x38>)
 800d984:	4909      	ldr	r1, [pc, #36]	; (800d9ac <siprintf+0x3c>)
 800d986:	cb04      	ldmia	r3!, {r2}
 800d988:	9105      	str	r1, [sp, #20]
 800d98a:	6800      	ldr	r0, [r0, #0]
 800d98c:	a902      	add	r1, sp, #8
 800d98e:	9301      	str	r3, [sp, #4]
 800d990:	f000 f880 	bl	800da94 <_svfiprintf_r>
 800d994:	2300      	movs	r3, #0
 800d996:	9a02      	ldr	r2, [sp, #8]
 800d998:	7013      	strb	r3, [r2, #0]
 800d99a:	b01c      	add	sp, #112	; 0x70
 800d99c:	bc08      	pop	{r3}
 800d99e:	b003      	add	sp, #12
 800d9a0:	4718      	bx	r3
 800d9a2:	46c0      	nop			; (mov r8, r8)
 800d9a4:	7fffffff 	.word	0x7fffffff
 800d9a8:	2000017c 	.word	0x2000017c
 800d9ac:	ffff0208 	.word	0xffff0208

0800d9b0 <__malloc_lock>:
 800d9b0:	b510      	push	{r4, lr}
 800d9b2:	4802      	ldr	r0, [pc, #8]	; (800d9bc <__malloc_lock+0xc>)
 800d9b4:	f000 faf0 	bl	800df98 <__retarget_lock_acquire_recursive>
 800d9b8:	bd10      	pop	{r4, pc}
 800d9ba:	46c0      	nop			; (mov r8, r8)
 800d9bc:	200015d8 	.word	0x200015d8

0800d9c0 <__malloc_unlock>:
 800d9c0:	b510      	push	{r4, lr}
 800d9c2:	4802      	ldr	r0, [pc, #8]	; (800d9cc <__malloc_unlock+0xc>)
 800d9c4:	f000 fae9 	bl	800df9a <__retarget_lock_release_recursive>
 800d9c8:	bd10      	pop	{r4, pc}
 800d9ca:	46c0      	nop			; (mov r8, r8)
 800d9cc:	200015d8 	.word	0x200015d8

0800d9d0 <__ssputs_r>:
 800d9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9d2:	688e      	ldr	r6, [r1, #8]
 800d9d4:	b085      	sub	sp, #20
 800d9d6:	0007      	movs	r7, r0
 800d9d8:	000c      	movs	r4, r1
 800d9da:	9203      	str	r2, [sp, #12]
 800d9dc:	9301      	str	r3, [sp, #4]
 800d9de:	429e      	cmp	r6, r3
 800d9e0:	d83c      	bhi.n	800da5c <__ssputs_r+0x8c>
 800d9e2:	2390      	movs	r3, #144	; 0x90
 800d9e4:	898a      	ldrh	r2, [r1, #12]
 800d9e6:	00db      	lsls	r3, r3, #3
 800d9e8:	421a      	tst	r2, r3
 800d9ea:	d034      	beq.n	800da56 <__ssputs_r+0x86>
 800d9ec:	6909      	ldr	r1, [r1, #16]
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	6960      	ldr	r0, [r4, #20]
 800d9f2:	1a5b      	subs	r3, r3, r1
 800d9f4:	9302      	str	r3, [sp, #8]
 800d9f6:	2303      	movs	r3, #3
 800d9f8:	4343      	muls	r3, r0
 800d9fa:	0fdd      	lsrs	r5, r3, #31
 800d9fc:	18ed      	adds	r5, r5, r3
 800d9fe:	9b01      	ldr	r3, [sp, #4]
 800da00:	9802      	ldr	r0, [sp, #8]
 800da02:	3301      	adds	r3, #1
 800da04:	181b      	adds	r3, r3, r0
 800da06:	106d      	asrs	r5, r5, #1
 800da08:	42ab      	cmp	r3, r5
 800da0a:	d900      	bls.n	800da0e <__ssputs_r+0x3e>
 800da0c:	001d      	movs	r5, r3
 800da0e:	0553      	lsls	r3, r2, #21
 800da10:	d532      	bpl.n	800da78 <__ssputs_r+0xa8>
 800da12:	0029      	movs	r1, r5
 800da14:	0038      	movs	r0, r7
 800da16:	f7ff ff23 	bl	800d860 <_malloc_r>
 800da1a:	1e06      	subs	r6, r0, #0
 800da1c:	d109      	bne.n	800da32 <__ssputs_r+0x62>
 800da1e:	230c      	movs	r3, #12
 800da20:	603b      	str	r3, [r7, #0]
 800da22:	2340      	movs	r3, #64	; 0x40
 800da24:	2001      	movs	r0, #1
 800da26:	89a2      	ldrh	r2, [r4, #12]
 800da28:	4240      	negs	r0, r0
 800da2a:	4313      	orrs	r3, r2
 800da2c:	81a3      	strh	r3, [r4, #12]
 800da2e:	b005      	add	sp, #20
 800da30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da32:	9a02      	ldr	r2, [sp, #8]
 800da34:	6921      	ldr	r1, [r4, #16]
 800da36:	f7ff fe95 	bl	800d764 <memcpy>
 800da3a:	89a3      	ldrh	r3, [r4, #12]
 800da3c:	4a14      	ldr	r2, [pc, #80]	; (800da90 <__ssputs_r+0xc0>)
 800da3e:	401a      	ands	r2, r3
 800da40:	2380      	movs	r3, #128	; 0x80
 800da42:	4313      	orrs	r3, r2
 800da44:	81a3      	strh	r3, [r4, #12]
 800da46:	9b02      	ldr	r3, [sp, #8]
 800da48:	6126      	str	r6, [r4, #16]
 800da4a:	18f6      	adds	r6, r6, r3
 800da4c:	6026      	str	r6, [r4, #0]
 800da4e:	6165      	str	r5, [r4, #20]
 800da50:	9e01      	ldr	r6, [sp, #4]
 800da52:	1aed      	subs	r5, r5, r3
 800da54:	60a5      	str	r5, [r4, #8]
 800da56:	9b01      	ldr	r3, [sp, #4]
 800da58:	429e      	cmp	r6, r3
 800da5a:	d900      	bls.n	800da5e <__ssputs_r+0x8e>
 800da5c:	9e01      	ldr	r6, [sp, #4]
 800da5e:	0032      	movs	r2, r6
 800da60:	9903      	ldr	r1, [sp, #12]
 800da62:	6820      	ldr	r0, [r4, #0]
 800da64:	f000 faa5 	bl	800dfb2 <memmove>
 800da68:	68a3      	ldr	r3, [r4, #8]
 800da6a:	2000      	movs	r0, #0
 800da6c:	1b9b      	subs	r3, r3, r6
 800da6e:	60a3      	str	r3, [r4, #8]
 800da70:	6823      	ldr	r3, [r4, #0]
 800da72:	199e      	adds	r6, r3, r6
 800da74:	6026      	str	r6, [r4, #0]
 800da76:	e7da      	b.n	800da2e <__ssputs_r+0x5e>
 800da78:	002a      	movs	r2, r5
 800da7a:	0038      	movs	r0, r7
 800da7c:	f000 faac 	bl	800dfd8 <_realloc_r>
 800da80:	1e06      	subs	r6, r0, #0
 800da82:	d1e0      	bne.n	800da46 <__ssputs_r+0x76>
 800da84:	0038      	movs	r0, r7
 800da86:	6921      	ldr	r1, [r4, #16]
 800da88:	f7ff fe7e 	bl	800d788 <_free_r>
 800da8c:	e7c7      	b.n	800da1e <__ssputs_r+0x4e>
 800da8e:	46c0      	nop			; (mov r8, r8)
 800da90:	fffffb7f 	.word	0xfffffb7f

0800da94 <_svfiprintf_r>:
 800da94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da96:	b0a1      	sub	sp, #132	; 0x84
 800da98:	9003      	str	r0, [sp, #12]
 800da9a:	001d      	movs	r5, r3
 800da9c:	898b      	ldrh	r3, [r1, #12]
 800da9e:	000f      	movs	r7, r1
 800daa0:	0016      	movs	r6, r2
 800daa2:	061b      	lsls	r3, r3, #24
 800daa4:	d511      	bpl.n	800daca <_svfiprintf_r+0x36>
 800daa6:	690b      	ldr	r3, [r1, #16]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10e      	bne.n	800daca <_svfiprintf_r+0x36>
 800daac:	2140      	movs	r1, #64	; 0x40
 800daae:	f7ff fed7 	bl	800d860 <_malloc_r>
 800dab2:	6038      	str	r0, [r7, #0]
 800dab4:	6138      	str	r0, [r7, #16]
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d105      	bne.n	800dac6 <_svfiprintf_r+0x32>
 800daba:	230c      	movs	r3, #12
 800dabc:	9a03      	ldr	r2, [sp, #12]
 800dabe:	3801      	subs	r0, #1
 800dac0:	6013      	str	r3, [r2, #0]
 800dac2:	b021      	add	sp, #132	; 0x84
 800dac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dac6:	2340      	movs	r3, #64	; 0x40
 800dac8:	617b      	str	r3, [r7, #20]
 800daca:	2300      	movs	r3, #0
 800dacc:	ac08      	add	r4, sp, #32
 800dace:	6163      	str	r3, [r4, #20]
 800dad0:	3320      	adds	r3, #32
 800dad2:	7663      	strb	r3, [r4, #25]
 800dad4:	3310      	adds	r3, #16
 800dad6:	76a3      	strb	r3, [r4, #26]
 800dad8:	9507      	str	r5, [sp, #28]
 800dada:	0035      	movs	r5, r6
 800dadc:	782b      	ldrb	r3, [r5, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d001      	beq.n	800dae6 <_svfiprintf_r+0x52>
 800dae2:	2b25      	cmp	r3, #37	; 0x25
 800dae4:	d147      	bne.n	800db76 <_svfiprintf_r+0xe2>
 800dae6:	1bab      	subs	r3, r5, r6
 800dae8:	9305      	str	r3, [sp, #20]
 800daea:	42b5      	cmp	r5, r6
 800daec:	d00c      	beq.n	800db08 <_svfiprintf_r+0x74>
 800daee:	0032      	movs	r2, r6
 800daf0:	0039      	movs	r1, r7
 800daf2:	9803      	ldr	r0, [sp, #12]
 800daf4:	f7ff ff6c 	bl	800d9d0 <__ssputs_r>
 800daf8:	1c43      	adds	r3, r0, #1
 800dafa:	d100      	bne.n	800dafe <_svfiprintf_r+0x6a>
 800dafc:	e0ae      	b.n	800dc5c <_svfiprintf_r+0x1c8>
 800dafe:	6962      	ldr	r2, [r4, #20]
 800db00:	9b05      	ldr	r3, [sp, #20]
 800db02:	4694      	mov	ip, r2
 800db04:	4463      	add	r3, ip
 800db06:	6163      	str	r3, [r4, #20]
 800db08:	782b      	ldrb	r3, [r5, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d100      	bne.n	800db10 <_svfiprintf_r+0x7c>
 800db0e:	e0a5      	b.n	800dc5c <_svfiprintf_r+0x1c8>
 800db10:	2201      	movs	r2, #1
 800db12:	2300      	movs	r3, #0
 800db14:	4252      	negs	r2, r2
 800db16:	6062      	str	r2, [r4, #4]
 800db18:	a904      	add	r1, sp, #16
 800db1a:	3254      	adds	r2, #84	; 0x54
 800db1c:	1852      	adds	r2, r2, r1
 800db1e:	1c6e      	adds	r6, r5, #1
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	60e3      	str	r3, [r4, #12]
 800db24:	60a3      	str	r3, [r4, #8]
 800db26:	7013      	strb	r3, [r2, #0]
 800db28:	65a3      	str	r3, [r4, #88]	; 0x58
 800db2a:	2205      	movs	r2, #5
 800db2c:	7831      	ldrb	r1, [r6, #0]
 800db2e:	4854      	ldr	r0, [pc, #336]	; (800dc80 <_svfiprintf_r+0x1ec>)
 800db30:	f000 fa34 	bl	800df9c <memchr>
 800db34:	1c75      	adds	r5, r6, #1
 800db36:	2800      	cmp	r0, #0
 800db38:	d11f      	bne.n	800db7a <_svfiprintf_r+0xe6>
 800db3a:	6822      	ldr	r2, [r4, #0]
 800db3c:	06d3      	lsls	r3, r2, #27
 800db3e:	d504      	bpl.n	800db4a <_svfiprintf_r+0xb6>
 800db40:	2353      	movs	r3, #83	; 0x53
 800db42:	a904      	add	r1, sp, #16
 800db44:	185b      	adds	r3, r3, r1
 800db46:	2120      	movs	r1, #32
 800db48:	7019      	strb	r1, [r3, #0]
 800db4a:	0713      	lsls	r3, r2, #28
 800db4c:	d504      	bpl.n	800db58 <_svfiprintf_r+0xc4>
 800db4e:	2353      	movs	r3, #83	; 0x53
 800db50:	a904      	add	r1, sp, #16
 800db52:	185b      	adds	r3, r3, r1
 800db54:	212b      	movs	r1, #43	; 0x2b
 800db56:	7019      	strb	r1, [r3, #0]
 800db58:	7833      	ldrb	r3, [r6, #0]
 800db5a:	2b2a      	cmp	r3, #42	; 0x2a
 800db5c:	d016      	beq.n	800db8c <_svfiprintf_r+0xf8>
 800db5e:	0035      	movs	r5, r6
 800db60:	2100      	movs	r1, #0
 800db62:	200a      	movs	r0, #10
 800db64:	68e3      	ldr	r3, [r4, #12]
 800db66:	782a      	ldrb	r2, [r5, #0]
 800db68:	1c6e      	adds	r6, r5, #1
 800db6a:	3a30      	subs	r2, #48	; 0x30
 800db6c:	2a09      	cmp	r2, #9
 800db6e:	d94e      	bls.n	800dc0e <_svfiprintf_r+0x17a>
 800db70:	2900      	cmp	r1, #0
 800db72:	d111      	bne.n	800db98 <_svfiprintf_r+0x104>
 800db74:	e017      	b.n	800dba6 <_svfiprintf_r+0x112>
 800db76:	3501      	adds	r5, #1
 800db78:	e7b0      	b.n	800dadc <_svfiprintf_r+0x48>
 800db7a:	4b41      	ldr	r3, [pc, #260]	; (800dc80 <_svfiprintf_r+0x1ec>)
 800db7c:	6822      	ldr	r2, [r4, #0]
 800db7e:	1ac0      	subs	r0, r0, r3
 800db80:	2301      	movs	r3, #1
 800db82:	4083      	lsls	r3, r0
 800db84:	4313      	orrs	r3, r2
 800db86:	002e      	movs	r6, r5
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	e7ce      	b.n	800db2a <_svfiprintf_r+0x96>
 800db8c:	9b07      	ldr	r3, [sp, #28]
 800db8e:	1d19      	adds	r1, r3, #4
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	9107      	str	r1, [sp, #28]
 800db94:	2b00      	cmp	r3, #0
 800db96:	db01      	blt.n	800db9c <_svfiprintf_r+0x108>
 800db98:	930b      	str	r3, [sp, #44]	; 0x2c
 800db9a:	e004      	b.n	800dba6 <_svfiprintf_r+0x112>
 800db9c:	425b      	negs	r3, r3
 800db9e:	60e3      	str	r3, [r4, #12]
 800dba0:	2302      	movs	r3, #2
 800dba2:	4313      	orrs	r3, r2
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	782b      	ldrb	r3, [r5, #0]
 800dba8:	2b2e      	cmp	r3, #46	; 0x2e
 800dbaa:	d10a      	bne.n	800dbc2 <_svfiprintf_r+0x12e>
 800dbac:	786b      	ldrb	r3, [r5, #1]
 800dbae:	2b2a      	cmp	r3, #42	; 0x2a
 800dbb0:	d135      	bne.n	800dc1e <_svfiprintf_r+0x18a>
 800dbb2:	9b07      	ldr	r3, [sp, #28]
 800dbb4:	3502      	adds	r5, #2
 800dbb6:	1d1a      	adds	r2, r3, #4
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	9207      	str	r2, [sp, #28]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	db2b      	blt.n	800dc18 <_svfiprintf_r+0x184>
 800dbc0:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc2:	4e30      	ldr	r6, [pc, #192]	; (800dc84 <_svfiprintf_r+0x1f0>)
 800dbc4:	2203      	movs	r2, #3
 800dbc6:	0030      	movs	r0, r6
 800dbc8:	7829      	ldrb	r1, [r5, #0]
 800dbca:	f000 f9e7 	bl	800df9c <memchr>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d006      	beq.n	800dbe0 <_svfiprintf_r+0x14c>
 800dbd2:	2340      	movs	r3, #64	; 0x40
 800dbd4:	1b80      	subs	r0, r0, r6
 800dbd6:	4083      	lsls	r3, r0
 800dbd8:	6822      	ldr	r2, [r4, #0]
 800dbda:	3501      	adds	r5, #1
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	6023      	str	r3, [r4, #0]
 800dbe0:	7829      	ldrb	r1, [r5, #0]
 800dbe2:	2206      	movs	r2, #6
 800dbe4:	4828      	ldr	r0, [pc, #160]	; (800dc88 <_svfiprintf_r+0x1f4>)
 800dbe6:	1c6e      	adds	r6, r5, #1
 800dbe8:	7621      	strb	r1, [r4, #24]
 800dbea:	f000 f9d7 	bl	800df9c <memchr>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d03c      	beq.n	800dc6c <_svfiprintf_r+0x1d8>
 800dbf2:	4b26      	ldr	r3, [pc, #152]	; (800dc8c <_svfiprintf_r+0x1f8>)
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d125      	bne.n	800dc44 <_svfiprintf_r+0x1b0>
 800dbf8:	2207      	movs	r2, #7
 800dbfa:	9b07      	ldr	r3, [sp, #28]
 800dbfc:	3307      	adds	r3, #7
 800dbfe:	4393      	bics	r3, r2
 800dc00:	3308      	adds	r3, #8
 800dc02:	9307      	str	r3, [sp, #28]
 800dc04:	6963      	ldr	r3, [r4, #20]
 800dc06:	9a04      	ldr	r2, [sp, #16]
 800dc08:	189b      	adds	r3, r3, r2
 800dc0a:	6163      	str	r3, [r4, #20]
 800dc0c:	e765      	b.n	800dada <_svfiprintf_r+0x46>
 800dc0e:	4343      	muls	r3, r0
 800dc10:	0035      	movs	r5, r6
 800dc12:	2101      	movs	r1, #1
 800dc14:	189b      	adds	r3, r3, r2
 800dc16:	e7a6      	b.n	800db66 <_svfiprintf_r+0xd2>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	425b      	negs	r3, r3
 800dc1c:	e7d0      	b.n	800dbc0 <_svfiprintf_r+0x12c>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	200a      	movs	r0, #10
 800dc22:	001a      	movs	r2, r3
 800dc24:	3501      	adds	r5, #1
 800dc26:	6063      	str	r3, [r4, #4]
 800dc28:	7829      	ldrb	r1, [r5, #0]
 800dc2a:	1c6e      	adds	r6, r5, #1
 800dc2c:	3930      	subs	r1, #48	; 0x30
 800dc2e:	2909      	cmp	r1, #9
 800dc30:	d903      	bls.n	800dc3a <_svfiprintf_r+0x1a6>
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d0c5      	beq.n	800dbc2 <_svfiprintf_r+0x12e>
 800dc36:	9209      	str	r2, [sp, #36]	; 0x24
 800dc38:	e7c3      	b.n	800dbc2 <_svfiprintf_r+0x12e>
 800dc3a:	4342      	muls	r2, r0
 800dc3c:	0035      	movs	r5, r6
 800dc3e:	2301      	movs	r3, #1
 800dc40:	1852      	adds	r2, r2, r1
 800dc42:	e7f1      	b.n	800dc28 <_svfiprintf_r+0x194>
 800dc44:	ab07      	add	r3, sp, #28
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	003a      	movs	r2, r7
 800dc4a:	0021      	movs	r1, r4
 800dc4c:	4b10      	ldr	r3, [pc, #64]	; (800dc90 <_svfiprintf_r+0x1fc>)
 800dc4e:	9803      	ldr	r0, [sp, #12]
 800dc50:	e000      	b.n	800dc54 <_svfiprintf_r+0x1c0>
 800dc52:	bf00      	nop
 800dc54:	9004      	str	r0, [sp, #16]
 800dc56:	9b04      	ldr	r3, [sp, #16]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	d1d3      	bne.n	800dc04 <_svfiprintf_r+0x170>
 800dc5c:	89bb      	ldrh	r3, [r7, #12]
 800dc5e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dc60:	065b      	lsls	r3, r3, #25
 800dc62:	d400      	bmi.n	800dc66 <_svfiprintf_r+0x1d2>
 800dc64:	e72d      	b.n	800dac2 <_svfiprintf_r+0x2e>
 800dc66:	2001      	movs	r0, #1
 800dc68:	4240      	negs	r0, r0
 800dc6a:	e72a      	b.n	800dac2 <_svfiprintf_r+0x2e>
 800dc6c:	ab07      	add	r3, sp, #28
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	003a      	movs	r2, r7
 800dc72:	0021      	movs	r1, r4
 800dc74:	4b06      	ldr	r3, [pc, #24]	; (800dc90 <_svfiprintf_r+0x1fc>)
 800dc76:	9803      	ldr	r0, [sp, #12]
 800dc78:	f000 f87c 	bl	800dd74 <_printf_i>
 800dc7c:	e7ea      	b.n	800dc54 <_svfiprintf_r+0x1c0>
 800dc7e:	46c0      	nop			; (mov r8, r8)
 800dc80:	0800e388 	.word	0x0800e388
 800dc84:	0800e38e 	.word	0x0800e38e
 800dc88:	0800e392 	.word	0x0800e392
 800dc8c:	00000000 	.word	0x00000000
 800dc90:	0800d9d1 	.word	0x0800d9d1

0800dc94 <_printf_common>:
 800dc94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc96:	0015      	movs	r5, r2
 800dc98:	9301      	str	r3, [sp, #4]
 800dc9a:	688a      	ldr	r2, [r1, #8]
 800dc9c:	690b      	ldr	r3, [r1, #16]
 800dc9e:	000c      	movs	r4, r1
 800dca0:	9000      	str	r0, [sp, #0]
 800dca2:	4293      	cmp	r3, r2
 800dca4:	da00      	bge.n	800dca8 <_printf_common+0x14>
 800dca6:	0013      	movs	r3, r2
 800dca8:	0022      	movs	r2, r4
 800dcaa:	602b      	str	r3, [r5, #0]
 800dcac:	3243      	adds	r2, #67	; 0x43
 800dcae:	7812      	ldrb	r2, [r2, #0]
 800dcb0:	2a00      	cmp	r2, #0
 800dcb2:	d001      	beq.n	800dcb8 <_printf_common+0x24>
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	602b      	str	r3, [r5, #0]
 800dcb8:	6823      	ldr	r3, [r4, #0]
 800dcba:	069b      	lsls	r3, r3, #26
 800dcbc:	d502      	bpl.n	800dcc4 <_printf_common+0x30>
 800dcbe:	682b      	ldr	r3, [r5, #0]
 800dcc0:	3302      	adds	r3, #2
 800dcc2:	602b      	str	r3, [r5, #0]
 800dcc4:	6822      	ldr	r2, [r4, #0]
 800dcc6:	2306      	movs	r3, #6
 800dcc8:	0017      	movs	r7, r2
 800dcca:	401f      	ands	r7, r3
 800dccc:	421a      	tst	r2, r3
 800dcce:	d027      	beq.n	800dd20 <_printf_common+0x8c>
 800dcd0:	0023      	movs	r3, r4
 800dcd2:	3343      	adds	r3, #67	; 0x43
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	1e5a      	subs	r2, r3, #1
 800dcd8:	4193      	sbcs	r3, r2
 800dcda:	6822      	ldr	r2, [r4, #0]
 800dcdc:	0692      	lsls	r2, r2, #26
 800dcde:	d430      	bmi.n	800dd42 <_printf_common+0xae>
 800dce0:	0022      	movs	r2, r4
 800dce2:	9901      	ldr	r1, [sp, #4]
 800dce4:	9800      	ldr	r0, [sp, #0]
 800dce6:	9e08      	ldr	r6, [sp, #32]
 800dce8:	3243      	adds	r2, #67	; 0x43
 800dcea:	47b0      	blx	r6
 800dcec:	1c43      	adds	r3, r0, #1
 800dcee:	d025      	beq.n	800dd3c <_printf_common+0xa8>
 800dcf0:	2306      	movs	r3, #6
 800dcf2:	6820      	ldr	r0, [r4, #0]
 800dcf4:	682a      	ldr	r2, [r5, #0]
 800dcf6:	68e1      	ldr	r1, [r4, #12]
 800dcf8:	2500      	movs	r5, #0
 800dcfa:	4003      	ands	r3, r0
 800dcfc:	2b04      	cmp	r3, #4
 800dcfe:	d103      	bne.n	800dd08 <_printf_common+0x74>
 800dd00:	1a8d      	subs	r5, r1, r2
 800dd02:	43eb      	mvns	r3, r5
 800dd04:	17db      	asrs	r3, r3, #31
 800dd06:	401d      	ands	r5, r3
 800dd08:	68a3      	ldr	r3, [r4, #8]
 800dd0a:	6922      	ldr	r2, [r4, #16]
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	dd01      	ble.n	800dd14 <_printf_common+0x80>
 800dd10:	1a9b      	subs	r3, r3, r2
 800dd12:	18ed      	adds	r5, r5, r3
 800dd14:	2700      	movs	r7, #0
 800dd16:	42bd      	cmp	r5, r7
 800dd18:	d120      	bne.n	800dd5c <_printf_common+0xc8>
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	e010      	b.n	800dd40 <_printf_common+0xac>
 800dd1e:	3701      	adds	r7, #1
 800dd20:	68e3      	ldr	r3, [r4, #12]
 800dd22:	682a      	ldr	r2, [r5, #0]
 800dd24:	1a9b      	subs	r3, r3, r2
 800dd26:	42bb      	cmp	r3, r7
 800dd28:	ddd2      	ble.n	800dcd0 <_printf_common+0x3c>
 800dd2a:	0022      	movs	r2, r4
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	9901      	ldr	r1, [sp, #4]
 800dd30:	9800      	ldr	r0, [sp, #0]
 800dd32:	9e08      	ldr	r6, [sp, #32]
 800dd34:	3219      	adds	r2, #25
 800dd36:	47b0      	blx	r6
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	d1f0      	bne.n	800dd1e <_printf_common+0x8a>
 800dd3c:	2001      	movs	r0, #1
 800dd3e:	4240      	negs	r0, r0
 800dd40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd42:	2030      	movs	r0, #48	; 0x30
 800dd44:	18e1      	adds	r1, r4, r3
 800dd46:	3143      	adds	r1, #67	; 0x43
 800dd48:	7008      	strb	r0, [r1, #0]
 800dd4a:	0021      	movs	r1, r4
 800dd4c:	1c5a      	adds	r2, r3, #1
 800dd4e:	3145      	adds	r1, #69	; 0x45
 800dd50:	7809      	ldrb	r1, [r1, #0]
 800dd52:	18a2      	adds	r2, r4, r2
 800dd54:	3243      	adds	r2, #67	; 0x43
 800dd56:	3302      	adds	r3, #2
 800dd58:	7011      	strb	r1, [r2, #0]
 800dd5a:	e7c1      	b.n	800dce0 <_printf_common+0x4c>
 800dd5c:	0022      	movs	r2, r4
 800dd5e:	2301      	movs	r3, #1
 800dd60:	9901      	ldr	r1, [sp, #4]
 800dd62:	9800      	ldr	r0, [sp, #0]
 800dd64:	9e08      	ldr	r6, [sp, #32]
 800dd66:	321a      	adds	r2, #26
 800dd68:	47b0      	blx	r6
 800dd6a:	1c43      	adds	r3, r0, #1
 800dd6c:	d0e6      	beq.n	800dd3c <_printf_common+0xa8>
 800dd6e:	3701      	adds	r7, #1
 800dd70:	e7d1      	b.n	800dd16 <_printf_common+0x82>
	...

0800dd74 <_printf_i>:
 800dd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd76:	b08b      	sub	sp, #44	; 0x2c
 800dd78:	9206      	str	r2, [sp, #24]
 800dd7a:	000a      	movs	r2, r1
 800dd7c:	3243      	adds	r2, #67	; 0x43
 800dd7e:	9307      	str	r3, [sp, #28]
 800dd80:	9005      	str	r0, [sp, #20]
 800dd82:	9204      	str	r2, [sp, #16]
 800dd84:	7e0a      	ldrb	r2, [r1, #24]
 800dd86:	000c      	movs	r4, r1
 800dd88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd8a:	2a78      	cmp	r2, #120	; 0x78
 800dd8c:	d807      	bhi.n	800dd9e <_printf_i+0x2a>
 800dd8e:	2a62      	cmp	r2, #98	; 0x62
 800dd90:	d809      	bhi.n	800dda6 <_printf_i+0x32>
 800dd92:	2a00      	cmp	r2, #0
 800dd94:	d100      	bne.n	800dd98 <_printf_i+0x24>
 800dd96:	e0c1      	b.n	800df1c <_printf_i+0x1a8>
 800dd98:	2a58      	cmp	r2, #88	; 0x58
 800dd9a:	d100      	bne.n	800dd9e <_printf_i+0x2a>
 800dd9c:	e08c      	b.n	800deb8 <_printf_i+0x144>
 800dd9e:	0026      	movs	r6, r4
 800dda0:	3642      	adds	r6, #66	; 0x42
 800dda2:	7032      	strb	r2, [r6, #0]
 800dda4:	e022      	b.n	800ddec <_printf_i+0x78>
 800dda6:	0010      	movs	r0, r2
 800dda8:	3863      	subs	r0, #99	; 0x63
 800ddaa:	2815      	cmp	r0, #21
 800ddac:	d8f7      	bhi.n	800dd9e <_printf_i+0x2a>
 800ddae:	f7f2 f9b3 	bl	8000118 <__gnu_thumb1_case_shi>
 800ddb2:	0016      	.short	0x0016
 800ddb4:	fff6001f 	.word	0xfff6001f
 800ddb8:	fff6fff6 	.word	0xfff6fff6
 800ddbc:	001ffff6 	.word	0x001ffff6
 800ddc0:	fff6fff6 	.word	0xfff6fff6
 800ddc4:	fff6fff6 	.word	0xfff6fff6
 800ddc8:	003600a8 	.word	0x003600a8
 800ddcc:	fff6009a 	.word	0xfff6009a
 800ddd0:	00b9fff6 	.word	0x00b9fff6
 800ddd4:	0036fff6 	.word	0x0036fff6
 800ddd8:	fff6fff6 	.word	0xfff6fff6
 800dddc:	009e      	.short	0x009e
 800ddde:	0026      	movs	r6, r4
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	3642      	adds	r6, #66	; 0x42
 800dde4:	1d11      	adds	r1, r2, #4
 800dde6:	6019      	str	r1, [r3, #0]
 800dde8:	6813      	ldr	r3, [r2, #0]
 800ddea:	7033      	strb	r3, [r6, #0]
 800ddec:	2301      	movs	r3, #1
 800ddee:	e0a7      	b.n	800df40 <_printf_i+0x1cc>
 800ddf0:	6808      	ldr	r0, [r1, #0]
 800ddf2:	6819      	ldr	r1, [r3, #0]
 800ddf4:	1d0a      	adds	r2, r1, #4
 800ddf6:	0605      	lsls	r5, r0, #24
 800ddf8:	d50b      	bpl.n	800de12 <_printf_i+0x9e>
 800ddfa:	680d      	ldr	r5, [r1, #0]
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	2d00      	cmp	r5, #0
 800de00:	da03      	bge.n	800de0a <_printf_i+0x96>
 800de02:	232d      	movs	r3, #45	; 0x2d
 800de04:	9a04      	ldr	r2, [sp, #16]
 800de06:	426d      	negs	r5, r5
 800de08:	7013      	strb	r3, [r2, #0]
 800de0a:	4b61      	ldr	r3, [pc, #388]	; (800df90 <_printf_i+0x21c>)
 800de0c:	270a      	movs	r7, #10
 800de0e:	9303      	str	r3, [sp, #12]
 800de10:	e01b      	b.n	800de4a <_printf_i+0xd6>
 800de12:	680d      	ldr	r5, [r1, #0]
 800de14:	601a      	str	r2, [r3, #0]
 800de16:	0641      	lsls	r1, r0, #25
 800de18:	d5f1      	bpl.n	800ddfe <_printf_i+0x8a>
 800de1a:	b22d      	sxth	r5, r5
 800de1c:	e7ef      	b.n	800ddfe <_printf_i+0x8a>
 800de1e:	680d      	ldr	r5, [r1, #0]
 800de20:	6819      	ldr	r1, [r3, #0]
 800de22:	1d08      	adds	r0, r1, #4
 800de24:	6018      	str	r0, [r3, #0]
 800de26:	062e      	lsls	r6, r5, #24
 800de28:	d501      	bpl.n	800de2e <_printf_i+0xba>
 800de2a:	680d      	ldr	r5, [r1, #0]
 800de2c:	e003      	b.n	800de36 <_printf_i+0xc2>
 800de2e:	066d      	lsls	r5, r5, #25
 800de30:	d5fb      	bpl.n	800de2a <_printf_i+0xb6>
 800de32:	680d      	ldr	r5, [r1, #0]
 800de34:	b2ad      	uxth	r5, r5
 800de36:	4b56      	ldr	r3, [pc, #344]	; (800df90 <_printf_i+0x21c>)
 800de38:	2708      	movs	r7, #8
 800de3a:	9303      	str	r3, [sp, #12]
 800de3c:	2a6f      	cmp	r2, #111	; 0x6f
 800de3e:	d000      	beq.n	800de42 <_printf_i+0xce>
 800de40:	3702      	adds	r7, #2
 800de42:	0023      	movs	r3, r4
 800de44:	2200      	movs	r2, #0
 800de46:	3343      	adds	r3, #67	; 0x43
 800de48:	701a      	strb	r2, [r3, #0]
 800de4a:	6863      	ldr	r3, [r4, #4]
 800de4c:	60a3      	str	r3, [r4, #8]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	db03      	blt.n	800de5a <_printf_i+0xe6>
 800de52:	2204      	movs	r2, #4
 800de54:	6821      	ldr	r1, [r4, #0]
 800de56:	4391      	bics	r1, r2
 800de58:	6021      	str	r1, [r4, #0]
 800de5a:	2d00      	cmp	r5, #0
 800de5c:	d102      	bne.n	800de64 <_printf_i+0xf0>
 800de5e:	9e04      	ldr	r6, [sp, #16]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00c      	beq.n	800de7e <_printf_i+0x10a>
 800de64:	9e04      	ldr	r6, [sp, #16]
 800de66:	0028      	movs	r0, r5
 800de68:	0039      	movs	r1, r7
 800de6a:	f7f2 f9e5 	bl	8000238 <__aeabi_uidivmod>
 800de6e:	9b03      	ldr	r3, [sp, #12]
 800de70:	3e01      	subs	r6, #1
 800de72:	5c5b      	ldrb	r3, [r3, r1]
 800de74:	7033      	strb	r3, [r6, #0]
 800de76:	002b      	movs	r3, r5
 800de78:	0005      	movs	r5, r0
 800de7a:	429f      	cmp	r7, r3
 800de7c:	d9f3      	bls.n	800de66 <_printf_i+0xf2>
 800de7e:	2f08      	cmp	r7, #8
 800de80:	d109      	bne.n	800de96 <_printf_i+0x122>
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	07db      	lsls	r3, r3, #31
 800de86:	d506      	bpl.n	800de96 <_printf_i+0x122>
 800de88:	6863      	ldr	r3, [r4, #4]
 800de8a:	6922      	ldr	r2, [r4, #16]
 800de8c:	4293      	cmp	r3, r2
 800de8e:	dc02      	bgt.n	800de96 <_printf_i+0x122>
 800de90:	2330      	movs	r3, #48	; 0x30
 800de92:	3e01      	subs	r6, #1
 800de94:	7033      	strb	r3, [r6, #0]
 800de96:	9b04      	ldr	r3, [sp, #16]
 800de98:	1b9b      	subs	r3, r3, r6
 800de9a:	6123      	str	r3, [r4, #16]
 800de9c:	9b07      	ldr	r3, [sp, #28]
 800de9e:	0021      	movs	r1, r4
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	9805      	ldr	r0, [sp, #20]
 800dea4:	9b06      	ldr	r3, [sp, #24]
 800dea6:	aa09      	add	r2, sp, #36	; 0x24
 800dea8:	f7ff fef4 	bl	800dc94 <_printf_common>
 800deac:	1c43      	adds	r3, r0, #1
 800deae:	d14c      	bne.n	800df4a <_printf_i+0x1d6>
 800deb0:	2001      	movs	r0, #1
 800deb2:	4240      	negs	r0, r0
 800deb4:	b00b      	add	sp, #44	; 0x2c
 800deb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deb8:	3145      	adds	r1, #69	; 0x45
 800deba:	700a      	strb	r2, [r1, #0]
 800debc:	4a34      	ldr	r2, [pc, #208]	; (800df90 <_printf_i+0x21c>)
 800debe:	9203      	str	r2, [sp, #12]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	6821      	ldr	r1, [r4, #0]
 800dec4:	ca20      	ldmia	r2!, {r5}
 800dec6:	601a      	str	r2, [r3, #0]
 800dec8:	0608      	lsls	r0, r1, #24
 800deca:	d516      	bpl.n	800defa <_printf_i+0x186>
 800decc:	07cb      	lsls	r3, r1, #31
 800dece:	d502      	bpl.n	800ded6 <_printf_i+0x162>
 800ded0:	2320      	movs	r3, #32
 800ded2:	4319      	orrs	r1, r3
 800ded4:	6021      	str	r1, [r4, #0]
 800ded6:	2710      	movs	r7, #16
 800ded8:	2d00      	cmp	r5, #0
 800deda:	d1b2      	bne.n	800de42 <_printf_i+0xce>
 800dedc:	2320      	movs	r3, #32
 800dede:	6822      	ldr	r2, [r4, #0]
 800dee0:	439a      	bics	r2, r3
 800dee2:	6022      	str	r2, [r4, #0]
 800dee4:	e7ad      	b.n	800de42 <_printf_i+0xce>
 800dee6:	2220      	movs	r2, #32
 800dee8:	6809      	ldr	r1, [r1, #0]
 800deea:	430a      	orrs	r2, r1
 800deec:	6022      	str	r2, [r4, #0]
 800deee:	0022      	movs	r2, r4
 800def0:	2178      	movs	r1, #120	; 0x78
 800def2:	3245      	adds	r2, #69	; 0x45
 800def4:	7011      	strb	r1, [r2, #0]
 800def6:	4a27      	ldr	r2, [pc, #156]	; (800df94 <_printf_i+0x220>)
 800def8:	e7e1      	b.n	800debe <_printf_i+0x14a>
 800defa:	0648      	lsls	r0, r1, #25
 800defc:	d5e6      	bpl.n	800decc <_printf_i+0x158>
 800defe:	b2ad      	uxth	r5, r5
 800df00:	e7e4      	b.n	800decc <_printf_i+0x158>
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	680d      	ldr	r5, [r1, #0]
 800df06:	1d10      	adds	r0, r2, #4
 800df08:	6949      	ldr	r1, [r1, #20]
 800df0a:	6018      	str	r0, [r3, #0]
 800df0c:	6813      	ldr	r3, [r2, #0]
 800df0e:	062e      	lsls	r6, r5, #24
 800df10:	d501      	bpl.n	800df16 <_printf_i+0x1a2>
 800df12:	6019      	str	r1, [r3, #0]
 800df14:	e002      	b.n	800df1c <_printf_i+0x1a8>
 800df16:	066d      	lsls	r5, r5, #25
 800df18:	d5fb      	bpl.n	800df12 <_printf_i+0x19e>
 800df1a:	8019      	strh	r1, [r3, #0]
 800df1c:	2300      	movs	r3, #0
 800df1e:	9e04      	ldr	r6, [sp, #16]
 800df20:	6123      	str	r3, [r4, #16]
 800df22:	e7bb      	b.n	800de9c <_printf_i+0x128>
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	1d11      	adds	r1, r2, #4
 800df28:	6019      	str	r1, [r3, #0]
 800df2a:	6816      	ldr	r6, [r2, #0]
 800df2c:	2100      	movs	r1, #0
 800df2e:	0030      	movs	r0, r6
 800df30:	6862      	ldr	r2, [r4, #4]
 800df32:	f000 f833 	bl	800df9c <memchr>
 800df36:	2800      	cmp	r0, #0
 800df38:	d001      	beq.n	800df3e <_printf_i+0x1ca>
 800df3a:	1b80      	subs	r0, r0, r6
 800df3c:	6060      	str	r0, [r4, #4]
 800df3e:	6863      	ldr	r3, [r4, #4]
 800df40:	6123      	str	r3, [r4, #16]
 800df42:	2300      	movs	r3, #0
 800df44:	9a04      	ldr	r2, [sp, #16]
 800df46:	7013      	strb	r3, [r2, #0]
 800df48:	e7a8      	b.n	800de9c <_printf_i+0x128>
 800df4a:	6923      	ldr	r3, [r4, #16]
 800df4c:	0032      	movs	r2, r6
 800df4e:	9906      	ldr	r1, [sp, #24]
 800df50:	9805      	ldr	r0, [sp, #20]
 800df52:	9d07      	ldr	r5, [sp, #28]
 800df54:	47a8      	blx	r5
 800df56:	1c43      	adds	r3, r0, #1
 800df58:	d0aa      	beq.n	800deb0 <_printf_i+0x13c>
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	079b      	lsls	r3, r3, #30
 800df5e:	d415      	bmi.n	800df8c <_printf_i+0x218>
 800df60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df62:	68e0      	ldr	r0, [r4, #12]
 800df64:	4298      	cmp	r0, r3
 800df66:	daa5      	bge.n	800deb4 <_printf_i+0x140>
 800df68:	0018      	movs	r0, r3
 800df6a:	e7a3      	b.n	800deb4 <_printf_i+0x140>
 800df6c:	0022      	movs	r2, r4
 800df6e:	2301      	movs	r3, #1
 800df70:	9906      	ldr	r1, [sp, #24]
 800df72:	9805      	ldr	r0, [sp, #20]
 800df74:	9e07      	ldr	r6, [sp, #28]
 800df76:	3219      	adds	r2, #25
 800df78:	47b0      	blx	r6
 800df7a:	1c43      	adds	r3, r0, #1
 800df7c:	d098      	beq.n	800deb0 <_printf_i+0x13c>
 800df7e:	3501      	adds	r5, #1
 800df80:	68e3      	ldr	r3, [r4, #12]
 800df82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df84:	1a9b      	subs	r3, r3, r2
 800df86:	42ab      	cmp	r3, r5
 800df88:	dcf0      	bgt.n	800df6c <_printf_i+0x1f8>
 800df8a:	e7e9      	b.n	800df60 <_printf_i+0x1ec>
 800df8c:	2500      	movs	r5, #0
 800df8e:	e7f7      	b.n	800df80 <_printf_i+0x20c>
 800df90:	0800e399 	.word	0x0800e399
 800df94:	0800e3aa 	.word	0x0800e3aa

0800df98 <__retarget_lock_acquire_recursive>:
 800df98:	4770      	bx	lr

0800df9a <__retarget_lock_release_recursive>:
 800df9a:	4770      	bx	lr

0800df9c <memchr>:
 800df9c:	b2c9      	uxtb	r1, r1
 800df9e:	1882      	adds	r2, r0, r2
 800dfa0:	4290      	cmp	r0, r2
 800dfa2:	d101      	bne.n	800dfa8 <memchr+0xc>
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	4770      	bx	lr
 800dfa8:	7803      	ldrb	r3, [r0, #0]
 800dfaa:	428b      	cmp	r3, r1
 800dfac:	d0fb      	beq.n	800dfa6 <memchr+0xa>
 800dfae:	3001      	adds	r0, #1
 800dfb0:	e7f6      	b.n	800dfa0 <memchr+0x4>

0800dfb2 <memmove>:
 800dfb2:	b510      	push	{r4, lr}
 800dfb4:	4288      	cmp	r0, r1
 800dfb6:	d902      	bls.n	800dfbe <memmove+0xc>
 800dfb8:	188b      	adds	r3, r1, r2
 800dfba:	4298      	cmp	r0, r3
 800dfbc:	d303      	bcc.n	800dfc6 <memmove+0x14>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	e007      	b.n	800dfd2 <memmove+0x20>
 800dfc2:	5c8b      	ldrb	r3, [r1, r2]
 800dfc4:	5483      	strb	r3, [r0, r2]
 800dfc6:	3a01      	subs	r2, #1
 800dfc8:	d2fb      	bcs.n	800dfc2 <memmove+0x10>
 800dfca:	bd10      	pop	{r4, pc}
 800dfcc:	5ccc      	ldrb	r4, [r1, r3]
 800dfce:	54c4      	strb	r4, [r0, r3]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d1fa      	bne.n	800dfcc <memmove+0x1a>
 800dfd6:	e7f8      	b.n	800dfca <memmove+0x18>

0800dfd8 <_realloc_r>:
 800dfd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfda:	0007      	movs	r7, r0
 800dfdc:	000e      	movs	r6, r1
 800dfde:	0014      	movs	r4, r2
 800dfe0:	2900      	cmp	r1, #0
 800dfe2:	d105      	bne.n	800dff0 <_realloc_r+0x18>
 800dfe4:	0011      	movs	r1, r2
 800dfe6:	f7ff fc3b 	bl	800d860 <_malloc_r>
 800dfea:	0005      	movs	r5, r0
 800dfec:	0028      	movs	r0, r5
 800dfee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dff0:	2a00      	cmp	r2, #0
 800dff2:	d103      	bne.n	800dffc <_realloc_r+0x24>
 800dff4:	f7ff fbc8 	bl	800d788 <_free_r>
 800dff8:	0025      	movs	r5, r4
 800dffa:	e7f7      	b.n	800dfec <_realloc_r+0x14>
 800dffc:	f000 f81b 	bl	800e036 <_malloc_usable_size_r>
 800e000:	9001      	str	r0, [sp, #4]
 800e002:	4284      	cmp	r4, r0
 800e004:	d803      	bhi.n	800e00e <_realloc_r+0x36>
 800e006:	0035      	movs	r5, r6
 800e008:	0843      	lsrs	r3, r0, #1
 800e00a:	42a3      	cmp	r3, r4
 800e00c:	d3ee      	bcc.n	800dfec <_realloc_r+0x14>
 800e00e:	0021      	movs	r1, r4
 800e010:	0038      	movs	r0, r7
 800e012:	f7ff fc25 	bl	800d860 <_malloc_r>
 800e016:	1e05      	subs	r5, r0, #0
 800e018:	d0e8      	beq.n	800dfec <_realloc_r+0x14>
 800e01a:	9b01      	ldr	r3, [sp, #4]
 800e01c:	0022      	movs	r2, r4
 800e01e:	429c      	cmp	r4, r3
 800e020:	d900      	bls.n	800e024 <_realloc_r+0x4c>
 800e022:	001a      	movs	r2, r3
 800e024:	0031      	movs	r1, r6
 800e026:	0028      	movs	r0, r5
 800e028:	f7ff fb9c 	bl	800d764 <memcpy>
 800e02c:	0031      	movs	r1, r6
 800e02e:	0038      	movs	r0, r7
 800e030:	f7ff fbaa 	bl	800d788 <_free_r>
 800e034:	e7da      	b.n	800dfec <_realloc_r+0x14>

0800e036 <_malloc_usable_size_r>:
 800e036:	1f0b      	subs	r3, r1, #4
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	1f18      	subs	r0, r3, #4
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	da01      	bge.n	800e044 <_malloc_usable_size_r+0xe>
 800e040:	580b      	ldr	r3, [r1, r0]
 800e042:	18c0      	adds	r0, r0, r3
 800e044:	4770      	bx	lr
	...

0800e048 <_init>:
 800e048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e04a:	46c0      	nop			; (mov r8, r8)
 800e04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e04e:	bc08      	pop	{r3}
 800e050:	469e      	mov	lr, r3
 800e052:	4770      	bx	lr

0800e054 <_fini>:
 800e054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e056:	46c0      	nop			; (mov r8, r8)
 800e058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e05a:	bc08      	pop	{r3}
 800e05c:	469e      	mov	lr, r3
 800e05e:	4770      	bx	lr
