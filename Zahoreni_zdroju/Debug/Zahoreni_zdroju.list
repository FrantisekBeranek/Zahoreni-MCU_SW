
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cee8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800cfa8  0800cfa8  0001cfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d238  0800d238  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d238  0800d238  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d238  0800d238  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d238  0800d238  0001d238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d23c  0800d23c  0001d23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001450  200001e0  0800d420  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  0800d420  00021630  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a536  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e47  00000000  00000000  0004a73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  0004f588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  00050c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb2e  00000000  00000000  00052180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fb72  00000000  00000000  00071cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a42bb  00000000  00000000  00091820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135adb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005520  00000000  00000000  00135b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cf90 	.word	0x0800cf90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800cf90 	.word	0x0800cf90

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b0a5      	sub	sp, #148	; 0x94
 800041c:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 800041e:	4bda      	ldr	r3, [pc, #872]	; (8000788 <comHandler+0x370>)
 8000420:	7a1b      	ldrb	r3, [r3, #8]
 8000422:	2201      	movs	r2, #1
 8000424:	4013      	ands	r3, r2
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2b00      	cmp	r3, #0
 800042a:	d042      	beq.n	80004b2 <comHandler+0x9a>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 800042c:	e02e      	b.n	800048c <comHandler+0x74>
		{
#ifdef __DEBUG_INST__
			uint8_t txt[30];
#endif

			switch(instruction)
 800042e:	2357      	movs	r3, #87	; 0x57
 8000430:	2220      	movs	r2, #32
 8000432:	4694      	mov	ip, r2
 8000434:	44bc      	add	ip, r7
 8000436:	4463      	add	r3, ip
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b73      	cmp	r3, #115	; 0x73
 800043c:	d008      	beq.n	8000450 <comHandler+0x38>
 800043e:	dc1f      	bgt.n	8000480 <comHandler+0x68>
 8000440:	2b70      	cmp	r3, #112	; 0x70
 8000442:	d011      	beq.n	8000468 <comHandler+0x50>
 8000444:	dc1c      	bgt.n	8000480 <comHandler+0x68>
 8000446:	2b63      	cmp	r3, #99	; 0x63
 8000448:	d008      	beq.n	800045c <comHandler+0x44>
 800044a:	2b6b      	cmp	r3, #107	; 0x6b
 800044c:	d012      	beq.n	8000474 <comHandler+0x5c>
 800044e:	e017      	b.n	8000480 <comHandler+0x68>
			{
			case 's': ;
				//___Start testu___//
				flags.instructions.startRequest = 1;
 8000450:	4bcd      	ldr	r3, [pc, #820]	; (8000788 <comHandler+0x370>)
 8000452:	7b1a      	ldrb	r2, [r3, #12]
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800045a:	e017      	b.n	800048c <comHandler+0x74>

			case'c': ;
				//___Ukončení___//
				flags.instructions.stopRequest = 1;
 800045c:	4bca      	ldr	r3, [pc, #808]	; (8000788 <comHandler+0x370>)
 800045e:	7b1a      	ldrb	r2, [r3, #12]
 8000460:	2102      	movs	r1, #2
 8000462:	430a      	orrs	r2, r1
 8000464:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000466:	e011      	b.n	800048c <comHandler+0x74>

			case'p': ;
				//___Pauza___//
				flags.instructions.pauseRequest = 1;
 8000468:	4bc7      	ldr	r3, [pc, #796]	; (8000788 <comHandler+0x370>)
 800046a:	7b1a      	ldrb	r2, [r3, #12]
 800046c:	2104      	movs	r1, #4
 800046e:	430a      	orrs	r2, r1
 8000470:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000472:	e00b      	b.n	800048c <comHandler+0x74>

			case'k': ;
				//___Kalibrace___//
				flags.instructions.calibRequest = 1;
 8000474:	4bc4      	ldr	r3, [pc, #784]	; (8000788 <comHandler+0x370>)
 8000476:	7b1a      	ldrb	r2, [r3, #12]
 8000478:	2108      	movs	r1, #8
 800047a:	430a      	orrs	r2, r1
 800047c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800047e:	e005      	b.n	800048c <comHandler+0x74>

			default: ;
				//___Neplatný příkaz___//
				flags.instructions.unknownInst = 1;
 8000480:	4bc1      	ldr	r3, [pc, #772]	; (8000788 <comHandler+0x370>)
 8000482:	7b1a      	ldrb	r2, [r3, #12]
 8000484:	2110      	movs	r1, #16
 8000486:	430a      	orrs	r2, r1
 8000488:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 800048a:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 800048c:	4bbf      	ldr	r3, [pc, #764]	; (800078c <comHandler+0x374>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2257      	movs	r2, #87	; 0x57
 8000492:	2120      	movs	r1, #32
 8000494:	468c      	mov	ip, r1
 8000496:	44bc      	add	ip, r7
 8000498:	4462      	add	r2, ip
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f001 f976 	bl	800178e <pop>
 80004a2:	0003      	movs	r3, r0
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d1c2      	bne.n	800042e <comHandler+0x16>
			}
		}
		flags.data_received = 0;
 80004a8:	4bb7      	ldr	r3, [pc, #732]	; (8000788 <comHandler+0x370>)
 80004aa:	7a1a      	ldrb	r2, [r3, #8]
 80004ac:	2101      	movs	r1, #1
 80004ae:	438a      	bics	r2, r1
 80004b0:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)
 80004b2:	4bb5      	ldr	r3, [pc, #724]	; (8000788 <comHandler+0x370>)
 80004b4:	7e1b      	ldrb	r3, [r3, #24]
 80004b6:	2202      	movs	r2, #2
 80004b8:	4013      	ands	r3, r2
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d067      	beq.n	8000590 <comHandler+0x178>
	{
		char testPhaseChr;
		switch(currentPhase())
 80004c0:	f001 fc8c 	bl	8001ddc <currentPhase>
 80004c4:	0003      	movs	r3, r0
 80004c6:	2b06      	cmp	r3, #6
 80004c8:	d834      	bhi.n	8000534 <comHandler+0x11c>
 80004ca:	009a      	lsls	r2, r3, #2
 80004cc:	4bb0      	ldr	r3, [pc, #704]	; (8000790 <comHandler+0x378>)
 80004ce:	18d3      	adds	r3, r2, r3
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 80004d4:	2367      	movs	r3, #103	; 0x67
 80004d6:	2220      	movs	r2, #32
 80004d8:	4694      	mov	ip, r2
 80004da:	44bc      	add	ip, r7
 80004dc:	4463      	add	r3, ip
 80004de:	2273      	movs	r2, #115	; 0x73
 80004e0:	701a      	strb	r2, [r3, #0]
			break;
 80004e2:	e02f      	b.n	8000544 <comHandler+0x12c>
		case START_DONE:
			testPhaseChr = 's';
 80004e4:	2367      	movs	r3, #103	; 0x67
 80004e6:	2220      	movs	r2, #32
 80004e8:	4694      	mov	ip, r2
 80004ea:	44bc      	add	ip, r7
 80004ec:	4463      	add	r3, ip
 80004ee:	2273      	movs	r2, #115	; 0x73
 80004f0:	701a      	strb	r2, [r3, #0]
			break;
 80004f2:	e027      	b.n	8000544 <comHandler+0x12c>
		case MAIN_TEST:
			testPhaseChr = 'm';
 80004f4:	2367      	movs	r3, #103	; 0x67
 80004f6:	2220      	movs	r2, #32
 80004f8:	4694      	mov	ip, r2
 80004fa:	44bc      	add	ip, r7
 80004fc:	4463      	add	r3, ip
 80004fe:	226d      	movs	r2, #109	; 0x6d
 8000500:	701a      	strb	r2, [r3, #0]
			break;
 8000502:	e01f      	b.n	8000544 <comHandler+0x12c>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 8000504:	2367      	movs	r3, #103	; 0x67
 8000506:	2220      	movs	r2, #32
 8000508:	4694      	mov	ip, r2
 800050a:	44bc      	add	ip, r7
 800050c:	4463      	add	r3, ip
 800050e:	226d      	movs	r2, #109	; 0x6d
 8000510:	701a      	strb	r2, [r3, #0]
			break;
 8000512:	e017      	b.n	8000544 <comHandler+0x12c>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 8000514:	2367      	movs	r3, #103	; 0x67
 8000516:	2220      	movs	r2, #32
 8000518:	4694      	mov	ip, r2
 800051a:	44bc      	add	ip, r7
 800051c:	4463      	add	r3, ip
 800051e:	2262      	movs	r2, #98	; 0x62
 8000520:	701a      	strb	r2, [r3, #0]
			break;
 8000522:	e00f      	b.n	8000544 <comHandler+0x12c>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 8000524:	2367      	movs	r3, #103	; 0x67
 8000526:	2220      	movs	r2, #32
 8000528:	4694      	mov	ip, r2
 800052a:	44bc      	add	ip, r7
 800052c:	4463      	add	r3, ip
 800052e:	224d      	movs	r2, #77	; 0x4d
 8000530:	701a      	strb	r2, [r3, #0]
			break;
 8000532:	e007      	b.n	8000544 <comHandler+0x12c>
		default:
			testPhaseChr = 'e';
 8000534:	2367      	movs	r3, #103	; 0x67
 8000536:	2220      	movs	r2, #32
 8000538:	4694      	mov	ip, r2
 800053a:	44bc      	add	ip, r7
 800053c:	4463      	add	r3, ip
 800053e:	2265      	movs	r2, #101	; 0x65
 8000540:	701a      	strb	r2, [r3, #0]
			break;
 8000542:	46c0      	nop			; (mov r8, r8)
		}
		char txt[30];
#ifdef __APP_COMPATIBILITY__
		sprintf(txt, "#%c\n", testPhaseChr);
#else
		sprintf(txt, "Test progress #%c\n", testPhaseChr);
 8000544:	2367      	movs	r3, #103	; 0x67
 8000546:	2220      	movs	r2, #32
 8000548:	4694      	mov	ip, r2
 800054a:	44bc      	add	ip, r7
 800054c:	4463      	add	r3, ip
 800054e:	781a      	ldrb	r2, [r3, #0]
 8000550:	4990      	ldr	r1, [pc, #576]	; (8000794 <comHandler+0x37c>)
 8000552:	2338      	movs	r3, #56	; 0x38
 8000554:	001c      	movs	r4, r3
 8000556:	2020      	movs	r0, #32
 8000558:	4684      	mov	ip, r0
 800055a:	44bc      	add	ip, r7
 800055c:	4463      	add	r3, ip
 800055e:	0018      	movs	r0, r3
 8000560:	f00c f9aa 	bl	800c8b8 <siprintf>
#endif
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000564:	4b8c      	ldr	r3, [pc, #560]	; (8000798 <comHandler+0x380>)
 8000566:	681e      	ldr	r6, [r3, #0]
 8000568:	0023      	movs	r3, r4
 800056a:	001c      	movs	r4, r3
 800056c:	2220      	movs	r2, #32
 800056e:	4694      	mov	ip, r2
 8000570:	44bc      	add	ip, r7
 8000572:	4463      	add	r3, ip
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fdc7 	bl	8000108 <strlen>
 800057a:	0003      	movs	r3, r0
 800057c:	001a      	movs	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	2120      	movs	r1, #32
 8000582:	468c      	mov	ip, r1
 8000584:	44bc      	add	ip, r7
 8000586:	4463      	add	r3, ip
 8000588:	0019      	movs	r1, r3
 800058a:	0030      	movs	r0, r6
 800058c:	f001 f8d7 	bl	800173e <pushStr>
	}

	if(flags.meas.measComplete)
 8000590:	4b7d      	ldr	r3, [pc, #500]	; (8000788 <comHandler+0x370>)
 8000592:	7d1b      	ldrb	r3, [r3, #20]
 8000594:	2202      	movs	r2, #2
 8000596:	4013      	ands	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d100      	bne.n	80005a0 <comHandler+0x188>
 800059e:	e098      	b.n	80006d2 <comHandler+0x2ba>
	{
		if(!flags.meas.calibMeas)
 80005a0:	4b79      	ldr	r3, [pc, #484]	; (8000788 <comHandler+0x370>)
 80005a2:	7d1b      	ldrb	r3, [r3, #20]
 80005a4:	2240      	movs	r2, #64	; 0x40
 80005a6:	4013      	ands	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d11a      	bne.n	80005e4 <comHandler+0x1cc>
		{
			push(USB_Tx_Buffer, '#');
 80005ae:	4b7a      	ldr	r3, [pc, #488]	; (8000798 <comHandler+0x380>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2123      	movs	r1, #35	; 0x23
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 f88b 	bl	80016d0 <push>
			push(USB_Tx_Buffer, testNum);
 80005ba:	4b77      	ldr	r3, [pc, #476]	; (8000798 <comHandler+0x380>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b77      	ldr	r3, [pc, #476]	; (800079c <comHandler+0x384>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	0019      	movs	r1, r3
 80005c6:	0010      	movs	r0, r2
 80005c8:	f001 f882 	bl	80016d0 <push>
			push(USB_Tx_Buffer, '\n');
 80005cc:	4b72      	ldr	r3, [pc, #456]	; (8000798 <comHandler+0x380>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	210a      	movs	r1, #10
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 f87c 	bl	80016d0 <push>
			testNum++;
 80005d8:	4b70      	ldr	r3, [pc, #448]	; (800079c <comHandler+0x384>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	4b6f      	ldr	r3, [pc, #444]	; (800079c <comHandler+0x384>)
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	e004      	b.n	80005ee <comHandler+0x1d6>
		}
		else
		{
			flags.meas.calibMeas = 0;
 80005e4:	4b68      	ldr	r3, [pc, #416]	; (8000788 <comHandler+0x370>)
 80005e6:	7d1a      	ldrb	r2, [r3, #20]
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	438a      	bics	r2, r1
 80005ec:	751a      	strb	r2, [r3, #20]
		}

		if(flags.meas.onlyBattery)
 80005ee:	4b66      	ldr	r3, [pc, #408]	; (8000788 <comHandler+0x370>)
 80005f0:	7d1b      	ldrb	r3, [r3, #20]
 80005f2:	2220      	movs	r2, #32
 80005f4:	4013      	ands	r3, r2
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d02c      	beq.n	8000656 <comHandler+0x23e>
		{
			char res[20] = {0};
 80005fc:	2624      	movs	r6, #36	; 0x24
 80005fe:	2320      	movs	r3, #32
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	199b      	adds	r3, r3, r6
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	3304      	adds	r3, #4
 800060a:	2210      	movs	r2, #16
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f00c f890 	bl	800c734 <memset>
			sprintf(res, "%d;\n", ADC_Results[12]);
 8000614:	4b62      	ldr	r3, [pc, #392]	; (80007a0 <comHandler+0x388>)
 8000616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000618:	4962      	ldr	r1, [pc, #392]	; (80007a4 <comHandler+0x38c>)
 800061a:	0034      	movs	r4, r6
 800061c:	2320      	movs	r3, #32
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	199b      	adds	r3, r3, r6
 8000622:	0018      	movs	r0, r3
 8000624:	f00c f948 	bl	800c8b8 <siprintf>
			pushStr(USB_Tx_Buffer, res, strlen(res));
 8000628:	4b5b      	ldr	r3, [pc, #364]	; (8000798 <comHandler+0x380>)
 800062a:	681e      	ldr	r6, [r3, #0]
 800062c:	0023      	movs	r3, r4
 800062e:	001c      	movs	r4, r3
 8000630:	2220      	movs	r2, #32
 8000632:	4694      	mov	ip, r2
 8000634:	44bc      	add	ip, r7
 8000636:	4463      	add	r3, ip
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff fd65 	bl	8000108 <strlen>
 800063e:	0003      	movs	r3, r0
 8000640:	001a      	movs	r2, r3
 8000642:	0023      	movs	r3, r4
 8000644:	2120      	movs	r1, #32
 8000646:	468c      	mov	ip, r1
 8000648:	44bc      	add	ip, r7
 800064a:	4463      	add	r3, ip
 800064c:	0019      	movs	r1, r3
 800064e:	0030      	movs	r0, r6
 8000650:	f001 f875 	bl	800173e <pushStr>
 8000654:	e03d      	b.n	80006d2 <comHandler+0x2ba>
		}
		else
		{
			for(int i = 0; i < 7; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	2288      	movs	r2, #136	; 0x88
 800065a:	18ba      	adds	r2, r7, r2
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	e02d      	b.n	80006bc <comHandler+0x2a4>
			{
				char res[20];
				sprintf(res, "%d;", ADC_Results[2*i]);
 8000660:	2388      	movs	r3, #136	; 0x88
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	005a      	lsls	r2, r3, #1
 8000668:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <comHandler+0x388>)
 800066a:	0092      	lsls	r2, r2, #2
 800066c:	58d2      	ldr	r2, [r2, r3]
 800066e:	494e      	ldr	r1, [pc, #312]	; (80007a8 <comHandler+0x390>)
 8000670:	2310      	movs	r3, #16
 8000672:	001c      	movs	r4, r3
 8000674:	2020      	movs	r0, #32
 8000676:	4684      	mov	ip, r0
 8000678:	44bc      	add	ip, r7
 800067a:	4463      	add	r3, ip
 800067c:	0018      	movs	r0, r3
 800067e:	f00c f91b 	bl	800c8b8 <siprintf>
				pushStr(USB_Tx_Buffer, res, strlen(res));
 8000682:	4b45      	ldr	r3, [pc, #276]	; (8000798 <comHandler+0x380>)
 8000684:	681e      	ldr	r6, [r3, #0]
 8000686:	0023      	movs	r3, r4
 8000688:	001c      	movs	r4, r3
 800068a:	2220      	movs	r2, #32
 800068c:	4694      	mov	ip, r2
 800068e:	44bc      	add	ip, r7
 8000690:	4463      	add	r3, ip
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff fd38 	bl	8000108 <strlen>
 8000698:	0003      	movs	r3, r0
 800069a:	001a      	movs	r2, r3
 800069c:	0023      	movs	r3, r4
 800069e:	2120      	movs	r1, #32
 80006a0:	468c      	mov	ip, r1
 80006a2:	44bc      	add	ip, r7
 80006a4:	4463      	add	r3, ip
 80006a6:	0019      	movs	r1, r3
 80006a8:	0030      	movs	r0, r6
 80006aa:	f001 f848 	bl	800173e <pushStr>
			for(int i = 0; i < 7; i++)
 80006ae:	2388      	movs	r3, #136	; 0x88
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	2288      	movs	r2, #136	; 0x88
 80006b8:	18ba      	adds	r2, r7, r2
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	2388      	movs	r3, #136	; 0x88
 80006be:	18fb      	adds	r3, r7, r3
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	ddcc      	ble.n	8000660 <comHandler+0x248>
			}
			push(USB_Tx_Buffer, 0x0A);
 80006c6:	4b34      	ldr	r3, [pc, #208]	; (8000798 <comHandler+0x380>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	210a      	movs	r1, #10
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 ffff 	bl	80016d0 <push>
	}
#endif

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <comHandler+0x380>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7d1b      	ldrb	r3, [r3, #20]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d112      	bne.n	8000702 <comHandler+0x2ea>
	{
		char msg[] = {"Buffer full\n"};
 80006dc:	2320      	movs	r3, #32
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	4a32      	ldr	r2, [pc, #200]	; (80007ac <comHandler+0x394>)
 80006e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006e4:	c313      	stmia	r3!, {r0, r1, r4}
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 80006ea:	2320      	movs	r3, #32
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff fd0a 	bl	8000108 <strlen>
 80006f4:	0002      	movs	r2, r0
 80006f6:	2320      	movs	r3, #32
 80006f8:	18fb      	adds	r3, r7, r3
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f00b fb1f 	bl	800bd40 <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <comHandler+0x380>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d073      	beq.n	80007f4 <comHandler+0x3dc>
	{
 800070c:	466b      	mov	r3, sp
 800070e:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <comHandler+0x380>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	18ba      	adds	r2, r7, r2
 800071a:	6013      	str	r3, [r2, #0]
		char tmpStr[size];
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000726:	001a      	movs	r2, r3
 8000728:	60ba      	str	r2, [r7, #8]
 800072a:	2200      	movs	r2, #0
 800072c:	60fa      	str	r2, [r7, #12]
 800072e:	68b8      	ldr	r0, [r7, #8]
 8000730:	68f9      	ldr	r1, [r7, #12]
 8000732:	0002      	movs	r2, r0
 8000734:	0f52      	lsrs	r2, r2, #29
 8000736:	000c      	movs	r4, r1
 8000738:	00e4      	lsls	r4, r4, #3
 800073a:	61fc      	str	r4, [r7, #28]
 800073c:	69fc      	ldr	r4, [r7, #28]
 800073e:	4314      	orrs	r4, r2
 8000740:	61fc      	str	r4, [r7, #28]
 8000742:	0002      	movs	r2, r0
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	61ba      	str	r2, [r7, #24]
 8000748:	001a      	movs	r2, r3
 800074a:	603a      	str	r2, [r7, #0]
 800074c:	2200      	movs	r2, #0
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	6838      	ldr	r0, [r7, #0]
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	0002      	movs	r2, r0
 8000756:	0f52      	lsrs	r2, r2, #29
 8000758:	000c      	movs	r4, r1
 800075a:	00e4      	lsls	r4, r4, #3
 800075c:	617c      	str	r4, [r7, #20]
 800075e:	697c      	ldr	r4, [r7, #20]
 8000760:	4314      	orrs	r4, r2
 8000762:	617c      	str	r4, [r7, #20]
 8000764:	0002      	movs	r2, r0
 8000766:	00d2      	lsls	r2, r2, #3
 8000768:	613a      	str	r2, [r7, #16]
 800076a:	3307      	adds	r3, #7
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	466a      	mov	r2, sp
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	469d      	mov	sp, r3
 8000776:	466b      	mov	r3, sp
 8000778:	3300      	adds	r3, #0
 800077a:	67bb      	str	r3, [r7, #120]	; 0x78
		for(int i = 0; i < size; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	228c      	movs	r2, #140	; 0x8c
 8000780:	18ba      	adds	r2, r7, r2
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	e025      	b.n	80007d2 <comHandler+0x3ba>
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000620 	.word	0x20000620
 800078c:	20001128 	.word	0x20001128
 8000790:	0800d068 	.word	0x0800d068
 8000794:	0800cfa8 	.word	0x0800cfa8
 8000798:	20000490 	.word	0x20000490
 800079c:	20000260 	.word	0x20000260
 80007a0:	200001fc 	.word	0x200001fc
 80007a4:	0800cfbc 	.word	0x0800cfbc
 80007a8:	0800cfc4 	.word	0x0800cfc4
 80007ac:	0800cfc8 	.word	0x0800cfc8
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <comHandler+0x3e4>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80007b6:	238c      	movs	r3, #140	; 0x8c
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	18d3      	adds	r3, r2, r3
 80007be:	0019      	movs	r1, r3
 80007c0:	f000 ffe5 	bl	800178e <pop>
		for(int i = 0; i < size; i++)
 80007c4:	238c      	movs	r3, #140	; 0x8c
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	228c      	movs	r2, #140	; 0x8c
 80007ce:	18ba      	adds	r2, r7, r2
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	238c      	movs	r3, #140	; 0x8c
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dbe6      	blt.n	80007b0 <comHandler+0x398>
		}
		CDC_Transmit_FS(tmpStr, size);
 80007e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	18ba      	adds	r2, r7, r2
 80007e8:	6812      	ldr	r2, [r2, #0]
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f00b faa7 	bl	800bd40 <CDC_Transmit_FS>
 80007f2:	46b5      	mov	sp, r6
	}

}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b025      	add	sp, #148	; 0x94
 80007fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fc:	20000490 	.word	0x20000490

08000800 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	0002      	movs	r2, r0
 8000808:	1dbb      	adds	r3, r7, #6
 800080a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 800080c:	1dbb      	adds	r3, r7, #6
 800080e:	881a      	ldrh	r2, [r3, #0]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	429a      	cmp	r2, r3
 8000816:	d104      	bne.n	8000822 <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_GPIO_EXTI_Callback+0x40>)
 800081a:	791a      	ldrb	r2, [r3, #4]
 800081c:	2101      	movs	r1, #1
 800081e:	430a      	orrs	r2, r1
 8000820:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 8000822:	1dbb      	adds	r3, r7, #6
 8000824:	881a      	ldrh	r2, [r3, #0]
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	429a      	cmp	r2, r3
 800082c:	d104      	bne.n	8000838 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <HAL_GPIO_EXTI_Callback+0x40>)
 8000830:	791a      	ldrb	r2, [r3, #4]
 8000832:	2104      	movs	r1, #4
 8000834:	430a      	orrs	r2, r1
 8000836:	711a      	strb	r2, [r3, #4]
	}
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000620 	.word	0x20000620

08000844 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000850:	429a      	cmp	r2, r3
 8000852:	d104      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	2101      	movs	r1, #1
 800085a:	430a      	orrs	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
	}
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	200005d8 	.word	0x200005d8
 800086c:	20000620 	.word	0x20000620

08000870 <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc);
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	0018      	movs	r0, r3
 800087c:	f001 ff82 	bl	8002784 <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <HAL_ADC_ConvCpltCallback+0x24>)
 8000882:	7d1a      	ldrb	r2, [r3, #20]
 8000884:	2104      	movs	r1, #4
 8000886:	430a      	orrs	r2, r1
 8000888:	751a      	strb	r2, [r3, #20]
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	20000620 	.word	0x20000620

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089c:	f001 fd38 	bl	8002310 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 80008a0:	2064      	movs	r0, #100	; 0x64
 80008a2:	f000 fee0 	bl	8001666 <createBuffer>
 80008a6:	0002      	movs	r2, r0
 80008a8:	4b36      	ldr	r3, [pc, #216]	; (8000984 <main+0xec>)
 80008aa:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 80008ac:	2064      	movs	r0, #100	; 0x64
 80008ae:	f000 feda 	bl	8001666 <createBuffer>
 80008b2:	0002      	movs	r2, r0
 80008b4:	4b34      	ldr	r3, [pc, #208]	; (8000988 <main+0xf0>)
 80008b6:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 80008b8:	23fa      	movs	r3, #250	; 0xfa
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fed2 	bl	8001666 <createBuffer>
 80008c2:	0002      	movs	r2, r0
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <main+0xf4>)
 80008c6:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 80008c8:	23fa      	movs	r3, #250	; 0xfa
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 feca 	bl	8001666 <createBuffer>
 80008d2:	0002      	movs	r2, r0
 80008d4:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <main+0xf8>)
 80008d6:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d8:	f000 f862 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008dc:	f000 faac 	bl	8000e38 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80008e0:	f00b f984 	bl	800bbec <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 80008e4:	f000 f8c8 	bl	8000a78 <MX_ADC_Init>
  MX_SPI1_Init();
 80008e8:	f000 f9e4 	bl	8000cb4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80008ec:	f000 fa74 	bl	8000dd8 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80008f0:	f000 fa26 	bl	8000d40 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);

  LOAD_MIN_OFF;
 80008f4:	4b27      	ldr	r3, [pc, #156]	; (8000994 <main+0xfc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0018      	movs	r0, r3
 80008fc:	f002 fda1 	bl	8003442 <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <main+0xfc>)
 8000902:	2200      	movs	r2, #0
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	0018      	movs	r0, r3
 8000908:	f002 fd9b 	bl	8003442 <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 800090c:	f000 ffb6 	bl	800187c <regInit>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d004      	beq.n	800091e <main+0x86>
  {
	  flags.conErr = 1;
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <main+0x100>)
 8000916:	7e1a      	ldrb	r2, [r3, #24]
 8000918:	2104      	movs	r1, #4
 800091a:	430a      	orrs	r2, r1
 800091c:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <main+0x104>)
 8000920:	0018      	movs	r0, r3
 8000922:	f005 fffd 	bl	8006920 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <main+0x100>)
 8000928:	7c1a      	ldrb	r2, [r3, #16]
 800092a:	2102      	movs	r1, #2
 800092c:	430a      	orrs	r2, r1
 800092e:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <main+0x100>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2201      	movs	r2, #1
 8000936:	4013      	ands	r3, r2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0f8      	beq.n	8000930 <main+0x98>
	  {
		  clkHandler();
 800093e:	f000 fb67 	bl	8001010 <clkHandler>
		  buttonDebounce();
 8000942:	f000 fbe3 	bl	800110c <buttonDebounce>
		  comHandler();
 8000946:	f7ff fd67 	bl	8000418 <comHandler>
		  if(flags.instructions.calibRequest)
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <main+0x100>)
 800094c:	7b1b      	ldrb	r3, [r3, #12]
 800094e:	2208      	movs	r2, #8
 8000950:	4013      	ands	r3, r2
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00e      	beq.n	8000976 <main+0xde>
		  {
			  flags.meas.measRequest = 1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <main+0x100>)
 800095a:	7d1a      	ldrb	r2, [r3, #20]
 800095c:	2101      	movs	r1, #1
 800095e:	430a      	orrs	r2, r1
 8000960:	751a      	strb	r2, [r3, #20]
			  flags.meas.calibMeas = 1;
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <main+0x100>)
 8000964:	7d1a      	ldrb	r2, [r3, #20]
 8000966:	2140      	movs	r1, #64	; 0x40
 8000968:	430a      	orrs	r2, r1
 800096a:	751a      	strb	r2, [r3, #20]
			  flags.instructions.calibRequest = 0;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <main+0x100>)
 800096e:	7b1a      	ldrb	r2, [r3, #12]
 8000970:	2108      	movs	r1, #8
 8000972:	438a      	bics	r2, r1
 8000974:	731a      	strb	r2, [r3, #12]
		  }
		  UI_Handler();
 8000976:	f000 fc53 	bl	8001220 <UI_Handler>
		  testHandler();
 800097a:	f001 fa39 	bl	8001df0 <testHandler>
		  measHandler();
 800097e:	f000 fd65 	bl	800144c <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 8000982:	e7d5      	b.n	8000930 <main+0x98>
 8000984:	20000494 	.word	0x20000494
 8000988:	20000684 	.word	0x20000684
 800098c:	20001128 	.word	0x20001128
 8000990:	20000490 	.word	0x20000490
 8000994:	48000800 	.word	0x48000800
 8000998:	20000620 	.word	0x20000620
 800099c:	200005d8 	.word	0x200005d8

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b099      	sub	sp, #100	; 0x64
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	242c      	movs	r4, #44	; 0x2c
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	2334      	movs	r3, #52	; 0x34
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f00b febf 	bl	800c734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b6:	231c      	movs	r3, #28
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	0018      	movs	r0, r3
 80009bc:	2310      	movs	r3, #16
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f00b feb7 	bl	800c734 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c6:	003b      	movs	r3, r7
 80009c8:	0018      	movs	r0, r3
 80009ca:	231c      	movs	r3, #28
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f00b feb0 	bl	800c734 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80009d4:	0021      	movs	r1, r4
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2232      	movs	r2, #50	; 0x32
 80009da:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2201      	movs	r2, #1
 80009e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2201      	movs	r2, #1
 80009e6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2201      	movs	r2, #1
 80009ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2210      	movs	r2, #16
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2210      	movs	r2, #16
 80009f8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2202      	movs	r2, #2
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0212      	lsls	r2, r2, #8
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	0352      	lsls	r2, r2, #13
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f004 fbd9 	bl	80051d0 <HAL_RCC_OscConfig>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000a22:	f000 fe1b 	bl	800165c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	211c      	movs	r1, #28
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2207      	movs	r2, #7
 8000a2c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2202      	movs	r2, #2
 8000a32:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2101      	movs	r1, #1
 8000a44:	0018      	movs	r0, r3
 8000a46:	f004 ff49 	bl	80058dc <HAL_RCC_ClockConfig>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a4e:	f000 fe05 	bl	800165c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a52:	003b      	movs	r3, r7
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	0292      	lsls	r2, r2, #10
 8000a58:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a60:	003b      	movs	r3, r7
 8000a62:	0018      	movs	r0, r3
 8000a64:	f005 f8b6 	bl	8005bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a6c:	f000 fdf6 	bl	800165c <Error_Handler>
  }
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b019      	add	sp, #100	; 0x64
 8000a76:	bd90      	pop	{r4, r7, pc}

08000a78 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	0018      	movs	r0, r3
 8000a82:	230c      	movs	r3, #12
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f00b fe54 	bl	800c734 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000a8c:	4b87      	ldr	r3, [pc, #540]	; (8000cac <MX_ADC_Init+0x234>)
 8000a8e:	4a88      	ldr	r2, [pc, #544]	; (8000cb0 <MX_ADC_Init+0x238>)
 8000a90:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a92:	4b86      	ldr	r3, [pc, #536]	; (8000cac <MX_ADC_Init+0x234>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a98:	4b84      	ldr	r3, [pc, #528]	; (8000cac <MX_ADC_Init+0x234>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9e:	4b83      	ldr	r3, [pc, #524]	; (8000cac <MX_ADC_Init+0x234>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000aa4:	4b81      	ldr	r3, [pc, #516]	; (8000cac <MX_ADC_Init+0x234>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aaa:	4b80      	ldr	r3, [pc, #512]	; (8000cac <MX_ADC_Init+0x234>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ab0:	4b7e      	ldr	r3, [pc, #504]	; (8000cac <MX_ADC_Init+0x234>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ab6:	4b7d      	ldr	r3, [pc, #500]	; (8000cac <MX_ADC_Init+0x234>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000abc:	4b7b      	ldr	r3, [pc, #492]	; (8000cac <MX_ADC_Init+0x234>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ac2:	4b7a      	ldr	r3, [pc, #488]	; (8000cac <MX_ADC_Init+0x234>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac8:	4b78      	ldr	r3, [pc, #480]	; (8000cac <MX_ADC_Init+0x234>)
 8000aca:	22c2      	movs	r2, #194	; 0xc2
 8000acc:	32ff      	adds	r2, #255	; 0xff
 8000ace:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad0:	4b76      	ldr	r3, [pc, #472]	; (8000cac <MX_ADC_Init+0x234>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ad6:	4b75      	ldr	r3, [pc, #468]	; (8000cac <MX_ADC_Init+0x234>)
 8000ad8:	2224      	movs	r2, #36	; 0x24
 8000ada:	2100      	movs	r1, #0
 8000adc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ade:	4b73      	ldr	r3, [pc, #460]	; (8000cac <MX_ADC_Init+0x234>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ae4:	4b71      	ldr	r3, [pc, #452]	; (8000cac <MX_ADC_Init+0x234>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 fc9a 	bl	8002420 <HAL_ADC_Init>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000af0:	f000 fdb4 	bl	800165c <Error_Handler>
  }
  //ADC1->CFGR1 ^= (1 << CHSELRMOD);
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	0152      	lsls	r2, r2, #5
 8000b00:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2205      	movs	r2, #5
 8000b06:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b08:	1d3a      	adds	r2, r7, #4
 8000b0a:	4b68      	ldr	r3, [pc, #416]	; (8000cac <MX_ADC_Init+0x234>)
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 ff56 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000b18:	f000 fda0 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b22:	1d3a      	adds	r2, r7, #4
 8000b24:	4b61      	ldr	r3, [pc, #388]	; (8000cac <MX_ADC_Init+0x234>)
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 ff49 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000b32:	f000 fd93 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2202      	movs	r2, #2
 8000b3a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b3c:	1d3a      	adds	r2, r7, #4
 8000b3e:	4b5b      	ldr	r3, [pc, #364]	; (8000cac <MX_ADC_Init+0x234>)
 8000b40:	0011      	movs	r1, r2
 8000b42:	0018      	movs	r0, r3
 8000b44:	f001 ff3c 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000b4c:	f000 fd86 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2203      	movs	r2, #3
 8000b54:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b56:	1d3a      	adds	r2, r7, #4
 8000b58:	4b54      	ldr	r3, [pc, #336]	; (8000cac <MX_ADC_Init+0x234>)
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 ff2f 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000b66:	f000 fd79 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b70:	1d3a      	adds	r2, r7, #4
 8000b72:	4b4e      	ldr	r3, [pc, #312]	; (8000cac <MX_ADC_Init+0x234>)
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f001 ff22 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8000b80:	f000 fd6c 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2205      	movs	r2, #5
 8000b88:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b8a:	1d3a      	adds	r2, r7, #4
 8000b8c:	4b47      	ldr	r3, [pc, #284]	; (8000cac <MX_ADC_Init+0x234>)
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f001 ff15 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000b96:	1e03      	subs	r3, r0, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8000b9a:	f000 fd5f 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2206      	movs	r2, #6
 8000ba2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ba4:	1d3a      	adds	r2, r7, #4
 8000ba6:	4b41      	ldr	r3, [pc, #260]	; (8000cac <MX_ADC_Init+0x234>)
 8000ba8:	0011      	movs	r1, r2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 ff08 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8000bb4:	f000 fd52 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2207      	movs	r2, #7
 8000bbc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bbe:	1d3a      	adds	r2, r7, #4
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <MX_ADC_Init+0x234>)
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f001 fefb 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8000bce:	f000 fd45 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2208      	movs	r2, #8
 8000bd6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bd8:	1d3a      	adds	r2, r7, #4
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_ADC_Init+0x234>)
 8000bdc:	0011      	movs	r1, r2
 8000bde:	0018      	movs	r0, r3
 8000be0:	f001 feee 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8000be8:	f000 fd38 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2209      	movs	r2, #9
 8000bf0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bf2:	1d3a      	adds	r2, r7, #4
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_ADC_Init+0x234>)
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f001 fee1 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 8000c02:	f000 fd2b 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	220a      	movs	r2, #10
 8000c0a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c0c:	1d3a      	adds	r2, r7, #4
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <MX_ADC_Init+0x234>)
 8000c10:	0011      	movs	r1, r2
 8000c12:	0018      	movs	r0, r3
 8000c14:	f001 fed4 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 8000c1c:	f000 fd1e 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	220b      	movs	r2, #11
 8000c24:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c26:	1d3a      	adds	r2, r7, #4
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_ADC_Init+0x234>)
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f001 fec7 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 8000c36:	f000 fd11 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	220c      	movs	r2, #12
 8000c3e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c40:	1d3a      	adds	r2, r7, #4
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_ADC_Init+0x234>)
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 feba 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 8000c50:	f000 fd04 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	220d      	movs	r2, #13
 8000c58:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c5a:	1d3a      	adds	r2, r7, #4
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_ADC_Init+0x234>)
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 fead 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 8000c6a:	f000 fcf7 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	220e      	movs	r2, #14
 8000c72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c74:	1d3a      	adds	r2, r7, #4
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_ADC_Init+0x234>)
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 fea0 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 8000c84:	f000 fcea 	bl	800165c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	220f      	movs	r2, #15
 8000c8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c8e:	1d3a      	adds	r2, r7, #4
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_ADC_Init+0x234>)
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 fe93 	bl	80029c0 <HAL_ADC_ConfigChannel>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 8000c9e:	f000 fcdd 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b004      	add	sp, #16
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	2000063c 	.word	0x2000063c
 8000cb0:	40012400 	.word	0x40012400

08000cb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <MX_SPI1_Init+0x84>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cc0:	2282      	movs	r2, #130	; 0x82
 8000cc2:	0052      	lsls	r2, r2, #1
 8000cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cce:	22e0      	movs	r2, #224	; 0xe0
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cea:	2238      	movs	r2, #56	; 0x38
 8000cec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000d02:	2207      	movs	r2, #7
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000d0e:	2208      	movs	r2, #8
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_SPI1_Init+0x80>)
 8000d14:	0018      	movs	r0, r3
 8000d16:	f005 f85b 	bl	8005dd0 <HAL_SPI_Init>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f000 fc9d 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_SPI1_Init+0x88>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 fb8a 	bl	8003442 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000574 	.word	0x20000574
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	48000400 	.word	0x48000400

08000d40 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	231c      	movs	r3, #28
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f00b fcf0 	bl	800c734 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <MX_TIM14_Init+0x90>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d5c:	222f      	movs	r2, #47	; 0x2f
 8000d5e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d68:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <MX_TIM14_Init+0x94>)
 8000d6a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f005 fd80 	bl	8006880 <HAL_TIM_Base_Init>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000d84:	f000 fc6a 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f005 fe1a 	bl	80069c4 <HAL_TIM_OC_Init>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000d94:	f000 fc62 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db0:	1d39      	adds	r1, r7, #4
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_TIM14_Init+0x8c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	0018      	movs	r0, r3
 8000db8:	f005 ff72 	bl	8006ca0 <HAL_TIM_OC_ConfigChannel>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000dc0:	f000 fc4c 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b008      	add	sp, #32
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200005d8 	.word	0x200005d8
 8000dd0:	40002000 	.word	0x40002000
 8000dd4:	0000270f 	.word	0x0000270f

08000dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <MX_USART3_UART_Init+0x5c>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000de4:	2296      	movs	r2, #150	; 0x96
 8000de6:	0212      	lsls	r2, r2, #8
 8000de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f006 fa43 	bl	80072a8 <HAL_UART_Init>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e26:	f000 fc19 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200004f0 	.word	0x200004f0
 8000e34:	40004800 	.word	0x40004800

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b08b      	sub	sp, #44	; 0x2c
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	2414      	movs	r4, #20
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	0018      	movs	r0, r3
 8000e44:	2314      	movs	r3, #20
 8000e46:	001a      	movs	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f00b fc73 	bl	800c734 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	4b6b      	ldr	r3, [pc, #428]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e50:	695a      	ldr	r2, [r3, #20]
 8000e52:	4b6a      	ldr	r3, [pc, #424]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	03c9      	lsls	r1, r1, #15
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	4b67      	ldr	r3, [pc, #412]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	03db      	lsls	r3, r3, #15
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4b64      	ldr	r3, [pc, #400]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e6c:	695a      	ldr	r2, [r3, #20]
 8000e6e:	4b63      	ldr	r3, [pc, #396]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	0309      	lsls	r1, r1, #12
 8000e74:	430a      	orrs	r2, r1
 8000e76:	615a      	str	r2, [r3, #20]
 8000e78:	4b60      	ldr	r3, [pc, #384]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e7a:	695a      	ldr	r2, [r3, #20]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	031b      	lsls	r3, r3, #12
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b5d      	ldr	r3, [pc, #372]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e88:	695a      	ldr	r2, [r3, #20]
 8000e8a:	4b5c      	ldr	r3, [pc, #368]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	0289      	lsls	r1, r1, #10
 8000e90:	430a      	orrs	r2, r1
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	4b59      	ldr	r3, [pc, #356]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000e96:	695a      	ldr	r2, [r3, #20]
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	029b      	lsls	r3, r3, #10
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b56      	ldr	r3, [pc, #344]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	4b55      	ldr	r3, [pc, #340]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	02c9      	lsls	r1, r1, #11
 8000eac:	430a      	orrs	r2, r1
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000eb2:	695a      	ldr	r2, [r3, #20]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	02db      	lsls	r3, r3, #11
 8000eb8:	4013      	ands	r3, r2
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	4b4f      	ldr	r3, [pc, #316]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	0349      	lsls	r1, r1, #13
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	615a      	str	r2, [r3, #20]
 8000ecc:	4b4b      	ldr	r3, [pc, #300]	; (8000ffc <MX_GPIO_Init+0x1c4>)
 8000ece:	695a      	ldr	r2, [r3, #20]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	035b      	lsls	r3, r3, #13
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000eda:	4949      	ldr	r1, [pc, #292]	; (8001000 <MX_GPIO_Init+0x1c8>)
 8000edc:	4b49      	ldr	r3, [pc, #292]	; (8001004 <MX_GPIO_Init+0x1cc>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f002 faae 	bl	8003442 <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000ee6:	239e      	movs	r3, #158	; 0x9e
 8000ee8:	015b      	lsls	r3, r3, #5
 8000eea:	4847      	ldr	r0, [pc, #284]	; (8001008 <MX_GPIO_Init+0x1d0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	0019      	movs	r1, r3
 8000ef0:	f002 faa7 	bl	8003442 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	0219      	lsls	r1, r3, #8
 8000ef8:	2390      	movs	r3, #144	; 0x90
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	2200      	movs	r2, #0
 8000efe:	0018      	movs	r0, r3
 8000f00:	f002 fa9f 	bl	8003442 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	4a3e      	ldr	r2, [pc, #248]	; (8001000 <MX_GPIO_Init+0x1c8>)
 8000f08:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	4a39      	ldr	r2, [pc, #228]	; (8001004 <MX_GPIO_Init+0x1cc>)
 8000f20:	0019      	movs	r1, r3
 8000f22:	0010      	movs	r0, r2
 8000f24:	f002 f8f8 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000f28:	0021      	movs	r1, r4
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	229e      	movs	r2, #158	; 0x9e
 8000f2e:	0152      	lsls	r2, r2, #5
 8000f30:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	000c      	movs	r4, r1
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2201      	movs	r2, #1
 8000f38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <MX_GPIO_Init+0x1d0>)
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	0010      	movs	r0, r2
 8000f4e:	f002 f8e3 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	22c0      	movs	r2, #192	; 0xc0
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	2288      	movs	r2, #136	; 0x88
 8000f5e:	0352      	lsls	r2, r2, #13
 8000f60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	2202      	movs	r2, #2
 8000f66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	193a      	adds	r2, r7, r4
 8000f6a:	2390      	movs	r3, #144	; 0x90
 8000f6c:	05db      	lsls	r3, r3, #23
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f002 f8d1 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	00d2      	lsls	r2, r2, #3
 8000f7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	193a      	adds	r2, r7, r4
 8000f8c:	2390      	movs	r3, #144	; 0x90
 8000f8e:	05db      	lsls	r3, r3, #23
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f002 f8c0 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000f98:	0021      	movs	r1, r4
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	0212      	lsls	r2, r2, #8
 8000fa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	000c      	movs	r4, r1
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	193a      	adds	r2, r7, r4
 8000fb8:	2390      	movs	r3, #144	; 0x90
 8000fba:	05db      	lsls	r3, r3, #23
 8000fbc:	0011      	movs	r1, r2
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f002 f8aa 	bl	8003118 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	193b      	adds	r3, r7, r4
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	; (800100c <MX_GPIO_Init+0x1d4>)
 8000fda:	0019      	movs	r1, r3
 8000fdc:	0010      	movs	r0, r2
 8000fde:	f002 f89b 	bl	8003118 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2007      	movs	r0, #7
 8000fe8:	f001 ffe6 	bl	8002fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000fec:	2007      	movs	r0, #7
 8000fee:	f001 fff8 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b00b      	add	sp, #44	; 0x2c
 8000ff8:	bd90      	pop	{r4, r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	40021000 	.word	0x40021000
 8001000:	0000f3c4 	.word	0x0000f3c4
 8001004:	48000400 	.word	0x48000400
 8001008:	48000800 	.word	0x48000800
 800100c:	48000c00 	.word	0x48000c00

08001010 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	flags.time.ten_ms = 0;
 8001014:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <clkHandler+0xf4>)
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	2101      	movs	r1, #1
 800101a:	438a      	bics	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 800101e:	4b39      	ldr	r3, [pc, #228]	; (8001104 <clkHandler+0xf4>)
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	2102      	movs	r1, #2
 8001024:	438a      	bics	r2, r1
 8001026:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <clkHandler+0xf4>)
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	2104      	movs	r1, #4
 800102e:	438a      	bics	r2, r1
 8001030:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <clkHandler+0xf4>)
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	2108      	movs	r1, #8
 8001038:	438a      	bics	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]
	sysTime[SYSTIME_TEN_MS]++;
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <clkHandler+0xf8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <clkHandler+0xf8>)
 8001044:	601a      	str	r2, [r3, #0]
#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 8001046:	4b30      	ldr	r3, [pc, #192]	; (8001108 <clkHandler+0xf8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2164      	movs	r1, #100	; 0x64
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff f8f3 	bl	8000238 <__aeabi_uidivmod>
 8001052:	1e0b      	subs	r3, r1, #0
 8001054:	d109      	bne.n	800106a <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <clkHandler+0xf8>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <clkHandler+0xf8>)
 800105e:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <clkHandler+0xf4>)
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	2102      	movs	r1, #2
 8001066:	430a      	orrs	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <clkHandler+0xf4>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2202      	movs	r2, #2
 8001070:	4013      	ands	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d042      	beq.n	80010fe <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <clkHandler+0xf8>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	213c      	movs	r1, #60	; 0x3c
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff f8da 	bl	8000238 <__aeabi_uidivmod>
 8001084:	1e0b      	subs	r3, r1, #0
 8001086:	d110      	bne.n	80010aa <clkHandler+0x9a>
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <clkHandler+0xf8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00c      	beq.n	80010aa <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <clkHandler+0xf8>)
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <clkHandler+0xf8>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <clkHandler+0xf8>)
 800109e:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <clkHandler+0xf4>)
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	2104      	movs	r1, #4
 80010a6:	430a      	orrs	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <clkHandler+0xf4>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2204      	movs	r2, #4
 80010b0:	4013      	ands	r3, r2
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d022      	beq.n	80010fe <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <clkHandler+0xf8>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	213c      	movs	r1, #60	; 0x3c
 80010be:	0018      	movs	r0, r3
 80010c0:	f7ff f8ba 	bl	8000238 <__aeabi_uidivmod>
 80010c4:	1e0b      	subs	r3, r1, #0
 80010c6:	d11a      	bne.n	80010fe <clkHandler+0xee>
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <clkHandler+0xf8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d016      	beq.n	80010fe <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <clkHandler+0xf8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <clkHandler+0xf8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <clkHandler+0xf8>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <clkHandler+0xf8>)
 80010e4:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <clkHandler+0xf4>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	2108      	movs	r1, #8
 80010ec:	430a      	orrs	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <clkHandler+0xf8>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	2b16      	cmp	r3, #22
 80010f6:	d902      	bls.n	80010fe <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <clkHandler+0xf8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000620 	.word	0x20000620
 8001108:	2000023c 	.word	0x2000023c

0800110c <buttonDebounce>:

void buttonDebounce(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	flags.buttons.butt0_ver = 0;
 8001110:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <buttonDebounce+0x104>)
 8001112:	791a      	ldrb	r2, [r3, #4]
 8001114:	2102      	movs	r1, #2
 8001116:	438a      	bics	r2, r1
 8001118:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <buttonDebounce+0x104>)
 800111c:	791a      	ldrb	r2, [r3, #4]
 800111e:	2108      	movs	r1, #8
 8001120:	438a      	bics	r2, r1
 8001122:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)
 8001124:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <buttonDebounce+0x104>)
 8001126:	791b      	ldrb	r3, [r3, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	4013      	ands	r3, r2
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d031      	beq.n	8001196 <buttonDebounce+0x8a>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	009a      	lsls	r2, r3, #2
 8001136:	2390      	movs	r3, #144	; 0x90
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f002 f963 	bl	8003408 <HAL_GPIO_ReadPin>
 8001142:	0003      	movs	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d106      	bne.n	8001156 <buttonDebounce+0x4a>
		{
			button0_Debounce++;
 8001148:	4b32      	ldr	r3, [pc, #200]	; (8001214 <buttonDebounce+0x108>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <buttonDebounce+0x108>)
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e007      	b.n	8001166 <buttonDebounce+0x5a>
		}
		else
		{
			button0_Debounce = 0;
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <buttonDebounce+0x108>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <buttonDebounce+0x104>)
 800115e:	791a      	ldrb	r2, [r3, #4]
 8001160:	2101      	movs	r1, #1
 8001162:	438a      	bics	r2, r1
 8001164:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <buttonDebounce+0x108>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b04      	cmp	r3, #4
 800116c:	d913      	bls.n	8001196 <buttonDebounce+0x8a>
		{
			flags.buttons.butt0_ver = 1;
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <buttonDebounce+0x104>)
 8001170:	791a      	ldrb	r2, [r3, #4]
 8001172:	2102      	movs	r1, #2
 8001174:	430a      	orrs	r2, r1
 8001176:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <buttonDebounce+0x104>)
 800117a:	791a      	ldrb	r2, [r3, #4]
 800117c:	2101      	movs	r1, #1
 800117e:	438a      	bics	r2, r1
 8001180:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <buttonDebounce+0x108>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin);
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4a22      	ldr	r2, [pc, #136]	; (8001218 <buttonDebounce+0x10c>)
 800118e:	0019      	movs	r1, r3
 8001190:	0010      	movs	r0, r2
 8001192:	f002 f973 	bl	800347c <HAL_GPIO_TogglePin>
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <buttonDebounce+0x104>)
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	2204      	movs	r2, #4
 800119c:	4013      	ands	r3, r2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d032      	beq.n	800120a <buttonDebounce+0xfe>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	005a      	lsls	r2, r3, #1
 80011a8:	2390      	movs	r3, #144	; 0x90
 80011aa:	05db      	lsls	r3, r3, #23
 80011ac:	0011      	movs	r1, r2
 80011ae:	0018      	movs	r0, r3
 80011b0:	f002 f92a 	bl	8003408 <HAL_GPIO_ReadPin>
 80011b4:	0003      	movs	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d106      	bne.n	80011c8 <buttonDebounce+0xbc>
		{
			button1_Debounce++;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <buttonDebounce+0x110>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <buttonDebounce+0x110>)
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	e007      	b.n	80011d8 <buttonDebounce+0xcc>
		}
		else
		{
			button1_Debounce = 0;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <buttonDebounce+0x110>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <buttonDebounce+0x104>)
 80011d0:	791a      	ldrb	r2, [r3, #4]
 80011d2:	2104      	movs	r1, #4
 80011d4:	438a      	bics	r2, r1
 80011d6:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <buttonDebounce+0x110>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d914      	bls.n	800120a <buttonDebounce+0xfe>
		{
			flags.buttons.butt1_ver = 1;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <buttonDebounce+0x104>)
 80011e2:	791a      	ldrb	r2, [r3, #4]
 80011e4:	2108      	movs	r1, #8
 80011e6:	430a      	orrs	r2, r1
 80011e8:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <buttonDebounce+0x104>)
 80011ec:	791a      	ldrb	r2, [r3, #4]
 80011ee:	2104      	movs	r1, #4
 80011f0:	438a      	bics	r2, r1
 80011f2:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <buttonDebounce+0x110>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	021a      	lsls	r2, r3, #8
 80011fe:	2390      	movs	r3, #144	; 0x90
 8001200:	05db      	lsls	r3, r3, #23
 8001202:	0011      	movs	r1, r2
 8001204:	0018      	movs	r0, r3
 8001206:	f002 f939 	bl	800347c <HAL_GPIO_TogglePin>
#endif
		}
	}
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000620 	.word	0x20000620
 8001214:	2000024c 	.word	0x2000024c
 8001218:	48000400 	.word	0x48000400
 800121c:	2000024d 	.word	0x2000024d

08001220 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.ui.error && (UI_State != ERROR))
 8001224:	4b82      	ldr	r3, [pc, #520]	; (8001430 <UI_Handler+0x210>)
 8001226:	7c1b      	ldrb	r3, [r3, #16]
 8001228:	2204      	movs	r2, #4
 800122a:	4013      	ands	r3, r2
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00b      	beq.n	800124a <UI_Handler+0x2a>
 8001232:	4b80      	ldr	r3, [pc, #512]	; (8001434 <UI_Handler+0x214>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b03      	cmp	r3, #3
 8001238:	d007      	beq.n	800124a <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 800123a:	4b7e      	ldr	r3, [pc, #504]	; (8001434 <UI_Handler+0x214>)
 800123c:	2203      	movs	r2, #3
 800123e:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001240:	4b7d      	ldr	r3, [pc, #500]	; (8001438 <UI_Handler+0x218>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b7d      	ldr	r3, [pc, #500]	; (800143c <UI_Handler+0x21c>)
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e05e      	b.n	8001308 <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 800124a:	4b79      	ldr	r3, [pc, #484]	; (8001430 <UI_Handler+0x210>)
 800124c:	7c1b      	ldrb	r3, [r3, #16]
 800124e:	2208      	movs	r2, #8
 8001250:	4013      	ands	r3, r2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d010      	beq.n	800127a <UI_Handler+0x5a>
 8001258:	4b76      	ldr	r3, [pc, #472]	; (8001434 <UI_Handler+0x214>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10c      	bne.n	800127a <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 8001260:	4b74      	ldr	r3, [pc, #464]	; (8001434 <UI_Handler+0x214>)
 8001262:	2204      	movs	r2, #4
 8001264:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001266:	4b74      	ldr	r3, [pc, #464]	; (8001438 <UI_Handler+0x218>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b74      	ldr	r3, [pc, #464]	; (800143c <UI_Handler+0x21c>)
 800126c:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 800126e:	4b70      	ldr	r3, [pc, #448]	; (8001430 <UI_Handler+0x210>)
 8001270:	7c1a      	ldrb	r2, [r3, #16]
 8001272:	2108      	movs	r1, #8
 8001274:	438a      	bics	r2, r1
 8001276:	741a      	strb	r2, [r3, #16]
 8001278:	e046      	b.n	8001308 <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 800127a:	4b6d      	ldr	r3, [pc, #436]	; (8001430 <UI_Handler+0x210>)
 800127c:	7c1b      	ldrb	r3, [r3, #16]
 800127e:	2210      	movs	r2, #16
 8001280:	4013      	ands	r3, r2
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d010      	beq.n	80012aa <UI_Handler+0x8a>
 8001288:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <UI_Handler+0x214>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10c      	bne.n	80012aa <UI_Handler+0x8a>
	{
		UI_State = DONE;
 8001290:	4b68      	ldr	r3, [pc, #416]	; (8001434 <UI_Handler+0x214>)
 8001292:	2205      	movs	r2, #5
 8001294:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001296:	4b68      	ldr	r3, [pc, #416]	; (8001438 <UI_Handler+0x218>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b68      	ldr	r3, [pc, #416]	; (800143c <UI_Handler+0x21c>)
 800129c:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 800129e:	4b64      	ldr	r3, [pc, #400]	; (8001430 <UI_Handler+0x210>)
 80012a0:	7c1a      	ldrb	r2, [r3, #16]
 80012a2:	2110      	movs	r1, #16
 80012a4:	438a      	bics	r2, r1
 80012a6:	741a      	strb	r2, [r3, #16]
 80012a8:	e02e      	b.n	8001308 <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 80012aa:	4b61      	ldr	r3, [pc, #388]	; (8001430 <UI_Handler+0x210>)
 80012ac:	7c1b      	ldrb	r3, [r3, #16]
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d010      	beq.n	80012da <UI_Handler+0xba>
 80012b8:	4b5e      	ldr	r3, [pc, #376]	; (8001434 <UI_Handler+0x214>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10c      	bne.n	80012da <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 80012c0:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <UI_Handler+0x214>)
 80012c2:	2202      	movs	r2, #2
 80012c4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80012c6:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <UI_Handler+0x218>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b5c      	ldr	r3, [pc, #368]	; (800143c <UI_Handler+0x21c>)
 80012cc:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 80012ce:	4b58      	ldr	r3, [pc, #352]	; (8001430 <UI_Handler+0x210>)
 80012d0:	7c1a      	ldrb	r2, [r3, #16]
 80012d2:	2102      	movs	r1, #2
 80012d4:	438a      	bics	r2, r1
 80012d6:	741a      	strb	r2, [r3, #16]
 80012d8:	e016      	b.n	8001308 <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 80012da:	4b55      	ldr	r3, [pc, #340]	; (8001430 <UI_Handler+0x210>)
 80012dc:	7c1b      	ldrb	r3, [r3, #16]
 80012de:	2201      	movs	r2, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00f      	beq.n	8001308 <UI_Handler+0xe8>
 80012e8:	4b52      	ldr	r3, [pc, #328]	; (8001434 <UI_Handler+0x214>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10b      	bne.n	8001308 <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 80012f0:	4b50      	ldr	r3, [pc, #320]	; (8001434 <UI_Handler+0x214>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80012f6:	4b50      	ldr	r3, [pc, #320]	; (8001438 <UI_Handler+0x218>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b50      	ldr	r3, [pc, #320]	; (800143c <UI_Handler+0x21c>)
 80012fc:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 80012fe:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <UI_Handler+0x210>)
 8001300:	7c1a      	ldrb	r2, [r3, #16]
 8001302:	2101      	movs	r1, #1
 8001304:	438a      	bics	r2, r1
 8001306:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 8001308:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <UI_Handler+0x214>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b05      	cmp	r3, #5
 800130e:	d900      	bls.n	8001312 <UI_Handler+0xf2>
 8001310:	e07a      	b.n	8001408 <UI_Handler+0x1e8>
 8001312:	009a      	lsls	r2, r3, #2
 8001314:	4b4a      	ldr	r3, [pc, #296]	; (8001440 <UI_Handler+0x220>)
 8001316:	18d3      	adds	r3, r2, r3
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)
 800131c:	4b46      	ldr	r3, [pc, #280]	; (8001438 <UI_Handler+0x218>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b46      	ldr	r3, [pc, #280]	; (800143c <UI_Handler+0x21c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b31      	cmp	r3, #49	; 0x31
 8001328:	d800      	bhi.n	800132c <UI_Handler+0x10c>
 800132a:	e075      	b.n	8001418 <UI_Handler+0x1f8>
		{
			UI_State = OFF;
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <UI_Handler+0x214>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	015b      	lsls	r3, r3, #5
 8001336:	4843      	ldr	r0, [pc, #268]	; (8001444 <UI_Handler+0x224>)
 8001338:	2200      	movs	r2, #0
 800133a:	0019      	movs	r1, r3
 800133c:	f002 f881 	bl	8003442 <HAL_GPIO_WritePin>
		}
		break;
 8001340:	e06a      	b.n	8001418 <UI_Handler+0x1f8>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <UI_Handler+0x218>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b3d      	ldr	r3, [pc, #244]	; (800143c <UI_Handler+0x21c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b63      	cmp	r3, #99	; 0x63
 800134e:	d965      	bls.n	800141c <UI_Handler+0x1fc>
		{
			UI_State = OFF;
 8001350:	4b38      	ldr	r3, [pc, #224]	; (8001434 <UI_Handler+0x214>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	483a      	ldr	r0, [pc, #232]	; (8001444 <UI_Handler+0x224>)
 800135c:	2200      	movs	r2, #0
 800135e:	0019      	movs	r1, r3
 8001360:	f002 f86f 	bl	8003442 <HAL_GPIO_WritePin>
		}
		break;
 8001364:	e05a      	b.n	800141c <UI_Handler+0x1fc>

	case ERROR:
		if(!flags.ui.error)
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <UI_Handler+0x210>)
 8001368:	7c1b      	ldrb	r3, [r3, #16]
 800136a:	2204      	movs	r2, #4
 800136c:	4013      	ands	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <UI_Handler+0x15a>
			UI_State = OFF;
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <UI_Handler+0x214>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <UI_Handler+0x218>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b2f      	ldr	r3, [pc, #188]	; (800143c <UI_Handler+0x21c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2132      	movs	r1, #50	; 0x32
 8001386:	0018      	movs	r0, r3
 8001388:	f7fe ff56 	bl	8000238 <__aeabi_uidivmod>
 800138c:	1e0b      	subs	r3, r1, #0
 800138e:	d147      	bne.n	8001420 <UI_Handler+0x200>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_RED_Toggle;
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	021a      	lsls	r2, r3, #8
 8001394:	2390      	movs	r3, #144	; 0x90
 8001396:	05db      	lsls	r3, r3, #23
 8001398:	0011      	movs	r1, r2
 800139a:	0018      	movs	r0, r3
 800139c:	f002 f86e 	bl	800347c <HAL_GPIO_TogglePin>
		}
		break;
 80013a0:	e03e      	b.n	8001420 <UI_Handler+0x200>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <UI_Handler+0x218>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <UI_Handler+0x21c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2123      	movs	r1, #35	; 0x23
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7fe ff42 	bl	8000238 <__aeabi_uidivmod>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <UI_Handler+0x218>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <UI_Handler+0x21c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2bd0      	cmp	r3, #208	; 0xd0
 80013c0:	d930      	bls.n	8001424 <UI_Handler+0x204>
			UI_State = OFF;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <UI_Handler+0x214>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
		break;
 80013c8:	e02c      	b.n	8001424 <UI_Handler+0x204>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <UI_Handler+0x218>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <UI_Handler+0x21c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2132      	movs	r1, #50	; 0x32
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7fe ff2e 	bl	8000238 <__aeabi_uidivmod>
 80013dc:	1e0b      	subs	r3, r1, #0
 80013de:	d106      	bne.n	80013ee <UI_Handler+0x1ce>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_GREEN_Toggle;
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4a18      	ldr	r2, [pc, #96]	; (8001448 <UI_Handler+0x228>)
 80013e6:	0019      	movs	r1, r3
 80013e8:	0010      	movs	r0, r2
 80013ea:	f002 f847 	bl	800347c <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <UI_Handler+0x218>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <UI_Handler+0x21c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	1ad2      	subs	r2, r2, r3
 80013f8:	2395      	movs	r3, #149	; 0x95
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d913      	bls.n	8001428 <UI_Handler+0x208>
			UI_State = OFF;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <UI_Handler+0x214>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
		break;
 8001406:	e00f      	b.n	8001428 <UI_Handler+0x208>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <UI_Handler+0x224>)
 800140e:	2200      	movs	r2, #0
 8001410:	0019      	movs	r1, r3
 8001412:	f002 f816 	bl	8003442 <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
#endif
		break;
 8001416:	e008      	b.n	800142a <UI_Handler+0x20a>
		break;
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	e006      	b.n	800142a <UI_Handler+0x20a>
		break;
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	e004      	b.n	800142a <UI_Handler+0x20a>
		break;
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	e002      	b.n	800142a <UI_Handler+0x20a>
		break;
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	e000      	b.n	800142a <UI_Handler+0x20a>
		break;
 8001428:	46c0      	nop			; (mov r8, r8)

	}
}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000620 	.word	0x20000620
 8001434:	2000024e 	.word	0x2000024e
 8001438:	2000023c 	.word	0x2000023c
 800143c:	20000250 	.word	0x20000250
 8001440:	0800d084 	.word	0x0800d084
 8001444:	48000800 	.word	0x48000800
 8001448:	48000400 	.word	0x48000400

0800144c <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 800144c:	b5b0      	push	{r4, r5, r7, lr}
 800144e:	af00      	add	r7, sp, #0
		U_BAT,					//kanál 6
		PAD9, PAD15,			//kanál 4, 13
		U48V_CURRENT			//kanál 3
	}ADC_State;

	flags.meas.measComplete = 0;
 8001450:	4b76      	ldr	r3, [pc, #472]	; (800162c <measHandler+0x1e0>)
 8001452:	7d1a      	ldrb	r2, [r3, #20]
 8001454:	2102      	movs	r1, #2
 8001456:	438a      	bics	r2, r1
 8001458:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 800145a:	4b74      	ldr	r3, [pc, #464]	; (800162c <measHandler+0x1e0>)
 800145c:	7d1a      	ldrb	r2, [r3, #20]
 800145e:	2110      	movs	r1, #16
 8001460:	438a      	bics	r2, r1
 8001462:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 8001464:	4b71      	ldr	r3, [pc, #452]	; (800162c <measHandler+0x1e0>)
 8001466:	7d1b      	ldrb	r3, [r3, #20]
 8001468:	2201      	movs	r2, #1
 800146a:	4013      	ands	r3, r2
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d03a      	beq.n	80014e8 <measHandler+0x9c>
	{
		if(!flags.meas.measRunning)
 8001472:	4b6e      	ldr	r3, [pc, #440]	; (800162c <measHandler+0x1e0>)
 8001474:	7d1b      	ldrb	r3, [r3, #20]
 8001476:	2208      	movs	r2, #8
 8001478:	4013      	ands	r3, r2
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d129      	bne.n	80014d4 <measHandler+0x88>
		{
			flags.meas.measRunning = 1;
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <measHandler+0x1e0>)
 8001482:	7d1a      	ldrb	r2, [r3, #20]
 8001484:	2108      	movs	r1, #8
 8001486:	430a      	orrs	r2, r1
 8001488:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST)	//probíhá battery test
 800148a:	f000 fca7 	bl	8001ddc <currentPhase>
 800148e:	0003      	movs	r3, r0
 8001490:	2b05      	cmp	r3, #5
 8001492:	d10f      	bne.n	80014b4 <measHandler+0x68>
			{
				flags.meas.onlyBattery = 1;
 8001494:	4b65      	ldr	r3, [pc, #404]	; (800162c <measHandler+0x1e0>)
 8001496:	7d1a      	ldrb	r2, [r3, #20]
 8001498:	2120      	movs	r1, #32
 800149a:	430a      	orrs	r2, r1
 800149c:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 800149e:	4b64      	ldr	r3, [pc, #400]	; (8001630 <measHandler+0x1e4>)
 80014a0:	220d      	movs	r2, #13
 80014a2:	701a      	strb	r2, [r3, #0]
				changeChannel(ADC_CHSELR_CHSEL6);
 80014a4:	2040      	movs	r0, #64	; 0x40
 80014a6:	f000 f8cb 	bl	8001640 <changeChannel>
				HAL_ADC_Start_IT(&hadc);
 80014aa:	4b62      	ldr	r3, [pc, #392]	; (8001634 <measHandler+0x1e8>)
 80014ac:	0018      	movs	r0, r3
 80014ae:	f001 f8f7 	bl	80026a0 <HAL_ADC_Start_IT>
 80014b2:	e014      	b.n	80014de <measHandler+0x92>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 80014b4:	4b5d      	ldr	r3, [pc, #372]	; (800162c <measHandler+0x1e0>)
 80014b6:	7d1a      	ldrb	r2, [r3, #20]
 80014b8:	2120      	movs	r1, #32
 80014ba:	438a      	bics	r2, r1
 80014bc:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 80014be:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <measHandler+0x1e4>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
				changeChannel(ADC_CHSELR_CHSEL7);
 80014c4:	2080      	movs	r0, #128	; 0x80
 80014c6:	f000 f8bb 	bl	8001640 <changeChannel>
				HAL_ADC_Start_IT(&hadc);
 80014ca:	4b5a      	ldr	r3, [pc, #360]	; (8001634 <measHandler+0x1e8>)
 80014cc:	0018      	movs	r0, r3
 80014ce:	f001 f8e7 	bl	80026a0 <HAL_ADC_Start_IT>
 80014d2:	e004      	b.n	80014de <measHandler+0x92>
			}
		}
		else
		{
			flags.meas.measConflict = 1;
 80014d4:	4b55      	ldr	r3, [pc, #340]	; (800162c <measHandler+0x1e0>)
 80014d6:	7d1a      	ldrb	r2, [r3, #20]
 80014d8:	2110      	movs	r1, #16
 80014da:	430a      	orrs	r2, r1
 80014dc:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 80014de:	4b53      	ldr	r3, [pc, #332]	; (800162c <measHandler+0x1e0>)
 80014e0:	7d1a      	ldrb	r2, [r3, #20]
 80014e2:	2101      	movs	r1, #1
 80014e4:	438a      	bics	r2, r1
 80014e6:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != WAITING)
 80014e8:	4b51      	ldr	r3, [pc, #324]	; (8001630 <measHandler+0x1e4>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d100      	bne.n	80014f2 <measHandler+0xa6>
 80014f0:	e098      	b.n	8001624 <measHandler+0x1d8>
	{
		if(flags.meas.measDataReady)
 80014f2:	4b4e      	ldr	r3, [pc, #312]	; (800162c <measHandler+0x1e0>)
 80014f4:	7d1b      	ldrb	r3, [r3, #20]
 80014f6:	2204      	movs	r2, #4
 80014f8:	4013      	ands	r3, r2
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d100      	bne.n	8001502 <measHandler+0xb6>
 8001500:	e090      	b.n	8001624 <measHandler+0x1d8>
		{
			flags.meas.measDataReady = 0;
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <measHandler+0x1e0>)
 8001504:	7d1a      	ldrb	r2, [r3, #20]
 8001506:	2104      	movs	r1, #4
 8001508:	438a      	bics	r2, r1
 800150a:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 800150c:	4b48      	ldr	r3, [pc, #288]	; (8001630 <measHandler+0x1e4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b0d      	cmp	r3, #13
 8001512:	d118      	bne.n	8001546 <measHandler+0xfa>
			{
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001514:	4b46      	ldr	r3, [pc, #280]	; (8001630 <measHandler+0x1e4>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	1e5c      	subs	r4, r3, #1
 800151a:	4b46      	ldr	r3, [pc, #280]	; (8001634 <measHandler+0x1e8>)
 800151c:	0018      	movs	r0, r3
 800151e:	f001 f97b 	bl	8002818 <HAL_ADC_GetValue>
 8001522:	0001      	movs	r1, r0
 8001524:	4b44      	ldr	r3, [pc, #272]	; (8001638 <measHandler+0x1ec>)
 8001526:	00a2      	lsls	r2, r4, #2
 8001528:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 800152a:	4b40      	ldr	r3, [pc, #256]	; (800162c <measHandler+0x1e0>)
 800152c:	7d1a      	ldrb	r2, [r3, #20]
 800152e:	2102      	movs	r1, #2
 8001530:	430a      	orrs	r2, r1
 8001532:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 8001534:	4b3d      	ldr	r3, [pc, #244]	; (800162c <measHandler+0x1e0>)
 8001536:	7d1a      	ldrb	r2, [r3, #20]
 8001538:	2108      	movs	r1, #8
 800153a:	438a      	bics	r2, r1
 800153c:	751a      	strb	r2, [r3, #20]
				ADC_State = WAITING;
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <measHandler+0x1e4>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_IT(&hadc);
			}
		}
	}
}
 8001544:	e06e      	b.n	8001624 <measHandler+0x1d8>
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001546:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <measHandler+0x1e4>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	1e5c      	subs	r4, r3, #1
 800154c:	4b39      	ldr	r3, [pc, #228]	; (8001634 <measHandler+0x1e8>)
 800154e:	0018      	movs	r0, r3
 8001550:	f001 f962 	bl	8002818 <HAL_ADC_GetValue>
 8001554:	0001      	movs	r1, r0
 8001556:	4b38      	ldr	r3, [pc, #224]	; (8001638 <measHandler+0x1ec>)
 8001558:	00a2      	lsls	r2, r4, #2
 800155a:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <measHandler+0x1e4>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	3302      	adds	r3, #2
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b32      	ldr	r3, [pc, #200]	; (8001630 <measHandler+0x1e4>)
 8001566:	701a      	strb	r2, [r3, #0]
				switch(ADC_State)
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <measHandler+0x1e4>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b10      	cmp	r3, #16
 800156e:	d854      	bhi.n	800161a <measHandler+0x1ce>
 8001570:	009a      	lsls	r2, r3, #2
 8001572:	4b32      	ldr	r3, [pc, #200]	; (800163c <measHandler+0x1f0>)
 8001574:	18d3      	adds	r3, r2, r3
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	469f      	mov	pc, r3
					changeChannel(ADC_CHSELR_CHSEL7);
 800157a:	2080      	movs	r0, #128	; 0x80
 800157c:	f000 f860 	bl	8001640 <changeChannel>
					break;
 8001580:	e04c      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL10);
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	0018      	movs	r0, r3
 8001588:	f000 f85a 	bl	8001640 <changeChannel>
					break;
 800158c:	e046      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL14);
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	01db      	lsls	r3, r3, #7
 8001592:	0018      	movs	r0, r3
 8001594:	f000 f854 	bl	8001640 <changeChannel>
					break;
 8001598:	e040      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL12);
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	015b      	lsls	r3, r3, #5
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 f84e 	bl	8001640 <changeChannel>
					break;
 80015a4:	e03a      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL5);
 80015a6:	2020      	movs	r0, #32
 80015a8:	f000 f84a 	bl	8001640 <changeChannel>
					break;
 80015ac:	e036      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL11);
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 f844 	bl	8001640 <changeChannel>
					break;
 80015b8:	e030      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL9);
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	0018      	movs	r0, r3
 80015c0:	f000 f83e 	bl	8001640 <changeChannel>
					break;
 80015c4:	e02a      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL2);
 80015c6:	2004      	movs	r0, #4
 80015c8:	f000 f83a 	bl	8001640 <changeChannel>
					break;
 80015cc:	e026      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL15);
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	0018      	movs	r0, r3
 80015d4:	f000 f834 	bl	8001640 <changeChannel>
					break;
 80015d8:	e020      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL0);
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 f830 	bl	8001640 <changeChannel>
					break;
 80015e0:	e01c      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL8);
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	0018      	movs	r0, r3
 80015e8:	f000 f82a 	bl	8001640 <changeChannel>
					break;
 80015ec:	e016      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL1);
 80015ee:	2002      	movs	r0, #2
 80015f0:	f000 f826 	bl	8001640 <changeChannel>
					break;
 80015f4:	e012      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL6);
 80015f6:	2040      	movs	r0, #64	; 0x40
 80015f8:	f000 f822 	bl	8001640 <changeChannel>
					break;
 80015fc:	e00e      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL4);
 80015fe:	2010      	movs	r0, #16
 8001600:	f000 f81e 	bl	8001640 <changeChannel>
					break;
 8001604:	e00a      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL13);
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	0018      	movs	r0, r3
 800160c:	f000 f818 	bl	8001640 <changeChannel>
					break;
 8001610:	e004      	b.n	800161c <measHandler+0x1d0>
					changeChannel(ADC_CHSELR_CHSEL3);
 8001612:	2008      	movs	r0, #8
 8001614:	f000 f814 	bl	8001640 <changeChannel>
					break;
 8001618:	e000      	b.n	800161c <measHandler+0x1d0>
					break;
 800161a:	46c0      	nop			; (mov r8, r8)
				HAL_ADC_Start_IT(&hadc);
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <measHandler+0x1e8>)
 800161e:	0018      	movs	r0, r3
 8001620:	f001 f83e 	bl	80026a0 <HAL_ADC_Start_IT>
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	bdb0      	pop	{r4, r5, r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	20000620 	.word	0x20000620
 8001630:	20000254 	.word	0x20000254
 8001634:	2000063c 	.word	0x2000063c
 8001638:	200001fc 	.word	0x200001fc
 800163c:	0800d09c 	.word	0x0800d09c

08001640 <changeChannel>:

//_____Změna lanálu ADC_____//
static void changeChannel(unsigned int channel)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	//ADC_CHSELR_CHSEL0
	//ADC_CFGR1_CHSELRMOD is reset
	ADC1->CHSELR = channel;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <changeChannel+0x18>)
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	40012400 	.word	0x40012400

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	e7fe      	b.n	8001664 <Error_Handler+0x8>

08001666 <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 800166e:	2018      	movs	r0, #24
 8001670:	f00b f84c 	bl	800c70c <malloc>
 8001674:	0003      	movs	r3, r0
 8001676:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <createBuffer+0x1c>
	{
		return NULL;
 800167e:	2300      	movs	r3, #0
 8001680:	e022      	b.n	80016c8 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	0018      	movs	r0, r3
 8001686:	f00b f841 	bl	800c70c <malloc>
 800168a:	0003      	movs	r3, r0
 800168c:	001a      	movs	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <createBuffer+0x40>
	{
		free(buffer);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	0018      	movs	r0, r3
 800169e:	f00b f83f 	bl	800c720 <free>
		return NULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e010      	b.n	80016c8 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	1e5a      	subs	r2, r3, #1
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2201      	movs	r2, #1
 80016c4:	751a      	strb	r2, [r3, #20]

	return buffer;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b004      	add	sp, #16
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	000a      	movs	r2, r1
 80016da:	1cfb      	adds	r3, r7, #3
 80016dc:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7d1b      	ldrb	r3, [r3, #20]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d101      	bne.n	80016ea <push+0x1a>
		return BUFFER_FULL;
 80016e6:	2302      	movs	r3, #2
 80016e8:	e025      	b.n	8001736 <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	0019      	movs	r1, r3
 80016f6:	0010      	movs	r0, r2
 80016f8:	f7fe fe88 	bl	800040c <__aeabi_idivmod>
 80016fc:	000b      	movs	r3, r1
 80016fe:	001a      	movs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	18d3      	adds	r3, r2, r3
 8001718:	1cfa      	adds	r2, r7, #3
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	db01      	blt.n	800172e <push+0x5e>
 800172a:	2202      	movs	r2, #2
 800172c:	e000      	b.n	8001730 <push+0x60>
 800172e:	2200      	movs	r2, #0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	0018      	movs	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}

0800173e <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	18cb      	adds	r3, r1, r3
 8001756:	429a      	cmp	r2, r3
 8001758:	da01      	bge.n	800175e <pushStr+0x20>
		return BUFFER_FULL;
 800175a:	2302      	movs	r3, #2
 800175c:	e013      	b.n	8001786 <pushStr+0x48>

	for(int i = 0; i < len; i++)
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e00b      	b.n	800177c <pushStr+0x3e>
	{
		push(buffer, str[i]);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	18d3      	adds	r3, r2, r3
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	0011      	movs	r1, r2
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff ffad 	bl	80016d0 <push>
	for(int i = 0; i < len; i++)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbef      	blt.n	8001764 <pushStr+0x26>
	}

	return BUFFER_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b006      	add	sp, #24
 800178c:	bd80      	pop	{r7, pc}

0800178e <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7d1b      	ldrb	r3, [r3, #20]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <pop+0x16>
		return BUFFER_EMPTY;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e023      	b.n	80017ec <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	18d3      	adds	r3, r2, r3
 80017ae:	781a      	ldrb	r2, [r3, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	0019      	movs	r1, r3
 80017c0:	0010      	movs	r0, r2
 80017c2:	f7fe fe23 	bl	800040c <__aeabi_idivmod>
 80017c6:	000b      	movs	r3, r1
 80017c8:	001a      	movs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	1e5a      	subs	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	1e5a      	subs	r2, r3, #1
 80017de:	4313      	orrs	r3, r2
 80017e0:	0fdb      	lsrs	r3, r3, #31
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	001a      	movs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <getCount+0x7c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 8001800:	1dfb      	adds	r3, r7, #7
 8001802:	222a      	movs	r2, #42	; 0x2a
 8001804:	701a      	strb	r2, [r3, #0]
		answer = 0;
 8001806:	1dbb      	adds	r3, r7, #6
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 800180c:	1dba      	adds	r2, r7, #6
 800180e:	1df9      	adds	r1, r7, #7
 8001810:	4818      	ldr	r0, [pc, #96]	; (8001874 <getCount+0x80>)
 8001812:	2364      	movs	r3, #100	; 0x64
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	f004 fcea 	bl	80061f0 <HAL_SPI_TransmitReceive>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d001      	beq.n	8001824 <getCount+0x30>
			return 0;
 8001820:	2300      	movs	r3, #0
 8001822:	e021      	b.n	8001868 <getCount+0x74>
		regCount++;
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <getCount+0x7c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <getCount+0x7c>)
 800182e:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8001830:	2001      	movs	r0, #1
 8001832:	f000 fdd1 	bl	80023d8 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <getCount+0x7c>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b63      	cmp	r3, #99	; 0x63
 800183c:	d906      	bls.n	800184c <getCount+0x58>
		{
			flags.conErr = 1;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <getCount+0x84>)
 8001840:	7e1a      	ldrb	r2, [r3, #24]
 8001842:	2104      	movs	r1, #4
 8001844:	430a      	orrs	r2, r1
 8001846:	761a      	strb	r2, [r3, #24]
			return 0;
 8001848:	2300      	movs	r3, #0
 800184a:	e00d      	b.n	8001868 <getCount+0x74>
		}
	}
	while(answer != question);
 800184c:	1dbb      	adds	r3, r7, #6
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d1d3      	bne.n	8001800 <getCount+0xc>

	regCount--;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <getCount+0x7c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <getCount+0x7c>)
 8001862:	701a      	strb	r2, [r3, #0]

	return regCount;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <getCount+0x7c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000681 	.word	0x20000681
 8001874:	20000574 	.word	0x20000574
 8001878:	20000620 	.word	0x20000620

0800187c <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
	REG_CLR_ACTIVE;
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	019b      	lsls	r3, r3, #6
 8001886:	482f      	ldr	r0, [pc, #188]	; (8001944 <regInit+0xc8>)
 8001888:	2200      	movs	r2, #0
 800188a:	0019      	movs	r1, r3
 800188c:	f001 fdd9 	bl	8003442 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001890:	2005      	movs	r0, #5
 8001892:	f000 fda1 	bl	80023d8 <HAL_Delay>
	REG_CLR_INACTIVE;
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	019b      	lsls	r3, r3, #6
 800189a:	482a      	ldr	r0, [pc, #168]	; (8001944 <regInit+0xc8>)
 800189c:	2201      	movs	r2, #1
 800189e:	0019      	movs	r1, r3
 80018a0:	f001 fdcf 	bl	8003442 <HAL_GPIO_WritePin>

	REG_DISABLE;
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	4826      	ldr	r0, [pc, #152]	; (8001944 <regInit+0xc8>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	0019      	movs	r1, r3
 80018ae:	f001 fdc8 	bl	8003442 <HAL_GPIO_WritePin>

	if(getCount() == 0)
 80018b2:	f7ff ff9f 	bl	80017f4 <getCount>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d101      	bne.n	80018be <regInit+0x42>
	{
		return REG_CON_ERR;	//Connection error
 80018ba:	2301      	movs	r3, #1
 80018bc:	e03e      	b.n	800193c <regInit+0xc0>
	}

	regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <regInit+0xcc>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	0018      	movs	r0, r3
 80018c4:	f00a ff22 	bl	800c70c <malloc>
 80018c8:	0003      	movs	r3, r0
 80018ca:	001a      	movs	r2, r3
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <regInit+0xd0>)
 80018ce:	601a      	str	r2, [r3, #0]
	if(regValues == NULL)
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <regInit+0xd0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d104      	bne.n	80018e2 <regInit+0x66>
	{
		regState = REG_ERR;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <regInit+0xd4>)
 80018da:	2202      	movs	r2, #2
 80018dc:	701a      	strb	r2, [r3, #0]
		return REG_ERR;
 80018de:	2302      	movs	r3, #2
 80018e0:	e02c      	b.n	800193c <regInit+0xc0>
	}

	for(int i = 0; i < regCount; i++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	e008      	b.n	80018fa <regInit+0x7e>
	{
		regValues[i] = 0;
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <regInit+0xd0>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	18d3      	adds	r3, r2, r3
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3301      	adds	r3, #1
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <regInit+0xcc>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001a      	movs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4293      	cmp	r3, r2
 8001904:	dbf0      	blt.n	80018e8 <regInit+0x6c>
	}

	sendData();
 8001906:	f000 f827 	bl	8001958 <sendData>

	REG_ENABLE;
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	480d      	ldr	r0, [pc, #52]	; (8001944 <regInit+0xc8>)
 8001910:	2200      	movs	r2, #0
 8001912:	0019      	movs	r1, r3
 8001914:	f001 fd95 	bl	8003442 <HAL_GPIO_WritePin>

	regState = (HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)? REG_OK : REG_ERR;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <regInit+0xd0>)
 800191a:	6819      	ldr	r1, [r3, #0]
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <regInit+0xcc>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b29a      	uxth	r2, r3
 8001922:	480c      	ldr	r0, [pc, #48]	; (8001954 <regInit+0xd8>)
 8001924:	2364      	movs	r3, #100	; 0x64
 8001926:	f004 fb0b 	bl	8005f40 <HAL_SPI_Transmit>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d101      	bne.n	8001932 <regInit+0xb6>
 800192e:	2200      	movs	r2, #0
 8001930:	e000      	b.n	8001934 <regInit+0xb8>
 8001932:	2202      	movs	r2, #2
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <regInit+0xd4>)
 8001936:	701a      	strb	r2, [r3, #0]
	return regState;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <regInit+0xd4>)
 800193a:	781b      	ldrb	r3, [r3, #0]
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}
 8001944:	48000400 	.word	0x48000400
 8001948:	20000681 	.word	0x20000681
 800194c:	2000067c 	.word	0x2000067c
 8001950:	20000680 	.word	0x20000680
 8001954:	20000574 	.word	0x20000574

08001958 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <sendData+0x54>)
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <sendData+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b29a      	uxth	r2, r3
 8001966:	4813      	ldr	r0, [pc, #76]	; (80019b4 <sendData+0x5c>)
 8001968:	2364      	movs	r3, #100	; 0x64
 800196a:	f004 fae9 	bl	8005f40 <HAL_SPI_Transmit>
 800196e:	1e03      	subs	r3, r0, #0
 8001970:	d114      	bne.n	800199c <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	01db      	lsls	r3, r3, #7
 8001976:	4810      	ldr	r0, [pc, #64]	; (80019b8 <sendData+0x60>)
 8001978:	2201      	movs	r2, #1
 800197a:	0019      	movs	r1, r3
 800197c:	f001 fd61 	bl	8003442 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f000 fd29 	bl	80023d8 <HAL_Delay>
		REG_RCLK_LOW;
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	01db      	lsls	r3, r3, #7
 800198a:	480b      	ldr	r0, [pc, #44]	; (80019b8 <sendData+0x60>)
 800198c:	2200      	movs	r2, #0
 800198e:	0019      	movs	r1, r3
 8001990:	f001 fd57 	bl	8003442 <HAL_GPIO_WritePin>

		regState = REG_OK;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <sendData+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e002      	b.n	80019a2 <sendData+0x4a>
	}
	else
	{
		regState = REG_ERR;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <sendData+0x64>)
 800199e:	2202      	movs	r2, #2
 80019a0:	701a      	strb	r2, [r3, #0]
	}

	return regState;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <sendData+0x64>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000067c 	.word	0x2000067c
 80019b0:	20000681 	.word	0x20000681
 80019b4:	20000574 	.word	0x20000574
 80019b8:	48000400 	.word	0x48000400
 80019bc:	20000680 	.word	0x20000680

080019c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_MspInit+0x44>)
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_MspInit+0x44>)
 80019cc:	2101      	movs	r1, #1
 80019ce:	430a      	orrs	r2, r1
 80019d0:	619a      	str	r2, [r3, #24]
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_MspInit+0x44>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2201      	movs	r2, #1
 80019d8:	4013      	ands	r3, r2
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_MspInit+0x44>)
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_MspInit+0x44>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	0549      	lsls	r1, r1, #21
 80019e8:	430a      	orrs	r2, r1
 80019ea:	61da      	str	r2, [r3, #28]
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_MspInit+0x44>)
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	055b      	lsls	r3, r3, #21
 80019f4:	4013      	ands	r3, r2
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b002      	add	sp, #8
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b08d      	sub	sp, #52	; 0x34
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	241c      	movs	r4, #28
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	0018      	movs	r0, r3
 8001a16:	2314      	movs	r3, #20
 8001a18:	001a      	movs	r2, r3
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	f00a fe8a 	bl	800c734 <memset>
  if(hadc->Instance==ADC1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a3a      	ldr	r2, [pc, #232]	; (8001b10 <HAL_ADC_MspInit+0x108>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d16d      	bne.n	8001b06 <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a2a:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	0089      	lsls	r1, r1, #2
 8001a34:	430a      	orrs	r2, r1
 8001a36:	619a      	str	r2, [r3, #24]
 8001a38:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a3a:	699a      	ldr	r2, [r3, #24]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	0309      	lsls	r1, r1, #12
 8001a50:	430a      	orrs	r2, r1
 8001a52:	615a      	str	r2, [r3, #20]
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	031b      	lsls	r3, r3, #12
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	0289      	lsls	r1, r1, #10
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	029b      	lsls	r3, r3, #10
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	02c9      	lsls	r1, r1, #11
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_ADC_MspInit+0x10c>)
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	02db      	lsls	r3, r3, #11
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	223f      	movs	r2, #63	; 0x3f
 8001a9e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aac:	193b      	adds	r3, r7, r4
 8001aae:	4a1a      	ldr	r2, [pc, #104]	; (8001b18 <HAL_ADC_MspInit+0x110>)
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	0010      	movs	r0, r2
 8001ab4:	f001 fb30 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ab8:	193b      	adds	r3, r7, r4
 8001aba:	22ff      	movs	r2, #255	; 0xff
 8001abc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	193a      	adds	r2, r7, r4
 8001acc:	2390      	movs	r3, #144	; 0x90
 8001ace:	05db      	lsls	r3, r3, #23
 8001ad0:	0011      	movs	r1, r2
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f001 fb20 	bl	8003118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	2203      	movs	r2, #3
 8001adc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aea:	193b      	adds	r3, r7, r4
 8001aec:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <HAL_ADC_MspInit+0x114>)
 8001aee:	0019      	movs	r1, r3
 8001af0:	0010      	movs	r0, r2
 8001af2:	f001 fb11 	bl	8003118 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	200c      	movs	r0, #12
 8001afc:	f001 fa5c 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8001b00:	200c      	movs	r0, #12
 8001b02:	f001 fa6e 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b00d      	add	sp, #52	; 0x34
 8001b0c:	bd90      	pop	{r4, r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	40012400 	.word	0x40012400
 8001b14:	40021000 	.word	0x40021000
 8001b18:	48000800 	.word	0x48000800
 8001b1c:	48000400 	.word	0x48000400

08001b20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b08b      	sub	sp, #44	; 0x2c
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	2414      	movs	r4, #20
 8001b2a:	193b      	adds	r3, r7, r4
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	2314      	movs	r3, #20
 8001b30:	001a      	movs	r2, r3
 8001b32:	2100      	movs	r1, #0
 8001b34:	f00a fdfe 	bl	800c734 <memset>
  if(hspi->Instance==SPI1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <HAL_SPI_MspInit+0x90>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d131      	bne.n	8001ba6 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_SPI_MspInit+0x94>)
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_SPI_MspInit+0x94>)
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	0149      	lsls	r1, r1, #5
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	619a      	str	r2, [r3, #24]
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_SPI_MspInit+0x94>)
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_SPI_MspInit+0x94>)
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_SPI_MspInit+0x94>)
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	02c9      	lsls	r1, r1, #11
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	615a      	str	r2, [r3, #20]
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_SPI_MspInit+0x94>)
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	02db      	lsls	r3, r3, #11
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b7a:	0021      	movs	r1, r4
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	2238      	movs	r2, #56	; 0x38
 8001b80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	2202      	movs	r2, #2
 8001b86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b8e:	187b      	adds	r3, r7, r1
 8001b90:	2203      	movs	r2, #3
 8001b92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_SPI_MspInit+0x98>)
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	0010      	movs	r0, r2
 8001ba2:	f001 fab9 	bl	8003118 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b00b      	add	sp, #44	; 0x2c
 8001bac:	bd90      	pop	{r4, r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	40013000 	.word	0x40013000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	48000400 	.word	0x48000400

08001bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <HAL_TIM_Base_MspInit+0x48>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d115      	bne.n	8001bfa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_TIM_Base_MspInit+0x4c>)
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_TIM_Base_MspInit+0x4c>)
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	0049      	lsls	r1, r1, #1
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	61da      	str	r2, [r3, #28]
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_TIM_Base_MspInit+0x4c>)
 8001bde:	69da      	ldr	r2, [r3, #28]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	2013      	movs	r0, #19
 8001bf0:	f001 f9e2 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001bf4:	2013      	movs	r0, #19
 8001bf6:	f001 f9f4 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b004      	add	sp, #16
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	40002000 	.word	0x40002000
 8001c08:	40021000 	.word	0x40021000

08001c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	2414      	movs	r4, #20
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	0018      	movs	r0, r3
 8001c1a:	2314      	movs	r3, #20
 8001c1c:	001a      	movs	r2, r3
 8001c1e:	2100      	movs	r1, #0
 8001c20:	f00a fd88 	bl	800c734 <memset>
  if(huart->Instance==USART3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a20      	ldr	r2, [pc, #128]	; (8001cac <HAL_UART_MspInit+0xa0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d13a      	bne.n	8001ca4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_UART_MspInit+0xa4>)
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <HAL_UART_MspInit+0xa4>)
 8001c34:	2180      	movs	r1, #128	; 0x80
 8001c36:	02c9      	lsls	r1, r1, #11
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	61da      	str	r2, [r3, #28]
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <HAL_UART_MspInit+0xa4>)
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	02db      	lsls	r3, r3, #11
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_UART_MspInit+0xa4>)
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_UART_MspInit+0xa4>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0309      	lsls	r1, r1, #12
 8001c54:	430a      	orrs	r2, r1
 8001c56:	615a      	str	r2, [r3, #20]
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_UART_MspInit+0xa4>)
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	031b      	lsls	r3, r3, #12
 8001c60:	4013      	ands	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	22c0      	movs	r2, #192	; 0xc0
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	0021      	movs	r1, r4
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	2202      	movs	r2, #2
 8001c74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	2201      	movs	r2, #1
 8001c86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_UART_MspInit+0xa8>)
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	0010      	movs	r0, r2
 8001c90:	f001 fa42 	bl	8003118 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	201d      	movs	r0, #29
 8001c9a:	f001 f98d 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001c9e:	201d      	movs	r0, #29
 8001ca0:	f001 f99f 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b00b      	add	sp, #44	; 0x2c
 8001caa:	bd90      	pop	{r4, r7, pc}
 8001cac:	40004800 	.word	0x40004800
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	48000800 	.word	0x48000800

08001cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <NMI_Handler+0x4>

08001cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <HardFault_Handler+0x4>

08001cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cc8:	46c0      	nop			; (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cdc:	f000 fb60 	bl	80023a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f001 fbe0 	bl	80034b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f001 fbdb 	bl	80034b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <ADC1_COMP_IRQHandler+0x14>)
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 fd90 	bl	8002830 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	2000063c 	.word	0x2000063c

08001d1c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <TIM14_IRQHandler+0x14>)
 8001d22:	0018      	movs	r0, r3
 8001d24:	f004 fea6 	bl	8006a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	200005d8 	.word	0x200005d8

08001d34 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <USART3_4_IRQHandler+0x14>)
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f005 fb08 	bl	8007350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	200004f0 	.word	0x200004f0

08001d4c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <USB_IRQHandler+0x14>)
 8001d52:	0018      	movs	r0, r3
 8001d54:	f001 fd00 	bl	8003758 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	2000132c 	.word	0x2000132c

08001d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <_sbrk+0x5c>)
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <_sbrk+0x60>)
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <_sbrk+0x64>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <_sbrk+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	18d3      	adds	r3, r2, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d207      	bcs.n	8001da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d94:	f00a fc90 	bl	800c6b8 <__errno>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	425b      	negs	r3, r3
 8001da2:	e009      	b.n	8001db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	18d2      	adds	r2, r2, r3
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <_sbrk+0x64>)
 8001db4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b006      	add	sp, #24
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20004000 	.word	0x20004000
 8001dc4:	00000400 	.word	0x00000400
 8001dc8:	20000258 	.word	0x20000258
 8001dcc:	20001630 	.word	0x20001630

08001dd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	return testPhase;
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <currentPhase+0x10>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	2000025c 	.word	0x2000025c

08001df0 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b092      	sub	sp, #72	; 0x48
 8001df4:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 8001df6:	4bd9      	ldr	r3, [pc, #868]	; (800215c <testHandler+0x36c>)
 8001df8:	7e1a      	ldrb	r2, [r3, #24]
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8001e00:	4bd6      	ldr	r3, [pc, #856]	; (800215c <testHandler+0x36c>)
 8001e02:	7b1b      	ldrb	r3, [r3, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d02f      	beq.n	8001e6e <testHandler+0x7e>
	{
		if(testPhase == WAITING)
 8001e0e:	4bd4      	ldr	r3, [pc, #848]	; (8002160 <testHandler+0x370>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d126      	bne.n	8001e64 <testHandler+0x74>
		{
			if(flags.conErr)
 8001e16:	4bd1      	ldr	r3, [pc, #836]	; (800215c <testHandler+0x36c>)
 8001e18:	7e1b      	ldrb	r3, [r3, #24]
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01c      	beq.n	8001e5e <testHandler+0x6e>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8001e24:	211c      	movs	r1, #28
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	4ace      	ldr	r2, [pc, #824]	; (8002164 <testHandler+0x374>)
 8001e2a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001e2c:	c331      	stmia	r3!, {r0, r4, r5}
 8001e2e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001e30:	c331      	stmia	r3!, {r0, r4, r5}
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8001e36:	4bcc      	ldr	r3, [pc, #816]	; (8002168 <testHandler+0x378>)
 8001e38:	681c      	ldr	r4, [r3, #0]
 8001e3a:	000d      	movs	r5, r1
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f7fe f962 	bl	8000108 <strlen>
 8001e44:	0003      	movs	r3, r0
 8001e46:	001a      	movs	r2, r3
 8001e48:	197b      	adds	r3, r7, r5
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	0020      	movs	r0, r4
 8001e4e:	f7ff fc76 	bl	800173e <pushStr>
				flags.instructions.startRequest = 0;
 8001e52:	4bc2      	ldr	r3, [pc, #776]	; (800215c <testHandler+0x36c>)
 8001e54:	7b1a      	ldrb	r2, [r3, #12]
 8001e56:	2101      	movs	r1, #1
 8001e58:	438a      	bics	r2, r1
 8001e5a:	731a      	strb	r2, [r3, #12]
 8001e5c:	e007      	b.n	8001e6e <testHandler+0x7e>
			}
			else
			{
				startTest();
 8001e5e:	f000 f995 	bl	800218c <startTest>
 8001e62:	e004      	b.n	8001e6e <testHandler+0x7e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8001e64:	4bbd      	ldr	r3, [pc, #756]	; (800215c <testHandler+0x36c>)
 8001e66:	7e1a      	ldrb	r2, [r3, #24]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	761a      	strb	r2, [r3, #24]
		}
	}
	if(flags.instructions.stopRequest)
 8001e6e:	4bbb      	ldr	r3, [pc, #748]	; (800215c <testHandler+0x36c>)
 8001e70:	7b1b      	ldrb	r3, [r3, #12]
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <testHandler+0x90>
	{
		stopTest();
 8001e7c:	f000 f9e8 	bl	8002250 <stopTest>
	}

	switch(testPhase)
 8001e80:	4bb7      	ldr	r3, [pc, #732]	; (8002160 <testHandler+0x370>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b06      	cmp	r3, #6
 8001e86:	d900      	bls.n	8001e8a <testHandler+0x9a>
 8001e88:	e17b      	b.n	8002182 <testHandler+0x392>
 8001e8a:	009a      	lsls	r2, r3, #2
 8001e8c:	4bb7      	ldr	r3, [pc, #732]	; (800216c <testHandler+0x37c>)
 8001e8e:	18d3      	adds	r3, r2, r3
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8001e94:	4bb1      	ldr	r3, [pc, #708]	; (800215c <testHandler+0x36c>)
 8001e96:	7e1a      	ldrb	r2, [r3, #24]
 8001e98:	2102      	movs	r1, #2
 8001e9a:	438a      	bics	r2, r1
 8001e9c:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 8001e9e:	e170      	b.n	8002182 <testHandler+0x392>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8001ea0:	4bae      	ldr	r3, [pc, #696]	; (800215c <testHandler+0x36c>)
 8001ea2:	7d1b      	ldrb	r3, [r3, #20]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <testHandler+0xcc>
		{
			testPhase++;
 8001eae:	4bac      	ldr	r3, [pc, #688]	; (8002160 <testHandler+0x370>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4baa      	ldr	r3, [pc, #680]	; (8002160 <testHandler+0x370>)
 8001eb8:	701a      	strb	r2, [r3, #0]
		}
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
		{
			flags.meas.measRequest = 1;
		}
		break;
 8001eba:	e146      	b.n	800214a <testHandler+0x35a>
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
 8001ebc:	4bac      	ldr	r3, [pc, #688]	; (8002170 <testHandler+0x380>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d000      	beq.n	8001ec6 <testHandler+0xd6>
 8001ec4:	e141      	b.n	800214a <testHandler+0x35a>
			flags.meas.measRequest = 1;
 8001ec6:	4ba5      	ldr	r3, [pc, #660]	; (800215c <testHandler+0x36c>)
 8001ec8:	7d1a      	ldrb	r2, [r3, #20]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	751a      	strb	r2, [r3, #20]
		break;
 8001ed0:	e13b      	b.n	800214a <testHandler+0x35a>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8001ed2:	4ba8      	ldr	r3, [pc, #672]	; (8002174 <testHandler+0x384>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f001 fab2 	bl	8003442 <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8001ede:	4ba5      	ldr	r3, [pc, #660]	; (8002174 <testHandler+0x384>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2140      	movs	r1, #64	; 0x40
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f001 faac 	bl	8003442 <HAL_GPIO_WritePin>

		testPhase++;
 8001eea:	4b9d      	ldr	r3, [pc, #628]	; (8002160 <testHandler+0x370>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b9b      	ldr	r3, [pc, #620]	; (8002160 <testHandler+0x370>)
 8001ef4:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8001ef6:	4b99      	ldr	r3, [pc, #612]	; (800215c <testHandler+0x36c>)
 8001ef8:	7e1a      	ldrb	r2, [r3, #24]
 8001efa:	2102      	movs	r1, #2
 8001efc:	430a      	orrs	r2, r1
 8001efe:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//blikání druhé progress led
 8001f00:	4b9d      	ldr	r3, [pc, #628]	; (8002178 <testHandler+0x388>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	4b9c      	ldr	r3, [pc, #624]	; (8002178 <testHandler+0x388>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2120      	movs	r1, #32
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]
		sendData();
 8001f12:	f7ff fd21 	bl	8001958 <sendData>

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8001f16:	2301      	movs	r3, #1
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f1a:	e007      	b.n	8001f2c <testHandler+0x13c>
		{
			sysTime[i] = 0;
 8001f1c:	4b94      	ldr	r3, [pc, #592]	; (8002170 <testHandler+0x380>)
 8001f1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	2100      	movs	r1, #0
 8001f24:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8001f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f28:	3301      	adds	r3, #1
 8001f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	ddf4      	ble.n	8001f1c <testHandler+0x12c>
		}
		break;
 8001f32:	e126      	b.n	8002182 <testHandler+0x392>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001f34:	4b89      	ldr	r3, [pc, #548]	; (800215c <testHandler+0x36c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d026      	beq.n	8001f90 <testHandler+0x1a0>
		{
			char time[9] = {0};
 8001f42:	2510      	movs	r5, #16
 8001f44:	197b      	adds	r3, r7, r5
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	2205      	movs	r2, #5
 8001f4e:	2100      	movs	r1, #0
 8001f50:	0018      	movs	r0, r3
 8001f52:	f00a fbef 	bl	800c734 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001f56:	4b86      	ldr	r3, [pc, #536]	; (8002170 <testHandler+0x380>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	223c      	movs	r2, #60	; 0x3c
 8001f5c:	1ad2      	subs	r2, r2, r3
 8001f5e:	4b84      	ldr	r3, [pc, #528]	; (8002170 <testHandler+0x380>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	213c      	movs	r1, #60	; 0x3c
 8001f64:	1acc      	subs	r4, r1, r3
 8001f66:	4b82      	ldr	r3, [pc, #520]	; (8002170 <testHandler+0x380>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	1acb      	subs	r3, r1, r3
 8001f6e:	4983      	ldr	r1, [pc, #524]	; (800217c <testHandler+0x38c>)
 8001f70:	1978      	adds	r0, r7, r5
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	0023      	movs	r3, r4
 8001f76:	f00a fc9f 	bl	800c8b8 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8001f7a:	4b7f      	ldr	r3, [pc, #508]	; (8002178 <testHandler+0x388>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	4b7d      	ldr	r3, [pc, #500]	; (8002178 <testHandler+0x388>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2110      	movs	r1, #16
 8001f86:	404a      	eors	r2, r1
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	701a      	strb	r2, [r3, #0]
			sendData();
 8001f8c:	f7ff fce4 	bl	8001958 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 8001f90:	4b77      	ldr	r3, [pc, #476]	; (8002170 <testHandler+0x380>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00b      	beq.n	8001fb0 <testHandler+0x1c0>
 8001f98:	4b70      	ldr	r3, [pc, #448]	; (800215c <testHandler+0x36c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <testHandler+0x1c0>
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	; (800215c <testHandler+0x36c>)
 8001fa8:	7d1a      	ldrb	r2, [r3, #20]
 8001faa:	2101      	movs	r1, #1
 8001fac:	430a      	orrs	r2, r1
 8001fae:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 10)	//___Po deseti minutách je měření u konce___//
 8001fb0:	4b6f      	ldr	r3, [pc, #444]	; (8002170 <testHandler+0x380>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	dc00      	bgt.n	8001fba <testHandler+0x1ca>
 8001fb8:	e0c9      	b.n	800214e <testHandler+0x35e>
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
#endif
		{
			testPhase++;
 8001fba:	4b69      	ldr	r3, [pc, #420]	; (8002160 <testHandler+0x370>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b67      	ldr	r3, [pc, #412]	; (8002160 <testHandler+0x370>)
 8001fc4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001fc6:	e0c2      	b.n	800214e <testHandler+0x35e>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8001fc8:	4b64      	ldr	r3, [pc, #400]	; (800215c <testHandler+0x36c>)
 8001fca:	7d1b      	ldrb	r3, [r3, #20]
 8001fcc:	2208      	movs	r2, #8
 8001fce:	4013      	ands	r3, r2
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d000      	beq.n	8001fd8 <testHandler+0x1e8>
 8001fd6:	e0bc      	b.n	8002152 <testHandler+0x362>
		{
			flags.ui.notice = 1;
 8001fd8:	4b60      	ldr	r3, [pc, #384]	; (800215c <testHandler+0x36c>)
 8001fda:	7c1a      	ldrb	r2, [r3, #16]
 8001fdc:	2108      	movs	r1, #8
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8001fe2:	4b5e      	ldr	r3, [pc, #376]	; (800215c <testHandler+0x36c>)
 8001fe4:	7e1a      	ldrb	r2, [r3, #24]
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8001fec:	4b5c      	ldr	r3, [pc, #368]	; (8002160 <testHandler+0x370>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <testHandler+0x370>)
 8001ff6:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 8001ff8:	4b5e      	ldr	r3, [pc, #376]	; (8002174 <testHandler+0x384>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0018      	movs	r0, r3
 8002000:	f001 fa1f 	bl	8003442 <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 8002004:	4b5b      	ldr	r3, [pc, #364]	; (8002174 <testHandler+0x384>)
 8002006:	2200      	movs	r2, #0
 8002008:	2140      	movs	r1, #64	; 0x40
 800200a:	0018      	movs	r0, r3
 800200c:	f001 fa19 	bl	8003442 <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8002010:	4b59      	ldr	r3, [pc, #356]	; (8002178 <testHandler+0x388>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	4b58      	ldr	r3, [pc, #352]	; (8002178 <testHandler+0x388>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2110      	movs	r1, #16
 800201c:	430a      	orrs	r2, r1
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 8002022:	4b55      	ldr	r3, [pc, #340]	; (8002178 <testHandler+0x388>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <testHandler+0x388>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
			sendData();
 8002034:	f7ff fc90 	bl	8001958 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8002038:	2301      	movs	r3, #1
 800203a:	63bb      	str	r3, [r7, #56]	; 0x38
 800203c:	e007      	b.n	800204e <testHandler+0x25e>
			{
				sysTime[i] = 0;
 800203e:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <testHandler+0x380>)
 8002040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	2100      	movs	r1, #0
 8002046:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8002048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204a:	3301      	adds	r3, #1
 800204c:	63bb      	str	r3, [r7, #56]	; 0x38
 800204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002050:	2b03      	cmp	r3, #3
 8002052:	ddf4      	ble.n	800203e <testHandler+0x24e>
			}
		}
		break;
 8002054:	e07d      	b.n	8002152 <testHandler+0x362>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <testHandler+0x36c>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2202      	movs	r2, #2
 800205c:	4013      	ands	r3, r2
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d025      	beq.n	80020b0 <testHandler+0x2c0>
		{
			char time[9] = {0};
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	3304      	adds	r3, #4
 800206c:	2205      	movs	r2, #5
 800206e:	2100      	movs	r1, #0
 8002070:	0018      	movs	r0, r3
 8002072:	f00a fb5f 	bl	800c734 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <testHandler+0x380>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	223c      	movs	r2, #60	; 0x3c
 800207c:	1ad2      	subs	r2, r2, r3
 800207e:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <testHandler+0x380>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	213c      	movs	r1, #60	; 0x3c
 8002084:	1acc      	subs	r4, r1, r3
 8002086:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <testHandler+0x380>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2103      	movs	r1, #3
 800208c:	1acb      	subs	r3, r1, r3
 800208e:	493b      	ldr	r1, [pc, #236]	; (800217c <testHandler+0x38c>)
 8002090:	1d38      	adds	r0, r7, #4
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	0023      	movs	r3, r4
 8002096:	f00a fc0f 	bl	800c8b8 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <testHandler+0x388>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	781a      	ldrb	r2, [r3, #0]
 80020a0:	4b35      	ldr	r3, [pc, #212]	; (8002178 <testHandler+0x388>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2108      	movs	r1, #8
 80020a6:	404a      	eors	r2, r1
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
			sendData();
 80020ac:	f7ff fc54 	bl	8001958 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 80020b0:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <testHandler+0x380>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00b      	beq.n	80020d0 <testHandler+0x2e0>
 80020b8:	4b28      	ldr	r3, [pc, #160]	; (800215c <testHandler+0x36c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <testHandler+0x2e0>
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
#endif
		{
			flags.meas.measRequest = 1;
 80020c6:	4b25      	ldr	r3, [pc, #148]	; (800215c <testHandler+0x36c>)
 80020c8:	7d1a      	ldrb	r2, [r3, #20]
 80020ca:	2101      	movs	r1, #1
 80020cc:	430a      	orrs	r2, r1
 80020ce:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po třech minutách je měření u konce___//
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <testHandler+0x380>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	dd3e      	ble.n	8002156 <testHandler+0x366>
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
#endif
		{
			testPhase++;
 80020d8:	4b21      	ldr	r3, [pc, #132]	; (8002160 <testHandler+0x370>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <testHandler+0x370>)
 80020e2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80020e4:	e037      	b.n	8002156 <testHandler+0x366>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <testHandler+0x36c>)
 80020e8:	7d1b      	ldrb	r3, [r3, #20]
 80020ea:	2208      	movs	r2, #8
 80020ec:	4013      	ands	r3, r2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d145      	bne.n	8002180 <testHandler+0x390>
		{
			flags.ui.done = 1;
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <testHandler+0x36c>)
 80020f6:	7c1a      	ldrb	r2, [r3, #16]
 80020f8:	2110      	movs	r1, #16
 80020fa:	430a      	orrs	r2, r1
 80020fc:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <testHandler+0x36c>)
 8002100:	7e1a      	ldrb	r2, [r3, #24]
 8002102:	2102      	movs	r1, #2
 8002104:	430a      	orrs	r2, r1
 8002106:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <testHandler+0x388>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <testHandler+0x388>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2108      	movs	r1, #8
 8002114:	430a      	orrs	r2, r1
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <testHandler+0x388>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <testHandler+0x388>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2102      	movs	r1, #2
 8002126:	438a      	bics	r2, r1
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <testHandler+0x388>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <testHandler+0x388>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2101      	movs	r1, #1
 8002138:	438a      	bics	r2, r1
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]
			sendData();
 800213e:	f7ff fc0b 	bl	8001958 <sendData>

			testPhase = WAITING;
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <testHandler+0x370>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002148:	e01a      	b.n	8002180 <testHandler+0x390>
		break;
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	e019      	b.n	8002182 <testHandler+0x392>
		break;
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	e017      	b.n	8002182 <testHandler+0x392>
		break;
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	e015      	b.n	8002182 <testHandler+0x392>
		break;
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	e013      	b.n	8002182 <testHandler+0x392>
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	20000620 	.word	0x20000620
 8002160:	2000025c 	.word	0x2000025c
 8002164:	0800cfe4 	.word	0x0800cfe4
 8002168:	20000490 	.word	0x20000490
 800216c:	0800d0f8 	.word	0x0800d0f8
 8002170:	2000023c 	.word	0x2000023c
 8002174:	48000800 	.word	0x48000800
 8002178:	2000068c 	.word	0x2000068c
 800217c:	0800cfd8 	.word	0x0800cfd8
		break;
 8002180:	46c0      	nop			; (mov r8, r8)

	}
}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	b010      	add	sp, #64	; 0x40
 8002188:	bdb0      	pop	{r4, r5, r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)

0800218c <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 8002192:	4b28      	ldr	r3, [pc, #160]	; (8002234 <startTest+0xa8>)
 8002194:	7c1a      	ldrb	r2, [r3, #16]
 8002196:	2101      	movs	r1, #1
 8002198:	430a      	orrs	r2, r1
 800219a:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <startTest+0xac>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 80021a2:	4b26      	ldr	r3, [pc, #152]	; (800223c <startTest+0xb0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 80021a8:	4b22      	ldr	r3, [pc, #136]	; (8002234 <startTest+0xa8>)
 80021aa:	7e1a      	ldrb	r2, [r3, #24]
 80021ac:	2102      	movs	r1, #2
 80021ae:	430a      	orrs	r2, r1
 80021b0:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <startTest+0xb4>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b23      	ldr	r3, [pc, #140]	; (8002244 <startTest+0xb8>)
 80021b8:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	e008      	b.n	80021d2 <startTest+0x46>
	{
		regValues[i] = 0;
 80021c0:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <startTest+0xb4>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	18d3      	adds	r3, r2, r3
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3301      	adds	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <startTest+0xbc>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	001a      	movs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4293      	cmp	r3, r2
 80021dc:	dbf0      	blt.n	80021c0 <startTest+0x34>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <startTest+0xb8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <startTest+0xb8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2120      	movs	r1, #32
 80021ea:	430a      	orrs	r2, r1
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <startTest+0xb8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <startTest+0xb8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2102      	movs	r1, #2
 80021fc:	430a      	orrs	r2, r1
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 8002202:	f7ff fba9 	bl	8001958 <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 8002206:	2301      	movs	r3, #1
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	e007      	b.n	800221c <startTest+0x90>
	{
		sysTime[i] = 0;
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <startTest+0xc0>)
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	2100      	movs	r1, #0
 8002214:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2b03      	cmp	r3, #3
 8002220:	ddf4      	ble.n	800220c <startTest+0x80>
	}

	flags.instructions.startRequest = 0;
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <startTest+0xa8>)
 8002224:	7b1a      	ldrb	r2, [r3, #12]
 8002226:	2101      	movs	r1, #1
 8002228:	438a      	bics	r2, r1
 800222a:	731a      	strb	r2, [r3, #12]
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000620 	.word	0x20000620
 8002238:	2000025c 	.word	0x2000025c
 800223c:	20000260 	.word	0x20000260
 8002240:	2000067c 	.word	0x2000067c
 8002244:	2000068c 	.word	0x2000068c
 8002248:	20000681 	.word	0x20000681
 800224c:	2000023c 	.word	0x2000023c

08002250 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <stopTest+0x5c>)
 8002256:	7c1a      	ldrb	r2, [r3, #16]
 8002258:	2102      	movs	r1, #2
 800225a:	430a      	orrs	r2, r1
 800225c:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <stopTest+0x60>)
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <stopTest+0x64>)
 8002266:	2200      	movs	r2, #0
 8002268:	2180      	movs	r1, #128	; 0x80
 800226a:	0018      	movs	r0, r3
 800226c:	f001 f8e9 	bl	8003442 <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <stopTest+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	2140      	movs	r1, #64	; 0x40
 8002276:	0018      	movs	r0, r3
 8002278:	f001 f8e3 	bl	8003442 <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <stopTest+0x68>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <stopTest+0x68>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	781a      	ldrb	r2, [r3, #0]
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <stopTest+0x68>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2104      	movs	r1, #4
 8002290:	430a      	orrs	r2, r1
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]
	sendData();
 8002296:	f7ff fb5f 	bl	8001958 <sendData>

	flags.instructions.stopRequest = 0;
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <stopTest+0x5c>)
 800229c:	7b1a      	ldrb	r2, [r3, #12]
 800229e:	2102      	movs	r1, #2
 80022a0:	438a      	bics	r2, r1
 80022a2:	731a      	strb	r2, [r3, #12]
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	20000620 	.word	0x20000620
 80022b0:	2000025c 	.word	0x2000025c
 80022b4:	48000800 	.word	0x48000800
 80022b8:	2000068c 	.word	0x2000068c

080022bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c0:	480d      	ldr	r0, [pc, #52]	; (80022f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80022c2:	490e      	ldr	r1, [pc, #56]	; (80022fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <LoopForever+0xe>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c8:	e002      	b.n	80022d0 <LoopCopyDataInit>

080022ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ce:	3304      	adds	r3, #4

080022d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d4:	d3f9      	bcc.n	80022ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022d8:	4c0b      	ldr	r4, [pc, #44]	; (8002308 <LoopForever+0x16>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022dc:	e001      	b.n	80022e2 <LoopFillZerobss>

080022de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e0:	3204      	adds	r2, #4

080022e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e4:	d3fb      	bcc.n	80022de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80022e6:	f7ff fd73 	bl	8001dd0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80022ea:	f00a f9eb 	bl	800c6c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ee:	f7fe fad3 	bl	8000898 <main>

080022f2 <LoopForever>:

LoopForever:
    b LoopForever
 80022f2:	e7fe      	b.n	80022f2 <LoopForever>
  ldr   r0, =_estack
 80022f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80022f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022fc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002300:	0800d240 	.word	0x0800d240
  ldr r2, =_sbss
 8002304:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002308:	20001630 	.word	0x20001630

0800230c <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800230c:	e7fe      	b.n	800230c <CEC_CAN_IRQHandler>
	...

08002310 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <HAL_Init+0x24>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_Init+0x24>)
 800231a:	2110      	movs	r1, #16
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002320:	2003      	movs	r0, #3
 8002322:	f000 f809 	bl	8002338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002326:	f7ff fb4b 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	40022000 	.word	0x40022000

08002338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_InitTick+0x5c>)
 8002342:	681c      	ldr	r4, [r3, #0]
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_InitTick+0x60>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	0019      	movs	r1, r3
 800234a:	23fa      	movs	r3, #250	; 0xfa
 800234c:	0098      	lsls	r0, r3, #2
 800234e:	f7fd feed 	bl	800012c <__udivsi3>
 8002352:	0003      	movs	r3, r0
 8002354:	0019      	movs	r1, r3
 8002356:	0020      	movs	r0, r4
 8002358:	f7fd fee8 	bl	800012c <__udivsi3>
 800235c:	0003      	movs	r3, r0
 800235e:	0018      	movs	r0, r3
 8002360:	f000 fe4f 	bl	8003002 <HAL_SYSTICK_Config>
 8002364:	1e03      	subs	r3, r0, #0
 8002366:	d001      	beq.n	800236c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e00f      	b.n	800238c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d80b      	bhi.n	800238a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	2301      	movs	r3, #1
 8002376:	425b      	negs	r3, r3
 8002378:	2200      	movs	r2, #0
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fe1c 	bl	8002fb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_InitTick+0x64>)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b003      	add	sp, #12
 8002392:	bd90      	pop	{r4, r7, pc}
 8002394:	20000000 	.word	0x20000000
 8002398:	20000008 	.word	0x20000008
 800239c:	20000004 	.word	0x20000004

080023a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_IncTick+0x1c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	001a      	movs	r2, r3
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_IncTick+0x20>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	18d2      	adds	r2, r2, r3
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_IncTick+0x20>)
 80023b2:	601a      	str	r2, [r3, #0]
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	20000008 	.word	0x20000008
 80023c0:	20000690 	.word	0x20000690

080023c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  return uwTick;
 80023c8:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <HAL_GetTick+0x10>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	20000690 	.word	0x20000690

080023d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff fff0 	bl	80023c4 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3301      	adds	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_Delay+0x44>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	001a      	movs	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	189b      	adds	r3, r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	f7ff ffe0 	bl	80023c4 <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	429a      	cmp	r2, r3
 800240e:	d8f7      	bhi.n	8002400 <HAL_Delay+0x28>
  {
  }
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	b004      	add	sp, #16
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	20000008 	.word	0x20000008

08002420 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002428:	230f      	movs	r3, #15
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e125      	b.n	800268a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10a      	bne.n	800245c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2234      	movs	r2, #52	; 0x34
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	0018      	movs	r0, r3
 8002458:	f7ff fad6 	bl	8001a08 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	2210      	movs	r2, #16
 8002462:	4013      	ands	r3, r2
 8002464:	d000      	beq.n	8002468 <HAL_ADC_Init+0x48>
 8002466:	e103      	b.n	8002670 <HAL_ADC_Init+0x250>
 8002468:	230f      	movs	r3, #15
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d000      	beq.n	8002474 <HAL_ADC_Init+0x54>
 8002472:	e0fd      	b.n	8002670 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2204      	movs	r2, #4
 800247c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800247e:	d000      	beq.n	8002482 <HAL_ADC_Init+0x62>
 8002480:	e0f6      	b.n	8002670 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	4a83      	ldr	r2, [pc, #524]	; (8002694 <HAL_ADC_Init+0x274>)
 8002488:	4013      	ands	r3, r2
 800248a:	2202      	movs	r2, #2
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2203      	movs	r2, #3
 800249a:	4013      	ands	r3, r2
 800249c:	2b01      	cmp	r3, #1
 800249e:	d112      	bne.n	80024c6 <HAL_ADC_Init+0xa6>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2201      	movs	r2, #1
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d009      	beq.n	80024c2 <HAL_ADC_Init+0xa2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	401a      	ands	r2, r3
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	429a      	cmp	r2, r3
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_Init+0xa6>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_ADC_Init+0xa8>
 80024c6:	2300      	movs	r3, #0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d116      	bne.n	80024fa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2218      	movs	r2, #24
 80024d4:	4393      	bics	r3, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	0899      	lsrs	r1, r3, #2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4964      	ldr	r1, [pc, #400]	; (8002698 <HAL_ADC_Init+0x278>)
 8002506:	400a      	ands	r2, r1
 8002508:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7e1b      	ldrb	r3, [r3, #24]
 800250e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7e5b      	ldrb	r3, [r3, #25]
 8002514:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002516:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7e9b      	ldrb	r3, [r3, #26]
 800251c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800251e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	2b01      	cmp	r3, #1
 8002526:	d002      	beq.n	800252e <HAL_ADC_Init+0x10e>
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	015b      	lsls	r3, r3, #5
 800252c:	e000      	b.n	8002530 <HAL_ADC_Init+0x110>
 800252e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002530:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002536:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d101      	bne.n	8002544 <HAL_ADC_Init+0x124>
 8002540:	2304      	movs	r3, #4
 8002542:	e000      	b.n	8002546 <HAL_ADC_Init+0x126>
 8002544:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002546:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2124      	movs	r1, #36	; 0x24
 800254c:	5c5b      	ldrb	r3, [r3, r1]
 800254e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002550:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	4313      	orrs	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7edb      	ldrb	r3, [r3, #27]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d115      	bne.n	800258c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7e9b      	ldrb	r3, [r3, #26]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2280      	movs	r2, #128	; 0x80
 800256c:	0252      	lsls	r2, r2, #9
 800256e:	4313      	orrs	r3, r2
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	e00b      	b.n	800258c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	2220      	movs	r2, #32
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	2201      	movs	r2, #1
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69da      	ldr	r2, [r3, #28]
 8002590:	23c2      	movs	r3, #194	; 0xc2
 8002592:	33ff      	adds	r3, #255	; 0xff
 8002594:	429a      	cmp	r2, r3
 8002596:	d007      	beq.n	80025a8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80025a0:	4313      	orrs	r3, r2
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68d9      	ldr	r1, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	055b      	lsls	r3, r3, #21
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d01b      	beq.n	80025fc <HAL_ADC_Init+0x1dc>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d017      	beq.n	80025fc <HAL_ADC_Init+0x1dc>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d013      	beq.n	80025fc <HAL_ADC_Init+0x1dc>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d00f      	beq.n	80025fc <HAL_ADC_Init+0x1dc>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d00b      	beq.n	80025fc <HAL_ADC_Init+0x1dc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	d007      	beq.n	80025fc <HAL_ADC_Init+0x1dc>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b06      	cmp	r3, #6
 80025f2:	d003      	beq.n	80025fc <HAL_ADC_Init+0x1dc>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	2b07      	cmp	r3, #7
 80025fa:	d112      	bne.n	8002622 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2107      	movs	r1, #7
 8002608:	438a      	bics	r2, r1
 800260a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6959      	ldr	r1, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	2207      	movs	r2, #7
 8002618:	401a      	ands	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a1c      	ldr	r2, [pc, #112]	; (800269c <HAL_ADC_Init+0x27c>)
 800262a:	4013      	ands	r3, r2
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	429a      	cmp	r2, r3
 8002630:	d10b      	bne.n	800264a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	2203      	movs	r2, #3
 800263e:	4393      	bics	r3, r2
 8002640:	2201      	movs	r2, #1
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002648:	e01c      	b.n	8002684 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	2212      	movs	r2, #18
 8002650:	4393      	bics	r3, r2
 8002652:	2210      	movs	r2, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	2201      	movs	r2, #1
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002666:	230f      	movs	r3, #15
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800266e:	e009      	b.n	8002684 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	2210      	movs	r2, #16
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800267c:	230f      	movs	r3, #15
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002684:	230f      	movs	r3, #15
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	781b      	ldrb	r3, [r3, #0]
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b004      	add	sp, #16
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	fffffefd 	.word	0xfffffefd
 8002698:	fffe0219 	.word	0xfffe0219
 800269c:	833fffe7 	.word	0x833fffe7

080026a0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a8:	230f      	movs	r3, #15
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2204      	movs	r2, #4
 80026b8:	4013      	ands	r3, r2
 80026ba:	d156      	bne.n	800276a <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2234      	movs	r2, #52	; 0x34
 80026c0:	5c9b      	ldrb	r3, [r3, r2]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_Start_IT+0x2a>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e056      	b.n	8002778 <HAL_ADC_Start_IT+0xd8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2234      	movs	r2, #52	; 0x34
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7e5b      	ldrb	r3, [r3, #25]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d007      	beq.n	80026ea <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80026da:	230f      	movs	r3, #15
 80026dc:	18fc      	adds	r4, r7, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 fa7b 	bl	8002bdc <ADC_Enable>
 80026e6:	0003      	movs	r3, r0
 80026e8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026ea:	230f      	movs	r3, #15
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d13e      	bne.n	8002772 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	4a21      	ldr	r2, [pc, #132]	; (8002780 <HAL_ADC_Start_IT+0xe0>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	0052      	lsls	r2, r2, #1
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2234      	movs	r2, #52	; 0x34
 8002710:	2100      	movs	r1, #0
 8002712:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	221c      	movs	r2, #28
 800271a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d110      	bne.n	8002746 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2104      	movs	r1, #4
 8002730:	438a      	bics	r2, r1
 8002732:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2118      	movs	r1, #24
 8002740:	430a      	orrs	r2, r1
 8002742:	605a      	str	r2, [r3, #4]
          break;
 8002744:	e008      	b.n	8002758 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	211c      	movs	r1, #28
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]
          break;
 8002756:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2104      	movs	r1, #4
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	e003      	b.n	8002772 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800276a:	230f      	movs	r3, #15
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	2202      	movs	r2, #2
 8002770:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8002772:	230f      	movs	r3, #15
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	781b      	ldrb	r3, [r3, #0]
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	b005      	add	sp, #20
 800277e:	bd90      	pop	{r4, r7, pc}
 8002780:	fffff0fe 	.word	0xfffff0fe

08002784 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278c:	230f      	movs	r3, #15
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2234      	movs	r2, #52	; 0x34
 8002798:	5c9b      	ldrb	r3, [r3, r2]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_Stop_IT+0x1e>
 800279e:	2302      	movs	r3, #2
 80027a0:	e033      	b.n	800280a <HAL_ADC_Stop_IT+0x86>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2234      	movs	r2, #52	; 0x34
 80027a6:	2101      	movs	r1, #1
 80027a8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80027aa:	250f      	movs	r5, #15
 80027ac:	197c      	adds	r4, r7, r5
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 fb08 	bl	8002dc6 <ADC_ConversionStop>
 80027b6:	0003      	movs	r3, r0
 80027b8:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027ba:	0028      	movs	r0, r5
 80027bc:	183b      	adds	r3, r7, r0
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11b      	bne.n	80027fc <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	211c      	movs	r1, #28
 80027d0:	438a      	bics	r2, r1
 80027d2:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027d4:	0005      	movs	r5, r0
 80027d6:	183c      	adds	r4, r7, r0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 fa82 	bl	8002ce4 <ADC_Disable>
 80027e0:	0003      	movs	r3, r0
 80027e2:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027e4:	197b      	adds	r3, r7, r5
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d107      	bne.n	80027fc <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	4a08      	ldr	r2, [pc, #32]	; (8002814 <HAL_ADC_Stop_IT+0x90>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	2201      	movs	r2, #1
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2234      	movs	r2, #52	; 0x34
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002804:	230f      	movs	r3, #15
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b004      	add	sp, #16
 8002810:	bdb0      	pop	{r4, r5, r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	fffffefe 	.word	0xfffffefe

08002818 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b002      	add	sp, #8
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2204      	movs	r2, #4
 8002840:	4013      	ands	r3, r2
 8002842:	2b04      	cmp	r3, #4
 8002844:	d106      	bne.n	8002854 <HAL_ADC_IRQHandler+0x24>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2204      	movs	r2, #4
 800284e:	4013      	ands	r3, r2
 8002850:	2b04      	cmp	r3, #4
 8002852:	d00d      	beq.n	8002870 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2208      	movs	r2, #8
 800285c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800285e:	2b08      	cmp	r3, #8
 8002860:	d14f      	bne.n	8002902 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2208      	movs	r2, #8
 800286a:	4013      	ands	r3, r2
 800286c:	2b08      	cmp	r3, #8
 800286e:	d148      	bne.n	8002902 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	2210      	movs	r2, #16
 8002876:	4013      	ands	r3, r2
 8002878:	d106      	bne.n	8002888 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	2280      	movs	r2, #128	; 0x80
 8002880:	0092      	lsls	r2, r2, #2
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	23c0      	movs	r3, #192	; 0xc0
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	4013      	ands	r3, r2
 8002894:	d12d      	bne.n	80028f2 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800289a:	2b00      	cmp	r3, #0
 800289c:	d129      	bne.n	80028f2 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2208      	movs	r2, #8
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d122      	bne.n	80028f2 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2204      	movs	r2, #4
 80028b4:	4013      	ands	r3, r2
 80028b6:	d110      	bne.n	80028da <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	210c      	movs	r1, #12
 80028c4:	438a      	bics	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	4a33      	ldr	r2, [pc, #204]	; (800299c <HAL_ADC_IRQHandler+0x16c>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	2201      	movs	r2, #1
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	639a      	str	r2, [r3, #56]	; 0x38
 80028d8:	e00b      	b.n	80028f2 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	2220      	movs	r2, #32
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	2201      	movs	r2, #1
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7fd ffbb 	bl	8000870 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	220c      	movs	r2, #12
 8002900:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2280      	movs	r2, #128	; 0x80
 800290a:	4013      	ands	r3, r2
 800290c:	2b80      	cmp	r3, #128	; 0x80
 800290e:	d115      	bne.n	800293c <HAL_ADC_IRQHandler+0x10c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	4013      	ands	r3, r2
 800291a:	2b80      	cmp	r3, #128	; 0x80
 800291c:	d10e      	bne.n	800293c <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	0252      	lsls	r2, r2, #9
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	0018      	movs	r0, r3
 8002930:	f000 f836 	bl	80029a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2210      	movs	r2, #16
 8002944:	4013      	ands	r3, r2
 8002946:	2b10      	cmp	r3, #16
 8002948:	d123      	bne.n	8002992 <HAL_ADC_IRQHandler+0x162>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2210      	movs	r2, #16
 8002952:	4013      	ands	r3, r2
 8002954:	2b10      	cmp	r3, #16
 8002956:	d11c      	bne.n	8002992 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	2b01      	cmp	r3, #1
 800295e:	d006      	beq.n	800296e <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800296a:	2b01      	cmp	r3, #1
 800296c:	d10d      	bne.n	800298a <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	2202      	movs	r2, #2
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2210      	movs	r2, #16
 8002980:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 f813 	bl	80029b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2210      	movs	r2, #16
 8002990:	601a      	str	r2, [r3, #0]
  }

}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	b002      	add	sp, #8
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	fffffefe 	.word	0xfffffefe

080029a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b002      	add	sp, #8
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ca:	230f      	movs	r3, #15
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029da:	2380      	movs	r3, #128	; 0x80
 80029dc:	055b      	lsls	r3, r3, #21
 80029de:	429a      	cmp	r2, r3
 80029e0:	d011      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x46>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d00d      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x46>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d009      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x46>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d005      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x46>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d001      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x46>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2234      	movs	r2, #52	; 0x34
 8002a0a:	5c9b      	ldrb	r3, [r3, r2]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x54>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e0d0      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x1f6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2234      	movs	r2, #52	; 0x34
 8002a18:	2101      	movs	r1, #1
 8002a1a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2204      	movs	r2, #4
 8002a24:	4013      	ands	r3, r2
 8002a26:	d000      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x6a>
 8002a28:	e0b4      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4a64      	ldr	r2, [pc, #400]	; (8002bc0 <HAL_ADC_ConfigChannel+0x200>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d100      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x76>
 8002a34:	e082      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2201      	movs	r2, #1
 8002a42:	409a      	lsls	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	055b      	lsls	r3, r3, #21
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d037      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x108>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d033      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x108>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d02f      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x108>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d02b      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x108>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d027      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x108>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d023      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x108>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	2b06      	cmp	r3, #6
 8002a86:	d01f      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x108>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	2b07      	cmp	r3, #7
 8002a8e:	d01b      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2107      	movs	r1, #7
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d012      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2107      	movs	r1, #7
 8002aae:	438a      	bics	r2, r1
 8002ab0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6959      	ldr	r1, [r3, #20]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2207      	movs	r2, #7
 8002abe:	401a      	ands	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d007      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x120>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b11      	cmp	r3, #17
 8002ad6:	d003      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x120>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b12      	cmp	r3, #18
 8002ade:	d163      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002ae0:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <HAL_ADC_ConfigChannel+0x204>)
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d009      	beq.n	8002b00 <HAL_ADC_ConfigChannel+0x140>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b11      	cmp	r3, #17
 8002af2:	d102      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x13a>
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	03db      	lsls	r3, r3, #15
 8002af8:	e004      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x144>
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	045b      	lsls	r3, r3, #17
 8002afe:	e001      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x144>
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	4a2f      	ldr	r2, [pc, #188]	; (8002bc4 <HAL_ADC_ConfigChannel+0x204>)
 8002b06:	430b      	orrs	r3, r1
 8002b08:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d14a      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b12:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_ADC_ConfigChannel+0x208>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	492d      	ldr	r1, [pc, #180]	; (8002bcc <HAL_ADC_ConfigChannel+0x20c>)
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7fd fb07 	bl	800012c <__udivsi3>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	001a      	movs	r2, r3
 8002b22:	0013      	movs	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	189b      	adds	r3, r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f9      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x16e>
 8002b3a:	e035      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2101      	movs	r1, #1
 8002b48:	4099      	lsls	r1, r3
 8002b4a:	000b      	movs	r3, r1
 8002b4c:	43d9      	mvns	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	400a      	ands	r2, r1
 8002b54:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d007      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x1ae>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b11      	cmp	r3, #17
 8002b64:	d003      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x1ae>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b12      	cmp	r3, #18
 8002b6c:	d11c      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_ADC_ConfigChannel+0x204>)
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d007      	beq.n	8002b8a <HAL_ADC_ConfigChannel+0x1ca>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b11      	cmp	r3, #17
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x1c6>
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_ADC_ConfigChannel+0x210>)
 8002b84:	e002      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x1cc>
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_ADC_ConfigChannel+0x214>)
 8002b88:	e000      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x1cc>
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_ADC_ConfigChannel+0x218>)
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <HAL_ADC_ConfigChannel+0x204>)
 8002b8e:	400b      	ands	r3, r1
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e009      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	2220      	movs	r2, #32
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002ba0:	230f      	movs	r3, #15
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2234      	movs	r2, #52	; 0x34
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002bb0:	230f      	movs	r3, #15
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	781b      	ldrb	r3, [r3, #0]
}
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b004      	add	sp, #16
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	00001001 	.word	0x00001001
 8002bc4:	40012708 	.word	0x40012708
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	000f4240 	.word	0x000f4240
 8002bd0:	ffbfffff 	.word	0xffbfffff
 8002bd4:	feffffff 	.word	0xfeffffff
 8002bd8:	ff7fffff 	.word	0xff7fffff

08002bdc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d112      	bne.n	8002c20 <ADC_Enable+0x44>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2201      	movs	r2, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d009      	beq.n	8002c1c <ADC_Enable+0x40>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	401a      	ands	r2, r3
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d101      	bne.n	8002c20 <ADC_Enable+0x44>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <ADC_Enable+0x46>
 8002c20:	2300      	movs	r3, #0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d152      	bne.n	8002ccc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a2a      	ldr	r2, [pc, #168]	; (8002cd8 <ADC_Enable+0xfc>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d00d      	beq.n	8002c4e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	2210      	movs	r2, #16
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	2201      	movs	r2, #1
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e03f      	b.n	8002cce <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c5e:	4b1f      	ldr	r3, [pc, #124]	; (8002cdc <ADC_Enable+0x100>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	491f      	ldr	r1, [pc, #124]	; (8002ce0 <ADC_Enable+0x104>)
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7fd fa61 	bl	800012c <__udivsi3>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c6e:	e002      	b.n	8002c76 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f9      	bne.n	8002c70 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c7c:	f7ff fba2 	bl	80023c4 <HAL_GetTick>
 8002c80:	0003      	movs	r3, r0
 8002c82:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c84:	e01b      	b.n	8002cbe <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c86:	f7ff fb9d 	bl	80023c4 <HAL_GetTick>
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d914      	bls.n	8002cbe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d00d      	beq.n	8002cbe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e007      	b.n	8002cce <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d1dc      	bne.n	8002c86 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b004      	add	sp, #16
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	80000017 	.word	0x80000017
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	000f4240 	.word	0x000f4240

08002ce4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d112      	bne.n	8002d24 <ADC_Disable+0x40>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2201      	movs	r2, #1
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d009      	beq.n	8002d20 <ADC_Disable+0x3c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	401a      	ands	r2, r3
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d101      	bne.n	8002d24 <ADC_Disable+0x40>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <ADC_Disable+0x42>
 8002d24:	2300      	movs	r3, #0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d048      	beq.n	8002dbc <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2205      	movs	r2, #5
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d110      	bne.n	8002d5a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2102      	movs	r1, #2
 8002d44:	430a      	orrs	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d50:	f7ff fb38 	bl	80023c4 <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d58:	e029      	b.n	8002dae <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	2210      	movs	r2, #16
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e023      	b.n	8002dbe <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d76:	f7ff fb25 	bl	80023c4 <HAL_GetTick>
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d914      	bls.n	8002dae <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d10d      	bne.n	8002dae <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	2210      	movs	r2, #16
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da2:	2201      	movs	r2, #1
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e007      	b.n	8002dbe <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2201      	movs	r2, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d0dc      	beq.n	8002d76 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d03a      	beq.n	8002e54 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2204      	movs	r2, #4
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d10d      	bne.n	8002e08 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2202      	movs	r2, #2
 8002df4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002df6:	d107      	bne.n	8002e08 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2110      	movs	r1, #16
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e08:	f7ff fadc 	bl	80023c4 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002e10:	e01a      	b.n	8002e48 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e12:	f7ff fad7 	bl	80023c4 <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d913      	bls.n	8002e48 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2204      	movs	r2, #4
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d00d      	beq.n	8002e48 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	2210      	movs	r2, #16
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e006      	b.n	8002e56 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	4013      	ands	r3, r2
 8002e52:	d1de      	bne.n	8002e12 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	0018      	movs	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b004      	add	sp, #16
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	0002      	movs	r2, r0
 8002e68:	1dfb      	adds	r3, r7, #7
 8002e6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	1dfb      	adds	r3, r7, #7
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b7f      	cmp	r3, #127	; 0x7f
 8002e72:	d809      	bhi.n	8002e88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	001a      	movs	r2, r3
 8002e7a:	231f      	movs	r3, #31
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <__NVIC_EnableIRQ+0x30>)
 8002e80:	2101      	movs	r1, #1
 8002e82:	4091      	lsls	r1, r2
 8002e84:	000a      	movs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
  }
}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	1dfb      	adds	r3, r7, #7
 8002ea0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ea2:	1dfb      	adds	r3, r7, #7
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ea8:	d828      	bhi.n	8002efc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eaa:	4a2f      	ldr	r2, [pc, #188]	; (8002f68 <__NVIC_SetPriority+0xd4>)
 8002eac:	1dfb      	adds	r3, r7, #7
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	089b      	lsrs	r3, r3, #2
 8002eb4:	33c0      	adds	r3, #192	; 0xc0
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	589b      	ldr	r3, [r3, r2]
 8002eba:	1dfa      	adds	r2, r7, #7
 8002ebc:	7812      	ldrb	r2, [r2, #0]
 8002ebe:	0011      	movs	r1, r2
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	00d2      	lsls	r2, r2, #3
 8002ec6:	21ff      	movs	r1, #255	; 0xff
 8002ec8:	4091      	lsls	r1, r2
 8002eca:	000a      	movs	r2, r1
 8002ecc:	43d2      	mvns	r2, r2
 8002ece:	401a      	ands	r2, r3
 8002ed0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	22ff      	movs	r2, #255	; 0xff
 8002ed8:	401a      	ands	r2, r3
 8002eda:	1dfb      	adds	r3, r7, #7
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	4003      	ands	r3, r0
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ee8:	481f      	ldr	r0, [pc, #124]	; (8002f68 <__NVIC_SetPriority+0xd4>)
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	b25b      	sxtb	r3, r3
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	33c0      	adds	r3, #192	; 0xc0
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002efa:	e031      	b.n	8002f60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002efc:	4a1b      	ldr	r2, [pc, #108]	; (8002f6c <__NVIC_SetPriority+0xd8>)
 8002efe:	1dfb      	adds	r3, r7, #7
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	0019      	movs	r1, r3
 8002f04:	230f      	movs	r3, #15
 8002f06:	400b      	ands	r3, r1
 8002f08:	3b08      	subs	r3, #8
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	3306      	adds	r3, #6
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	18d3      	adds	r3, r2, r3
 8002f12:	3304      	adds	r3, #4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1dfa      	adds	r2, r7, #7
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	0011      	movs	r1, r2
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	400a      	ands	r2, r1
 8002f20:	00d2      	lsls	r2, r2, #3
 8002f22:	21ff      	movs	r1, #255	; 0xff
 8002f24:	4091      	lsls	r1, r2
 8002f26:	000a      	movs	r2, r1
 8002f28:	43d2      	mvns	r2, r2
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	019b      	lsls	r3, r3, #6
 8002f32:	22ff      	movs	r2, #255	; 0xff
 8002f34:	401a      	ands	r2, r3
 8002f36:	1dfb      	adds	r3, r7, #7
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	4003      	ands	r3, r0
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f44:	4809      	ldr	r0, [pc, #36]	; (8002f6c <__NVIC_SetPriority+0xd8>)
 8002f46:	1dfb      	adds	r3, r7, #7
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	001c      	movs	r4, r3
 8002f4c:	230f      	movs	r3, #15
 8002f4e:	4023      	ands	r3, r4
 8002f50:	3b08      	subs	r3, #8
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	430a      	orrs	r2, r1
 8002f56:	3306      	adds	r3, #6
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	18c3      	adds	r3, r0, r3
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	601a      	str	r2, [r3, #0]
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b003      	add	sp, #12
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	e000e100 	.word	0xe000e100
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1e5a      	subs	r2, r3, #1
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	045b      	lsls	r3, r3, #17
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d301      	bcc.n	8002f88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f84:	2301      	movs	r3, #1
 8002f86:	e010      	b.n	8002faa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <SysTick_Config+0x44>)
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	3a01      	subs	r2, #1
 8002f8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f90:	2301      	movs	r3, #1
 8002f92:	425b      	negs	r3, r3
 8002f94:	2103      	movs	r1, #3
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff ff7c 	bl	8002e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <SysTick_Config+0x44>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <SysTick_Config+0x44>)
 8002fa4:	2207      	movs	r2, #7
 8002fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	e000e010 	.word	0xe000e010

08002fb8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	210f      	movs	r1, #15
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	1c02      	adds	r2, r0, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	187b      	adds	r3, r7, r1
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b25b      	sxtb	r3, r3
 8002fd2:	0011      	movs	r1, r2
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff ff5d 	bl	8002e94 <__NVIC_SetPriority>
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	0002      	movs	r2, r0
 8002fea:	1dfb      	adds	r3, r7, #7
 8002fec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fee:	1dfb      	adds	r3, r7, #7
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	b25b      	sxtb	r3, r3
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7ff ff33 	bl	8002e60 <__NVIC_EnableIRQ>
}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b002      	add	sp, #8
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f7ff ffaf 	bl	8002f70 <SysTick_Config>
 8003012:	0003      	movs	r3, r0
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2221      	movs	r2, #33	; 0x21
 8003028:	5c9b      	ldrb	r3, [r3, r2]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d008      	beq.n	8003042 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2204      	movs	r2, #4
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e020      	b.n	8003084 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	210e      	movs	r1, #14
 800304e:	438a      	bics	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2101      	movs	r1, #1
 800305e:	438a      	bics	r2, r1
 8003060:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	2101      	movs	r1, #1
 800306c:	4091      	lsls	r1, r2
 800306e:	000a      	movs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2221      	movs	r2, #33	; 0x21
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	2100      	movs	r1, #0
 8003080:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	b002      	add	sp, #8
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	210f      	movs	r1, #15
 8003096:	187b      	adds	r3, r7, r1
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2221      	movs	r2, #33	; 0x21
 80030a0:	5c9b      	ldrb	r3, [r3, r2]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d006      	beq.n	80030b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2204      	movs	r2, #4
 80030ac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e028      	b.n	8003108 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	210e      	movs	r1, #14
 80030c2:	438a      	bics	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	438a      	bics	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	2101      	movs	r1, #1
 80030e0:	4091      	lsls	r1, r2
 80030e2:	000a      	movs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2221      	movs	r2, #33	; 0x21
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	2100      	movs	r1, #0
 80030f4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	0010      	movs	r0, r2
 8003106:	4798      	blx	r3
    } 
  }
  return status;
 8003108:	230f      	movs	r3, #15
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	781b      	ldrb	r3, [r3, #0]
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b004      	add	sp, #16
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003126:	e155      	b.n	80033d4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2101      	movs	r1, #1
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4091      	lsls	r1, r2
 8003132:	000a      	movs	r2, r1
 8003134:	4013      	ands	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d100      	bne.n	8003140 <HAL_GPIO_Init+0x28>
 800313e:	e146      	b.n	80033ce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2203      	movs	r2, #3
 8003146:	4013      	ands	r3, r2
 8003148:	2b01      	cmp	r3, #1
 800314a:	d005      	beq.n	8003158 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2203      	movs	r2, #3
 8003152:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003154:	2b02      	cmp	r3, #2
 8003156:	d130      	bne.n	80031ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	409a      	lsls	r2, r3
 8003166:	0013      	movs	r3, r2
 8003168:	43da      	mvns	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	409a      	lsls	r2, r3
 800317a:	0013      	movs	r3, r2
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800318e:	2201      	movs	r2, #1
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	409a      	lsls	r2, r3
 8003194:	0013      	movs	r3, r2
 8003196:	43da      	mvns	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	2201      	movs	r2, #1
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
 80031ac:	0013      	movs	r3, r2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2203      	movs	r2, #3
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d017      	beq.n	80031f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	2203      	movs	r2, #3
 80031d2:	409a      	lsls	r2, r3
 80031d4:	0013      	movs	r3, r2
 80031d6:	43da      	mvns	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	0013      	movs	r3, r2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2203      	movs	r2, #3
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d123      	bne.n	800324a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	08da      	lsrs	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3208      	adds	r2, #8
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	58d3      	ldr	r3, [r2, r3]
 800320e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2207      	movs	r2, #7
 8003214:	4013      	ands	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	220f      	movs	r2, #15
 800321a:	409a      	lsls	r2, r3
 800321c:	0013      	movs	r3, r2
 800321e:	43da      	mvns	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2107      	movs	r1, #7
 800322e:	400b      	ands	r3, r1
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	409a      	lsls	r2, r3
 8003234:	0013      	movs	r3, r2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	08da      	lsrs	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3208      	adds	r2, #8
 8003244:	0092      	lsls	r2, r2, #2
 8003246:	6939      	ldr	r1, [r7, #16]
 8003248:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2203      	movs	r2, #3
 8003256:	409a      	lsls	r2, r3
 8003258:	0013      	movs	r3, r2
 800325a:	43da      	mvns	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2203      	movs	r2, #3
 8003268:	401a      	ands	r2, r3
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	0013      	movs	r3, r2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	23c0      	movs	r3, #192	; 0xc0
 8003284:	029b      	lsls	r3, r3, #10
 8003286:	4013      	ands	r3, r2
 8003288:	d100      	bne.n	800328c <HAL_GPIO_Init+0x174>
 800328a:	e0a0      	b.n	80033ce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328c:	4b57      	ldr	r3, [pc, #348]	; (80033ec <HAL_GPIO_Init+0x2d4>)
 800328e:	699a      	ldr	r2, [r3, #24]
 8003290:	4b56      	ldr	r3, [pc, #344]	; (80033ec <HAL_GPIO_Init+0x2d4>)
 8003292:	2101      	movs	r1, #1
 8003294:	430a      	orrs	r2, r1
 8003296:	619a      	str	r2, [r3, #24]
 8003298:	4b54      	ldr	r3, [pc, #336]	; (80033ec <HAL_GPIO_Init+0x2d4>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2201      	movs	r2, #1
 800329e:	4013      	ands	r3, r2
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032a4:	4a52      	ldr	r2, [pc, #328]	; (80033f0 <HAL_GPIO_Init+0x2d8>)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	589b      	ldr	r3, [r3, r2]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2203      	movs	r2, #3
 80032b6:	4013      	ands	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	220f      	movs	r2, #15
 80032bc:	409a      	lsls	r2, r3
 80032be:	0013      	movs	r3, r2
 80032c0:	43da      	mvns	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	2390      	movs	r3, #144	; 0x90
 80032cc:	05db      	lsls	r3, r3, #23
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d019      	beq.n	8003306 <HAL_GPIO_Init+0x1ee>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a47      	ldr	r2, [pc, #284]	; (80033f4 <HAL_GPIO_Init+0x2dc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_GPIO_Init+0x1ea>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a46      	ldr	r2, [pc, #280]	; (80033f8 <HAL_GPIO_Init+0x2e0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00d      	beq.n	80032fe <HAL_GPIO_Init+0x1e6>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a45      	ldr	r2, [pc, #276]	; (80033fc <HAL_GPIO_Init+0x2e4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d007      	beq.n	80032fa <HAL_GPIO_Init+0x1e2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a44      	ldr	r2, [pc, #272]	; (8003400 <HAL_GPIO_Init+0x2e8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <HAL_GPIO_Init+0x1de>
 80032f2:	2304      	movs	r3, #4
 80032f4:	e008      	b.n	8003308 <HAL_GPIO_Init+0x1f0>
 80032f6:	2305      	movs	r3, #5
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x1f0>
 80032fa:	2303      	movs	r3, #3
 80032fc:	e004      	b.n	8003308 <HAL_GPIO_Init+0x1f0>
 80032fe:	2302      	movs	r3, #2
 8003300:	e002      	b.n	8003308 <HAL_GPIO_Init+0x1f0>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_GPIO_Init+0x1f0>
 8003306:	2300      	movs	r3, #0
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	2103      	movs	r1, #3
 800330c:	400a      	ands	r2, r1
 800330e:	0092      	lsls	r2, r2, #2
 8003310:	4093      	lsls	r3, r2
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003318:	4935      	ldr	r1, [pc, #212]	; (80033f0 <HAL_GPIO_Init+0x2d8>)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	3302      	adds	r3, #2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003326:	4b37      	ldr	r3, [pc, #220]	; (8003404 <HAL_GPIO_Init+0x2ec>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	43da      	mvns	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	025b      	lsls	r3, r3, #9
 800333e:	4013      	ands	r3, r2
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800334a:	4b2e      	ldr	r3, [pc, #184]	; (8003404 <HAL_GPIO_Init+0x2ec>)
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003350:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <HAL_GPIO_Init+0x2ec>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	43da      	mvns	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	029b      	lsls	r3, r3, #10
 8003368:	4013      	ands	r3, r2
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003374:	4b23      	ldr	r3, [pc, #140]	; (8003404 <HAL_GPIO_Init+0x2ec>)
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800337a:	4b22      	ldr	r3, [pc, #136]	; (8003404 <HAL_GPIO_Init+0x2ec>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	43da      	mvns	r2, r3
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	035b      	lsls	r3, r3, #13
 8003392:	4013      	ands	r3, r2
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800339e:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_GPIO_Init+0x2ec>)
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80033a4:	4b17      	ldr	r3, [pc, #92]	; (8003404 <HAL_GPIO_Init+0x2ec>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	43da      	mvns	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	039b      	lsls	r3, r3, #14
 80033bc:	4013      	ands	r3, r2
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_GPIO_Init+0x2ec>)
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	3301      	adds	r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	40da      	lsrs	r2, r3
 80033dc:	1e13      	subs	r3, r2, #0
 80033de:	d000      	beq.n	80033e2 <HAL_GPIO_Init+0x2ca>
 80033e0:	e6a2      	b.n	8003128 <HAL_GPIO_Init+0x10>
  } 
}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b006      	add	sp, #24
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40010000 	.word	0x40010000
 80033f4:	48000400 	.word	0x48000400
 80033f8:	48000800 	.word	0x48000800
 80033fc:	48000c00 	.word	0x48000c00
 8003400:	48001000 	.word	0x48001000
 8003404:	40010400 	.word	0x40010400

08003408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	000a      	movs	r2, r1
 8003412:	1cbb      	adds	r3, r7, #2
 8003414:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	1cba      	adds	r2, r7, #2
 800341c:	8812      	ldrh	r2, [r2, #0]
 800341e:	4013      	ands	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003422:	230f      	movs	r3, #15
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e003      	b.n	8003434 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800342c:	230f      	movs	r3, #15
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003434:	230f      	movs	r3, #15
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	781b      	ldrb	r3, [r3, #0]
  }
 800343a:	0018      	movs	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	b004      	add	sp, #16
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	0008      	movs	r0, r1
 800344c:	0011      	movs	r1, r2
 800344e:	1cbb      	adds	r3, r7, #2
 8003450:	1c02      	adds	r2, r0, #0
 8003452:	801a      	strh	r2, [r3, #0]
 8003454:	1c7b      	adds	r3, r7, #1
 8003456:	1c0a      	adds	r2, r1, #0
 8003458:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800345a:	1c7b      	adds	r3, r7, #1
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003462:	1cbb      	adds	r3, r7, #2
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800346a:	e003      	b.n	8003474 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800346c:	1cbb      	adds	r3, r7, #2
 800346e:	881a      	ldrh	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	000a      	movs	r2, r1
 8003486:	1cbb      	adds	r3, r7, #2
 8003488:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003490:	1cbb      	adds	r3, r7, #2
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4013      	ands	r3, r2
 8003498:	041a      	lsls	r2, r3, #16
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	43db      	mvns	r3, r3
 800349e:	1cb9      	adds	r1, r7, #2
 80034a0:	8809      	ldrh	r1, [r1, #0]
 80034a2:	400b      	ands	r3, r1
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	619a      	str	r2, [r3, #24]
}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b004      	add	sp, #16
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	0002      	movs	r2, r0
 80034bc:	1dbb      	adds	r3, r7, #6
 80034be:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	1dba      	adds	r2, r7, #6
 80034c6:	8812      	ldrh	r2, [r2, #0]
 80034c8:	4013      	ands	r3, r2
 80034ca:	d008      	beq.n	80034de <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80034ce:	1dba      	adds	r2, r7, #6
 80034d0:	8812      	ldrh	r2, [r2, #0]
 80034d2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034d4:	1dbb      	adds	r3, r7, #6
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	0018      	movs	r0, r3
 80034da:	f7fd f991 	bl	8000800 <HAL_GPIO_EXTI_Callback>
  }
}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b002      	add	sp, #8
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	40010400 	.word	0x40010400

080034ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ee:	b08b      	sub	sp, #44	; 0x2c
 80034f0:	af06      	add	r7, sp, #24
 80034f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0ff      	b.n	80036fe <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a81      	ldr	r2, [pc, #516]	; (8003708 <HAL_PCD_Init+0x21c>)
 8003502:	5c9b      	ldrb	r3, [r3, r2]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d108      	bne.n	800351c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	23aa      	movs	r3, #170	; 0xaa
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	2100      	movs	r1, #0
 8003512:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	0018      	movs	r0, r3
 8003518:	f008 fd70 	bl	800bffc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a7a      	ldr	r2, [pc, #488]	; (8003708 <HAL_PCD_Init+0x21c>)
 8003520:	2103      	movs	r1, #3
 8003522:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0018      	movs	r0, r3
 800352a:	f004 fe0f 	bl	800814c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352e:	230f      	movs	r3, #15
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e058      	b.n	80035ea <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003538:	200f      	movs	r0, #15
 800353a:	183b      	adds	r3, r7, r0
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	0013      	movs	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	189b      	adds	r3, r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	18cb      	adds	r3, r1, r3
 800354c:	3301      	adds	r3, #1
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003552:	183b      	adds	r3, r7, r0
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	0013      	movs	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	189b      	adds	r3, r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	183a      	adds	r2, r7, r0
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003568:	0004      	movs	r4, r0
 800356a:	183b      	adds	r3, r7, r0
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	193b      	adds	r3, r7, r4
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	b298      	uxth	r0, r3
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	0013      	movs	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	189b      	adds	r3, r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	18cb      	adds	r3, r1, r3
 8003580:	3336      	adds	r3, #54	; 0x36
 8003582:	1c02      	adds	r2, r0, #0
 8003584:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003586:	193b      	adds	r3, r7, r4
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	0013      	movs	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	189b      	adds	r3, r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	18cb      	adds	r3, r1, r3
 8003598:	3303      	adds	r3, #3
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	0013      	movs	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	189b      	adds	r3, r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	18cb      	adds	r3, r1, r3
 80035ae:	3338      	adds	r3, #56	; 0x38
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035b4:	193b      	adds	r3, r7, r4
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	0013      	movs	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	18cb      	adds	r3, r1, r3
 80035c4:	333c      	adds	r3, #60	; 0x3c
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	0013      	movs	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	189b      	adds	r3, r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	18cb      	adds	r3, r1, r3
 80035da:	3340      	adds	r3, #64	; 0x40
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	193b      	adds	r3, r7, r4
 80035e6:	3201      	adds	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	210f      	movs	r1, #15
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	781a      	ldrb	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d39f      	bcc.n	8003538 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e056      	b.n	80036ae <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003600:	240f      	movs	r4, #15
 8003602:	193b      	adds	r3, r7, r4
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	236a      	movs	r3, #106	; 0x6a
 800360a:	33ff      	adds	r3, #255	; 0xff
 800360c:	0019      	movs	r1, r3
 800360e:	0013      	movs	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	189b      	adds	r3, r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	18c3      	adds	r3, r0, r3
 8003618:	185b      	adds	r3, r3, r1
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800361e:	193b      	adds	r3, r7, r4
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	23b4      	movs	r3, #180	; 0xb4
 8003626:	0059      	lsls	r1, r3, #1
 8003628:	0013      	movs	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	189b      	adds	r3, r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	18c3      	adds	r3, r0, r3
 8003632:	185b      	adds	r3, r3, r1
 8003634:	193a      	adds	r2, r7, r4
 8003636:	7812      	ldrb	r2, [r2, #0]
 8003638:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800363a:	193b      	adds	r3, r7, r4
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	236c      	movs	r3, #108	; 0x6c
 8003642:	33ff      	adds	r3, #255	; 0xff
 8003644:	0019      	movs	r1, r3
 8003646:	0013      	movs	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	189b      	adds	r3, r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	18c3      	adds	r3, r0, r3
 8003650:	185b      	adds	r3, r3, r1
 8003652:	2200      	movs	r2, #0
 8003654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003656:	193b      	adds	r3, r7, r4
 8003658:	781a      	ldrb	r2, [r3, #0]
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	23bc      	movs	r3, #188	; 0xbc
 800365e:	0059      	lsls	r1, r3, #1
 8003660:	0013      	movs	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	189b      	adds	r3, r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	18c3      	adds	r3, r0, r3
 800366a:	185b      	adds	r3, r3, r1
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003670:	193b      	adds	r3, r7, r4
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	23be      	movs	r3, #190	; 0xbe
 8003678:	0059      	lsls	r1, r3, #1
 800367a:	0013      	movs	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	189b      	adds	r3, r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	18c3      	adds	r3, r0, r3
 8003684:	185b      	adds	r3, r3, r1
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800368a:	193b      	adds	r3, r7, r4
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	23c0      	movs	r3, #192	; 0xc0
 8003692:	0059      	lsls	r1, r3, #1
 8003694:	0013      	movs	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	189b      	adds	r3, r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	18c3      	adds	r3, r0, r3
 800369e:	185b      	adds	r3, r3, r1
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	193b      	adds	r3, r7, r4
 80036aa:	3201      	adds	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	230f      	movs	r3, #15
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	781a      	ldrb	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d3a1      	bcc.n	8003600 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	466a      	mov	r2, sp
 80036c4:	0011      	movs	r1, r2
 80036c6:	001a      	movs	r2, r3
 80036c8:	3210      	adds	r2, #16
 80036ca:	ca70      	ldmia	r2!, {r4, r5, r6}
 80036cc:	c170      	stmia	r1!, {r4, r5, r6}
 80036ce:	ca30      	ldmia	r2!, {r4, r5}
 80036d0:	c130      	stmia	r1!, {r4, r5}
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f004 fd52 	bl	8008180 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	; 0x24
 80036e0:	2100      	movs	r1, #0
 80036e2:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a08      	ldr	r2, [pc, #32]	; (8003708 <HAL_PCD_Init+0x21c>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d103      	bne.n	80036fc <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	0018      	movs	r0, r3
 80036f8:	f001 fd34 	bl	8005164 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b005      	add	sp, #20
 8003704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	000002a9 	.word	0x000002a9

0800370c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	23aa      	movs	r3, #170	; 0xaa
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	5cd3      	ldrb	r3, [r2, r3]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_PCD_Start+0x18>
 8003720:	2302      	movs	r3, #2
 8003722:	e014      	b.n	800374e <HAL_PCD_Start+0x42>
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	23aa      	movs	r3, #170	; 0xaa
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	2101      	movs	r1, #1
 800372c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	0018      	movs	r0, r3
 8003734:	f004 fcf4 	bl	8008120 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0018      	movs	r0, r3
 800373e:	f006 fc4f 	bl	8009fe0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	23aa      	movs	r3, #170	; 0xaa
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	2100      	movs	r1, #0
 800374a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b002      	add	sp, #8
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	0018      	movs	r0, r3
 8003766:	f006 fc51 	bl	800a00c <USB_ReadInterrupts>
 800376a:	0002      	movs	r2, r0
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	401a      	ands	r2, r3
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	429a      	cmp	r2, r3
 8003778:	d103      	bne.n	8003782 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0018      	movs	r0, r3
 800377e:	f000 fbbb 	bl	8003ef8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	0018      	movs	r0, r3
 8003788:	f006 fc40 	bl	800a00c <USB_ReadInterrupts>
 800378c:	0002      	movs	r2, r0
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	401a      	ands	r2, r3
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	429a      	cmp	r2, r3
 800379a:	d114      	bne.n	80037c6 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2244      	movs	r2, #68	; 0x44
 80037a2:	5a9b      	ldrh	r3, [r3, r2]
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	49a2      	ldr	r1, [pc, #648]	; (8003a34 <HAL_PCD_IRQHandler+0x2dc>)
 80037ac:	400a      	ands	r2, r1
 80037ae:	b291      	uxth	r1, r2
 80037b0:	2244      	movs	r2, #68	; 0x44
 80037b2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f008 fcab 	bl	800c112 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2100      	movs	r1, #0
 80037c0:	0018      	movs	r0, r3
 80037c2:	f000 f945 	bl	8003a50 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f006 fc1e 	bl	800a00c <USB_ReadInterrupts>
 80037d0:	0002      	movs	r2, r0
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	01db      	lsls	r3, r3, #7
 80037d6:	401a      	ands	r2, r3
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	01db      	lsls	r3, r3, #7
 80037dc:	429a      	cmp	r2, r3
 80037de:	d10b      	bne.n	80037f8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2244      	movs	r2, #68	; 0x44
 80037e6:	5a9b      	ldrh	r3, [r3, r2]
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4992      	ldr	r1, [pc, #584]	; (8003a38 <HAL_PCD_IRQHandler+0x2e0>)
 80037f0:	400a      	ands	r2, r1
 80037f2:	b291      	uxth	r1, r2
 80037f4:	2244      	movs	r2, #68	; 0x44
 80037f6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f006 fc05 	bl	800a00c <USB_ReadInterrupts>
 8003802:	0002      	movs	r2, r0
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	019b      	lsls	r3, r3, #6
 8003808:	401a      	ands	r2, r3
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	019b      	lsls	r3, r3, #6
 800380e:	429a      	cmp	r2, r3
 8003810:	d10b      	bne.n	800382a <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2244      	movs	r2, #68	; 0x44
 8003818:	5a9b      	ldrh	r3, [r3, r2]
 800381a:	b29a      	uxth	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4986      	ldr	r1, [pc, #536]	; (8003a3c <HAL_PCD_IRQHandler+0x2e4>)
 8003822:	400a      	ands	r2, r1
 8003824:	b291      	uxth	r1, r2
 8003826:	2244      	movs	r2, #68	; 0x44
 8003828:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	0018      	movs	r0, r3
 8003830:	f006 fbec 	bl	800a00c <USB_ReadInterrupts>
 8003834:	0002      	movs	r2, r0
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	015b      	lsls	r3, r3, #5
 800383a:	401a      	ands	r2, r3
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	015b      	lsls	r3, r3, #5
 8003840:	429a      	cmp	r2, r3
 8003842:	d137      	bne.n	80038b4 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2240      	movs	r2, #64	; 0x40
 800384a:	5a9b      	ldrh	r3, [r3, r2]
 800384c:	b29a      	uxth	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2104      	movs	r1, #4
 8003854:	438a      	bics	r2, r1
 8003856:	b291      	uxth	r1, r2
 8003858:	2240      	movs	r2, #64	; 0x40
 800385a:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2240      	movs	r2, #64	; 0x40
 8003862:	5a9b      	ldrh	r3, [r3, r2]
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2108      	movs	r1, #8
 800386c:	438a      	bics	r2, r1
 800386e:	b291      	uxth	r1, r2
 8003870:	2240      	movs	r2, #64	; 0x40
 8003872:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	23b8      	movs	r3, #184	; 0xb8
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	5cd3      	ldrb	r3, [r2, r3]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d109      	bne.n	8003894 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	23b8      	movs	r3, #184	; 0xb8
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	2100      	movs	r1, #0
 8003888:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2100      	movs	r1, #0
 800388e:	0018      	movs	r0, r3
 8003890:	f001 fc92 	bl	80051b8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	0018      	movs	r0, r3
 8003898:	f008 fc7c 	bl	800c194 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2244      	movs	r2, #68	; 0x44
 80038a2:	5a9b      	ldrh	r3, [r3, r2]
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4965      	ldr	r1, [pc, #404]	; (8003a40 <HAL_PCD_IRQHandler+0x2e8>)
 80038ac:	400a      	ands	r2, r1
 80038ae:	b291      	uxth	r1, r2
 80038b0:	2244      	movs	r2, #68	; 0x44
 80038b2:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	0018      	movs	r0, r3
 80038ba:	f006 fba7 	bl	800a00c <USB_ReadInterrupts>
 80038be:	0002      	movs	r2, r0
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	401a      	ands	r2, r3
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d127      	bne.n	800391e <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2240      	movs	r2, #64	; 0x40
 80038d4:	5a9b      	ldrh	r3, [r3, r2]
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2108      	movs	r1, #8
 80038de:	430a      	orrs	r2, r1
 80038e0:	b291      	uxth	r1, r2
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2244      	movs	r2, #68	; 0x44
 80038ec:	5a9b      	ldrh	r3, [r3, r2]
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4953      	ldr	r1, [pc, #332]	; (8003a44 <HAL_PCD_IRQHandler+0x2ec>)
 80038f6:	400a      	ands	r2, r1
 80038f8:	b291      	uxth	r1, r2
 80038fa:	2244      	movs	r2, #68	; 0x44
 80038fc:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2240      	movs	r2, #64	; 0x40
 8003904:	5a9b      	ldrh	r3, [r3, r2]
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2104      	movs	r1, #4
 800390e:	430a      	orrs	r2, r1
 8003910:	b291      	uxth	r1, r2
 8003912:	2240      	movs	r2, #64	; 0x40
 8003914:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	0018      	movs	r0, r3
 800391a:	f008 fc1f 	bl	800c15c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	0018      	movs	r0, r3
 8003924:	f006 fb72 	bl	800a00c <USB_ReadInterrupts>
 8003928:	0003      	movs	r3, r0
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	4013      	ands	r3, r2
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d145      	bne.n	80039be <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2244      	movs	r2, #68	; 0x44
 8003938:	5a9b      	ldrh	r3, [r3, r2]
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2180      	movs	r1, #128	; 0x80
 8003942:	438a      	bics	r2, r1
 8003944:	b291      	uxth	r1, r2
 8003946:	2244      	movs	r2, #68	; 0x44
 8003948:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	23b8      	movs	r3, #184	; 0xb8
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	5cd3      	ldrb	r3, [r2, r3]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d12f      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	5a9b      	ldrh	r3, [r3, r2]
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2104      	movs	r1, #4
 8003966:	430a      	orrs	r2, r1
 8003968:	b291      	uxth	r1, r2
 800396a:	2240      	movs	r2, #64	; 0x40
 800396c:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	5a9b      	ldrh	r3, [r3, r2]
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2108      	movs	r1, #8
 800397e:	430a      	orrs	r2, r1
 8003980:	b291      	uxth	r1, r2
 8003982:	2240      	movs	r2, #64	; 0x40
 8003984:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	23b8      	movs	r3, #184	; 0xb8
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	2101      	movs	r1, #1
 800398e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2254      	movs	r2, #84	; 0x54
 8003996:	5a9b      	ldrh	r3, [r3, r2]
 8003998:	b29b      	uxth	r3, r3
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	223c      	movs	r2, #60	; 0x3c
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	23b9      	movs	r3, #185	; 0xb9
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2101      	movs	r1, #1
 80039ae:	0018      	movs	r0, r3
 80039b0:	f001 fc02 	bl	80051b8 <HAL_PCDEx_LPM_Callback>
 80039b4:	e003      	b.n	80039be <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f008 fbcf 	bl	800c15c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f006 fb22 	bl	800a00c <USB_ReadInterrupts>
 80039c8:	0002      	movs	r2, r0
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	401a      	ands	r2, r3
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d10f      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2244      	movs	r2, #68	; 0x44
 80039de:	5a9b      	ldrh	r3, [r3, r2]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4918      	ldr	r1, [pc, #96]	; (8003a48 <HAL_PCD_IRQHandler+0x2f0>)
 80039e8:	400a      	ands	r2, r1
 80039ea:	b291      	uxth	r1, r2
 80039ec:	2244      	movs	r2, #68	; 0x44
 80039ee:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f008 fb7e 	bl	800c0f4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f006 fb05 	bl	800a00c <USB_ReadInterrupts>
 8003a02:	0002      	movs	r2, r0
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	401a      	ands	r2, r3
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d10b      	bne.n	8003a2a <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2244      	movs	r2, #68	; 0x44
 8003a18:	5a9b      	ldrh	r3, [r3, r2]
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	490a      	ldr	r1, [pc, #40]	; (8003a4c <HAL_PCD_IRQHandler+0x2f4>)
 8003a22:	400a      	ands	r2, r1
 8003a24:	b291      	uxth	r1, r2
 8003a26:	2244      	movs	r2, #68	; 0x44
 8003a28:	5299      	strh	r1, [r3, r2]
  }
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b002      	add	sp, #8
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	fffffbff 	.word	0xfffffbff
 8003a38:	ffffbfff 	.word	0xffffbfff
 8003a3c:	ffffdfff 	.word	0xffffdfff
 8003a40:	ffffefff 	.word	0xffffefff
 8003a44:	fffff7ff 	.word	0xfffff7ff
 8003a48:	fffffdff 	.word	0xfffffdff
 8003a4c:	fffffeff 	.word	0xfffffeff

08003a50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	000a      	movs	r2, r1
 8003a5a:	1cfb      	adds	r3, r7, #3
 8003a5c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	23aa      	movs	r3, #170	; 0xaa
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	5cd3      	ldrb	r3, [r2, r3]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_PCD_SetAddress+0x1e>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e017      	b.n	8003a9e <HAL_PCD_SetAddress+0x4e>
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	23aa      	movs	r3, #170	; 0xaa
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	2101      	movs	r1, #1
 8003a76:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	1cfa      	adds	r2, r7, #3
 8003a7c:	2124      	movs	r1, #36	; 0x24
 8003a7e:	7812      	ldrb	r2, [r2, #0]
 8003a80:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	1cfb      	adds	r3, r7, #3
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	0010      	movs	r0, r2
 8003a8e:	f006 fa93 	bl	8009fb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	23aa      	movs	r3, #170	; 0xaa
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	2100      	movs	r1, #0
 8003a9a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b002      	add	sp, #8
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003aa6:	b590      	push	{r4, r7, lr}
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	000c      	movs	r4, r1
 8003ab0:	0010      	movs	r0, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	1cfb      	adds	r3, r7, #3
 8003ab6:	1c22      	adds	r2, r4, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	003b      	movs	r3, r7
 8003abc:	1c02      	adds	r2, r0, #0
 8003abe:	801a      	strh	r2, [r3, #0]
 8003ac0:	1cbb      	adds	r3, r7, #2
 8003ac2:	1c0a      	adds	r2, r1, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ac6:	230b      	movs	r3, #11
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ace:	1cfb      	adds	r3, r7, #3
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	da0f      	bge.n	8003af8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad8:	1cfb      	adds	r3, r7, #3
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2207      	movs	r2, #7
 8003ade:	4013      	ands	r3, r2
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	0013      	movs	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	18d3      	adds	r3, r2, r3
 8003aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	705a      	strb	r2, [r3, #1]
 8003af6:	e00f      	b.n	8003b18 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af8:	1cfb      	adds	r3, r7, #3
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2207      	movs	r2, #7
 8003afe:	401a      	ands	r2, r3
 8003b00:	0013      	movs	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	189b      	adds	r3, r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	3369      	adds	r3, #105	; 0x69
 8003b0a:	33ff      	adds	r3, #255	; 0xff
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	18d3      	adds	r3, r2, r3
 8003b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b18:	1cfb      	adds	r3, r7, #3
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	4013      	ands	r3, r2
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b26:	003b      	movs	r3, r7
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1cba      	adds	r2, r7, #2
 8003b32:	7812      	ldrb	r2, [r2, #0]
 8003b34:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	785b      	ldrb	r3, [r3, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d004      	beq.n	8003b48 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b48:	1cbb      	adds	r3, r7, #2
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d102      	bne.n	8003b56 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	23aa      	movs	r3, #170	; 0xaa
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	5cd3      	ldrb	r3, [r2, r3]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_PCD_EP_Open+0xc0>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e013      	b.n	8003b8e <HAL_PCD_EP_Open+0xe8>
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	23aa      	movs	r3, #170	; 0xaa
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	0011      	movs	r1, r2
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f004 fb2d 	bl	80081d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	23aa      	movs	r3, #170	; 0xaa
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	2100      	movs	r1, #0
 8003b86:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003b88:	230b      	movs	r3, #11
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	781b      	ldrb	r3, [r3, #0]
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b005      	add	sp, #20
 8003b94:	bd90      	pop	{r4, r7, pc}

08003b96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	000a      	movs	r2, r1
 8003ba0:	1cfb      	adds	r3, r7, #3
 8003ba2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ba4:	1cfb      	adds	r3, r7, #3
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b25b      	sxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	da0f      	bge.n	8003bce <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bae:	1cfb      	adds	r3, r7, #3
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2207      	movs	r2, #7
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	0013      	movs	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	189b      	adds	r3, r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	18d3      	adds	r3, r2, r3
 8003bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	705a      	strb	r2, [r3, #1]
 8003bcc:	e00f      	b.n	8003bee <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bce:	1cfb      	adds	r3, r7, #3
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2207      	movs	r2, #7
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	3369      	adds	r3, #105	; 0x69
 8003be0:	33ff      	adds	r3, #255	; 0xff
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	18d3      	adds	r3, r2, r3
 8003be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bee:	1cfb      	adds	r3, r7, #3
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2207      	movs	r2, #7
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	23aa      	movs	r3, #170	; 0xaa
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_PCD_EP_Close+0x76>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e011      	b.n	8003c30 <HAL_PCD_EP_Close+0x9a>
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	23aa      	movs	r3, #170	; 0xaa
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	2101      	movs	r1, #1
 8003c14:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	0011      	movs	r1, r2
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f004 fe4e 	bl	80088c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	23aa      	movs	r3, #170	; 0xaa
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b004      	add	sp, #16
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	200b      	movs	r0, #11
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	1c0a      	adds	r2, r1, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4c:	0001      	movs	r1, r0
 8003c4e:	187b      	adds	r3, r7, r1
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2207      	movs	r2, #7
 8003c54:	401a      	ands	r2, r3
 8003c56:	0013      	movs	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	3369      	adds	r3, #105	; 0x69
 8003c60:	33ff      	adds	r3, #255	; 0xff
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	18d3      	adds	r3, r2, r3
 8003c66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2200      	movs	r2, #0
 8003c78:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2207      	movs	r2, #7
 8003c86:	4013      	ands	r3, r2
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2207      	movs	r2, #7
 8003c94:	4013      	ands	r3, r2
 8003c96:	d107      	bne.n	8003ca8 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	0011      	movs	r1, r2
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f004 ffcd 	bl	8008c40 <USB_EPStartXfer>
 8003ca6:	e006      	b.n	8003cb6 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	0011      	movs	r1, r2
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f004 ffc5 	bl	8008c40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b006      	add	sp, #24
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	000a      	movs	r2, r1
 8003cca:	1cfb      	adds	r3, r7, #3
 8003ccc:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cce:	1cfb      	adds	r3, r7, #3
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2207      	movs	r2, #7
 8003cd4:	401a      	ands	r2, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	23c2      	movs	r3, #194	; 0xc2
 8003cda:	0059      	lsls	r1, r3, #1
 8003cdc:	0013      	movs	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	18c3      	adds	r3, r0, r3
 8003ce6:	185b      	adds	r3, r3, r1
 8003ce8:	681b      	ldr	r3, [r3, #0]
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b002      	add	sp, #8
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b086      	sub	sp, #24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	200b      	movs	r0, #11
 8003d00:	183b      	adds	r3, r7, r0
 8003d02:	1c0a      	adds	r2, r1, #0
 8003d04:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d06:	183b      	adds	r3, r7, r0
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2207      	movs	r2, #7
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	0013      	movs	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	189b      	adds	r3, r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	18d3      	adds	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2224      	movs	r2, #36	; 0x24
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2201      	movs	r2, #1
 8003d42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d44:	183b      	adds	r3, r7, r0
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2207      	movs	r2, #7
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d52:	183b      	adds	r3, r7, r0
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2207      	movs	r2, #7
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d107      	bne.n	8003d6c <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	0011      	movs	r1, r2
 8003d64:	0018      	movs	r0, r3
 8003d66:	f004 ff6b 	bl	8008c40 <USB_EPStartXfer>
 8003d6a:	e006      	b.n	8003d7a <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	0011      	movs	r1, r2
 8003d74:	0018      	movs	r0, r3
 8003d76:	f004 ff63 	bl	8008c40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b006      	add	sp, #24
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	000a      	movs	r2, r1
 8003d8e:	1cfb      	adds	r3, r7, #3
 8003d90:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d92:	1cfb      	adds	r3, r7, #3
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2207      	movs	r2, #7
 8003d98:	401a      	ands	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d901      	bls.n	8003da6 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e046      	b.n	8003e34 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003da6:	1cfb      	adds	r3, r7, #3
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da0f      	bge.n	8003dd0 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db0:	1cfb      	adds	r3, r7, #3
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2207      	movs	r2, #7
 8003db6:	4013      	ands	r3, r2
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	0013      	movs	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	18d3      	adds	r3, r2, r3
 8003dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	705a      	strb	r2, [r3, #1]
 8003dce:	e00d      	b.n	8003dec <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dd0:	1cfb      	adds	r3, r7, #3
 8003dd2:	781a      	ldrb	r2, [r3, #0]
 8003dd4:	0013      	movs	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	189b      	adds	r3, r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	3369      	adds	r3, #105	; 0x69
 8003dde:	33ff      	adds	r3, #255	; 0xff
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	18d3      	adds	r3, r2, r3
 8003de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df2:	1cfb      	adds	r3, r7, #3
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2207      	movs	r2, #7
 8003df8:	4013      	ands	r3, r2
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	23aa      	movs	r3, #170	; 0xaa
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	5cd3      	ldrb	r3, [r2, r3]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_PCD_EP_SetStall+0x8c>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e011      	b.n	8003e34 <HAL_PCD_EP_SetStall+0xb0>
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	23aa      	movs	r3, #170	; 0xaa
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	2101      	movs	r1, #1
 8003e18:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	0011      	movs	r1, r2
 8003e22:	0018      	movs	r0, r3
 8003e24:	f005 ffc6 	bl	8009db4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	23aa      	movs	r3, #170	; 0xaa
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	2100      	movs	r1, #0
 8003e30:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b004      	add	sp, #16
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	000a      	movs	r2, r1
 8003e46:	1cfb      	adds	r3, r7, #3
 8003e48:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e4a:	1cfb      	adds	r3, r7, #3
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	220f      	movs	r2, #15
 8003e50:	401a      	ands	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d901      	bls.n	8003e5e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e048      	b.n	8003ef0 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e5e:	1cfb      	adds	r3, r7, #3
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	da0f      	bge.n	8003e88 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e68:	1cfb      	adds	r3, r7, #3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2207      	movs	r2, #7
 8003e6e:	4013      	ands	r3, r2
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	0013      	movs	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	189b      	adds	r3, r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	18d3      	adds	r3, r2, r3
 8003e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	705a      	strb	r2, [r3, #1]
 8003e86:	e00f      	b.n	8003ea8 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e88:	1cfb      	adds	r3, r7, #3
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2207      	movs	r2, #7
 8003e8e:	401a      	ands	r2, r3
 8003e90:	0013      	movs	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	3369      	adds	r3, #105	; 0x69
 8003e9a:	33ff      	adds	r3, #255	; 0xff
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	18d3      	adds	r3, r2, r3
 8003ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eae:	1cfb      	adds	r3, r7, #3
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	23aa      	movs	r3, #170	; 0xaa
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	5cd3      	ldrb	r3, [r2, r3]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_PCD_EP_ClrStall+0x90>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e011      	b.n	8003ef0 <HAL_PCD_EP_ClrStall+0xb4>
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	23aa      	movs	r3, #170	; 0xaa
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	0011      	movs	r1, r2
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f005 ffb8 	bl	8009e54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	23aa      	movs	r3, #170	; 0xaa
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	2100      	movs	r1, #0
 8003eec:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b004      	add	sp, #16
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003ef8:	b5b0      	push	{r4, r5, r7, lr}
 8003efa:	b096      	sub	sp, #88	; 0x58
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f00:	f000 fbd8 	bl	80046b4 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	2056      	movs	r0, #86	; 0x56
 8003f0a:	183b      	adds	r3, r7, r0
 8003f0c:	2144      	movs	r1, #68	; 0x44
 8003f0e:	5a52      	ldrh	r2, [r2, r1]
 8003f10:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f12:	183b      	adds	r3, r7, r0
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	2455      	movs	r4, #85	; 0x55
 8003f1a:	193b      	adds	r3, r7, r4
 8003f1c:	210f      	movs	r1, #15
 8003f1e:	400a      	ands	r2, r1
 8003f20:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003f22:	193b      	adds	r3, r7, r4
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d000      	beq.n	8003f2c <PCD_EP_ISR_Handler+0x34>
 8003f2a:	e179      	b.n	8004220 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f2c:	183b      	adds	r3, r7, r0
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	2210      	movs	r2, #16
 8003f32:	4013      	ands	r3, r2
 8003f34:	d154      	bne.n	8003fe0 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	200e      	movs	r0, #14
 8003f40:	183b      	adds	r3, r7, r0
 8003f42:	49af      	ldr	r1, [pc, #700]	; (8004200 <PCD_EP_ISR_Handler+0x308>)
 8003f44:	400a      	ands	r2, r1
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	183a      	adds	r2, r7, r0
 8003f4e:	8812      	ldrh	r2, [r2, #0]
 8003f50:	49ac      	ldr	r1, [pc, #688]	; (8004204 <PCD_EP_ISR_Handler+0x30c>)
 8003f52:	430a      	orrs	r2, r1
 8003f54:	b292      	uxth	r2, r2
 8003f56:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3328      	adds	r3, #40	; 0x28
 8003f5c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2250      	movs	r2, #80	; 0x50
 8003f64:	5a9b      	ldrh	r3, [r3, r2]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	001a      	movs	r2, r3
 8003f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	18d2      	adds	r2, r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	18d3      	adds	r3, r2, r3
 8003f78:	4aa3      	ldr	r2, [pc, #652]	; (8004208 <PCD_EP_ISR_Handler+0x310>)
 8003f7a:	4694      	mov	ip, r2
 8003f7c:	4463      	add	r3, ip
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	059b      	lsls	r3, r3, #22
 8003f82:	0d9a      	lsrs	r2, r3, #22
 8003f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	18d2      	adds	r2, r2, r3
 8003f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f94:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2100      	movs	r1, #0
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f008 f88c 	bl	800c0b8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	; 0x24
 8003fa4:	5c9b      	ldrb	r3, [r3, r2]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <PCD_EP_ISR_Handler+0xb8>
 8003fac:	f000 fb82 	bl	80046b4 <PCD_EP_ISR_Handler+0x7bc>
 8003fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <PCD_EP_ISR_Handler+0xc4>
 8003fb8:	f000 fb7c 	bl	80046b4 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	; 0x24
 8003fc0:	5c9b      	ldrb	r3, [r3, r2]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2280      	movs	r2, #128	; 0x80
 8003fc6:	4252      	negs	r2, r2
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	b291      	uxth	r1, r2
 8003fd2:	224c      	movs	r2, #76	; 0x4c
 8003fd4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2224      	movs	r2, #36	; 0x24
 8003fda:	2100      	movs	r1, #0
 8003fdc:	5499      	strb	r1, [r3, r2]
 8003fde:	e369      	b.n	80046b4 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3369      	adds	r3, #105	; 0x69
 8003fe4:	33ff      	adds	r3, #255	; 0xff
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2152      	movs	r1, #82	; 0x52
 8003fee:	187b      	adds	r3, r7, r1
 8003ff0:	8812      	ldrh	r2, [r2, #0]
 8003ff2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	881a      	ldrh	r2, [r3, #0]
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d037      	beq.n	8004070 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2250      	movs	r2, #80	; 0x50
 8004006:	5a9b      	ldrh	r3, [r3, r2]
 8004008:	b29b      	uxth	r3, r3
 800400a:	001a      	movs	r2, r3
 800400c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	18d2      	adds	r2, r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	18d3      	adds	r3, r2, r3
 800401a:	4a7c      	ldr	r2, [pc, #496]	; (800420c <PCD_EP_ISR_Handler+0x314>)
 800401c:	4694      	mov	ip, r2
 800401e:	4463      	add	r3, ip
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	059b      	lsls	r3, r3, #22
 8004024:	0d9a      	lsrs	r2, r3, #22
 8004026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004028:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	22ac      	movs	r2, #172	; 0xac
 8004032:	0092      	lsls	r2, r2, #2
 8004034:	1899      	adds	r1, r3, r2
 8004036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004038:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800403a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800403e:	b29b      	uxth	r3, r3
 8004040:	f006 f836 	bl	800a0b0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b29a      	uxth	r2, r3
 800404c:	2010      	movs	r0, #16
 800404e:	183b      	adds	r3, r7, r0
 8004050:	496f      	ldr	r1, [pc, #444]	; (8004210 <PCD_EP_ISR_Handler+0x318>)
 8004052:	400a      	ands	r2, r1
 8004054:	801a      	strh	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	183a      	adds	r2, r7, r0
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	2180      	movs	r1, #128	; 0x80
 8004060:	430a      	orrs	r2, r1
 8004062:	b292      	uxth	r2, r2
 8004064:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0018      	movs	r0, r3
 800406a:	f007 ffef 	bl	800c04c <HAL_PCD_SetupStageCallback>
 800406e:	e321      	b.n	80046b4 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004070:	2352      	movs	r3, #82	; 0x52
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	2200      	movs	r2, #0
 8004076:	5e9b      	ldrsh	r3, [r3, r2]
 8004078:	2b00      	cmp	r3, #0
 800407a:	db00      	blt.n	800407e <PCD_EP_ISR_Handler+0x186>
 800407c:	e31a      	b.n	80046b4 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	b29a      	uxth	r2, r3
 8004086:	201e      	movs	r0, #30
 8004088:	183b      	adds	r3, r7, r0
 800408a:	4961      	ldr	r1, [pc, #388]	; (8004210 <PCD_EP_ISR_Handler+0x318>)
 800408c:	400a      	ands	r2, r1
 800408e:	801a      	strh	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	183a      	adds	r2, r7, r0
 8004096:	8812      	ldrh	r2, [r2, #0]
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	430a      	orrs	r2, r1
 800409c:	b292      	uxth	r2, r2
 800409e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2250      	movs	r2, #80	; 0x50
 80040a6:	5a9b      	ldrh	r3, [r3, r2]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	001a      	movs	r2, r3
 80040ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	18d2      	adds	r2, r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	18d3      	adds	r3, r2, r3
 80040ba:	4a54      	ldr	r2, [pc, #336]	; (800420c <PCD_EP_ISR_Handler+0x314>)
 80040bc:	4694      	mov	ip, r2
 80040be:	4463      	add	r3, ip
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	059b      	lsls	r3, r3, #22
 80040c4:	0d9a      	lsrs	r2, r3, #22
 80040c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80040ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01a      	beq.n	8004108 <PCD_EP_ISR_Handler+0x210>
 80040d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e0:	6959      	ldr	r1, [r3, #20]
 80040e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80040e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f005 ffe0 	bl	800a0b0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80040f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	18d2      	adds	r2, r2, r3
 80040fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2100      	movs	r1, #0
 8004102:	0018      	movs	r0, r3
 8004104:	f007 ffb7 	bl	800c076 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	001a      	movs	r2, r3
 8004112:	2380      	movs	r3, #128	; 0x80
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	4013      	ands	r3, r2
 8004118:	d000      	beq.n	800411c <PCD_EP_ISR_Handler+0x224>
 800411a:	e2cb      	b.n	80046b4 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2250      	movs	r2, #80	; 0x50
 8004128:	5a9b      	ldrh	r3, [r3, r2]
 800412a:	b29b      	uxth	r3, r3
 800412c:	001a      	movs	r2, r3
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	189b      	adds	r3, r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	4a35      	ldr	r2, [pc, #212]	; (800420c <PCD_EP_ISR_Handler+0x314>)
 8004138:	4694      	mov	ip, r2
 800413a:	4463      	add	r3, ip
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d110      	bne.n	8004168 <PCD_EP_ISR_Handler+0x270>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	4a31      	ldr	r2, [pc, #196]	; (8004214 <PCD_EP_ISR_Handler+0x31c>)
 800414e:	4013      	ands	r3, r2
 8004150:	b29a      	uxth	r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	801a      	strh	r2, [r3, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	4a29      	ldr	r2, [pc, #164]	; (8004204 <PCD_EP_ISR_Handler+0x30c>)
 800415e:	4313      	orrs	r3, r2
 8004160:	b29a      	uxth	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	e02b      	b.n	80041c0 <PCD_EP_ISR_Handler+0x2c8>
 8004168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b3e      	cmp	r3, #62	; 0x3e
 800416e:	d812      	bhi.n	8004196 <PCD_EP_ISR_Handler+0x29e>
 8004170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	647b      	str	r3, [r7, #68]	; 0x44
 8004178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2201      	movs	r2, #1
 800417e:	4013      	ands	r3, r2
 8004180:	d002      	beq.n	8004188 <PCD_EP_ISR_Handler+0x290>
 8004182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004184:	3301      	adds	r3, #1
 8004186:	647b      	str	r3, [r7, #68]	; 0x44
 8004188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800418a:	b29b      	uxth	r3, r3
 800418c:	029b      	lsls	r3, r3, #10
 800418e:	b29a      	uxth	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	801a      	strh	r2, [r3, #0]
 8004194:	e014      	b.n	80041c0 <PCD_EP_ISR_Handler+0x2c8>
 8004196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	647b      	str	r3, [r7, #68]	; 0x44
 800419e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	221f      	movs	r2, #31
 80041a4:	4013      	ands	r3, r2
 80041a6:	d102      	bne.n	80041ae <PCD_EP_ISR_Handler+0x2b6>
 80041a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041aa:	3b01      	subs	r3, #1
 80041ac:	647b      	str	r3, [r7, #68]	; 0x44
 80041ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	029b      	lsls	r3, r3, #10
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	4a13      	ldr	r2, [pc, #76]	; (8004204 <PCD_EP_ISR_Handler+0x30c>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	2012      	movs	r0, #18
 80041ca:	183b      	adds	r3, r7, r0
 80041cc:	4912      	ldr	r1, [pc, #72]	; (8004218 <PCD_EP_ISR_Handler+0x320>)
 80041ce:	400a      	ands	r2, r1
 80041d0:	801a      	strh	r2, [r3, #0]
 80041d2:	183b      	adds	r3, r7, r0
 80041d4:	183a      	adds	r2, r7, r0
 80041d6:	8812      	ldrh	r2, [r2, #0]
 80041d8:	2180      	movs	r1, #128	; 0x80
 80041da:	0149      	lsls	r1, r1, #5
 80041dc:	404a      	eors	r2, r1
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	183b      	adds	r3, r7, r0
 80041e2:	183a      	adds	r2, r7, r0
 80041e4:	8812      	ldrh	r2, [r2, #0]
 80041e6:	2180      	movs	r1, #128	; 0x80
 80041e8:	0189      	lsls	r1, r1, #6
 80041ea:	404a      	eors	r2, r1
 80041ec:	801a      	strh	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	183a      	adds	r2, r7, r0
 80041f4:	8812      	ldrh	r2, [r2, #0]
 80041f6:	4909      	ldr	r1, [pc, #36]	; (800421c <PCD_EP_ISR_Handler+0x324>)
 80041f8:	430a      	orrs	r2, r1
 80041fa:	b292      	uxth	r2, r2
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	e259      	b.n	80046b4 <PCD_EP_ISR_Handler+0x7bc>
 8004200:	ffff8f0f 	.word	0xffff8f0f
 8004204:	ffff8000 	.word	0xffff8000
 8004208:	00000402 	.word	0x00000402
 800420c:	00000406 	.word	0x00000406
 8004210:	00000f8f 	.word	0x00000f8f
 8004214:	ffff83ff 	.word	0xffff83ff
 8004218:	ffffbf8f 	.word	0xffffbf8f
 800421c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	001a      	movs	r2, r3
 8004226:	2055      	movs	r0, #85	; 0x55
 8004228:	183b      	adds	r3, r7, r0
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	18d2      	adds	r2, r2, r3
 8004230:	2152      	movs	r1, #82	; 0x52
 8004232:	187b      	adds	r3, r7, r1
 8004234:	8812      	ldrh	r2, [r2, #0]
 8004236:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004238:	187b      	adds	r3, r7, r1
 800423a:	2200      	movs	r2, #0
 800423c:	5e9b      	ldrsh	r3, [r3, r2]
 800423e:	2b00      	cmp	r3, #0
 8004240:	db00      	blt.n	8004244 <PCD_EP_ISR_Handler+0x34c>
 8004242:	e0fa      	b.n	800443a <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	001a      	movs	r2, r3
 800424a:	183b      	adds	r3, r7, r0
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	18d3      	adds	r3, r2, r3
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29a      	uxth	r2, r3
 8004256:	2450      	movs	r4, #80	; 0x50
 8004258:	193b      	adds	r3, r7, r4
 800425a:	49cf      	ldr	r1, [pc, #828]	; (8004598 <PCD_EP_ISR_Handler+0x6a0>)
 800425c:	400a      	ands	r2, r1
 800425e:	801a      	strh	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	001a      	movs	r2, r3
 8004266:	183b      	adds	r3, r7, r0
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	18d3      	adds	r3, r2, r3
 800426e:	193a      	adds	r2, r7, r4
 8004270:	8812      	ldrh	r2, [r2, #0]
 8004272:	2180      	movs	r1, #128	; 0x80
 8004274:	430a      	orrs	r2, r1
 8004276:	b292      	uxth	r2, r2
 8004278:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800427a:	183b      	adds	r3, r7, r0
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	0013      	movs	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	189b      	adds	r3, r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	3369      	adds	r3, #105	; 0x69
 8004288:	33ff      	adds	r3, #255	; 0xff
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	18d3      	adds	r3, r2, r3
 800428e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004292:	7b1b      	ldrb	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d125      	bne.n	80042e4 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2250      	movs	r2, #80	; 0x50
 800429e:	5a9b      	ldrh	r3, [r3, r2]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	001a      	movs	r2, r3
 80042a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	18d2      	adds	r2, r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	18d3      	adds	r3, r2, r3
 80042b2:	4aba      	ldr	r2, [pc, #744]	; (800459c <PCD_EP_ISR_Handler+0x6a4>)
 80042b4:	4694      	mov	ip, r2
 80042b6:	4463      	add	r3, ip
 80042b8:	881a      	ldrh	r2, [r3, #0]
 80042ba:	2448      	movs	r4, #72	; 0x48
 80042bc:	193b      	adds	r3, r7, r4
 80042be:	0592      	lsls	r2, r2, #22
 80042c0:	0d92      	lsrs	r2, r2, #22
 80042c2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80042c4:	193b      	adds	r3, r7, r4
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d100      	bne.n	80042ce <PCD_EP_ISR_Handler+0x3d6>
 80042cc:	e08d      	b.n	80043ea <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d4:	6959      	ldr	r1, [r3, #20]
 80042d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d8:	88da      	ldrh	r2, [r3, #6]
 80042da:	193b      	adds	r3, r7, r4
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	f005 fee7 	bl	800a0b0 <USB_ReadPMA>
 80042e2:	e082      	b.n	80043ea <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80042e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e6:	78db      	ldrb	r3, [r3, #3]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d10c      	bne.n	8004306 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80042ec:	2348      	movs	r3, #72	; 0x48
 80042ee:	18fc      	adds	r4, r7, r3
 80042f0:	2352      	movs	r3, #82	; 0x52
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	881a      	ldrh	r2, [r3, #0]
 80042f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	0018      	movs	r0, r3
 80042fc:	f000 f9ee 	bl	80046dc <HAL_PCD_EP_DB_Receive>
 8004300:	0003      	movs	r3, r0
 8004302:	8023      	strh	r3, [r4, #0]
 8004304:	e071      	b.n	80043ea <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	001a      	movs	r2, r3
 800430c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	18d3      	adds	r3, r2, r3
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29a      	uxth	r2, r3
 8004318:	204a      	movs	r0, #74	; 0x4a
 800431a:	183b      	adds	r3, r7, r0
 800431c:	49a0      	ldr	r1, [pc, #640]	; (80045a0 <PCD_EP_ISR_Handler+0x6a8>)
 800431e:	400a      	ands	r2, r1
 8004320:	801a      	strh	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	001a      	movs	r2, r3
 8004328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	18d3      	adds	r3, r2, r3
 8004330:	183a      	adds	r2, r7, r0
 8004332:	8812      	ldrh	r2, [r2, #0]
 8004334:	499b      	ldr	r1, [pc, #620]	; (80045a4 <PCD_EP_ISR_Handler+0x6ac>)
 8004336:	430a      	orrs	r2, r1
 8004338:	b292      	uxth	r2, r2
 800433a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	001a      	movs	r2, r3
 8004342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	18d3      	adds	r3, r2, r3
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	001a      	movs	r2, r3
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	01db      	lsls	r3, r3, #7
 8004354:	4013      	ands	r3, r2
 8004356:	d024      	beq.n	80043a2 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2250      	movs	r2, #80	; 0x50
 800435e:	5a9b      	ldrh	r3, [r3, r2]
 8004360:	b29b      	uxth	r3, r3
 8004362:	001a      	movs	r2, r3
 8004364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	18d2      	adds	r2, r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	18d3      	adds	r3, r2, r3
 8004372:	4a8d      	ldr	r2, [pc, #564]	; (80045a8 <PCD_EP_ISR_Handler+0x6b0>)
 8004374:	4694      	mov	ip, r2
 8004376:	4463      	add	r3, ip
 8004378:	881a      	ldrh	r2, [r3, #0]
 800437a:	2448      	movs	r4, #72	; 0x48
 800437c:	193b      	adds	r3, r7, r4
 800437e:	0592      	lsls	r2, r2, #22
 8004380:	0d92      	lsrs	r2, r2, #22
 8004382:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004384:	193b      	adds	r3, r7, r4
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02e      	beq.n	80043ea <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004392:	6959      	ldr	r1, [r3, #20]
 8004394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004396:	891a      	ldrh	r2, [r3, #8]
 8004398:	193b      	adds	r3, r7, r4
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	f005 fe88 	bl	800a0b0 <USB_ReadPMA>
 80043a0:	e023      	b.n	80043ea <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2250      	movs	r2, #80	; 0x50
 80043a8:	5a9b      	ldrh	r3, [r3, r2]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	001a      	movs	r2, r3
 80043ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	18d2      	adds	r2, r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	18d3      	adds	r3, r2, r3
 80043bc:	4a77      	ldr	r2, [pc, #476]	; (800459c <PCD_EP_ISR_Handler+0x6a4>)
 80043be:	4694      	mov	ip, r2
 80043c0:	4463      	add	r3, ip
 80043c2:	881a      	ldrh	r2, [r3, #0]
 80043c4:	2448      	movs	r4, #72	; 0x48
 80043c6:	193b      	adds	r3, r7, r4
 80043c8:	0592      	lsls	r2, r2, #22
 80043ca:	0d92      	lsrs	r2, r2, #22
 80043cc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80043ce:	193b      	adds	r3, r7, r4
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043dc:	6959      	ldr	r1, [r3, #20]
 80043de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e0:	895a      	ldrh	r2, [r3, #10]
 80043e2:	193b      	adds	r3, r7, r4
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	f005 fe63 	bl	800a0b0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80043ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	2148      	movs	r1, #72	; 0x48
 80043f0:	187b      	adds	r3, r7, r1
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	18d2      	adds	r2, r2, r3
 80043f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80043fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	187b      	adds	r3, r7, r1
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	18d2      	adds	r2, r2, r3
 8004404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004406:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <PCD_EP_ISR_Handler+0x524>
 8004410:	187b      	adds	r3, r7, r1
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	429a      	cmp	r2, r3
 800441a:	d207      	bcs.n	800442c <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800441c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	0011      	movs	r1, r2
 8004424:	0018      	movs	r0, r3
 8004426:	f007 fe26 	bl	800c076 <HAL_PCD_DataOutStageCallback>
 800442a:	e006      	b.n	800443a <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004432:	0011      	movs	r1, r2
 8004434:	0018      	movs	r0, r3
 8004436:	f004 fc03 	bl	8008c40 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800443a:	2452      	movs	r4, #82	; 0x52
 800443c:	193b      	adds	r3, r7, r4
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	2280      	movs	r2, #128	; 0x80
 8004442:	4013      	ands	r3, r2
 8004444:	d100      	bne.n	8004448 <PCD_EP_ISR_Handler+0x550>
 8004446:	e135      	b.n	80046b4 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8004448:	2055      	movs	r0, #85	; 0x55
 800444a:	183b      	adds	r3, r7, r0
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	0013      	movs	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	189b      	adds	r3, r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	18d3      	adds	r3, r2, r3
 800445c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	001a      	movs	r2, r3
 8004464:	183b      	adds	r3, r7, r0
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	18d3      	adds	r3, r2, r3
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29a      	uxth	r2, r3
 8004470:	2542      	movs	r5, #66	; 0x42
 8004472:	197b      	adds	r3, r7, r5
 8004474:	494d      	ldr	r1, [pc, #308]	; (80045ac <PCD_EP_ISR_Handler+0x6b4>)
 8004476:	400a      	ands	r2, r1
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	001a      	movs	r2, r3
 8004480:	183b      	adds	r3, r7, r0
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	18d3      	adds	r3, r2, r3
 8004488:	197a      	adds	r2, r7, r5
 800448a:	8812      	ldrh	r2, [r2, #0]
 800448c:	4948      	ldr	r1, [pc, #288]	; (80045b0 <PCD_EP_ISR_Handler+0x6b8>)
 800448e:	430a      	orrs	r2, r1
 8004490:	b292      	uxth	r2, r2
 8004492:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8004494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004496:	78db      	ldrb	r3, [r3, #3]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d100      	bne.n	800449e <PCD_EP_ISR_Handler+0x5a6>
 800449c:	e0ad      	b.n	80045fa <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 800449e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a0:	2200      	movs	r2, #0
 80044a2:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044a4:	193b      	adds	r3, r7, r4
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	2240      	movs	r2, #64	; 0x40
 80044aa:	4013      	ands	r3, r2
 80044ac:	d046      	beq.n	800453c <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b0:	785b      	ldrb	r3, [r3, #1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d125      	bne.n	8004502 <PCD_EP_ISR_Handler+0x60a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2250      	movs	r2, #80	; 0x50
 80044c2:	5a9b      	ldrh	r3, [r3, r2]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	001a      	movs	r2, r3
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	189b      	adds	r3, r3, r2
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
 80044ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	00da      	lsls	r2, r3, #3
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	18d3      	adds	r3, r2, r3
 80044d8:	4a33      	ldr	r2, [pc, #204]	; (80045a8 <PCD_EP_ISR_Handler+0x6b0>)
 80044da:	4694      	mov	ip, r2
 80044dc:	4463      	add	r3, ip
 80044de:	623b      	str	r3, [r7, #32]
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	4a33      	ldr	r2, [pc, #204]	; (80045b4 <PCD_EP_ISR_Handler+0x6bc>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	801a      	strh	r2, [r3, #0]
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	4a2e      	ldr	r2, [pc, #184]	; (80045b0 <PCD_EP_ISR_Handler+0x6b8>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	e073      	b.n	80045ea <PCD_EP_ISR_Handler+0x6f2>
 8004502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d16f      	bne.n	80045ea <PCD_EP_ISR_Handler+0x6f2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2250      	movs	r2, #80	; 0x50
 8004516:	5a9b      	ldrh	r3, [r3, r2]
 8004518:	b29b      	uxth	r3, r3
 800451a:	001a      	movs	r2, r3
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	189b      	adds	r3, r3, r2
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	00da      	lsls	r2, r3, #3
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	18d3      	adds	r3, r2, r3
 800452c:	4a1e      	ldr	r2, [pc, #120]	; (80045a8 <PCD_EP_ISR_Handler+0x6b0>)
 800452e:	4694      	mov	ip, r2
 8004530:	4463      	add	r3, ip
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	2200      	movs	r2, #0
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	e056      	b.n	80045ea <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004544:	785b      	ldrb	r3, [r3, #1]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d136      	bne.n	80045b8 <PCD_EP_ISR_Handler+0x6c0>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	637b      	str	r3, [r7, #52]	; 0x34
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2250      	movs	r2, #80	; 0x50
 8004556:	5a9b      	ldrh	r3, [r3, r2]
 8004558:	b29b      	uxth	r3, r3
 800455a:	001a      	movs	r2, r3
 800455c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455e:	189b      	adds	r3, r3, r2
 8004560:	637b      	str	r3, [r7, #52]	; 0x34
 8004562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	00da      	lsls	r2, r3, #3
 8004568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456a:	18d3      	adds	r3, r2, r3
 800456c:	4a0b      	ldr	r2, [pc, #44]	; (800459c <PCD_EP_ISR_Handler+0x6a4>)
 800456e:	4694      	mov	ip, r2
 8004570:	4463      	add	r3, ip
 8004572:	633b      	str	r3, [r7, #48]	; 0x30
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	4a0e      	ldr	r2, [pc, #56]	; (80045b4 <PCD_EP_ISR_Handler+0x6bc>)
 800457c:	4013      	ands	r3, r2
 800457e:	b29a      	uxth	r2, r3
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <PCD_EP_ISR_Handler+0x6b8>)
 800458c:	4313      	orrs	r3, r2
 800458e:	b29a      	uxth	r2, r3
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	801a      	strh	r2, [r3, #0]
 8004594:	e029      	b.n	80045ea <PCD_EP_ISR_Handler+0x6f2>
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	00000f8f 	.word	0x00000f8f
 800459c:	00000406 	.word	0x00000406
 80045a0:	ffff8f8f 	.word	0xffff8f8f
 80045a4:	ffff80c0 	.word	0xffff80c0
 80045a8:	00000402 	.word	0x00000402
 80045ac:	ffff8f0f 	.word	0xffff8f0f
 80045b0:	ffff8000 	.word	0xffff8000
 80045b4:	ffff83ff 	.word	0xffff83ff
 80045b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d114      	bne.n	80045ea <PCD_EP_ISR_Handler+0x6f2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2250      	movs	r2, #80	; 0x50
 80045c6:	5a9b      	ldrh	r3, [r3, r2]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	001a      	movs	r2, r3
 80045cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ce:	189b      	adds	r3, r3, r2
 80045d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	00da      	lsls	r2, r3, #3
 80045d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045da:	18d3      	adds	r3, r2, r3
 80045dc:	4a3d      	ldr	r2, [pc, #244]	; (80046d4 <PCD_EP_ISR_Handler+0x7dc>)
 80045de:	4694      	mov	ip, r2
 80045e0:	4463      	add	r3, ip
 80045e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e6:	2200      	movs	r2, #0
 80045e8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ec:	781a      	ldrb	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0011      	movs	r1, r2
 80045f2:	0018      	movs	r0, r3
 80045f4:	f007 fd60 	bl	800c0b8 <HAL_PCD_DataInStageCallback>
 80045f8:	e05c      	b.n	80046b4 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	78db      	ldrb	r3, [r3, #3]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d150      	bne.n	80046a4 <PCD_EP_ISR_Handler+0x7ac>
 8004602:	2352      	movs	r3, #82	; 0x52
 8004604:	18fb      	adds	r3, r7, r3
 8004606:	881a      	ldrh	r2, [r3, #0]
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4013      	ands	r3, r2
 800460e:	d149      	bne.n	80046a4 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2250      	movs	r2, #80	; 0x50
 8004616:	5a9b      	ldrh	r3, [r3, r2]
 8004618:	b29b      	uxth	r3, r3
 800461a:	001a      	movs	r2, r3
 800461c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	18d2      	adds	r2, r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	18d3      	adds	r3, r2, r3
 800462a:	4a2b      	ldr	r2, [pc, #172]	; (80046d8 <PCD_EP_ISR_Handler+0x7e0>)
 800462c:	4694      	mov	ip, r2
 800462e:	4463      	add	r3, ip
 8004630:	881a      	ldrh	r2, [r3, #0]
 8004632:	2140      	movs	r1, #64	; 0x40
 8004634:	187b      	adds	r3, r7, r1
 8004636:	0592      	lsls	r2, r2, #22
 8004638:	0d92      	lsrs	r2, r2, #22
 800463a:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 800463c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463e:	699a      	ldr	r2, [r3, #24]
 8004640:	187b      	adds	r3, r7, r1
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d907      	bls.n	8004658 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8004648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	187b      	adds	r3, r7, r1
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	1ad2      	subs	r2, r2, r3
 8004652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004654:	619a      	str	r2, [r3, #24]
 8004656:	e002      	b.n	800465e <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8004658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465a:	2200      	movs	r2, #0
 800465c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800465e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d107      	bne.n	8004676 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0011      	movs	r1, r2
 800466e:	0018      	movs	r0, r3
 8004670:	f007 fd22 	bl	800c0b8 <HAL_PCD_DataInStageCallback>
 8004674:	e01e      	b.n	80046b4 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	2140      	movs	r1, #64	; 0x40
 800467c:	187b      	adds	r3, r7, r1
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	18d2      	adds	r2, r2, r3
 8004682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004684:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	187b      	adds	r3, r7, r1
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	18d2      	adds	r2, r2, r3
 8004690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004692:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800469a:	0011      	movs	r1, r2
 800469c:	0018      	movs	r0, r3
 800469e:	f004 facf 	bl	8008c40 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80046a2:	e007      	b.n	80046b4 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80046a4:	2352      	movs	r3, #82	; 0x52
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	881a      	ldrh	r2, [r3, #0]
 80046aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	0018      	movs	r0, r3
 80046b0:	f000 f930 	bl	8004914 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2244      	movs	r2, #68	; 0x44
 80046ba:	5a9b      	ldrh	r3, [r3, r2]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	b21b      	sxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	da01      	bge.n	80046c8 <PCD_EP_ISR_Handler+0x7d0>
 80046c4:	f7ff fc1e 	bl	8003f04 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	0018      	movs	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b016      	add	sp, #88	; 0x58
 80046d0:	bdb0      	pop	{r4, r5, r7, pc}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	00000406 	.word	0x00000406
 80046d8:	00000402 	.word	0x00000402

080046dc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046dc:	b590      	push	{r4, r7, lr}
 80046de:	b089      	sub	sp, #36	; 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	1dbb      	adds	r3, r7, #6
 80046e8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046ea:	1dbb      	adds	r3, r7, #6
 80046ec:	881a      	ldrh	r2, [r3, #0]
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	01db      	lsls	r3, r3, #7
 80046f2:	4013      	ands	r3, r2
 80046f4:	d100      	bne.n	80046f8 <HAL_PCD_EP_DB_Receive+0x1c>
 80046f6:	e07d      	b.n	80047f4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2250      	movs	r2, #80	; 0x50
 80046fe:	5a9b      	ldrh	r3, [r3, r2]
 8004700:	b29b      	uxth	r3, r3
 8004702:	001a      	movs	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	18d2      	adds	r2, r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	18d3      	adds	r3, r2, r3
 8004712:	4a7a      	ldr	r2, [pc, #488]	; (80048fc <HAL_PCD_EP_DB_Receive+0x220>)
 8004714:	4694      	mov	ip, r2
 8004716:	4463      	add	r3, ip
 8004718:	881a      	ldrh	r2, [r3, #0]
 800471a:	211a      	movs	r1, #26
 800471c:	187b      	adds	r3, r7, r1
 800471e:	0592      	lsls	r2, r2, #22
 8004720:	0d92      	lsrs	r2, r2, #22
 8004722:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	187b      	adds	r3, r7, r1
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d307      	bcc.n	8004740 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	699a      	ldr	r2, [r3, #24]
 8004734:	187b      	adds	r3, r7, r1
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	1ad2      	subs	r2, r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	619a      	str	r2, [r3, #24]
 800473e:	e002      	b.n	8004746 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2200      	movs	r2, #0
 8004744:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d121      	bne.n	8004792 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	001a      	movs	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	18d3      	adds	r3, r2, r3
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	b29a      	uxth	r2, r3
 8004760:	2018      	movs	r0, #24
 8004762:	183b      	adds	r3, r7, r0
 8004764:	4966      	ldr	r1, [pc, #408]	; (8004900 <HAL_PCD_EP_DB_Receive+0x224>)
 8004766:	400a      	ands	r2, r1
 8004768:	801a      	strh	r2, [r3, #0]
 800476a:	183b      	adds	r3, r7, r0
 800476c:	183a      	adds	r2, r7, r0
 800476e:	8812      	ldrh	r2, [r2, #0]
 8004770:	2180      	movs	r1, #128	; 0x80
 8004772:	0189      	lsls	r1, r1, #6
 8004774:	404a      	eors	r2, r1
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	001a      	movs	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	18d3      	adds	r3, r2, r3
 8004786:	183a      	adds	r2, r7, r0
 8004788:	8812      	ldrh	r2, [r2, #0]
 800478a:	495e      	ldr	r1, [pc, #376]	; (8004904 <HAL_PCD_EP_DB_Receive+0x228>)
 800478c:	430a      	orrs	r2, r1
 800478e:	b292      	uxth	r2, r2
 8004790:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004792:	1dbb      	adds	r3, r7, #6
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	2240      	movs	r2, #64	; 0x40
 8004798:	4013      	ands	r3, r2
 800479a:	d01a      	beq.n	80047d2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	001a      	movs	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	18d3      	adds	r3, r2, r3
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	2016      	movs	r0, #22
 80047b0:	183b      	adds	r3, r7, r0
 80047b2:	4955      	ldr	r1, [pc, #340]	; (8004908 <HAL_PCD_EP_DB_Receive+0x22c>)
 80047b4:	400a      	ands	r2, r1
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	001a      	movs	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	18d3      	adds	r3, r2, r3
 80047c6:	183a      	adds	r2, r7, r0
 80047c8:	8812      	ldrh	r2, [r2, #0]
 80047ca:	4950      	ldr	r1, [pc, #320]	; (800490c <HAL_PCD_EP_DB_Receive+0x230>)
 80047cc:	430a      	orrs	r2, r1
 80047ce:	b292      	uxth	r2, r2
 80047d0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80047d2:	241a      	movs	r4, #26
 80047d4:	193b      	adds	r3, r7, r4
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d100      	bne.n	80047de <HAL_PCD_EP_DB_Receive+0x102>
 80047dc:	e086      	b.n	80048ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6959      	ldr	r1, [r3, #20]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	891a      	ldrh	r2, [r3, #8]
 80047ea:	193b      	adds	r3, r7, r4
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	f005 fc5f 	bl	800a0b0 <USB_ReadPMA>
 80047f2:	e07b      	b.n	80048ec <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2250      	movs	r2, #80	; 0x50
 80047fa:	5a9b      	ldrh	r3, [r3, r2]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	001a      	movs	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	18d2      	adds	r2, r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	18d3      	adds	r3, r2, r3
 800480e:	4a40      	ldr	r2, [pc, #256]	; (8004910 <HAL_PCD_EP_DB_Receive+0x234>)
 8004810:	4694      	mov	ip, r2
 8004812:	4463      	add	r3, ip
 8004814:	881a      	ldrh	r2, [r3, #0]
 8004816:	211a      	movs	r1, #26
 8004818:	187b      	adds	r3, r7, r1
 800481a:	0592      	lsls	r2, r2, #22
 800481c:	0d92      	lsrs	r2, r2, #22
 800481e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	187b      	adds	r3, r7, r1
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d307      	bcc.n	800483c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	187b      	adds	r3, r7, r1
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	1ad2      	subs	r2, r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	619a      	str	r2, [r3, #24]
 800483a:	e002      	b.n	8004842 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2200      	movs	r2, #0
 8004840:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d121      	bne.n	800488e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	001a      	movs	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	18d3      	adds	r3, r2, r3
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29a      	uxth	r2, r3
 800485c:	201e      	movs	r0, #30
 800485e:	183b      	adds	r3, r7, r0
 8004860:	4927      	ldr	r1, [pc, #156]	; (8004900 <HAL_PCD_EP_DB_Receive+0x224>)
 8004862:	400a      	ands	r2, r1
 8004864:	801a      	strh	r2, [r3, #0]
 8004866:	183b      	adds	r3, r7, r0
 8004868:	183a      	adds	r2, r7, r0
 800486a:	8812      	ldrh	r2, [r2, #0]
 800486c:	2180      	movs	r1, #128	; 0x80
 800486e:	0189      	lsls	r1, r1, #6
 8004870:	404a      	eors	r2, r1
 8004872:	801a      	strh	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	001a      	movs	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	18d3      	adds	r3, r2, r3
 8004882:	183a      	adds	r2, r7, r0
 8004884:	8812      	ldrh	r2, [r2, #0]
 8004886:	491f      	ldr	r1, [pc, #124]	; (8004904 <HAL_PCD_EP_DB_Receive+0x228>)
 8004888:	430a      	orrs	r2, r1
 800488a:	b292      	uxth	r2, r2
 800488c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800488e:	1dbb      	adds	r3, r7, #6
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	2240      	movs	r2, #64	; 0x40
 8004894:	4013      	ands	r3, r2
 8004896:	d11a      	bne.n	80048ce <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	001a      	movs	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	18d3      	adds	r3, r2, r3
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	201c      	movs	r0, #28
 80048ac:	183b      	adds	r3, r7, r0
 80048ae:	4916      	ldr	r1, [pc, #88]	; (8004908 <HAL_PCD_EP_DB_Receive+0x22c>)
 80048b0:	400a      	ands	r2, r1
 80048b2:	801a      	strh	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	001a      	movs	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	18d3      	adds	r3, r2, r3
 80048c2:	183a      	adds	r2, r7, r0
 80048c4:	8812      	ldrh	r2, [r2, #0]
 80048c6:	4911      	ldr	r1, [pc, #68]	; (800490c <HAL_PCD_EP_DB_Receive+0x230>)
 80048c8:	430a      	orrs	r2, r1
 80048ca:	b292      	uxth	r2, r2
 80048cc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80048ce:	241a      	movs	r4, #26
 80048d0:	193b      	adds	r3, r7, r4
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6959      	ldr	r1, [r3, #20]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	895a      	ldrh	r2, [r3, #10]
 80048e4:	193b      	adds	r3, r7, r4
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	f005 fbe2 	bl	800a0b0 <USB_ReadPMA>
    }
  }

  return count;
 80048ec:	231a      	movs	r3, #26
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	881b      	ldrh	r3, [r3, #0]
}
 80048f2:	0018      	movs	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b009      	add	sp, #36	; 0x24
 80048f8:	bd90      	pop	{r4, r7, pc}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	00000402 	.word	0x00000402
 8004900:	ffffbf8f 	.word	0xffffbf8f
 8004904:	ffff8080 	.word	0xffff8080
 8004908:	ffff8f8f 	.word	0xffff8f8f
 800490c:	ffff80c0 	.word	0xffff80c0
 8004910:	00000406 	.word	0x00000406

08004914 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b0a2      	sub	sp, #136	; 0x88
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	1dbb      	adds	r3, r7, #6
 8004920:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004922:	1dbb      	adds	r3, r7, #6
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	2240      	movs	r2, #64	; 0x40
 8004928:	4013      	ands	r3, r2
 800492a:	d100      	bne.n	800492e <HAL_PCD_EP_DB_Transmit+0x1a>
 800492c:	e1c8      	b.n	8004cc0 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2250      	movs	r2, #80	; 0x50
 8004934:	5a9b      	ldrh	r3, [r3, r2]
 8004936:	b29b      	uxth	r3, r3
 8004938:	001a      	movs	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	18d2      	adds	r2, r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	18d3      	adds	r3, r2, r3
 8004948:	4ad7      	ldr	r2, [pc, #860]	; (8004ca8 <HAL_PCD_EP_DB_Transmit+0x394>)
 800494a:	4694      	mov	ip, r2
 800494c:	4463      	add	r3, ip
 800494e:	881a      	ldrh	r2, [r3, #0]
 8004950:	214e      	movs	r1, #78	; 0x4e
 8004952:	187b      	adds	r3, r7, r1
 8004954:	0592      	lsls	r2, r2, #22
 8004956:	0d92      	lsrs	r2, r2, #22
 8004958:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	187b      	adds	r3, r7, r1
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d907      	bls.n	8004976 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	187b      	adds	r3, r7, r1
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	619a      	str	r2, [r3, #24]
 8004974:	e002      	b.n	800497c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d000      	beq.n	8004986 <HAL_PCD_EP_DB_Transmit+0x72>
 8004984:	e0b5      	b.n	8004af2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d125      	bne.n	80049da <HAL_PCD_EP_DB_Transmit+0xc6>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2250      	movs	r2, #80	; 0x50
 800499a:	5a9b      	ldrh	r3, [r3, r2]
 800499c:	b29b      	uxth	r3, r3
 800499e:	001a      	movs	r2, r3
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	00da      	lsls	r2, r3, #3
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	18d3      	adds	r3, r2, r3
 80049b0:	4abd      	ldr	r2, [pc, #756]	; (8004ca8 <HAL_PCD_EP_DB_Transmit+0x394>)
 80049b2:	4694      	mov	ip, r2
 80049b4:	4463      	add	r3, ip
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4abb      	ldr	r2, [pc, #748]	; (8004cac <HAL_PCD_EP_DB_Transmit+0x398>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	4ab8      	ldr	r2, [pc, #736]	; (8004cb0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	801a      	strh	r2, [r3, #0]
 80049d8:	e01b      	b.n	8004a12 <HAL_PCD_EP_DB_Transmit+0xfe>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d117      	bne.n	8004a12 <HAL_PCD_EP_DB_Transmit+0xfe>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	633b      	str	r3, [r7, #48]	; 0x30
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2250      	movs	r2, #80	; 0x50
 80049ee:	5a9b      	ldrh	r3, [r3, r2]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	001a      	movs	r2, r3
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	189b      	adds	r3, r3, r2
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	00da      	lsls	r2, r3, #3
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	18d3      	adds	r3, r2, r3
 8004a04:	4aa8      	ldr	r2, [pc, #672]	; (8004ca8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004a06:	4694      	mov	ip, r2
 8004a08:	4463      	add	r3, ip
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	2200      	movs	r2, #0
 8004a10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	623b      	str	r3, [r7, #32]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d125      	bne.n	8004a6c <HAL_PCD_EP_DB_Transmit+0x158>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2250      	movs	r2, #80	; 0x50
 8004a2c:	5a9b      	ldrh	r3, [r3, r2]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	001a      	movs	r2, r3
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	189b      	adds	r3, r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	00da      	lsls	r2, r3, #3
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	18d3      	adds	r3, r2, r3
 8004a42:	4a9c      	ldr	r2, [pc, #624]	; (8004cb4 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004a44:	4694      	mov	ip, r2
 8004a46:	4463      	add	r3, ip
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4a96      	ldr	r2, [pc, #600]	; (8004cac <HAL_PCD_EP_DB_Transmit+0x398>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	801a      	strh	r2, [r3, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	4a93      	ldr	r2, [pc, #588]	; (8004cb0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	801a      	strh	r2, [r3, #0]
 8004a6a:	e018      	b.n	8004a9e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	785b      	ldrb	r3, [r3, #1]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d114      	bne.n	8004a9e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2250      	movs	r2, #80	; 0x50
 8004a7a:	5a9b      	ldrh	r3, [r3, r2]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	001a      	movs	r2, r3
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	189b      	adds	r3, r3, r2
 8004a84:	623b      	str	r3, [r7, #32]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	00da      	lsls	r2, r3, #3
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	18d3      	adds	r3, r2, r3
 8004a90:	4a88      	ldr	r2, [pc, #544]	; (8004cb4 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004a92:	4694      	mov	ip, r2
 8004a94:	4463      	add	r3, ip
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	0011      	movs	r1, r2
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	f007 fb06 	bl	800c0b8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004aac:	1dbb      	adds	r3, r7, #6
 8004aae:	881a      	ldrh	r2, [r3, #0]
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	01db      	lsls	r3, r3, #7
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d100      	bne.n	8004aba <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004ab8:	e2d4      	b.n	8005064 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	001a      	movs	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	18d3      	adds	r3, r2, r3
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	2012      	movs	r0, #18
 8004ace:	183b      	adds	r3, r7, r0
 8004ad0:	4979      	ldr	r1, [pc, #484]	; (8004cb8 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	801a      	strh	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	001a      	movs	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	18d3      	adds	r3, r2, r3
 8004ae4:	183a      	adds	r2, r7, r0
 8004ae6:	8812      	ldrh	r2, [r2, #0]
 8004ae8:	4974      	ldr	r1, [pc, #464]	; (8004cbc <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004aea:	430a      	orrs	r2, r1
 8004aec:	b292      	uxth	r2, r2
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	e2b8      	b.n	8005064 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004af2:	1dbb      	adds	r3, r7, #6
 8004af4:	881a      	ldrh	r2, [r3, #0]
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	01db      	lsls	r3, r3, #7
 8004afa:	4013      	ands	r3, r2
 8004afc:	d01a      	beq.n	8004b34 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	001a      	movs	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	18d3      	adds	r3, r2, r3
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	2044      	movs	r0, #68	; 0x44
 8004b12:	183b      	adds	r3, r7, r0
 8004b14:	4968      	ldr	r1, [pc, #416]	; (8004cb8 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004b16:	400a      	ands	r2, r1
 8004b18:	801a      	strh	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	001a      	movs	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	18d3      	adds	r3, r2, r3
 8004b28:	183a      	adds	r2, r7, r0
 8004b2a:	8812      	ldrh	r2, [r2, #0]
 8004b2c:	4963      	ldr	r1, [pc, #396]	; (8004cbc <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	b292      	uxth	r2, r2
 8004b32:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2224      	movs	r2, #36	; 0x24
 8004b38:	5c9b      	ldrb	r3, [r3, r2]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d000      	beq.n	8004b40 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004b3e:	e291      	b.n	8005064 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	214e      	movs	r1, #78	; 0x4e
 8004b46:	187b      	adds	r3, r7, r1
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	18d2      	adds	r2, r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	187b      	adds	r3, r7, r1
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	18d2      	adds	r2, r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d309      	bcc.n	8004b7e <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	6a1a      	ldr	r2, [r3, #32]
 8004b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b76:	1ad2      	subs	r2, r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	621a      	str	r2, [r3, #32]
 8004b7c:	e016      	b.n	8004bac <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d108      	bne.n	8004b98 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8004b86:	234e      	movs	r3, #78	; 0x4e
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2224      	movs	r2, #36	; 0x24
 8004b92:	2100      	movs	r1, #0
 8004b94:	5499      	strb	r1, [r3, r2]
 8004b96:	e009      	b.n	8004bac <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2224      	movs	r2, #36	; 0x24
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	785b      	ldrb	r3, [r3, #1]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d150      	bne.n	8004c56 <HAL_PCD_EP_DB_Transmit+0x342>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2250      	movs	r2, #80	; 0x50
 8004bc0:	5a9b      	ldrh	r3, [r3, r2]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	189b      	adds	r3, r3, r2
 8004bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	00da      	lsls	r2, r3, #3
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	18d3      	adds	r3, r2, r3
 8004bd6:	4a34      	ldr	r2, [pc, #208]	; (8004ca8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004bd8:	4694      	mov	ip, r2
 8004bda:	4463      	add	r3, ip
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d110      	bne.n	8004c06 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8004be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	4a30      	ldr	r2, [pc, #192]	; (8004cac <HAL_PCD_EP_DB_Transmit+0x398>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	801a      	strh	r2, [r3, #0]
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	4a2d      	ldr	r2, [pc, #180]	; (8004cb0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c02:	801a      	strh	r2, [r3, #0]
 8004c04:	e044      	b.n	8004c90 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c08:	2b3e      	cmp	r3, #62	; 0x3e
 8004c0a:	d810      	bhi.n	8004c2e <HAL_PCD_EP_DB_Transmit+0x31a>
 8004c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0e:	085b      	lsrs	r3, r3, #1
 8004c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c14:	2201      	movs	r2, #1
 8004c16:	4013      	ands	r3, r2
 8004c18:	d002      	beq.n	8004c20 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	029b      	lsls	r3, r3, #10
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	801a      	strh	r2, [r3, #0]
 8004c2c:	e030      	b.n	8004c90 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c36:	221f      	movs	r2, #31
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d102      	bne.n	8004c42 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	029b      	lsls	r3, r3, #10
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	4a19      	ldr	r2, [pc, #100]	; (8004cb0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c52:	801a      	strh	r2, [r3, #0]
 8004c54:	e01c      	b.n	8004c90 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d118      	bne.n	8004c90 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	643b      	str	r3, [r7, #64]	; 0x40
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2250      	movs	r2, #80	; 0x50
 8004c6a:	5a9b      	ldrh	r3, [r3, r2]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	001a      	movs	r2, r3
 8004c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	643b      	str	r3, [r7, #64]	; 0x40
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	00da      	lsls	r2, r3, #3
 8004c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7e:	18d3      	adds	r3, r2, r3
 8004c80:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004c82:	4694      	mov	ip, r2
 8004c84:	4463      	add	r3, ip
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c8e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	6959      	ldr	r1, [r3, #20]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	891a      	ldrh	r2, [r3, #8]
 8004c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f005 f9c2 	bl	800a028 <USB_WritePMA>
 8004ca4:	e1de      	b.n	8005064 <HAL_PCD_EP_DB_Transmit+0x750>
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	00000402 	.word	0x00000402
 8004cac:	ffff83ff 	.word	0xffff83ff
 8004cb0:	ffff8000 	.word	0xffff8000
 8004cb4:	00000406 	.word	0x00000406
 8004cb8:	ffff8f8f 	.word	0xffff8f8f
 8004cbc:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2250      	movs	r2, #80	; 0x50
 8004cc6:	5a9b      	ldrh	r3, [r3, r2]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	001a      	movs	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	18d2      	adds	r2, r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	18d3      	adds	r3, r2, r3
 8004cda:	4aca      	ldr	r2, [pc, #808]	; (8005004 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004cdc:	4694      	mov	ip, r2
 8004cde:	4463      	add	r3, ip
 8004ce0:	881a      	ldrh	r2, [r3, #0]
 8004ce2:	214e      	movs	r1, #78	; 0x4e
 8004ce4:	187b      	adds	r3, r7, r1
 8004ce6:	0592      	lsls	r2, r2, #22
 8004ce8:	0d92      	lsrs	r2, r2, #22
 8004cea:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	187b      	adds	r3, r7, r1
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d307      	bcc.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	187b      	adds	r3, r7, r1
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	1ad2      	subs	r2, r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	619a      	str	r2, [r3, #24]
 8004d06:	e002      	b.n	8004d0e <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d000      	beq.n	8004d18 <HAL_PCD_EP_DB_Transmit+0x404>
 8004d16:	e0c0      	b.n	8004e9a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d125      	bne.n	8004d6c <HAL_PCD_EP_DB_Transmit+0x458>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2250      	movs	r2, #80	; 0x50
 8004d2c:	5a9b      	ldrh	r3, [r3, r2]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	001a      	movs	r2, r3
 8004d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d34:	189b      	adds	r3, r3, r2
 8004d36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	00da      	lsls	r2, r3, #3
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	18d3      	adds	r3, r2, r3
 8004d42:	4ab1      	ldr	r2, [pc, #708]	; (8005008 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004d44:	4694      	mov	ip, r2
 8004d46:	4463      	add	r3, ip
 8004d48:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	4aae      	ldr	r2, [pc, #696]	; (800500c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d58:	801a      	strh	r2, [r3, #0]
 8004d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	4aab      	ldr	r2, [pc, #684]	; (8005010 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d68:	801a      	strh	r2, [r3, #0]
 8004d6a:	e01b      	b.n	8004da4 <HAL_PCD_EP_DB_Transmit+0x490>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	785b      	ldrb	r3, [r3, #1]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d117      	bne.n	8004da4 <HAL_PCD_EP_DB_Transmit+0x490>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	677b      	str	r3, [r7, #116]	; 0x74
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2250      	movs	r2, #80	; 0x50
 8004d80:	5a9b      	ldrh	r3, [r3, r2]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	001a      	movs	r2, r3
 8004d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d88:	189b      	adds	r3, r3, r2
 8004d8a:	677b      	str	r3, [r7, #116]	; 0x74
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	00da      	lsls	r2, r3, #3
 8004d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d94:	18d3      	adds	r3, r2, r3
 8004d96:	4a9c      	ldr	r2, [pc, #624]	; (8005008 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004d98:	4694      	mov	ip, r2
 8004d9a:	4463      	add	r3, ip
 8004d9c:	673b      	str	r3, [r7, #112]	; 0x70
 8004d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da0:	2200      	movs	r2, #0
 8004da2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d130      	bne.n	8004e14 <HAL_PCD_EP_DB_Transmit+0x500>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2180      	movs	r1, #128	; 0x80
 8004db8:	187a      	adds	r2, r7, r1
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2250      	movs	r2, #80	; 0x50
 8004dc2:	5a9b      	ldrh	r3, [r3, r2]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	187b      	adds	r3, r7, r1
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	189b      	adds	r3, r3, r2
 8004dce:	187a      	adds	r2, r7, r1
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	00da      	lsls	r2, r3, #3
 8004dd8:	187b      	adds	r3, r7, r1
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	18d3      	adds	r3, r2, r3
 8004dde:	4a89      	ldr	r2, [pc, #548]	; (8005004 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004de0:	4694      	mov	ip, r2
 8004de2:	4463      	add	r3, ip
 8004de4:	2184      	movs	r1, #132	; 0x84
 8004de6:	187a      	adds	r2, r7, r1
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	187b      	adds	r3, r7, r1
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	4a86      	ldr	r2, [pc, #536]	; (800500c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	187b      	adds	r3, r7, r1
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	801a      	strh	r2, [r3, #0]
 8004dfe:	187b      	adds	r3, r7, r1
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	4a82      	ldr	r2, [pc, #520]	; (8005010 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	187b      	adds	r3, r7, r1
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	801a      	strh	r2, [r3, #0]
 8004e12:	e018      	b.n	8004e46 <HAL_PCD_EP_DB_Transmit+0x532>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d114      	bne.n	8004e46 <HAL_PCD_EP_DB_Transmit+0x532>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2250      	movs	r2, #80	; 0x50
 8004e22:	5a9b      	ldrh	r3, [r3, r2]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	001a      	movs	r2, r3
 8004e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	00da      	lsls	r2, r3, #3
 8004e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e36:	18d3      	adds	r3, r2, r3
 8004e38:	4a72      	ldr	r2, [pc, #456]	; (8005004 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004e3a:	4694      	mov	ip, r2
 8004e3c:	4463      	add	r3, ip
 8004e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e42:	2200      	movs	r2, #0
 8004e44:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	781a      	ldrb	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	0011      	movs	r1, r2
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f007 f932 	bl	800c0b8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e54:	1dbb      	adds	r3, r7, #6
 8004e56:	881a      	ldrh	r2, [r3, #0]
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	01db      	lsls	r3, r3, #7
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d000      	beq.n	8004e62 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004e60:	e100      	b.n	8005064 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	001a      	movs	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	18d3      	adds	r3, r2, r3
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	2046      	movs	r0, #70	; 0x46
 8004e76:	183b      	adds	r3, r7, r0
 8004e78:	4966      	ldr	r1, [pc, #408]	; (8005014 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	801a      	strh	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	001a      	movs	r2, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	18d3      	adds	r3, r2, r3
 8004e8c:	183a      	adds	r2, r7, r0
 8004e8e:	8812      	ldrh	r2, [r2, #0]
 8004e90:	4961      	ldr	r1, [pc, #388]	; (8005018 <HAL_PCD_EP_DB_Transmit+0x704>)
 8004e92:	430a      	orrs	r2, r1
 8004e94:	b292      	uxth	r2, r2
 8004e96:	801a      	strh	r2, [r3, #0]
 8004e98:	e0e4      	b.n	8005064 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e9a:	1dbb      	adds	r3, r7, #6
 8004e9c:	881a      	ldrh	r2, [r3, #0]
 8004e9e:	2380      	movs	r3, #128	; 0x80
 8004ea0:	01db      	lsls	r3, r3, #7
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d11a      	bne.n	8004edc <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	001a      	movs	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	18d3      	adds	r3, r2, r3
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	204c      	movs	r0, #76	; 0x4c
 8004eba:	183b      	adds	r3, r7, r0
 8004ebc:	4955      	ldr	r1, [pc, #340]	; (8005014 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	001a      	movs	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	18d3      	adds	r3, r2, r3
 8004ed0:	183a      	adds	r2, r7, r0
 8004ed2:	8812      	ldrh	r2, [r2, #0]
 8004ed4:	4950      	ldr	r1, [pc, #320]	; (8005018 <HAL_PCD_EP_DB_Transmit+0x704>)
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	b292      	uxth	r2, r2
 8004eda:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2224      	movs	r2, #36	; 0x24
 8004ee0:	5c9b      	ldrb	r3, [r3, r2]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d000      	beq.n	8004ee8 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8004ee6:	e0bd      	b.n	8005064 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	695a      	ldr	r2, [r3, #20]
 8004eec:	214e      	movs	r1, #78	; 0x4e
 8004eee:	187b      	adds	r3, r7, r1
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	18d2      	adds	r2, r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	187b      	adds	r3, r7, r1
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	18d2      	adds	r2, r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6a1a      	ldr	r2, [r3, #32]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d309      	bcc.n	8004f26 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	621a      	str	r2, [r3, #32]
 8004f24:	e016      	b.n	8004f54 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d108      	bne.n	8004f40 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8004f2e:	234e      	movs	r3, #78	; 0x4e
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2224      	movs	r2, #36	; 0x24
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	5499      	strb	r1, [r3, r2]
 8004f3e:	e009      	b.n	8004f54 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2224      	movs	r2, #36	; 0x24
 8004f50:	2100      	movs	r1, #0
 8004f52:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	667b      	str	r3, [r7, #100]	; 0x64
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	785b      	ldrb	r3, [r3, #1]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d15c      	bne.n	800501c <HAL_PCD_EP_DB_Transmit+0x708>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2250      	movs	r2, #80	; 0x50
 8004f6e:	5a9b      	ldrh	r3, [r3, r2]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	001a      	movs	r2, r3
 8004f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f76:	189b      	adds	r3, r3, r2
 8004f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	00da      	lsls	r2, r3, #3
 8004f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f82:	18d3      	adds	r3, r2, r3
 8004f84:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004f86:	4694      	mov	ip, r2
 8004f88:	4463      	add	r3, ip
 8004f8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d110      	bne.n	8004fb4 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8004f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4a1c      	ldr	r2, [pc, #112]	; (800500c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa0:	801a      	strh	r2, [r3, #0]
 8004fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb0:	801a      	strh	r2, [r3, #0]
 8004fb2:	e04d      	b.n	8005050 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fb8:	d810      	bhi.n	8004fdc <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	657b      	str	r3, [r7, #84]	; 0x54
 8004fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d002      	beq.n	8004fce <HAL_PCD_EP_DB_Transmit+0x6ba>
 8004fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fca:	3301      	adds	r3, #1
 8004fcc:	657b      	str	r3, [r7, #84]	; 0x54
 8004fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	029b      	lsls	r3, r3, #10
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fd8:	801a      	strh	r2, [r3, #0]
 8004fda:	e039      	b.n	8005050 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8004fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe4:	221f      	movs	r2, #31
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d102      	bne.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8004fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fec:	3b01      	subs	r3, #1
 8004fee:	657b      	str	r3, [r7, #84]	; 0x54
 8004ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	4a05      	ldr	r2, [pc, #20]	; (8005010 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	e025      	b.n	8005050 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005004:	00000406 	.word	0x00000406
 8005008:	00000402 	.word	0x00000402
 800500c:	ffff83ff 	.word	0xffff83ff
 8005010:	ffff8000 	.word	0xffff8000
 8005014:	ffff8f8f 	.word	0xffff8f8f
 8005018:	ffffc080 	.word	0xffffc080
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	785b      	ldrb	r3, [r3, #1]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d115      	bne.n	8005050 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2250      	movs	r2, #80	; 0x50
 800502a:	5a9b      	ldrh	r3, [r3, r2]
 800502c:	b29b      	uxth	r3, r3
 800502e:	001a      	movs	r2, r3
 8005030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005032:	189b      	adds	r3, r3, r2
 8005034:	667b      	str	r3, [r7, #100]	; 0x64
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	00da      	lsls	r2, r3, #3
 800503c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800503e:	18d3      	adds	r3, r2, r3
 8005040:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8005042:	4694      	mov	ip, r2
 8005044:	4463      	add	r3, ip
 8005046:	663b      	str	r3, [r7, #96]	; 0x60
 8005048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800504a:	b29a      	uxth	r2, r3
 800504c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800504e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	6959      	ldr	r1, [r3, #20]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	895a      	ldrh	r2, [r3, #10]
 800505c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800505e:	b29b      	uxth	r3, r3
 8005060:	f004 ffe2 	bl	800a028 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	001a      	movs	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	18d3      	adds	r3, r2, r3
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29a      	uxth	r2, r3
 8005076:	2010      	movs	r0, #16
 8005078:	183b      	adds	r3, r7, r0
 800507a:	4911      	ldr	r1, [pc, #68]	; (80050c0 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 800507c:	400a      	ands	r2, r1
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	183b      	adds	r3, r7, r0
 8005082:	183a      	adds	r2, r7, r0
 8005084:	8812      	ldrh	r2, [r2, #0]
 8005086:	2110      	movs	r1, #16
 8005088:	404a      	eors	r2, r1
 800508a:	801a      	strh	r2, [r3, #0]
 800508c:	183b      	adds	r3, r7, r0
 800508e:	183a      	adds	r2, r7, r0
 8005090:	8812      	ldrh	r2, [r2, #0]
 8005092:	2120      	movs	r1, #32
 8005094:	404a      	eors	r2, r1
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	001a      	movs	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	18d3      	adds	r3, r2, r3
 80050a6:	183a      	adds	r2, r7, r0
 80050a8:	8812      	ldrh	r2, [r2, #0]
 80050aa:	4906      	ldr	r1, [pc, #24]	; (80050c4 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80050ac:	430a      	orrs	r2, r1
 80050ae:	b292      	uxth	r2, r2
 80050b0:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	0018      	movs	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b022      	add	sp, #136	; 0x88
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	00000406 	.word	0x00000406
 80050c0:	ffff8fbf 	.word	0xffff8fbf
 80050c4:	ffff8080 	.word	0xffff8080

080050c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80050c8:	b590      	push	{r4, r7, lr}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	0008      	movs	r0, r1
 80050d2:	0011      	movs	r1, r2
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	240a      	movs	r4, #10
 80050d8:	193b      	adds	r3, r7, r4
 80050da:	1c02      	adds	r2, r0, #0
 80050dc:	801a      	strh	r2, [r3, #0]
 80050de:	2308      	movs	r3, #8
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	1c0a      	adds	r2, r1, #0
 80050e4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80050e6:	0021      	movs	r1, r4
 80050e8:	187b      	adds	r3, r7, r1
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	2280      	movs	r2, #128	; 0x80
 80050ee:	4013      	ands	r3, r2
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00c      	beq.n	8005110 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050f6:	187b      	adds	r3, r7, r1
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	2207      	movs	r2, #7
 80050fc:	4013      	ands	r3, r2
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	0013      	movs	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	189b      	adds	r3, r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	18d3      	adds	r3, r2, r3
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e00b      	b.n	8005128 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005110:	230a      	movs	r3, #10
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	881a      	ldrh	r2, [r3, #0]
 8005116:	0013      	movs	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	189b      	adds	r3, r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	3369      	adds	r3, #105	; 0x69
 8005120:	33ff      	adds	r3, #255	; 0xff
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	18d3      	adds	r3, r2, r3
 8005126:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005128:	2308      	movs	r3, #8
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d107      	bne.n	8005142 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2200      	movs	r2, #0
 8005136:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	b29a      	uxth	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	80da      	strh	r2, [r3, #6]
 8005140:	e00b      	b.n	800515a <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2201      	movs	r2, #1
 8005146:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	b29a      	uxth	r2, r3
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	b29a      	uxth	r2, r3
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	b007      	add	sp, #28
 8005162:	bd90      	pop	{r4, r7, pc}

08005164 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	23ba      	movs	r3, #186	; 0xba
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	2101      	movs	r1, #1
 800517a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	23b8      	movs	r3, #184	; 0xb8
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	2100      	movs	r1, #0
 8005184:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2254      	movs	r2, #84	; 0x54
 800518a:	5a9b      	ldrh	r3, [r3, r2]
 800518c:	b29b      	uxth	r3, r3
 800518e:	2201      	movs	r2, #1
 8005190:	4313      	orrs	r3, r2
 8005192:	b299      	uxth	r1, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2254      	movs	r2, #84	; 0x54
 8005198:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2254      	movs	r2, #84	; 0x54
 800519e:	5a9b      	ldrh	r3, [r3, r2]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2202      	movs	r2, #2
 80051a4:	4313      	orrs	r3, r2
 80051a6:	b299      	uxth	r1, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2254      	movs	r2, #84	; 0x54
 80051ac:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b004      	add	sp, #16
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	000a      	movs	r2, r1
 80051c2:	1cfb      	adds	r3, r7, #3
 80051c4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80051c6:	46c0      	nop			; (mov r8, r8)
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b002      	add	sp, #8
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d102      	bne.n	80051e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f000 fb76 	bl	80058d0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2201      	movs	r2, #1
 80051ea:	4013      	ands	r3, r2
 80051ec:	d100      	bne.n	80051f0 <HAL_RCC_OscConfig+0x20>
 80051ee:	e08e      	b.n	800530e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80051f0:	4bc5      	ldr	r3, [pc, #788]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	220c      	movs	r2, #12
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d00e      	beq.n	800521a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051fc:	4bc2      	ldr	r3, [pc, #776]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	220c      	movs	r2, #12
 8005202:	4013      	ands	r3, r2
 8005204:	2b08      	cmp	r3, #8
 8005206:	d117      	bne.n	8005238 <HAL_RCC_OscConfig+0x68>
 8005208:	4bbf      	ldr	r3, [pc, #764]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	23c0      	movs	r3, #192	; 0xc0
 800520e:	025b      	lsls	r3, r3, #9
 8005210:	401a      	ands	r2, r3
 8005212:	2380      	movs	r3, #128	; 0x80
 8005214:	025b      	lsls	r3, r3, #9
 8005216:	429a      	cmp	r2, r3
 8005218:	d10e      	bne.n	8005238 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521a:	4bbb      	ldr	r3, [pc, #748]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	2380      	movs	r3, #128	; 0x80
 8005220:	029b      	lsls	r3, r3, #10
 8005222:	4013      	ands	r3, r2
 8005224:	d100      	bne.n	8005228 <HAL_RCC_OscConfig+0x58>
 8005226:	e071      	b.n	800530c <HAL_RCC_OscConfig+0x13c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d000      	beq.n	8005232 <HAL_RCC_OscConfig+0x62>
 8005230:	e06c      	b.n	800530c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f000 fb4c 	bl	80058d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d107      	bne.n	8005250 <HAL_RCC_OscConfig+0x80>
 8005240:	4bb1      	ldr	r3, [pc, #708]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	4bb0      	ldr	r3, [pc, #704]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005246:	2180      	movs	r1, #128	; 0x80
 8005248:	0249      	lsls	r1, r1, #9
 800524a:	430a      	orrs	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	e02f      	b.n	80052b0 <HAL_RCC_OscConfig+0xe0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10c      	bne.n	8005272 <HAL_RCC_OscConfig+0xa2>
 8005258:	4bab      	ldr	r3, [pc, #684]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4baa      	ldr	r3, [pc, #680]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800525e:	49ab      	ldr	r1, [pc, #684]	; (800550c <HAL_RCC_OscConfig+0x33c>)
 8005260:	400a      	ands	r2, r1
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	4ba8      	ldr	r3, [pc, #672]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4ba7      	ldr	r3, [pc, #668]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800526a:	49a9      	ldr	r1, [pc, #676]	; (8005510 <HAL_RCC_OscConfig+0x340>)
 800526c:	400a      	ands	r2, r1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e01e      	b.n	80052b0 <HAL_RCC_OscConfig+0xe0>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b05      	cmp	r3, #5
 8005278:	d10e      	bne.n	8005298 <HAL_RCC_OscConfig+0xc8>
 800527a:	4ba3      	ldr	r3, [pc, #652]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4ba2      	ldr	r3, [pc, #648]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	02c9      	lsls	r1, r1, #11
 8005284:	430a      	orrs	r2, r1
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	4b9f      	ldr	r3, [pc, #636]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b9e      	ldr	r3, [pc, #632]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	0249      	lsls	r1, r1, #9
 8005292:	430a      	orrs	r2, r1
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	e00b      	b.n	80052b0 <HAL_RCC_OscConfig+0xe0>
 8005298:	4b9b      	ldr	r3, [pc, #620]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	4b9a      	ldr	r3, [pc, #616]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800529e:	499b      	ldr	r1, [pc, #620]	; (800550c <HAL_RCC_OscConfig+0x33c>)
 80052a0:	400a      	ands	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	4b98      	ldr	r3, [pc, #608]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4b97      	ldr	r3, [pc, #604]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80052aa:	4999      	ldr	r1, [pc, #612]	; (8005510 <HAL_RCC_OscConfig+0x340>)
 80052ac:	400a      	ands	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d014      	beq.n	80052e2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fd f884 	bl	80023c4 <HAL_GetTick>
 80052bc:	0003      	movs	r3, r0
 80052be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c2:	f7fd f87f 	bl	80023c4 <HAL_GetTick>
 80052c6:	0002      	movs	r2, r0
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b64      	cmp	r3, #100	; 0x64
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e2fd      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d4:	4b8c      	ldr	r3, [pc, #560]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	029b      	lsls	r3, r3, #10
 80052dc:	4013      	ands	r3, r2
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0xf2>
 80052e0:	e015      	b.n	800530e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e2:	f7fd f86f 	bl	80023c4 <HAL_GetTick>
 80052e6:	0003      	movs	r3, r0
 80052e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fd f86a 	bl	80023c4 <HAL_GetTick>
 80052f0:	0002      	movs	r2, r0
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e2e8      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	4b82      	ldr	r3, [pc, #520]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	2380      	movs	r3, #128	; 0x80
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	4013      	ands	r3, r2
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x11c>
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2202      	movs	r2, #2
 8005314:	4013      	ands	r3, r2
 8005316:	d100      	bne.n	800531a <HAL_RCC_OscConfig+0x14a>
 8005318:	e06c      	b.n	80053f4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800531a:	4b7b      	ldr	r3, [pc, #492]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	220c      	movs	r2, #12
 8005320:	4013      	ands	r3, r2
 8005322:	d00e      	beq.n	8005342 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005324:	4b78      	ldr	r3, [pc, #480]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	220c      	movs	r2, #12
 800532a:	4013      	ands	r3, r2
 800532c:	2b08      	cmp	r3, #8
 800532e:	d11f      	bne.n	8005370 <HAL_RCC_OscConfig+0x1a0>
 8005330:	4b75      	ldr	r3, [pc, #468]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	23c0      	movs	r3, #192	; 0xc0
 8005336:	025b      	lsls	r3, r3, #9
 8005338:	401a      	ands	r2, r3
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	429a      	cmp	r2, r3
 8005340:	d116      	bne.n	8005370 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005342:	4b71      	ldr	r3, [pc, #452]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2202      	movs	r2, #2
 8005348:	4013      	ands	r3, r2
 800534a:	d005      	beq.n	8005358 <HAL_RCC_OscConfig+0x188>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d001      	beq.n	8005358 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e2bb      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005358:	4b6b      	ldr	r3, [pc, #428]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	22f8      	movs	r2, #248	; 0xf8
 800535e:	4393      	bics	r3, r2
 8005360:	0019      	movs	r1, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	00da      	lsls	r2, r3, #3
 8005368:	4b67      	ldr	r3, [pc, #412]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800536a:	430a      	orrs	r2, r1
 800536c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536e:	e041      	b.n	80053f4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d024      	beq.n	80053c2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005378:	4b63      	ldr	r3, [pc, #396]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b62      	ldr	r3, [pc, #392]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800537e:	2101      	movs	r1, #1
 8005380:	430a      	orrs	r2, r1
 8005382:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7fd f81e 	bl	80023c4 <HAL_GetTick>
 8005388:	0003      	movs	r3, r0
 800538a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800538e:	f7fd f819 	bl	80023c4 <HAL_GetTick>
 8005392:	0002      	movs	r2, r0
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e297      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a0:	4b59      	ldr	r3, [pc, #356]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2202      	movs	r2, #2
 80053a6:	4013      	ands	r3, r2
 80053a8:	d0f1      	beq.n	800538e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053aa:	4b57      	ldr	r3, [pc, #348]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	22f8      	movs	r2, #248	; 0xf8
 80053b0:	4393      	bics	r3, r2
 80053b2:	0019      	movs	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	00da      	lsls	r2, r3, #3
 80053ba:	4b53      	ldr	r3, [pc, #332]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80053bc:	430a      	orrs	r2, r1
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	e018      	b.n	80053f4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053c2:	4b51      	ldr	r3, [pc, #324]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4b50      	ldr	r3, [pc, #320]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80053c8:	2101      	movs	r1, #1
 80053ca:	438a      	bics	r2, r1
 80053cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fc fff9 	bl	80023c4 <HAL_GetTick>
 80053d2:	0003      	movs	r3, r0
 80053d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d8:	f7fc fff4 	bl	80023c4 <HAL_GetTick>
 80053dc:	0002      	movs	r2, r0
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e272      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ea:	4b47      	ldr	r3, [pc, #284]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2202      	movs	r2, #2
 80053f0:	4013      	ands	r3, r2
 80053f2:	d1f1      	bne.n	80053d8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2208      	movs	r2, #8
 80053fa:	4013      	ands	r3, r2
 80053fc:	d036      	beq.n	800546c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d019      	beq.n	800543a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005406:	4b40      	ldr	r3, [pc, #256]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800540a:	4b3f      	ldr	r3, [pc, #252]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800540c:	2101      	movs	r1, #1
 800540e:	430a      	orrs	r2, r1
 8005410:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005412:	f7fc ffd7 	bl	80023c4 <HAL_GetTick>
 8005416:	0003      	movs	r3, r0
 8005418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800541c:	f7fc ffd2 	bl	80023c4 <HAL_GetTick>
 8005420:	0002      	movs	r2, r0
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e250      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542e:	4b36      	ldr	r3, [pc, #216]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	2202      	movs	r2, #2
 8005434:	4013      	ands	r3, r2
 8005436:	d0f1      	beq.n	800541c <HAL_RCC_OscConfig+0x24c>
 8005438:	e018      	b.n	800546c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800543a:	4b33      	ldr	r3, [pc, #204]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800543c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800543e:	4b32      	ldr	r3, [pc, #200]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005440:	2101      	movs	r1, #1
 8005442:	438a      	bics	r2, r1
 8005444:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005446:	f7fc ffbd 	bl	80023c4 <HAL_GetTick>
 800544a:	0003      	movs	r3, r0
 800544c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005450:	f7fc ffb8 	bl	80023c4 <HAL_GetTick>
 8005454:	0002      	movs	r2, r0
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e236      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005462:	4b29      	ldr	r3, [pc, #164]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2202      	movs	r2, #2
 8005468:	4013      	ands	r3, r2
 800546a:	d1f1      	bne.n	8005450 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2204      	movs	r2, #4
 8005472:	4013      	ands	r3, r2
 8005474:	d100      	bne.n	8005478 <HAL_RCC_OscConfig+0x2a8>
 8005476:	e0b5      	b.n	80055e4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005478:	201f      	movs	r0, #31
 800547a:	183b      	adds	r3, r7, r0
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005480:	4b21      	ldr	r3, [pc, #132]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005482:	69da      	ldr	r2, [r3, #28]
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	055b      	lsls	r3, r3, #21
 8005488:	4013      	ands	r3, r2
 800548a:	d110      	bne.n	80054ae <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548c:	4b1e      	ldr	r3, [pc, #120]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 8005492:	2180      	movs	r1, #128	; 0x80
 8005494:	0549      	lsls	r1, r1, #21
 8005496:	430a      	orrs	r2, r1
 8005498:	61da      	str	r2, [r3, #28]
 800549a:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	2380      	movs	r3, #128	; 0x80
 80054a0:	055b      	lsls	r3, r3, #21
 80054a2:	4013      	ands	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054a8:	183b      	adds	r3, r7, r0
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ae:	4b19      	ldr	r3, [pc, #100]	; (8005514 <HAL_RCC_OscConfig+0x344>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	2380      	movs	r3, #128	; 0x80
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4013      	ands	r3, r2
 80054b8:	d11a      	bne.n	80054f0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ba:	4b16      	ldr	r3, [pc, #88]	; (8005514 <HAL_RCC_OscConfig+0x344>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b15      	ldr	r3, [pc, #84]	; (8005514 <HAL_RCC_OscConfig+0x344>)
 80054c0:	2180      	movs	r1, #128	; 0x80
 80054c2:	0049      	lsls	r1, r1, #1
 80054c4:	430a      	orrs	r2, r1
 80054c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c8:	f7fc ff7c 	bl	80023c4 <HAL_GetTick>
 80054cc:	0003      	movs	r3, r0
 80054ce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d2:	f7fc ff77 	bl	80023c4 <HAL_GetTick>
 80054d6:	0002      	movs	r2, r0
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b64      	cmp	r3, #100	; 0x64
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e1f5      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_OscConfig+0x344>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	4013      	ands	r3, r2
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10f      	bne.n	8005518 <HAL_RCC_OscConfig+0x348>
 80054f8:	4b03      	ldr	r3, [pc, #12]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80054fa:	6a1a      	ldr	r2, [r3, #32]
 80054fc:	4b02      	ldr	r3, [pc, #8]	; (8005508 <HAL_RCC_OscConfig+0x338>)
 80054fe:	2101      	movs	r1, #1
 8005500:	430a      	orrs	r2, r1
 8005502:	621a      	str	r2, [r3, #32]
 8005504:	e036      	b.n	8005574 <HAL_RCC_OscConfig+0x3a4>
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	40021000 	.word	0x40021000
 800550c:	fffeffff 	.word	0xfffeffff
 8005510:	fffbffff 	.word	0xfffbffff
 8005514:	40007000 	.word	0x40007000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10c      	bne.n	800553a <HAL_RCC_OscConfig+0x36a>
 8005520:	4bca      	ldr	r3, [pc, #808]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	4bc9      	ldr	r3, [pc, #804]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005526:	2101      	movs	r1, #1
 8005528:	438a      	bics	r2, r1
 800552a:	621a      	str	r2, [r3, #32]
 800552c:	4bc7      	ldr	r3, [pc, #796]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800552e:	6a1a      	ldr	r2, [r3, #32]
 8005530:	4bc6      	ldr	r3, [pc, #792]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005532:	2104      	movs	r1, #4
 8005534:	438a      	bics	r2, r1
 8005536:	621a      	str	r2, [r3, #32]
 8005538:	e01c      	b.n	8005574 <HAL_RCC_OscConfig+0x3a4>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b05      	cmp	r3, #5
 8005540:	d10c      	bne.n	800555c <HAL_RCC_OscConfig+0x38c>
 8005542:	4bc2      	ldr	r3, [pc, #776]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005544:	6a1a      	ldr	r2, [r3, #32]
 8005546:	4bc1      	ldr	r3, [pc, #772]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005548:	2104      	movs	r1, #4
 800554a:	430a      	orrs	r2, r1
 800554c:	621a      	str	r2, [r3, #32]
 800554e:	4bbf      	ldr	r3, [pc, #764]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	4bbe      	ldr	r3, [pc, #760]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005554:	2101      	movs	r1, #1
 8005556:	430a      	orrs	r2, r1
 8005558:	621a      	str	r2, [r3, #32]
 800555a:	e00b      	b.n	8005574 <HAL_RCC_OscConfig+0x3a4>
 800555c:	4bbb      	ldr	r3, [pc, #748]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800555e:	6a1a      	ldr	r2, [r3, #32]
 8005560:	4bba      	ldr	r3, [pc, #744]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005562:	2101      	movs	r1, #1
 8005564:	438a      	bics	r2, r1
 8005566:	621a      	str	r2, [r3, #32]
 8005568:	4bb8      	ldr	r3, [pc, #736]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800556a:	6a1a      	ldr	r2, [r3, #32]
 800556c:	4bb7      	ldr	r3, [pc, #732]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800556e:	2104      	movs	r1, #4
 8005570:	438a      	bics	r2, r1
 8005572:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d014      	beq.n	80055a6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800557c:	f7fc ff22 	bl	80023c4 <HAL_GetTick>
 8005580:	0003      	movs	r3, r0
 8005582:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005584:	e009      	b.n	800559a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005586:	f7fc ff1d 	bl	80023c4 <HAL_GetTick>
 800558a:	0002      	movs	r2, r0
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	4aaf      	ldr	r2, [pc, #700]	; (8005850 <HAL_RCC_OscConfig+0x680>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e19a      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559a:	4bac      	ldr	r3, [pc, #688]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	2202      	movs	r2, #2
 80055a0:	4013      	ands	r3, r2
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0x3b6>
 80055a4:	e013      	b.n	80055ce <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a6:	f7fc ff0d 	bl	80023c4 <HAL_GetTick>
 80055aa:	0003      	movs	r3, r0
 80055ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ae:	e009      	b.n	80055c4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b0:	f7fc ff08 	bl	80023c4 <HAL_GetTick>
 80055b4:	0002      	movs	r2, r0
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	4aa5      	ldr	r2, [pc, #660]	; (8005850 <HAL_RCC_OscConfig+0x680>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e185      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055c4:	4ba1      	ldr	r3, [pc, #644]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	2202      	movs	r2, #2
 80055ca:	4013      	ands	r3, r2
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055ce:	231f      	movs	r3, #31
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d105      	bne.n	80055e4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d8:	4b9c      	ldr	r3, [pc, #624]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	4b9b      	ldr	r3, [pc, #620]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80055de:	499d      	ldr	r1, [pc, #628]	; (8005854 <HAL_RCC_OscConfig+0x684>)
 80055e0:	400a      	ands	r2, r1
 80055e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2210      	movs	r2, #16
 80055ea:	4013      	ands	r3, r2
 80055ec:	d063      	beq.n	80056b6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d12a      	bne.n	800564c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80055f6:	4b95      	ldr	r3, [pc, #596]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80055f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055fa:	4b94      	ldr	r3, [pc, #592]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80055fc:	2104      	movs	r1, #4
 80055fe:	430a      	orrs	r2, r1
 8005600:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005602:	4b92      	ldr	r3, [pc, #584]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005606:	4b91      	ldr	r3, [pc, #580]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005608:	2101      	movs	r1, #1
 800560a:	430a      	orrs	r2, r1
 800560c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800560e:	f7fc fed9 	bl	80023c4 <HAL_GetTick>
 8005612:	0003      	movs	r3, r0
 8005614:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005618:	f7fc fed4 	bl	80023c4 <HAL_GetTick>
 800561c:	0002      	movs	r2, r0
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e152      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800562a:	4b88      	ldr	r3, [pc, #544]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800562c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562e:	2202      	movs	r2, #2
 8005630:	4013      	ands	r3, r2
 8005632:	d0f1      	beq.n	8005618 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005634:	4b85      	ldr	r3, [pc, #532]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005638:	22f8      	movs	r2, #248	; 0xf8
 800563a:	4393      	bics	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	00da      	lsls	r2, r3, #3
 8005644:	4b81      	ldr	r3, [pc, #516]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005646:	430a      	orrs	r2, r1
 8005648:	635a      	str	r2, [r3, #52]	; 0x34
 800564a:	e034      	b.n	80056b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	3305      	adds	r3, #5
 8005652:	d111      	bne.n	8005678 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005654:	4b7d      	ldr	r3, [pc, #500]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005658:	4b7c      	ldr	r3, [pc, #496]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800565a:	2104      	movs	r1, #4
 800565c:	438a      	bics	r2, r1
 800565e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005660:	4b7a      	ldr	r3, [pc, #488]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	22f8      	movs	r2, #248	; 0xf8
 8005666:	4393      	bics	r3, r2
 8005668:	0019      	movs	r1, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	00da      	lsls	r2, r3, #3
 8005670:	4b76      	ldr	r3, [pc, #472]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005672:	430a      	orrs	r2, r1
 8005674:	635a      	str	r2, [r3, #52]	; 0x34
 8005676:	e01e      	b.n	80056b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005678:	4b74      	ldr	r3, [pc, #464]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800567a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800567c:	4b73      	ldr	r3, [pc, #460]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800567e:	2104      	movs	r1, #4
 8005680:	430a      	orrs	r2, r1
 8005682:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005684:	4b71      	ldr	r3, [pc, #452]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005688:	4b70      	ldr	r3, [pc, #448]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800568a:	2101      	movs	r1, #1
 800568c:	438a      	bics	r2, r1
 800568e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005690:	f7fc fe98 	bl	80023c4 <HAL_GetTick>
 8005694:	0003      	movs	r3, r0
 8005696:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800569a:	f7fc fe93 	bl	80023c4 <HAL_GetTick>
 800569e:	0002      	movs	r2, r0
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e111      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80056ac:	4b67      	ldr	r3, [pc, #412]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80056ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b0:	2202      	movs	r2, #2
 80056b2:	4013      	ands	r3, r2
 80056b4:	d1f1      	bne.n	800569a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2220      	movs	r2, #32
 80056bc:	4013      	ands	r3, r2
 80056be:	d05c      	beq.n	800577a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80056c0:	4b62      	ldr	r3, [pc, #392]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	220c      	movs	r2, #12
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b0c      	cmp	r3, #12
 80056ca:	d00e      	beq.n	80056ea <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80056cc:	4b5f      	ldr	r3, [pc, #380]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	220c      	movs	r2, #12
 80056d2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d114      	bne.n	8005702 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80056d8:	4b5c      	ldr	r3, [pc, #368]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	23c0      	movs	r3, #192	; 0xc0
 80056de:	025b      	lsls	r3, r3, #9
 80056e0:	401a      	ands	r2, r3
 80056e2:	23c0      	movs	r3, #192	; 0xc0
 80056e4:	025b      	lsls	r3, r3, #9
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d10b      	bne.n	8005702 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80056ea:	4b58      	ldr	r3, [pc, #352]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80056ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	025b      	lsls	r3, r3, #9
 80056f2:	4013      	ands	r3, r2
 80056f4:	d040      	beq.n	8005778 <HAL_RCC_OscConfig+0x5a8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d03c      	beq.n	8005778 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e0e6      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01b      	beq.n	8005742 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800570a:	4b50      	ldr	r3, [pc, #320]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800570c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570e:	4b4f      	ldr	r3, [pc, #316]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005710:	2180      	movs	r1, #128	; 0x80
 8005712:	0249      	lsls	r1, r1, #9
 8005714:	430a      	orrs	r2, r1
 8005716:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005718:	f7fc fe54 	bl	80023c4 <HAL_GetTick>
 800571c:	0003      	movs	r3, r0
 800571e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005722:	f7fc fe4f 	bl	80023c4 <HAL_GetTick>
 8005726:	0002      	movs	r2, r0
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e0cd      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005734:	4b45      	ldr	r3, [pc, #276]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	025b      	lsls	r3, r3, #9
 800573c:	4013      	ands	r3, r2
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x552>
 8005740:	e01b      	b.n	800577a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005742:	4b42      	ldr	r3, [pc, #264]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005746:	4b41      	ldr	r3, [pc, #260]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005748:	4943      	ldr	r1, [pc, #268]	; (8005858 <HAL_RCC_OscConfig+0x688>)
 800574a:	400a      	ands	r2, r1
 800574c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574e:	f7fc fe39 	bl	80023c4 <HAL_GetTick>
 8005752:	0003      	movs	r3, r0
 8005754:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005758:	f7fc fe34 	bl	80023c4 <HAL_GetTick>
 800575c:	0002      	movs	r2, r0
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e0b2      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800576a:	4b38      	ldr	r3, [pc, #224]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800576c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576e:	2380      	movs	r3, #128	; 0x80
 8005770:	025b      	lsls	r3, r3, #9
 8005772:	4013      	ands	r3, r2
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x588>
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005778:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	2b00      	cmp	r3, #0
 8005780:	d100      	bne.n	8005784 <HAL_RCC_OscConfig+0x5b4>
 8005782:	e0a4      	b.n	80058ce <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005784:	4b31      	ldr	r3, [pc, #196]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	220c      	movs	r2, #12
 800578a:	4013      	ands	r3, r2
 800578c:	2b08      	cmp	r3, #8
 800578e:	d100      	bne.n	8005792 <HAL_RCC_OscConfig+0x5c2>
 8005790:	e078      	b.n	8005884 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	2b02      	cmp	r3, #2
 8005798:	d14c      	bne.n	8005834 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579a:	4b2c      	ldr	r3, [pc, #176]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b2b      	ldr	r3, [pc, #172]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80057a0:	492e      	ldr	r1, [pc, #184]	; (800585c <HAL_RCC_OscConfig+0x68c>)
 80057a2:	400a      	ands	r2, r1
 80057a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fc fe0d 	bl	80023c4 <HAL_GetTick>
 80057aa:	0003      	movs	r3, r0
 80057ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fc fe08 	bl	80023c4 <HAL_GetTick>
 80057b4:	0002      	movs	r2, r0
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e086      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c2:	4b22      	ldr	r3, [pc, #136]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	2380      	movs	r3, #128	; 0x80
 80057c8:	049b      	lsls	r3, r3, #18
 80057ca:	4013      	ands	r3, r2
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057ce:	4b1f      	ldr	r3, [pc, #124]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	220f      	movs	r2, #15
 80057d4:	4393      	bics	r3, r2
 80057d6:	0019      	movs	r1, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057dc:	4b1b      	ldr	r3, [pc, #108]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80057de:	430a      	orrs	r2, r1
 80057e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80057e2:	4b1a      	ldr	r3, [pc, #104]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <HAL_RCC_OscConfig+0x690>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	0019      	movs	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	431a      	orrs	r2, r3
 80057f6:	4b15      	ldr	r3, [pc, #84]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057fc:	4b13      	ldr	r3, [pc, #76]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4b12      	ldr	r3, [pc, #72]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005802:	2180      	movs	r1, #128	; 0x80
 8005804:	0449      	lsls	r1, r1, #17
 8005806:	430a      	orrs	r2, r1
 8005808:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580a:	f7fc fddb 	bl	80023c4 <HAL_GetTick>
 800580e:	0003      	movs	r3, r0
 8005810:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005814:	f7fc fdd6 	bl	80023c4 <HAL_GetTick>
 8005818:	0002      	movs	r2, r0
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e054      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	2380      	movs	r3, #128	; 0x80
 800582c:	049b      	lsls	r3, r3, #18
 800582e:	4013      	ands	r3, r2
 8005830:	d0f0      	beq.n	8005814 <HAL_RCC_OscConfig+0x644>
 8005832:	e04c      	b.n	80058ce <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4b04      	ldr	r3, [pc, #16]	; (800584c <HAL_RCC_OscConfig+0x67c>)
 800583a:	4908      	ldr	r1, [pc, #32]	; (800585c <HAL_RCC_OscConfig+0x68c>)
 800583c:	400a      	ands	r2, r1
 800583e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005840:	f7fc fdc0 	bl	80023c4 <HAL_GetTick>
 8005844:	0003      	movs	r3, r0
 8005846:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005848:	e015      	b.n	8005876 <HAL_RCC_OscConfig+0x6a6>
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	40021000 	.word	0x40021000
 8005850:	00001388 	.word	0x00001388
 8005854:	efffffff 	.word	0xefffffff
 8005858:	fffeffff 	.word	0xfffeffff
 800585c:	feffffff 	.word	0xfeffffff
 8005860:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005864:	f7fc fdae 	bl	80023c4 <HAL_GetTick>
 8005868:	0002      	movs	r2, r0
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e02c      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005876:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <HAL_RCC_OscConfig+0x708>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	049b      	lsls	r3, r3, #18
 800587e:	4013      	ands	r3, r2
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x694>
 8005882:	e024      	b.n	80058ce <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e01f      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005890:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <HAL_RCC_OscConfig+0x708>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005896:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <HAL_RCC_OscConfig+0x708>)
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	23c0      	movs	r3, #192	; 0xc0
 80058a0:	025b      	lsls	r3, r3, #9
 80058a2:	401a      	ands	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d10e      	bne.n	80058ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	220f      	movs	r2, #15
 80058b0:	401a      	ands	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d107      	bne.n	80058ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	23f0      	movs	r3, #240	; 0xf0
 80058be:	039b      	lsls	r3, r3, #14
 80058c0:	401a      	ands	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d001      	beq.n	80058ce <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	0018      	movs	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b008      	add	sp, #32
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40021000 	.word	0x40021000

080058dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0bf      	b.n	8005a70 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058f0:	4b61      	ldr	r3, [pc, #388]	; (8005a78 <HAL_RCC_ClockConfig+0x19c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2201      	movs	r2, #1
 80058f6:	4013      	ands	r3, r2
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d911      	bls.n	8005922 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fe:	4b5e      	ldr	r3, [pc, #376]	; (8005a78 <HAL_RCC_ClockConfig+0x19c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2201      	movs	r2, #1
 8005904:	4393      	bics	r3, r2
 8005906:	0019      	movs	r1, r3
 8005908:	4b5b      	ldr	r3, [pc, #364]	; (8005a78 <HAL_RCC_ClockConfig+0x19c>)
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005910:	4b59      	ldr	r3, [pc, #356]	; (8005a78 <HAL_RCC_ClockConfig+0x19c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2201      	movs	r2, #1
 8005916:	4013      	ands	r3, r2
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d001      	beq.n	8005922 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e0a6      	b.n	8005a70 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2202      	movs	r2, #2
 8005928:	4013      	ands	r3, r2
 800592a:	d015      	beq.n	8005958 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2204      	movs	r2, #4
 8005932:	4013      	ands	r3, r2
 8005934:	d006      	beq.n	8005944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005936:	4b51      	ldr	r3, [pc, #324]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	4b50      	ldr	r3, [pc, #320]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 800593c:	21e0      	movs	r1, #224	; 0xe0
 800593e:	00c9      	lsls	r1, r1, #3
 8005940:	430a      	orrs	r2, r1
 8005942:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005944:	4b4d      	ldr	r3, [pc, #308]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	22f0      	movs	r2, #240	; 0xf0
 800594a:	4393      	bics	r3, r2
 800594c:	0019      	movs	r1, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	4b4a      	ldr	r3, [pc, #296]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2201      	movs	r2, #1
 800595e:	4013      	ands	r3, r2
 8005960:	d04c      	beq.n	80059fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d107      	bne.n	800597a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596a:	4b44      	ldr	r3, [pc, #272]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	2380      	movs	r3, #128	; 0x80
 8005970:	029b      	lsls	r3, r3, #10
 8005972:	4013      	ands	r3, r2
 8005974:	d120      	bne.n	80059b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e07a      	b.n	8005a70 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d107      	bne.n	8005992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005982:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	049b      	lsls	r3, r3, #18
 800598a:	4013      	ands	r3, r2
 800598c:	d114      	bne.n	80059b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e06e      	b.n	8005a70 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d107      	bne.n	80059aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800599a:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 800599c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599e:	2380      	movs	r3, #128	; 0x80
 80059a0:	025b      	lsls	r3, r3, #9
 80059a2:	4013      	ands	r3, r2
 80059a4:	d108      	bne.n	80059b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e062      	b.n	8005a70 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059aa:	4b34      	ldr	r3, [pc, #208]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2202      	movs	r2, #2
 80059b0:	4013      	ands	r3, r2
 80059b2:	d101      	bne.n	80059b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e05b      	b.n	8005a70 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059b8:	4b30      	ldr	r3, [pc, #192]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2203      	movs	r2, #3
 80059be:	4393      	bics	r3, r2
 80059c0:	0019      	movs	r1, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	4b2d      	ldr	r3, [pc, #180]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059cc:	f7fc fcfa 	bl	80023c4 <HAL_GetTick>
 80059d0:	0003      	movs	r3, r0
 80059d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059d4:	e009      	b.n	80059ea <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d6:	f7fc fcf5 	bl	80023c4 <HAL_GetTick>
 80059da:	0002      	movs	r2, r0
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	4a27      	ldr	r2, [pc, #156]	; (8005a80 <HAL_RCC_ClockConfig+0x1a4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e042      	b.n	8005a70 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ea:	4b24      	ldr	r3, [pc, #144]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	220c      	movs	r2, #12
 80059f0:	401a      	ands	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d1ec      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059fc:	4b1e      	ldr	r3, [pc, #120]	; (8005a78 <HAL_RCC_ClockConfig+0x19c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2201      	movs	r2, #1
 8005a02:	4013      	ands	r3, r2
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d211      	bcs.n	8005a2e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <HAL_RCC_ClockConfig+0x19c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	4393      	bics	r3, r2
 8005a12:	0019      	movs	r1, r3
 8005a14:	4b18      	ldr	r3, [pc, #96]	; (8005a78 <HAL_RCC_ClockConfig+0x19c>)
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a1c:	4b16      	ldr	r3, [pc, #88]	; (8005a78 <HAL_RCC_ClockConfig+0x19c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2201      	movs	r2, #1
 8005a22:	4013      	ands	r3, r2
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d001      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e020      	b.n	8005a70 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2204      	movs	r2, #4
 8005a34:	4013      	ands	r3, r2
 8005a36:	d009      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a38:	4b10      	ldr	r3, [pc, #64]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a11      	ldr	r2, [pc, #68]	; (8005a84 <HAL_RCC_ClockConfig+0x1a8>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	0019      	movs	r1, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a4c:	f000 f820 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8005a50:	0001      	movs	r1, r0
 8005a52:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <HAL_RCC_ClockConfig+0x1a0>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	091b      	lsrs	r3, r3, #4
 8005a58:	220f      	movs	r2, #15
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	4a0a      	ldr	r2, [pc, #40]	; (8005a88 <HAL_RCC_ClockConfig+0x1ac>)
 8005a5e:	5cd3      	ldrb	r3, [r2, r3]
 8005a60:	000a      	movs	r2, r1
 8005a62:	40da      	lsrs	r2, r3
 8005a64:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <HAL_RCC_ClockConfig+0x1b0>)
 8005a66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005a68:	2003      	movs	r0, #3
 8005a6a:	f7fc fc65 	bl	8002338 <HAL_InitTick>
  
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	0018      	movs	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b004      	add	sp, #16
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40022000 	.word	0x40022000
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	00001388 	.word	0x00001388
 8005a84:	fffff8ff 	.word	0xfffff8ff
 8005a88:	0800d0e0 	.word	0x0800d0e0
 8005a8c:	20000000 	.word	0x20000000

08005a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b08f      	sub	sp, #60	; 0x3c
 8005a94:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005a96:	2314      	movs	r3, #20
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	4a38      	ldr	r2, [pc, #224]	; (8005b7c <HAL_RCC_GetSysClockFreq+0xec>)
 8005a9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005a9e:	c313      	stmia	r3!, {r0, r1, r4}
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005aa4:	1d3b      	adds	r3, r7, #4
 8005aa6:	4a36      	ldr	r2, [pc, #216]	; (8005b80 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005aa8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005aaa:	c313      	stmia	r3!, {r0, r1, r4}
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab8:	2300      	movs	r3, #0
 8005aba:	637b      	str	r3, [r7, #52]	; 0x34
 8005abc:	2300      	movs	r3, #0
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005ac4:	4b2f      	ldr	r3, [pc, #188]	; (8005b84 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	220c      	movs	r2, #12
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b0c      	cmp	r3, #12
 8005ad2:	d047      	beq.n	8005b64 <HAL_RCC_GetSysClockFreq+0xd4>
 8005ad4:	d849      	bhi.n	8005b6a <HAL_RCC_GetSysClockFreq+0xda>
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d002      	beq.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x50>
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d003      	beq.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x56>
 8005ade:	e044      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ae0:	4b29      	ldr	r3, [pc, #164]	; (8005b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ae2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ae4:	e044      	b.n	8005b70 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	0c9b      	lsrs	r3, r3, #18
 8005aea:	220f      	movs	r2, #15
 8005aec:	4013      	ands	r3, r2
 8005aee:	2214      	movs	r2, #20
 8005af0:	18ba      	adds	r2, r7, r2
 8005af2:	5cd3      	ldrb	r3, [r2, r3]
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005af6:	4b23      	ldr	r3, [pc, #140]	; (8005b84 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	220f      	movs	r2, #15
 8005afc:	4013      	ands	r3, r2
 8005afe:	1d3a      	adds	r2, r7, #4
 8005b00:	5cd3      	ldrb	r3, [r2, r3]
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b06:	23c0      	movs	r3, #192	; 0xc0
 8005b08:	025b      	lsls	r3, r3, #9
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	025b      	lsls	r3, r3, #9
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d109      	bne.n	8005b28 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b16:	481c      	ldr	r0, [pc, #112]	; (8005b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b18:	f7fa fb08 	bl	800012c <__udivsi3>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	001a      	movs	r2, r3
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	4353      	muls	r3, r2
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
 8005b26:	e01a      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b2a:	23c0      	movs	r3, #192	; 0xc0
 8005b2c:	025b      	lsls	r3, r3, #9
 8005b2e:	401a      	ands	r2, r3
 8005b30:	23c0      	movs	r3, #192	; 0xc0
 8005b32:	025b      	lsls	r3, r3, #9
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d109      	bne.n	8005b4c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b3a:	4814      	ldr	r0, [pc, #80]	; (8005b8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b3c:	f7fa faf6 	bl	800012c <__udivsi3>
 8005b40:	0003      	movs	r3, r0
 8005b42:	001a      	movs	r2, r3
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	4353      	muls	r3, r2
 8005b48:	637b      	str	r3, [r7, #52]	; 0x34
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b4e:	4810      	ldr	r0, [pc, #64]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b50:	f7fa faec 	bl	800012c <__udivsi3>
 8005b54:	0003      	movs	r3, r0
 8005b56:	001a      	movs	r2, r3
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	4353      	muls	r3, r2
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b62:	e005      	b.n	8005b70 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005b64:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b68:	e002      	b.n	8005b70 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b6a:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b6e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005b72:	0018      	movs	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b00f      	add	sp, #60	; 0x3c
 8005b78:	bd90      	pop	{r4, r7, pc}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	0800d000 	.word	0x0800d000
 8005b80:	0800d010 	.word	0x0800d010
 8005b84:	40021000 	.word	0x40021000
 8005b88:	00f42400 	.word	0x00f42400
 8005b8c:	02dc6c00 	.word	0x02dc6c00
 8005b90:	007a1200 	.word	0x007a1200

08005b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b98:	4b02      	ldr	r3, [pc, #8]	; (8005ba4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
}
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	20000000 	.word	0x20000000

08005ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005bac:	f7ff fff2 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8005bb0:	0001      	movs	r1, r0
 8005bb2:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	0a1b      	lsrs	r3, r3, #8
 8005bb8:	2207      	movs	r2, #7
 8005bba:	4013      	ands	r3, r2
 8005bbc:	4a04      	ldr	r2, [pc, #16]	; (8005bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bbe:	5cd3      	ldrb	r3, [r2, r3]
 8005bc0:	40d9      	lsrs	r1, r3
 8005bc2:	000b      	movs	r3, r1
}    
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	0800d0f0 	.word	0x0800d0f0

08005bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	025b      	lsls	r3, r3, #9
 8005bec:	4013      	ands	r3, r2
 8005bee:	d100      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005bf0:	e08e      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005bf2:	2017      	movs	r0, #23
 8005bf4:	183b      	adds	r3, r7, r0
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bfa:	4b6e      	ldr	r3, [pc, #440]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	2380      	movs	r3, #128	; 0x80
 8005c00:	055b      	lsls	r3, r3, #21
 8005c02:	4013      	ands	r3, r2
 8005c04:	d110      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c06:	4b6b      	ldr	r3, [pc, #428]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	4b6a      	ldr	r3, [pc, #424]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c0c:	2180      	movs	r1, #128	; 0x80
 8005c0e:	0549      	lsls	r1, r1, #21
 8005c10:	430a      	orrs	r2, r1
 8005c12:	61da      	str	r2, [r3, #28]
 8005c14:	4b67      	ldr	r3, [pc, #412]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	055b      	lsls	r3, r3, #21
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c22:	183b      	adds	r3, r7, r0
 8005c24:	2201      	movs	r2, #1
 8005c26:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c28:	4b63      	ldr	r3, [pc, #396]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	2380      	movs	r3, #128	; 0x80
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4013      	ands	r3, r2
 8005c32:	d11a      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c34:	4b60      	ldr	r3, [pc, #384]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4b5f      	ldr	r3, [pc, #380]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005c3a:	2180      	movs	r1, #128	; 0x80
 8005c3c:	0049      	lsls	r1, r1, #1
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c42:	f7fc fbbf 	bl	80023c4 <HAL_GetTick>
 8005c46:	0003      	movs	r3, r0
 8005c48:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c4a:	e008      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4c:	f7fc fbba 	bl	80023c4 <HAL_GetTick>
 8005c50:	0002      	movs	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b64      	cmp	r3, #100	; 0x64
 8005c58:	d901      	bls.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e0a6      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5e:	4b56      	ldr	r3, [pc, #344]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	2380      	movs	r3, #128	; 0x80
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	4013      	ands	r3, r2
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c6a:	4b52      	ldr	r3, [pc, #328]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c6c:	6a1a      	ldr	r2, [r3, #32]
 8005c6e:	23c0      	movs	r3, #192	; 0xc0
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4013      	ands	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d034      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	23c0      	movs	r3, #192	; 0xc0
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4013      	ands	r3, r2
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d02c      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c8c:	4b49      	ldr	r3, [pc, #292]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	4a4a      	ldr	r2, [pc, #296]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c96:	4b47      	ldr	r3, [pc, #284]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c98:	6a1a      	ldr	r2, [r3, #32]
 8005c9a:	4b46      	ldr	r3, [pc, #280]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c9c:	2180      	movs	r1, #128	; 0x80
 8005c9e:	0249      	lsls	r1, r1, #9
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ca4:	4b43      	ldr	r3, [pc, #268]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ca6:	6a1a      	ldr	r2, [r3, #32]
 8005ca8:	4b42      	ldr	r3, [pc, #264]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005caa:	4945      	ldr	r1, [pc, #276]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005cac:	400a      	ands	r2, r1
 8005cae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005cb0:	4b40      	ldr	r3, [pc, #256]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cbe:	f7fc fb81 	bl	80023c4 <HAL_GetTick>
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc6:	e009      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc8:	f7fc fb7c 	bl	80023c4 <HAL_GetTick>
 8005ccc:	0002      	movs	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	4a3c      	ldr	r2, [pc, #240]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e067      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cdc:	4b35      	ldr	r3, [pc, #212]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d0f0      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ce6:	4b33      	ldr	r3, [pc, #204]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	4a34      	ldr	r2, [pc, #208]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	0019      	movs	r1, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	4b2f      	ldr	r3, [pc, #188]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cfa:	2317      	movs	r3, #23
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d105      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d04:	4b2b      	ldr	r3, [pc, #172]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d06:	69da      	ldr	r2, [r3, #28]
 8005d08:	4b2a      	ldr	r3, [pc, #168]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d0a:	492f      	ldr	r1, [pc, #188]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005d0c:	400a      	ands	r2, r1
 8005d0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2201      	movs	r2, #1
 8005d16:	4013      	ands	r3, r2
 8005d18:	d009      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d1a:	4b26      	ldr	r3, [pc, #152]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	2203      	movs	r2, #3
 8005d20:	4393      	bics	r3, r2
 8005d22:	0019      	movs	r1, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2202      	movs	r2, #2
 8005d34:	4013      	ands	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d38:	4b1e      	ldr	r3, [pc, #120]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	4a23      	ldr	r2, [pc, #140]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	0019      	movs	r1, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2220      	movs	r2, #32
 8005d52:	4013      	ands	r3, r2
 8005d54:	d009      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d56:	4b17      	ldr	r3, [pc, #92]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	2210      	movs	r2, #16
 8005d5c:	4393      	bics	r3, r2
 8005d5e:	0019      	movs	r1, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d66:	430a      	orrs	r2, r1
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	2380      	movs	r3, #128	; 0x80
 8005d70:	029b      	lsls	r3, r3, #10
 8005d72:	4013      	ands	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d76:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	4393      	bics	r3, r2
 8005d7e:	0019      	movs	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699a      	ldr	r2, [r3, #24]
 8005d84:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d86:	430a      	orrs	r2, r1
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	2380      	movs	r3, #128	; 0x80
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	4013      	ands	r3, r2
 8005d94:	d009      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d96:	4b07      	ldr	r3, [pc, #28]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	2240      	movs	r2, #64	; 0x40
 8005d9c:	4393      	bics	r3, r2
 8005d9e:	0019      	movs	r1, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	4b03      	ldr	r3, [pc, #12]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005da6:	430a      	orrs	r2, r1
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	0018      	movs	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	b006      	add	sp, #24
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40021000 	.word	0x40021000
 8005db8:	40007000 	.word	0x40007000
 8005dbc:	fffffcff 	.word	0xfffffcff
 8005dc0:	fffeffff 	.word	0xfffeffff
 8005dc4:	00001388 	.word	0x00001388
 8005dc8:	efffffff 	.word	0xefffffff
 8005dcc:	fffcffff 	.word	0xfffcffff

08005dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e0a8      	b.n	8005f34 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d109      	bne.n	8005dfe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	2382      	movs	r3, #130	; 0x82
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d009      	beq.n	8005e0a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	61da      	str	r2, [r3, #28]
 8005dfc:	e005      	b.n	8005e0a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	225d      	movs	r2, #93	; 0x5d
 8005e14:	5c9b      	ldrb	r3, [r3, r2]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d107      	bne.n	8005e2c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	225c      	movs	r2, #92	; 0x5c
 8005e20:	2100      	movs	r1, #0
 8005e22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	0018      	movs	r0, r3
 8005e28:	f7fb fe7a 	bl	8001b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	225d      	movs	r2, #93	; 0x5d
 8005e30:	2102      	movs	r1, #2
 8005e32:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2140      	movs	r1, #64	; 0x40
 8005e40:	438a      	bics	r2, r1
 8005e42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	23e0      	movs	r3, #224	; 0xe0
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d902      	bls.n	8005e56 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e002      	b.n	8005e5c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	015b      	lsls	r3, r3, #5
 8005e5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	23f0      	movs	r3, #240	; 0xf0
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d008      	beq.n	8005e7a <HAL_SPI_Init+0xaa>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	23e0      	movs	r3, #224	; 0xe0
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d002      	beq.n	8005e7a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	2382      	movs	r3, #130	; 0x82
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	401a      	ands	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6899      	ldr	r1, [r3, #8]
 8005e88:	2384      	movs	r3, #132	; 0x84
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2102      	movs	r1, #2
 8005e96:	400b      	ands	r3, r1
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	400b      	ands	r3, r1
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6999      	ldr	r1, [r3, #24]
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	400b      	ands	r3, r1
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	2138      	movs	r1, #56	; 0x38
 8005eb6:	400b      	ands	r3, r1
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	2180      	movs	r1, #128	; 0x80
 8005ec0:	400b      	ands	r3, r1
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	0011      	movs	r1, r2
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	019b      	lsls	r3, r3, #6
 8005ece:	401a      	ands	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	0c1b      	lsrs	r3, r3, #16
 8005ede:	2204      	movs	r2, #4
 8005ee0:	401a      	ands	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2110      	movs	r1, #16
 8005ee8:	400b      	ands	r3, r1
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef0:	2108      	movs	r1, #8
 8005ef2:	400b      	ands	r3, r1
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68d9      	ldr	r1, [r3, #12]
 8005efa:	23f0      	movs	r3, #240	; 0xf0
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	400b      	ands	r3, r1
 8005f00:	431a      	orrs	r2, r3
 8005f02:	0011      	movs	r1, r2
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	015b      	lsls	r3, r3, #5
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69da      	ldr	r2, [r3, #28]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4907      	ldr	r1, [pc, #28]	; (8005f3c <HAL_SPI_Init+0x16c>)
 8005f20:	400a      	ands	r2, r1
 8005f22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	225d      	movs	r2, #93	; 0x5d
 8005f2e:	2101      	movs	r1, #1
 8005f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	0018      	movs	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	b004      	add	sp, #16
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	fffff7ff 	.word	0xfffff7ff

08005f40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	1dbb      	adds	r3, r7, #6
 8005f4e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f50:	231f      	movs	r3, #31
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	2200      	movs	r2, #0
 8005f56:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	225c      	movs	r2, #92	; 0x5c
 8005f5c:	5c9b      	ldrb	r3, [r3, r2]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <HAL_SPI_Transmit+0x26>
 8005f62:	2302      	movs	r3, #2
 8005f64:	e140      	b.n	80061e8 <HAL_SPI_Transmit+0x2a8>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	225c      	movs	r2, #92	; 0x5c
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f6e:	f7fc fa29 	bl	80023c4 <HAL_GetTick>
 8005f72:	0003      	movs	r3, r0
 8005f74:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f76:	2316      	movs	r3, #22
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	1dba      	adds	r2, r7, #6
 8005f7c:	8812      	ldrh	r2, [r2, #0]
 8005f7e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	225d      	movs	r2, #93	; 0x5d
 8005f84:	5c9b      	ldrb	r3, [r3, r2]
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d004      	beq.n	8005f96 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005f8c:	231f      	movs	r3, #31
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	2202      	movs	r2, #2
 8005f92:	701a      	strb	r2, [r3, #0]
    goto error;
 8005f94:	e11d      	b.n	80061d2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <HAL_SPI_Transmit+0x64>
 8005f9c:	1dbb      	adds	r3, r7, #6
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005fa4:	231f      	movs	r3, #31
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	2201      	movs	r2, #1
 8005faa:	701a      	strb	r2, [r3, #0]
    goto error;
 8005fac:	e111      	b.n	80061d2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	225d      	movs	r2, #93	; 0x5d
 8005fb2:	2103      	movs	r1, #3
 8005fb4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	1dba      	adds	r2, r7, #6
 8005fc6:	8812      	ldrh	r2, [r2, #0]
 8005fc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1dba      	adds	r2, r7, #6
 8005fce:	8812      	ldrh	r2, [r2, #0]
 8005fd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2244      	movs	r2, #68	; 0x44
 8005fdc:	2100      	movs	r1, #0
 8005fde:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2246      	movs	r2, #70	; 0x46
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d110      	bne.n	8006022 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2140      	movs	r1, #64	; 0x40
 800600c:	438a      	bics	r2, r1
 800600e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2180      	movs	r1, #128	; 0x80
 800601c:	01c9      	lsls	r1, r1, #7
 800601e:	430a      	orrs	r2, r1
 8006020:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2240      	movs	r2, #64	; 0x40
 800602a:	4013      	ands	r3, r2
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d007      	beq.n	8006040 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2140      	movs	r1, #64	; 0x40
 800603c:	430a      	orrs	r2, r1
 800603e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	23e0      	movs	r3, #224	; 0xe0
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	429a      	cmp	r2, r3
 800604a:	d94e      	bls.n	80060ea <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <HAL_SPI_Transmit+0x11e>
 8006054:	2316      	movs	r3, #22
 8006056:	18fb      	adds	r3, r7, r3
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d13f      	bne.n	80060de <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	881a      	ldrh	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	1c9a      	adds	r2, r3, #2
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006082:	e02c      	b.n	80060de <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2202      	movs	r2, #2
 800608c:	4013      	ands	r3, r2
 800608e:	2b02      	cmp	r3, #2
 8006090:	d112      	bne.n	80060b8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	881a      	ldrh	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	1c9a      	adds	r2, r3, #2
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060b6:	e012      	b.n	80060de <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060b8:	f7fc f984 	bl	80023c4 <HAL_GetTick>
 80060bc:	0002      	movs	r2, r0
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d802      	bhi.n	80060ce <HAL_SPI_Transmit+0x18e>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	3301      	adds	r3, #1
 80060cc:	d102      	bne.n	80060d4 <HAL_SPI_Transmit+0x194>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80060d4:	231f      	movs	r3, #31
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	2203      	movs	r2, #3
 80060da:	701a      	strb	r2, [r3, #0]
          goto error;
 80060dc:	e079      	b.n	80061d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1cd      	bne.n	8006084 <HAL_SPI_Transmit+0x144>
 80060e8:	e04f      	b.n	800618a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d004      	beq.n	80060fc <HAL_SPI_Transmit+0x1bc>
 80060f2:	2316      	movs	r3, #22
 80060f4:	18fb      	adds	r3, r7, r3
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d141      	bne.n	8006180 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	330c      	adds	r3, #12
 8006106:	7812      	ldrb	r2, [r2, #0]
 8006108:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006122:	e02d      	b.n	8006180 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2202      	movs	r2, #2
 800612c:	4013      	ands	r3, r2
 800612e:	2b02      	cmp	r3, #2
 8006130:	d113      	bne.n	800615a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	7812      	ldrb	r2, [r2, #0]
 800613e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006158:	e012      	b.n	8006180 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800615a:	f7fc f933 	bl	80023c4 <HAL_GetTick>
 800615e:	0002      	movs	r2, r0
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d802      	bhi.n	8006170 <HAL_SPI_Transmit+0x230>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	3301      	adds	r3, #1
 800616e:	d102      	bne.n	8006176 <HAL_SPI_Transmit+0x236>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d104      	bne.n	8006180 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006176:	231f      	movs	r3, #31
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	2203      	movs	r2, #3
 800617c:	701a      	strb	r2, [r3, #0]
          goto error;
 800617e:	e028      	b.n	80061d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1cc      	bne.n	8006124 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	0018      	movs	r0, r3
 8006192:	f000 fb2f 	bl	80067f4 <SPI_EndRxTxTransaction>
 8006196:	1e03      	subs	r3, r0, #0
 8006198:	d002      	beq.n	80061a0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2220      	movs	r2, #32
 800619e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061a8:	2300      	movs	r3, #0
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80061c6:	231f      	movs	r3, #31
 80061c8:	18fb      	adds	r3, r7, r3
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e000      	b.n	80061d2 <HAL_SPI_Transmit+0x292>
  }

error:
 80061d0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	225d      	movs	r2, #93	; 0x5d
 80061d6:	2101      	movs	r1, #1
 80061d8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	225c      	movs	r2, #92	; 0x5c
 80061de:	2100      	movs	r1, #0
 80061e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80061e2:	231f      	movs	r3, #31
 80061e4:	18fb      	adds	r3, r7, r3
 80061e6:	781b      	ldrb	r3, [r3, #0]
}
 80061e8:	0018      	movs	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b008      	add	sp, #32
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08a      	sub	sp, #40	; 0x28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	001a      	movs	r2, r3
 80061fe:	1cbb      	adds	r3, r7, #2
 8006200:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006202:	2301      	movs	r3, #1
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006206:	2323      	movs	r3, #35	; 0x23
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	2200      	movs	r2, #0
 800620c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	225c      	movs	r2, #92	; 0x5c
 8006212:	5c9b      	ldrb	r3, [r3, r2]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_SPI_TransmitReceive+0x2c>
 8006218:	2302      	movs	r3, #2
 800621a:	e1b5      	b.n	8006588 <HAL_SPI_TransmitReceive+0x398>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	225c      	movs	r2, #92	; 0x5c
 8006220:	2101      	movs	r1, #1
 8006222:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006224:	f7fc f8ce 	bl	80023c4 <HAL_GetTick>
 8006228:	0003      	movs	r3, r0
 800622a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800622c:	201b      	movs	r0, #27
 800622e:	183b      	adds	r3, r7, r0
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	215d      	movs	r1, #93	; 0x5d
 8006234:	5c52      	ldrb	r2, [r2, r1]
 8006236:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800623e:	2312      	movs	r3, #18
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	1cba      	adds	r2, r7, #2
 8006244:	8812      	ldrh	r2, [r2, #0]
 8006246:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006248:	183b      	adds	r3, r7, r0
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d011      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x84>
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	2382      	movs	r3, #130	; 0x82
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	429a      	cmp	r2, r3
 8006258:	d107      	bne.n	800626a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <HAL_SPI_TransmitReceive+0x7a>
 8006262:	183b      	adds	r3, r7, r0
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b04      	cmp	r3, #4
 8006268:	d004      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800626a:	2323      	movs	r3, #35	; 0x23
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	2202      	movs	r2, #2
 8006270:	701a      	strb	r2, [r3, #0]
    goto error;
 8006272:	e17e      	b.n	8006572 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d006      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x98>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x98>
 8006280:	1cbb      	adds	r3, r7, #2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006288:	2323      	movs	r3, #35	; 0x23
 800628a:	18fb      	adds	r3, r7, r3
 800628c:	2201      	movs	r2, #1
 800628e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006290:	e16f      	b.n	8006572 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	225d      	movs	r2, #93	; 0x5d
 8006296:	5c9b      	ldrb	r3, [r3, r2]
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b04      	cmp	r3, #4
 800629c:	d003      	beq.n	80062a6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	225d      	movs	r2, #93	; 0x5d
 80062a2:	2105      	movs	r1, #5
 80062a4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	1cba      	adds	r2, r7, #2
 80062b6:	2146      	movs	r1, #70	; 0x46
 80062b8:	8812      	ldrh	r2, [r2, #0]
 80062ba:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1cba      	adds	r2, r7, #2
 80062c0:	2144      	movs	r1, #68	; 0x44
 80062c2:	8812      	ldrh	r2, [r2, #0]
 80062c4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	1cba      	adds	r2, r7, #2
 80062d0:	8812      	ldrh	r2, [r2, #0]
 80062d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	1cba      	adds	r2, r7, #2
 80062d8:	8812      	ldrh	r2, [r2, #0]
 80062da:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	23e0      	movs	r3, #224	; 0xe0
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d908      	bls.n	8006306 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	49a4      	ldr	r1, [pc, #656]	; (8006590 <HAL_SPI_TransmitReceive+0x3a0>)
 8006300:	400a      	ands	r2, r1
 8006302:	605a      	str	r2, [r3, #4]
 8006304:	e008      	b.n	8006318 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2180      	movs	r1, #128	; 0x80
 8006312:	0149      	lsls	r1, r1, #5
 8006314:	430a      	orrs	r2, r1
 8006316:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2240      	movs	r2, #64	; 0x40
 8006320:	4013      	ands	r3, r2
 8006322:	2b40      	cmp	r3, #64	; 0x40
 8006324:	d007      	beq.n	8006336 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2140      	movs	r1, #64	; 0x40
 8006332:	430a      	orrs	r2, r1
 8006334:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	23e0      	movs	r3, #224	; 0xe0
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	429a      	cmp	r2, r3
 8006340:	d800      	bhi.n	8006344 <HAL_SPI_TransmitReceive+0x154>
 8006342:	e07f      	b.n	8006444 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_SPI_TransmitReceive+0x168>
 800634c:	2312      	movs	r3, #18
 800634e:	18fb      	adds	r3, r7, r3
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d000      	beq.n	8006358 <HAL_SPI_TransmitReceive+0x168>
 8006356:	e069      	b.n	800642c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	881a      	ldrh	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	1c9a      	adds	r2, r3, #2
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800637c:	e056      	b.n	800642c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2202      	movs	r2, #2
 8006386:	4013      	ands	r3, r2
 8006388:	2b02      	cmp	r3, #2
 800638a:	d11b      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x1d4>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d016      	beq.n	80063c4 <HAL_SPI_TransmitReceive+0x1d4>
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	2b01      	cmp	r3, #1
 800639a:	d113      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	881a      	ldrh	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	1c9a      	adds	r2, r3, #2
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2201      	movs	r2, #1
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d11c      	bne.n	800640c <HAL_SPI_TransmitReceive+0x21c>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2246      	movs	r2, #70	; 0x46
 80063d6:	5a9b      	ldrh	r3, [r3, r2]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d016      	beq.n	800640c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	b292      	uxth	r2, r2
 80063ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f0:	1c9a      	adds	r2, r3, #2
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2246      	movs	r2, #70	; 0x46
 80063fa:	5a9b      	ldrh	r3, [r3, r2]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b299      	uxth	r1, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2246      	movs	r2, #70	; 0x46
 8006406:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006408:	2301      	movs	r3, #1
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800640c:	f7fb ffda 	bl	80023c4 <HAL_GetTick>
 8006410:	0002      	movs	r2, r0
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006418:	429a      	cmp	r2, r3
 800641a:	d807      	bhi.n	800642c <HAL_SPI_TransmitReceive+0x23c>
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641e:	3301      	adds	r3, #1
 8006420:	d004      	beq.n	800642c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006422:	2323      	movs	r3, #35	; 0x23
 8006424:	18fb      	adds	r3, r7, r3
 8006426:	2203      	movs	r2, #3
 8006428:	701a      	strb	r2, [r3, #0]
        goto error;
 800642a:	e0a2      	b.n	8006572 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1a3      	bne.n	800637e <HAL_SPI_TransmitReceive+0x18e>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2246      	movs	r2, #70	; 0x46
 800643a:	5a9b      	ldrh	r3, [r3, r2]
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d19d      	bne.n	800637e <HAL_SPI_TransmitReceive+0x18e>
 8006442:	e085      	b.n	8006550 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <HAL_SPI_TransmitReceive+0x268>
 800644c:	2312      	movs	r3, #18
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d000      	beq.n	8006458 <HAL_SPI_TransmitReceive+0x268>
 8006456:	e070      	b.n	800653a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	7812      	ldrb	r2, [r2, #0]
 8006464:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647e:	e05c      	b.n	800653a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2202      	movs	r2, #2
 8006488:	4013      	ands	r3, r2
 800648a:	2b02      	cmp	r3, #2
 800648c:	d11c      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x2d8>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d017      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0x2d8>
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	2b01      	cmp	r3, #1
 800649c:	d114      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	330c      	adds	r3, #12
 80064a8:	7812      	ldrb	r2, [r2, #0]
 80064aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2201      	movs	r2, #1
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d11e      	bne.n	8006514 <HAL_SPI_TransmitReceive+0x324>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2246      	movs	r2, #70	; 0x46
 80064da:	5a9b      	ldrh	r3, [r3, r2]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d018      	beq.n	8006514 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	330c      	adds	r3, #12
 80064e8:	001a      	movs	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2246      	movs	r2, #70	; 0x46
 8006502:	5a9b      	ldrh	r3, [r3, r2]
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	b299      	uxth	r1, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2246      	movs	r2, #70	; 0x46
 800650e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006510:	2301      	movs	r3, #1
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006514:	f7fb ff56 	bl	80023c4 <HAL_GetTick>
 8006518:	0002      	movs	r2, r0
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006520:	429a      	cmp	r2, r3
 8006522:	d802      	bhi.n	800652a <HAL_SPI_TransmitReceive+0x33a>
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	3301      	adds	r3, #1
 8006528:	d102      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x340>
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006530:	2323      	movs	r3, #35	; 0x23
 8006532:	18fb      	adds	r3, r7, r3
 8006534:	2203      	movs	r2, #3
 8006536:	701a      	strb	r2, [r3, #0]
        goto error;
 8006538:	e01b      	b.n	8006572 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d19d      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x290>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2246      	movs	r2, #70	; 0x46
 8006548:	5a9b      	ldrh	r3, [r3, r2]
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d197      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	0018      	movs	r0, r3
 8006558:	f000 f94c 	bl	80067f4 <SPI_EndRxTxTransaction>
 800655c:	1e03      	subs	r3, r0, #0
 800655e:	d007      	beq.n	8006570 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006560:	2323      	movs	r3, #35	; 0x23
 8006562:	18fb      	adds	r3, r7, r3
 8006564:	2201      	movs	r2, #1
 8006566:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	661a      	str	r2, [r3, #96]	; 0x60
 800656e:	e000      	b.n	8006572 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006570:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	225d      	movs	r2, #93	; 0x5d
 8006576:	2101      	movs	r1, #1
 8006578:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	225c      	movs	r2, #92	; 0x5c
 800657e:	2100      	movs	r1, #0
 8006580:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006582:	2323      	movs	r3, #35	; 0x23
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	781b      	ldrb	r3, [r3, #0]
}
 8006588:	0018      	movs	r0, r3
 800658a:	46bd      	mov	sp, r7
 800658c:	b00a      	add	sp, #40	; 0x28
 800658e:	bd80      	pop	{r7, pc}
 8006590:	ffffefff 	.word	0xffffefff

08006594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	1dfb      	adds	r3, r7, #7
 80065a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065a4:	f7fb ff0e 	bl	80023c4 <HAL_GetTick>
 80065a8:	0002      	movs	r2, r0
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	18d3      	adds	r3, r2, r3
 80065b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065b4:	f7fb ff06 	bl	80023c4 <HAL_GetTick>
 80065b8:	0003      	movs	r3, r0
 80065ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065bc:	4b3a      	ldr	r3, [pc, #232]	; (80066a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	015b      	lsls	r3, r3, #5
 80065c2:	0d1b      	lsrs	r3, r3, #20
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	4353      	muls	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ca:	e058      	b.n	800667e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	3301      	adds	r3, #1
 80065d0:	d055      	beq.n	800667e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065d2:	f7fb fef7 	bl	80023c4 <HAL_GetTick>
 80065d6:	0002      	movs	r2, r0
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d902      	bls.n	80065e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d142      	bne.n	800666e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	21e0      	movs	r1, #224	; 0xe0
 80065f4:	438a      	bics	r2, r1
 80065f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	2382      	movs	r3, #130	; 0x82
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	429a      	cmp	r2, r3
 8006602:	d113      	bne.n	800662c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	2380      	movs	r3, #128	; 0x80
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	429a      	cmp	r2, r3
 800660e:	d005      	beq.n	800661c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	429a      	cmp	r2, r3
 800661a:	d107      	bne.n	800662c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2140      	movs	r1, #64	; 0x40
 8006628:	438a      	bics	r2, r1
 800662a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006630:	2380      	movs	r3, #128	; 0x80
 8006632:	019b      	lsls	r3, r3, #6
 8006634:	429a      	cmp	r2, r3
 8006636:	d110      	bne.n	800665a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	491a      	ldr	r1, [pc, #104]	; (80066ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006644:	400a      	ands	r2, r1
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2180      	movs	r1, #128	; 0x80
 8006654:	0189      	lsls	r1, r1, #6
 8006656:	430a      	orrs	r2, r1
 8006658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	225d      	movs	r2, #93	; 0x5d
 800665e:	2101      	movs	r1, #1
 8006660:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	225c      	movs	r2, #92	; 0x5c
 8006666:	2100      	movs	r1, #0
 8006668:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e017      	b.n	800669e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	3b01      	subs	r3, #1
 800667c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	4013      	ands	r3, r2
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	425a      	negs	r2, r3
 800668e:	4153      	adcs	r3, r2
 8006690:	b2db      	uxtb	r3, r3
 8006692:	001a      	movs	r2, r3
 8006694:	1dfb      	adds	r3, r7, #7
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d197      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	0018      	movs	r0, r3
 80066a0:	46bd      	mov	sp, r7
 80066a2:	b008      	add	sp, #32
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	20000000 	.word	0x20000000
 80066ac:	ffffdfff 	.word	0xffffdfff

080066b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08a      	sub	sp, #40	; 0x28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066be:	2317      	movs	r3, #23
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066c6:	f7fb fe7d 	bl	80023c4 <HAL_GetTick>
 80066ca:	0002      	movs	r2, r0
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	1a9b      	subs	r3, r3, r2
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	18d3      	adds	r3, r2, r3
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80066d6:	f7fb fe75 	bl	80023c4 <HAL_GetTick>
 80066da:	0003      	movs	r3, r0
 80066dc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	330c      	adds	r3, #12
 80066e4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066e6:	4b41      	ldr	r3, [pc, #260]	; (80067ec <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	0013      	movs	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	189b      	adds	r3, r3, r2
 80066f0:	00da      	lsls	r2, r3, #3
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	0d1b      	lsrs	r3, r3, #20
 80066f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f8:	4353      	muls	r3, r2
 80066fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80066fc:	e068      	b.n	80067d0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	23c0      	movs	r3, #192	; 0xc0
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	429a      	cmp	r2, r3
 8006706:	d10a      	bne.n	800671e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d107      	bne.n	800671e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	b2da      	uxtb	r2, r3
 8006714:	2117      	movs	r1, #23
 8006716:	187b      	adds	r3, r7, r1
 8006718:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800671a:	187b      	adds	r3, r7, r1
 800671c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	3301      	adds	r3, #1
 8006722:	d055      	beq.n	80067d0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006724:	f7fb fe4e 	bl	80023c4 <HAL_GetTick>
 8006728:	0002      	movs	r2, r0
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006730:	429a      	cmp	r2, r3
 8006732:	d902      	bls.n	800673a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	2b00      	cmp	r3, #0
 8006738:	d142      	bne.n	80067c0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	21e0      	movs	r1, #224	; 0xe0
 8006746:	438a      	bics	r2, r1
 8006748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	2382      	movs	r3, #130	; 0x82
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	429a      	cmp	r2, r3
 8006754:	d113      	bne.n	800677e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	2380      	movs	r3, #128	; 0x80
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	429a      	cmp	r2, r3
 8006760:	d005      	beq.n	800676e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	2380      	movs	r3, #128	; 0x80
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	429a      	cmp	r2, r3
 800676c:	d107      	bne.n	800677e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2140      	movs	r1, #64	; 0x40
 800677a:	438a      	bics	r2, r1
 800677c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006782:	2380      	movs	r3, #128	; 0x80
 8006784:	019b      	lsls	r3, r3, #6
 8006786:	429a      	cmp	r2, r3
 8006788:	d110      	bne.n	80067ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4916      	ldr	r1, [pc, #88]	; (80067f0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006796:	400a      	ands	r2, r1
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2180      	movs	r1, #128	; 0x80
 80067a6:	0189      	lsls	r1, r1, #6
 80067a8:	430a      	orrs	r2, r1
 80067aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	225d      	movs	r2, #93	; 0x5d
 80067b0:	2101      	movs	r1, #1
 80067b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	225c      	movs	r2, #92	; 0x5c
 80067b8:	2100      	movs	r1, #0
 80067ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e010      	b.n	80067e2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	4013      	ands	r3, r2
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d18e      	bne.n	80066fe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	0018      	movs	r0, r3
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b00a      	add	sp, #40	; 0x28
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	20000000 	.word	0x20000000
 80067f0:	ffffdfff 	.word	0xffffdfff

080067f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	23c0      	movs	r3, #192	; 0xc0
 8006804:	0159      	lsls	r1, r3, #5
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	0013      	movs	r3, r2
 800680e:	2200      	movs	r2, #0
 8006810:	f7ff ff4e 	bl	80066b0 <SPI_WaitFifoStateUntilTimeout>
 8006814:	1e03      	subs	r3, r0, #0
 8006816:	d007      	beq.n	8006828 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800681c:	2220      	movs	r2, #32
 800681e:	431a      	orrs	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e027      	b.n	8006878 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	0013      	movs	r3, r2
 8006832:	2200      	movs	r2, #0
 8006834:	2180      	movs	r1, #128	; 0x80
 8006836:	f7ff fead 	bl	8006594 <SPI_WaitFlagStateUntilTimeout>
 800683a:	1e03      	subs	r3, r0, #0
 800683c:	d007      	beq.n	800684e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006842:	2220      	movs	r2, #32
 8006844:	431a      	orrs	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e014      	b.n	8006878 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	23c0      	movs	r3, #192	; 0xc0
 8006852:	00d9      	lsls	r1, r3, #3
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	0013      	movs	r3, r2
 800685c:	2200      	movs	r2, #0
 800685e:	f7ff ff27 	bl	80066b0 <SPI_WaitFifoStateUntilTimeout>
 8006862:	1e03      	subs	r3, r0, #0
 8006864:	d007      	beq.n	8006876 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800686a:	2220      	movs	r2, #32
 800686c:	431a      	orrs	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e000      	b.n	8006878 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	0018      	movs	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	b004      	add	sp, #16
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e042      	b.n	8006918 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	223d      	movs	r2, #61	; 0x3d
 8006896:	5c9b      	ldrb	r3, [r3, r2]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d107      	bne.n	80068ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	223c      	movs	r2, #60	; 0x3c
 80068a2:	2100      	movs	r1, #0
 80068a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	0018      	movs	r0, r3
 80068aa:	f7fb f987 	bl	8001bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	223d      	movs	r2, #61	; 0x3d
 80068b2:	2102      	movs	r1, #2
 80068b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3304      	adds	r3, #4
 80068be:	0019      	movs	r1, r3
 80068c0:	0010      	movs	r0, r2
 80068c2:	f000 fa65 	bl	8006d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2246      	movs	r2, #70	; 0x46
 80068ca:	2101      	movs	r1, #1
 80068cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	223e      	movs	r2, #62	; 0x3e
 80068d2:	2101      	movs	r1, #1
 80068d4:	5499      	strb	r1, [r3, r2]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	223f      	movs	r2, #63	; 0x3f
 80068da:	2101      	movs	r1, #1
 80068dc:	5499      	strb	r1, [r3, r2]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2240      	movs	r2, #64	; 0x40
 80068e2:	2101      	movs	r1, #1
 80068e4:	5499      	strb	r1, [r3, r2]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2241      	movs	r2, #65	; 0x41
 80068ea:	2101      	movs	r1, #1
 80068ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2242      	movs	r2, #66	; 0x42
 80068f2:	2101      	movs	r1, #1
 80068f4:	5499      	strb	r1, [r3, r2]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2243      	movs	r2, #67	; 0x43
 80068fa:	2101      	movs	r1, #1
 80068fc:	5499      	strb	r1, [r3, r2]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2244      	movs	r2, #68	; 0x44
 8006902:	2101      	movs	r1, #1
 8006904:	5499      	strb	r1, [r3, r2]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2245      	movs	r2, #69	; 0x45
 800690a:	2101      	movs	r1, #1
 800690c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	223d      	movs	r2, #61	; 0x3d
 8006912:	2101      	movs	r1, #1
 8006914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	0018      	movs	r0, r3
 800691a:	46bd      	mov	sp, r7
 800691c:	b002      	add	sp, #8
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	223d      	movs	r2, #61	; 0x3d
 800692c:	5c9b      	ldrb	r3, [r3, r2]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	d001      	beq.n	8006938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e03b      	b.n	80069b0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	223d      	movs	r2, #61	; 0x3d
 800693c:	2102      	movs	r1, #2
 800693e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2101      	movs	r1, #1
 800694c:	430a      	orrs	r2, r1
 800694e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <HAL_TIM_Base_Start_IT+0x98>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00f      	beq.n	800697a <HAL_TIM_Base_Start_IT+0x5a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	2380      	movs	r3, #128	; 0x80
 8006960:	05db      	lsls	r3, r3, #23
 8006962:	429a      	cmp	r2, r3
 8006964:	d009      	beq.n	800697a <HAL_TIM_Base_Start_IT+0x5a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a14      	ldr	r2, [pc, #80]	; (80069bc <HAL_TIM_Base_Start_IT+0x9c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_TIM_Base_Start_IT+0x5a>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a12      	ldr	r2, [pc, #72]	; (80069c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d111      	bne.n	800699e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2207      	movs	r2, #7
 8006982:	4013      	ands	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b06      	cmp	r3, #6
 800698a:	d010      	beq.n	80069ae <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2101      	movs	r1, #1
 8006998:	430a      	orrs	r2, r1
 800699a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699c:	e007      	b.n	80069ae <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2101      	movs	r1, #1
 80069aa:	430a      	orrs	r2, r1
 80069ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	0018      	movs	r0, r3
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b004      	add	sp, #16
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40014000 	.word	0x40014000

080069c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e042      	b.n	8006a5c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	223d      	movs	r2, #61	; 0x3d
 80069da:	5c9b      	ldrb	r3, [r3, r2]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d107      	bne.n	80069f2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	223c      	movs	r2, #60	; 0x3c
 80069e6:	2100      	movs	r1, #0
 80069e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	0018      	movs	r0, r3
 80069ee:	f000 f839 	bl	8006a64 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	223d      	movs	r2, #61	; 0x3d
 80069f6:	2102      	movs	r1, #2
 80069f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3304      	adds	r3, #4
 8006a02:	0019      	movs	r1, r3
 8006a04:	0010      	movs	r0, r2
 8006a06:	f000 f9c3 	bl	8006d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2246      	movs	r2, #70	; 0x46
 8006a0e:	2101      	movs	r1, #1
 8006a10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	223e      	movs	r2, #62	; 0x3e
 8006a16:	2101      	movs	r1, #1
 8006a18:	5499      	strb	r1, [r3, r2]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	223f      	movs	r2, #63	; 0x3f
 8006a1e:	2101      	movs	r1, #1
 8006a20:	5499      	strb	r1, [r3, r2]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2240      	movs	r2, #64	; 0x40
 8006a26:	2101      	movs	r1, #1
 8006a28:	5499      	strb	r1, [r3, r2]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2241      	movs	r2, #65	; 0x41
 8006a2e:	2101      	movs	r1, #1
 8006a30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2242      	movs	r2, #66	; 0x42
 8006a36:	2101      	movs	r1, #1
 8006a38:	5499      	strb	r1, [r3, r2]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2243      	movs	r2, #67	; 0x43
 8006a3e:	2101      	movs	r1, #1
 8006a40:	5499      	strb	r1, [r3, r2]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2244      	movs	r2, #68	; 0x44
 8006a46:	2101      	movs	r1, #1
 8006a48:	5499      	strb	r1, [r3, r2]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2245      	movs	r2, #69	; 0x45
 8006a4e:	2101      	movs	r1, #1
 8006a50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	223d      	movs	r2, #61	; 0x3d
 8006a56:	2101      	movs	r1, #1
 8006a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	b002      	add	sp, #8
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006a6c:	46c0      	nop			; (mov r8, r8)
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b002      	add	sp, #8
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2202      	movs	r2, #2
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d124      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2202      	movs	r2, #2
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d11d      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	4252      	negs	r2, r2
 8006aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	2203      	movs	r2, #3
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	d004      	beq.n	8006abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f000 f952 	bl	8006d60 <HAL_TIM_IC_CaptureCallback>
 8006abc:	e007      	b.n	8006ace <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f000 f945 	bl	8006d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 f951 	bl	8006d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	2204      	movs	r2, #4
 8006adc:	4013      	ands	r3, r2
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d125      	bne.n	8006b2e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	2204      	movs	r2, #4
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d11e      	bne.n	8006b2e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2205      	movs	r2, #5
 8006af6:	4252      	negs	r2, r2
 8006af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2202      	movs	r2, #2
 8006afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	23c0      	movs	r3, #192	; 0xc0
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	d004      	beq.n	8006b18 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	0018      	movs	r0, r3
 8006b12:	f000 f925 	bl	8006d60 <HAL_TIM_IC_CaptureCallback>
 8006b16:	e007      	b.n	8006b28 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f000 f918 	bl	8006d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	0018      	movs	r0, r3
 8006b24:	f000 f924 	bl	8006d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	2208      	movs	r2, #8
 8006b36:	4013      	ands	r3, r2
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d124      	bne.n	8006b86 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2208      	movs	r2, #8
 8006b44:	4013      	ands	r3, r2
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d11d      	bne.n	8006b86 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2209      	movs	r2, #9
 8006b50:	4252      	negs	r2, r2
 8006b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2204      	movs	r2, #4
 8006b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	2203      	movs	r2, #3
 8006b62:	4013      	ands	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f000 f8f9 	bl	8006d60 <HAL_TIM_IC_CaptureCallback>
 8006b6e:	e007      	b.n	8006b80 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	0018      	movs	r0, r3
 8006b74:	f000 f8ec 	bl	8006d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f000 f8f8 	bl	8006d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2210      	movs	r2, #16
 8006b8e:	4013      	ands	r3, r2
 8006b90:	2b10      	cmp	r3, #16
 8006b92:	d125      	bne.n	8006be0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	2210      	movs	r2, #16
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	2b10      	cmp	r3, #16
 8006ba0:	d11e      	bne.n	8006be0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2211      	movs	r2, #17
 8006ba8:	4252      	negs	r2, r2
 8006baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2208      	movs	r2, #8
 8006bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69da      	ldr	r2, [r3, #28]
 8006bb8:	23c0      	movs	r3, #192	; 0xc0
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d004      	beq.n	8006bca <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f000 f8cc 	bl	8006d60 <HAL_TIM_IC_CaptureCallback>
 8006bc8:	e007      	b.n	8006bda <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f000 f8bf 	bl	8006d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f000 f8cb 	bl	8006d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	2201      	movs	r2, #1
 8006be8:	4013      	ands	r3, r2
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d10f      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d108      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2202      	movs	r2, #2
 8006c02:	4252      	negs	r2, r2
 8006c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f7f9 fe1b 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2280      	movs	r2, #128	; 0x80
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b80      	cmp	r3, #128	; 0x80
 8006c1a:	d10f      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	2280      	movs	r2, #128	; 0x80
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b80      	cmp	r3, #128	; 0x80
 8006c28:	d108      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2281      	movs	r2, #129	; 0x81
 8006c30:	4252      	negs	r2, r2
 8006c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	0018      	movs	r0, r3
 8006c38:	f000 fb2e 	bl	8007298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2240      	movs	r2, #64	; 0x40
 8006c44:	4013      	ands	r3, r2
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	d10f      	bne.n	8006c6a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2240      	movs	r2, #64	; 0x40
 8006c52:	4013      	ands	r3, r2
 8006c54:	2b40      	cmp	r3, #64	; 0x40
 8006c56:	d108      	bne.n	8006c6a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2241      	movs	r2, #65	; 0x41
 8006c5e:	4252      	negs	r2, r2
 8006c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 f88b 	bl	8006d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2220      	movs	r2, #32
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d10f      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	4013      	ands	r3, r2
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d108      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2221      	movs	r2, #33	; 0x21
 8006c8c:	4252      	negs	r2, r2
 8006c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 faf8 	bl	8007288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c98:	46c0      	nop			; (mov r8, r8)
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b002      	add	sp, #8
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cac:	2317      	movs	r3, #23
 8006cae:	18fb      	adds	r3, r7, r3
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	223c      	movs	r2, #60	; 0x3c
 8006cb8:	5c9b      	ldrb	r3, [r3, r2]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_TIM_OC_ConfigChannel+0x22>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e042      	b.n	8006d48 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	223c      	movs	r2, #60	; 0x3c
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b0c      	cmp	r3, #12
 8006cce:	d027      	beq.n	8006d20 <HAL_TIM_OC_ConfigChannel+0x80>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b0c      	cmp	r3, #12
 8006cd4:	d82c      	bhi.n	8006d30 <HAL_TIM_OC_ConfigChannel+0x90>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d019      	beq.n	8006d10 <HAL_TIM_OC_ConfigChannel+0x70>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d826      	bhi.n	8006d30 <HAL_TIM_OC_ConfigChannel+0x90>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <HAL_TIM_OC_ConfigChannel+0x50>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d008      	beq.n	8006d00 <HAL_TIM_OC_ConfigChannel+0x60>
 8006cee:	e01f      	b.n	8006d30 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	0011      	movs	r1, r2
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f000 f8c9 	bl	8006e90 <TIM_OC1_SetConfig>
      break;
 8006cfe:	e01c      	b.n	8006d3a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	0011      	movs	r1, r2
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f000 f949 	bl	8006fa0 <TIM_OC2_SetConfig>
      break;
 8006d0e:	e014      	b.n	8006d3a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	0011      	movs	r1, r2
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f000 f9c5 	bl	80070a8 <TIM_OC3_SetConfig>
      break;
 8006d1e:	e00c      	b.n	8006d3a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	0011      	movs	r1, r2
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f000 fa43 	bl	80071b4 <TIM_OC4_SetConfig>
      break;
 8006d2e:	e004      	b.n	8006d3a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006d30:	2317      	movs	r3, #23
 8006d32:	18fb      	adds	r3, r7, r3
 8006d34:	2201      	movs	r2, #1
 8006d36:	701a      	strb	r2, [r3, #0]
      break;
 8006d38:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	223c      	movs	r2, #60	; 0x3c
 8006d3e:	2100      	movs	r1, #0
 8006d40:	5499      	strb	r1, [r3, r2]

  return status;
 8006d42:	2317      	movs	r3, #23
 8006d44:	18fb      	adds	r3, r7, r3
 8006d46:	781b      	ldrb	r3, [r3, #0]
}
 8006d48:	0018      	movs	r0, r3
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b006      	add	sp, #24
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d58:	46c0      	nop			; (mov r8, r8)
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	b002      	add	sp, #8
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d68:	46c0      	nop			; (mov r8, r8)
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b002      	add	sp, #8
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d78:	46c0      	nop			; (mov r8, r8)
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b002      	add	sp, #8
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d88:	46c0      	nop			; (mov r8, r8)
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b002      	add	sp, #8
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a34      	ldr	r2, [pc, #208]	; (8006e74 <TIM_Base_SetConfig+0xe4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d008      	beq.n	8006dba <TIM_Base_SetConfig+0x2a>
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	2380      	movs	r3, #128	; 0x80
 8006dac:	05db      	lsls	r3, r3, #23
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d003      	beq.n	8006dba <TIM_Base_SetConfig+0x2a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a30      	ldr	r2, [pc, #192]	; (8006e78 <TIM_Base_SetConfig+0xe8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d108      	bne.n	8006dcc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2270      	movs	r2, #112	; 0x70
 8006dbe:	4393      	bics	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <TIM_Base_SetConfig+0xe4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <TIM_Base_SetConfig+0x76>
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	2380      	movs	r3, #128	; 0x80
 8006dd8:	05db      	lsls	r3, r3, #23
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d013      	beq.n	8006e06 <TIM_Base_SetConfig+0x76>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a25      	ldr	r2, [pc, #148]	; (8006e78 <TIM_Base_SetConfig+0xe8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00f      	beq.n	8006e06 <TIM_Base_SetConfig+0x76>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a24      	ldr	r2, [pc, #144]	; (8006e7c <TIM_Base_SetConfig+0xec>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0x76>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a23      	ldr	r2, [pc, #140]	; (8006e80 <TIM_Base_SetConfig+0xf0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0x76>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a22      	ldr	r2, [pc, #136]	; (8006e84 <TIM_Base_SetConfig+0xf4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0x76>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a21      	ldr	r2, [pc, #132]	; (8006e88 <TIM_Base_SetConfig+0xf8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4a20      	ldr	r2, [pc, #128]	; (8006e8c <TIM_Base_SetConfig+0xfc>)
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2280      	movs	r2, #128	; 0x80
 8006e1c:	4393      	bics	r3, r2
 8006e1e:	001a      	movs	r2, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a0c      	ldr	r2, [pc, #48]	; (8006e74 <TIM_Base_SetConfig+0xe4>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d00b      	beq.n	8006e5e <TIM_Base_SetConfig+0xce>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a0d      	ldr	r2, [pc, #52]	; (8006e80 <TIM_Base_SetConfig+0xf0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d007      	beq.n	8006e5e <TIM_Base_SetConfig+0xce>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a0c      	ldr	r2, [pc, #48]	; (8006e84 <TIM_Base_SetConfig+0xf4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d003      	beq.n	8006e5e <TIM_Base_SetConfig+0xce>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a0b      	ldr	r2, [pc, #44]	; (8006e88 <TIM_Base_SetConfig+0xf8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d103      	bne.n	8006e66 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	615a      	str	r2, [r3, #20]
}
 8006e6c:	46c0      	nop			; (mov r8, r8)
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	b004      	add	sp, #16
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40012c00 	.word	0x40012c00
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40002000 	.word	0x40002000
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40014400 	.word	0x40014400
 8006e88:	40014800 	.word	0x40014800
 8006e8c:	fffffcff 	.word	0xfffffcff

08006e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	4393      	bics	r3, r2
 8006ea2:	001a      	movs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2270      	movs	r2, #112	; 0x70
 8006ebe:	4393      	bics	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2203      	movs	r2, #3
 8006ec6:	4393      	bics	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	4393      	bics	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a27      	ldr	r2, [pc, #156]	; (8006f88 <TIM_OC1_SetConfig+0xf8>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00b      	beq.n	8006f06 <TIM_OC1_SetConfig+0x76>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a26      	ldr	r2, [pc, #152]	; (8006f8c <TIM_OC1_SetConfig+0xfc>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d007      	beq.n	8006f06 <TIM_OC1_SetConfig+0x76>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a25      	ldr	r2, [pc, #148]	; (8006f90 <TIM_OC1_SetConfig+0x100>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d003      	beq.n	8006f06 <TIM_OC1_SetConfig+0x76>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a24      	ldr	r2, [pc, #144]	; (8006f94 <TIM_OC1_SetConfig+0x104>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d10c      	bne.n	8006f20 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2208      	movs	r2, #8
 8006f0a:	4393      	bics	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	4393      	bics	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a19      	ldr	r2, [pc, #100]	; (8006f88 <TIM_OC1_SetConfig+0xf8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00b      	beq.n	8006f40 <TIM_OC1_SetConfig+0xb0>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <TIM_OC1_SetConfig+0xfc>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d007      	beq.n	8006f40 <TIM_OC1_SetConfig+0xb0>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a17      	ldr	r2, [pc, #92]	; (8006f90 <TIM_OC1_SetConfig+0x100>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d003      	beq.n	8006f40 <TIM_OC1_SetConfig+0xb0>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a16      	ldr	r2, [pc, #88]	; (8006f94 <TIM_OC1_SetConfig+0x104>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d111      	bne.n	8006f64 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	4a15      	ldr	r2, [pc, #84]	; (8006f98 <TIM_OC1_SetConfig+0x108>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	4a14      	ldr	r2, [pc, #80]	; (8006f9c <TIM_OC1_SetConfig+0x10c>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	621a      	str	r2, [r3, #32]
}
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	46bd      	mov	sp, r7
 8006f82:	b006      	add	sp, #24
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	40012c00 	.word	0x40012c00
 8006f8c:	40014000 	.word	0x40014000
 8006f90:	40014400 	.word	0x40014400
 8006f94:	40014800 	.word	0x40014800
 8006f98:	fffffeff 	.word	0xfffffeff
 8006f9c:	fffffdff 	.word	0xfffffdff

08006fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	2210      	movs	r2, #16
 8006fb0:	4393      	bics	r3, r2
 8006fb2:	001a      	movs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4a2e      	ldr	r2, [pc, #184]	; (8007088 <TIM_OC2_SetConfig+0xe8>)
 8006fce:	4013      	ands	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4a2d      	ldr	r2, [pc, #180]	; (800708c <TIM_OC2_SetConfig+0xec>)
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	021b      	lsls	r3, r3, #8
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	4393      	bics	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a24      	ldr	r2, [pc, #144]	; (8007090 <TIM_OC2_SetConfig+0xf0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d10d      	bne.n	800701e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2280      	movs	r2, #128	; 0x80
 8007006:	4393      	bics	r3, r2
 8007008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2240      	movs	r2, #64	; 0x40
 800701a:	4393      	bics	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a1b      	ldr	r2, [pc, #108]	; (8007090 <TIM_OC2_SetConfig+0xf0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00b      	beq.n	800703e <TIM_OC2_SetConfig+0x9e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a1a      	ldr	r2, [pc, #104]	; (8007094 <TIM_OC2_SetConfig+0xf4>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d007      	beq.n	800703e <TIM_OC2_SetConfig+0x9e>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a19      	ldr	r2, [pc, #100]	; (8007098 <TIM_OC2_SetConfig+0xf8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d003      	beq.n	800703e <TIM_OC2_SetConfig+0x9e>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a18      	ldr	r2, [pc, #96]	; (800709c <TIM_OC2_SetConfig+0xfc>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d113      	bne.n	8007066 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	4a17      	ldr	r2, [pc, #92]	; (80070a0 <TIM_OC2_SetConfig+0x100>)
 8007042:	4013      	ands	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	4a16      	ldr	r2, [pc, #88]	; (80070a4 <TIM_OC2_SetConfig+0x104>)
 800704a:	4013      	ands	r3, r2
 800704c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	621a      	str	r2, [r3, #32]
}
 8007080:	46c0      	nop			; (mov r8, r8)
 8007082:	46bd      	mov	sp, r7
 8007084:	b006      	add	sp, #24
 8007086:	bd80      	pop	{r7, pc}
 8007088:	ffff8fff 	.word	0xffff8fff
 800708c:	fffffcff 	.word	0xfffffcff
 8007090:	40012c00 	.word	0x40012c00
 8007094:	40014000 	.word	0x40014000
 8007098:	40014400 	.word	0x40014400
 800709c:	40014800 	.word	0x40014800
 80070a0:	fffffbff 	.word	0xfffffbff
 80070a4:	fffff7ff 	.word	0xfffff7ff

080070a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	4a35      	ldr	r2, [pc, #212]	; (800718c <TIM_OC3_SetConfig+0xe4>)
 80070b8:	401a      	ands	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2270      	movs	r2, #112	; 0x70
 80070d4:	4393      	bics	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2203      	movs	r2, #3
 80070dc:	4393      	bics	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	4a28      	ldr	r2, [pc, #160]	; (8007190 <TIM_OC3_SetConfig+0xe8>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a24      	ldr	r2, [pc, #144]	; (8007194 <TIM_OC3_SetConfig+0xec>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d10d      	bne.n	8007122 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	4a23      	ldr	r2, [pc, #140]	; (8007198 <TIM_OC3_SetConfig+0xf0>)
 800710a:	4013      	ands	r3, r2
 800710c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	4a1f      	ldr	r2, [pc, #124]	; (800719c <TIM_OC3_SetConfig+0xf4>)
 800711e:	4013      	ands	r3, r2
 8007120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a1b      	ldr	r2, [pc, #108]	; (8007194 <TIM_OC3_SetConfig+0xec>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00b      	beq.n	8007142 <TIM_OC3_SetConfig+0x9a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a1c      	ldr	r2, [pc, #112]	; (80071a0 <TIM_OC3_SetConfig+0xf8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d007      	beq.n	8007142 <TIM_OC3_SetConfig+0x9a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a1b      	ldr	r2, [pc, #108]	; (80071a4 <TIM_OC3_SetConfig+0xfc>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d003      	beq.n	8007142 <TIM_OC3_SetConfig+0x9a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a1a      	ldr	r2, [pc, #104]	; (80071a8 <TIM_OC3_SetConfig+0x100>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d113      	bne.n	800716a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	4a19      	ldr	r2, [pc, #100]	; (80071ac <TIM_OC3_SetConfig+0x104>)
 8007146:	4013      	ands	r3, r2
 8007148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <TIM_OC3_SetConfig+0x108>)
 800714e:	4013      	ands	r3, r2
 8007150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	621a      	str	r2, [r3, #32]
}
 8007184:	46c0      	nop			; (mov r8, r8)
 8007186:	46bd      	mov	sp, r7
 8007188:	b006      	add	sp, #24
 800718a:	bd80      	pop	{r7, pc}
 800718c:	fffffeff 	.word	0xfffffeff
 8007190:	fffffdff 	.word	0xfffffdff
 8007194:	40012c00 	.word	0x40012c00
 8007198:	fffff7ff 	.word	0xfffff7ff
 800719c:	fffffbff 	.word	0xfffffbff
 80071a0:	40014000 	.word	0x40014000
 80071a4:	40014400 	.word	0x40014400
 80071a8:	40014800 	.word	0x40014800
 80071ac:	ffffefff 	.word	0xffffefff
 80071b0:	ffffdfff 	.word	0xffffdfff

080071b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	4a28      	ldr	r2, [pc, #160]	; (8007264 <TIM_OC4_SetConfig+0xb0>)
 80071c4:	401a      	ands	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4a22      	ldr	r2, [pc, #136]	; (8007268 <TIM_OC4_SetConfig+0xb4>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4a21      	ldr	r2, [pc, #132]	; (800726c <TIM_OC4_SetConfig+0xb8>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	021b      	lsls	r3, r3, #8
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	4a1d      	ldr	r2, [pc, #116]	; (8007270 <TIM_OC4_SetConfig+0xbc>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	031b      	lsls	r3, r3, #12
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a19      	ldr	r2, [pc, #100]	; (8007274 <TIM_OC4_SetConfig+0xc0>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00b      	beq.n	800722c <TIM_OC4_SetConfig+0x78>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a18      	ldr	r2, [pc, #96]	; (8007278 <TIM_OC4_SetConfig+0xc4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d007      	beq.n	800722c <TIM_OC4_SetConfig+0x78>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a17      	ldr	r2, [pc, #92]	; (800727c <TIM_OC4_SetConfig+0xc8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d003      	beq.n	800722c <TIM_OC4_SetConfig+0x78>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a16      	ldr	r2, [pc, #88]	; (8007280 <TIM_OC4_SetConfig+0xcc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d109      	bne.n	8007240 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4a15      	ldr	r2, [pc, #84]	; (8007284 <TIM_OC4_SetConfig+0xd0>)
 8007230:	4013      	ands	r3, r2
 8007232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	019b      	lsls	r3, r3, #6
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	621a      	str	r2, [r3, #32]
}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	46bd      	mov	sp, r7
 800725e:	b006      	add	sp, #24
 8007260:	bd80      	pop	{r7, pc}
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	ffffefff 	.word	0xffffefff
 8007268:	ffff8fff 	.word	0xffff8fff
 800726c:	fffffcff 	.word	0xfffffcff
 8007270:	ffffdfff 	.word	0xffffdfff
 8007274:	40012c00 	.word	0x40012c00
 8007278:	40014000 	.word	0x40014000
 800727c:	40014400 	.word	0x40014400
 8007280:	40014800 	.word	0x40014800
 8007284:	ffffbfff 	.word	0xffffbfff

08007288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007290:	46c0      	nop			; (mov r8, r8)
 8007292:	46bd      	mov	sp, r7
 8007294:	b002      	add	sp, #8
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072a0:	46c0      	nop			; (mov r8, r8)
 80072a2:	46bd      	mov	sp, r7
 80072a4:	b002      	add	sp, #8
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e044      	b.n	8007344 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d107      	bne.n	80072d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2274      	movs	r2, #116	; 0x74
 80072c6:	2100      	movs	r1, #0
 80072c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	0018      	movs	r0, r3
 80072ce:	f7fa fc9d 	bl	8001c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2224      	movs	r2, #36	; 0x24
 80072d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2101      	movs	r1, #1
 80072e4:	438a      	bics	r2, r1
 80072e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	0018      	movs	r0, r3
 80072ec:	f000 fb24 	bl	8007938 <UART_SetConfig>
 80072f0:	0003      	movs	r3, r0
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d101      	bne.n	80072fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e024      	b.n	8007344 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	0018      	movs	r0, r3
 8007306:	f000 fc9f 	bl	8007c48 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	490d      	ldr	r1, [pc, #52]	; (800734c <HAL_UART_Init+0xa4>)
 8007316:	400a      	ands	r2, r1
 8007318:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	212a      	movs	r1, #42	; 0x2a
 8007326:	438a      	bics	r2, r1
 8007328:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2101      	movs	r1, #1
 8007336:	430a      	orrs	r2, r1
 8007338:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	0018      	movs	r0, r3
 800733e:	f000 fd37 	bl	8007db0 <UART_CheckIdleState>
 8007342:	0003      	movs	r3, r0
}
 8007344:	0018      	movs	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	b002      	add	sp, #8
 800734a:	bd80      	pop	{r7, pc}
 800734c:	ffffb7ff 	.word	0xffffb7ff

08007350 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007350:	b590      	push	{r4, r7, lr}
 8007352:	b0ab      	sub	sp, #172	; 0xac
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	22a4      	movs	r2, #164	; 0xa4
 8007360:	18b9      	adds	r1, r7, r2
 8007362:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	20a0      	movs	r0, #160	; 0xa0
 800736c:	1839      	adds	r1, r7, r0
 800736e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	219c      	movs	r1, #156	; 0x9c
 8007378:	1879      	adds	r1, r7, r1
 800737a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800737c:	0011      	movs	r1, r2
 800737e:	18bb      	adds	r3, r7, r2
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a99      	ldr	r2, [pc, #612]	; (80075e8 <HAL_UART_IRQHandler+0x298>)
 8007384:	4013      	ands	r3, r2
 8007386:	2298      	movs	r2, #152	; 0x98
 8007388:	18bc      	adds	r4, r7, r2
 800738a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800738c:	18bb      	adds	r3, r7, r2
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d114      	bne.n	80073be <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007394:	187b      	adds	r3, r7, r1
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2220      	movs	r2, #32
 800739a:	4013      	ands	r3, r2
 800739c:	d00f      	beq.n	80073be <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800739e:	183b      	adds	r3, r7, r0
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2220      	movs	r2, #32
 80073a4:	4013      	ands	r3, r2
 80073a6:	d00a      	beq.n	80073be <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d100      	bne.n	80073b2 <HAL_UART_IRQHandler+0x62>
 80073b0:	e296      	b.n	80078e0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	0010      	movs	r0, r2
 80073ba:	4798      	blx	r3
      }
      return;
 80073bc:	e290      	b.n	80078e0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073be:	2398      	movs	r3, #152	; 0x98
 80073c0:	18fb      	adds	r3, r7, r3
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d100      	bne.n	80073ca <HAL_UART_IRQHandler+0x7a>
 80073c8:	e114      	b.n	80075f4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80073ca:	239c      	movs	r3, #156	; 0x9c
 80073cc:	18fb      	adds	r3, r7, r3
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2201      	movs	r2, #1
 80073d2:	4013      	ands	r3, r2
 80073d4:	d106      	bne.n	80073e4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80073d6:	23a0      	movs	r3, #160	; 0xa0
 80073d8:	18fb      	adds	r3, r7, r3
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a83      	ldr	r2, [pc, #524]	; (80075ec <HAL_UART_IRQHandler+0x29c>)
 80073de:	4013      	ands	r3, r2
 80073e0:	d100      	bne.n	80073e4 <HAL_UART_IRQHandler+0x94>
 80073e2:	e107      	b.n	80075f4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073e4:	23a4      	movs	r3, #164	; 0xa4
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2201      	movs	r2, #1
 80073ec:	4013      	ands	r3, r2
 80073ee:	d012      	beq.n	8007416 <HAL_UART_IRQHandler+0xc6>
 80073f0:	23a0      	movs	r3, #160	; 0xa0
 80073f2:	18fb      	adds	r3, r7, r3
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	2380      	movs	r3, #128	; 0x80
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	4013      	ands	r3, r2
 80073fc:	d00b      	beq.n	8007416 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2201      	movs	r2, #1
 8007404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2280      	movs	r2, #128	; 0x80
 800740a:	589b      	ldr	r3, [r3, r2]
 800740c:	2201      	movs	r2, #1
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2180      	movs	r1, #128	; 0x80
 8007414:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007416:	23a4      	movs	r3, #164	; 0xa4
 8007418:	18fb      	adds	r3, r7, r3
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2202      	movs	r2, #2
 800741e:	4013      	ands	r3, r2
 8007420:	d011      	beq.n	8007446 <HAL_UART_IRQHandler+0xf6>
 8007422:	239c      	movs	r3, #156	; 0x9c
 8007424:	18fb      	adds	r3, r7, r3
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2201      	movs	r2, #1
 800742a:	4013      	ands	r3, r2
 800742c:	d00b      	beq.n	8007446 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2202      	movs	r2, #2
 8007434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2280      	movs	r2, #128	; 0x80
 800743a:	589b      	ldr	r3, [r3, r2]
 800743c:	2204      	movs	r2, #4
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2180      	movs	r1, #128	; 0x80
 8007444:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007446:	23a4      	movs	r3, #164	; 0xa4
 8007448:	18fb      	adds	r3, r7, r3
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2204      	movs	r2, #4
 800744e:	4013      	ands	r3, r2
 8007450:	d011      	beq.n	8007476 <HAL_UART_IRQHandler+0x126>
 8007452:	239c      	movs	r3, #156	; 0x9c
 8007454:	18fb      	adds	r3, r7, r3
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2201      	movs	r2, #1
 800745a:	4013      	ands	r3, r2
 800745c:	d00b      	beq.n	8007476 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2204      	movs	r2, #4
 8007464:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2280      	movs	r2, #128	; 0x80
 800746a:	589b      	ldr	r3, [r3, r2]
 800746c:	2202      	movs	r2, #2
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2180      	movs	r1, #128	; 0x80
 8007474:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007476:	23a4      	movs	r3, #164	; 0xa4
 8007478:	18fb      	adds	r3, r7, r3
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2208      	movs	r2, #8
 800747e:	4013      	ands	r3, r2
 8007480:	d017      	beq.n	80074b2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007482:	23a0      	movs	r3, #160	; 0xa0
 8007484:	18fb      	adds	r3, r7, r3
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2220      	movs	r2, #32
 800748a:	4013      	ands	r3, r2
 800748c:	d105      	bne.n	800749a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800748e:	239c      	movs	r3, #156	; 0x9c
 8007490:	18fb      	adds	r3, r7, r3
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2201      	movs	r2, #1
 8007496:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007498:	d00b      	beq.n	80074b2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2208      	movs	r2, #8
 80074a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2280      	movs	r2, #128	; 0x80
 80074a6:	589b      	ldr	r3, [r3, r2]
 80074a8:	2208      	movs	r2, #8
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2180      	movs	r1, #128	; 0x80
 80074b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074b2:	23a4      	movs	r3, #164	; 0xa4
 80074b4:	18fb      	adds	r3, r7, r3
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	2380      	movs	r3, #128	; 0x80
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	4013      	ands	r3, r2
 80074be:	d013      	beq.n	80074e8 <HAL_UART_IRQHandler+0x198>
 80074c0:	23a0      	movs	r3, #160	; 0xa0
 80074c2:	18fb      	adds	r3, r7, r3
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	2380      	movs	r3, #128	; 0x80
 80074c8:	04db      	lsls	r3, r3, #19
 80074ca:	4013      	ands	r3, r2
 80074cc:	d00c      	beq.n	80074e8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2280      	movs	r2, #128	; 0x80
 80074d4:	0112      	lsls	r2, r2, #4
 80074d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2280      	movs	r2, #128	; 0x80
 80074dc:	589b      	ldr	r3, [r3, r2]
 80074de:	2220      	movs	r2, #32
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2180      	movs	r1, #128	; 0x80
 80074e6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2280      	movs	r2, #128	; 0x80
 80074ec:	589b      	ldr	r3, [r3, r2]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d100      	bne.n	80074f4 <HAL_UART_IRQHandler+0x1a4>
 80074f2:	e1f7      	b.n	80078e4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80074f4:	23a4      	movs	r3, #164	; 0xa4
 80074f6:	18fb      	adds	r3, r7, r3
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2220      	movs	r2, #32
 80074fc:	4013      	ands	r3, r2
 80074fe:	d00e      	beq.n	800751e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007500:	23a0      	movs	r3, #160	; 0xa0
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2220      	movs	r2, #32
 8007508:	4013      	ands	r3, r2
 800750a:	d008      	beq.n	800751e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007510:	2b00      	cmp	r3, #0
 8007512:	d004      	beq.n	800751e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	0010      	movs	r0, r2
 800751c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2280      	movs	r2, #128	; 0x80
 8007522:	589b      	ldr	r3, [r3, r2]
 8007524:	2194      	movs	r1, #148	; 0x94
 8007526:	187a      	adds	r2, r7, r1
 8007528:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	2240      	movs	r2, #64	; 0x40
 8007532:	4013      	ands	r3, r2
 8007534:	2b40      	cmp	r3, #64	; 0x40
 8007536:	d004      	beq.n	8007542 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007538:	187b      	adds	r3, r7, r1
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2228      	movs	r2, #40	; 0x28
 800753e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007540:	d047      	beq.n	80075d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	0018      	movs	r0, r3
 8007546:	f000 fd3f 	bl	8007fc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	2240      	movs	r2, #64	; 0x40
 8007552:	4013      	ands	r3, r2
 8007554:	2b40      	cmp	r3, #64	; 0x40
 8007556:	d137      	bne.n	80075c8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007558:	f3ef 8310 	mrs	r3, PRIMASK
 800755c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800755e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007560:	2090      	movs	r0, #144	; 0x90
 8007562:	183a      	adds	r2, r7, r0
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	2301      	movs	r3, #1
 8007568:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800756c:	f383 8810 	msr	PRIMASK, r3
}
 8007570:	46c0      	nop			; (mov r8, r8)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2140      	movs	r1, #64	; 0x40
 800757e:	438a      	bics	r2, r1
 8007580:	609a      	str	r2, [r3, #8]
 8007582:	183b      	adds	r3, r7, r0
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800758a:	f383 8810 	msr	PRIMASK, r3
}
 800758e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007594:	2b00      	cmp	r3, #0
 8007596:	d012      	beq.n	80075be <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759c:	4a14      	ldr	r2, [pc, #80]	; (80075f0 <HAL_UART_IRQHandler+0x2a0>)
 800759e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	0018      	movs	r0, r3
 80075a6:	f7fb fd71 	bl	800308c <HAL_DMA_Abort_IT>
 80075aa:	1e03      	subs	r3, r0, #0
 80075ac:	d01a      	beq.n	80075e4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b8:	0018      	movs	r0, r3
 80075ba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075bc:	e012      	b.n	80075e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	0018      	movs	r0, r3
 80075c2:	f000 f9a5 	bl	8007910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c6:	e00d      	b.n	80075e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	0018      	movs	r0, r3
 80075cc:	f000 f9a0 	bl	8007910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d0:	e008      	b.n	80075e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	0018      	movs	r0, r3
 80075d6:	f000 f99b 	bl	8007910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2280      	movs	r2, #128	; 0x80
 80075de:	2100      	movs	r1, #0
 80075e0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80075e2:	e17f      	b.n	80078e4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e4:	46c0      	nop			; (mov r8, r8)
    return;
 80075e6:	e17d      	b.n	80078e4 <HAL_UART_IRQHandler+0x594>
 80075e8:	0000080f 	.word	0x0000080f
 80075ec:	04000120 	.word	0x04000120
 80075f0:	0800808d 	.word	0x0800808d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d000      	beq.n	80075fe <HAL_UART_IRQHandler+0x2ae>
 80075fc:	e131      	b.n	8007862 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075fe:	23a4      	movs	r3, #164	; 0xa4
 8007600:	18fb      	adds	r3, r7, r3
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2210      	movs	r2, #16
 8007606:	4013      	ands	r3, r2
 8007608:	d100      	bne.n	800760c <HAL_UART_IRQHandler+0x2bc>
 800760a:	e12a      	b.n	8007862 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800760c:	23a0      	movs	r3, #160	; 0xa0
 800760e:	18fb      	adds	r3, r7, r3
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2210      	movs	r2, #16
 8007614:	4013      	ands	r3, r2
 8007616:	d100      	bne.n	800761a <HAL_UART_IRQHandler+0x2ca>
 8007618:	e123      	b.n	8007862 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2210      	movs	r2, #16
 8007620:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	2240      	movs	r2, #64	; 0x40
 800762a:	4013      	ands	r3, r2
 800762c:	2b40      	cmp	r3, #64	; 0x40
 800762e:	d000      	beq.n	8007632 <HAL_UART_IRQHandler+0x2e2>
 8007630:	e09b      	b.n	800776a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	217e      	movs	r1, #126	; 0x7e
 800763c:	187b      	adds	r3, r7, r1
 800763e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007640:	187b      	adds	r3, r7, r1
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d100      	bne.n	800764a <HAL_UART_IRQHandler+0x2fa>
 8007648:	e14e      	b.n	80078e8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2258      	movs	r2, #88	; 0x58
 800764e:	5a9b      	ldrh	r3, [r3, r2]
 8007650:	187a      	adds	r2, r7, r1
 8007652:	8812      	ldrh	r2, [r2, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d300      	bcc.n	800765a <HAL_UART_IRQHandler+0x30a>
 8007658:	e146      	b.n	80078e8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	187a      	adds	r2, r7, r1
 800765e:	215a      	movs	r1, #90	; 0x5a
 8007660:	8812      	ldrh	r2, [r2, #0]
 8007662:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	2b20      	cmp	r3, #32
 800766c:	d06e      	beq.n	800774c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800766e:	f3ef 8310 	mrs	r3, PRIMASK
 8007672:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007676:	67bb      	str	r3, [r7, #120]	; 0x78
 8007678:	2301      	movs	r3, #1
 800767a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767e:	f383 8810 	msr	PRIMASK, r3
}
 8007682:	46c0      	nop			; (mov r8, r8)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	499a      	ldr	r1, [pc, #616]	; (80078f8 <HAL_UART_IRQHandler+0x5a8>)
 8007690:	400a      	ands	r2, r1
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007696:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769a:	f383 8810 	msr	PRIMASK, r3
}
 800769e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a0:	f3ef 8310 	mrs	r3, PRIMASK
 80076a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80076a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a8:	677b      	str	r3, [r7, #116]	; 0x74
 80076aa:	2301      	movs	r3, #1
 80076ac:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076b0:	f383 8810 	msr	PRIMASK, r3
}
 80076b4:	46c0      	nop			; (mov r8, r8)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2101      	movs	r1, #1
 80076c2:	438a      	bics	r2, r1
 80076c4:	609a      	str	r2, [r3, #8]
 80076c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076c8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076cc:	f383 8810 	msr	PRIMASK, r3
}
 80076d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d2:	f3ef 8310 	mrs	r3, PRIMASK
 80076d6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80076d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076da:	673b      	str	r3, [r7, #112]	; 0x70
 80076dc:	2301      	movs	r3, #1
 80076de:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e2:	f383 8810 	msr	PRIMASK, r3
}
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2140      	movs	r1, #64	; 0x40
 80076f4:	438a      	bics	r2, r1
 80076f6:	609a      	str	r2, [r3, #8]
 80076f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076fa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fe:	f383 8810 	msr	PRIMASK, r3
}
 8007702:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007710:	f3ef 8310 	mrs	r3, PRIMASK
 8007714:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007716:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007718:	66fb      	str	r3, [r7, #108]	; 0x6c
 800771a:	2301      	movs	r3, #1
 800771c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800771e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007720:	f383 8810 	msr	PRIMASK, r3
}
 8007724:	46c0      	nop			; (mov r8, r8)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2110      	movs	r1, #16
 8007732:	438a      	bics	r2, r1
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007738:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800773a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800773c:	f383 8810 	msr	PRIMASK, r3
}
 8007740:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007746:	0018      	movs	r0, r3
 8007748:	f7fb fc68 	bl	800301c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2258      	movs	r2, #88	; 0x58
 8007750:	5a9a      	ldrh	r2, [r3, r2]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	215a      	movs	r1, #90	; 0x5a
 8007756:	5a5b      	ldrh	r3, [r3, r1]
 8007758:	b29b      	uxth	r3, r3
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	b29a      	uxth	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	0011      	movs	r1, r2
 8007762:	0018      	movs	r0, r3
 8007764:	f000 f8dc 	bl	8007920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007768:	e0be      	b.n	80078e8 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2258      	movs	r2, #88	; 0x58
 800776e:	5a99      	ldrh	r1, [r3, r2]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	225a      	movs	r2, #90	; 0x5a
 8007774:	5a9b      	ldrh	r3, [r3, r2]
 8007776:	b29a      	uxth	r2, r3
 8007778:	208e      	movs	r0, #142	; 0x8e
 800777a:	183b      	adds	r3, r7, r0
 800777c:	1a8a      	subs	r2, r1, r2
 800777e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	225a      	movs	r2, #90	; 0x5a
 8007784:	5a9b      	ldrh	r3, [r3, r2]
 8007786:	b29b      	uxth	r3, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d100      	bne.n	800778e <HAL_UART_IRQHandler+0x43e>
 800778c:	e0ae      	b.n	80078ec <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800778e:	183b      	adds	r3, r7, r0
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d100      	bne.n	8007798 <HAL_UART_IRQHandler+0x448>
 8007796:	e0a9      	b.n	80078ec <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007798:	f3ef 8310 	mrs	r3, PRIMASK
 800779c:	60fb      	str	r3, [r7, #12]
  return(result);
 800779e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a0:	2488      	movs	r4, #136	; 0x88
 80077a2:	193a      	adds	r2, r7, r4
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	2301      	movs	r3, #1
 80077a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f383 8810 	msr	PRIMASK, r3
}
 80077b0:	46c0      	nop			; (mov r8, r8)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	494f      	ldr	r1, [pc, #316]	; (80078fc <HAL_UART_IRQHandler+0x5ac>)
 80077be:	400a      	ands	r2, r1
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	193b      	adds	r3, r7, r4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f383 8810 	msr	PRIMASK, r3
}
 80077ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077d0:	f3ef 8310 	mrs	r3, PRIMASK
 80077d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80077d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d8:	2484      	movs	r4, #132	; 0x84
 80077da:	193a      	adds	r2, r7, r4
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	2301      	movs	r3, #1
 80077e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	f383 8810 	msr	PRIMASK, r3
}
 80077e8:	46c0      	nop			; (mov r8, r8)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2101      	movs	r1, #1
 80077f6:	438a      	bics	r2, r1
 80077f8:	609a      	str	r2, [r3, #8]
 80077fa:	193b      	adds	r3, r7, r4
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	f383 8810 	msr	PRIMASK, r3
}
 8007806:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800781a:	f3ef 8310 	mrs	r3, PRIMASK
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007822:	2480      	movs	r4, #128	; 0x80
 8007824:	193a      	adds	r2, r7, r4
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	2301      	movs	r3, #1
 800782a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	f383 8810 	msr	PRIMASK, r3
}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2110      	movs	r1, #16
 8007840:	438a      	bics	r2, r1
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	193b      	adds	r3, r7, r4
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	f383 8810 	msr	PRIMASK, r3
}
 8007850:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007852:	183b      	adds	r3, r7, r0
 8007854:	881a      	ldrh	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	0011      	movs	r1, r2
 800785a:	0018      	movs	r0, r3
 800785c:	f000 f860 	bl	8007920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007860:	e044      	b.n	80078ec <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007862:	23a4      	movs	r3, #164	; 0xa4
 8007864:	18fb      	adds	r3, r7, r3
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	2380      	movs	r3, #128	; 0x80
 800786a:	035b      	lsls	r3, r3, #13
 800786c:	4013      	ands	r3, r2
 800786e:	d010      	beq.n	8007892 <HAL_UART_IRQHandler+0x542>
 8007870:	239c      	movs	r3, #156	; 0x9c
 8007872:	18fb      	adds	r3, r7, r3
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	2380      	movs	r3, #128	; 0x80
 8007878:	03db      	lsls	r3, r3, #15
 800787a:	4013      	ands	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2280      	movs	r2, #128	; 0x80
 8007884:	0352      	lsls	r2, r2, #13
 8007886:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	0018      	movs	r0, r3
 800788c:	f000 fc40 	bl	8008110 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007890:	e02f      	b.n	80078f2 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007892:	23a4      	movs	r3, #164	; 0xa4
 8007894:	18fb      	adds	r3, r7, r3
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2280      	movs	r2, #128	; 0x80
 800789a:	4013      	ands	r3, r2
 800789c:	d00f      	beq.n	80078be <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800789e:	23a0      	movs	r3, #160	; 0xa0
 80078a0:	18fb      	adds	r3, r7, r3
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2280      	movs	r2, #128	; 0x80
 80078a6:	4013      	ands	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d01e      	beq.n	80078f0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	0010      	movs	r0, r2
 80078ba:	4798      	blx	r3
    }
    return;
 80078bc:	e018      	b.n	80078f0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078be:	23a4      	movs	r3, #164	; 0xa4
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2240      	movs	r2, #64	; 0x40
 80078c6:	4013      	ands	r3, r2
 80078c8:	d013      	beq.n	80078f2 <HAL_UART_IRQHandler+0x5a2>
 80078ca:	23a0      	movs	r3, #160	; 0xa0
 80078cc:	18fb      	adds	r3, r7, r3
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2240      	movs	r2, #64	; 0x40
 80078d2:	4013      	ands	r3, r2
 80078d4:	d00d      	beq.n	80078f2 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	0018      	movs	r0, r3
 80078da:	f000 fbee 	bl	80080ba <UART_EndTransmit_IT>
    return;
 80078de:	e008      	b.n	80078f2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80078e0:	46c0      	nop			; (mov r8, r8)
 80078e2:	e006      	b.n	80078f2 <HAL_UART_IRQHandler+0x5a2>
    return;
 80078e4:	46c0      	nop			; (mov r8, r8)
 80078e6:	e004      	b.n	80078f2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80078e8:	46c0      	nop			; (mov r8, r8)
 80078ea:	e002      	b.n	80078f2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80078ec:	46c0      	nop			; (mov r8, r8)
 80078ee:	e000      	b.n	80078f2 <HAL_UART_IRQHandler+0x5a2>
    return;
 80078f0:	46c0      	nop			; (mov r8, r8)
  }

}
 80078f2:	46bd      	mov	sp, r7
 80078f4:	b02b      	add	sp, #172	; 0xac
 80078f6:	bd90      	pop	{r4, r7, pc}
 80078f8:	fffffeff 	.word	0xfffffeff
 80078fc:	fffffedf 	.word	0xfffffedf

08007900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007908:	46c0      	nop			; (mov r8, r8)
 800790a:	46bd      	mov	sp, r7
 800790c:	b002      	add	sp, #8
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007918:	46c0      	nop			; (mov r8, r8)
 800791a:	46bd      	mov	sp, r7
 800791c:	b002      	add	sp, #8
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	000a      	movs	r2, r1
 800792a:	1cbb      	adds	r3, r7, #2
 800792c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800792e:	46c0      	nop			; (mov r8, r8)
 8007930:	46bd      	mov	sp, r7
 8007932:	b002      	add	sp, #8
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007940:	231e      	movs	r3, #30
 8007942:	18fb      	adds	r3, r7, r3
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	69db      	ldr	r3, [r3, #28]
 800795c:	4313      	orrs	r3, r2
 800795e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4aaf      	ldr	r2, [pc, #700]	; (8007c24 <UART_SetConfig+0x2ec>)
 8007968:	4013      	ands	r3, r2
 800796a:	0019      	movs	r1, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	430a      	orrs	r2, r1
 8007974:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4aaa      	ldr	r2, [pc, #680]	; (8007c28 <UART_SetConfig+0x2f0>)
 800797e:	4013      	ands	r3, r2
 8007980:	0019      	movs	r1, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	4313      	orrs	r3, r2
 800799c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	4aa1      	ldr	r2, [pc, #644]	; (8007c2c <UART_SetConfig+0x2f4>)
 80079a6:	4013      	ands	r3, r2
 80079a8:	0019      	movs	r1, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a9d      	ldr	r2, [pc, #628]	; (8007c30 <UART_SetConfig+0x2f8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d127      	bne.n	8007a0e <UART_SetConfig+0xd6>
 80079be:	4b9d      	ldr	r3, [pc, #628]	; (8007c34 <UART_SetConfig+0x2fc>)
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	2203      	movs	r2, #3
 80079c4:	4013      	ands	r3, r2
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d00d      	beq.n	80079e6 <UART_SetConfig+0xae>
 80079ca:	d81b      	bhi.n	8007a04 <UART_SetConfig+0xcc>
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d014      	beq.n	80079fa <UART_SetConfig+0xc2>
 80079d0:	d818      	bhi.n	8007a04 <UART_SetConfig+0xcc>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <UART_SetConfig+0xa4>
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d00a      	beq.n	80079f0 <UART_SetConfig+0xb8>
 80079da:	e013      	b.n	8007a04 <UART_SetConfig+0xcc>
 80079dc:	231f      	movs	r3, #31
 80079de:	18fb      	adds	r3, r7, r3
 80079e0:	2200      	movs	r2, #0
 80079e2:	701a      	strb	r2, [r3, #0]
 80079e4:	e065      	b.n	8007ab2 <UART_SetConfig+0x17a>
 80079e6:	231f      	movs	r3, #31
 80079e8:	18fb      	adds	r3, r7, r3
 80079ea:	2202      	movs	r2, #2
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	e060      	b.n	8007ab2 <UART_SetConfig+0x17a>
 80079f0:	231f      	movs	r3, #31
 80079f2:	18fb      	adds	r3, r7, r3
 80079f4:	2204      	movs	r2, #4
 80079f6:	701a      	strb	r2, [r3, #0]
 80079f8:	e05b      	b.n	8007ab2 <UART_SetConfig+0x17a>
 80079fa:	231f      	movs	r3, #31
 80079fc:	18fb      	adds	r3, r7, r3
 80079fe:	2208      	movs	r2, #8
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	e056      	b.n	8007ab2 <UART_SetConfig+0x17a>
 8007a04:	231f      	movs	r3, #31
 8007a06:	18fb      	adds	r3, r7, r3
 8007a08:	2210      	movs	r2, #16
 8007a0a:	701a      	strb	r2, [r3, #0]
 8007a0c:	e051      	b.n	8007ab2 <UART_SetConfig+0x17a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a89      	ldr	r2, [pc, #548]	; (8007c38 <UART_SetConfig+0x300>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d134      	bne.n	8007a82 <UART_SetConfig+0x14a>
 8007a18:	4b86      	ldr	r3, [pc, #536]	; (8007c34 <UART_SetConfig+0x2fc>)
 8007a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a1c:	23c0      	movs	r3, #192	; 0xc0
 8007a1e:	029b      	lsls	r3, r3, #10
 8007a20:	4013      	ands	r3, r2
 8007a22:	22c0      	movs	r2, #192	; 0xc0
 8007a24:	0292      	lsls	r2, r2, #10
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d017      	beq.n	8007a5a <UART_SetConfig+0x122>
 8007a2a:	22c0      	movs	r2, #192	; 0xc0
 8007a2c:	0292      	lsls	r2, r2, #10
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d822      	bhi.n	8007a78 <UART_SetConfig+0x140>
 8007a32:	2280      	movs	r2, #128	; 0x80
 8007a34:	0292      	lsls	r2, r2, #10
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d019      	beq.n	8007a6e <UART_SetConfig+0x136>
 8007a3a:	2280      	movs	r2, #128	; 0x80
 8007a3c:	0292      	lsls	r2, r2, #10
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d81a      	bhi.n	8007a78 <UART_SetConfig+0x140>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d004      	beq.n	8007a50 <UART_SetConfig+0x118>
 8007a46:	2280      	movs	r2, #128	; 0x80
 8007a48:	0252      	lsls	r2, r2, #9
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00a      	beq.n	8007a64 <UART_SetConfig+0x12c>
 8007a4e:	e013      	b.n	8007a78 <UART_SetConfig+0x140>
 8007a50:	231f      	movs	r3, #31
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	2200      	movs	r2, #0
 8007a56:	701a      	strb	r2, [r3, #0]
 8007a58:	e02b      	b.n	8007ab2 <UART_SetConfig+0x17a>
 8007a5a:	231f      	movs	r3, #31
 8007a5c:	18fb      	adds	r3, r7, r3
 8007a5e:	2202      	movs	r2, #2
 8007a60:	701a      	strb	r2, [r3, #0]
 8007a62:	e026      	b.n	8007ab2 <UART_SetConfig+0x17a>
 8007a64:	231f      	movs	r3, #31
 8007a66:	18fb      	adds	r3, r7, r3
 8007a68:	2204      	movs	r2, #4
 8007a6a:	701a      	strb	r2, [r3, #0]
 8007a6c:	e021      	b.n	8007ab2 <UART_SetConfig+0x17a>
 8007a6e:	231f      	movs	r3, #31
 8007a70:	18fb      	adds	r3, r7, r3
 8007a72:	2208      	movs	r2, #8
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	e01c      	b.n	8007ab2 <UART_SetConfig+0x17a>
 8007a78:	231f      	movs	r3, #31
 8007a7a:	18fb      	adds	r3, r7, r3
 8007a7c:	2210      	movs	r2, #16
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	e017      	b.n	8007ab2 <UART_SetConfig+0x17a>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a6d      	ldr	r2, [pc, #436]	; (8007c3c <UART_SetConfig+0x304>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d104      	bne.n	8007a96 <UART_SetConfig+0x15e>
 8007a8c:	231f      	movs	r3, #31
 8007a8e:	18fb      	adds	r3, r7, r3
 8007a90:	2200      	movs	r2, #0
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	e00d      	b.n	8007ab2 <UART_SetConfig+0x17a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a69      	ldr	r2, [pc, #420]	; (8007c40 <UART_SetConfig+0x308>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d104      	bne.n	8007aaa <UART_SetConfig+0x172>
 8007aa0:	231f      	movs	r3, #31
 8007aa2:	18fb      	adds	r3, r7, r3
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	701a      	strb	r2, [r3, #0]
 8007aa8:	e003      	b.n	8007ab2 <UART_SetConfig+0x17a>
 8007aaa:	231f      	movs	r3, #31
 8007aac:	18fb      	adds	r3, r7, r3
 8007aae:	2210      	movs	r2, #16
 8007ab0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	69da      	ldr	r2, [r3, #28]
 8007ab6:	2380      	movs	r3, #128	; 0x80
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d15d      	bne.n	8007b7a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8007abe:	231f      	movs	r3, #31
 8007ac0:	18fb      	adds	r3, r7, r3
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d015      	beq.n	8007af4 <UART_SetConfig+0x1bc>
 8007ac8:	dc18      	bgt.n	8007afc <UART_SetConfig+0x1c4>
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d00d      	beq.n	8007aea <UART_SetConfig+0x1b2>
 8007ace:	dc15      	bgt.n	8007afc <UART_SetConfig+0x1c4>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <UART_SetConfig+0x1a2>
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d005      	beq.n	8007ae4 <UART_SetConfig+0x1ac>
 8007ad8:	e010      	b.n	8007afc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ada:	f7fe f865 	bl	8005ba8 <HAL_RCC_GetPCLK1Freq>
 8007ade:	0003      	movs	r3, r0
 8007ae0:	61bb      	str	r3, [r7, #24]
        break;
 8007ae2:	e012      	b.n	8007b0a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ae4:	4b57      	ldr	r3, [pc, #348]	; (8007c44 <UART_SetConfig+0x30c>)
 8007ae6:	61bb      	str	r3, [r7, #24]
        break;
 8007ae8:	e00f      	b.n	8007b0a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aea:	f7fd ffd1 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8007aee:	0003      	movs	r3, r0
 8007af0:	61bb      	str	r3, [r7, #24]
        break;
 8007af2:	e00a      	b.n	8007b0a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007af4:	2380      	movs	r3, #128	; 0x80
 8007af6:	021b      	lsls	r3, r3, #8
 8007af8:	61bb      	str	r3, [r7, #24]
        break;
 8007afa:	e006      	b.n	8007b0a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b00:	231e      	movs	r3, #30
 8007b02:	18fb      	adds	r3, r7, r3
 8007b04:	2201      	movs	r2, #1
 8007b06:	701a      	strb	r2, [r3, #0]
        break;
 8007b08:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d100      	bne.n	8007b12 <UART_SetConfig+0x1da>
 8007b10:	e07b      	b.n	8007c0a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	005a      	lsls	r2, r3, #1
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	085b      	lsrs	r3, r3, #1
 8007b1c:	18d2      	adds	r2, r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	0019      	movs	r1, r3
 8007b24:	0010      	movs	r0, r2
 8007b26:	f7f8 fb01 	bl	800012c <__udivsi3>
 8007b2a:	0003      	movs	r3, r0
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	2b0f      	cmp	r3, #15
 8007b34:	d91c      	bls.n	8007b70 <UART_SetConfig+0x238>
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	2380      	movs	r3, #128	; 0x80
 8007b3a:	025b      	lsls	r3, r3, #9
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d217      	bcs.n	8007b70 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	200e      	movs	r0, #14
 8007b46:	183b      	adds	r3, r7, r0
 8007b48:	210f      	movs	r1, #15
 8007b4a:	438a      	bics	r2, r1
 8007b4c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	085b      	lsrs	r3, r3, #1
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2207      	movs	r2, #7
 8007b56:	4013      	ands	r3, r2
 8007b58:	b299      	uxth	r1, r3
 8007b5a:	183b      	adds	r3, r7, r0
 8007b5c:	183a      	adds	r2, r7, r0
 8007b5e:	8812      	ldrh	r2, [r2, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	183a      	adds	r2, r7, r0
 8007b6a:	8812      	ldrh	r2, [r2, #0]
 8007b6c:	60da      	str	r2, [r3, #12]
 8007b6e:	e04c      	b.n	8007c0a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007b70:	231e      	movs	r3, #30
 8007b72:	18fb      	adds	r3, r7, r3
 8007b74:	2201      	movs	r2, #1
 8007b76:	701a      	strb	r2, [r3, #0]
 8007b78:	e047      	b.n	8007c0a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b7a:	231f      	movs	r3, #31
 8007b7c:	18fb      	adds	r3, r7, r3
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d015      	beq.n	8007bb0 <UART_SetConfig+0x278>
 8007b84:	dc18      	bgt.n	8007bb8 <UART_SetConfig+0x280>
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d00d      	beq.n	8007ba6 <UART_SetConfig+0x26e>
 8007b8a:	dc15      	bgt.n	8007bb8 <UART_SetConfig+0x280>
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <UART_SetConfig+0x25e>
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d005      	beq.n	8007ba0 <UART_SetConfig+0x268>
 8007b94:	e010      	b.n	8007bb8 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b96:	f7fe f807 	bl	8005ba8 <HAL_RCC_GetPCLK1Freq>
 8007b9a:	0003      	movs	r3, r0
 8007b9c:	61bb      	str	r3, [r7, #24]
        break;
 8007b9e:	e012      	b.n	8007bc6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ba0:	4b28      	ldr	r3, [pc, #160]	; (8007c44 <UART_SetConfig+0x30c>)
 8007ba2:	61bb      	str	r3, [r7, #24]
        break;
 8007ba4:	e00f      	b.n	8007bc6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ba6:	f7fd ff73 	bl	8005a90 <HAL_RCC_GetSysClockFreq>
 8007baa:	0003      	movs	r3, r0
 8007bac:	61bb      	str	r3, [r7, #24]
        break;
 8007bae:	e00a      	b.n	8007bc6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bb0:	2380      	movs	r3, #128	; 0x80
 8007bb2:	021b      	lsls	r3, r3, #8
 8007bb4:	61bb      	str	r3, [r7, #24]
        break;
 8007bb6:	e006      	b.n	8007bc6 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007bbc:	231e      	movs	r3, #30
 8007bbe:	18fb      	adds	r3, r7, r3
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	701a      	strb	r2, [r3, #0]
        break;
 8007bc4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01e      	beq.n	8007c0a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	085a      	lsrs	r2, r3, #1
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	18d2      	adds	r2, r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	0019      	movs	r1, r3
 8007bdc:	0010      	movs	r0, r2
 8007bde:	f7f8 faa5 	bl	800012c <__udivsi3>
 8007be2:	0003      	movs	r3, r0
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	2b0f      	cmp	r3, #15
 8007bec:	d909      	bls.n	8007c02 <UART_SetConfig+0x2ca>
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	2380      	movs	r3, #128	; 0x80
 8007bf2:	025b      	lsls	r3, r3, #9
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d204      	bcs.n	8007c02 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	60da      	str	r2, [r3, #12]
 8007c00:	e003      	b.n	8007c0a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007c02:	231e      	movs	r3, #30
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	2201      	movs	r2, #1
 8007c08:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c16:	231e      	movs	r3, #30
 8007c18:	18fb      	adds	r3, r7, r3
 8007c1a:	781b      	ldrb	r3, [r3, #0]
}
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	b008      	add	sp, #32
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	efff69f3 	.word	0xefff69f3
 8007c28:	ffffcfff 	.word	0xffffcfff
 8007c2c:	fffff4ff 	.word	0xfffff4ff
 8007c30:	40013800 	.word	0x40013800
 8007c34:	40021000 	.word	0x40021000
 8007c38:	40004400 	.word	0x40004400
 8007c3c:	40004800 	.word	0x40004800
 8007c40:	40004c00 	.word	0x40004c00
 8007c44:	007a1200 	.word	0x007a1200

08007c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	2201      	movs	r2, #1
 8007c56:	4013      	ands	r3, r2
 8007c58:	d00b      	beq.n	8007c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	4a4a      	ldr	r2, [pc, #296]	; (8007d8c <UART_AdvFeatureConfig+0x144>)
 8007c62:	4013      	ands	r3, r2
 8007c64:	0019      	movs	r1, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	2202      	movs	r2, #2
 8007c78:	4013      	ands	r3, r2
 8007c7a:	d00b      	beq.n	8007c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	4a43      	ldr	r2, [pc, #268]	; (8007d90 <UART_AdvFeatureConfig+0x148>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	0019      	movs	r1, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	2204      	movs	r2, #4
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	d00b      	beq.n	8007cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	4a3b      	ldr	r2, [pc, #236]	; (8007d94 <UART_AdvFeatureConfig+0x14c>)
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	0019      	movs	r1, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	2208      	movs	r2, #8
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	d00b      	beq.n	8007cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	4a34      	ldr	r2, [pc, #208]	; (8007d98 <UART_AdvFeatureConfig+0x150>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	0019      	movs	r1, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	2210      	movs	r2, #16
 8007cde:	4013      	ands	r3, r2
 8007ce0:	d00b      	beq.n	8007cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	4a2c      	ldr	r2, [pc, #176]	; (8007d9c <UART_AdvFeatureConfig+0x154>)
 8007cea:	4013      	ands	r3, r2
 8007cec:	0019      	movs	r1, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	2220      	movs	r2, #32
 8007d00:	4013      	ands	r3, r2
 8007d02:	d00b      	beq.n	8007d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	4a25      	ldr	r2, [pc, #148]	; (8007da0 <UART_AdvFeatureConfig+0x158>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	0019      	movs	r1, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	2240      	movs	r2, #64	; 0x40
 8007d22:	4013      	ands	r3, r2
 8007d24:	d01d      	beq.n	8007d62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	4a1d      	ldr	r2, [pc, #116]	; (8007da4 <UART_AdvFeatureConfig+0x15c>)
 8007d2e:	4013      	ands	r3, r2
 8007d30:	0019      	movs	r1, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d42:	2380      	movs	r3, #128	; 0x80
 8007d44:	035b      	lsls	r3, r3, #13
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d10b      	bne.n	8007d62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	4a15      	ldr	r2, [pc, #84]	; (8007da8 <UART_AdvFeatureConfig+0x160>)
 8007d52:	4013      	ands	r3, r2
 8007d54:	0019      	movs	r1, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	2280      	movs	r2, #128	; 0x80
 8007d68:	4013      	ands	r3, r2
 8007d6a:	d00b      	beq.n	8007d84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	4a0e      	ldr	r2, [pc, #56]	; (8007dac <UART_AdvFeatureConfig+0x164>)
 8007d74:	4013      	ands	r3, r2
 8007d76:	0019      	movs	r1, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	605a      	str	r2, [r3, #4]
  }
}
 8007d84:	46c0      	nop			; (mov r8, r8)
 8007d86:	46bd      	mov	sp, r7
 8007d88:	b002      	add	sp, #8
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	fffdffff 	.word	0xfffdffff
 8007d90:	fffeffff 	.word	0xfffeffff
 8007d94:	fffbffff 	.word	0xfffbffff
 8007d98:	ffff7fff 	.word	0xffff7fff
 8007d9c:	ffffefff 	.word	0xffffefff
 8007da0:	ffffdfff 	.word	0xffffdfff
 8007da4:	ffefffff 	.word	0xffefffff
 8007da8:	ff9fffff 	.word	0xff9fffff
 8007dac:	fff7ffff 	.word	0xfff7ffff

08007db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2280      	movs	r2, #128	; 0x80
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dc0:	f7fa fb00 	bl	80023c4 <HAL_GetTick>
 8007dc4:	0003      	movs	r3, r0
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2208      	movs	r2, #8
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	d10c      	bne.n	8007df0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2280      	movs	r2, #128	; 0x80
 8007dda:	0391      	lsls	r1, r2, #14
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	4a17      	ldr	r2, [pc, #92]	; (8007e3c <UART_CheckIdleState+0x8c>)
 8007de0:	9200      	str	r2, [sp, #0]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f000 f82c 	bl	8007e40 <UART_WaitOnFlagUntilTimeout>
 8007de8:	1e03      	subs	r3, r0, #0
 8007dea:	d001      	beq.n	8007df0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e021      	b.n	8007e34 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2204      	movs	r2, #4
 8007df8:	4013      	ands	r3, r2
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d10c      	bne.n	8007e18 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2280      	movs	r2, #128	; 0x80
 8007e02:	03d1      	lsls	r1, r2, #15
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	4a0d      	ldr	r2, [pc, #52]	; (8007e3c <UART_CheckIdleState+0x8c>)
 8007e08:	9200      	str	r2, [sp, #0]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f000 f818 	bl	8007e40 <UART_WaitOnFlagUntilTimeout>
 8007e10:	1e03      	subs	r3, r0, #0
 8007e12:	d001      	beq.n	8007e18 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e00d      	b.n	8007e34 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2274      	movs	r2, #116	; 0x74
 8007e2e:	2100      	movs	r1, #0
 8007e30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	0018      	movs	r0, r3
 8007e36:	46bd      	mov	sp, r7
 8007e38:	b004      	add	sp, #16
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	01ffffff 	.word	0x01ffffff

08007e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b094      	sub	sp, #80	; 0x50
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	1dfb      	adds	r3, r7, #7
 8007e4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e50:	e0a3      	b.n	8007f9a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e54:	3301      	adds	r3, #1
 8007e56:	d100      	bne.n	8007e5a <UART_WaitOnFlagUntilTimeout+0x1a>
 8007e58:	e09f      	b.n	8007f9a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e5a:	f7fa fab3 	bl	80023c4 <HAL_GetTick>
 8007e5e:	0002      	movs	r2, r0
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d302      	bcc.n	8007e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d13d      	bne.n	8007eec <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e70:	f3ef 8310 	mrs	r3, PRIMASK
 8007e74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e78:	647b      	str	r3, [r7, #68]	; 0x44
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	f383 8810 	msr	PRIMASK, r3
}
 8007e84:	46c0      	nop			; (mov r8, r8)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	494c      	ldr	r1, [pc, #304]	; (8007fc4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007e92:	400a      	ands	r2, r1
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e98:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	f383 8810 	msr	PRIMASK, r3
}
 8007ea0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8007eac:	2301      	movs	r3, #1
 8007eae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb2:	f383 8810 	msr	PRIMASK, r3
}
 8007eb6:	46c0      	nop			; (mov r8, r8)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	438a      	bics	r2, r1
 8007ec6:	609a      	str	r2, [r3, #8]
 8007ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ece:	f383 8810 	msr	PRIMASK, r3
}
 8007ed2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2220      	movs	r2, #32
 8007ede:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2274      	movs	r2, #116	; 0x74
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e067      	b.n	8007fbc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2204      	movs	r2, #4
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	d050      	beq.n	8007f9a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69da      	ldr	r2, [r3, #28]
 8007efe:	2380      	movs	r3, #128	; 0x80
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	401a      	ands	r2, r3
 8007f04:	2380      	movs	r3, #128	; 0x80
 8007f06:	011b      	lsls	r3, r3, #4
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d146      	bne.n	8007f9a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2280      	movs	r2, #128	; 0x80
 8007f12:	0112      	lsls	r2, r2, #4
 8007f14:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f16:	f3ef 8310 	mrs	r3, PRIMASK
 8007f1a:	613b      	str	r3, [r7, #16]
  return(result);
 8007f1c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f20:	2301      	movs	r3, #1
 8007f22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f383 8810 	msr	PRIMASK, r3
}
 8007f2a:	46c0      	nop			; (mov r8, r8)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4923      	ldr	r1, [pc, #140]	; (8007fc4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007f38:	400a      	ands	r2, r1
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	f383 8810 	msr	PRIMASK, r3
}
 8007f46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f48:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f4e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f52:	2301      	movs	r3, #1
 8007f54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	f383 8810 	msr	PRIMASK, r3
}
 8007f5c:	46c0      	nop			; (mov r8, r8)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2101      	movs	r1, #1
 8007f6a:	438a      	bics	r2, r1
 8007f6c:	609a      	str	r2, [r3, #8]
 8007f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	f383 8810 	msr	PRIMASK, r3
}
 8007f78:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2220      	movs	r2, #32
 8007f84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2280      	movs	r2, #128	; 0x80
 8007f8a:	2120      	movs	r1, #32
 8007f8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2274      	movs	r2, #116	; 0x74
 8007f92:	2100      	movs	r1, #0
 8007f94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e010      	b.n	8007fbc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	425a      	negs	r2, r3
 8007faa:	4153      	adcs	r3, r2
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	001a      	movs	r2, r3
 8007fb0:	1dfb      	adds	r3, r7, #7
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d100      	bne.n	8007fba <UART_WaitOnFlagUntilTimeout+0x17a>
 8007fb8:	e74b      	b.n	8007e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	b014      	add	sp, #80	; 0x50
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	fffffe5f 	.word	0xfffffe5f

08007fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08e      	sub	sp, #56	; 0x38
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8007fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8007fd6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fda:	2301      	movs	r3, #1
 8007fdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	f383 8810 	msr	PRIMASK, r3
}
 8007fe4:	46c0      	nop			; (mov r8, r8)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4925      	ldr	r1, [pc, #148]	; (8008088 <UART_EndRxTransfer+0xc0>)
 8007ff2:	400a      	ands	r2, r1
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	f383 8810 	msr	PRIMASK, r3
}
 8008000:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008002:	f3ef 8310 	mrs	r3, PRIMASK
 8008006:	623b      	str	r3, [r7, #32]
  return(result);
 8008008:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800a:	633b      	str	r3, [r7, #48]	; 0x30
 800800c:	2301      	movs	r3, #1
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	f383 8810 	msr	PRIMASK, r3
}
 8008016:	46c0      	nop			; (mov r8, r8)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2101      	movs	r1, #1
 8008024:	438a      	bics	r2, r1
 8008026:	609a      	str	r2, [r3, #8]
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	f383 8810 	msr	PRIMASK, r3
}
 8008032:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008038:	2b01      	cmp	r3, #1
 800803a:	d118      	bne.n	800806e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800803c:	f3ef 8310 	mrs	r3, PRIMASK
 8008040:	60bb      	str	r3, [r7, #8]
  return(result);
 8008042:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008046:	2301      	movs	r3, #1
 8008048:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f383 8810 	msr	PRIMASK, r3
}
 8008050:	46c0      	nop			; (mov r8, r8)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2110      	movs	r1, #16
 800805e:	438a      	bics	r2, r1
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008064:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f383 8810 	msr	PRIMASK, r3
}
 800806c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2220      	movs	r2, #32
 8008072:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008080:	46c0      	nop			; (mov r8, r8)
 8008082:	46bd      	mov	sp, r7
 8008084:	b00e      	add	sp, #56	; 0x38
 8008086:	bd80      	pop	{r7, pc}
 8008088:	fffffedf 	.word	0xfffffedf

0800808c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	225a      	movs	r2, #90	; 0x5a
 800809e:	2100      	movs	r1, #0
 80080a0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2252      	movs	r2, #82	; 0x52
 80080a6:	2100      	movs	r1, #0
 80080a8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	0018      	movs	r0, r3
 80080ae:	f7ff fc2f 	bl	8007910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b2:	46c0      	nop			; (mov r8, r8)
 80080b4:	46bd      	mov	sp, r7
 80080b6:	b004      	add	sp, #16
 80080b8:	bd80      	pop	{r7, pc}

080080ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b086      	sub	sp, #24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080c2:	f3ef 8310 	mrs	r3, PRIMASK
 80080c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80080c8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	2301      	movs	r3, #1
 80080ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f383 8810 	msr	PRIMASK, r3
}
 80080d6:	46c0      	nop			; (mov r8, r8)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2140      	movs	r1, #64	; 0x40
 80080e4:	438a      	bics	r2, r1
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f383 8810 	msr	PRIMASK, r3
}
 80080f2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	0018      	movs	r0, r3
 8008104:	f7ff fbfc 	bl	8007900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008108:	46c0      	nop			; (mov r8, r8)
 800810a:	46bd      	mov	sp, r7
 800810c:	b006      	add	sp, #24
 800810e:	bd80      	pop	{r7, pc}

08008110 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008118:	46c0      	nop			; (mov r8, r8)
 800811a:	46bd      	mov	sp, r7
 800811c:	b002      	add	sp, #8
 800811e:	bd80      	pop	{r7, pc}

08008120 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2244      	movs	r2, #68	; 0x44
 800812c:	2100      	movs	r1, #0
 800812e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008130:	4b05      	ldr	r3, [pc, #20]	; (8008148 <USB_EnableGlobalInt+0x28>)
 8008132:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	b299      	uxth	r1, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2240      	movs	r2, #64	; 0x40
 800813c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	0018      	movs	r0, r3
 8008142:	46bd      	mov	sp, r7
 8008144:	b004      	add	sp, #16
 8008146:	bd80      	pop	{r7, pc}
 8008148:	0000bf80 	.word	0x0000bf80

0800814c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <USB_DisableGlobalInt+0x30>)
 8008156:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2240      	movs	r2, #64	; 0x40
 800815c:	5a9b      	ldrh	r3, [r3, r2]
 800815e:	b29b      	uxth	r3, r3
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	b292      	uxth	r2, r2
 8008164:	43d2      	mvns	r2, r2
 8008166:	b292      	uxth	r2, r2
 8008168:	4013      	ands	r3, r2
 800816a:	b299      	uxth	r1, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2240      	movs	r2, #64	; 0x40
 8008170:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	0018      	movs	r0, r3
 8008176:	46bd      	mov	sp, r7
 8008178:	b004      	add	sp, #16
 800817a:	bd80      	pop	{r7, pc}
 800817c:	0000bf80 	.word	0x0000bf80

08008180 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008180:	b084      	sub	sp, #16
 8008182:	b590      	push	{r4, r7, lr}
 8008184:	46c6      	mov	lr, r8
 8008186:	b500      	push	{lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	2004      	movs	r0, #4
 8008190:	2410      	movs	r4, #16
 8008192:	46a4      	mov	ip, r4
 8008194:	2408      	movs	r4, #8
 8008196:	46a0      	mov	r8, r4
 8008198:	44b8      	add	r8, r7
 800819a:	44c4      	add	ip, r8
 800819c:	4460      	add	r0, ip
 800819e:	6001      	str	r1, [r0, #0]
 80081a0:	6042      	str	r2, [r0, #4]
 80081a2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2240      	movs	r2, #64	; 0x40
 80081a8:	2101      	movs	r1, #1
 80081aa:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2240      	movs	r2, #64	; 0x40
 80081b0:	2100      	movs	r1, #0
 80081b2:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2244      	movs	r2, #68	; 0x44
 80081b8:	2100      	movs	r1, #0
 80081ba:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2250      	movs	r2, #80	; 0x50
 80081c0:	2100      	movs	r1, #0
 80081c2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	0018      	movs	r0, r3
 80081c8:	46bd      	mov	sp, r7
 80081ca:	b002      	add	sp, #8
 80081cc:	bc80      	pop	{r7}
 80081ce:	46b8      	mov	r8, r7
 80081d0:	bc90      	pop	{r4, r7}
 80081d2:	bc08      	pop	{r3}
 80081d4:	b004      	add	sp, #16
 80081d6:	4718      	bx	r3

080081d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b09c      	sub	sp, #112	; 0x70
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80081e2:	236f      	movs	r3, #111	; 0x6f
 80081e4:	18fb      	adds	r3, r7, r3
 80081e6:	2200      	movs	r2, #0
 80081e8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	18d3      	adds	r3, r2, r3
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	236c      	movs	r3, #108	; 0x6c
 80081fa:	18fb      	adds	r3, r7, r3
 80081fc:	49cf      	ldr	r1, [pc, #828]	; (800853c <USB_ActivateEndpoint+0x364>)
 80081fe:	400a      	ands	r2, r1
 8008200:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	78db      	ldrb	r3, [r3, #3]
 8008206:	2b03      	cmp	r3, #3
 8008208:	d017      	beq.n	800823a <USB_ActivateEndpoint+0x62>
 800820a:	dc28      	bgt.n	800825e <USB_ActivateEndpoint+0x86>
 800820c:	2b02      	cmp	r3, #2
 800820e:	d00e      	beq.n	800822e <USB_ActivateEndpoint+0x56>
 8008210:	dc25      	bgt.n	800825e <USB_ActivateEndpoint+0x86>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <USB_ActivateEndpoint+0x44>
 8008216:	2b01      	cmp	r3, #1
 8008218:	d018      	beq.n	800824c <USB_ActivateEndpoint+0x74>
 800821a:	e020      	b.n	800825e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800821c:	226c      	movs	r2, #108	; 0x6c
 800821e:	18bb      	adds	r3, r7, r2
 8008220:	18ba      	adds	r2, r7, r2
 8008222:	8812      	ldrh	r2, [r2, #0]
 8008224:	2180      	movs	r1, #128	; 0x80
 8008226:	0089      	lsls	r1, r1, #2
 8008228:	430a      	orrs	r2, r1
 800822a:	801a      	strh	r2, [r3, #0]
      break;
 800822c:	e01c      	b.n	8008268 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800822e:	226c      	movs	r2, #108	; 0x6c
 8008230:	18bb      	adds	r3, r7, r2
 8008232:	18ba      	adds	r2, r7, r2
 8008234:	8812      	ldrh	r2, [r2, #0]
 8008236:	801a      	strh	r2, [r3, #0]
      break;
 8008238:	e016      	b.n	8008268 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800823a:	226c      	movs	r2, #108	; 0x6c
 800823c:	18bb      	adds	r3, r7, r2
 800823e:	18ba      	adds	r2, r7, r2
 8008240:	8812      	ldrh	r2, [r2, #0]
 8008242:	21c0      	movs	r1, #192	; 0xc0
 8008244:	00c9      	lsls	r1, r1, #3
 8008246:	430a      	orrs	r2, r1
 8008248:	801a      	strh	r2, [r3, #0]
      break;
 800824a:	e00d      	b.n	8008268 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800824c:	226c      	movs	r2, #108	; 0x6c
 800824e:	18bb      	adds	r3, r7, r2
 8008250:	18ba      	adds	r2, r7, r2
 8008252:	8812      	ldrh	r2, [r2, #0]
 8008254:	2180      	movs	r1, #128	; 0x80
 8008256:	00c9      	lsls	r1, r1, #3
 8008258:	430a      	orrs	r2, r1
 800825a:	801a      	strh	r2, [r3, #0]
      break;
 800825c:	e004      	b.n	8008268 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800825e:	236f      	movs	r3, #111	; 0x6f
 8008260:	18fb      	adds	r3, r7, r3
 8008262:	2201      	movs	r2, #1
 8008264:	701a      	strb	r2, [r3, #0]
      break;
 8008266:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	18d3      	adds	r3, r2, r3
 8008272:	226c      	movs	r2, #108	; 0x6c
 8008274:	18ba      	adds	r2, r7, r2
 8008276:	8812      	ldrh	r2, [r2, #0]
 8008278:	49b1      	ldr	r1, [pc, #708]	; (8008540 <USB_ActivateEndpoint+0x368>)
 800827a:	430a      	orrs	r2, r1
 800827c:	b292      	uxth	r2, r2
 800827e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	18d3      	adds	r3, r2, r3
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	b21b      	sxth	r3, r3
 8008290:	4aac      	ldr	r2, [pc, #688]	; (8008544 <USB_ActivateEndpoint+0x36c>)
 8008292:	4013      	ands	r3, r2
 8008294:	b21a      	sxth	r2, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	b21b      	sxth	r3, r3
 800829c:	4313      	orrs	r3, r2
 800829e:	b21a      	sxth	r2, r3
 80082a0:	2166      	movs	r1, #102	; 0x66
 80082a2:	187b      	adds	r3, r7, r1
 80082a4:	801a      	strh	r2, [r3, #0]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	18d3      	adds	r3, r2, r3
 80082b0:	187a      	adds	r2, r7, r1
 80082b2:	8812      	ldrh	r2, [r2, #0]
 80082b4:	49a2      	ldr	r1, [pc, #648]	; (8008540 <USB_ActivateEndpoint+0x368>)
 80082b6:	430a      	orrs	r2, r1
 80082b8:	b292      	uxth	r2, r2
 80082ba:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	7b1b      	ldrb	r3, [r3, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d000      	beq.n	80082c6 <USB_ActivateEndpoint+0xee>
 80082c4:	e150      	b.n	8008568 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	785b      	ldrb	r3, [r3, #1]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d100      	bne.n	80082d0 <USB_ActivateEndpoint+0xf8>
 80082ce:	e07a      	b.n	80083c6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	61bb      	str	r3, [r7, #24]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2250      	movs	r2, #80	; 0x50
 80082d8:	5a9b      	ldrh	r3, [r3, r2]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	001a      	movs	r2, r3
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	189b      	adds	r3, r3, r2
 80082e2:	61bb      	str	r3, [r7, #24]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	00da      	lsls	r2, r3, #3
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	18d3      	adds	r3, r2, r3
 80082ee:	2280      	movs	r2, #128	; 0x80
 80082f0:	00d2      	lsls	r2, r2, #3
 80082f2:	4694      	mov	ip, r2
 80082f4:	4463      	add	r3, ip
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	88db      	ldrh	r3, [r3, #6]
 80082fc:	085b      	lsrs	r3, r3, #1
 80082fe:	b29b      	uxth	r3, r3
 8008300:	18db      	adds	r3, r3, r3
 8008302:	b29a      	uxth	r2, r3
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	18d2      	adds	r2, r2, r3
 8008312:	2112      	movs	r1, #18
 8008314:	187b      	adds	r3, r7, r1
 8008316:	8812      	ldrh	r2, [r2, #0]
 8008318:	801a      	strh	r2, [r3, #0]
 800831a:	187b      	adds	r3, r7, r1
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	2240      	movs	r2, #64	; 0x40
 8008320:	4013      	ands	r3, r2
 8008322:	d016      	beq.n	8008352 <USB_ActivateEndpoint+0x17a>
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	18d3      	adds	r3, r2, r3
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b29a      	uxth	r2, r3
 8008332:	2010      	movs	r0, #16
 8008334:	183b      	adds	r3, r7, r0
 8008336:	4983      	ldr	r1, [pc, #524]	; (8008544 <USB_ActivateEndpoint+0x36c>)
 8008338:	400a      	ands	r2, r1
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	18d3      	adds	r3, r2, r3
 8008346:	183a      	adds	r2, r7, r0
 8008348:	8812      	ldrh	r2, [r2, #0]
 800834a:	497f      	ldr	r1, [pc, #508]	; (8008548 <USB_ActivateEndpoint+0x370>)
 800834c:	430a      	orrs	r2, r1
 800834e:	b292      	uxth	r2, r2
 8008350:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	78db      	ldrb	r3, [r3, #3]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d01d      	beq.n	8008396 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	18d3      	adds	r3, r2, r3
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	b29a      	uxth	r2, r3
 8008368:	200c      	movs	r0, #12
 800836a:	183b      	adds	r3, r7, r0
 800836c:	4977      	ldr	r1, [pc, #476]	; (800854c <USB_ActivateEndpoint+0x374>)
 800836e:	400a      	ands	r2, r1
 8008370:	801a      	strh	r2, [r3, #0]
 8008372:	183b      	adds	r3, r7, r0
 8008374:	183a      	adds	r2, r7, r0
 8008376:	8812      	ldrh	r2, [r2, #0]
 8008378:	2120      	movs	r1, #32
 800837a:	404a      	eors	r2, r1
 800837c:	801a      	strh	r2, [r3, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	18d3      	adds	r3, r2, r3
 8008388:	183a      	adds	r2, r7, r0
 800838a:	8812      	ldrh	r2, [r2, #0]
 800838c:	496c      	ldr	r1, [pc, #432]	; (8008540 <USB_ActivateEndpoint+0x368>)
 800838e:	430a      	orrs	r2, r1
 8008390:	b292      	uxth	r2, r2
 8008392:	801a      	strh	r2, [r3, #0]
 8008394:	e27a      	b.n	800888c <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	18d3      	adds	r3, r2, r3
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	200e      	movs	r0, #14
 80083a6:	183b      	adds	r3, r7, r0
 80083a8:	4968      	ldr	r1, [pc, #416]	; (800854c <USB_ActivateEndpoint+0x374>)
 80083aa:	400a      	ands	r2, r1
 80083ac:	801a      	strh	r2, [r3, #0]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	18d3      	adds	r3, r2, r3
 80083b8:	183a      	adds	r2, r7, r0
 80083ba:	8812      	ldrh	r2, [r2, #0]
 80083bc:	4960      	ldr	r1, [pc, #384]	; (8008540 <USB_ActivateEndpoint+0x368>)
 80083be:	430a      	orrs	r2, r1
 80083c0:	b292      	uxth	r2, r2
 80083c2:	801a      	strh	r2, [r3, #0]
 80083c4:	e262      	b.n	800888c <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	633b      	str	r3, [r7, #48]	; 0x30
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2250      	movs	r2, #80	; 0x50
 80083ce:	5a9b      	ldrh	r3, [r3, r2]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	001a      	movs	r2, r3
 80083d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d6:	189b      	adds	r3, r3, r2
 80083d8:	633b      	str	r3, [r7, #48]	; 0x30
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	00da      	lsls	r2, r3, #3
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	18d3      	adds	r3, r2, r3
 80083e4:	4a5a      	ldr	r2, [pc, #360]	; (8008550 <USB_ActivateEndpoint+0x378>)
 80083e6:	4694      	mov	ip, r2
 80083e8:	4463      	add	r3, ip
 80083ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	88db      	ldrh	r3, [r3, #6]
 80083f0:	085b      	lsrs	r3, r3, #1
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	18db      	adds	r3, r3, r3
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2250      	movs	r2, #80	; 0x50
 8008404:	5a9b      	ldrh	r3, [r3, r2]
 8008406:	b29b      	uxth	r3, r3
 8008408:	001a      	movs	r2, r3
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	189b      	adds	r3, r3, r2
 800840e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	00da      	lsls	r2, r3, #3
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	18d3      	adds	r3, r2, r3
 800841a:	4a4e      	ldr	r2, [pc, #312]	; (8008554 <USB_ActivateEndpoint+0x37c>)
 800841c:	4694      	mov	ip, r2
 800841e:	4463      	add	r3, ip
 8008420:	627b      	str	r3, [r7, #36]	; 0x24
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d110      	bne.n	800844c <USB_ActivateEndpoint+0x274>
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	4a49      	ldr	r2, [pc, #292]	; (8008558 <USB_ActivateEndpoint+0x380>)
 8008432:	4013      	ands	r3, r2
 8008434:	b29a      	uxth	r2, r3
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	801a      	strh	r2, [r3, #0]
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	4a46      	ldr	r2, [pc, #280]	; (800855c <USB_ActivateEndpoint+0x384>)
 8008442:	4313      	orrs	r3, r2
 8008444:	b29a      	uxth	r2, r3
 8008446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008448:	801a      	strh	r2, [r3, #0]
 800844a:	e02b      	b.n	80084a4 <USB_ActivateEndpoint+0x2cc>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	2b3e      	cmp	r3, #62	; 0x3e
 8008452:	d812      	bhi.n	800847a <USB_ActivateEndpoint+0x2a2>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	085b      	lsrs	r3, r3, #1
 800845a:	66bb      	str	r3, [r7, #104]	; 0x68
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	2201      	movs	r2, #1
 8008462:	4013      	ands	r3, r2
 8008464:	d002      	beq.n	800846c <USB_ActivateEndpoint+0x294>
 8008466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008468:	3301      	adds	r3, #1
 800846a:	66bb      	str	r3, [r7, #104]	; 0x68
 800846c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800846e:	b29b      	uxth	r3, r3
 8008470:	029b      	lsls	r3, r3, #10
 8008472:	b29a      	uxth	r2, r3
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	e014      	b.n	80084a4 <USB_ActivateEndpoint+0x2cc>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	095b      	lsrs	r3, r3, #5
 8008480:	66bb      	str	r3, [r7, #104]	; 0x68
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	221f      	movs	r2, #31
 8008488:	4013      	ands	r3, r2
 800848a:	d102      	bne.n	8008492 <USB_ActivateEndpoint+0x2ba>
 800848c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800848e:	3b01      	subs	r3, #1
 8008490:	66bb      	str	r3, [r7, #104]	; 0x68
 8008492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008494:	b29b      	uxth	r3, r3
 8008496:	029b      	lsls	r3, r3, #10
 8008498:	b29b      	uxth	r3, r3
 800849a:	4a30      	ldr	r2, [pc, #192]	; (800855c <USB_ActivateEndpoint+0x384>)
 800849c:	4313      	orrs	r3, r2
 800849e:	b29a      	uxth	r2, r3
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	18d2      	adds	r2, r2, r3
 80084ae:	2122      	movs	r1, #34	; 0x22
 80084b0:	187b      	adds	r3, r7, r1
 80084b2:	8812      	ldrh	r2, [r2, #0]
 80084b4:	801a      	strh	r2, [r3, #0]
 80084b6:	187b      	adds	r3, r7, r1
 80084b8:	881a      	ldrh	r2, [r3, #0]
 80084ba:	2380      	movs	r3, #128	; 0x80
 80084bc:	01db      	lsls	r3, r3, #7
 80084be:	4013      	ands	r3, r2
 80084c0:	d016      	beq.n	80084f0 <USB_ActivateEndpoint+0x318>
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	18d3      	adds	r3, r2, r3
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	2020      	movs	r0, #32
 80084d2:	183b      	adds	r3, r7, r0
 80084d4:	491b      	ldr	r1, [pc, #108]	; (8008544 <USB_ActivateEndpoint+0x36c>)
 80084d6:	400a      	ands	r2, r1
 80084d8:	801a      	strh	r2, [r3, #0]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	18d3      	adds	r3, r2, r3
 80084e4:	183a      	adds	r2, r7, r0
 80084e6:	8812      	ldrh	r2, [r2, #0]
 80084e8:	491d      	ldr	r1, [pc, #116]	; (8008560 <USB_ActivateEndpoint+0x388>)
 80084ea:	430a      	orrs	r2, r1
 80084ec:	b292      	uxth	r2, r2
 80084ee:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	18d3      	adds	r3, r2, r3
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	201e      	movs	r0, #30
 8008500:	183b      	adds	r3, r7, r0
 8008502:	4918      	ldr	r1, [pc, #96]	; (8008564 <USB_ActivateEndpoint+0x38c>)
 8008504:	400a      	ands	r2, r1
 8008506:	801a      	strh	r2, [r3, #0]
 8008508:	183b      	adds	r3, r7, r0
 800850a:	183a      	adds	r2, r7, r0
 800850c:	8812      	ldrh	r2, [r2, #0]
 800850e:	2180      	movs	r1, #128	; 0x80
 8008510:	0149      	lsls	r1, r1, #5
 8008512:	404a      	eors	r2, r1
 8008514:	801a      	strh	r2, [r3, #0]
 8008516:	183b      	adds	r3, r7, r0
 8008518:	183a      	adds	r2, r7, r0
 800851a:	8812      	ldrh	r2, [r2, #0]
 800851c:	2180      	movs	r1, #128	; 0x80
 800851e:	0189      	lsls	r1, r1, #6
 8008520:	404a      	eors	r2, r1
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	18d3      	adds	r3, r2, r3
 800852e:	183a      	adds	r2, r7, r0
 8008530:	8812      	ldrh	r2, [r2, #0]
 8008532:	4903      	ldr	r1, [pc, #12]	; (8008540 <USB_ActivateEndpoint+0x368>)
 8008534:	430a      	orrs	r2, r1
 8008536:	b292      	uxth	r2, r2
 8008538:	801a      	strh	r2, [r3, #0]
 800853a:	e1a7      	b.n	800888c <USB_ActivateEndpoint+0x6b4>
 800853c:	ffff898f 	.word	0xffff898f
 8008540:	ffff8080 	.word	0xffff8080
 8008544:	ffff8f8f 	.word	0xffff8f8f
 8008548:	ffff80c0 	.word	0xffff80c0
 800854c:	ffff8fbf 	.word	0xffff8fbf
 8008550:	00000404 	.word	0x00000404
 8008554:	00000406 	.word	0x00000406
 8008558:	ffff83ff 	.word	0xffff83ff
 800855c:	ffff8000 	.word	0xffff8000
 8008560:	ffffc080 	.word	0xffffc080
 8008564:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	78db      	ldrb	r3, [r3, #3]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d117      	bne.n	80085a0 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	18d3      	adds	r3, r2, r3
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	b29a      	uxth	r2, r3
 800857e:	2062      	movs	r0, #98	; 0x62
 8008580:	183b      	adds	r3, r7, r0
 8008582:	49c6      	ldr	r1, [pc, #792]	; (800889c <USB_ActivateEndpoint+0x6c4>)
 8008584:	400a      	ands	r2, r1
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	18d3      	adds	r3, r2, r3
 8008592:	183a      	adds	r2, r7, r0
 8008594:	8812      	ldrh	r2, [r2, #0]
 8008596:	49c2      	ldr	r1, [pc, #776]	; (80088a0 <USB_ActivateEndpoint+0x6c8>)
 8008598:	430a      	orrs	r2, r1
 800859a:	b292      	uxth	r2, r2
 800859c:	801a      	strh	r2, [r3, #0]
 800859e:	e016      	b.n	80085ce <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	18d3      	adds	r3, r2, r3
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	2064      	movs	r0, #100	; 0x64
 80085b0:	183b      	adds	r3, r7, r0
 80085b2:	49bc      	ldr	r1, [pc, #752]	; (80088a4 <USB_ActivateEndpoint+0x6cc>)
 80085b4:	400a      	ands	r2, r1
 80085b6:	801a      	strh	r2, [r3, #0]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	18d3      	adds	r3, r2, r3
 80085c2:	183a      	adds	r2, r7, r0
 80085c4:	8812      	ldrh	r2, [r2, #0]
 80085c6:	49b8      	ldr	r1, [pc, #736]	; (80088a8 <USB_ActivateEndpoint+0x6d0>)
 80085c8:	430a      	orrs	r2, r1
 80085ca:	b292      	uxth	r2, r2
 80085cc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2250      	movs	r2, #80	; 0x50
 80085d6:	5a9b      	ldrh	r3, [r3, r2]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	001a      	movs	r2, r3
 80085dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085de:	189b      	adds	r3, r3, r2
 80085e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	00da      	lsls	r2, r3, #3
 80085e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ea:	18d3      	adds	r3, r2, r3
 80085ec:	2280      	movs	r2, #128	; 0x80
 80085ee:	00d2      	lsls	r2, r2, #3
 80085f0:	4694      	mov	ip, r2
 80085f2:	4463      	add	r3, ip
 80085f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	891b      	ldrh	r3, [r3, #8]
 80085fa:	085b      	lsrs	r3, r3, #1
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	18db      	adds	r3, r3, r3
 8008600:	b29a      	uxth	r2, r3
 8008602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008604:	801a      	strh	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	657b      	str	r3, [r7, #84]	; 0x54
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2250      	movs	r2, #80	; 0x50
 800860e:	5a9b      	ldrh	r3, [r3, r2]
 8008610:	b29b      	uxth	r3, r3
 8008612:	001a      	movs	r2, r3
 8008614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008616:	189b      	adds	r3, r3, r2
 8008618:	657b      	str	r3, [r7, #84]	; 0x54
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	00da      	lsls	r2, r3, #3
 8008620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008622:	18d3      	adds	r3, r2, r3
 8008624:	4aa1      	ldr	r2, [pc, #644]	; (80088ac <USB_ActivateEndpoint+0x6d4>)
 8008626:	4694      	mov	ip, r2
 8008628:	4463      	add	r3, ip
 800862a:	653b      	str	r3, [r7, #80]	; 0x50
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	895b      	ldrh	r3, [r3, #10]
 8008630:	085b      	lsrs	r3, r3, #1
 8008632:	b29b      	uxth	r3, r3
 8008634:	18db      	adds	r3, r3, r3
 8008636:	b29a      	uxth	r2, r3
 8008638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800863a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d000      	beq.n	8008646 <USB_ActivateEndpoint+0x46e>
 8008644:	e087      	b.n	8008756 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	18d2      	adds	r2, r2, r3
 8008650:	2140      	movs	r1, #64	; 0x40
 8008652:	187b      	adds	r3, r7, r1
 8008654:	8812      	ldrh	r2, [r2, #0]
 8008656:	801a      	strh	r2, [r3, #0]
 8008658:	187b      	adds	r3, r7, r1
 800865a:	881a      	ldrh	r2, [r3, #0]
 800865c:	2380      	movs	r3, #128	; 0x80
 800865e:	01db      	lsls	r3, r3, #7
 8008660:	4013      	ands	r3, r2
 8008662:	d016      	beq.n	8008692 <USB_ActivateEndpoint+0x4ba>
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	18d3      	adds	r3, r2, r3
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	b29a      	uxth	r2, r3
 8008672:	203e      	movs	r0, #62	; 0x3e
 8008674:	183b      	adds	r3, r7, r0
 8008676:	4989      	ldr	r1, [pc, #548]	; (800889c <USB_ActivateEndpoint+0x6c4>)
 8008678:	400a      	ands	r2, r1
 800867a:	801a      	strh	r2, [r3, #0]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	18d3      	adds	r3, r2, r3
 8008686:	183a      	adds	r2, r7, r0
 8008688:	8812      	ldrh	r2, [r2, #0]
 800868a:	4989      	ldr	r1, [pc, #548]	; (80088b0 <USB_ActivateEndpoint+0x6d8>)
 800868c:	430a      	orrs	r2, r1
 800868e:	b292      	uxth	r2, r2
 8008690:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	18d2      	adds	r2, r2, r3
 800869c:	213c      	movs	r1, #60	; 0x3c
 800869e:	187b      	adds	r3, r7, r1
 80086a0:	8812      	ldrh	r2, [r2, #0]
 80086a2:	801a      	strh	r2, [r3, #0]
 80086a4:	187b      	adds	r3, r7, r1
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	2240      	movs	r2, #64	; 0x40
 80086aa:	4013      	ands	r3, r2
 80086ac:	d016      	beq.n	80086dc <USB_ActivateEndpoint+0x504>
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	18d3      	adds	r3, r2, r3
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	203a      	movs	r0, #58	; 0x3a
 80086be:	183b      	adds	r3, r7, r0
 80086c0:	4976      	ldr	r1, [pc, #472]	; (800889c <USB_ActivateEndpoint+0x6c4>)
 80086c2:	400a      	ands	r2, r1
 80086c4:	801a      	strh	r2, [r3, #0]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	18d3      	adds	r3, r2, r3
 80086d0:	183a      	adds	r2, r7, r0
 80086d2:	8812      	ldrh	r2, [r2, #0]
 80086d4:	4977      	ldr	r1, [pc, #476]	; (80088b4 <USB_ActivateEndpoint+0x6dc>)
 80086d6:	430a      	orrs	r2, r1
 80086d8:	b292      	uxth	r2, r2
 80086da:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	18d3      	adds	r3, r2, r3
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	2038      	movs	r0, #56	; 0x38
 80086ec:	183b      	adds	r3, r7, r0
 80086ee:	4972      	ldr	r1, [pc, #456]	; (80088b8 <USB_ActivateEndpoint+0x6e0>)
 80086f0:	400a      	ands	r2, r1
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	183b      	adds	r3, r7, r0
 80086f6:	183a      	adds	r2, r7, r0
 80086f8:	8812      	ldrh	r2, [r2, #0]
 80086fa:	2180      	movs	r1, #128	; 0x80
 80086fc:	0149      	lsls	r1, r1, #5
 80086fe:	404a      	eors	r2, r1
 8008700:	801a      	strh	r2, [r3, #0]
 8008702:	183b      	adds	r3, r7, r0
 8008704:	183a      	adds	r2, r7, r0
 8008706:	8812      	ldrh	r2, [r2, #0]
 8008708:	2180      	movs	r1, #128	; 0x80
 800870a:	0189      	lsls	r1, r1, #6
 800870c:	404a      	eors	r2, r1
 800870e:	801a      	strh	r2, [r3, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	18d3      	adds	r3, r2, r3
 800871a:	183a      	adds	r2, r7, r0
 800871c:	8812      	ldrh	r2, [r2, #0]
 800871e:	4962      	ldr	r1, [pc, #392]	; (80088a8 <USB_ActivateEndpoint+0x6d0>)
 8008720:	430a      	orrs	r2, r1
 8008722:	b292      	uxth	r2, r2
 8008724:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	18d3      	adds	r3, r2, r3
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	b29a      	uxth	r2, r3
 8008734:	2036      	movs	r0, #54	; 0x36
 8008736:	183b      	adds	r3, r7, r0
 8008738:	4960      	ldr	r1, [pc, #384]	; (80088bc <USB_ActivateEndpoint+0x6e4>)
 800873a:	400a      	ands	r2, r1
 800873c:	801a      	strh	r2, [r3, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	18d3      	adds	r3, r2, r3
 8008748:	183a      	adds	r2, r7, r0
 800874a:	8812      	ldrh	r2, [r2, #0]
 800874c:	4956      	ldr	r1, [pc, #344]	; (80088a8 <USB_ActivateEndpoint+0x6d0>)
 800874e:	430a      	orrs	r2, r1
 8008750:	b292      	uxth	r2, r2
 8008752:	801a      	strh	r2, [r3, #0]
 8008754:	e09a      	b.n	800888c <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	18d2      	adds	r2, r2, r3
 8008760:	214e      	movs	r1, #78	; 0x4e
 8008762:	187b      	adds	r3, r7, r1
 8008764:	8812      	ldrh	r2, [r2, #0]
 8008766:	801a      	strh	r2, [r3, #0]
 8008768:	187b      	adds	r3, r7, r1
 800876a:	881a      	ldrh	r2, [r3, #0]
 800876c:	2380      	movs	r3, #128	; 0x80
 800876e:	01db      	lsls	r3, r3, #7
 8008770:	4013      	ands	r3, r2
 8008772:	d016      	beq.n	80087a2 <USB_ActivateEndpoint+0x5ca>
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	18d3      	adds	r3, r2, r3
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	b29a      	uxth	r2, r3
 8008782:	204c      	movs	r0, #76	; 0x4c
 8008784:	183b      	adds	r3, r7, r0
 8008786:	4945      	ldr	r1, [pc, #276]	; (800889c <USB_ActivateEndpoint+0x6c4>)
 8008788:	400a      	ands	r2, r1
 800878a:	801a      	strh	r2, [r3, #0]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	18d3      	adds	r3, r2, r3
 8008796:	183a      	adds	r2, r7, r0
 8008798:	8812      	ldrh	r2, [r2, #0]
 800879a:	4945      	ldr	r1, [pc, #276]	; (80088b0 <USB_ActivateEndpoint+0x6d8>)
 800879c:	430a      	orrs	r2, r1
 800879e:	b292      	uxth	r2, r2
 80087a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	18d2      	adds	r2, r2, r3
 80087ac:	214a      	movs	r1, #74	; 0x4a
 80087ae:	187b      	adds	r3, r7, r1
 80087b0:	8812      	ldrh	r2, [r2, #0]
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	187b      	adds	r3, r7, r1
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	2240      	movs	r2, #64	; 0x40
 80087ba:	4013      	ands	r3, r2
 80087bc:	d016      	beq.n	80087ec <USB_ActivateEndpoint+0x614>
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	18d3      	adds	r3, r2, r3
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	2048      	movs	r0, #72	; 0x48
 80087ce:	183b      	adds	r3, r7, r0
 80087d0:	4932      	ldr	r1, [pc, #200]	; (800889c <USB_ActivateEndpoint+0x6c4>)
 80087d2:	400a      	ands	r2, r1
 80087d4:	801a      	strh	r2, [r3, #0]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	18d3      	adds	r3, r2, r3
 80087e0:	183a      	adds	r2, r7, r0
 80087e2:	8812      	ldrh	r2, [r2, #0]
 80087e4:	4933      	ldr	r1, [pc, #204]	; (80088b4 <USB_ActivateEndpoint+0x6dc>)
 80087e6:	430a      	orrs	r2, r1
 80087e8:	b292      	uxth	r2, r2
 80087ea:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	78db      	ldrb	r3, [r3, #3]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d01d      	beq.n	8008830 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	18d3      	adds	r3, r2, r3
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	b29a      	uxth	r2, r3
 8008802:	2044      	movs	r0, #68	; 0x44
 8008804:	183b      	adds	r3, r7, r0
 8008806:	492d      	ldr	r1, [pc, #180]	; (80088bc <USB_ActivateEndpoint+0x6e4>)
 8008808:	400a      	ands	r2, r1
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	183b      	adds	r3, r7, r0
 800880e:	183a      	adds	r2, r7, r0
 8008810:	8812      	ldrh	r2, [r2, #0]
 8008812:	2120      	movs	r1, #32
 8008814:	404a      	eors	r2, r1
 8008816:	801a      	strh	r2, [r3, #0]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	18d3      	adds	r3, r2, r3
 8008822:	183a      	adds	r2, r7, r0
 8008824:	8812      	ldrh	r2, [r2, #0]
 8008826:	4920      	ldr	r1, [pc, #128]	; (80088a8 <USB_ActivateEndpoint+0x6d0>)
 8008828:	430a      	orrs	r2, r1
 800882a:	b292      	uxth	r2, r2
 800882c:	801a      	strh	r2, [r3, #0]
 800882e:	e016      	b.n	800885e <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	18d3      	adds	r3, r2, r3
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29a      	uxth	r2, r3
 800883e:	2046      	movs	r0, #70	; 0x46
 8008840:	183b      	adds	r3, r7, r0
 8008842:	491e      	ldr	r1, [pc, #120]	; (80088bc <USB_ActivateEndpoint+0x6e4>)
 8008844:	400a      	ands	r2, r1
 8008846:	801a      	strh	r2, [r3, #0]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	18d3      	adds	r3, r2, r3
 8008852:	183a      	adds	r2, r7, r0
 8008854:	8812      	ldrh	r2, [r2, #0]
 8008856:	4914      	ldr	r1, [pc, #80]	; (80088a8 <USB_ActivateEndpoint+0x6d0>)
 8008858:	430a      	orrs	r2, r1
 800885a:	b292      	uxth	r2, r2
 800885c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	18d3      	adds	r3, r2, r3
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	b29a      	uxth	r2, r3
 800886c:	2042      	movs	r0, #66	; 0x42
 800886e:	183b      	adds	r3, r7, r0
 8008870:	4911      	ldr	r1, [pc, #68]	; (80088b8 <USB_ActivateEndpoint+0x6e0>)
 8008872:	400a      	ands	r2, r1
 8008874:	801a      	strh	r2, [r3, #0]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	18d3      	adds	r3, r2, r3
 8008880:	183a      	adds	r2, r7, r0
 8008882:	8812      	ldrh	r2, [r2, #0]
 8008884:	4908      	ldr	r1, [pc, #32]	; (80088a8 <USB_ActivateEndpoint+0x6d0>)
 8008886:	430a      	orrs	r2, r1
 8008888:	b292      	uxth	r2, r2
 800888a:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 800888c:	236f      	movs	r3, #111	; 0x6f
 800888e:	18fb      	adds	r3, r7, r3
 8008890:	781b      	ldrb	r3, [r3, #0]
}
 8008892:	0018      	movs	r0, r3
 8008894:	46bd      	mov	sp, r7
 8008896:	b01c      	add	sp, #112	; 0x70
 8008898:	bd80      	pop	{r7, pc}
 800889a:	46c0      	nop			; (mov r8, r8)
 800889c:	ffff8f8f 	.word	0xffff8f8f
 80088a0:	ffff8180 	.word	0xffff8180
 80088a4:	ffff8e8f 	.word	0xffff8e8f
 80088a8:	ffff8080 	.word	0xffff8080
 80088ac:	00000404 	.word	0x00000404
 80088b0:	ffffc080 	.word	0xffffc080
 80088b4:	ffff80c0 	.word	0xffff80c0
 80088b8:	ffffbf8f 	.word	0xffffbf8f
 80088bc:	ffff8fbf 	.word	0xffff8fbf

080088c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08c      	sub	sp, #48	; 0x30
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	7b1b      	ldrb	r3, [r3, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d000      	beq.n	80088d4 <USB_DeactivateEndpoint+0x14>
 80088d2:	e07e      	b.n	80089d2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	785b      	ldrb	r3, [r3, #1]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d03c      	beq.n	8008956 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	18d2      	adds	r2, r2, r3
 80088e6:	210c      	movs	r1, #12
 80088e8:	187b      	adds	r3, r7, r1
 80088ea:	8812      	ldrh	r2, [r2, #0]
 80088ec:	801a      	strh	r2, [r3, #0]
 80088ee:	187b      	adds	r3, r7, r1
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	2240      	movs	r2, #64	; 0x40
 80088f4:	4013      	ands	r3, r2
 80088f6:	d016      	beq.n	8008926 <USB_DeactivateEndpoint+0x66>
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	18d3      	adds	r3, r2, r3
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29a      	uxth	r2, r3
 8008906:	200a      	movs	r0, #10
 8008908:	183b      	adds	r3, r7, r0
 800890a:	49c7      	ldr	r1, [pc, #796]	; (8008c28 <USB_DeactivateEndpoint+0x368>)
 800890c:	400a      	ands	r2, r1
 800890e:	801a      	strh	r2, [r3, #0]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	18d3      	adds	r3, r2, r3
 800891a:	183a      	adds	r2, r7, r0
 800891c:	8812      	ldrh	r2, [r2, #0]
 800891e:	49c3      	ldr	r1, [pc, #780]	; (8008c2c <USB_DeactivateEndpoint+0x36c>)
 8008920:	430a      	orrs	r2, r1
 8008922:	b292      	uxth	r2, r2
 8008924:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	18d3      	adds	r3, r2, r3
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b29a      	uxth	r2, r3
 8008934:	2008      	movs	r0, #8
 8008936:	183b      	adds	r3, r7, r0
 8008938:	49bd      	ldr	r1, [pc, #756]	; (8008c30 <USB_DeactivateEndpoint+0x370>)
 800893a:	400a      	ands	r2, r1
 800893c:	801a      	strh	r2, [r3, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	18d3      	adds	r3, r2, r3
 8008948:	183a      	adds	r2, r7, r0
 800894a:	8812      	ldrh	r2, [r2, #0]
 800894c:	49b9      	ldr	r1, [pc, #740]	; (8008c34 <USB_DeactivateEndpoint+0x374>)
 800894e:	430a      	orrs	r2, r1
 8008950:	b292      	uxth	r2, r2
 8008952:	801a      	strh	r2, [r3, #0]
 8008954:	e163      	b.n	8008c1e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	18d2      	adds	r2, r2, r3
 8008960:	2112      	movs	r1, #18
 8008962:	187b      	adds	r3, r7, r1
 8008964:	8812      	ldrh	r2, [r2, #0]
 8008966:	801a      	strh	r2, [r3, #0]
 8008968:	187b      	adds	r3, r7, r1
 800896a:	881a      	ldrh	r2, [r3, #0]
 800896c:	2380      	movs	r3, #128	; 0x80
 800896e:	01db      	lsls	r3, r3, #7
 8008970:	4013      	ands	r3, r2
 8008972:	d016      	beq.n	80089a2 <USB_DeactivateEndpoint+0xe2>
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	18d3      	adds	r3, r2, r3
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	b29a      	uxth	r2, r3
 8008982:	2010      	movs	r0, #16
 8008984:	183b      	adds	r3, r7, r0
 8008986:	49a8      	ldr	r1, [pc, #672]	; (8008c28 <USB_DeactivateEndpoint+0x368>)
 8008988:	400a      	ands	r2, r1
 800898a:	801a      	strh	r2, [r3, #0]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	18d3      	adds	r3, r2, r3
 8008996:	183a      	adds	r2, r7, r0
 8008998:	8812      	ldrh	r2, [r2, #0]
 800899a:	49a7      	ldr	r1, [pc, #668]	; (8008c38 <USB_DeactivateEndpoint+0x378>)
 800899c:	430a      	orrs	r2, r1
 800899e:	b292      	uxth	r2, r2
 80089a0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	18d3      	adds	r3, r2, r3
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	200e      	movs	r0, #14
 80089b2:	183b      	adds	r3, r7, r0
 80089b4:	49a1      	ldr	r1, [pc, #644]	; (8008c3c <USB_DeactivateEndpoint+0x37c>)
 80089b6:	400a      	ands	r2, r1
 80089b8:	801a      	strh	r2, [r3, #0]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	18d3      	adds	r3, r2, r3
 80089c4:	183a      	adds	r2, r7, r0
 80089c6:	8812      	ldrh	r2, [r2, #0]
 80089c8:	499a      	ldr	r1, [pc, #616]	; (8008c34 <USB_DeactivateEndpoint+0x374>)
 80089ca:	430a      	orrs	r2, r1
 80089cc:	b292      	uxth	r2, r2
 80089ce:	801a      	strh	r2, [r3, #0]
 80089d0:	e125      	b.n	8008c1e <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	785b      	ldrb	r3, [r3, #1]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d000      	beq.n	80089dc <USB_DeactivateEndpoint+0x11c>
 80089da:	e090      	b.n	8008afe <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	18d2      	adds	r2, r2, r3
 80089e6:	2120      	movs	r1, #32
 80089e8:	187b      	adds	r3, r7, r1
 80089ea:	8812      	ldrh	r2, [r2, #0]
 80089ec:	801a      	strh	r2, [r3, #0]
 80089ee:	187b      	adds	r3, r7, r1
 80089f0:	881a      	ldrh	r2, [r3, #0]
 80089f2:	2380      	movs	r3, #128	; 0x80
 80089f4:	01db      	lsls	r3, r3, #7
 80089f6:	4013      	ands	r3, r2
 80089f8:	d016      	beq.n	8008a28 <USB_DeactivateEndpoint+0x168>
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	18d3      	adds	r3, r2, r3
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	201e      	movs	r0, #30
 8008a0a:	183b      	adds	r3, r7, r0
 8008a0c:	4986      	ldr	r1, [pc, #536]	; (8008c28 <USB_DeactivateEndpoint+0x368>)
 8008a0e:	400a      	ands	r2, r1
 8008a10:	801a      	strh	r2, [r3, #0]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	18d3      	adds	r3, r2, r3
 8008a1c:	183a      	adds	r2, r7, r0
 8008a1e:	8812      	ldrh	r2, [r2, #0]
 8008a20:	4985      	ldr	r1, [pc, #532]	; (8008c38 <USB_DeactivateEndpoint+0x378>)
 8008a22:	430a      	orrs	r2, r1
 8008a24:	b292      	uxth	r2, r2
 8008a26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	18d2      	adds	r2, r2, r3
 8008a32:	211c      	movs	r1, #28
 8008a34:	187b      	adds	r3, r7, r1
 8008a36:	8812      	ldrh	r2, [r2, #0]
 8008a38:	801a      	strh	r2, [r3, #0]
 8008a3a:	187b      	adds	r3, r7, r1
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	2240      	movs	r2, #64	; 0x40
 8008a40:	4013      	ands	r3, r2
 8008a42:	d016      	beq.n	8008a72 <USB_DeactivateEndpoint+0x1b2>
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	18d3      	adds	r3, r2, r3
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	201a      	movs	r0, #26
 8008a54:	183b      	adds	r3, r7, r0
 8008a56:	4974      	ldr	r1, [pc, #464]	; (8008c28 <USB_DeactivateEndpoint+0x368>)
 8008a58:	400a      	ands	r2, r1
 8008a5a:	801a      	strh	r2, [r3, #0]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	18d3      	adds	r3, r2, r3
 8008a66:	183a      	adds	r2, r7, r0
 8008a68:	8812      	ldrh	r2, [r2, #0]
 8008a6a:	4970      	ldr	r1, [pc, #448]	; (8008c2c <USB_DeactivateEndpoint+0x36c>)
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	b292      	uxth	r2, r2
 8008a70:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	18d3      	adds	r3, r2, r3
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	2018      	movs	r0, #24
 8008a82:	183b      	adds	r3, r7, r0
 8008a84:	4968      	ldr	r1, [pc, #416]	; (8008c28 <USB_DeactivateEndpoint+0x368>)
 8008a86:	400a      	ands	r2, r1
 8008a88:	801a      	strh	r2, [r3, #0]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	18d3      	adds	r3, r2, r3
 8008a94:	183a      	adds	r2, r7, r0
 8008a96:	8812      	ldrh	r2, [r2, #0]
 8008a98:	4964      	ldr	r1, [pc, #400]	; (8008c2c <USB_DeactivateEndpoint+0x36c>)
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	b292      	uxth	r2, r2
 8008a9e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	18d3      	adds	r3, r2, r3
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	2016      	movs	r0, #22
 8008ab0:	183b      	adds	r3, r7, r0
 8008ab2:	4962      	ldr	r1, [pc, #392]	; (8008c3c <USB_DeactivateEndpoint+0x37c>)
 8008ab4:	400a      	ands	r2, r1
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	18d3      	adds	r3, r2, r3
 8008ac2:	183a      	adds	r2, r7, r0
 8008ac4:	8812      	ldrh	r2, [r2, #0]
 8008ac6:	495b      	ldr	r1, [pc, #364]	; (8008c34 <USB_DeactivateEndpoint+0x374>)
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	b292      	uxth	r2, r2
 8008acc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	18d3      	adds	r3, r2, r3
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	2014      	movs	r0, #20
 8008ade:	183b      	adds	r3, r7, r0
 8008ae0:	4953      	ldr	r1, [pc, #332]	; (8008c30 <USB_DeactivateEndpoint+0x370>)
 8008ae2:	400a      	ands	r2, r1
 8008ae4:	801a      	strh	r2, [r3, #0]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	18d3      	adds	r3, r2, r3
 8008af0:	183a      	adds	r2, r7, r0
 8008af2:	8812      	ldrh	r2, [r2, #0]
 8008af4:	494f      	ldr	r1, [pc, #316]	; (8008c34 <USB_DeactivateEndpoint+0x374>)
 8008af6:	430a      	orrs	r2, r1
 8008af8:	b292      	uxth	r2, r2
 8008afa:	801a      	strh	r2, [r3, #0]
 8008afc:	e08f      	b.n	8008c1e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	18d2      	adds	r2, r2, r3
 8008b08:	212e      	movs	r1, #46	; 0x2e
 8008b0a:	187b      	adds	r3, r7, r1
 8008b0c:	8812      	ldrh	r2, [r2, #0]
 8008b0e:	801a      	strh	r2, [r3, #0]
 8008b10:	187b      	adds	r3, r7, r1
 8008b12:	881a      	ldrh	r2, [r3, #0]
 8008b14:	2380      	movs	r3, #128	; 0x80
 8008b16:	01db      	lsls	r3, r3, #7
 8008b18:	4013      	ands	r3, r2
 8008b1a:	d016      	beq.n	8008b4a <USB_DeactivateEndpoint+0x28a>
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	18d3      	adds	r3, r2, r3
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	202c      	movs	r0, #44	; 0x2c
 8008b2c:	183b      	adds	r3, r7, r0
 8008b2e:	493e      	ldr	r1, [pc, #248]	; (8008c28 <USB_DeactivateEndpoint+0x368>)
 8008b30:	400a      	ands	r2, r1
 8008b32:	801a      	strh	r2, [r3, #0]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	18d3      	adds	r3, r2, r3
 8008b3e:	183a      	adds	r2, r7, r0
 8008b40:	8812      	ldrh	r2, [r2, #0]
 8008b42:	493d      	ldr	r1, [pc, #244]	; (8008c38 <USB_DeactivateEndpoint+0x378>)
 8008b44:	430a      	orrs	r2, r1
 8008b46:	b292      	uxth	r2, r2
 8008b48:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	18d2      	adds	r2, r2, r3
 8008b54:	212a      	movs	r1, #42	; 0x2a
 8008b56:	187b      	adds	r3, r7, r1
 8008b58:	8812      	ldrh	r2, [r2, #0]
 8008b5a:	801a      	strh	r2, [r3, #0]
 8008b5c:	187b      	adds	r3, r7, r1
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	2240      	movs	r2, #64	; 0x40
 8008b62:	4013      	ands	r3, r2
 8008b64:	d016      	beq.n	8008b94 <USB_DeactivateEndpoint+0x2d4>
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	18d3      	adds	r3, r2, r3
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	2028      	movs	r0, #40	; 0x28
 8008b76:	183b      	adds	r3, r7, r0
 8008b78:	492b      	ldr	r1, [pc, #172]	; (8008c28 <USB_DeactivateEndpoint+0x368>)
 8008b7a:	400a      	ands	r2, r1
 8008b7c:	801a      	strh	r2, [r3, #0]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	18d3      	adds	r3, r2, r3
 8008b88:	183a      	adds	r2, r7, r0
 8008b8a:	8812      	ldrh	r2, [r2, #0]
 8008b8c:	4927      	ldr	r1, [pc, #156]	; (8008c2c <USB_DeactivateEndpoint+0x36c>)
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	b292      	uxth	r2, r2
 8008b92:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	18d3      	adds	r3, r2, r3
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	2026      	movs	r0, #38	; 0x26
 8008ba4:	183b      	adds	r3, r7, r0
 8008ba6:	4920      	ldr	r1, [pc, #128]	; (8008c28 <USB_DeactivateEndpoint+0x368>)
 8008ba8:	400a      	ands	r2, r1
 8008baa:	801a      	strh	r2, [r3, #0]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	18d3      	adds	r3, r2, r3
 8008bb6:	183a      	adds	r2, r7, r0
 8008bb8:	8812      	ldrh	r2, [r2, #0]
 8008bba:	491f      	ldr	r1, [pc, #124]	; (8008c38 <USB_DeactivateEndpoint+0x378>)
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	b292      	uxth	r2, r2
 8008bc0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	18d3      	adds	r3, r2, r3
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	2024      	movs	r0, #36	; 0x24
 8008bd2:	183b      	adds	r3, r7, r0
 8008bd4:	4916      	ldr	r1, [pc, #88]	; (8008c30 <USB_DeactivateEndpoint+0x370>)
 8008bd6:	400a      	ands	r2, r1
 8008bd8:	801a      	strh	r2, [r3, #0]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	18d3      	adds	r3, r2, r3
 8008be4:	183a      	adds	r2, r7, r0
 8008be6:	8812      	ldrh	r2, [r2, #0]
 8008be8:	4912      	ldr	r1, [pc, #72]	; (8008c34 <USB_DeactivateEndpoint+0x374>)
 8008bea:	430a      	orrs	r2, r1
 8008bec:	b292      	uxth	r2, r2
 8008bee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	18d3      	adds	r3, r2, r3
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	2022      	movs	r0, #34	; 0x22
 8008c00:	183b      	adds	r3, r7, r0
 8008c02:	490e      	ldr	r1, [pc, #56]	; (8008c3c <USB_DeactivateEndpoint+0x37c>)
 8008c04:	400a      	ands	r2, r1
 8008c06:	801a      	strh	r2, [r3, #0]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	18d3      	adds	r3, r2, r3
 8008c12:	183a      	adds	r2, r7, r0
 8008c14:	8812      	ldrh	r2, [r2, #0]
 8008c16:	4907      	ldr	r1, [pc, #28]	; (8008c34 <USB_DeactivateEndpoint+0x374>)
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	b292      	uxth	r2, r2
 8008c1c:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	0018      	movs	r0, r3
 8008c22:	46bd      	mov	sp, r7
 8008c24:	b00c      	add	sp, #48	; 0x30
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	ffff8f8f 	.word	0xffff8f8f
 8008c2c:	ffff80c0 	.word	0xffff80c0
 8008c30:	ffff8fbf 	.word	0xffff8fbf
 8008c34:	ffff8080 	.word	0xffff8080
 8008c38:	ffffc080 	.word	0xffffc080
 8008c3c:	ffffbf8f 	.word	0xffffbf8f

08008c40 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c40:	b590      	push	{r4, r7, lr}
 8008c42:	b0c3      	sub	sp, #268	; 0x10c
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d001      	beq.n	8008c56 <USB_EPStartXfer+0x16>
 8008c52:	f000 fcef 	bl	8009634 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	699a      	ldr	r2, [r3, #24]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d905      	bls.n	8008c6e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	1d7a      	adds	r2, r7, #5
 8008c68:	32ff      	adds	r2, #255	; 0xff
 8008c6a:	6013      	str	r3, [r2, #0]
 8008c6c:	e004      	b.n	8008c78 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	1d7a      	adds	r2, r7, #5
 8008c74:	32ff      	adds	r2, #255	; 0xff
 8008c76:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	7b1b      	ldrb	r3, [r3, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d125      	bne.n	8008ccc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	6959      	ldr	r1, [r3, #20]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	88da      	ldrh	r2, [r3, #6]
 8008c88:	1d7b      	adds	r3, r7, #5
 8008c8a:	33ff      	adds	r3, #255	; 0xff
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 f9c9 	bl	800a028 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	613b      	str	r3, [r7, #16]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2250      	movs	r2, #80	; 0x50
 8008c9e:	5a9b      	ldrh	r3, [r3, r2]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	001a      	movs	r2, r3
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	189b      	adds	r3, r3, r2
 8008ca8:	613b      	str	r3, [r7, #16]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	00da      	lsls	r2, r3, #3
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	18d3      	adds	r3, r2, r3
 8008cb4:	4acc      	ldr	r2, [pc, #816]	; (8008fe8 <USB_EPStartXfer+0x3a8>)
 8008cb6:	4694      	mov	ip, r2
 8008cb8:	4463      	add	r3, ip
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	1d7b      	adds	r3, r7, #5
 8008cbe:	33ff      	adds	r3, #255	; 0xff
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	f000 fc8f 	bl	80095ea <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	78db      	ldrb	r3, [r3, #3]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d000      	beq.n	8008cd6 <USB_EPStartXfer+0x96>
 8008cd4:	e33a      	b.n	800934c <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	6a1a      	ldr	r2, [r3, #32]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d800      	bhi.n	8008ce4 <USB_EPStartXfer+0xa4>
 8008ce2:	e2df      	b.n	80092a4 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	18d3      	adds	r3, r2, r3
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	2056      	movs	r0, #86	; 0x56
 8008cf4:	183b      	adds	r3, r7, r0
 8008cf6:	49bd      	ldr	r1, [pc, #756]	; (8008fec <USB_EPStartXfer+0x3ac>)
 8008cf8:	400a      	ands	r2, r1
 8008cfa:	801a      	strh	r2, [r3, #0]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	18d3      	adds	r3, r2, r3
 8008d06:	183a      	adds	r2, r7, r0
 8008d08:	8812      	ldrh	r2, [r2, #0]
 8008d0a:	49b9      	ldr	r1, [pc, #740]	; (8008ff0 <USB_EPStartXfer+0x3b0>)
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	b292      	uxth	r2, r2
 8008d10:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	6a1a      	ldr	r2, [r3, #32]
 8008d16:	1d7b      	adds	r3, r7, #5
 8008d18:	33ff      	adds	r3, #255	; 0xff
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	1ad2      	subs	r2, r2, r3
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	18d3      	adds	r3, r2, r3
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	001a      	movs	r2, r3
 8008d32:	2340      	movs	r3, #64	; 0x40
 8008d34:	4013      	ands	r3, r2
 8008d36:	d100      	bne.n	8008d3a <USB_EPStartXfer+0xfa>
 8008d38:	e162      	b.n	8009000 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	785b      	ldrb	r3, [r3, #1]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d16a      	bne.n	8008e1c <USB_EPStartXfer+0x1dc>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2250      	movs	r2, #80	; 0x50
 8008d4e:	5a9b      	ldrh	r3, [r3, r2]
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	001a      	movs	r2, r3
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	189b      	adds	r3, r3, r2
 8008d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	00da      	lsls	r2, r3, #3
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	18d3      	adds	r3, r2, r3
 8008d64:	4aa3      	ldr	r2, [pc, #652]	; (8008ff4 <USB_EPStartXfer+0x3b4>)
 8008d66:	4694      	mov	ip, r2
 8008d68:	4463      	add	r3, ip
 8008d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d6c:	1d7b      	adds	r3, r7, #5
 8008d6e:	33ff      	adds	r3, #255	; 0xff
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d110      	bne.n	8008d98 <USB_EPStartXfer+0x158>
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	4a9e      	ldr	r2, [pc, #632]	; (8008ff8 <USB_EPStartXfer+0x3b8>)
 8008d7e:	4013      	ands	r3, r2
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	801a      	strh	r2, [r3, #0]
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	4a9b      	ldr	r2, [pc, #620]	; (8008ffc <USB_EPStartXfer+0x3bc>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	801a      	strh	r2, [r3, #0]
 8008d96:	e05c      	b.n	8008e52 <USB_EPStartXfer+0x212>
 8008d98:	1d7b      	adds	r3, r7, #5
 8008d9a:	33ff      	adds	r3, #255	; 0xff
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8008da0:	d81c      	bhi.n	8008ddc <USB_EPStartXfer+0x19c>
 8008da2:	1d7b      	adds	r3, r7, #5
 8008da4:	33ff      	adds	r3, #255	; 0xff
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	085b      	lsrs	r3, r3, #1
 8008daa:	1c7a      	adds	r2, r7, #1
 8008dac:	32ff      	adds	r2, #255	; 0xff
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	1d7b      	adds	r3, r7, #5
 8008db2:	33ff      	adds	r3, #255	; 0xff
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2201      	movs	r2, #1
 8008db8:	4013      	ands	r3, r2
 8008dba:	d006      	beq.n	8008dca <USB_EPStartXfer+0x18a>
 8008dbc:	1c7b      	adds	r3, r7, #1
 8008dbe:	33ff      	adds	r3, #255	; 0xff
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	1c7a      	adds	r2, r7, #1
 8008dc6:	32ff      	adds	r2, #255	; 0xff
 8008dc8:	6013      	str	r3, [r2, #0]
 8008dca:	1c7b      	adds	r3, r7, #1
 8008dcc:	33ff      	adds	r3, #255	; 0xff
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	029b      	lsls	r3, r3, #10
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	801a      	strh	r2, [r3, #0]
 8008dda:	e03a      	b.n	8008e52 <USB_EPStartXfer+0x212>
 8008ddc:	1d7b      	adds	r3, r7, #5
 8008dde:	33ff      	adds	r3, #255	; 0xff
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	095b      	lsrs	r3, r3, #5
 8008de4:	1c7a      	adds	r2, r7, #1
 8008de6:	32ff      	adds	r2, #255	; 0xff
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	1d7b      	adds	r3, r7, #5
 8008dec:	33ff      	adds	r3, #255	; 0xff
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	221f      	movs	r2, #31
 8008df2:	4013      	ands	r3, r2
 8008df4:	d106      	bne.n	8008e04 <USB_EPStartXfer+0x1c4>
 8008df6:	1c7b      	adds	r3, r7, #1
 8008df8:	33ff      	adds	r3, #255	; 0xff
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	1c7a      	adds	r2, r7, #1
 8008e00:	32ff      	adds	r2, #255	; 0xff
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	1c7b      	adds	r3, r7, #1
 8008e06:	33ff      	adds	r3, #255	; 0xff
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	029b      	lsls	r3, r3, #10
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	4a7a      	ldr	r2, [pc, #488]	; (8008ffc <USB_EPStartXfer+0x3bc>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	801a      	strh	r2, [r3, #0]
 8008e1a:	e01a      	b.n	8008e52 <USB_EPStartXfer+0x212>
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	785b      	ldrb	r3, [r3, #1]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d116      	bne.n	8008e52 <USB_EPStartXfer+0x212>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2250      	movs	r2, #80	; 0x50
 8008e28:	5a9b      	ldrh	r3, [r3, r2]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	001a      	movs	r2, r3
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	189b      	adds	r3, r3, r2
 8008e32:	633b      	str	r3, [r7, #48]	; 0x30
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	00da      	lsls	r2, r3, #3
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	18d3      	adds	r3, r2, r3
 8008e3e:	4a6d      	ldr	r2, [pc, #436]	; (8008ff4 <USB_EPStartXfer+0x3b4>)
 8008e40:	4694      	mov	ip, r2
 8008e42:	4463      	add	r3, ip
 8008e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e46:	1d7b      	adds	r3, r7, #5
 8008e48:	33ff      	adds	r3, #255	; 0xff
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e52:	2076      	movs	r0, #118	; 0x76
 8008e54:	183b      	adds	r3, r7, r0
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	8952      	ldrh	r2, [r2, #10]
 8008e5a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	6959      	ldr	r1, [r3, #20]
 8008e60:	1d7b      	adds	r3, r7, #5
 8008e62:	33ff      	adds	r3, #255	; 0xff
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	b29c      	uxth	r4, r3
 8008e68:	183b      	adds	r3, r7, r0
 8008e6a:	881a      	ldrh	r2, [r3, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	0023      	movs	r3, r4
 8008e70:	f001 f8da 	bl	800a028 <USB_WritePMA>
            ep->xfer_buff += len;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	695a      	ldr	r2, [r3, #20]
 8008e78:	1d7b      	adds	r3, r7, #5
 8008e7a:	33ff      	adds	r3, #255	; 0xff
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	18d2      	adds	r2, r2, r3
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	6a1a      	ldr	r2, [r3, #32]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d908      	bls.n	8008ea2 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	6a1a      	ldr	r2, [r3, #32]
 8008e94:	1d7b      	adds	r3, r7, #5
 8008e96:	33ff      	adds	r3, #255	; 0xff
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	1ad2      	subs	r2, r2, r3
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	621a      	str	r2, [r3, #32]
 8008ea0:	e007      	b.n	8008eb2 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	1d7a      	adds	r2, r7, #5
 8008ea8:	32ff      	adds	r2, #255	; 0xff
 8008eaa:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	785b      	ldrb	r3, [r3, #1]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d166      	bne.n	8008f88 <USB_EPStartXfer+0x348>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	61bb      	str	r3, [r7, #24]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2250      	movs	r2, #80	; 0x50
 8008ec2:	5a9b      	ldrh	r3, [r3, r2]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	001a      	movs	r2, r3
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	189b      	adds	r3, r3, r2
 8008ecc:	61bb      	str	r3, [r7, #24]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	00da      	lsls	r2, r3, #3
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	18d3      	adds	r3, r2, r3
 8008ed8:	4a43      	ldr	r2, [pc, #268]	; (8008fe8 <USB_EPStartXfer+0x3a8>)
 8008eda:	4694      	mov	ip, r2
 8008edc:	4463      	add	r3, ip
 8008ede:	617b      	str	r3, [r7, #20]
 8008ee0:	1d7b      	adds	r3, r7, #5
 8008ee2:	33ff      	adds	r3, #255	; 0xff
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d110      	bne.n	8008f0c <USB_EPStartXfer+0x2cc>
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	881b      	ldrh	r3, [r3, #0]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	4a41      	ldr	r2, [pc, #260]	; (8008ff8 <USB_EPStartXfer+0x3b8>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	801a      	strh	r2, [r3, #0]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	4a3e      	ldr	r2, [pc, #248]	; (8008ffc <USB_EPStartXfer+0x3bc>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	801a      	strh	r2, [r3, #0]
 8008f0a:	e05a      	b.n	8008fc2 <USB_EPStartXfer+0x382>
 8008f0c:	1d7b      	adds	r3, r7, #5
 8008f0e:	33ff      	adds	r3, #255	; 0xff
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b3e      	cmp	r3, #62	; 0x3e
 8008f14:	d81a      	bhi.n	8008f4c <USB_EPStartXfer+0x30c>
 8008f16:	1d7b      	adds	r3, r7, #5
 8008f18:	33ff      	adds	r3, #255	; 0xff
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	085b      	lsrs	r3, r3, #1
 8008f1e:	21fc      	movs	r1, #252	; 0xfc
 8008f20:	187a      	adds	r2, r7, r1
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	1d7b      	adds	r3, r7, #5
 8008f26:	33ff      	adds	r3, #255	; 0xff
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	d004      	beq.n	8008f3a <USB_EPStartXfer+0x2fa>
 8008f30:	187b      	adds	r3, r7, r1
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3301      	adds	r3, #1
 8008f36:	187a      	adds	r2, r7, r1
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	23fc      	movs	r3, #252	; 0xfc
 8008f3c:	18fb      	adds	r3, r7, r3
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	029b      	lsls	r3, r3, #10
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	801a      	strh	r2, [r3, #0]
 8008f4a:	e03a      	b.n	8008fc2 <USB_EPStartXfer+0x382>
 8008f4c:	1d7b      	adds	r3, r7, #5
 8008f4e:	33ff      	adds	r3, #255	; 0xff
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	21fc      	movs	r1, #252	; 0xfc
 8008f56:	187a      	adds	r2, r7, r1
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	1d7b      	adds	r3, r7, #5
 8008f5c:	33ff      	adds	r3, #255	; 0xff
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	221f      	movs	r2, #31
 8008f62:	4013      	ands	r3, r2
 8008f64:	d104      	bne.n	8008f70 <USB_EPStartXfer+0x330>
 8008f66:	187b      	adds	r3, r7, r1
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	187a      	adds	r2, r7, r1
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	23fc      	movs	r3, #252	; 0xfc
 8008f72:	18fb      	adds	r3, r7, r3
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	029b      	lsls	r3, r3, #10
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	4a1f      	ldr	r2, [pc, #124]	; (8008ffc <USB_EPStartXfer+0x3bc>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	801a      	strh	r2, [r3, #0]
 8008f86:	e01c      	b.n	8008fc2 <USB_EPStartXfer+0x382>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	785b      	ldrb	r3, [r3, #1]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d118      	bne.n	8008fc2 <USB_EPStartXfer+0x382>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	623b      	str	r3, [r7, #32]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2250      	movs	r2, #80	; 0x50
 8008f98:	5a9b      	ldrh	r3, [r3, r2]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	001a      	movs	r2, r3
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	189b      	adds	r3, r3, r2
 8008fa2:	623b      	str	r3, [r7, #32]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	00da      	lsls	r2, r3, #3
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	18d3      	adds	r3, r2, r3
 8008fae:	4a0e      	ldr	r2, [pc, #56]	; (8008fe8 <USB_EPStartXfer+0x3a8>)
 8008fb0:	4694      	mov	ip, r2
 8008fb2:	4463      	add	r3, ip
 8008fb4:	61fb      	str	r3, [r7, #28]
 8008fb6:	1d7b      	adds	r3, r7, #5
 8008fb8:	33ff      	adds	r3, #255	; 0xff
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008fc2:	2076      	movs	r0, #118	; 0x76
 8008fc4:	183b      	adds	r3, r7, r0
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	8912      	ldrh	r2, [r2, #8]
 8008fca:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	6959      	ldr	r1, [r3, #20]
 8008fd0:	1d7b      	adds	r3, r7, #5
 8008fd2:	33ff      	adds	r3, #255	; 0xff
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	b29c      	uxth	r4, r3
 8008fd8:	183b      	adds	r3, r7, r0
 8008fda:	881a      	ldrh	r2, [r3, #0]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	0023      	movs	r3, r4
 8008fe0:	f001 f822 	bl	800a028 <USB_WritePMA>
 8008fe4:	e301      	b.n	80095ea <USB_EPStartXfer+0x9aa>
 8008fe6:	46c0      	nop			; (mov r8, r8)
 8008fe8:	00000402 	.word	0x00000402
 8008fec:	ffff8f8f 	.word	0xffff8f8f
 8008ff0:	ffff8180 	.word	0xffff8180
 8008ff4:	00000406 	.word	0x00000406
 8008ff8:	ffff83ff 	.word	0xffff83ff
 8008ffc:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	785b      	ldrb	r3, [r3, #1]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d166      	bne.n	80090d6 <USB_EPStartXfer+0x496>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	64bb      	str	r3, [r7, #72]	; 0x48
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2250      	movs	r2, #80	; 0x50
 8009010:	5a9b      	ldrh	r3, [r3, r2]
 8009012:	b29b      	uxth	r3, r3
 8009014:	001a      	movs	r2, r3
 8009016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009018:	189b      	adds	r3, r3, r2
 800901a:	64bb      	str	r3, [r7, #72]	; 0x48
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	00da      	lsls	r2, r3, #3
 8009022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009024:	18d3      	adds	r3, r2, r3
 8009026:	4ac3      	ldr	r2, [pc, #780]	; (8009334 <USB_EPStartXfer+0x6f4>)
 8009028:	4694      	mov	ip, r2
 800902a:	4463      	add	r3, ip
 800902c:	647b      	str	r3, [r7, #68]	; 0x44
 800902e:	1d7b      	adds	r3, r7, #5
 8009030:	33ff      	adds	r3, #255	; 0xff
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d110      	bne.n	800905a <USB_EPStartXfer+0x41a>
 8009038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	b29b      	uxth	r3, r3
 800903e:	4abe      	ldr	r2, [pc, #760]	; (8009338 <USB_EPStartXfer+0x6f8>)
 8009040:	4013      	ands	r3, r2
 8009042:	b29a      	uxth	r2, r3
 8009044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009046:	801a      	strh	r2, [r3, #0]
 8009048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	b29b      	uxth	r3, r3
 800904e:	4abb      	ldr	r2, [pc, #748]	; (800933c <USB_EPStartXfer+0x6fc>)
 8009050:	4313      	orrs	r3, r2
 8009052:	b29a      	uxth	r2, r3
 8009054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009056:	801a      	strh	r2, [r3, #0]
 8009058:	e05a      	b.n	8009110 <USB_EPStartXfer+0x4d0>
 800905a:	1d7b      	adds	r3, r7, #5
 800905c:	33ff      	adds	r3, #255	; 0xff
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b3e      	cmp	r3, #62	; 0x3e
 8009062:	d81a      	bhi.n	800909a <USB_EPStartXfer+0x45a>
 8009064:	1d7b      	adds	r3, r7, #5
 8009066:	33ff      	adds	r3, #255	; 0xff
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	085b      	lsrs	r3, r3, #1
 800906c:	21f8      	movs	r1, #248	; 0xf8
 800906e:	187a      	adds	r2, r7, r1
 8009070:	6013      	str	r3, [r2, #0]
 8009072:	1d7b      	adds	r3, r7, #5
 8009074:	33ff      	adds	r3, #255	; 0xff
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2201      	movs	r2, #1
 800907a:	4013      	ands	r3, r2
 800907c:	d004      	beq.n	8009088 <USB_EPStartXfer+0x448>
 800907e:	187b      	adds	r3, r7, r1
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3301      	adds	r3, #1
 8009084:	187a      	adds	r2, r7, r1
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	23f8      	movs	r3, #248	; 0xf8
 800908a:	18fb      	adds	r3, r7, r3
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	029b      	lsls	r3, r3, #10
 8009092:	b29a      	uxth	r2, r3
 8009094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009096:	801a      	strh	r2, [r3, #0]
 8009098:	e03a      	b.n	8009110 <USB_EPStartXfer+0x4d0>
 800909a:	1d7b      	adds	r3, r7, #5
 800909c:	33ff      	adds	r3, #255	; 0xff
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	095b      	lsrs	r3, r3, #5
 80090a2:	21f8      	movs	r1, #248	; 0xf8
 80090a4:	187a      	adds	r2, r7, r1
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	1d7b      	adds	r3, r7, #5
 80090aa:	33ff      	adds	r3, #255	; 0xff
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	221f      	movs	r2, #31
 80090b0:	4013      	ands	r3, r2
 80090b2:	d104      	bne.n	80090be <USB_EPStartXfer+0x47e>
 80090b4:	187b      	adds	r3, r7, r1
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	187a      	adds	r2, r7, r1
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	23f8      	movs	r3, #248	; 0xf8
 80090c0:	18fb      	adds	r3, r7, r3
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	029b      	lsls	r3, r3, #10
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	4a9c      	ldr	r2, [pc, #624]	; (800933c <USB_EPStartXfer+0x6fc>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090d2:	801a      	strh	r2, [r3, #0]
 80090d4:	e01c      	b.n	8009110 <USB_EPStartXfer+0x4d0>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	785b      	ldrb	r3, [r3, #1]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d118      	bne.n	8009110 <USB_EPStartXfer+0x4d0>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	653b      	str	r3, [r7, #80]	; 0x50
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2250      	movs	r2, #80	; 0x50
 80090e6:	5a9b      	ldrh	r3, [r3, r2]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	001a      	movs	r2, r3
 80090ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ee:	189b      	adds	r3, r3, r2
 80090f0:	653b      	str	r3, [r7, #80]	; 0x50
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	00da      	lsls	r2, r3, #3
 80090f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090fa:	18d3      	adds	r3, r2, r3
 80090fc:	4a8d      	ldr	r2, [pc, #564]	; (8009334 <USB_EPStartXfer+0x6f4>)
 80090fe:	4694      	mov	ip, r2
 8009100:	4463      	add	r3, ip
 8009102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009104:	1d7b      	adds	r3, r7, #5
 8009106:	33ff      	adds	r3, #255	; 0xff
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	b29a      	uxth	r2, r3
 800910c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800910e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009110:	2076      	movs	r0, #118	; 0x76
 8009112:	183b      	adds	r3, r7, r0
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	8912      	ldrh	r2, [r2, #8]
 8009118:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6959      	ldr	r1, [r3, #20]
 800911e:	1d7b      	adds	r3, r7, #5
 8009120:	33ff      	adds	r3, #255	; 0xff
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	b29c      	uxth	r4, r3
 8009126:	183b      	adds	r3, r7, r0
 8009128:	881a      	ldrh	r2, [r3, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	0023      	movs	r3, r4
 800912e:	f000 ff7b 	bl	800a028 <USB_WritePMA>
            ep->xfer_buff += len;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	695a      	ldr	r2, [r3, #20]
 8009136:	1d7b      	adds	r3, r7, #5
 8009138:	33ff      	adds	r3, #255	; 0xff
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	18d2      	adds	r2, r2, r3
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	6a1a      	ldr	r2, [r3, #32]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	429a      	cmp	r2, r3
 800914c:	d908      	bls.n	8009160 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	6a1a      	ldr	r2, [r3, #32]
 8009152:	1d7b      	adds	r3, r7, #5
 8009154:	33ff      	adds	r3, #255	; 0xff
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	1ad2      	subs	r2, r2, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	621a      	str	r2, [r3, #32]
 800915e:	e007      	b.n	8009170 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	1d7a      	adds	r2, r7, #5
 8009166:	32ff      	adds	r2, #255	; 0xff
 8009168:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2200      	movs	r2, #0
 800916e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	643b      	str	r3, [r7, #64]	; 0x40
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	785b      	ldrb	r3, [r3, #1]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d166      	bne.n	800924a <USB_EPStartXfer+0x60a>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2250      	movs	r2, #80	; 0x50
 8009184:	5a9b      	ldrh	r3, [r3, r2]
 8009186:	b29b      	uxth	r3, r3
 8009188:	001a      	movs	r2, r3
 800918a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918c:	189b      	adds	r3, r3, r2
 800918e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	00da      	lsls	r2, r3, #3
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	18d3      	adds	r3, r2, r3
 800919a:	4a69      	ldr	r2, [pc, #420]	; (8009340 <USB_EPStartXfer+0x700>)
 800919c:	4694      	mov	ip, r2
 800919e:	4463      	add	r3, ip
 80091a0:	637b      	str	r3, [r7, #52]	; 0x34
 80091a2:	1d7b      	adds	r3, r7, #5
 80091a4:	33ff      	adds	r3, #255	; 0xff
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d110      	bne.n	80091ce <USB_EPStartXfer+0x58e>
 80091ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	4a61      	ldr	r2, [pc, #388]	; (8009338 <USB_EPStartXfer+0x6f8>)
 80091b4:	4013      	ands	r3, r2
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	801a      	strh	r2, [r3, #0]
 80091bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	4a5e      	ldr	r2, [pc, #376]	; (800933c <USB_EPStartXfer+0x6fc>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ca:	801a      	strh	r2, [r3, #0]
 80091cc:	e058      	b.n	8009280 <USB_EPStartXfer+0x640>
 80091ce:	1d7b      	adds	r3, r7, #5
 80091d0:	33ff      	adds	r3, #255	; 0xff
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b3e      	cmp	r3, #62	; 0x3e
 80091d6:	d81a      	bhi.n	800920e <USB_EPStartXfer+0x5ce>
 80091d8:	1d7b      	adds	r3, r7, #5
 80091da:	33ff      	adds	r3, #255	; 0xff
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	085b      	lsrs	r3, r3, #1
 80091e0:	21f4      	movs	r1, #244	; 0xf4
 80091e2:	187a      	adds	r2, r7, r1
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	1d7b      	adds	r3, r7, #5
 80091e8:	33ff      	adds	r3, #255	; 0xff
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2201      	movs	r2, #1
 80091ee:	4013      	ands	r3, r2
 80091f0:	d004      	beq.n	80091fc <USB_EPStartXfer+0x5bc>
 80091f2:	187b      	adds	r3, r7, r1
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3301      	adds	r3, #1
 80091f8:	187a      	adds	r2, r7, r1
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	23f4      	movs	r3, #244	; 0xf4
 80091fe:	18fb      	adds	r3, r7, r3
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	b29b      	uxth	r3, r3
 8009204:	029b      	lsls	r3, r3, #10
 8009206:	b29a      	uxth	r2, r3
 8009208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920a:	801a      	strh	r2, [r3, #0]
 800920c:	e038      	b.n	8009280 <USB_EPStartXfer+0x640>
 800920e:	1d7b      	adds	r3, r7, #5
 8009210:	33ff      	adds	r3, #255	; 0xff
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	095b      	lsrs	r3, r3, #5
 8009216:	21f4      	movs	r1, #244	; 0xf4
 8009218:	187a      	adds	r2, r7, r1
 800921a:	6013      	str	r3, [r2, #0]
 800921c:	1d7b      	adds	r3, r7, #5
 800921e:	33ff      	adds	r3, #255	; 0xff
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	221f      	movs	r2, #31
 8009224:	4013      	ands	r3, r2
 8009226:	d104      	bne.n	8009232 <USB_EPStartXfer+0x5f2>
 8009228:	187b      	adds	r3, r7, r1
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3b01      	subs	r3, #1
 800922e:	187a      	adds	r2, r7, r1
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	23f4      	movs	r3, #244	; 0xf4
 8009234:	18fb      	adds	r3, r7, r3
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	b29b      	uxth	r3, r3
 800923a:	029b      	lsls	r3, r3, #10
 800923c:	b29b      	uxth	r3, r3
 800923e:	4a3f      	ldr	r2, [pc, #252]	; (800933c <USB_EPStartXfer+0x6fc>)
 8009240:	4313      	orrs	r3, r2
 8009242:	b29a      	uxth	r2, r3
 8009244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009246:	801a      	strh	r2, [r3, #0]
 8009248:	e01a      	b.n	8009280 <USB_EPStartXfer+0x640>
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	785b      	ldrb	r3, [r3, #1]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d116      	bne.n	8009280 <USB_EPStartXfer+0x640>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2250      	movs	r2, #80	; 0x50
 8009256:	5a9b      	ldrh	r3, [r3, r2]
 8009258:	b29b      	uxth	r3, r3
 800925a:	001a      	movs	r2, r3
 800925c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800925e:	189b      	adds	r3, r3, r2
 8009260:	643b      	str	r3, [r7, #64]	; 0x40
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	00da      	lsls	r2, r3, #3
 8009268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800926a:	18d3      	adds	r3, r2, r3
 800926c:	4a34      	ldr	r2, [pc, #208]	; (8009340 <USB_EPStartXfer+0x700>)
 800926e:	4694      	mov	ip, r2
 8009270:	4463      	add	r3, ip
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009274:	1d7b      	adds	r3, r7, #5
 8009276:	33ff      	adds	r3, #255	; 0xff
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	b29a      	uxth	r2, r3
 800927c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800927e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009280:	2076      	movs	r0, #118	; 0x76
 8009282:	183b      	adds	r3, r7, r0
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	8952      	ldrh	r2, [r2, #10]
 8009288:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	6959      	ldr	r1, [r3, #20]
 800928e:	1d7b      	adds	r3, r7, #5
 8009290:	33ff      	adds	r3, #255	; 0xff
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	b29c      	uxth	r4, r3
 8009296:	183b      	adds	r3, r7, r0
 8009298:	881a      	ldrh	r2, [r3, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	0023      	movs	r3, r4
 800929e:	f000 fec3 	bl	800a028 <USB_WritePMA>
 80092a2:	e1a2      	b.n	80095ea <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	1d7a      	adds	r2, r7, #5
 80092aa:	32ff      	adds	r2, #255	; 0xff
 80092ac:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	18d3      	adds	r3, r2, r3
 80092b8:	881b      	ldrh	r3, [r3, #0]
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	2062      	movs	r0, #98	; 0x62
 80092be:	183b      	adds	r3, r7, r0
 80092c0:	4920      	ldr	r1, [pc, #128]	; (8009344 <USB_EPStartXfer+0x704>)
 80092c2:	400a      	ands	r2, r1
 80092c4:	801a      	strh	r2, [r3, #0]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	18d3      	adds	r3, r2, r3
 80092d0:	183a      	adds	r2, r7, r0
 80092d2:	8812      	ldrh	r2, [r2, #0]
 80092d4:	491c      	ldr	r1, [pc, #112]	; (8009348 <USB_EPStartXfer+0x708>)
 80092d6:	430a      	orrs	r2, r1
 80092d8:	b292      	uxth	r2, r2
 80092da:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2250      	movs	r2, #80	; 0x50
 80092e4:	5a9b      	ldrh	r3, [r3, r2]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	001a      	movs	r2, r3
 80092ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092ec:	189b      	adds	r3, r3, r2
 80092ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	00da      	lsls	r2, r3, #3
 80092f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092f8:	18d3      	adds	r3, r2, r3
 80092fa:	4a0e      	ldr	r2, [pc, #56]	; (8009334 <USB_EPStartXfer+0x6f4>)
 80092fc:	4694      	mov	ip, r2
 80092fe:	4463      	add	r3, ip
 8009300:	65bb      	str	r3, [r7, #88]	; 0x58
 8009302:	1d7b      	adds	r3, r7, #5
 8009304:	33ff      	adds	r3, #255	; 0xff
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	b29a      	uxth	r2, r3
 800930a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800930c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800930e:	2076      	movs	r0, #118	; 0x76
 8009310:	183b      	adds	r3, r7, r0
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	8912      	ldrh	r2, [r2, #8]
 8009316:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	6959      	ldr	r1, [r3, #20]
 800931c:	1d7b      	adds	r3, r7, #5
 800931e:	33ff      	adds	r3, #255	; 0xff
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	b29c      	uxth	r4, r3
 8009324:	183b      	adds	r3, r7, r0
 8009326:	881a      	ldrh	r2, [r3, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	0023      	movs	r3, r4
 800932c:	f000 fe7c 	bl	800a028 <USB_WritePMA>
 8009330:	e15b      	b.n	80095ea <USB_EPStartXfer+0x9aa>
 8009332:	46c0      	nop			; (mov r8, r8)
 8009334:	00000402 	.word	0x00000402
 8009338:	ffff83ff 	.word	0xffff83ff
 800933c:	ffff8000 	.word	0xffff8000
 8009340:	00000406 	.word	0x00000406
 8009344:	ffff8e8f 	.word	0xffff8e8f
 8009348:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	6a1a      	ldr	r2, [r3, #32]
 8009350:	1d7b      	adds	r3, r7, #5
 8009352:	33ff      	adds	r3, #255	; 0xff
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	1ad2      	subs	r2, r2, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	18d3      	adds	r3, r2, r3
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	b29b      	uxth	r3, r3
 800936a:	001a      	movs	r2, r3
 800936c:	2340      	movs	r3, #64	; 0x40
 800936e:	4013      	ands	r3, r2
 8009370:	d100      	bne.n	8009374 <USB_EPStartXfer+0x734>
 8009372:	e099      	b.n	80094a8 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	673b      	str	r3, [r7, #112]	; 0x70
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d166      	bne.n	800944e <USB_EPStartXfer+0x80e>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	66bb      	str	r3, [r7, #104]	; 0x68
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2250      	movs	r2, #80	; 0x50
 8009388:	5a9b      	ldrh	r3, [r3, r2]
 800938a:	b29b      	uxth	r3, r3
 800938c:	001a      	movs	r2, r3
 800938e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009390:	189b      	adds	r3, r3, r2
 8009392:	66bb      	str	r3, [r7, #104]	; 0x68
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	00da      	lsls	r2, r3, #3
 800939a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800939c:	18d3      	adds	r3, r2, r3
 800939e:	4ad0      	ldr	r2, [pc, #832]	; (80096e0 <USB_EPStartXfer+0xaa0>)
 80093a0:	4694      	mov	ip, r2
 80093a2:	4463      	add	r3, ip
 80093a4:	667b      	str	r3, [r7, #100]	; 0x64
 80093a6:	1d7b      	adds	r3, r7, #5
 80093a8:	33ff      	adds	r3, #255	; 0xff
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d110      	bne.n	80093d2 <USB_EPStartXfer+0x792>
 80093b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4acb      	ldr	r2, [pc, #812]	; (80096e4 <USB_EPStartXfer+0xaa4>)
 80093b8:	4013      	ands	r3, r2
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093be:	801a      	strh	r2, [r3, #0]
 80093c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	4ac8      	ldr	r2, [pc, #800]	; (80096e8 <USB_EPStartXfer+0xaa8>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ce:	801a      	strh	r2, [r3, #0]
 80093d0:	e058      	b.n	8009484 <USB_EPStartXfer+0x844>
 80093d2:	1d7b      	adds	r3, r7, #5
 80093d4:	33ff      	adds	r3, #255	; 0xff
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b3e      	cmp	r3, #62	; 0x3e
 80093da:	d81a      	bhi.n	8009412 <USB_EPStartXfer+0x7d2>
 80093dc:	1d7b      	adds	r3, r7, #5
 80093de:	33ff      	adds	r3, #255	; 0xff
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	085b      	lsrs	r3, r3, #1
 80093e4:	21f0      	movs	r1, #240	; 0xf0
 80093e6:	187a      	adds	r2, r7, r1
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	1d7b      	adds	r3, r7, #5
 80093ec:	33ff      	adds	r3, #255	; 0xff
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2201      	movs	r2, #1
 80093f2:	4013      	ands	r3, r2
 80093f4:	d004      	beq.n	8009400 <USB_EPStartXfer+0x7c0>
 80093f6:	187b      	adds	r3, r7, r1
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	187a      	adds	r2, r7, r1
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	23f0      	movs	r3, #240	; 0xf0
 8009402:	18fb      	adds	r3, r7, r3
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
 8009408:	029b      	lsls	r3, r3, #10
 800940a:	b29a      	uxth	r2, r3
 800940c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	e038      	b.n	8009484 <USB_EPStartXfer+0x844>
 8009412:	1d7b      	adds	r3, r7, #5
 8009414:	33ff      	adds	r3, #255	; 0xff
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	095b      	lsrs	r3, r3, #5
 800941a:	21f0      	movs	r1, #240	; 0xf0
 800941c:	187a      	adds	r2, r7, r1
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	1d7b      	adds	r3, r7, #5
 8009422:	33ff      	adds	r3, #255	; 0xff
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	221f      	movs	r2, #31
 8009428:	4013      	ands	r3, r2
 800942a:	d104      	bne.n	8009436 <USB_EPStartXfer+0x7f6>
 800942c:	187b      	adds	r3, r7, r1
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3b01      	subs	r3, #1
 8009432:	187a      	adds	r2, r7, r1
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	23f0      	movs	r3, #240	; 0xf0
 8009438:	18fb      	adds	r3, r7, r3
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	b29b      	uxth	r3, r3
 800943e:	029b      	lsls	r3, r3, #10
 8009440:	b29b      	uxth	r3, r3
 8009442:	4aa9      	ldr	r2, [pc, #676]	; (80096e8 <USB_EPStartXfer+0xaa8>)
 8009444:	4313      	orrs	r3, r2
 8009446:	b29a      	uxth	r2, r3
 8009448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800944a:	801a      	strh	r2, [r3, #0]
 800944c:	e01a      	b.n	8009484 <USB_EPStartXfer+0x844>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	785b      	ldrb	r3, [r3, #1]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d116      	bne.n	8009484 <USB_EPStartXfer+0x844>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2250      	movs	r2, #80	; 0x50
 800945a:	5a9b      	ldrh	r3, [r3, r2]
 800945c:	b29b      	uxth	r3, r3
 800945e:	001a      	movs	r2, r3
 8009460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009462:	189b      	adds	r3, r3, r2
 8009464:	673b      	str	r3, [r7, #112]	; 0x70
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	00da      	lsls	r2, r3, #3
 800946c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800946e:	18d3      	adds	r3, r2, r3
 8009470:	4a9b      	ldr	r2, [pc, #620]	; (80096e0 <USB_EPStartXfer+0xaa0>)
 8009472:	4694      	mov	ip, r2
 8009474:	4463      	add	r3, ip
 8009476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009478:	1d7b      	adds	r3, r7, #5
 800947a:	33ff      	adds	r3, #255	; 0xff
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	b29a      	uxth	r2, r3
 8009480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009482:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009484:	2076      	movs	r0, #118	; 0x76
 8009486:	183b      	adds	r3, r7, r0
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	8952      	ldrh	r2, [r2, #10]
 800948c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6959      	ldr	r1, [r3, #20]
 8009492:	1d7b      	adds	r3, r7, #5
 8009494:	33ff      	adds	r3, #255	; 0xff
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	b29c      	uxth	r4, r3
 800949a:	183b      	adds	r3, r7, r0
 800949c:	881a      	ldrh	r2, [r3, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	0023      	movs	r3, r4
 80094a2:	f000 fdc1 	bl	800a028 <USB_WritePMA>
 80094a6:	e0a0      	b.n	80095ea <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	785b      	ldrb	r3, [r3, #1]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d166      	bne.n	800957e <USB_EPStartXfer+0x93e>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2250      	movs	r2, #80	; 0x50
 80094b8:	5a9b      	ldrh	r3, [r3, r2]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	001a      	movs	r2, r3
 80094be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094c0:	189b      	adds	r3, r3, r2
 80094c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	00da      	lsls	r2, r3, #3
 80094ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094cc:	18d3      	adds	r3, r2, r3
 80094ce:	4a87      	ldr	r2, [pc, #540]	; (80096ec <USB_EPStartXfer+0xaac>)
 80094d0:	4694      	mov	ip, r2
 80094d2:	4463      	add	r3, ip
 80094d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80094d6:	1d7b      	adds	r3, r7, #5
 80094d8:	33ff      	adds	r3, #255	; 0xff
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d110      	bne.n	8009502 <USB_EPStartXfer+0x8c2>
 80094e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	4a7f      	ldr	r2, [pc, #508]	; (80096e4 <USB_EPStartXfer+0xaa4>)
 80094e8:	4013      	ands	r3, r2
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ee:	801a      	strh	r2, [r3, #0]
 80094f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094f2:	881b      	ldrh	r3, [r3, #0]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	4a7c      	ldr	r2, [pc, #496]	; (80096e8 <USB_EPStartXfer+0xaa8>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094fe:	801a      	strh	r2, [r3, #0]
 8009500:	e062      	b.n	80095c8 <USB_EPStartXfer+0x988>
 8009502:	1d7b      	adds	r3, r7, #5
 8009504:	33ff      	adds	r3, #255	; 0xff
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b3e      	cmp	r3, #62	; 0x3e
 800950a:	d81a      	bhi.n	8009542 <USB_EPStartXfer+0x902>
 800950c:	1d7b      	adds	r3, r7, #5
 800950e:	33ff      	adds	r3, #255	; 0xff
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	085b      	lsrs	r3, r3, #1
 8009514:	21ec      	movs	r1, #236	; 0xec
 8009516:	187a      	adds	r2, r7, r1
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	1d7b      	adds	r3, r7, #5
 800951c:	33ff      	adds	r3, #255	; 0xff
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2201      	movs	r2, #1
 8009522:	4013      	ands	r3, r2
 8009524:	d004      	beq.n	8009530 <USB_EPStartXfer+0x8f0>
 8009526:	187b      	adds	r3, r7, r1
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	3301      	adds	r3, #1
 800952c:	187a      	adds	r2, r7, r1
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	23ec      	movs	r3, #236	; 0xec
 8009532:	18fb      	adds	r3, r7, r3
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	b29b      	uxth	r3, r3
 8009538:	029b      	lsls	r3, r3, #10
 800953a:	b29a      	uxth	r2, r3
 800953c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800953e:	801a      	strh	r2, [r3, #0]
 8009540:	e042      	b.n	80095c8 <USB_EPStartXfer+0x988>
 8009542:	1d7b      	adds	r3, r7, #5
 8009544:	33ff      	adds	r3, #255	; 0xff
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	095b      	lsrs	r3, r3, #5
 800954a:	21ec      	movs	r1, #236	; 0xec
 800954c:	187a      	adds	r2, r7, r1
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	1d7b      	adds	r3, r7, #5
 8009552:	33ff      	adds	r3, #255	; 0xff
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	221f      	movs	r2, #31
 8009558:	4013      	ands	r3, r2
 800955a:	d104      	bne.n	8009566 <USB_EPStartXfer+0x926>
 800955c:	187b      	adds	r3, r7, r1
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3b01      	subs	r3, #1
 8009562:	187a      	adds	r2, r7, r1
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	23ec      	movs	r3, #236	; 0xec
 8009568:	18fb      	adds	r3, r7, r3
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	b29b      	uxth	r3, r3
 800956e:	029b      	lsls	r3, r3, #10
 8009570:	b29b      	uxth	r3, r3
 8009572:	4a5d      	ldr	r2, [pc, #372]	; (80096e8 <USB_EPStartXfer+0xaa8>)
 8009574:	4313      	orrs	r3, r2
 8009576:	b29a      	uxth	r2, r3
 8009578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800957a:	801a      	strh	r2, [r3, #0]
 800957c:	e024      	b.n	80095c8 <USB_EPStartXfer+0x988>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	785b      	ldrb	r3, [r3, #1]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d120      	bne.n	80095c8 <USB_EPStartXfer+0x988>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2184      	movs	r1, #132	; 0x84
 800958a:	187a      	adds	r2, r7, r1
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2250      	movs	r2, #80	; 0x50
 8009592:	5a9b      	ldrh	r3, [r3, r2]
 8009594:	b29b      	uxth	r3, r3
 8009596:	001a      	movs	r2, r3
 8009598:	187b      	adds	r3, r7, r1
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	189b      	adds	r3, r3, r2
 800959e:	187a      	adds	r2, r7, r1
 80095a0:	6013      	str	r3, [r2, #0]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	00da      	lsls	r2, r3, #3
 80095a8:	187b      	adds	r3, r7, r1
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	18d3      	adds	r3, r2, r3
 80095ae:	4a4f      	ldr	r2, [pc, #316]	; (80096ec <USB_EPStartXfer+0xaac>)
 80095b0:	4694      	mov	ip, r2
 80095b2:	4463      	add	r3, ip
 80095b4:	2180      	movs	r1, #128	; 0x80
 80095b6:	187a      	adds	r2, r7, r1
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	1d7b      	adds	r3, r7, #5
 80095bc:	33ff      	adds	r3, #255	; 0xff
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	187b      	adds	r3, r7, r1
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80095c8:	2076      	movs	r0, #118	; 0x76
 80095ca:	183b      	adds	r3, r7, r0
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	8912      	ldrh	r2, [r2, #8]
 80095d0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	6959      	ldr	r1, [r3, #20]
 80095d6:	1d7b      	adds	r3, r7, #5
 80095d8:	33ff      	adds	r3, #255	; 0xff
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	b29c      	uxth	r4, r3
 80095de:	183b      	adds	r3, r7, r0
 80095e0:	881a      	ldrh	r2, [r3, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	0023      	movs	r3, r4
 80095e6:	f000 fd1f 	bl	800a028 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	18d3      	adds	r3, r2, r3
 80095f4:	881b      	ldrh	r3, [r3, #0]
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	200a      	movs	r0, #10
 80095fa:	183b      	adds	r3, r7, r0
 80095fc:	493c      	ldr	r1, [pc, #240]	; (80096f0 <USB_EPStartXfer+0xab0>)
 80095fe:	400a      	ands	r2, r1
 8009600:	801a      	strh	r2, [r3, #0]
 8009602:	183b      	adds	r3, r7, r0
 8009604:	183a      	adds	r2, r7, r0
 8009606:	8812      	ldrh	r2, [r2, #0]
 8009608:	2110      	movs	r1, #16
 800960a:	404a      	eors	r2, r1
 800960c:	801a      	strh	r2, [r3, #0]
 800960e:	183b      	adds	r3, r7, r0
 8009610:	183a      	adds	r2, r7, r0
 8009612:	8812      	ldrh	r2, [r2, #0]
 8009614:	2120      	movs	r1, #32
 8009616:	404a      	eors	r2, r1
 8009618:	801a      	strh	r2, [r3, #0]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	18d3      	adds	r3, r2, r3
 8009624:	183a      	adds	r2, r7, r0
 8009626:	8812      	ldrh	r2, [r2, #0]
 8009628:	4932      	ldr	r1, [pc, #200]	; (80096f4 <USB_EPStartXfer+0xab4>)
 800962a:	430a      	orrs	r2, r1
 800962c:	b292      	uxth	r2, r2
 800962e:	801a      	strh	r2, [r3, #0]
 8009630:	f000 fbaf 	bl	8009d92 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	7b1b      	ldrb	r3, [r3, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d000      	beq.n	800963e <USB_EPStartXfer+0x9fe>
 800963c:	e09e      	b.n	800977c <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	429a      	cmp	r2, r3
 8009648:	d90d      	bls.n	8009666 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	1d7a      	adds	r2, r7, #5
 8009650:	32ff      	adds	r2, #255	; 0xff
 8009652:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	699a      	ldr	r2, [r3, #24]
 8009658:	1d7b      	adds	r3, r7, #5
 800965a:	33ff      	adds	r3, #255	; 0xff
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	1ad2      	subs	r2, r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	619a      	str	r2, [r3, #24]
 8009664:	e007      	b.n	8009676 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	1d7a      	adds	r2, r7, #5
 800966c:	32ff      	adds	r2, #255	; 0xff
 800966e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2200      	movs	r2, #0
 8009674:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2190      	movs	r1, #144	; 0x90
 800967a:	187a      	adds	r2, r7, r1
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2250      	movs	r2, #80	; 0x50
 8009682:	5a9b      	ldrh	r3, [r3, r2]
 8009684:	b29b      	uxth	r3, r3
 8009686:	001a      	movs	r2, r3
 8009688:	187b      	adds	r3, r7, r1
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	189b      	adds	r3, r3, r2
 800968e:	187a      	adds	r2, r7, r1
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	00da      	lsls	r2, r3, #3
 8009698:	187b      	adds	r3, r7, r1
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	18d3      	adds	r3, r2, r3
 800969e:	4a10      	ldr	r2, [pc, #64]	; (80096e0 <USB_EPStartXfer+0xaa0>)
 80096a0:	4694      	mov	ip, r2
 80096a2:	4463      	add	r3, ip
 80096a4:	218c      	movs	r1, #140	; 0x8c
 80096a6:	187a      	adds	r2, r7, r1
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	1d7b      	adds	r3, r7, #5
 80096ac:	33ff      	adds	r3, #255	; 0xff
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d121      	bne.n	80096f8 <USB_EPStartXfer+0xab8>
 80096b4:	187b      	adds	r3, r7, r1
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	881b      	ldrh	r3, [r3, #0]
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	4a09      	ldr	r2, [pc, #36]	; (80096e4 <USB_EPStartXfer+0xaa4>)
 80096be:	4013      	ands	r3, r2
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	187b      	adds	r3, r7, r1
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	801a      	strh	r2, [r3, #0]
 80096c8:	187b      	adds	r3, r7, r1
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	4a05      	ldr	r2, [pc, #20]	; (80096e8 <USB_EPStartXfer+0xaa8>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	187b      	adds	r3, r7, r1
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	801a      	strh	r2, [r3, #0]
 80096dc:	e334      	b.n	8009d48 <USB_EPStartXfer+0x1108>
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	00000406 	.word	0x00000406
 80096e4:	ffff83ff 	.word	0xffff83ff
 80096e8:	ffff8000 	.word	0xffff8000
 80096ec:	00000402 	.word	0x00000402
 80096f0:	ffff8fbf 	.word	0xffff8fbf
 80096f4:	ffff8080 	.word	0xffff8080
 80096f8:	1d7b      	adds	r3, r7, #5
 80096fa:	33ff      	adds	r3, #255	; 0xff
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009700:	d81c      	bhi.n	800973c <USB_EPStartXfer+0xafc>
 8009702:	1d7b      	adds	r3, r7, #5
 8009704:	33ff      	adds	r3, #255	; 0xff
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	085b      	lsrs	r3, r3, #1
 800970a:	21e8      	movs	r1, #232	; 0xe8
 800970c:	187a      	adds	r2, r7, r1
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	1d7b      	adds	r3, r7, #5
 8009712:	33ff      	adds	r3, #255	; 0xff
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2201      	movs	r2, #1
 8009718:	4013      	ands	r3, r2
 800971a:	d004      	beq.n	8009726 <USB_EPStartXfer+0xae6>
 800971c:	187b      	adds	r3, r7, r1
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3301      	adds	r3, #1
 8009722:	187a      	adds	r2, r7, r1
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	23e8      	movs	r3, #232	; 0xe8
 8009728:	18fb      	adds	r3, r7, r3
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	b29b      	uxth	r3, r3
 800972e:	029b      	lsls	r3, r3, #10
 8009730:	b29a      	uxth	r2, r3
 8009732:	238c      	movs	r3, #140	; 0x8c
 8009734:	18fb      	adds	r3, r7, r3
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	801a      	strh	r2, [r3, #0]
 800973a:	e305      	b.n	8009d48 <USB_EPStartXfer+0x1108>
 800973c:	1d7b      	adds	r3, r7, #5
 800973e:	33ff      	adds	r3, #255	; 0xff
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	095b      	lsrs	r3, r3, #5
 8009744:	21e8      	movs	r1, #232	; 0xe8
 8009746:	187a      	adds	r2, r7, r1
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	1d7b      	adds	r3, r7, #5
 800974c:	33ff      	adds	r3, #255	; 0xff
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	221f      	movs	r2, #31
 8009752:	4013      	ands	r3, r2
 8009754:	d104      	bne.n	8009760 <USB_EPStartXfer+0xb20>
 8009756:	187b      	adds	r3, r7, r1
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	3b01      	subs	r3, #1
 800975c:	187a      	adds	r2, r7, r1
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	23e8      	movs	r3, #232	; 0xe8
 8009762:	18fb      	adds	r3, r7, r3
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	b29b      	uxth	r3, r3
 8009768:	029b      	lsls	r3, r3, #10
 800976a:	b29b      	uxth	r3, r3
 800976c:	4aca      	ldr	r2, [pc, #808]	; (8009a98 <USB_EPStartXfer+0xe58>)
 800976e:	4313      	orrs	r3, r2
 8009770:	b29a      	uxth	r2, r3
 8009772:	238c      	movs	r3, #140	; 0x8c
 8009774:	18fb      	adds	r3, r7, r3
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	801a      	strh	r2, [r3, #0]
 800977a:	e2e5      	b.n	8009d48 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	78db      	ldrb	r3, [r3, #3]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d000      	beq.n	8009786 <USB_EPStartXfer+0xb46>
 8009784:	e16f      	b.n	8009a66 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	785b      	ldrb	r3, [r3, #1]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d16f      	bne.n	800986e <USB_EPStartXfer+0xc2e>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	21ac      	movs	r1, #172	; 0xac
 8009792:	187a      	adds	r2, r7, r1
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2250      	movs	r2, #80	; 0x50
 800979a:	5a9b      	ldrh	r3, [r3, r2]
 800979c:	b29b      	uxth	r3, r3
 800979e:	001a      	movs	r2, r3
 80097a0:	187b      	adds	r3, r7, r1
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	189b      	adds	r3, r3, r2
 80097a6:	187a      	adds	r2, r7, r1
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	00da      	lsls	r2, r3, #3
 80097b0:	187b      	adds	r3, r7, r1
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	18d3      	adds	r3, r2, r3
 80097b6:	4ab9      	ldr	r2, [pc, #740]	; (8009a9c <USB_EPStartXfer+0xe5c>)
 80097b8:	4694      	mov	ip, r2
 80097ba:	4463      	add	r3, ip
 80097bc:	21a8      	movs	r1, #168	; 0xa8
 80097be:	187a      	adds	r2, r7, r1
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d114      	bne.n	80097f4 <USB_EPStartXfer+0xbb4>
 80097ca:	187b      	adds	r3, r7, r1
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	4ab3      	ldr	r2, [pc, #716]	; (8009aa0 <USB_EPStartXfer+0xe60>)
 80097d4:	4013      	ands	r3, r2
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	187b      	adds	r3, r7, r1
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	801a      	strh	r2, [r3, #0]
 80097de:	187b      	adds	r3, r7, r1
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	4aac      	ldr	r2, [pc, #688]	; (8009a98 <USB_EPStartXfer+0xe58>)
 80097e8:	4313      	orrs	r3, r2
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	187b      	adds	r3, r7, r1
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	801a      	strh	r2, [r3, #0]
 80097f2:	e060      	b.n	80098b6 <USB_EPStartXfer+0xc76>
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	2b3e      	cmp	r3, #62	; 0x3e
 80097fa:	d81a      	bhi.n	8009832 <USB_EPStartXfer+0xbf2>
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	085b      	lsrs	r3, r3, #1
 8009802:	21e4      	movs	r1, #228	; 0xe4
 8009804:	187a      	adds	r2, r7, r1
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	2201      	movs	r2, #1
 800980e:	4013      	ands	r3, r2
 8009810:	d004      	beq.n	800981c <USB_EPStartXfer+0xbdc>
 8009812:	187b      	adds	r3, r7, r1
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3301      	adds	r3, #1
 8009818:	187a      	adds	r2, r7, r1
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	23e4      	movs	r3, #228	; 0xe4
 800981e:	18fb      	adds	r3, r7, r3
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	b29b      	uxth	r3, r3
 8009824:	029b      	lsls	r3, r3, #10
 8009826:	b29a      	uxth	r2, r3
 8009828:	23a8      	movs	r3, #168	; 0xa8
 800982a:	18fb      	adds	r3, r7, r3
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	801a      	strh	r2, [r3, #0]
 8009830:	e041      	b.n	80098b6 <USB_EPStartXfer+0xc76>
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	095b      	lsrs	r3, r3, #5
 8009838:	21e4      	movs	r1, #228	; 0xe4
 800983a:	187a      	adds	r2, r7, r1
 800983c:	6013      	str	r3, [r2, #0]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	221f      	movs	r2, #31
 8009844:	4013      	ands	r3, r2
 8009846:	d104      	bne.n	8009852 <USB_EPStartXfer+0xc12>
 8009848:	187b      	adds	r3, r7, r1
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3b01      	subs	r3, #1
 800984e:	187a      	adds	r2, r7, r1
 8009850:	6013      	str	r3, [r2, #0]
 8009852:	23e4      	movs	r3, #228	; 0xe4
 8009854:	18fb      	adds	r3, r7, r3
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	b29b      	uxth	r3, r3
 800985a:	029b      	lsls	r3, r3, #10
 800985c:	b29b      	uxth	r3, r3
 800985e:	4a8e      	ldr	r2, [pc, #568]	; (8009a98 <USB_EPStartXfer+0xe58>)
 8009860:	4313      	orrs	r3, r2
 8009862:	b29a      	uxth	r2, r3
 8009864:	23a8      	movs	r3, #168	; 0xa8
 8009866:	18fb      	adds	r3, r7, r3
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	801a      	strh	r2, [r3, #0]
 800986c:	e023      	b.n	80098b6 <USB_EPStartXfer+0xc76>
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	785b      	ldrb	r3, [r3, #1]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d11f      	bne.n	80098b6 <USB_EPStartXfer+0xc76>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	21b4      	movs	r1, #180	; 0xb4
 800987a:	187a      	adds	r2, r7, r1
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2250      	movs	r2, #80	; 0x50
 8009882:	5a9b      	ldrh	r3, [r3, r2]
 8009884:	b29b      	uxth	r3, r3
 8009886:	001a      	movs	r2, r3
 8009888:	187b      	adds	r3, r7, r1
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	189b      	adds	r3, r3, r2
 800988e:	187a      	adds	r2, r7, r1
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	00da      	lsls	r2, r3, #3
 8009898:	187b      	adds	r3, r7, r1
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	18d3      	adds	r3, r2, r3
 800989e:	4a7f      	ldr	r2, [pc, #508]	; (8009a9c <USB_EPStartXfer+0xe5c>)
 80098a0:	4694      	mov	ip, r2
 80098a2:	4463      	add	r3, ip
 80098a4:	21b0      	movs	r1, #176	; 0xb0
 80098a6:	187a      	adds	r2, r7, r1
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	187b      	adds	r3, r7, r1
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	801a      	strh	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	22a4      	movs	r2, #164	; 0xa4
 80098ba:	18ba      	adds	r2, r7, r2
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	785b      	ldrb	r3, [r3, #1]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d16f      	bne.n	80099a6 <USB_EPStartXfer+0xd66>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	219c      	movs	r1, #156	; 0x9c
 80098ca:	187a      	adds	r2, r7, r1
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2250      	movs	r2, #80	; 0x50
 80098d2:	5a9b      	ldrh	r3, [r3, r2]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	001a      	movs	r2, r3
 80098d8:	187b      	adds	r3, r7, r1
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	189b      	adds	r3, r3, r2
 80098de:	187a      	adds	r2, r7, r1
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	00da      	lsls	r2, r3, #3
 80098e8:	187b      	adds	r3, r7, r1
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	18d3      	adds	r3, r2, r3
 80098ee:	4a6d      	ldr	r2, [pc, #436]	; (8009aa4 <USB_EPStartXfer+0xe64>)
 80098f0:	4694      	mov	ip, r2
 80098f2:	4463      	add	r3, ip
 80098f4:	2198      	movs	r1, #152	; 0x98
 80098f6:	187a      	adds	r2, r7, r1
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d114      	bne.n	800992c <USB_EPStartXfer+0xcec>
 8009902:	187b      	adds	r3, r7, r1
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	b29b      	uxth	r3, r3
 800990a:	4a65      	ldr	r2, [pc, #404]	; (8009aa0 <USB_EPStartXfer+0xe60>)
 800990c:	4013      	ands	r3, r2
 800990e:	b29a      	uxth	r2, r3
 8009910:	187b      	adds	r3, r7, r1
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	801a      	strh	r2, [r3, #0]
 8009916:	187b      	adds	r3, r7, r1
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	4a5e      	ldr	r2, [pc, #376]	; (8009a98 <USB_EPStartXfer+0xe58>)
 8009920:	4313      	orrs	r3, r2
 8009922:	b29a      	uxth	r2, r3
 8009924:	187b      	adds	r3, r7, r1
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	801a      	strh	r2, [r3, #0]
 800992a:	e05d      	b.n	80099e8 <USB_EPStartXfer+0xda8>
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	2b3e      	cmp	r3, #62	; 0x3e
 8009932:	d81a      	bhi.n	800996a <USB_EPStartXfer+0xd2a>
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	085b      	lsrs	r3, r3, #1
 800993a:	21e0      	movs	r1, #224	; 0xe0
 800993c:	187a      	adds	r2, r7, r1
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	2201      	movs	r2, #1
 8009946:	4013      	ands	r3, r2
 8009948:	d004      	beq.n	8009954 <USB_EPStartXfer+0xd14>
 800994a:	187b      	adds	r3, r7, r1
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3301      	adds	r3, #1
 8009950:	187a      	adds	r2, r7, r1
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	23e0      	movs	r3, #224	; 0xe0
 8009956:	18fb      	adds	r3, r7, r3
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	b29b      	uxth	r3, r3
 800995c:	029b      	lsls	r3, r3, #10
 800995e:	b29a      	uxth	r2, r3
 8009960:	2398      	movs	r3, #152	; 0x98
 8009962:	18fb      	adds	r3, r7, r3
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	801a      	strh	r2, [r3, #0]
 8009968:	e03e      	b.n	80099e8 <USB_EPStartXfer+0xda8>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	095b      	lsrs	r3, r3, #5
 8009970:	21e0      	movs	r1, #224	; 0xe0
 8009972:	187a      	adds	r2, r7, r1
 8009974:	6013      	str	r3, [r2, #0]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	221f      	movs	r2, #31
 800997c:	4013      	ands	r3, r2
 800997e:	d104      	bne.n	800998a <USB_EPStartXfer+0xd4a>
 8009980:	187b      	adds	r3, r7, r1
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3b01      	subs	r3, #1
 8009986:	187a      	adds	r2, r7, r1
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	23e0      	movs	r3, #224	; 0xe0
 800998c:	18fb      	adds	r3, r7, r3
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	b29b      	uxth	r3, r3
 8009992:	029b      	lsls	r3, r3, #10
 8009994:	b29b      	uxth	r3, r3
 8009996:	4a40      	ldr	r2, [pc, #256]	; (8009a98 <USB_EPStartXfer+0xe58>)
 8009998:	4313      	orrs	r3, r2
 800999a:	b29a      	uxth	r2, r3
 800999c:	2398      	movs	r3, #152	; 0x98
 800999e:	18fb      	adds	r3, r7, r3
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	801a      	strh	r2, [r3, #0]
 80099a4:	e020      	b.n	80099e8 <USB_EPStartXfer+0xda8>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	785b      	ldrb	r3, [r3, #1]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d11c      	bne.n	80099e8 <USB_EPStartXfer+0xda8>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2250      	movs	r2, #80	; 0x50
 80099b2:	5a9b      	ldrh	r3, [r3, r2]
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	001a      	movs	r2, r3
 80099b8:	21a4      	movs	r1, #164	; 0xa4
 80099ba:	187b      	adds	r3, r7, r1
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	189b      	adds	r3, r3, r2
 80099c0:	187a      	adds	r2, r7, r1
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	00da      	lsls	r2, r3, #3
 80099ca:	187b      	adds	r3, r7, r1
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	18d3      	adds	r3, r2, r3
 80099d0:	4a34      	ldr	r2, [pc, #208]	; (8009aa4 <USB_EPStartXfer+0xe64>)
 80099d2:	4694      	mov	ip, r2
 80099d4:	4463      	add	r3, ip
 80099d6:	21a0      	movs	r1, #160	; 0xa0
 80099d8:	187a      	adds	r2, r7, r1
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	187b      	adds	r3, r7, r1
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	69db      	ldr	r3, [r3, #28]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d100      	bne.n	80099f2 <USB_EPStartXfer+0xdb2>
 80099f0:	e1aa      	b.n	8009d48 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	18d2      	adds	r2, r2, r3
 80099fc:	2196      	movs	r1, #150	; 0x96
 80099fe:	187b      	adds	r3, r7, r1
 8009a00:	8812      	ldrh	r2, [r2, #0]
 8009a02:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a04:	187b      	adds	r3, r7, r1
 8009a06:	881a      	ldrh	r2, [r3, #0]
 8009a08:	2380      	movs	r3, #128	; 0x80
 8009a0a:	01db      	lsls	r3, r3, #7
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	d004      	beq.n	8009a1a <USB_EPStartXfer+0xdda>
 8009a10:	187b      	adds	r3, r7, r1
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	2240      	movs	r2, #64	; 0x40
 8009a16:	4013      	ands	r3, r2
 8009a18:	d10d      	bne.n	8009a36 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a1a:	2196      	movs	r1, #150	; 0x96
 8009a1c:	187b      	adds	r3, r7, r1
 8009a1e:	881a      	ldrh	r2, [r3, #0]
 8009a20:	2380      	movs	r3, #128	; 0x80
 8009a22:	01db      	lsls	r3, r3, #7
 8009a24:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a26:	d000      	beq.n	8009a2a <USB_EPStartXfer+0xdea>
 8009a28:	e18e      	b.n	8009d48 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a2a:	187b      	adds	r3, r7, r1
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	2240      	movs	r2, #64	; 0x40
 8009a30:	4013      	ands	r3, r2
 8009a32:	d000      	beq.n	8009a36 <USB_EPStartXfer+0xdf6>
 8009a34:	e188      	b.n	8009d48 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	18d3      	adds	r3, r2, r3
 8009a40:	881b      	ldrh	r3, [r3, #0]
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	2094      	movs	r0, #148	; 0x94
 8009a46:	183b      	adds	r3, r7, r0
 8009a48:	4917      	ldr	r1, [pc, #92]	; (8009aa8 <USB_EPStartXfer+0xe68>)
 8009a4a:	400a      	ands	r2, r1
 8009a4c:	801a      	strh	r2, [r3, #0]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	18d3      	adds	r3, r2, r3
 8009a58:	183a      	adds	r2, r7, r0
 8009a5a:	8812      	ldrh	r2, [r2, #0]
 8009a5c:	4913      	ldr	r1, [pc, #76]	; (8009aac <USB_EPStartXfer+0xe6c>)
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	b292      	uxth	r2, r2
 8009a62:	801a      	strh	r2, [r3, #0]
 8009a64:	e170      	b.n	8009d48 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	78db      	ldrb	r3, [r3, #3]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d000      	beq.n	8009a70 <USB_EPStartXfer+0xe30>
 8009a6e:	e169      	b.n	8009d44 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	699a      	ldr	r2, [r3, #24]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d919      	bls.n	8009ab0 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	1d7a      	adds	r2, r7, #5
 8009a82:	32ff      	adds	r2, #255	; 0xff
 8009a84:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	699a      	ldr	r2, [r3, #24]
 8009a8a:	1d7b      	adds	r3, r7, #5
 8009a8c:	33ff      	adds	r3, #255	; 0xff
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	1ad2      	subs	r2, r2, r3
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	619a      	str	r2, [r3, #24]
 8009a96:	e013      	b.n	8009ac0 <USB_EPStartXfer+0xe80>
 8009a98:	ffff8000 	.word	0xffff8000
 8009a9c:	00000402 	.word	0x00000402
 8009aa0:	ffff83ff 	.word	0xffff83ff
 8009aa4:	00000406 	.word	0x00000406
 8009aa8:	ffff8f8f 	.word	0xffff8f8f
 8009aac:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	1d7a      	adds	r2, r7, #5
 8009ab6:	32ff      	adds	r2, #255	; 0xff
 8009ab8:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	2200      	movs	r2, #0
 8009abe:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	785b      	ldrb	r3, [r3, #1]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d000      	beq.n	8009aca <USB_EPStartXfer+0xe8a>
 8009ac8:	e075      	b.n	8009bb6 <USB_EPStartXfer+0xf76>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	21cc      	movs	r1, #204	; 0xcc
 8009ace:	187a      	adds	r2, r7, r1
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2250      	movs	r2, #80	; 0x50
 8009ad6:	5a9b      	ldrh	r3, [r3, r2]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	001a      	movs	r2, r3
 8009adc:	187b      	adds	r3, r7, r1
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	189b      	adds	r3, r3, r2
 8009ae2:	187a      	adds	r2, r7, r1
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	00da      	lsls	r2, r3, #3
 8009aec:	187b      	adds	r3, r7, r1
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	18d3      	adds	r3, r2, r3
 8009af2:	4aaa      	ldr	r2, [pc, #680]	; (8009d9c <USB_EPStartXfer+0x115c>)
 8009af4:	4694      	mov	ip, r2
 8009af6:	4463      	add	r3, ip
 8009af8:	21c8      	movs	r1, #200	; 0xc8
 8009afa:	187a      	adds	r2, r7, r1
 8009afc:	6013      	str	r3, [r2, #0]
 8009afe:	1d7b      	adds	r3, r7, #5
 8009b00:	33ff      	adds	r3, #255	; 0xff
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d114      	bne.n	8009b32 <USB_EPStartXfer+0xef2>
 8009b08:	187b      	adds	r3, r7, r1
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	4aa3      	ldr	r2, [pc, #652]	; (8009da0 <USB_EPStartXfer+0x1160>)
 8009b12:	4013      	ands	r3, r2
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	187b      	adds	r3, r7, r1
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	801a      	strh	r2, [r3, #0]
 8009b1c:	187b      	adds	r3, r7, r1
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	4a9f      	ldr	r2, [pc, #636]	; (8009da4 <USB_EPStartXfer+0x1164>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	187b      	adds	r3, r7, r1
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	801a      	strh	r2, [r3, #0]
 8009b30:	e066      	b.n	8009c00 <USB_EPStartXfer+0xfc0>
 8009b32:	1d7b      	adds	r3, r7, #5
 8009b34:	33ff      	adds	r3, #255	; 0xff
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b3e      	cmp	r3, #62	; 0x3e
 8009b3a:	d81c      	bhi.n	8009b76 <USB_EPStartXfer+0xf36>
 8009b3c:	1d7b      	adds	r3, r7, #5
 8009b3e:	33ff      	adds	r3, #255	; 0xff
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	085b      	lsrs	r3, r3, #1
 8009b44:	21dc      	movs	r1, #220	; 0xdc
 8009b46:	187a      	adds	r2, r7, r1
 8009b48:	6013      	str	r3, [r2, #0]
 8009b4a:	1d7b      	adds	r3, r7, #5
 8009b4c:	33ff      	adds	r3, #255	; 0xff
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2201      	movs	r2, #1
 8009b52:	4013      	ands	r3, r2
 8009b54:	d004      	beq.n	8009b60 <USB_EPStartXfer+0xf20>
 8009b56:	187b      	adds	r3, r7, r1
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	187a      	adds	r2, r7, r1
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	23dc      	movs	r3, #220	; 0xdc
 8009b62:	18fb      	adds	r3, r7, r3
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	029b      	lsls	r3, r3, #10
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	23c8      	movs	r3, #200	; 0xc8
 8009b6e:	18fb      	adds	r3, r7, r3
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	801a      	strh	r2, [r3, #0]
 8009b74:	e044      	b.n	8009c00 <USB_EPStartXfer+0xfc0>
 8009b76:	1d7b      	adds	r3, r7, #5
 8009b78:	33ff      	adds	r3, #255	; 0xff
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	095b      	lsrs	r3, r3, #5
 8009b7e:	21dc      	movs	r1, #220	; 0xdc
 8009b80:	187a      	adds	r2, r7, r1
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	1d7b      	adds	r3, r7, #5
 8009b86:	33ff      	adds	r3, #255	; 0xff
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	221f      	movs	r2, #31
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	d104      	bne.n	8009b9a <USB_EPStartXfer+0xf5a>
 8009b90:	187b      	adds	r3, r7, r1
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3b01      	subs	r3, #1
 8009b96:	187a      	adds	r2, r7, r1
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	23dc      	movs	r3, #220	; 0xdc
 8009b9c:	18fb      	adds	r3, r7, r3
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	029b      	lsls	r3, r3, #10
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	4a7f      	ldr	r2, [pc, #508]	; (8009da4 <USB_EPStartXfer+0x1164>)
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	23c8      	movs	r3, #200	; 0xc8
 8009bae:	18fb      	adds	r3, r7, r3
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	801a      	strh	r2, [r3, #0]
 8009bb4:	e024      	b.n	8009c00 <USB_EPStartXfer+0xfc0>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	785b      	ldrb	r3, [r3, #1]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d120      	bne.n	8009c00 <USB_EPStartXfer+0xfc0>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	21d4      	movs	r1, #212	; 0xd4
 8009bc2:	187a      	adds	r2, r7, r1
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2250      	movs	r2, #80	; 0x50
 8009bca:	5a9b      	ldrh	r3, [r3, r2]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	001a      	movs	r2, r3
 8009bd0:	187b      	adds	r3, r7, r1
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	189b      	adds	r3, r3, r2
 8009bd6:	187a      	adds	r2, r7, r1
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	00da      	lsls	r2, r3, #3
 8009be0:	187b      	adds	r3, r7, r1
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	18d3      	adds	r3, r2, r3
 8009be6:	4a6d      	ldr	r2, [pc, #436]	; (8009d9c <USB_EPStartXfer+0x115c>)
 8009be8:	4694      	mov	ip, r2
 8009bea:	4463      	add	r3, ip
 8009bec:	21d0      	movs	r1, #208	; 0xd0
 8009bee:	187a      	adds	r2, r7, r1
 8009bf0:	6013      	str	r3, [r2, #0]
 8009bf2:	1d7b      	adds	r3, r7, #5
 8009bf4:	33ff      	adds	r3, #255	; 0xff
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	187b      	adds	r3, r7, r1
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	801a      	strh	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	22c4      	movs	r2, #196	; 0xc4
 8009c04:	18ba      	adds	r2, r7, r2
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	785b      	ldrb	r3, [r3, #1]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d000      	beq.n	8009c12 <USB_EPStartXfer+0xfd2>
 8009c10:	e075      	b.n	8009cfe <USB_EPStartXfer+0x10be>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	21bc      	movs	r1, #188	; 0xbc
 8009c16:	187a      	adds	r2, r7, r1
 8009c18:	6013      	str	r3, [r2, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2250      	movs	r2, #80	; 0x50
 8009c1e:	5a9b      	ldrh	r3, [r3, r2]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	001a      	movs	r2, r3
 8009c24:	187b      	adds	r3, r7, r1
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	189b      	adds	r3, r3, r2
 8009c2a:	187a      	adds	r2, r7, r1
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	00da      	lsls	r2, r3, #3
 8009c34:	187b      	adds	r3, r7, r1
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	18d3      	adds	r3, r2, r3
 8009c3a:	4a5b      	ldr	r2, [pc, #364]	; (8009da8 <USB_EPStartXfer+0x1168>)
 8009c3c:	4694      	mov	ip, r2
 8009c3e:	4463      	add	r3, ip
 8009c40:	21b8      	movs	r1, #184	; 0xb8
 8009c42:	187a      	adds	r2, r7, r1
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	1d7b      	adds	r3, r7, #5
 8009c48:	33ff      	adds	r3, #255	; 0xff
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d114      	bne.n	8009c7a <USB_EPStartXfer+0x103a>
 8009c50:	187b      	adds	r3, r7, r1
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	4a51      	ldr	r2, [pc, #324]	; (8009da0 <USB_EPStartXfer+0x1160>)
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	187b      	adds	r3, r7, r1
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	801a      	strh	r2, [r3, #0]
 8009c64:	187b      	adds	r3, r7, r1
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	4a4d      	ldr	r2, [pc, #308]	; (8009da4 <USB_EPStartXfer+0x1164>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	187b      	adds	r3, r7, r1
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	801a      	strh	r2, [r3, #0]
 8009c78:	e066      	b.n	8009d48 <USB_EPStartXfer+0x1108>
 8009c7a:	1d7b      	adds	r3, r7, #5
 8009c7c:	33ff      	adds	r3, #255	; 0xff
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b3e      	cmp	r3, #62	; 0x3e
 8009c82:	d81c      	bhi.n	8009cbe <USB_EPStartXfer+0x107e>
 8009c84:	1d7b      	adds	r3, r7, #5
 8009c86:	33ff      	adds	r3, #255	; 0xff
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	085b      	lsrs	r3, r3, #1
 8009c8c:	21d8      	movs	r1, #216	; 0xd8
 8009c8e:	187a      	adds	r2, r7, r1
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	1d7b      	adds	r3, r7, #5
 8009c94:	33ff      	adds	r3, #255	; 0xff
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	d004      	beq.n	8009ca8 <USB_EPStartXfer+0x1068>
 8009c9e:	187b      	adds	r3, r7, r1
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	187a      	adds	r2, r7, r1
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	23d8      	movs	r3, #216	; 0xd8
 8009caa:	18fb      	adds	r3, r7, r3
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	029b      	lsls	r3, r3, #10
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	23b8      	movs	r3, #184	; 0xb8
 8009cb6:	18fb      	adds	r3, r7, r3
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	801a      	strh	r2, [r3, #0]
 8009cbc:	e044      	b.n	8009d48 <USB_EPStartXfer+0x1108>
 8009cbe:	1d7b      	adds	r3, r7, #5
 8009cc0:	33ff      	adds	r3, #255	; 0xff
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	095b      	lsrs	r3, r3, #5
 8009cc6:	21d8      	movs	r1, #216	; 0xd8
 8009cc8:	187a      	adds	r2, r7, r1
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	1d7b      	adds	r3, r7, #5
 8009cce:	33ff      	adds	r3, #255	; 0xff
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	221f      	movs	r2, #31
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	d104      	bne.n	8009ce2 <USB_EPStartXfer+0x10a2>
 8009cd8:	187b      	adds	r3, r7, r1
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	187a      	adds	r2, r7, r1
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	23d8      	movs	r3, #216	; 0xd8
 8009ce4:	18fb      	adds	r3, r7, r3
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	029b      	lsls	r3, r3, #10
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	4a2d      	ldr	r2, [pc, #180]	; (8009da4 <USB_EPStartXfer+0x1164>)
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	23b8      	movs	r3, #184	; 0xb8
 8009cf6:	18fb      	adds	r3, r7, r3
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	801a      	strh	r2, [r3, #0]
 8009cfc:	e024      	b.n	8009d48 <USB_EPStartXfer+0x1108>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	785b      	ldrb	r3, [r3, #1]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d120      	bne.n	8009d48 <USB_EPStartXfer+0x1108>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2250      	movs	r2, #80	; 0x50
 8009d0a:	5a9b      	ldrh	r3, [r3, r2]
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	001a      	movs	r2, r3
 8009d10:	21c4      	movs	r1, #196	; 0xc4
 8009d12:	187b      	adds	r3, r7, r1
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	189b      	adds	r3, r3, r2
 8009d18:	187a      	adds	r2, r7, r1
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	00da      	lsls	r2, r3, #3
 8009d22:	187b      	adds	r3, r7, r1
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	18d3      	adds	r3, r2, r3
 8009d28:	4a1f      	ldr	r2, [pc, #124]	; (8009da8 <USB_EPStartXfer+0x1168>)
 8009d2a:	4694      	mov	ip, r2
 8009d2c:	4463      	add	r3, ip
 8009d2e:	21c0      	movs	r1, #192	; 0xc0
 8009d30:	187a      	adds	r2, r7, r1
 8009d32:	6013      	str	r3, [r2, #0]
 8009d34:	1d7b      	adds	r3, r7, #5
 8009d36:	33ff      	adds	r3, #255	; 0xff
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	187b      	adds	r3, r7, r1
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	801a      	strh	r2, [r3, #0]
 8009d42:	e001      	b.n	8009d48 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e025      	b.n	8009d94 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	18d3      	adds	r3, r2, r3
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	208a      	movs	r0, #138	; 0x8a
 8009d58:	183b      	adds	r3, r7, r0
 8009d5a:	4914      	ldr	r1, [pc, #80]	; (8009dac <USB_EPStartXfer+0x116c>)
 8009d5c:	400a      	ands	r2, r1
 8009d5e:	801a      	strh	r2, [r3, #0]
 8009d60:	183b      	adds	r3, r7, r0
 8009d62:	183a      	adds	r2, r7, r0
 8009d64:	8812      	ldrh	r2, [r2, #0]
 8009d66:	2180      	movs	r1, #128	; 0x80
 8009d68:	0149      	lsls	r1, r1, #5
 8009d6a:	404a      	eors	r2, r1
 8009d6c:	801a      	strh	r2, [r3, #0]
 8009d6e:	183b      	adds	r3, r7, r0
 8009d70:	183a      	adds	r2, r7, r0
 8009d72:	8812      	ldrh	r2, [r2, #0]
 8009d74:	2180      	movs	r1, #128	; 0x80
 8009d76:	0189      	lsls	r1, r1, #6
 8009d78:	404a      	eors	r2, r1
 8009d7a:	801a      	strh	r2, [r3, #0]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	18d3      	adds	r3, r2, r3
 8009d86:	183a      	adds	r2, r7, r0
 8009d88:	8812      	ldrh	r2, [r2, #0]
 8009d8a:	4909      	ldr	r1, [pc, #36]	; (8009db0 <USB_EPStartXfer+0x1170>)
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	b292      	uxth	r2, r2
 8009d90:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	0018      	movs	r0, r3
 8009d96:	46bd      	mov	sp, r7
 8009d98:	b043      	add	sp, #268	; 0x10c
 8009d9a:	bd90      	pop	{r4, r7, pc}
 8009d9c:	00000402 	.word	0x00000402
 8009da0:	ffff83ff 	.word	0xffff83ff
 8009da4:	ffff8000 	.word	0xffff8000
 8009da8:	00000406 	.word	0x00000406
 8009dac:	ffffbf8f 	.word	0xffffbf8f
 8009db0:	ffff8080 	.word	0xffff8080

08009db4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	785b      	ldrb	r3, [r3, #1]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d01d      	beq.n	8009e02 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	18d3      	adds	r3, r2, r3
 8009dd0:	881b      	ldrh	r3, [r3, #0]
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	200c      	movs	r0, #12
 8009dd6:	183b      	adds	r3, r7, r0
 8009dd8:	491b      	ldr	r1, [pc, #108]	; (8009e48 <USB_EPSetStall+0x94>)
 8009dda:	400a      	ands	r2, r1
 8009ddc:	801a      	strh	r2, [r3, #0]
 8009dde:	183b      	adds	r3, r7, r0
 8009de0:	183a      	adds	r2, r7, r0
 8009de2:	8812      	ldrh	r2, [r2, #0]
 8009de4:	2110      	movs	r1, #16
 8009de6:	404a      	eors	r2, r1
 8009de8:	801a      	strh	r2, [r3, #0]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	18d3      	adds	r3, r2, r3
 8009df4:	183a      	adds	r2, r7, r0
 8009df6:	8812      	ldrh	r2, [r2, #0]
 8009df8:	4914      	ldr	r1, [pc, #80]	; (8009e4c <USB_EPSetStall+0x98>)
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	b292      	uxth	r2, r2
 8009dfe:	801a      	strh	r2, [r3, #0]
 8009e00:	e01d      	b.n	8009e3e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	18d3      	adds	r3, r2, r3
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	200e      	movs	r0, #14
 8009e12:	183b      	adds	r3, r7, r0
 8009e14:	490e      	ldr	r1, [pc, #56]	; (8009e50 <USB_EPSetStall+0x9c>)
 8009e16:	400a      	ands	r2, r1
 8009e18:	801a      	strh	r2, [r3, #0]
 8009e1a:	183b      	adds	r3, r7, r0
 8009e1c:	183a      	adds	r2, r7, r0
 8009e1e:	8812      	ldrh	r2, [r2, #0]
 8009e20:	2180      	movs	r1, #128	; 0x80
 8009e22:	0149      	lsls	r1, r1, #5
 8009e24:	404a      	eors	r2, r1
 8009e26:	801a      	strh	r2, [r3, #0]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	18d3      	adds	r3, r2, r3
 8009e32:	183a      	adds	r2, r7, r0
 8009e34:	8812      	ldrh	r2, [r2, #0]
 8009e36:	4905      	ldr	r1, [pc, #20]	; (8009e4c <USB_EPSetStall+0x98>)
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	b292      	uxth	r2, r2
 8009e3c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	0018      	movs	r0, r3
 8009e42:	46bd      	mov	sp, r7
 8009e44:	b004      	add	sp, #16
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	ffff8fbf 	.word	0xffff8fbf
 8009e4c:	ffff8080 	.word	0xffff8080
 8009e50:	ffffbf8f 	.word	0xffffbf8f

08009e54 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	7b1b      	ldrb	r3, [r3, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d000      	beq.n	8009e68 <USB_EPClearStall+0x14>
 8009e66:	e095      	b.n	8009f94 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	785b      	ldrb	r3, [r3, #1]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d046      	beq.n	8009efe <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	18d2      	adds	r2, r2, r3
 8009e7a:	2110      	movs	r1, #16
 8009e7c:	187b      	adds	r3, r7, r1
 8009e7e:	8812      	ldrh	r2, [r2, #0]
 8009e80:	801a      	strh	r2, [r3, #0]
 8009e82:	187b      	adds	r3, r7, r1
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	2240      	movs	r2, #64	; 0x40
 8009e88:	4013      	ands	r3, r2
 8009e8a:	d016      	beq.n	8009eba <USB_EPClearStall+0x66>
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	18d3      	adds	r3, r2, r3
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	200e      	movs	r0, #14
 8009e9c:	183b      	adds	r3, r7, r0
 8009e9e:	4940      	ldr	r1, [pc, #256]	; (8009fa0 <USB_EPClearStall+0x14c>)
 8009ea0:	400a      	ands	r2, r1
 8009ea2:	801a      	strh	r2, [r3, #0]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	18d3      	adds	r3, r2, r3
 8009eae:	183a      	adds	r2, r7, r0
 8009eb0:	8812      	ldrh	r2, [r2, #0]
 8009eb2:	493c      	ldr	r1, [pc, #240]	; (8009fa4 <USB_EPClearStall+0x150>)
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	b292      	uxth	r2, r2
 8009eb8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	78db      	ldrb	r3, [r3, #3]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d068      	beq.n	8009f94 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	18d3      	adds	r3, r2, r3
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	200c      	movs	r0, #12
 8009ed2:	183b      	adds	r3, r7, r0
 8009ed4:	4934      	ldr	r1, [pc, #208]	; (8009fa8 <USB_EPClearStall+0x154>)
 8009ed6:	400a      	ands	r2, r1
 8009ed8:	801a      	strh	r2, [r3, #0]
 8009eda:	183b      	adds	r3, r7, r0
 8009edc:	183a      	adds	r2, r7, r0
 8009ede:	8812      	ldrh	r2, [r2, #0]
 8009ee0:	2120      	movs	r1, #32
 8009ee2:	404a      	eors	r2, r1
 8009ee4:	801a      	strh	r2, [r3, #0]
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	18d3      	adds	r3, r2, r3
 8009ef0:	183a      	adds	r2, r7, r0
 8009ef2:	8812      	ldrh	r2, [r2, #0]
 8009ef4:	492d      	ldr	r1, [pc, #180]	; (8009fac <USB_EPClearStall+0x158>)
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	b292      	uxth	r2, r2
 8009efa:	801a      	strh	r2, [r3, #0]
 8009efc:	e04a      	b.n	8009f94 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	18d2      	adds	r2, r2, r3
 8009f08:	2116      	movs	r1, #22
 8009f0a:	187b      	adds	r3, r7, r1
 8009f0c:	8812      	ldrh	r2, [r2, #0]
 8009f0e:	801a      	strh	r2, [r3, #0]
 8009f10:	187b      	adds	r3, r7, r1
 8009f12:	881a      	ldrh	r2, [r3, #0]
 8009f14:	2380      	movs	r3, #128	; 0x80
 8009f16:	01db      	lsls	r3, r3, #7
 8009f18:	4013      	ands	r3, r2
 8009f1a:	d016      	beq.n	8009f4a <USB_EPClearStall+0xf6>
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	18d3      	adds	r3, r2, r3
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	2014      	movs	r0, #20
 8009f2c:	183b      	adds	r3, r7, r0
 8009f2e:	491c      	ldr	r1, [pc, #112]	; (8009fa0 <USB_EPClearStall+0x14c>)
 8009f30:	400a      	ands	r2, r1
 8009f32:	801a      	strh	r2, [r3, #0]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	18d3      	adds	r3, r2, r3
 8009f3e:	183a      	adds	r2, r7, r0
 8009f40:	8812      	ldrh	r2, [r2, #0]
 8009f42:	491b      	ldr	r1, [pc, #108]	; (8009fb0 <USB_EPClearStall+0x15c>)
 8009f44:	430a      	orrs	r2, r1
 8009f46:	b292      	uxth	r2, r2
 8009f48:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	18d3      	adds	r3, r2, r3
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	2012      	movs	r0, #18
 8009f5a:	183b      	adds	r3, r7, r0
 8009f5c:	4915      	ldr	r1, [pc, #84]	; (8009fb4 <USB_EPClearStall+0x160>)
 8009f5e:	400a      	ands	r2, r1
 8009f60:	801a      	strh	r2, [r3, #0]
 8009f62:	183b      	adds	r3, r7, r0
 8009f64:	183a      	adds	r2, r7, r0
 8009f66:	8812      	ldrh	r2, [r2, #0]
 8009f68:	2180      	movs	r1, #128	; 0x80
 8009f6a:	0149      	lsls	r1, r1, #5
 8009f6c:	404a      	eors	r2, r1
 8009f6e:	801a      	strh	r2, [r3, #0]
 8009f70:	183b      	adds	r3, r7, r0
 8009f72:	183a      	adds	r2, r7, r0
 8009f74:	8812      	ldrh	r2, [r2, #0]
 8009f76:	2180      	movs	r1, #128	; 0x80
 8009f78:	0189      	lsls	r1, r1, #6
 8009f7a:	404a      	eors	r2, r1
 8009f7c:	801a      	strh	r2, [r3, #0]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	18d3      	adds	r3, r2, r3
 8009f88:	183a      	adds	r2, r7, r0
 8009f8a:	8812      	ldrh	r2, [r2, #0]
 8009f8c:	4907      	ldr	r1, [pc, #28]	; (8009fac <USB_EPClearStall+0x158>)
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	b292      	uxth	r2, r2
 8009f92:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	0018      	movs	r0, r3
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	b006      	add	sp, #24
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	46c0      	nop			; (mov r8, r8)
 8009fa0:	ffff8f8f 	.word	0xffff8f8f
 8009fa4:	ffff80c0 	.word	0xffff80c0
 8009fa8:	ffff8fbf 	.word	0xffff8fbf
 8009fac:	ffff8080 	.word	0xffff8080
 8009fb0:	ffffc080 	.word	0xffffc080
 8009fb4:	ffffbf8f 	.word	0xffffbf8f

08009fb8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	000a      	movs	r2, r1
 8009fc2:	1cfb      	adds	r3, r7, #3
 8009fc4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8009fc6:	1cfb      	adds	r3, r7, #3
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d103      	bne.n	8009fd6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	224c      	movs	r2, #76	; 0x4c
 8009fd2:	2180      	movs	r1, #128	; 0x80
 8009fd4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	0018      	movs	r0, r3
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	b002      	add	sp, #8
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2258      	movs	r2, #88	; 0x58
 8009fec:	5a9b      	ldrh	r3, [r3, r2]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	4a05      	ldr	r2, [pc, #20]	; (800a008 <USB_DevConnect+0x28>)
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	b299      	uxth	r1, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2258      	movs	r2, #88	; 0x58
 8009ffa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	0018      	movs	r0, r3
 800a000:	46bd      	mov	sp, r7
 800a002:	b002      	add	sp, #8
 800a004:	bd80      	pop	{r7, pc}
 800a006:	46c0      	nop			; (mov r8, r8)
 800a008:	ffff8000 	.word	0xffff8000

0800a00c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2244      	movs	r2, #68	; 0x44
 800a018:	5a9b      	ldrh	r3, [r3, r2]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a01e:	68fb      	ldr	r3, [r7, #12]
}
 800a020:	0018      	movs	r0, r3
 800a022:	46bd      	mov	sp, r7
 800a024:	b004      	add	sp, #16
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08c      	sub	sp, #48	; 0x30
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	0019      	movs	r1, r3
 800a034:	1dbb      	adds	r3, r7, #6
 800a036:	801a      	strh	r2, [r3, #0]
 800a038:	1d3b      	adds	r3, r7, #4
 800a03a:	1c0a      	adds	r2, r1, #0
 800a03c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a03e:	1d3b      	adds	r3, r7, #4
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	3301      	adds	r3, #1
 800a044:	085b      	lsrs	r3, r3, #1
 800a046:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a050:	1dbb      	adds	r3, r7, #6
 800a052:	881a      	ldrh	r2, [r3, #0]
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	18d3      	adds	r3, r2, r3
 800a058:	2280      	movs	r2, #128	; 0x80
 800a05a:	00d2      	lsls	r2, r2, #3
 800a05c:	4694      	mov	ip, r2
 800a05e:	4463      	add	r3, ip
 800a060:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a066:	e01b      	b.n	800a0a0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	3301      	adds	r3, #1
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	021b      	lsls	r3, r3, #8
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	001a      	movs	r2, r3
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	4313      	orrs	r3, r2
 800a084:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	b29a      	uxth	r2, r3
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	3302      	adds	r3, #2
 800a092:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	3301      	adds	r3, #1
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	3b01      	subs	r3, #1
 800a09e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e0      	bne.n	800a068 <USB_WritePMA+0x40>
  }
}
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	46c0      	nop			; (mov r8, r8)
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	b00c      	add	sp, #48	; 0x30
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08a      	sub	sp, #40	; 0x28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	0019      	movs	r1, r3
 800a0bc:	1dbb      	adds	r3, r7, #6
 800a0be:	801a      	strh	r2, [r3, #0]
 800a0c0:	1d3b      	adds	r3, r7, #4
 800a0c2:	1c0a      	adds	r2, r1, #0
 800a0c4:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a0c6:	1d3b      	adds	r3, r7, #4
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	085b      	lsrs	r3, r3, #1
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a0d8:	1dbb      	adds	r3, r7, #6
 800a0da:	881a      	ldrh	r2, [r3, #0]
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	18d3      	adds	r3, r2, r3
 800a0e0:	2280      	movs	r2, #128	; 0x80
 800a0e2:	00d2      	lsls	r2, r2, #3
 800a0e4:	4694      	mov	ip, r2
 800a0e6:	4463      	add	r3, ip
 800a0e8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ee:	e018      	b.n	800a122 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	3302      	adds	r3, #2
 800a0fc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	b2da      	uxtb	r2, r3
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	3301      	adds	r3, #1
 800a10a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	0a1b      	lsrs	r3, r3, #8
 800a110:	b2da      	uxtb	r2, r3
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	3301      	adds	r3, #1
 800a11a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	3b01      	subs	r3, #1
 800a120:	627b      	str	r3, [r7, #36]	; 0x24
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1e3      	bne.n	800a0f0 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a128:	1d3b      	adds	r3, r7, #4
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	2201      	movs	r2, #1
 800a12e:	4013      	ands	r3, r2
 800a130:	b29b      	uxth	r3, r3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d007      	beq.n	800a146 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	b2da      	uxtb	r2, r3
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	701a      	strb	r2, [r3, #0]
  }
}
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	46bd      	mov	sp, r7
 800a14a:	b00a      	add	sp, #40	; 0x28
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	000a      	movs	r2, r1
 800a158:	1cfb      	adds	r3, r7, #3
 800a15a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a15c:	230f      	movs	r3, #15
 800a15e:	18fb      	adds	r3, r7, r3
 800a160:	2200      	movs	r2, #0
 800a162:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	7c1b      	ldrb	r3, [r3, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d116      	bne.n	800a19a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a16c:	2380      	movs	r3, #128	; 0x80
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	2202      	movs	r2, #2
 800a174:	2181      	movs	r1, #129	; 0x81
 800a176:	f002 f8b4 	bl	800c2e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a180:	2380      	movs	r3, #128	; 0x80
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	2101      	movs	r1, #1
 800a18a:	f002 f8aa 	bl	800c2e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	23b6      	movs	r3, #182	; 0xb6
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	2101      	movs	r1, #1
 800a196:	50d1      	str	r1, [r2, r3]
 800a198:	e013      	b.n	800a1c2 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	2340      	movs	r3, #64	; 0x40
 800a19e:	2202      	movs	r2, #2
 800a1a0:	2181      	movs	r1, #129	; 0x81
 800a1a2:	f002 f89e 	bl	800c2e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	2340      	movs	r3, #64	; 0x40
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	f002 f895 	bl	800c2e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	23b6      	movs	r3, #182	; 0xb6
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	2101      	movs	r1, #1
 800a1c0:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	2308      	movs	r3, #8
 800a1c6:	2203      	movs	r2, #3
 800a1c8:	2182      	movs	r1, #130	; 0x82
 800a1ca:	f002 f88a 	bl	800c2e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a1d4:	2387      	movs	r3, #135	; 0x87
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	0018      	movs	r0, r3
 800a1da:	f002 fa1b 	bl	800c614 <USBD_static_malloc>
 800a1de:	0001      	movs	r1, r0
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	23ae      	movs	r3, #174	; 0xae
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	23ae      	movs	r3, #174	; 0xae
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	58d3      	ldr	r3, [r2, r3]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d104      	bne.n	800a1fe <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800a1f4:	230f      	movs	r3, #15
 800a1f6:	18fb      	adds	r3, r7, r3
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	701a      	strb	r2, [r3, #0]
 800a1fc:	e02c      	b.n	800a258 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	23ae      	movs	r3, #174	; 0xae
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	58d3      	ldr	r3, [r2, r3]
 800a206:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	23af      	movs	r3, #175	; 0xaf
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	58d3      	ldr	r3, [r2, r3]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	2385      	movs	r3, #133	; 0x85
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	2100      	movs	r1, #0
 800a21c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	2386      	movs	r3, #134	; 0x86
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	2100      	movs	r1, #0
 800a226:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	7c1b      	ldrb	r3, [r3, #16]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	2381      	movs	r3, #129	; 0x81
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	58d2      	ldr	r2, [r2, r3]
 800a238:	2380      	movs	r3, #128	; 0x80
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	2101      	movs	r1, #1
 800a240:	f002 f99a 	bl	800c578 <USBD_LL_PrepareReceive>
 800a244:	e008      	b.n	800a258 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	2381      	movs	r3, #129	; 0x81
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	58d2      	ldr	r2, [r2, r3]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	2340      	movs	r3, #64	; 0x40
 800a252:	2101      	movs	r1, #1
 800a254:	f002 f990 	bl	800c578 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a258:	230f      	movs	r3, #15
 800a25a:	18fb      	adds	r3, r7, r3
 800a25c:	781b      	ldrb	r3, [r3, #0]
}
 800a25e:	0018      	movs	r0, r3
 800a260:	46bd      	mov	sp, r7
 800a262:	b004      	add	sp, #16
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	000a      	movs	r2, r1
 800a270:	1cfb      	adds	r3, r7, #3
 800a272:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a274:	230f      	movs	r3, #15
 800a276:	18fb      	adds	r3, r7, r3
 800a278:	2200      	movs	r2, #0
 800a27a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2181      	movs	r1, #129	; 0x81
 800a280:	0018      	movs	r0, r3
 800a282:	f002 f865 	bl	800c350 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2101      	movs	r1, #1
 800a290:	0018      	movs	r0, r3
 800a292:	f002 f85d 	bl	800c350 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	23b6      	movs	r3, #182	; 0xb6
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	2100      	movs	r1, #0
 800a29e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2182      	movs	r1, #130	; 0x82
 800a2a4:	0018      	movs	r0, r3
 800a2a6:	f002 f853 	bl	800c350 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	23ae      	movs	r3, #174	; 0xae
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	58d3      	ldr	r3, [r2, r3]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d011      	beq.n	800a2e0 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	23af      	movs	r3, #175	; 0xaf
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	58d3      	ldr	r3, [r2, r3]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	23ae      	movs	r3, #174	; 0xae
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	58d3      	ldr	r3, [r2, r3]
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f002 f9ab 	bl	800c62c <USBD_static_free>
    pdev->pClassData = NULL;
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	23ae      	movs	r3, #174	; 0xae
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	2100      	movs	r1, #0
 800a2de:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800a2e0:	230f      	movs	r3, #15
 800a2e2:	18fb      	adds	r3, r7, r3
 800a2e4:	781b      	ldrb	r3, [r3, #0]
}
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	b004      	add	sp, #16
 800a2ec:	bd80      	pop	{r7, pc}
	...

0800a2f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	23ae      	movs	r3, #174	; 0xae
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	58d3      	ldr	r3, [r2, r3]
 800a302:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a304:	230f      	movs	r3, #15
 800a306:	18fb      	adds	r3, r7, r3
 800a308:	2200      	movs	r2, #0
 800a30a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800a30c:	230c      	movs	r3, #12
 800a30e:	18fb      	adds	r3, r7, r3
 800a310:	2200      	movs	r2, #0
 800a312:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800a314:	2317      	movs	r3, #23
 800a316:	18fb      	adds	r3, r7, r3
 800a318:	2200      	movs	r2, #0
 800a31a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	001a      	movs	r2, r3
 800a322:	2360      	movs	r3, #96	; 0x60
 800a324:	4013      	ands	r3, r2
 800a326:	d03d      	beq.n	800a3a4 <USBD_CDC_Setup+0xb4>
 800a328:	2b20      	cmp	r3, #32
 800a32a:	d000      	beq.n	800a32e <USBD_CDC_Setup+0x3e>
 800a32c:	e094      	b.n	800a458 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	88db      	ldrh	r3, [r3, #6]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d02b      	beq.n	800a38e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	b25b      	sxtb	r3, r3
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	da12      	bge.n	800a366 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	23af      	movs	r3, #175	; 0xaf
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	58d3      	ldr	r3, [r2, r3]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a34e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	88d2      	ldrh	r2, [r2, #6]
 800a354:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a356:	6939      	ldr	r1, [r7, #16]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	88da      	ldrh	r2, [r3, #6]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	0018      	movs	r0, r3
 800a360:	f001 fbb2 	bl	800bac8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a364:	e083      	b.n	800a46e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	7859      	ldrb	r1, [r3, #1]
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	2380      	movs	r3, #128	; 0x80
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	88db      	ldrh	r3, [r3, #6]
 800a376:	b2d9      	uxtb	r1, r3
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	4a40      	ldr	r2, [pc, #256]	; (800a47c <USBD_CDC_Setup+0x18c>)
 800a37c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a37e:	6939      	ldr	r1, [r7, #16]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	88da      	ldrh	r2, [r3, #6]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	0018      	movs	r0, r3
 800a388:	f001 fbd1 	bl	800bb2e <USBD_CtlPrepareRx>
      break;
 800a38c:	e06f      	b.n	800a46e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	23af      	movs	r3, #175	; 0xaf
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	58d3      	ldr	r3, [r2, r3]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	7850      	ldrb	r0, [r2, #1]
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	4798      	blx	r3
      break;
 800a3a2:	e064      	b.n	800a46e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	785b      	ldrb	r3, [r3, #1]
 800a3a8:	2b0b      	cmp	r3, #11
 800a3aa:	d037      	beq.n	800a41c <USBD_CDC_Setup+0x12c>
 800a3ac:	dc47      	bgt.n	800a43e <USBD_CDC_Setup+0x14e>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <USBD_CDC_Setup+0xc8>
 800a3b2:	2b0a      	cmp	r3, #10
 800a3b4:	d019      	beq.n	800a3ea <USBD_CDC_Setup+0xfa>
 800a3b6:	e042      	b.n	800a43e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	23a7      	movs	r3, #167	; 0xa7
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	5cd3      	ldrb	r3, [r2, r3]
 800a3c0:	2b03      	cmp	r3, #3
 800a3c2:	d107      	bne.n	800a3d4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a3c4:	230c      	movs	r3, #12
 800a3c6:	18f9      	adds	r1, r7, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f001 fb7b 	bl	800bac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3d2:	e040      	b.n	800a456 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	0011      	movs	r1, r2
 800a3da:	0018      	movs	r0, r3
 800a3dc:	f001 faf6 	bl	800b9cc <USBD_CtlError>
            ret = USBD_FAIL;
 800a3e0:	2317      	movs	r3, #23
 800a3e2:	18fb      	adds	r3, r7, r3
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	701a      	strb	r2, [r3, #0]
          break;
 800a3e8:	e035      	b.n	800a456 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	23a7      	movs	r3, #167	; 0xa7
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	5cd3      	ldrb	r3, [r2, r3]
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d107      	bne.n	800a406 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a3f6:	230f      	movs	r3, #15
 800a3f8:	18f9      	adds	r1, r7, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	0018      	movs	r0, r3
 800a400:	f001 fb62 	bl	800bac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a404:	e027      	b.n	800a456 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	0011      	movs	r1, r2
 800a40c:	0018      	movs	r0, r3
 800a40e:	f001 fadd 	bl	800b9cc <USBD_CtlError>
            ret = USBD_FAIL;
 800a412:	2317      	movs	r3, #23
 800a414:	18fb      	adds	r3, r7, r3
 800a416:	2202      	movs	r2, #2
 800a418:	701a      	strb	r2, [r3, #0]
          break;
 800a41a:	e01c      	b.n	800a456 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	23a7      	movs	r3, #167	; 0xa7
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	5cd3      	ldrb	r3, [r2, r3]
 800a424:	2b03      	cmp	r3, #3
 800a426:	d015      	beq.n	800a454 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	0011      	movs	r1, r2
 800a42e:	0018      	movs	r0, r3
 800a430:	f001 facc 	bl	800b9cc <USBD_CtlError>
            ret = USBD_FAIL;
 800a434:	2317      	movs	r3, #23
 800a436:	18fb      	adds	r3, r7, r3
 800a438:	2202      	movs	r2, #2
 800a43a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800a43c:	e00a      	b.n	800a454 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	0011      	movs	r1, r2
 800a444:	0018      	movs	r0, r3
 800a446:	f001 fac1 	bl	800b9cc <USBD_CtlError>
          ret = USBD_FAIL;
 800a44a:	2317      	movs	r3, #23
 800a44c:	18fb      	adds	r3, r7, r3
 800a44e:	2202      	movs	r2, #2
 800a450:	701a      	strb	r2, [r3, #0]
          break;
 800a452:	e000      	b.n	800a456 <USBD_CDC_Setup+0x166>
          break;
 800a454:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a456:	e00a      	b.n	800a46e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	0011      	movs	r1, r2
 800a45e:	0018      	movs	r0, r3
 800a460:	f001 fab4 	bl	800b9cc <USBD_CtlError>
      ret = USBD_FAIL;
 800a464:	2317      	movs	r3, #23
 800a466:	18fb      	adds	r3, r7, r3
 800a468:	2202      	movs	r2, #2
 800a46a:	701a      	strb	r2, [r3, #0]
      break;
 800a46c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a46e:	2317      	movs	r3, #23
 800a470:	18fb      	adds	r3, r7, r3
 800a472:	781b      	ldrb	r3, [r3, #0]
}
 800a474:	0018      	movs	r0, r3
 800a476:	46bd      	mov	sp, r7
 800a478:	b006      	add	sp, #24
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	00000201 	.word	0x00000201

0800a480 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	000a      	movs	r2, r1
 800a48a:	1cfb      	adds	r3, r7, #3
 800a48c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	23ae      	movs	r3, #174	; 0xae
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	58d3      	ldr	r3, [r2, r3]
 800a496:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	23b0      	movs	r3, #176	; 0xb0
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	58d3      	ldr	r3, [r2, r3]
 800a4a0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	23ae      	movs	r3, #174	; 0xae
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	58d3      	ldr	r3, [r2, r3]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d03e      	beq.n	800a52c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a4ae:	1cfb      	adds	r3, r7, #3
 800a4b0:	781a      	ldrb	r2, [r3, #0]
 800a4b2:	6879      	ldr	r1, [r7, #4]
 800a4b4:	0013      	movs	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	189b      	adds	r3, r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	18cb      	adds	r3, r1, r3
 800a4be:	331c      	adds	r3, #28
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d02b      	beq.n	800a51e <USBD_CDC_DataIn+0x9e>
 800a4c6:	1cfb      	adds	r3, r7, #3
 800a4c8:	781a      	ldrb	r2, [r3, #0]
 800a4ca:	6879      	ldr	r1, [r7, #4]
 800a4cc:	0013      	movs	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	189b      	adds	r3, r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	18cb      	adds	r3, r1, r3
 800a4d6:	331c      	adds	r3, #28
 800a4d8:	6818      	ldr	r0, [r3, #0]
 800a4da:	1cfb      	adds	r3, r7, #3
 800a4dc:	781a      	ldrb	r2, [r3, #0]
 800a4de:	68b9      	ldr	r1, [r7, #8]
 800a4e0:	0013      	movs	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	189b      	adds	r3, r3, r2
 800a4e6:	00db      	lsls	r3, r3, #3
 800a4e8:	18cb      	adds	r3, r1, r3
 800a4ea:	3338      	adds	r3, #56	; 0x38
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	0019      	movs	r1, r3
 800a4f0:	f7f5 fea2 	bl	8000238 <__aeabi_uidivmod>
 800a4f4:	1e0b      	subs	r3, r1, #0
 800a4f6:	d112      	bne.n	800a51e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a4f8:	1cfb      	adds	r3, r7, #3
 800a4fa:	781a      	ldrb	r2, [r3, #0]
 800a4fc:	6879      	ldr	r1, [r7, #4]
 800a4fe:	0013      	movs	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	189b      	adds	r3, r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	18cb      	adds	r3, r1, r3
 800a508:	331c      	adds	r3, #28
 800a50a:	2200      	movs	r2, #0
 800a50c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a50e:	1cfb      	adds	r3, r7, #3
 800a510:	7819      	ldrb	r1, [r3, #0]
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	2300      	movs	r3, #0
 800a516:	2200      	movs	r2, #0
 800a518:	f001 fff7 	bl	800c50a <USBD_LL_Transmit>
 800a51c:	e004      	b.n	800a528 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	2385      	movs	r3, #133	; 0x85
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	2100      	movs	r1, #0
 800a526:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	e000      	b.n	800a52e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800a52c:	2302      	movs	r3, #2
  }
}
 800a52e:	0018      	movs	r0, r3
 800a530:	46bd      	mov	sp, r7
 800a532:	b004      	add	sp, #16
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	000a      	movs	r2, r1
 800a540:	1cfb      	adds	r3, r7, #3
 800a542:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	23ae      	movs	r3, #174	; 0xae
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	58d3      	ldr	r3, [r2, r3]
 800a54c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a54e:	1cfb      	adds	r3, r7, #3
 800a550:	781a      	ldrb	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	0011      	movs	r1, r2
 800a556:	0018      	movs	r0, r3
 800a558:	f002 f845 	bl	800c5e6 <USBD_LL_GetRxDataSize>
 800a55c:	0001      	movs	r1, r0
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	2383      	movs	r3, #131	; 0x83
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	23ae      	movs	r3, #174	; 0xae
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	58d3      	ldr	r3, [r2, r3]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d011      	beq.n	800a596 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	23af      	movs	r3, #175	; 0xaf
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	58d3      	ldr	r3, [r2, r3]
 800a57a:	68da      	ldr	r2, [r3, #12]
 800a57c:	68f9      	ldr	r1, [r7, #12]
 800a57e:	2381      	movs	r3, #129	; 0x81
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	58c8      	ldr	r0, [r1, r3]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2183      	movs	r1, #131	; 0x83
 800a588:	0089      	lsls	r1, r1, #2
 800a58a:	468c      	mov	ip, r1
 800a58c:	4463      	add	r3, ip
 800a58e:	0019      	movs	r1, r3
 800a590:	4790      	blx	r2

    return USBD_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	e000      	b.n	800a598 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800a596:	2302      	movs	r3, #2
  }
}
 800a598:	0018      	movs	r0, r3
 800a59a:	46bd      	mov	sp, r7
 800a59c:	b004      	add	sp, #16
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5a0:	b590      	push	{r4, r7, lr}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	23ae      	movs	r3, #174	; 0xae
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	58d3      	ldr	r3, [r2, r3]
 800a5b0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	23af      	movs	r3, #175	; 0xaf
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	58d3      	ldr	r3, [r2, r3]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d019      	beq.n	800a5f2 <USBD_CDC_EP0_RxReady+0x52>
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	2380      	movs	r3, #128	; 0x80
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	5cd3      	ldrb	r3, [r2, r3]
 800a5c6:	2bff      	cmp	r3, #255	; 0xff
 800a5c8:	d013      	beq.n	800a5f2 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	23af      	movs	r3, #175	; 0xaf
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	58d3      	ldr	r3, [r2, r3]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	68f9      	ldr	r1, [r7, #12]
 800a5d6:	2280      	movs	r2, #128	; 0x80
 800a5d8:	0092      	lsls	r2, r2, #2
 800a5da:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800a5dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	4c06      	ldr	r4, [pc, #24]	; (800a5fc <USBD_CDC_EP0_RxReady+0x5c>)
 800a5e2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5e4:	b292      	uxth	r2, r2
 800a5e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	2380      	movs	r3, #128	; 0x80
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	21ff      	movs	r1, #255	; 0xff
 800a5f0:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	0018      	movs	r0, r3
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	b005      	add	sp, #20
 800a5fa:	bd90      	pop	{r4, r7, pc}
 800a5fc:	00000201 	.word	0x00000201

0800a600 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2243      	movs	r2, #67	; 0x43
 800a60c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a60e:	4b02      	ldr	r3, [pc, #8]	; (800a618 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800a610:	0018      	movs	r0, r3
 800a612:	46bd      	mov	sp, r7
 800a614:	b002      	add	sp, #8
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000094 	.word	0x20000094

0800a61c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2243      	movs	r2, #67	; 0x43
 800a628:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a62a:	4b02      	ldr	r3, [pc, #8]	; (800a634 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800a62c:	0018      	movs	r0, r3
 800a62e:	46bd      	mov	sp, r7
 800a630:	b002      	add	sp, #8
 800a632:	bd80      	pop	{r7, pc}
 800a634:	20000050 	.word	0x20000050

0800a638 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2243      	movs	r2, #67	; 0x43
 800a644:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a646:	4b02      	ldr	r3, [pc, #8]	; (800a650 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800a648:	0018      	movs	r0, r3
 800a64a:	46bd      	mov	sp, r7
 800a64c:	b002      	add	sp, #8
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	200000d8 	.word	0x200000d8

0800a654 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	220a      	movs	r2, #10
 800a660:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a662:	4b02      	ldr	r3, [pc, #8]	; (800a66c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800a664:	0018      	movs	r0, r3
 800a666:	46bd      	mov	sp, r7
 800a668:	b002      	add	sp, #8
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	2000000c 	.word	0x2000000c

0800a670 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a67a:	200f      	movs	r0, #15
 800a67c:	183b      	adds	r3, r7, r0
 800a67e:	2202      	movs	r2, #2
 800a680:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d007      	beq.n	800a698 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	23af      	movs	r3, #175	; 0xaf
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800a692:	183b      	adds	r3, r7, r0
 800a694:	2200      	movs	r2, #0
 800a696:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a698:	230f      	movs	r3, #15
 800a69a:	18fb      	adds	r3, r7, r3
 800a69c:	781b      	ldrb	r3, [r3, #0]
}
 800a69e:	0018      	movs	r0, r3
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	b004      	add	sp, #16
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b086      	sub	sp, #24
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	60f8      	str	r0, [r7, #12]
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	1dbb      	adds	r3, r7, #6
 800a6b2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	23ae      	movs	r3, #174	; 0xae
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	58d3      	ldr	r3, [r2, r3]
 800a6bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	2382      	movs	r3, #130	; 0x82
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	68b9      	ldr	r1, [r7, #8]
 800a6c6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800a6c8:	1dbb      	adds	r3, r7, #6
 800a6ca:	8819      	ldrh	r1, [r3, #0]
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	2384      	movs	r3, #132	; 0x84
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	0018      	movs	r0, r3
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	b006      	add	sp, #24
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	23ae      	movs	r3, #174	; 0xae
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	58d3      	ldr	r3, [r2, r3]
 800a6f0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	2381      	movs	r3, #129	; 0x81
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	0018      	movs	r0, r3
 800a700:	46bd      	mov	sp, r7
 800a702:	b004      	add	sp, #16
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	23ae      	movs	r3, #174	; 0xae
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	58d3      	ldr	r3, [r2, r3]
 800a716:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	23ae      	movs	r3, #174	; 0xae
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	58d3      	ldr	r3, [r2, r3]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d022      	beq.n	800a76a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	2385      	movs	r3, #133	; 0x85
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	58d3      	ldr	r3, [r2, r3]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d11a      	bne.n	800a766 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	2385      	movs	r3, #133	; 0x85
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	2101      	movs	r1, #1
 800a738:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	2384      	movs	r3, #132	; 0x84
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	58d2      	ldr	r2, [r2, r3]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	2382      	movs	r3, #130	; 0x82
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	2384      	movs	r3, #132	; 0x84
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a756:	b29b      	uxth	r3, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	000a      	movs	r2, r1
 800a75c:	2181      	movs	r1, #129	; 0x81
 800a75e:	f001 fed4 	bl	800c50a <USBD_LL_Transmit>

      return USBD_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	e002      	b.n	800a76c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800a766:	2301      	movs	r3, #1
 800a768:	e000      	b.n	800a76c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800a76a:	2302      	movs	r3, #2
  }
}
 800a76c:	0018      	movs	r0, r3
 800a76e:	46bd      	mov	sp, r7
 800a770:	b004      	add	sp, #16
 800a772:	bd80      	pop	{r7, pc}

0800a774 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	23ae      	movs	r3, #174	; 0xae
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	58d3      	ldr	r3, [r2, r3]
 800a784:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	23ae      	movs	r3, #174	; 0xae
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	58d3      	ldr	r3, [r2, r3]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d019      	beq.n	800a7c6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	7c1b      	ldrb	r3, [r3, #16]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10a      	bne.n	800a7b0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	2381      	movs	r3, #129	; 0x81
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	58d2      	ldr	r2, [r2, r3]
 800a7a2:	2380      	movs	r3, #128	; 0x80
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	f001 fee5 	bl	800c578 <USBD_LL_PrepareReceive>
 800a7ae:	e008      	b.n	800a7c2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	2381      	movs	r3, #129	; 0x81
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	58d2      	ldr	r2, [r2, r3]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	2340      	movs	r3, #64	; 0x40
 800a7bc:	2101      	movs	r1, #1
 800a7be:	f001 fedb 	bl	800c578 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e000      	b.n	800a7c8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800a7c6:	2302      	movs	r3, #2
  }
}
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	b004      	add	sp, #16
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	1dfb      	adds	r3, r7, #7
 800a7dc:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e020      	b.n	800a82a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	23ad      	movs	r3, #173	; 0xad
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	58d3      	ldr	r3, [r2, r3]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d004      	beq.n	800a7fe <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	23ad      	movs	r3, #173	; 0xad
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d004      	beq.n	800a80e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	23ac      	movs	r3, #172	; 0xac
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	68b9      	ldr	r1, [r7, #8]
 800a80c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	23a7      	movs	r3, #167	; 0xa7
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	2101      	movs	r1, #1
 800a816:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	1dfa      	adds	r2, r7, #7
 800a81c:	7812      	ldrb	r2, [r2, #0]
 800a81e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	0018      	movs	r0, r3
 800a824:	f001 fcd4 	bl	800c1d0 <USBD_LL_Init>

  return USBD_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	0018      	movs	r0, r3
 800a82c:	46bd      	mov	sp, r7
 800a82e:	b004      	add	sp, #16
 800a830:	bd80      	pop	{r7, pc}

0800a832 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b084      	sub	sp, #16
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a83c:	200f      	movs	r0, #15
 800a83e:	183b      	adds	r3, r7, r0
 800a840:	2200      	movs	r2, #0
 800a842:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d008      	beq.n	800a85c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	23ad      	movs	r3, #173	; 0xad
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800a854:	183b      	adds	r3, r7, r0
 800a856:	2200      	movs	r2, #0
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	e003      	b.n	800a864 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a85c:	230f      	movs	r3, #15
 800a85e:	18fb      	adds	r3, r7, r3
 800a860:	2202      	movs	r2, #2
 800a862:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a864:	230f      	movs	r3, #15
 800a866:	18fb      	adds	r3, r7, r3
 800a868:	781b      	ldrb	r3, [r3, #0]
}
 800a86a:	0018      	movs	r0, r3
 800a86c:	46bd      	mov	sp, r7
 800a86e:	b004      	add	sp, #16
 800a870:	bd80      	pop	{r7, pc}

0800a872 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	0018      	movs	r0, r3
 800a87e:	f001 fd0b 	bl	800c298 <USBD_LL_Start>

  return USBD_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	0018      	movs	r0, r3
 800a886:	46bd      	mov	sp, r7
 800a888:	b002      	add	sp, #8
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	0018      	movs	r0, r3
 800a898:	46bd      	mov	sp, r7
 800a89a:	b002      	add	sp, #8
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a89e:	b590      	push	{r4, r7, lr}
 800a8a0:	b085      	sub	sp, #20
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	000a      	movs	r2, r1
 800a8a8:	1cfb      	adds	r3, r7, #3
 800a8aa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a8ac:	240f      	movs	r4, #15
 800a8ae:	193b      	adds	r3, r7, r4
 800a8b0:	2202      	movs	r2, #2
 800a8b2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	23ad      	movs	r3, #173	; 0xad
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	58d3      	ldr	r3, [r2, r3]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00e      	beq.n	800a8de <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	23ad      	movs	r3, #173	; 0xad
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	58d3      	ldr	r3, [r2, r3]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	1cfa      	adds	r2, r7, #3
 800a8cc:	7811      	ldrb	r1, [r2, #0]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	0010      	movs	r0, r2
 800a8d2:	4798      	blx	r3
 800a8d4:	1e03      	subs	r3, r0, #0
 800a8d6:	d102      	bne.n	800a8de <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800a8d8:	193b      	adds	r3, r7, r4
 800a8da:	2200      	movs	r2, #0
 800a8dc:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800a8de:	230f      	movs	r3, #15
 800a8e0:	18fb      	adds	r3, r7, r3
 800a8e2:	781b      	ldrb	r3, [r3, #0]
}
 800a8e4:	0018      	movs	r0, r3
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	b005      	add	sp, #20
 800a8ea:	bd90      	pop	{r4, r7, pc}

0800a8ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	000a      	movs	r2, r1
 800a8f6:	1cfb      	adds	r3, r7, #3
 800a8f8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	23ad      	movs	r3, #173	; 0xad
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	58d3      	ldr	r3, [r2, r3]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	1cfa      	adds	r2, r7, #3
 800a906:	7811      	ldrb	r1, [r2, #0]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	0010      	movs	r0, r2
 800a90c:	4798      	blx	r3

  return USBD_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	0018      	movs	r0, r3
 800a912:	46bd      	mov	sp, r7
 800a914:	b002      	add	sp, #8
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	22aa      	movs	r2, #170	; 0xaa
 800a926:	0092      	lsls	r2, r2, #2
 800a928:	4694      	mov	ip, r2
 800a92a:	4463      	add	r3, ip
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	0011      	movs	r1, r2
 800a930:	0018      	movs	r0, r3
 800a932:	f001 f810 	bl	800b956 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	23a5      	movs	r3, #165	; 0xa5
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	2101      	movs	r1, #1
 800a93e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a23      	ldr	r2, [pc, #140]	; (800a9d0 <USBD_LL_SetupStage+0xb8>)
 800a944:	5a9b      	ldrh	r3, [r3, r2]
 800a946:	0019      	movs	r1, r3
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	23a6      	movs	r3, #166	; 0xa6
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	23aa      	movs	r3, #170	; 0xaa
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	5cd3      	ldrb	r3, [r2, r3]
 800a958:	001a      	movs	r2, r3
 800a95a:	231f      	movs	r3, #31
 800a95c:	4013      	ands	r3, r2
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d019      	beq.n	800a996 <USBD_LL_SetupStage+0x7e>
 800a962:	d822      	bhi.n	800a9aa <USBD_LL_SetupStage+0x92>
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <USBD_LL_SetupStage+0x56>
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d00a      	beq.n	800a982 <USBD_LL_SetupStage+0x6a>
 800a96c:	e01d      	b.n	800a9aa <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	22aa      	movs	r2, #170	; 0xaa
 800a972:	0092      	lsls	r2, r2, #2
 800a974:	189a      	adds	r2, r3, r2
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	0011      	movs	r1, r2
 800a97a:	0018      	movs	r0, r3
 800a97c:	f000 fa10 	bl	800ada0 <USBD_StdDevReq>
      break;
 800a980:	e020      	b.n	800a9c4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	22aa      	movs	r2, #170	; 0xaa
 800a986:	0092      	lsls	r2, r2, #2
 800a988:	189a      	adds	r2, r3, r2
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	0011      	movs	r1, r2
 800a98e:	0018      	movs	r0, r3
 800a990:	f000 fa78 	bl	800ae84 <USBD_StdItfReq>
      break;
 800a994:	e016      	b.n	800a9c4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	22aa      	movs	r2, #170	; 0xaa
 800a99a:	0092      	lsls	r2, r2, #2
 800a99c:	189a      	adds	r2, r3, r2
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	0011      	movs	r1, r2
 800a9a2:	0018      	movs	r0, r3
 800a9a4:	f000 fac5 	bl	800af32 <USBD_StdEPReq>
      break;
 800a9a8:	e00c      	b.n	800a9c4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	23aa      	movs	r3, #170	; 0xaa
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	5cd3      	ldrb	r3, [r2, r3]
 800a9b2:	227f      	movs	r2, #127	; 0x7f
 800a9b4:	4393      	bics	r3, r2
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	0011      	movs	r1, r2
 800a9bc:	0018      	movs	r0, r3
 800a9be:	f001 fcf2 	bl	800c3a6 <USBD_LL_StallEP>
      break;
 800a9c2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	b002      	add	sp, #8
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	46c0      	nop			; (mov r8, r8)
 800a9d0:	000002ae 	.word	0x000002ae

0800a9d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	607a      	str	r2, [r7, #4]
 800a9de:	200b      	movs	r0, #11
 800a9e0:	183b      	adds	r3, r7, r0
 800a9e2:	1c0a      	adds	r2, r1, #0
 800a9e4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a9e6:	183b      	adds	r3, r7, r0
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d154      	bne.n	800aa98 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3355      	adds	r3, #85	; 0x55
 800a9f2:	33ff      	adds	r3, #255	; 0xff
 800a9f4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	23a5      	movs	r3, #165	; 0xa5
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	58d3      	ldr	r3, [r2, r3]
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d139      	bne.n	800aa76 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	68da      	ldr	r2, [r3, #12]
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d919      	bls.n	800aa42 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	68da      	ldr	r2, [r3, #12]
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	1ad2      	subs	r2, r2, r3
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	68da      	ldr	r2, [r3, #12]
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d203      	bcs.n	800aa30 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	e002      	b.n	800aa36 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	6879      	ldr	r1, [r7, #4]
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	001a      	movs	r2, r3
 800aa3c:	f001 f89b 	bl	800bb76 <USBD_CtlContinueRx>
 800aa40:	e045      	b.n	800aace <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	23ad      	movs	r3, #173	; 0xad
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	58d3      	ldr	r3, [r2, r3]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00d      	beq.n	800aa6c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	23a7      	movs	r3, #167	; 0xa7
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aa58:	2b03      	cmp	r3, #3
 800aa5a:	d107      	bne.n	800aa6c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	23ad      	movs	r3, #173	; 0xad
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	58d3      	ldr	r3, [r2, r3]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	68fa      	ldr	r2, [r7, #12]
 800aa68:	0010      	movs	r0, r2
 800aa6a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	0018      	movs	r0, r3
 800aa70:	f001 f894 	bl	800bb9c <USBD_CtlSendStatus>
 800aa74:	e02b      	b.n	800aace <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	23a5      	movs	r3, #165	; 0xa5
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	58d3      	ldr	r3, [r2, r3]
 800aa7e:	2b05      	cmp	r3, #5
 800aa80:	d125      	bne.n	800aace <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	23a5      	movs	r3, #165	; 0xa5
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	2100      	movs	r1, #0
 800aa8a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2100      	movs	r1, #0
 800aa90:	0018      	movs	r0, r3
 800aa92:	f001 fc88 	bl	800c3a6 <USBD_LL_StallEP>
 800aa96:	e01a      	b.n	800aace <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	23ad      	movs	r3, #173	; 0xad
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	58d3      	ldr	r3, [r2, r3]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d011      	beq.n	800aaca <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	23a7      	movs	r3, #167	; 0xa7
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d10b      	bne.n	800aaca <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	23ad      	movs	r3, #173	; 0xad
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	58d3      	ldr	r3, [r2, r3]
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	220b      	movs	r2, #11
 800aabe:	18ba      	adds	r2, r7, r2
 800aac0:	7811      	ldrb	r1, [r2, #0]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	0010      	movs	r0, r2
 800aac6:	4798      	blx	r3
 800aac8:	e001      	b.n	800aace <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aaca:	2302      	movs	r3, #2
 800aacc:	e000      	b.n	800aad0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	0018      	movs	r0, r3
 800aad2:	46bd      	mov	sp, r7
 800aad4:	b006      	add	sp, #24
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	200b      	movs	r0, #11
 800aae4:	183b      	adds	r3, r7, r0
 800aae6:	1c0a      	adds	r2, r1, #0
 800aae8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aaea:	183b      	adds	r3, r7, r0
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d000      	beq.n	800aaf4 <USBD_LL_DataInStage+0x1c>
 800aaf2:	e08e      	b.n	800ac12 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	3314      	adds	r3, #20
 800aaf8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	23a5      	movs	r3, #165	; 0xa5
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	58d3      	ldr	r3, [r2, r3]
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d164      	bne.n	800abd0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d915      	bls.n	800ab3e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	68da      	ldr	r2, [r3, #12]
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	1ad2      	subs	r2, r2, r3
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	6879      	ldr	r1, [r7, #4]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	0018      	movs	r0, r3
 800ab2c:	f000 ffec 	bl	800bb08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	2300      	movs	r3, #0
 800ab34:	2200      	movs	r2, #0
 800ab36:	2100      	movs	r1, #0
 800ab38:	f001 fd1e 	bl	800c578 <USBD_LL_PrepareReceive>
 800ab3c:	e059      	b.n	800abf2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	689a      	ldr	r2, [r3, #8]
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	0019      	movs	r1, r3
 800ab48:	0010      	movs	r0, r2
 800ab4a:	f7f5 fb75 	bl	8000238 <__aeabi_uidivmod>
 800ab4e:	1e0b      	subs	r3, r1, #0
 800ab50:	d11f      	bne.n	800ab92 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	689a      	ldr	r2, [r3, #8]
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d319      	bcc.n	800ab92 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	689a      	ldr	r2, [r3, #8]
 800ab62:	68f9      	ldr	r1, [r7, #12]
 800ab64:	23a6      	movs	r3, #166	; 0xa6
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d211      	bcs.n	800ab92 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	2100      	movs	r1, #0
 800ab74:	0018      	movs	r0, r3
 800ab76:	f000 ffc7 	bl	800bb08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	23a6      	movs	r3, #166	; 0xa6
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	2100      	movs	r1, #0
 800ab82:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	2300      	movs	r3, #0
 800ab88:	2200      	movs	r2, #0
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	f001 fcf4 	bl	800c578 <USBD_LL_PrepareReceive>
 800ab90:	e02f      	b.n	800abf2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	23ad      	movs	r3, #173	; 0xad
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	58d3      	ldr	r3, [r2, r3]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00d      	beq.n	800abbc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	23a7      	movs	r3, #167	; 0xa7
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d107      	bne.n	800abbc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	23ad      	movs	r3, #173	; 0xad
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	58d3      	ldr	r3, [r2, r3]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	0010      	movs	r0, r2
 800abba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2180      	movs	r1, #128	; 0x80
 800abc0:	0018      	movs	r0, r3
 800abc2:	f001 fbf0 	bl	800c3a6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	0018      	movs	r0, r3
 800abca:	f000 fffb 	bl	800bbc4 <USBD_CtlReceiveStatus>
 800abce:	e010      	b.n	800abf2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	23a5      	movs	r3, #165	; 0xa5
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	58d3      	ldr	r3, [r2, r3]
 800abd8:	2b04      	cmp	r3, #4
 800abda:	d005      	beq.n	800abe8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	23a5      	movs	r3, #165	; 0xa5
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d104      	bne.n	800abf2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2180      	movs	r1, #128	; 0x80
 800abec:	0018      	movs	r0, r3
 800abee:	f001 fbda 	bl	800c3a6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	23a8      	movs	r3, #168	; 0xa8
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	5cd3      	ldrb	r3, [r2, r3]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d124      	bne.n	800ac48 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	0018      	movs	r0, r3
 800ac02:	f7ff fe43 	bl	800a88c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	23a8      	movs	r3, #168	; 0xa8
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	54d1      	strb	r1, [r2, r3]
 800ac10:	e01a      	b.n	800ac48 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	23ad      	movs	r3, #173	; 0xad
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	58d3      	ldr	r3, [r2, r3]
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d011      	beq.n	800ac44 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	23a7      	movs	r3, #167	; 0xa7
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac28:	2b03      	cmp	r3, #3
 800ac2a:	d10b      	bne.n	800ac44 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	23ad      	movs	r3, #173	; 0xad
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	58d3      	ldr	r3, [r2, r3]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	220b      	movs	r2, #11
 800ac38:	18ba      	adds	r2, r7, r2
 800ac3a:	7811      	ldrb	r1, [r2, #0]
 800ac3c:	68fa      	ldr	r2, [r7, #12]
 800ac3e:	0010      	movs	r0, r2
 800ac40:	4798      	blx	r3
 800ac42:	e001      	b.n	800ac48 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ac44:	2302      	movs	r3, #2
 800ac46:	e000      	b.n	800ac4a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	b006      	add	sp, #24
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	2340      	movs	r3, #64	; 0x40
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2100      	movs	r1, #0
 800ac62:	f001 fb3e 	bl	800c2e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	23ac      	movs	r3, #172	; 0xac
 800ac6a:	005b      	lsls	r3, r3, #1
 800ac6c:	2101      	movs	r1, #1
 800ac6e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	23b2      	movs	r3, #178	; 0xb2
 800ac74:	005b      	lsls	r3, r3, #1
 800ac76:	2140      	movs	r1, #64	; 0x40
 800ac78:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	2340      	movs	r3, #64	; 0x40
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2180      	movs	r1, #128	; 0x80
 800ac82:	f001 fb2e 	bl	800c2e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2240      	movs	r2, #64	; 0x40
 800ac90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	23a7      	movs	r3, #167	; 0xa7
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	2101      	movs	r1, #1
 800ac9a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	23a5      	movs	r3, #165	; 0xa5
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	2100      	movs	r1, #0
 800aca4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	23a9      	movs	r3, #169	; 0xa9
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	2100      	movs	r1, #0
 800acb4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	23ae      	movs	r3, #174	; 0xae
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	58d3      	ldr	r3, [r2, r3]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00a      	beq.n	800acd8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	23ad      	movs	r3, #173	; 0xad
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	58d3      	ldr	r3, [r2, r3]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	b2d9      	uxtb	r1, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	0018      	movs	r0, r3
 800acd6:	4790      	blx	r2
  }

  return USBD_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	0018      	movs	r0, r3
 800acdc:	46bd      	mov	sp, r7
 800acde:	b002      	add	sp, #8
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b082      	sub	sp, #8
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	000a      	movs	r2, r1
 800acec:	1cfb      	adds	r3, r7, #3
 800acee:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	1cfa      	adds	r2, r7, #3
 800acf4:	7812      	ldrb	r2, [r2, #0]
 800acf6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	0018      	movs	r0, r3
 800acfc:	46bd      	mov	sp, r7
 800acfe:	b002      	add	sp, #8
 800ad00:	bd80      	pop	{r7, pc}
	...

0800ad04 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	23a7      	movs	r3, #167	; 0xa7
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	5cd1      	ldrb	r1, [r2, r3]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a06      	ldr	r2, [pc, #24]	; (800ad30 <USBD_LL_Suspend+0x2c>)
 800ad18:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	23a7      	movs	r3, #167	; 0xa7
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	2104      	movs	r1, #4
 800ad22:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	0018      	movs	r0, r3
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	b002      	add	sp, #8
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	46c0      	nop			; (mov r8, r8)
 800ad30:	0000029d 	.word	0x0000029d

0800ad34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	23a7      	movs	r3, #167	; 0xa7
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	5cd3      	ldrb	r3, [r2, r3]
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	d106      	bne.n	800ad56 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a05      	ldr	r2, [pc, #20]	; (800ad60 <USBD_LL_Resume+0x2c>)
 800ad4c:	5c99      	ldrb	r1, [r3, r2]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	23a7      	movs	r3, #167	; 0xa7
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	0018      	movs	r0, r3
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	b002      	add	sp, #8
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	0000029d 	.word	0x0000029d

0800ad64 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	23a7      	movs	r3, #167	; 0xa7
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	5cd3      	ldrb	r3, [r2, r3]
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	d10e      	bne.n	800ad96 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	23ad      	movs	r3, #173	; 0xad
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	58d3      	ldr	r3, [r2, r3]
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d007      	beq.n	800ad96 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	23ad      	movs	r3, #173	; 0xad
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	58d3      	ldr	r3, [r2, r3]
 800ad8e:	69db      	ldr	r3, [r3, #28]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	0010      	movs	r0, r2
 800ad94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	0018      	movs	r0, r3
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	b002      	add	sp, #8
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adaa:	230f      	movs	r3, #15
 800adac:	18fb      	adds	r3, r7, r3
 800adae:	2200      	movs	r2, #0
 800adb0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	001a      	movs	r2, r3
 800adb8:	2360      	movs	r3, #96	; 0x60
 800adba:	4013      	ands	r3, r2
 800adbc:	2b40      	cmp	r3, #64	; 0x40
 800adbe:	d004      	beq.n	800adca <USBD_StdDevReq+0x2a>
 800adc0:	d84f      	bhi.n	800ae62 <USBD_StdDevReq+0xc2>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00b      	beq.n	800adde <USBD_StdDevReq+0x3e>
 800adc6:	2b20      	cmp	r3, #32
 800adc8:	d14b      	bne.n	800ae62 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	23ad      	movs	r3, #173	; 0xad
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	58d3      	ldr	r3, [r2, r3]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	0010      	movs	r0, r2
 800adda:	4798      	blx	r3
      break;
 800addc:	e048      	b.n	800ae70 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	785b      	ldrb	r3, [r3, #1]
 800ade2:	2b09      	cmp	r3, #9
 800ade4:	d835      	bhi.n	800ae52 <USBD_StdDevReq+0xb2>
 800ade6:	009a      	lsls	r2, r3, #2
 800ade8:	4b25      	ldr	r3, [pc, #148]	; (800ae80 <USBD_StdDevReq+0xe0>)
 800adea:	18d3      	adds	r3, r2, r3
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	0011      	movs	r1, r2
 800adf6:	0018      	movs	r0, r3
 800adf8:	f000 fa52 	bl	800b2a0 <USBD_GetDescriptor>
          break;
 800adfc:	e030      	b.n	800ae60 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	0011      	movs	r1, r2
 800ae04:	0018      	movs	r0, r3
 800ae06:	f000 fbfd 	bl	800b604 <USBD_SetAddress>
          break;
 800ae0a:	e029      	b.n	800ae60 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	0011      	movs	r1, r2
 800ae12:	0018      	movs	r0, r3
 800ae14:	f000 fc4a 	bl	800b6ac <USBD_SetConfig>
          break;
 800ae18:	e022      	b.n	800ae60 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	0011      	movs	r1, r2
 800ae20:	0018      	movs	r0, r3
 800ae22:	f000 fce7 	bl	800b7f4 <USBD_GetConfig>
          break;
 800ae26:	e01b      	b.n	800ae60 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	0011      	movs	r1, r2
 800ae2e:	0018      	movs	r0, r3
 800ae30:	f000 fd1b 	bl	800b86a <USBD_GetStatus>
          break;
 800ae34:	e014      	b.n	800ae60 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	0011      	movs	r1, r2
 800ae3c:	0018      	movs	r0, r3
 800ae3e:	f000 fd4e 	bl	800b8de <USBD_SetFeature>
          break;
 800ae42:	e00d      	b.n	800ae60 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	0011      	movs	r1, r2
 800ae4a:	0018      	movs	r0, r3
 800ae4c:	f000 fd5d 	bl	800b90a <USBD_ClrFeature>
          break;
 800ae50:	e006      	b.n	800ae60 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae52:	683a      	ldr	r2, [r7, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	0011      	movs	r1, r2
 800ae58:	0018      	movs	r0, r3
 800ae5a:	f000 fdb7 	bl	800b9cc <USBD_CtlError>
          break;
 800ae5e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800ae60:	e006      	b.n	800ae70 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	0011      	movs	r1, r2
 800ae68:	0018      	movs	r0, r3
 800ae6a:	f000 fdaf 	bl	800b9cc <USBD_CtlError>
      break;
 800ae6e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800ae70:	230f      	movs	r3, #15
 800ae72:	18fb      	adds	r3, r7, r3
 800ae74:	781b      	ldrb	r3, [r3, #0]
}
 800ae76:	0018      	movs	r0, r3
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	b004      	add	sp, #16
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	46c0      	nop			; (mov r8, r8)
 800ae80:	0800d114 	.word	0x0800d114

0800ae84 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ae84:	b5b0      	push	{r4, r5, r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae8e:	230f      	movs	r3, #15
 800ae90:	18fb      	adds	r3, r7, r3
 800ae92:	2200      	movs	r2, #0
 800ae94:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	001a      	movs	r2, r3
 800ae9c:	2360      	movs	r3, #96	; 0x60
 800ae9e:	4013      	ands	r3, r2
 800aea0:	2b40      	cmp	r3, #64	; 0x40
 800aea2:	d004      	beq.n	800aeae <USBD_StdItfReq+0x2a>
 800aea4:	d839      	bhi.n	800af1a <USBD_StdItfReq+0x96>
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d001      	beq.n	800aeae <USBD_StdItfReq+0x2a>
 800aeaa:	2b20      	cmp	r3, #32
 800aeac:	d135      	bne.n	800af1a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	23a7      	movs	r3, #167	; 0xa7
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	5cd3      	ldrb	r3, [r2, r3]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d825      	bhi.n	800af08 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	889b      	ldrh	r3, [r3, #4]
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d819      	bhi.n	800aefa <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	23ad      	movs	r3, #173	; 0xad
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	58d3      	ldr	r3, [r2, r3]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	250f      	movs	r5, #15
 800aed2:	197c      	adds	r4, r7, r5
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	0010      	movs	r0, r2
 800aeda:	4798      	blx	r3
 800aedc:	0003      	movs	r3, r0
 800aede:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	88db      	ldrh	r3, [r3, #6]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d116      	bne.n	800af16 <USBD_StdItfReq+0x92>
 800aee8:	197b      	adds	r3, r7, r5
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d112      	bne.n	800af16 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	0018      	movs	r0, r3
 800aef4:	f000 fe52 	bl	800bb9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aef8:	e00d      	b.n	800af16 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	0011      	movs	r1, r2
 800af00:	0018      	movs	r0, r3
 800af02:	f000 fd63 	bl	800b9cc <USBD_CtlError>
          break;
 800af06:	e006      	b.n	800af16 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	0011      	movs	r1, r2
 800af0e:	0018      	movs	r0, r3
 800af10:	f000 fd5c 	bl	800b9cc <USBD_CtlError>
          break;
 800af14:	e000      	b.n	800af18 <USBD_StdItfReq+0x94>
          break;
 800af16:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800af18:	e006      	b.n	800af28 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	0011      	movs	r1, r2
 800af20:	0018      	movs	r0, r3
 800af22:	f000 fd53 	bl	800b9cc <USBD_CtlError>
      break;
 800af26:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	0018      	movs	r0, r3
 800af2c:	46bd      	mov	sp, r7
 800af2e:	b004      	add	sp, #16
 800af30:	bdb0      	pop	{r4, r5, r7, pc}

0800af32 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800af32:	b5b0      	push	{r4, r5, r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800af3c:	230f      	movs	r3, #15
 800af3e:	18fb      	adds	r3, r7, r3
 800af40:	2200      	movs	r2, #0
 800af42:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	889a      	ldrh	r2, [r3, #4]
 800af48:	230e      	movs	r3, #14
 800af4a:	18fb      	adds	r3, r7, r3
 800af4c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	001a      	movs	r2, r3
 800af54:	2360      	movs	r3, #96	; 0x60
 800af56:	4013      	ands	r3, r2
 800af58:	2b40      	cmp	r3, #64	; 0x40
 800af5a:	d006      	beq.n	800af6a <USBD_StdEPReq+0x38>
 800af5c:	d900      	bls.n	800af60 <USBD_StdEPReq+0x2e>
 800af5e:	e190      	b.n	800b282 <USBD_StdEPReq+0x350>
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00c      	beq.n	800af7e <USBD_StdEPReq+0x4c>
 800af64:	2b20      	cmp	r3, #32
 800af66:	d000      	beq.n	800af6a <USBD_StdEPReq+0x38>
 800af68:	e18b      	b.n	800b282 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	23ad      	movs	r3, #173	; 0xad
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	58d3      	ldr	r3, [r2, r3]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	0010      	movs	r0, r2
 800af7a:	4798      	blx	r3
      break;
 800af7c:	e188      	b.n	800b290 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	001a      	movs	r2, r3
 800af84:	2360      	movs	r3, #96	; 0x60
 800af86:	4013      	ands	r3, r2
 800af88:	2b20      	cmp	r3, #32
 800af8a:	d10f      	bne.n	800afac <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	23ad      	movs	r3, #173	; 0xad
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	58d3      	ldr	r3, [r2, r3]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	250f      	movs	r5, #15
 800af98:	197c      	adds	r4, r7, r5
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	0010      	movs	r0, r2
 800afa0:	4798      	blx	r3
 800afa2:	0003      	movs	r3, r0
 800afa4:	7023      	strb	r3, [r4, #0]

        return ret;
 800afa6:	197b      	adds	r3, r7, r5
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	e174      	b.n	800b296 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	785b      	ldrb	r3, [r3, #1]
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d007      	beq.n	800afc4 <USBD_StdEPReq+0x92>
 800afb4:	dd00      	ble.n	800afb8 <USBD_StdEPReq+0x86>
 800afb6:	e15c      	b.n	800b272 <USBD_StdEPReq+0x340>
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d100      	bne.n	800afbe <USBD_StdEPReq+0x8c>
 800afbc:	e092      	b.n	800b0e4 <USBD_StdEPReq+0x1b2>
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d04b      	beq.n	800b05a <USBD_StdEPReq+0x128>
 800afc2:	e156      	b.n	800b272 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	23a7      	movs	r3, #167	; 0xa7
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	5cd3      	ldrb	r3, [r2, r3]
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d002      	beq.n	800afd6 <USBD_StdEPReq+0xa4>
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d01d      	beq.n	800b010 <USBD_StdEPReq+0xde>
 800afd4:	e039      	b.n	800b04a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afd6:	220e      	movs	r2, #14
 800afd8:	18bb      	adds	r3, r7, r2
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d010      	beq.n	800b002 <USBD_StdEPReq+0xd0>
 800afe0:	18bb      	adds	r3, r7, r2
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	2b80      	cmp	r3, #128	; 0x80
 800afe6:	d00c      	beq.n	800b002 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800afe8:	18bb      	adds	r3, r7, r2
 800afea:	781a      	ldrb	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	0011      	movs	r1, r2
 800aff0:	0018      	movs	r0, r3
 800aff2:	f001 f9d8 	bl	800c3a6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2180      	movs	r1, #128	; 0x80
 800affa:	0018      	movs	r0, r3
 800affc:	f001 f9d3 	bl	800c3a6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b000:	e02a      	b.n	800b058 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	0011      	movs	r1, r2
 800b008:	0018      	movs	r0, r3
 800b00a:	f000 fcdf 	bl	800b9cc <USBD_CtlError>
              break;
 800b00e:	e023      	b.n	800b058 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	885b      	ldrh	r3, [r3, #2]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d113      	bne.n	800b040 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b018:	220e      	movs	r2, #14
 800b01a:	18bb      	adds	r3, r7, r2
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00e      	beq.n	800b040 <USBD_StdEPReq+0x10e>
 800b022:	18bb      	adds	r3, r7, r2
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	2b80      	cmp	r3, #128	; 0x80
 800b028:	d00a      	beq.n	800b040 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	88db      	ldrh	r3, [r3, #6]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d106      	bne.n	800b040 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b032:	18bb      	adds	r3, r7, r2
 800b034:	781a      	ldrb	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	0011      	movs	r1, r2
 800b03a:	0018      	movs	r0, r3
 800b03c:	f001 f9b3 	bl	800c3a6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	0018      	movs	r0, r3
 800b044:	f000 fdaa 	bl	800bb9c <USBD_CtlSendStatus>

              break;
 800b048:	e006      	b.n	800b058 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	0011      	movs	r1, r2
 800b050:	0018      	movs	r0, r3
 800b052:	f000 fcbb 	bl	800b9cc <USBD_CtlError>
              break;
 800b056:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b058:	e112      	b.n	800b280 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	23a7      	movs	r3, #167	; 0xa7
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	5cd3      	ldrb	r3, [r2, r3]
 800b062:	2b02      	cmp	r3, #2
 800b064:	d002      	beq.n	800b06c <USBD_StdEPReq+0x13a>
 800b066:	2b03      	cmp	r3, #3
 800b068:	d01d      	beq.n	800b0a6 <USBD_StdEPReq+0x174>
 800b06a:	e032      	b.n	800b0d2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b06c:	220e      	movs	r2, #14
 800b06e:	18bb      	adds	r3, r7, r2
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d010      	beq.n	800b098 <USBD_StdEPReq+0x166>
 800b076:	18bb      	adds	r3, r7, r2
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	2b80      	cmp	r3, #128	; 0x80
 800b07c:	d00c      	beq.n	800b098 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b07e:	18bb      	adds	r3, r7, r2
 800b080:	781a      	ldrb	r2, [r3, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	0011      	movs	r1, r2
 800b086:	0018      	movs	r0, r3
 800b088:	f001 f98d 	bl	800c3a6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2180      	movs	r1, #128	; 0x80
 800b090:	0018      	movs	r0, r3
 800b092:	f001 f988 	bl	800c3a6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b096:	e024      	b.n	800b0e2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	0011      	movs	r1, r2
 800b09e:	0018      	movs	r0, r3
 800b0a0:	f000 fc94 	bl	800b9cc <USBD_CtlError>
              break;
 800b0a4:	e01d      	b.n	800b0e2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	885b      	ldrh	r3, [r3, #2]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d118      	bne.n	800b0e0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0ae:	210e      	movs	r1, #14
 800b0b0:	187b      	adds	r3, r7, r1
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	227f      	movs	r2, #127	; 0x7f
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	d006      	beq.n	800b0c8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0ba:	187b      	adds	r3, r7, r1
 800b0bc:	781a      	ldrb	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	0011      	movs	r1, r2
 800b0c2:	0018      	movs	r0, r3
 800b0c4:	f001 f99a 	bl	800c3fc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	0018      	movs	r0, r3
 800b0cc:	f000 fd66 	bl	800bb9c <USBD_CtlSendStatus>
              }
              break;
 800b0d0:	e006      	b.n	800b0e0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	0011      	movs	r1, r2
 800b0d8:	0018      	movs	r0, r3
 800b0da:	f000 fc77 	bl	800b9cc <USBD_CtlError>
              break;
 800b0de:	e000      	b.n	800b0e2 <USBD_StdEPReq+0x1b0>
              break;
 800b0e0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b0e2:	e0cd      	b.n	800b280 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	23a7      	movs	r3, #167	; 0xa7
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	5cd3      	ldrb	r3, [r2, r3]
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d002      	beq.n	800b0f6 <USBD_StdEPReq+0x1c4>
 800b0f0:	2b03      	cmp	r3, #3
 800b0f2:	d03c      	beq.n	800b16e <USBD_StdEPReq+0x23c>
 800b0f4:	e0b5      	b.n	800b262 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0f6:	220e      	movs	r2, #14
 800b0f8:	18bb      	adds	r3, r7, r2
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00a      	beq.n	800b116 <USBD_StdEPReq+0x1e4>
 800b100:	18bb      	adds	r3, r7, r2
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2b80      	cmp	r3, #128	; 0x80
 800b106:	d006      	beq.n	800b116 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	0011      	movs	r1, r2
 800b10e:	0018      	movs	r0, r3
 800b110:	f000 fc5c 	bl	800b9cc <USBD_CtlError>
                break;
 800b114:	e0ac      	b.n	800b270 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b116:	220e      	movs	r2, #14
 800b118:	18bb      	adds	r3, r7, r2
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	b25b      	sxtb	r3, r3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	da0c      	bge.n	800b13c <USBD_StdEPReq+0x20a>
 800b122:	18bb      	adds	r3, r7, r2
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	227f      	movs	r2, #127	; 0x7f
 800b128:	401a      	ands	r2, r3
 800b12a:	0013      	movs	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	189b      	adds	r3, r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	3310      	adds	r3, #16
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	18d3      	adds	r3, r2, r3
 800b138:	3304      	adds	r3, #4
 800b13a:	e00d      	b.n	800b158 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b13c:	230e      	movs	r3, #14
 800b13e:	18fb      	adds	r3, r7, r3
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	227f      	movs	r2, #127	; 0x7f
 800b144:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b146:	0013      	movs	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	189b      	adds	r3, r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	3351      	adds	r3, #81	; 0x51
 800b150:	33ff      	adds	r3, #255	; 0xff
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	18d3      	adds	r3, r2, r3
 800b156:	3304      	adds	r3, #4
 800b158:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b160:	68b9      	ldr	r1, [r7, #8]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2202      	movs	r2, #2
 800b166:	0018      	movs	r0, r3
 800b168:	f000 fcae 	bl	800bac8 <USBD_CtlSendData>
              break;
 800b16c:	e080      	b.n	800b270 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b16e:	220e      	movs	r2, #14
 800b170:	18bb      	adds	r3, r7, r2
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	b25b      	sxtb	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	da14      	bge.n	800b1a4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b17a:	18bb      	adds	r3, r7, r2
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	220f      	movs	r2, #15
 800b180:	401a      	ands	r2, r3
 800b182:	6879      	ldr	r1, [r7, #4]
 800b184:	0013      	movs	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	189b      	adds	r3, r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	18cb      	adds	r3, r1, r3
 800b18e:	3318      	adds	r3, #24
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d11e      	bne.n	800b1d4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	0011      	movs	r1, r2
 800b19c:	0018      	movs	r0, r3
 800b19e:	f000 fc15 	bl	800b9cc <USBD_CtlError>
                  break;
 800b1a2:	e065      	b.n	800b270 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1a4:	230e      	movs	r3, #14
 800b1a6:	18fb      	adds	r3, r7, r3
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	220f      	movs	r2, #15
 800b1ac:	401a      	ands	r2, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	23ac      	movs	r3, #172	; 0xac
 800b1b2:	0059      	lsls	r1, r3, #1
 800b1b4:	0013      	movs	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	189b      	adds	r3, r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	18c3      	adds	r3, r0, r3
 800b1be:	185b      	adds	r3, r3, r1
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	0011      	movs	r1, r2
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f000 fbfd 	bl	800b9cc <USBD_CtlError>
                  break;
 800b1d2:	e04d      	b.n	800b270 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1d4:	220e      	movs	r2, #14
 800b1d6:	18bb      	adds	r3, r7, r2
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	b25b      	sxtb	r3, r3
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	da0c      	bge.n	800b1fa <USBD_StdEPReq+0x2c8>
 800b1e0:	18bb      	adds	r3, r7, r2
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	227f      	movs	r2, #127	; 0x7f
 800b1e6:	401a      	ands	r2, r3
 800b1e8:	0013      	movs	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	189b      	adds	r3, r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	3310      	adds	r3, #16
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	18d3      	adds	r3, r2, r3
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	e00d      	b.n	800b216 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1fa:	230e      	movs	r3, #14
 800b1fc:	18fb      	adds	r3, r7, r3
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	227f      	movs	r2, #127	; 0x7f
 800b202:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b204:	0013      	movs	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	189b      	adds	r3, r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	3351      	adds	r3, #81	; 0x51
 800b20e:	33ff      	adds	r3, #255	; 0xff
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	18d3      	adds	r3, r2, r3
 800b214:	3304      	adds	r3, #4
 800b216:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b218:	220e      	movs	r2, #14
 800b21a:	18bb      	adds	r3, r7, r2
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <USBD_StdEPReq+0x2f8>
 800b222:	18bb      	adds	r3, r7, r2
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	2b80      	cmp	r3, #128	; 0x80
 800b228:	d103      	bne.n	800b232 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2200      	movs	r2, #0
 800b22e:	601a      	str	r2, [r3, #0]
 800b230:	e010      	b.n	800b254 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b232:	230e      	movs	r3, #14
 800b234:	18fb      	adds	r3, r7, r3
 800b236:	781a      	ldrb	r2, [r3, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	0011      	movs	r1, r2
 800b23c:	0018      	movs	r0, r3
 800b23e:	f001 f908 	bl	800c452 <USBD_LL_IsStallEP>
 800b242:	1e03      	subs	r3, r0, #0
 800b244:	d003      	beq.n	800b24e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2201      	movs	r2, #1
 800b24a:	601a      	str	r2, [r3, #0]
 800b24c:	e002      	b.n	800b254 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	2200      	movs	r2, #0
 800b252:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b254:	68b9      	ldr	r1, [r7, #8]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2202      	movs	r2, #2
 800b25a:	0018      	movs	r0, r3
 800b25c:	f000 fc34 	bl	800bac8 <USBD_CtlSendData>
              break;
 800b260:	e006      	b.n	800b270 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	0011      	movs	r1, r2
 800b268:	0018      	movs	r0, r3
 800b26a:	f000 fbaf 	bl	800b9cc <USBD_CtlError>
              break;
 800b26e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b270:	e006      	b.n	800b280 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	0011      	movs	r1, r2
 800b278:	0018      	movs	r0, r3
 800b27a:	f000 fba7 	bl	800b9cc <USBD_CtlError>
          break;
 800b27e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b280:	e006      	b.n	800b290 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800b282:	683a      	ldr	r2, [r7, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	0011      	movs	r1, r2
 800b288:	0018      	movs	r0, r3
 800b28a:	f000 fb9f 	bl	800b9cc <USBD_CtlError>
      break;
 800b28e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b290:	230f      	movs	r3, #15
 800b292:	18fb      	adds	r3, r7, r3
 800b294:	781b      	ldrb	r3, [r3, #0]
}
 800b296:	0018      	movs	r0, r3
 800b298:	46bd      	mov	sp, r7
 800b29a:	b004      	add	sp, #16
 800b29c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b2a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2aa:	2308      	movs	r3, #8
 800b2ac:	18fb      	adds	r3, r7, r3
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b2b6:	230b      	movs	r3, #11
 800b2b8:	18fb      	adds	r3, r7, r3
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	885b      	ldrh	r3, [r3, #2]
 800b2c2:	0a1b      	lsrs	r3, r3, #8
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	2b07      	cmp	r3, #7
 800b2c8:	d900      	bls.n	800b2cc <USBD_GetDescriptor+0x2c>
 800b2ca:	e159      	b.n	800b580 <USBD_GetDescriptor+0x2e0>
 800b2cc:	009a      	lsls	r2, r3, #2
 800b2ce:	4bcb      	ldr	r3, [pc, #812]	; (800b5fc <USBD_GetDescriptor+0x35c>)
 800b2d0:	18d3      	adds	r3, r2, r3
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	23ac      	movs	r3, #172	; 0xac
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	58d3      	ldr	r3, [r2, r3]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	7c12      	ldrb	r2, [r2, #16]
 800b2e4:	2108      	movs	r1, #8
 800b2e6:	1879      	adds	r1, r7, r1
 800b2e8:	0010      	movs	r0, r2
 800b2ea:	4798      	blx	r3
 800b2ec:	0003      	movs	r3, r0
 800b2ee:	60fb      	str	r3, [r7, #12]
      break;
 800b2f0:	e153      	b.n	800b59a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	7c1b      	ldrb	r3, [r3, #16]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10f      	bne.n	800b31a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	23ad      	movs	r3, #173	; 0xad
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	58d3      	ldr	r3, [r2, r3]
 800b302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b304:	2208      	movs	r2, #8
 800b306:	18ba      	adds	r2, r7, r2
 800b308:	0010      	movs	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	0003      	movs	r3, r0
 800b30e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	3301      	adds	r3, #1
 800b314:	2202      	movs	r2, #2
 800b316:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b318:	e13f      	b.n	800b59a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	23ad      	movs	r3, #173	; 0xad
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	58d3      	ldr	r3, [r2, r3]
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	2208      	movs	r2, #8
 800b326:	18ba      	adds	r2, r7, r2
 800b328:	0010      	movs	r0, r2
 800b32a:	4798      	blx	r3
 800b32c:	0003      	movs	r3, r0
 800b32e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	3301      	adds	r3, #1
 800b334:	2202      	movs	r2, #2
 800b336:	701a      	strb	r2, [r3, #0]
      break;
 800b338:	e12f      	b.n	800b59a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	885b      	ldrh	r3, [r3, #2]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b05      	cmp	r3, #5
 800b342:	d900      	bls.n	800b346 <USBD_GetDescriptor+0xa6>
 800b344:	e0d0      	b.n	800b4e8 <USBD_GetDescriptor+0x248>
 800b346:	009a      	lsls	r2, r3, #2
 800b348:	4bad      	ldr	r3, [pc, #692]	; (800b600 <USBD_GetDescriptor+0x360>)
 800b34a:	18d3      	adds	r3, r2, r3
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	23ac      	movs	r3, #172	; 0xac
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	58d3      	ldr	r3, [r2, r3]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00d      	beq.n	800b37a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	23ac      	movs	r3, #172	; 0xac
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	58d3      	ldr	r3, [r2, r3]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	7c12      	ldrb	r2, [r2, #16]
 800b36c:	2108      	movs	r1, #8
 800b36e:	1879      	adds	r1, r7, r1
 800b370:	0010      	movs	r0, r2
 800b372:	4798      	blx	r3
 800b374:	0003      	movs	r3, r0
 800b376:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b378:	e0c3      	b.n	800b502 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	0011      	movs	r1, r2
 800b380:	0018      	movs	r0, r3
 800b382:	f000 fb23 	bl	800b9cc <USBD_CtlError>
            err++;
 800b386:	210b      	movs	r1, #11
 800b388:	187b      	adds	r3, r7, r1
 800b38a:	781a      	ldrb	r2, [r3, #0]
 800b38c:	187b      	adds	r3, r7, r1
 800b38e:	3201      	adds	r2, #1
 800b390:	701a      	strb	r2, [r3, #0]
          break;
 800b392:	e0b6      	b.n	800b502 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	23ac      	movs	r3, #172	; 0xac
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	58d3      	ldr	r3, [r2, r3]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00d      	beq.n	800b3be <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	23ac      	movs	r3, #172	; 0xac
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	58d3      	ldr	r3, [r2, r3]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	7c12      	ldrb	r2, [r2, #16]
 800b3b0:	2108      	movs	r1, #8
 800b3b2:	1879      	adds	r1, r7, r1
 800b3b4:	0010      	movs	r0, r2
 800b3b6:	4798      	blx	r3
 800b3b8:	0003      	movs	r3, r0
 800b3ba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3bc:	e0a1      	b.n	800b502 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	0011      	movs	r1, r2
 800b3c4:	0018      	movs	r0, r3
 800b3c6:	f000 fb01 	bl	800b9cc <USBD_CtlError>
            err++;
 800b3ca:	210b      	movs	r1, #11
 800b3cc:	187b      	adds	r3, r7, r1
 800b3ce:	781a      	ldrb	r2, [r3, #0]
 800b3d0:	187b      	adds	r3, r7, r1
 800b3d2:	3201      	adds	r2, #1
 800b3d4:	701a      	strb	r2, [r3, #0]
          break;
 800b3d6:	e094      	b.n	800b502 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	23ac      	movs	r3, #172	; 0xac
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	58d3      	ldr	r3, [r2, r3]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00d      	beq.n	800b402 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	23ac      	movs	r3, #172	; 0xac
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	58d3      	ldr	r3, [r2, r3]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	7c12      	ldrb	r2, [r2, #16]
 800b3f4:	2108      	movs	r1, #8
 800b3f6:	1879      	adds	r1, r7, r1
 800b3f8:	0010      	movs	r0, r2
 800b3fa:	4798      	blx	r3
 800b3fc:	0003      	movs	r3, r0
 800b3fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b400:	e07f      	b.n	800b502 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	0011      	movs	r1, r2
 800b408:	0018      	movs	r0, r3
 800b40a:	f000 fadf 	bl	800b9cc <USBD_CtlError>
            err++;
 800b40e:	210b      	movs	r1, #11
 800b410:	187b      	adds	r3, r7, r1
 800b412:	781a      	ldrb	r2, [r3, #0]
 800b414:	187b      	adds	r3, r7, r1
 800b416:	3201      	adds	r2, #1
 800b418:	701a      	strb	r2, [r3, #0]
          break;
 800b41a:	e072      	b.n	800b502 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	23ac      	movs	r3, #172	; 0xac
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	58d3      	ldr	r3, [r2, r3]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00d      	beq.n	800b446 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	23ac      	movs	r3, #172	; 0xac
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	58d3      	ldr	r3, [r2, r3]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	7c12      	ldrb	r2, [r2, #16]
 800b438:	2108      	movs	r1, #8
 800b43a:	1879      	adds	r1, r7, r1
 800b43c:	0010      	movs	r0, r2
 800b43e:	4798      	blx	r3
 800b440:	0003      	movs	r3, r0
 800b442:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b444:	e05d      	b.n	800b502 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	0011      	movs	r1, r2
 800b44c:	0018      	movs	r0, r3
 800b44e:	f000 fabd 	bl	800b9cc <USBD_CtlError>
            err++;
 800b452:	210b      	movs	r1, #11
 800b454:	187b      	adds	r3, r7, r1
 800b456:	781a      	ldrb	r2, [r3, #0]
 800b458:	187b      	adds	r3, r7, r1
 800b45a:	3201      	adds	r2, #1
 800b45c:	701a      	strb	r2, [r3, #0]
          break;
 800b45e:	e050      	b.n	800b502 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	23ac      	movs	r3, #172	; 0xac
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	58d3      	ldr	r3, [r2, r3]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00d      	beq.n	800b48a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	23ac      	movs	r3, #172	; 0xac
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	58d3      	ldr	r3, [r2, r3]
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	7c12      	ldrb	r2, [r2, #16]
 800b47c:	2108      	movs	r1, #8
 800b47e:	1879      	adds	r1, r7, r1
 800b480:	0010      	movs	r0, r2
 800b482:	4798      	blx	r3
 800b484:	0003      	movs	r3, r0
 800b486:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b488:	e03b      	b.n	800b502 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b48a:	683a      	ldr	r2, [r7, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	0011      	movs	r1, r2
 800b490:	0018      	movs	r0, r3
 800b492:	f000 fa9b 	bl	800b9cc <USBD_CtlError>
            err++;
 800b496:	210b      	movs	r1, #11
 800b498:	187b      	adds	r3, r7, r1
 800b49a:	781a      	ldrb	r2, [r3, #0]
 800b49c:	187b      	adds	r3, r7, r1
 800b49e:	3201      	adds	r2, #1
 800b4a0:	701a      	strb	r2, [r3, #0]
          break;
 800b4a2:	e02e      	b.n	800b502 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	23ac      	movs	r3, #172	; 0xac
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	58d3      	ldr	r3, [r2, r3]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00d      	beq.n	800b4ce <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	23ac      	movs	r3, #172	; 0xac
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	58d3      	ldr	r3, [r2, r3]
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	7c12      	ldrb	r2, [r2, #16]
 800b4c0:	2108      	movs	r1, #8
 800b4c2:	1879      	adds	r1, r7, r1
 800b4c4:	0010      	movs	r0, r2
 800b4c6:	4798      	blx	r3
 800b4c8:	0003      	movs	r3, r0
 800b4ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4cc:	e019      	b.n	800b502 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	0011      	movs	r1, r2
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f000 fa79 	bl	800b9cc <USBD_CtlError>
            err++;
 800b4da:	210b      	movs	r1, #11
 800b4dc:	187b      	adds	r3, r7, r1
 800b4de:	781a      	ldrb	r2, [r3, #0]
 800b4e0:	187b      	adds	r3, r7, r1
 800b4e2:	3201      	adds	r2, #1
 800b4e4:	701a      	strb	r2, [r3, #0]
          break;
 800b4e6:	e00c      	b.n	800b502 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b4e8:	683a      	ldr	r2, [r7, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	0011      	movs	r1, r2
 800b4ee:	0018      	movs	r0, r3
 800b4f0:	f000 fa6c 	bl	800b9cc <USBD_CtlError>
          err++;
 800b4f4:	210b      	movs	r1, #11
 800b4f6:	187b      	adds	r3, r7, r1
 800b4f8:	781a      	ldrb	r2, [r3, #0]
 800b4fa:	187b      	adds	r3, r7, r1
 800b4fc:	3201      	adds	r2, #1
 800b4fe:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800b500:	e04b      	b.n	800b59a <USBD_GetDescriptor+0x2fa>
 800b502:	e04a      	b.n	800b59a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	7c1b      	ldrb	r3, [r3, #16]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10b      	bne.n	800b524 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	23ad      	movs	r3, #173	; 0xad
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	58d3      	ldr	r3, [r2, r3]
 800b514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b516:	2208      	movs	r2, #8
 800b518:	18ba      	adds	r2, r7, r2
 800b51a:	0010      	movs	r0, r2
 800b51c:	4798      	blx	r3
 800b51e:	0003      	movs	r3, r0
 800b520:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b522:	e03a      	b.n	800b59a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b524:	683a      	ldr	r2, [r7, #0]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	0011      	movs	r1, r2
 800b52a:	0018      	movs	r0, r3
 800b52c:	f000 fa4e 	bl	800b9cc <USBD_CtlError>
        err++;
 800b530:	210b      	movs	r1, #11
 800b532:	187b      	adds	r3, r7, r1
 800b534:	781a      	ldrb	r2, [r3, #0]
 800b536:	187b      	adds	r3, r7, r1
 800b538:	3201      	adds	r2, #1
 800b53a:	701a      	strb	r2, [r3, #0]
      break;
 800b53c:	e02d      	b.n	800b59a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	7c1b      	ldrb	r3, [r3, #16]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d10f      	bne.n	800b566 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	23ad      	movs	r3, #173	; 0xad
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	58d3      	ldr	r3, [r2, r3]
 800b54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b550:	2208      	movs	r2, #8
 800b552:	18ba      	adds	r2, r7, r2
 800b554:	0010      	movs	r0, r2
 800b556:	4798      	blx	r3
 800b558:	0003      	movs	r3, r0
 800b55a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	3301      	adds	r3, #1
 800b560:	2207      	movs	r2, #7
 800b562:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b564:	e019      	b.n	800b59a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	0011      	movs	r1, r2
 800b56c:	0018      	movs	r0, r3
 800b56e:	f000 fa2d 	bl	800b9cc <USBD_CtlError>
        err++;
 800b572:	210b      	movs	r1, #11
 800b574:	187b      	adds	r3, r7, r1
 800b576:	781a      	ldrb	r2, [r3, #0]
 800b578:	187b      	adds	r3, r7, r1
 800b57a:	3201      	adds	r2, #1
 800b57c:	701a      	strb	r2, [r3, #0]
      break;
 800b57e:	e00c      	b.n	800b59a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800b580:	683a      	ldr	r2, [r7, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	0011      	movs	r1, r2
 800b586:	0018      	movs	r0, r3
 800b588:	f000 fa20 	bl	800b9cc <USBD_CtlError>
      err++;
 800b58c:	210b      	movs	r1, #11
 800b58e:	187b      	adds	r3, r7, r1
 800b590:	781a      	ldrb	r2, [r3, #0]
 800b592:	187b      	adds	r3, r7, r1
 800b594:	3201      	adds	r2, #1
 800b596:	701a      	strb	r2, [r3, #0]
      break;
 800b598:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800b59a:	230b      	movs	r3, #11
 800b59c:	18fb      	adds	r3, r7, r3
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d127      	bne.n	800b5f4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b5a4:	2108      	movs	r1, #8
 800b5a6:	187b      	adds	r3, r7, r1
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d019      	beq.n	800b5e2 <USBD_GetDescriptor+0x342>
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	88db      	ldrh	r3, [r3, #6]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d015      	beq.n	800b5e2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	88da      	ldrh	r2, [r3, #6]
 800b5ba:	187b      	adds	r3, r7, r1
 800b5bc:	881b      	ldrh	r3, [r3, #0]
 800b5be:	1c18      	adds	r0, r3, #0
 800b5c0:	1c11      	adds	r1, r2, #0
 800b5c2:	b28a      	uxth	r2, r1
 800b5c4:	b283      	uxth	r3, r0
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d900      	bls.n	800b5cc <USBD_GetDescriptor+0x32c>
 800b5ca:	1c01      	adds	r1, r0, #0
 800b5cc:	b28a      	uxth	r2, r1
 800b5ce:	2108      	movs	r1, #8
 800b5d0:	187b      	adds	r3, r7, r1
 800b5d2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b5d4:	187b      	adds	r3, r7, r1
 800b5d6:	881a      	ldrh	r2, [r3, #0]
 800b5d8:	68f9      	ldr	r1, [r7, #12]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	0018      	movs	r0, r3
 800b5de:	f000 fa73 	bl	800bac8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	88db      	ldrh	r3, [r3, #6]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d105      	bne.n	800b5f6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	0018      	movs	r0, r3
 800b5ee:	f000 fad5 	bl	800bb9c <USBD_CtlSendStatus>
 800b5f2:	e000      	b.n	800b5f6 <USBD_GetDescriptor+0x356>
    return;
 800b5f4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	b004      	add	sp, #16
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	0800d13c 	.word	0x0800d13c
 800b600:	0800d15c 	.word	0x0800d15c

0800b604 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b604:	b590      	push	{r4, r7, lr}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	889b      	ldrh	r3, [r3, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d13d      	bne.n	800b692 <USBD_SetAddress+0x8e>
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	88db      	ldrh	r3, [r3, #6]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d139      	bne.n	800b692 <USBD_SetAddress+0x8e>
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	885b      	ldrh	r3, [r3, #2]
 800b622:	2b7f      	cmp	r3, #127	; 0x7f
 800b624:	d835      	bhi.n	800b692 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	885b      	ldrh	r3, [r3, #2]
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	230f      	movs	r3, #15
 800b62e:	18fb      	adds	r3, r7, r3
 800b630:	217f      	movs	r1, #127	; 0x7f
 800b632:	400a      	ands	r2, r1
 800b634:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	23a7      	movs	r3, #167	; 0xa7
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	5cd3      	ldrb	r3, [r2, r3]
 800b63e:	2b03      	cmp	r3, #3
 800b640:	d106      	bne.n	800b650 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	0011      	movs	r1, r2
 800b648:	0018      	movs	r0, r3
 800b64a:	f000 f9bf 	bl	800b9cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b64e:	e027      	b.n	800b6a0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	240f      	movs	r4, #15
 800b654:	193a      	adds	r2, r7, r4
 800b656:	4914      	ldr	r1, [pc, #80]	; (800b6a8 <USBD_SetAddress+0xa4>)
 800b658:	7812      	ldrb	r2, [r2, #0]
 800b65a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b65c:	193b      	adds	r3, r7, r4
 800b65e:	781a      	ldrb	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	0011      	movs	r1, r2
 800b664:	0018      	movs	r0, r3
 800b666:	f000 ff25 	bl	800c4b4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	0018      	movs	r0, r3
 800b66e:	f000 fa95 	bl	800bb9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b672:	193b      	adds	r3, r7, r4
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d005      	beq.n	800b686 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	23a7      	movs	r3, #167	; 0xa7
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	2102      	movs	r1, #2
 800b682:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b684:	e00c      	b.n	800b6a0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	23a7      	movs	r3, #167	; 0xa7
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	2101      	movs	r1, #1
 800b68e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b690:	e006      	b.n	800b6a0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b692:	683a      	ldr	r2, [r7, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	0011      	movs	r1, r2
 800b698:	0018      	movs	r0, r3
 800b69a:	f000 f997 	bl	800b9cc <USBD_CtlError>
  }
}
 800b69e:	46c0      	nop			; (mov r8, r8)
 800b6a0:	46c0      	nop			; (mov r8, r8)
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	b005      	add	sp, #20
 800b6a6:	bd90      	pop	{r4, r7, pc}
 800b6a8:	0000029e 	.word	0x0000029e

0800b6ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	885b      	ldrh	r3, [r3, #2]
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	4b4c      	ldr	r3, [pc, #304]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b6be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6c0:	4b4b      	ldr	r3, [pc, #300]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d906      	bls.n	800b6d6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	0011      	movs	r1, r2
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	f000 f97c 	bl	800b9cc <USBD_CtlError>
 800b6d4:	e088      	b.n	800b7e8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	23a7      	movs	r3, #167	; 0xa7
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	5cd3      	ldrb	r3, [r2, r3]
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d002      	beq.n	800b6e8 <USBD_SetConfig+0x3c>
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	d029      	beq.n	800b73a <USBD_SetConfig+0x8e>
 800b6e6:	e071      	b.n	800b7cc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b6e8:	4b41      	ldr	r3, [pc, #260]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d01f      	beq.n	800b730 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800b6f0:	4b3f      	ldr	r3, [pc, #252]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	001a      	movs	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	23a7      	movs	r3, #167	; 0xa7
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	2103      	movs	r1, #3
 800b702:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b704:	4b3a      	ldr	r3, [pc, #232]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b706:	781a      	ldrb	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	0011      	movs	r1, r2
 800b70c:	0018      	movs	r0, r3
 800b70e:	f7ff f8c6 	bl	800a89e <USBD_SetClassConfig>
 800b712:	0003      	movs	r3, r0
 800b714:	2b02      	cmp	r3, #2
 800b716:	d106      	bne.n	800b726 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	0011      	movs	r1, r2
 800b71e:	0018      	movs	r0, r3
 800b720:	f000 f954 	bl	800b9cc <USBD_CtlError>
            return;
 800b724:	e060      	b.n	800b7e8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	0018      	movs	r0, r3
 800b72a:	f000 fa37 	bl	800bb9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b72e:	e05b      	b.n	800b7e8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	0018      	movs	r0, r3
 800b734:	f000 fa32 	bl	800bb9c <USBD_CtlSendStatus>
        break;
 800b738:	e056      	b.n	800b7e8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b73a:	4b2d      	ldr	r3, [pc, #180]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d115      	bne.n	800b76e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	23a7      	movs	r3, #167	; 0xa7
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	2102      	movs	r1, #2
 800b74a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800b74c:	4b28      	ldr	r3, [pc, #160]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	001a      	movs	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b756:	4b26      	ldr	r3, [pc, #152]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b758:	781a      	ldrb	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	0011      	movs	r1, r2
 800b75e:	0018      	movs	r0, r3
 800b760:	f7ff f8c4 	bl	800a8ec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	0018      	movs	r0, r3
 800b768:	f000 fa18 	bl	800bb9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b76c:	e03c      	b.n	800b7e8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800b76e:	4b20      	ldr	r3, [pc, #128]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	001a      	movs	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d022      	beq.n	800b7c2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	b2da      	uxtb	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	0011      	movs	r1, r2
 800b786:	0018      	movs	r0, r3
 800b788:	f7ff f8b0 	bl	800a8ec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b78c:	4b18      	ldr	r3, [pc, #96]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	001a      	movs	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b796:	4b16      	ldr	r3, [pc, #88]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b798:	781a      	ldrb	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	0011      	movs	r1, r2
 800b79e:	0018      	movs	r0, r3
 800b7a0:	f7ff f87d 	bl	800a89e <USBD_SetClassConfig>
 800b7a4:	0003      	movs	r3, r0
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d106      	bne.n	800b7b8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	0011      	movs	r1, r2
 800b7b0:	0018      	movs	r0, r3
 800b7b2:	f000 f90b 	bl	800b9cc <USBD_CtlError>
            return;
 800b7b6:	e017      	b.n	800b7e8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	0018      	movs	r0, r3
 800b7bc:	f000 f9ee 	bl	800bb9c <USBD_CtlSendStatus>
        break;
 800b7c0:	e012      	b.n	800b7e8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	0018      	movs	r0, r3
 800b7c6:	f000 f9e9 	bl	800bb9c <USBD_CtlSendStatus>
        break;
 800b7ca:	e00d      	b.n	800b7e8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	0011      	movs	r1, r2
 800b7d2:	0018      	movs	r0, r3
 800b7d4:	f000 f8fa 	bl	800b9cc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b7d8:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <USBD_SetConfig+0x144>)
 800b7da:	781a      	ldrb	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	0011      	movs	r1, r2
 800b7e0:	0018      	movs	r0, r3
 800b7e2:	f7ff f883 	bl	800a8ec <USBD_ClrClassConfig>
        break;
 800b7e6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	b002      	add	sp, #8
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	46c0      	nop			; (mov r8, r8)
 800b7f0:	20000264 	.word	0x20000264

0800b7f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	88db      	ldrh	r3, [r3, #6]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d006      	beq.n	800b814 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	0011      	movs	r1, r2
 800b80c:	0018      	movs	r0, r3
 800b80e:	f000 f8dd 	bl	800b9cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b812:	e026      	b.n	800b862 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	23a7      	movs	r3, #167	; 0xa7
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	5cd3      	ldrb	r3, [r2, r3]
 800b81c:	2b02      	cmp	r3, #2
 800b81e:	dc02      	bgt.n	800b826 <USBD_GetConfig+0x32>
 800b820:	2b00      	cmp	r3, #0
 800b822:	dc03      	bgt.n	800b82c <USBD_GetConfig+0x38>
 800b824:	e016      	b.n	800b854 <USBD_GetConfig+0x60>
 800b826:	2b03      	cmp	r3, #3
 800b828:	d00c      	beq.n	800b844 <USBD_GetConfig+0x50>
 800b82a:	e013      	b.n	800b854 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3308      	adds	r3, #8
 800b836:	0019      	movs	r1, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	0018      	movs	r0, r3
 800b83e:	f000 f943 	bl	800bac8 <USBD_CtlSendData>
        break;
 800b842:	e00e      	b.n	800b862 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	1d19      	adds	r1, r3, #4
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	0018      	movs	r0, r3
 800b84e:	f000 f93b 	bl	800bac8 <USBD_CtlSendData>
        break;
 800b852:	e006      	b.n	800b862 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	0011      	movs	r1, r2
 800b85a:	0018      	movs	r0, r3
 800b85c:	f000 f8b6 	bl	800b9cc <USBD_CtlError>
        break;
 800b860:	46c0      	nop			; (mov r8, r8)
}
 800b862:	46c0      	nop			; (mov r8, r8)
 800b864:	46bd      	mov	sp, r7
 800b866:	b002      	add	sp, #8
 800b868:	bd80      	pop	{r7, pc}

0800b86a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	23a7      	movs	r3, #167	; 0xa7
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	5cd3      	ldrb	r3, [r2, r3]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d822      	bhi.n	800b8c8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	88db      	ldrh	r3, [r3, #6]
 800b886:	2b02      	cmp	r3, #2
 800b888:	d006      	beq.n	800b898 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800b88a:	683a      	ldr	r2, [r7, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	0011      	movs	r1, r2
 800b890:	0018      	movs	r0, r3
 800b892:	f000 f89b 	bl	800b9cc <USBD_CtlError>
        break;
 800b896:	e01e      	b.n	800b8d6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	23a9      	movs	r3, #169	; 0xa9
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	58d3      	ldr	r3, [r2, r3]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	431a      	orrs	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	330c      	adds	r3, #12
 800b8ba:	0019      	movs	r1, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2202      	movs	r2, #2
 800b8c0:	0018      	movs	r0, r3
 800b8c2:	f000 f901 	bl	800bac8 <USBD_CtlSendData>
      break;
 800b8c6:	e006      	b.n	800b8d6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800b8c8:	683a      	ldr	r2, [r7, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	0011      	movs	r1, r2
 800b8ce:	0018      	movs	r0, r3
 800b8d0:	f000 f87c 	bl	800b9cc <USBD_CtlError>
      break;
 800b8d4:	46c0      	nop			; (mov r8, r8)
  }
}
 800b8d6:	46c0      	nop			; (mov r8, r8)
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	b002      	add	sp, #8
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b082      	sub	sp, #8
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	885b      	ldrh	r3, [r3, #2]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d108      	bne.n	800b902 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	23a9      	movs	r3, #169	; 0xa9
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f000 f94d 	bl	800bb9c <USBD_CtlSendStatus>
  }
}
 800b902:	46c0      	nop			; (mov r8, r8)
 800b904:	46bd      	mov	sp, r7
 800b906:	b002      	add	sp, #8
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	23a7      	movs	r3, #167	; 0xa7
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	5cd3      	ldrb	r3, [r2, r3]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d80d      	bhi.n	800b93e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	885b      	ldrh	r3, [r3, #2]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d110      	bne.n	800b94c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	23a9      	movs	r3, #169	; 0xa9
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	2100      	movs	r1, #0
 800b932:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	0018      	movs	r0, r3
 800b938:	f000 f930 	bl	800bb9c <USBD_CtlSendStatus>
      }
      break;
 800b93c:	e006      	b.n	800b94c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	0011      	movs	r1, r2
 800b944:	0018      	movs	r0, r3
 800b946:	f000 f841 	bl	800b9cc <USBD_CtlError>
      break;
 800b94a:	e000      	b.n	800b94e <USBD_ClrFeature+0x44>
      break;
 800b94c:	46c0      	nop			; (mov r8, r8)
  }
}
 800b94e:	46c0      	nop			; (mov r8, r8)
 800b950:	46bd      	mov	sp, r7
 800b952:	b002      	add	sp, #8
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	781a      	ldrb	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	785a      	ldrb	r2, [r3, #1]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	3302      	adds	r3, #2
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	b29a      	uxth	r2, r3
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	3303      	adds	r3, #3
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	b29b      	uxth	r3, r3
 800b980:	021b      	lsls	r3, r3, #8
 800b982:	b29b      	uxth	r3, r3
 800b984:	18d3      	adds	r3, r2, r3
 800b986:	b29a      	uxth	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	3304      	adds	r3, #4
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	b29a      	uxth	r2, r3
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	3305      	adds	r3, #5
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	021b      	lsls	r3, r3, #8
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	18d3      	adds	r3, r2, r3
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	3306      	adds	r3, #6
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	3307      	adds	r3, #7
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	021b      	lsls	r3, r3, #8
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	18d3      	adds	r3, r2, r3
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	80da      	strh	r2, [r3, #6]

}
 800b9c4:	46c0      	nop			; (mov r8, r8)
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	b002      	add	sp, #8
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2180      	movs	r1, #128	; 0x80
 800b9da:	0018      	movs	r0, r3
 800b9dc:	f000 fce3 	bl	800c3a6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	0018      	movs	r0, r3
 800b9e6:	f000 fcde 	bl	800c3a6 <USBD_LL_StallEP>
}
 800b9ea:	46c0      	nop			; (mov r8, r8)
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	b002      	add	sp, #8
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9f2:	b590      	push	{r4, r7, lr}
 800b9f4:	b087      	sub	sp, #28
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	60f8      	str	r0, [r7, #12]
 800b9fa:	60b9      	str	r1, [r7, #8]
 800b9fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9fe:	2417      	movs	r4, #23
 800ba00:	193b      	adds	r3, r7, r4
 800ba02:	2200      	movs	r2, #0
 800ba04:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d03c      	beq.n	800ba86 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	0018      	movs	r0, r3
 800ba10:	f000 f83d 	bl	800ba8e <USBD_GetLen>
 800ba14:	0003      	movs	r3, r0
 800ba16:	3301      	adds	r3, #1
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	18db      	adds	r3, r3, r3
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ba22:	193b      	adds	r3, r7, r4
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	193a      	adds	r2, r7, r4
 800ba28:	1c59      	adds	r1, r3, #1
 800ba2a:	7011      	strb	r1, [r2, #0]
 800ba2c:	001a      	movs	r2, r3
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	189b      	adds	r3, r3, r2
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	7812      	ldrb	r2, [r2, #0]
 800ba36:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ba38:	193b      	adds	r3, r7, r4
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	193a      	adds	r2, r7, r4
 800ba3e:	1c59      	adds	r1, r3, #1
 800ba40:	7011      	strb	r1, [r2, #0]
 800ba42:	001a      	movs	r2, r3
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	189b      	adds	r3, r3, r2
 800ba48:	2203      	movs	r2, #3
 800ba4a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ba4c:	e017      	b.n	800ba7e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	60fa      	str	r2, [r7, #12]
 800ba54:	2417      	movs	r4, #23
 800ba56:	193a      	adds	r2, r7, r4
 800ba58:	7812      	ldrb	r2, [r2, #0]
 800ba5a:	1939      	adds	r1, r7, r4
 800ba5c:	1c50      	adds	r0, r2, #1
 800ba5e:	7008      	strb	r0, [r1, #0]
 800ba60:	0011      	movs	r1, r2
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	1852      	adds	r2, r2, r1
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ba6a:	193b      	adds	r3, r7, r4
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	193a      	adds	r2, r7, r4
 800ba70:	1c59      	adds	r1, r3, #1
 800ba72:	7011      	strb	r1, [r2, #0]
 800ba74:	001a      	movs	r2, r3
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	189b      	adds	r3, r3, r2
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1e3      	bne.n	800ba4e <USBD_GetString+0x5c>
    }
  }
}
 800ba86:	46c0      	nop			; (mov r8, r8)
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	b007      	add	sp, #28
 800ba8c:	bd90      	pop	{r4, r7, pc}

0800ba8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b084      	sub	sp, #16
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba96:	230f      	movs	r3, #15
 800ba98:	18fb      	adds	r3, r7, r3
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800ba9e:	e008      	b.n	800bab2 <USBD_GetLen+0x24>
  {
    len++;
 800baa0:	210f      	movs	r1, #15
 800baa2:	187b      	adds	r3, r7, r1
 800baa4:	781a      	ldrb	r2, [r3, #0]
 800baa6:	187b      	adds	r3, r7, r1
 800baa8:	3201      	adds	r2, #1
 800baaa:	701a      	strb	r2, [r3, #0]
    buf++;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3301      	adds	r3, #1
 800bab0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1f2      	bne.n	800baa0 <USBD_GetLen+0x12>
  }

  return len;
 800baba:	230f      	movs	r3, #15
 800babc:	18fb      	adds	r3, r7, r3
 800babe:	781b      	ldrb	r3, [r3, #0]
}
 800bac0:	0018      	movs	r0, r3
 800bac2:	46bd      	mov	sp, r7
 800bac4:	b004      	add	sp, #16
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	1dbb      	adds	r3, r7, #6
 800bad4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	23a5      	movs	r3, #165	; 0xa5
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	2102      	movs	r1, #2
 800bade:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800bae0:	1dbb      	adds	r3, r7, #6
 800bae2:	881a      	ldrh	r2, [r3, #0]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bae8:	1dbb      	adds	r3, r7, #6
 800baea:	881a      	ldrh	r2, [r3, #0]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800baf0:	1dbb      	adds	r3, r7, #6
 800baf2:	881b      	ldrh	r3, [r3, #0]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	2100      	movs	r1, #0
 800bafa:	f000 fd06 	bl	800c50a <USBD_LL_Transmit>

  return USBD_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	0018      	movs	r0, r3
 800bb02:	46bd      	mov	sp, r7
 800bb04:	b004      	add	sp, #16
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	1dbb      	adds	r3, r7, #6
 800bb14:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb16:	1dbb      	adds	r3, r7, #6
 800bb18:	881b      	ldrh	r3, [r3, #0]
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	2100      	movs	r1, #0
 800bb20:	f000 fcf3 	bl	800c50a <USBD_LL_Transmit>

  return USBD_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	0018      	movs	r0, r3
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	b004      	add	sp, #16
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b084      	sub	sp, #16
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	60f8      	str	r0, [r7, #12]
 800bb36:	60b9      	str	r1, [r7, #8]
 800bb38:	1dbb      	adds	r3, r7, #6
 800bb3a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	23a5      	movs	r3, #165	; 0xa5
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	2103      	movs	r1, #3
 800bb44:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800bb46:	1dbb      	adds	r3, r7, #6
 800bb48:	8819      	ldrh	r1, [r3, #0]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	23ae      	movs	r3, #174	; 0xae
 800bb4e:	005b      	lsls	r3, r3, #1
 800bb50:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800bb52:	1dbb      	adds	r3, r7, #6
 800bb54:	8819      	ldrh	r1, [r3, #0]
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	23b0      	movs	r3, #176	; 0xb0
 800bb5a:	005b      	lsls	r3, r3, #1
 800bb5c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb5e:	1dbb      	adds	r3, r7, #6
 800bb60:	881b      	ldrh	r3, [r3, #0]
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	2100      	movs	r1, #0
 800bb68:	f000 fd06 	bl	800c578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	0018      	movs	r0, r3
 800bb70:	46bd      	mov	sp, r7
 800bb72:	b004      	add	sp, #16
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b084      	sub	sp, #16
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	60f8      	str	r0, [r7, #12]
 800bb7e:	60b9      	str	r1, [r7, #8]
 800bb80:	1dbb      	adds	r3, r7, #6
 800bb82:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb84:	1dbb      	adds	r3, r7, #6
 800bb86:	881b      	ldrh	r3, [r3, #0]
 800bb88:	68ba      	ldr	r2, [r7, #8]
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	f000 fcf3 	bl	800c578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	0018      	movs	r0, r3
 800bb96:	46bd      	mov	sp, r7
 800bb98:	b004      	add	sp, #16
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	23a5      	movs	r3, #165	; 0xa5
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	2104      	movs	r1, #4
 800bbac:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	f000 fca8 	bl	800c50a <USBD_LL_Transmit>

  return USBD_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	0018      	movs	r0, r3
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	b002      	add	sp, #8
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	23a5      	movs	r3, #165	; 0xa5
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	2105      	movs	r1, #5
 800bbd4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2100      	movs	r1, #0
 800bbde:	f000 fccb 	bl	800c578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	0018      	movs	r0, r3
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	b002      	add	sp, #8
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bbf0:	4914      	ldr	r1, [pc, #80]	; (800bc44 <MX_USB_DEVICE_Init+0x58>)
 800bbf2:	4b15      	ldr	r3, [pc, #84]	; (800bc48 <MX_USB_DEVICE_Init+0x5c>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	0018      	movs	r0, r3
 800bbf8:	f7fe fdea 	bl	800a7d0 <USBD_Init>
 800bbfc:	1e03      	subs	r3, r0, #0
 800bbfe:	d001      	beq.n	800bc04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc00:	f7f5 fd2c 	bl	800165c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc04:	4a11      	ldr	r2, [pc, #68]	; (800bc4c <MX_USB_DEVICE_Init+0x60>)
 800bc06:	4b10      	ldr	r3, [pc, #64]	; (800bc48 <MX_USB_DEVICE_Init+0x5c>)
 800bc08:	0011      	movs	r1, r2
 800bc0a:	0018      	movs	r0, r3
 800bc0c:	f7fe fe11 	bl	800a832 <USBD_RegisterClass>
 800bc10:	1e03      	subs	r3, r0, #0
 800bc12:	d001      	beq.n	800bc18 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800bc14:	f7f5 fd22 	bl	800165c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc18:	4a0d      	ldr	r2, [pc, #52]	; (800bc50 <MX_USB_DEVICE_Init+0x64>)
 800bc1a:	4b0b      	ldr	r3, [pc, #44]	; (800bc48 <MX_USB_DEVICE_Init+0x5c>)
 800bc1c:	0011      	movs	r1, r2
 800bc1e:	0018      	movs	r0, r3
 800bc20:	f7fe fd26 	bl	800a670 <USBD_CDC_RegisterInterface>
 800bc24:	1e03      	subs	r3, r0, #0
 800bc26:	d001      	beq.n	800bc2c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800bc28:	f7f5 fd18 	bl	800165c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc2c:	4b06      	ldr	r3, [pc, #24]	; (800bc48 <MX_USB_DEVICE_Init+0x5c>)
 800bc2e:	0018      	movs	r0, r3
 800bc30:	f7fe fe1f 	bl	800a872 <USBD_Start>
 800bc34:	1e03      	subs	r3, r0, #0
 800bc36:	d001      	beq.n	800bc3c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800bc38:	f7f5 fd10 	bl	800165c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc3c:	46c0      	nop			; (mov r8, r8)
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	46c0      	nop			; (mov r8, r8)
 800bc44:	2000012c 	.word	0x2000012c
 800bc48:	20000694 	.word	0x20000694
 800bc4c:	20000018 	.word	0x20000018
 800bc50:	2000011c 	.word	0x2000011c

0800bc54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc58:	4907      	ldr	r1, [pc, #28]	; (800bc78 <CDC_Init_FS+0x24>)
 800bc5a:	4b08      	ldr	r3, [pc, #32]	; (800bc7c <CDC_Init_FS+0x28>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	0018      	movs	r0, r3
 800bc60:	f7fe fd21 	bl	800a6a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc64:	4a06      	ldr	r2, [pc, #24]	; (800bc80 <CDC_Init_FS+0x2c>)
 800bc66:	4b05      	ldr	r3, [pc, #20]	; (800bc7c <CDC_Init_FS+0x28>)
 800bc68:	0011      	movs	r1, r2
 800bc6a:	0018      	movs	r0, r3
 800bc6c:	f7fe fd37 	bl	800a6de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc70:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc72:	0018      	movs	r0, r3
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	20000d40 	.word	0x20000d40
 800bc7c:	20000694 	.word	0x20000694
 800bc80:	20000958 	.word	0x20000958

0800bc84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc8a:	0018      	movs	r0, r3
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6039      	str	r1, [r7, #0]
 800bc98:	0011      	movs	r1, r2
 800bc9a:	1dfb      	adds	r3, r7, #7
 800bc9c:	1c02      	adds	r2, r0, #0
 800bc9e:	701a      	strb	r2, [r3, #0]
 800bca0:	1d3b      	adds	r3, r7, #4
 800bca2:	1c0a      	adds	r2, r1, #0
 800bca4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bca6:	1dfb      	adds	r3, r7, #7
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	2b23      	cmp	r3, #35	; 0x23
 800bcac:	d804      	bhi.n	800bcb8 <CDC_Control_FS+0x28>
 800bcae:	009a      	lsls	r2, r3, #2
 800bcb0:	4b04      	ldr	r3, [pc, #16]	; (800bcc4 <CDC_Control_FS+0x34>)
 800bcb2:	18d3      	adds	r3, r2, r3
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bcb8:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800bcba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	b002      	add	sp, #8
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	0800d174 	.word	0x0800d174

0800bcc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bcc8:	b590      	push	{r4, r7, lr}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800bcd2:	4b18      	ldr	r3, [pc, #96]	; (800bd34 <CDC_Receive_FS+0x6c>)
 800bcd4:	7a1a      	ldrb	r2, [r3, #8]
 800bcd6:	2101      	movs	r1, #1
 800bcd8:	430a      	orrs	r2, r1
 800bcda:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800bcdc:	230f      	movs	r3, #15
 800bcde:	18fb      	adds	r3, r7, r3
 800bce0:	2200      	movs	r2, #0
 800bce2:	701a      	strb	r2, [r3, #0]
 800bce4:	e00f      	b.n	800bd06 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800bce6:	4b14      	ldr	r3, [pc, #80]	; (800bd38 <CDC_Receive_FS+0x70>)
 800bce8:	6818      	ldr	r0, [r3, #0]
 800bcea:	240f      	movs	r4, #15
 800bcec:	193b      	adds	r3, r7, r4
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	18d3      	adds	r3, r2, r3
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	0019      	movs	r1, r3
 800bcf8:	f7f5 fcea 	bl	80016d0 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800bcfc:	193b      	adds	r3, r7, r4
 800bcfe:	781a      	ldrb	r2, [r3, #0]
 800bd00:	193b      	adds	r3, r7, r4
 800bd02:	3201      	adds	r2, #1
 800bd04:	701a      	strb	r2, [r3, #0]
 800bd06:	230f      	movs	r3, #15
 800bd08:	18fb      	adds	r3, r7, r3
 800bd0a:	781a      	ldrb	r2, [r3, #0]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d3e8      	bcc.n	800bce6 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	4b09      	ldr	r3, [pc, #36]	; (800bd3c <CDC_Receive_FS+0x74>)
 800bd18:	0011      	movs	r1, r2
 800bd1a:	0018      	movs	r0, r3
 800bd1c:	f7fe fcdf 	bl	800a6de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd20:	4b06      	ldr	r3, [pc, #24]	; (800bd3c <CDC_Receive_FS+0x74>)
 800bd22:	0018      	movs	r0, r3
 800bd24:	f7fe fd26 	bl	800a774 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bd28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd2a:	0018      	movs	r0, r3
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	b005      	add	sp, #20
 800bd30:	bd90      	pop	{r4, r7, pc}
 800bd32:	46c0      	nop			; (mov r8, r8)
 800bd34:	20000620 	.word	0x20000620
 800bd38:	20001128 	.word	0x20001128
 800bd3c:	20000694 	.word	0x20000694

0800bd40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bd40:	b5b0      	push	{r4, r5, r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	000a      	movs	r2, r1
 800bd4a:	1cbb      	adds	r3, r7, #2
 800bd4c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800bd4e:	230f      	movs	r3, #15
 800bd50:	18fb      	adds	r3, r7, r3
 800bd52:	2200      	movs	r2, #0
 800bd54:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bd56:	4a11      	ldr	r2, [pc, #68]	; (800bd9c <CDC_Transmit_FS+0x5c>)
 800bd58:	23ae      	movs	r3, #174	; 0xae
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	58d3      	ldr	r3, [r2, r3]
 800bd5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	2385      	movs	r3, #133	; 0x85
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	58d3      	ldr	r3, [r2, r3]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d001      	beq.n	800bd70 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e010      	b.n	800bd92 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd70:	1cbb      	adds	r3, r7, #2
 800bd72:	881a      	ldrh	r2, [r3, #0]
 800bd74:	6879      	ldr	r1, [r7, #4]
 800bd76:	4b09      	ldr	r3, [pc, #36]	; (800bd9c <CDC_Transmit_FS+0x5c>)
 800bd78:	0018      	movs	r0, r3
 800bd7a:	f7fe fc94 	bl	800a6a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd7e:	250f      	movs	r5, #15
 800bd80:	197c      	adds	r4, r7, r5
 800bd82:	4b06      	ldr	r3, [pc, #24]	; (800bd9c <CDC_Transmit_FS+0x5c>)
 800bd84:	0018      	movs	r0, r3
 800bd86:	f7fe fcbe 	bl	800a706 <USBD_CDC_TransmitPacket>
 800bd8a:	0003      	movs	r3, r0
 800bd8c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800bd8e:	197b      	adds	r3, r7, r5
 800bd90:	781b      	ldrb	r3, [r3, #0]
}
 800bd92:	0018      	movs	r0, r3
 800bd94:	46bd      	mov	sp, r7
 800bd96:	b004      	add	sp, #16
 800bd98:	bdb0      	pop	{r4, r5, r7, pc}
 800bd9a:	46c0      	nop			; (mov r8, r8)
 800bd9c:	20000694 	.word	0x20000694

0800bda0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	0002      	movs	r2, r0
 800bda8:	6039      	str	r1, [r7, #0]
 800bdaa:	1dfb      	adds	r3, r7, #7
 800bdac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	2212      	movs	r2, #18
 800bdb2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdb4:	4b02      	ldr	r3, [pc, #8]	; (800bdc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bdb6:	0018      	movs	r0, r3
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	b002      	add	sp, #8
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	46c0      	nop			; (mov r8, r8)
 800bdc0:	20000148 	.word	0x20000148

0800bdc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	0002      	movs	r2, r0
 800bdcc:	6039      	str	r1, [r7, #0]
 800bdce:	1dfb      	adds	r3, r7, #7
 800bdd0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	2204      	movs	r2, #4
 800bdd6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdd8:	4b02      	ldr	r3, [pc, #8]	; (800bde4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bdda:	0018      	movs	r0, r3
 800bddc:	46bd      	mov	sp, r7
 800bdde:	b002      	add	sp, #8
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	46c0      	nop			; (mov r8, r8)
 800bde4:	2000015c 	.word	0x2000015c

0800bde8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	0002      	movs	r2, r0
 800bdf0:	6039      	str	r1, [r7, #0]
 800bdf2:	1dfb      	adds	r3, r7, #7
 800bdf4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800bdf6:	1dfb      	adds	r3, r7, #7
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d106      	bne.n	800be0c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	4908      	ldr	r1, [pc, #32]	; (800be24 <USBD_FS_ProductStrDescriptor+0x3c>)
 800be02:	4b09      	ldr	r3, [pc, #36]	; (800be28 <USBD_FS_ProductStrDescriptor+0x40>)
 800be04:	0018      	movs	r0, r3
 800be06:	f7ff fdf4 	bl	800b9f2 <USBD_GetString>
 800be0a:	e005      	b.n	800be18 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be0c:	683a      	ldr	r2, [r7, #0]
 800be0e:	4905      	ldr	r1, [pc, #20]	; (800be24 <USBD_FS_ProductStrDescriptor+0x3c>)
 800be10:	4b05      	ldr	r3, [pc, #20]	; (800be28 <USBD_FS_ProductStrDescriptor+0x40>)
 800be12:	0018      	movs	r0, r3
 800be14:	f7ff fded 	bl	800b9f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be18:	4b02      	ldr	r3, [pc, #8]	; (800be24 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800be1a:	0018      	movs	r0, r3
 800be1c:	46bd      	mov	sp, r7
 800be1e:	b002      	add	sp, #8
 800be20:	bd80      	pop	{r7, pc}
 800be22:	46c0      	nop			; (mov r8, r8)
 800be24:	2000112c 	.word	0x2000112c
 800be28:	0800d020 	.word	0x0800d020

0800be2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	0002      	movs	r2, r0
 800be34:	6039      	str	r1, [r7, #0]
 800be36:	1dfb      	adds	r3, r7, #7
 800be38:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	4904      	ldr	r1, [pc, #16]	; (800be50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be3e:	4b05      	ldr	r3, [pc, #20]	; (800be54 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800be40:	0018      	movs	r0, r3
 800be42:	f7ff fdd6 	bl	800b9f2 <USBD_GetString>
  return USBD_StrDesc;
 800be46:	4b02      	ldr	r3, [pc, #8]	; (800be50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800be48:	0018      	movs	r0, r3
 800be4a:	46bd      	mov	sp, r7
 800be4c:	b002      	add	sp, #8
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	2000112c 	.word	0x2000112c
 800be54:	0800d038 	.word	0x0800d038

0800be58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	0002      	movs	r2, r0
 800be60:	6039      	str	r1, [r7, #0]
 800be62:	1dfb      	adds	r3, r7, #7
 800be64:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	221a      	movs	r2, #26
 800be6a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be6c:	f000 f84c 	bl	800bf08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be70:	4b02      	ldr	r3, [pc, #8]	; (800be7c <USBD_FS_SerialStrDescriptor+0x24>)
}
 800be72:	0018      	movs	r0, r3
 800be74:	46bd      	mov	sp, r7
 800be76:	b002      	add	sp, #8
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	46c0      	nop			; (mov r8, r8)
 800be7c:	20000160 	.word	0x20000160

0800be80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	0002      	movs	r2, r0
 800be88:	6039      	str	r1, [r7, #0]
 800be8a:	1dfb      	adds	r3, r7, #7
 800be8c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800be8e:	1dfb      	adds	r3, r7, #7
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d106      	bne.n	800bea4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	4908      	ldr	r1, [pc, #32]	; (800bebc <USBD_FS_ConfigStrDescriptor+0x3c>)
 800be9a:	4b09      	ldr	r3, [pc, #36]	; (800bec0 <USBD_FS_ConfigStrDescriptor+0x40>)
 800be9c:	0018      	movs	r0, r3
 800be9e:	f7ff fda8 	bl	800b9f2 <USBD_GetString>
 800bea2:	e005      	b.n	800beb0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	4905      	ldr	r1, [pc, #20]	; (800bebc <USBD_FS_ConfigStrDescriptor+0x3c>)
 800bea8:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <USBD_FS_ConfigStrDescriptor+0x40>)
 800beaa:	0018      	movs	r0, r3
 800beac:	f7ff fda1 	bl	800b9f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800beb0:	4b02      	ldr	r3, [pc, #8]	; (800bebc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800beb2:	0018      	movs	r0, r3
 800beb4:	46bd      	mov	sp, r7
 800beb6:	b002      	add	sp, #8
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	46c0      	nop			; (mov r8, r8)
 800bebc:	2000112c 	.word	0x2000112c
 800bec0:	0800d04c 	.word	0x0800d04c

0800bec4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	0002      	movs	r2, r0
 800becc:	6039      	str	r1, [r7, #0]
 800bece:	1dfb      	adds	r3, r7, #7
 800bed0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800bed2:	1dfb      	adds	r3, r7, #7
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d106      	bne.n	800bee8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beda:	683a      	ldr	r2, [r7, #0]
 800bedc:	4908      	ldr	r1, [pc, #32]	; (800bf00 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800bede:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800bee0:	0018      	movs	r0, r3
 800bee2:	f7ff fd86 	bl	800b9f2 <USBD_GetString>
 800bee6:	e005      	b.n	800bef4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	4905      	ldr	r1, [pc, #20]	; (800bf00 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800beec:	4b05      	ldr	r3, [pc, #20]	; (800bf04 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800beee:	0018      	movs	r0, r3
 800bef0:	f7ff fd7f 	bl	800b9f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bef4:	4b02      	ldr	r3, [pc, #8]	; (800bf00 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800bef6:	0018      	movs	r0, r3
 800bef8:	46bd      	mov	sp, r7
 800befa:	b002      	add	sp, #8
 800befc:	bd80      	pop	{r7, pc}
 800befe:	46c0      	nop			; (mov r8, r8)
 800bf00:	2000112c 	.word	0x2000112c
 800bf04:	0800d058 	.word	0x0800d058

0800bf08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf0e:	4b10      	ldr	r3, [pc, #64]	; (800bf50 <Get_SerialNum+0x48>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf14:	4b0f      	ldr	r3, [pc, #60]	; (800bf54 <Get_SerialNum+0x4c>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf1a:	4b0f      	ldr	r3, [pc, #60]	; (800bf58 <Get_SerialNum+0x50>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	18d3      	adds	r3, r2, r3
 800bf26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00b      	beq.n	800bf46 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf2e:	490b      	ldr	r1, [pc, #44]	; (800bf5c <Get_SerialNum+0x54>)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2208      	movs	r2, #8
 800bf34:	0018      	movs	r0, r3
 800bf36:	f000 f815 	bl	800bf64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf3a:	4909      	ldr	r1, [pc, #36]	; (800bf60 <Get_SerialNum+0x58>)
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	2204      	movs	r2, #4
 800bf40:	0018      	movs	r0, r3
 800bf42:	f000 f80f 	bl	800bf64 <IntToUnicode>
  }
}
 800bf46:	46c0      	nop			; (mov r8, r8)
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	b004      	add	sp, #16
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	46c0      	nop			; (mov r8, r8)
 800bf50:	1ffff7ac 	.word	0x1ffff7ac
 800bf54:	1ffff7b0 	.word	0x1ffff7b0
 800bf58:	1ffff7b4 	.word	0x1ffff7b4
 800bf5c:	20000162 	.word	0x20000162
 800bf60:	20000172 	.word	0x20000172

0800bf64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	1dfb      	adds	r3, r7, #7
 800bf70:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800bf72:	2117      	movs	r1, #23
 800bf74:	187b      	adds	r3, r7, r1
 800bf76:	2200      	movs	r2, #0
 800bf78:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800bf7a:	187b      	adds	r3, r7, r1
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	701a      	strb	r2, [r3, #0]
 800bf80:	e02f      	b.n	800bfe2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	0f1b      	lsrs	r3, r3, #28
 800bf86:	2b09      	cmp	r3, #9
 800bf88:	d80d      	bhi.n	800bfa6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	0f1b      	lsrs	r3, r3, #28
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	2317      	movs	r3, #23
 800bf92:	18fb      	adds	r3, r7, r3
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	005b      	lsls	r3, r3, #1
 800bf98:	0019      	movs	r1, r3
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	185b      	adds	r3, r3, r1
 800bf9e:	3230      	adds	r2, #48	; 0x30
 800bfa0:	b2d2      	uxtb	r2, r2
 800bfa2:	701a      	strb	r2, [r3, #0]
 800bfa4:	e00c      	b.n	800bfc0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	0f1b      	lsrs	r3, r3, #28
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	2317      	movs	r3, #23
 800bfae:	18fb      	adds	r3, r7, r3
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	005b      	lsls	r3, r3, #1
 800bfb4:	0019      	movs	r1, r3
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	185b      	adds	r3, r3, r1
 800bfba:	3237      	adds	r2, #55	; 0x37
 800bfbc:	b2d2      	uxtb	r2, r2
 800bfbe:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	011b      	lsls	r3, r3, #4
 800bfc4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bfc6:	2117      	movs	r1, #23
 800bfc8:	187b      	adds	r3, r7, r1
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	005b      	lsls	r3, r3, #1
 800bfce:	3301      	adds	r3, #1
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	18d3      	adds	r3, r2, r3
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bfd8:	187b      	adds	r3, r7, r1
 800bfda:	781a      	ldrb	r2, [r3, #0]
 800bfdc:	187b      	adds	r3, r7, r1
 800bfde:	3201      	adds	r2, #1
 800bfe0:	701a      	strb	r2, [r3, #0]
 800bfe2:	2317      	movs	r3, #23
 800bfe4:	18fa      	adds	r2, r7, r3
 800bfe6:	1dfb      	adds	r3, r7, #7
 800bfe8:	7812      	ldrb	r2, [r2, #0]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d3c8      	bcc.n	800bf82 <IntToUnicode+0x1e>
  }
}
 800bff0:	46c0      	nop			; (mov r8, r8)
 800bff2:	46c0      	nop			; (mov r8, r8)
 800bff4:	46bd      	mov	sp, r7
 800bff6:	b006      	add	sp, #24
 800bff8:	bd80      	pop	{r7, pc}
	...

0800bffc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a0e      	ldr	r2, [pc, #56]	; (800c044 <HAL_PCD_MspInit+0x48>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d115      	bne.n	800c03a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c00e:	4b0e      	ldr	r3, [pc, #56]	; (800c048 <HAL_PCD_MspInit+0x4c>)
 800c010:	69da      	ldr	r2, [r3, #28]
 800c012:	4b0d      	ldr	r3, [pc, #52]	; (800c048 <HAL_PCD_MspInit+0x4c>)
 800c014:	2180      	movs	r1, #128	; 0x80
 800c016:	0409      	lsls	r1, r1, #16
 800c018:	430a      	orrs	r2, r1
 800c01a:	61da      	str	r2, [r3, #28]
 800c01c:	4b0a      	ldr	r3, [pc, #40]	; (800c048 <HAL_PCD_MspInit+0x4c>)
 800c01e:	69da      	ldr	r2, [r3, #28]
 800c020:	2380      	movs	r3, #128	; 0x80
 800c022:	041b      	lsls	r3, r3, #16
 800c024:	4013      	ands	r3, r2
 800c026:	60fb      	str	r3, [r7, #12]
 800c028:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c02a:	2200      	movs	r2, #0
 800c02c:	2100      	movs	r1, #0
 800c02e:	201f      	movs	r0, #31
 800c030:	f7f6 ffc2 	bl	8002fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c034:	201f      	movs	r0, #31
 800c036:	f7f6 ffd4 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c03a:	46c0      	nop			; (mov r8, r8)
 800c03c:	46bd      	mov	sp, r7
 800c03e:	b004      	add	sp, #16
 800c040:	bd80      	pop	{r7, pc}
 800c042:	46c0      	nop			; (mov r8, r8)
 800c044:	40005c00 	.word	0x40005c00
 800c048:	40021000 	.word	0x40021000

0800c04c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	23bc      	movs	r3, #188	; 0xbc
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	58d2      	ldr	r2, [r2, r3]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	21ac      	movs	r1, #172	; 0xac
 800c060:	0089      	lsls	r1, r1, #2
 800c062:	468c      	mov	ip, r1
 800c064:	4463      	add	r3, ip
 800c066:	0019      	movs	r1, r3
 800c068:	0010      	movs	r0, r2
 800c06a:	f7fe fc55 	bl	800a918 <USBD_LL_SetupStage>
}
 800c06e:	46c0      	nop			; (mov r8, r8)
 800c070:	46bd      	mov	sp, r7
 800c072:	b002      	add	sp, #8
 800c074:	bd80      	pop	{r7, pc}

0800c076 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c076:	b590      	push	{r4, r7, lr}
 800c078:	b083      	sub	sp, #12
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	000a      	movs	r2, r1
 800c080:	1cfb      	adds	r3, r7, #3
 800c082:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	23bc      	movs	r3, #188	; 0xbc
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	58d4      	ldr	r4, [r2, r3]
 800c08c:	1cfb      	adds	r3, r7, #3
 800c08e:	781a      	ldrb	r2, [r3, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	23be      	movs	r3, #190	; 0xbe
 800c094:	0059      	lsls	r1, r3, #1
 800c096:	0013      	movs	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	189b      	adds	r3, r3, r2
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	18c3      	adds	r3, r0, r3
 800c0a0:	185b      	adds	r3, r3, r1
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	1cfb      	adds	r3, r7, #3
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	0019      	movs	r1, r3
 800c0aa:	0020      	movs	r0, r4
 800c0ac:	f7fe fc92 	bl	800a9d4 <USBD_LL_DataOutStage>
}
 800c0b0:	46c0      	nop			; (mov r8, r8)
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	b003      	add	sp, #12
 800c0b6:	bd90      	pop	{r4, r7, pc}

0800c0b8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	000a      	movs	r2, r1
 800c0c2:	1cfb      	adds	r3, r7, #3
 800c0c4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	23bc      	movs	r3, #188	; 0xbc
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	58d0      	ldr	r0, [r2, r3]
 800c0ce:	1cfb      	adds	r3, r7, #3
 800c0d0:	781a      	ldrb	r2, [r3, #0]
 800c0d2:	6879      	ldr	r1, [r7, #4]
 800c0d4:	0013      	movs	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	189b      	adds	r3, r3, r2
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	18cb      	adds	r3, r1, r3
 800c0de:	333c      	adds	r3, #60	; 0x3c
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	1cfb      	adds	r3, r7, #3
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	0019      	movs	r1, r3
 800c0e8:	f7fe fcf6 	bl	800aad8 <USBD_LL_DataInStage>
}
 800c0ec:	46c0      	nop			; (mov r8, r8)
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	b002      	add	sp, #8
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	23bc      	movs	r3, #188	; 0xbc
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	58d3      	ldr	r3, [r2, r3]
 800c104:	0018      	movs	r0, r3
 800c106:	f7fe fe2d 	bl	800ad64 <USBD_LL_SOF>
}
 800c10a:	46c0      	nop			; (mov r8, r8)
 800c10c:	46bd      	mov	sp, r7
 800c10e:	b002      	add	sp, #8
 800c110:	bd80      	pop	{r7, pc}

0800c112 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b084      	sub	sp, #16
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c11a:	230f      	movs	r3, #15
 800c11c:	18fb      	adds	r3, r7, r3
 800c11e:	2201      	movs	r2, #1
 800c120:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	2b02      	cmp	r3, #2
 800c128:	d001      	beq.n	800c12e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c12a:	f7f5 fa97 	bl	800165c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	23bc      	movs	r3, #188	; 0xbc
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	58d2      	ldr	r2, [r2, r3]
 800c136:	230f      	movs	r3, #15
 800c138:	18fb      	adds	r3, r7, r3
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	0019      	movs	r1, r3
 800c13e:	0010      	movs	r0, r2
 800c140:	f7fe fdcf 	bl	800ace2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	23bc      	movs	r3, #188	; 0xbc
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	58d3      	ldr	r3, [r2, r3]
 800c14c:	0018      	movs	r0, r3
 800c14e:	f7fe fd80 	bl	800ac52 <USBD_LL_Reset>
}
 800c152:	46c0      	nop			; (mov r8, r8)
 800c154:	46bd      	mov	sp, r7
 800c156:	b004      	add	sp, #16
 800c158:	bd80      	pop	{r7, pc}
	...

0800c15c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	23bc      	movs	r3, #188	; 0xbc
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	58d3      	ldr	r3, [r2, r3]
 800c16c:	0018      	movs	r0, r3
 800c16e:	f7fe fdc9 	bl	800ad04 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d005      	beq.n	800c186 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c17a:	4b05      	ldr	r3, [pc, #20]	; (800c190 <HAL_PCD_SuspendCallback+0x34>)
 800c17c:	691a      	ldr	r2, [r3, #16]
 800c17e:	4b04      	ldr	r3, [pc, #16]	; (800c190 <HAL_PCD_SuspendCallback+0x34>)
 800c180:	2106      	movs	r1, #6
 800c182:	430a      	orrs	r2, r1
 800c184:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c186:	46c0      	nop			; (mov r8, r8)
 800c188:	46bd      	mov	sp, r7
 800c18a:	b002      	add	sp, #8
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	46c0      	nop			; (mov r8, r8)
 800c190:	e000ed00 	.word	0xe000ed00

0800c194 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d007      	beq.n	800c1b4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1a4:	4b09      	ldr	r3, [pc, #36]	; (800c1cc <HAL_PCD_ResumeCallback+0x38>)
 800c1a6:	691a      	ldr	r2, [r3, #16]
 800c1a8:	4b08      	ldr	r3, [pc, #32]	; (800c1cc <HAL_PCD_ResumeCallback+0x38>)
 800c1aa:	2106      	movs	r1, #6
 800c1ac:	438a      	bics	r2, r1
 800c1ae:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800c1b0:	f000 fa44 	bl	800c63c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	23bc      	movs	r3, #188	; 0xbc
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	58d3      	ldr	r3, [r2, r3]
 800c1bc:	0018      	movs	r0, r3
 800c1be:	f7fe fdb9 	bl	800ad34 <USBD_LL_Resume>
}
 800c1c2:	46c0      	nop			; (mov r8, r8)
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	b002      	add	sp, #8
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	46c0      	nop			; (mov r8, r8)
 800c1cc:	e000ed00 	.word	0xe000ed00

0800c1d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c1d8:	4a2d      	ldr	r2, [pc, #180]	; (800c290 <USBD_LL_Init+0xc0>)
 800c1da:	23bc      	movs	r3, #188	; 0xbc
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	23b0      	movs	r3, #176	; 0xb0
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	4929      	ldr	r1, [pc, #164]	; (800c290 <USBD_LL_Init+0xc0>)
 800c1ea:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800c1ec:	4b28      	ldr	r3, [pc, #160]	; (800c290 <USBD_LL_Init+0xc0>)
 800c1ee:	4a29      	ldr	r2, [pc, #164]	; (800c294 <USBD_LL_Init+0xc4>)
 800c1f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c1f2:	4b27      	ldr	r3, [pc, #156]	; (800c290 <USBD_LL_Init+0xc0>)
 800c1f4:	2208      	movs	r2, #8
 800c1f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c1f8:	4b25      	ldr	r3, [pc, #148]	; (800c290 <USBD_LL_Init+0xc0>)
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1fe:	4b24      	ldr	r3, [pc, #144]	; (800c290 <USBD_LL_Init+0xc0>)
 800c200:	2202      	movs	r2, #2
 800c202:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c204:	4b22      	ldr	r3, [pc, #136]	; (800c290 <USBD_LL_Init+0xc0>)
 800c206:	2200      	movs	r2, #0
 800c208:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c20a:	4b21      	ldr	r3, [pc, #132]	; (800c290 <USBD_LL_Init+0xc0>)
 800c20c:	2200      	movs	r2, #0
 800c20e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c210:	4b1f      	ldr	r3, [pc, #124]	; (800c290 <USBD_LL_Init+0xc0>)
 800c212:	2200      	movs	r2, #0
 800c214:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c216:	4b1e      	ldr	r3, [pc, #120]	; (800c290 <USBD_LL_Init+0xc0>)
 800c218:	0018      	movs	r0, r3
 800c21a:	f7f7 f967 	bl	80034ec <HAL_PCD_Init>
 800c21e:	1e03      	subs	r3, r0, #0
 800c220:	d001      	beq.n	800c226 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800c222:	f7f5 fa1b 	bl	800165c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	23b0      	movs	r3, #176	; 0xb0
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	58d0      	ldr	r0, [r2, r3]
 800c22e:	2318      	movs	r3, #24
 800c230:	2200      	movs	r2, #0
 800c232:	2100      	movs	r1, #0
 800c234:	f7f8 ff48 	bl	80050c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	23b0      	movs	r3, #176	; 0xb0
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	58d0      	ldr	r0, [r2, r3]
 800c240:	2358      	movs	r3, #88	; 0x58
 800c242:	2200      	movs	r2, #0
 800c244:	2180      	movs	r1, #128	; 0x80
 800c246:	f7f8 ff3f 	bl	80050c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	23b0      	movs	r3, #176	; 0xb0
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	58d0      	ldr	r0, [r2, r3]
 800c252:	23c0      	movs	r3, #192	; 0xc0
 800c254:	2200      	movs	r2, #0
 800c256:	2181      	movs	r1, #129	; 0x81
 800c258:	f7f8 ff36 	bl	80050c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	23b0      	movs	r3, #176	; 0xb0
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	58d0      	ldr	r0, [r2, r3]
 800c264:	2388      	movs	r3, #136	; 0x88
 800c266:	005b      	lsls	r3, r3, #1
 800c268:	2200      	movs	r2, #0
 800c26a:	2101      	movs	r1, #1
 800c26c:	f7f8 ff2c 	bl	80050c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	23b0      	movs	r3, #176	; 0xb0
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	58d0      	ldr	r0, [r2, r3]
 800c278:	2380      	movs	r3, #128	; 0x80
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	2200      	movs	r2, #0
 800c27e:	2182      	movs	r1, #130	; 0x82
 800c280:	f7f8 ff22 	bl	80050c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	0018      	movs	r0, r3
 800c288:	46bd      	mov	sp, r7
 800c28a:	b002      	add	sp, #8
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	46c0      	nop			; (mov r8, r8)
 800c290:	2000132c 	.word	0x2000132c
 800c294:	40005c00 	.word	0x40005c00

0800c298 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a0:	210f      	movs	r1, #15
 800c2a2:	187b      	adds	r3, r7, r1
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a8:	260e      	movs	r6, #14
 800c2aa:	19bb      	adds	r3, r7, r6
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	23b0      	movs	r3, #176	; 0xb0
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	58d3      	ldr	r3, [r2, r3]
 800c2b8:	000d      	movs	r5, r1
 800c2ba:	187c      	adds	r4, r7, r1
 800c2bc:	0018      	movs	r0, r3
 800c2be:	f7f7 fa25 	bl	800370c <HAL_PCD_Start>
 800c2c2:	0003      	movs	r3, r0
 800c2c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2c6:	19bc      	adds	r4, r7, r6
 800c2c8:	197b      	adds	r3, r7, r5
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	0018      	movs	r0, r3
 800c2ce:	f000 f9bc 	bl	800c64a <USBD_Get_USB_Status>
 800c2d2:	0003      	movs	r3, r0
 800c2d4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c2d6:	19bb      	adds	r3, r7, r6
 800c2d8:	781b      	ldrb	r3, [r3, #0]
}
 800c2da:	0018      	movs	r0, r3
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	b005      	add	sp, #20
 800c2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2e4:	b085      	sub	sp, #20
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	000c      	movs	r4, r1
 800c2ec:	0010      	movs	r0, r2
 800c2ee:	0019      	movs	r1, r3
 800c2f0:	1cfb      	adds	r3, r7, #3
 800c2f2:	1c22      	adds	r2, r4, #0
 800c2f4:	701a      	strb	r2, [r3, #0]
 800c2f6:	1cbb      	adds	r3, r7, #2
 800c2f8:	1c02      	adds	r2, r0, #0
 800c2fa:	701a      	strb	r2, [r3, #0]
 800c2fc:	003b      	movs	r3, r7
 800c2fe:	1c0a      	adds	r2, r1, #0
 800c300:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c302:	260f      	movs	r6, #15
 800c304:	19bb      	adds	r3, r7, r6
 800c306:	2200      	movs	r2, #0
 800c308:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c30a:	250e      	movs	r5, #14
 800c30c:	197b      	adds	r3, r7, r5
 800c30e:	2200      	movs	r2, #0
 800c310:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	23b0      	movs	r3, #176	; 0xb0
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	58d0      	ldr	r0, [r2, r3]
 800c31a:	19bc      	adds	r4, r7, r6
 800c31c:	1cbb      	adds	r3, r7, #2
 800c31e:	781d      	ldrb	r5, [r3, #0]
 800c320:	003b      	movs	r3, r7
 800c322:	881a      	ldrh	r2, [r3, #0]
 800c324:	1cfb      	adds	r3, r7, #3
 800c326:	7819      	ldrb	r1, [r3, #0]
 800c328:	002b      	movs	r3, r5
 800c32a:	f7f7 fbbc 	bl	8003aa6 <HAL_PCD_EP_Open>
 800c32e:	0003      	movs	r3, r0
 800c330:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c332:	250e      	movs	r5, #14
 800c334:	197c      	adds	r4, r7, r5
 800c336:	19bb      	adds	r3, r7, r6
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	0018      	movs	r0, r3
 800c33c:	f000 f985 	bl	800c64a <USBD_Get_USB_Status>
 800c340:	0003      	movs	r3, r0
 800c342:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c344:	197b      	adds	r3, r7, r5
 800c346:	781b      	ldrb	r3, [r3, #0]
}
 800c348:	0018      	movs	r0, r3
 800c34a:	46bd      	mov	sp, r7
 800c34c:	b005      	add	sp, #20
 800c34e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c350 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	000a      	movs	r2, r1
 800c35a:	1cfb      	adds	r3, r7, #3
 800c35c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c35e:	210f      	movs	r1, #15
 800c360:	187b      	adds	r3, r7, r1
 800c362:	2200      	movs	r2, #0
 800c364:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c366:	260e      	movs	r6, #14
 800c368:	19bb      	adds	r3, r7, r6
 800c36a:	2200      	movs	r2, #0
 800c36c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	23b0      	movs	r3, #176	; 0xb0
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	58d2      	ldr	r2, [r2, r3]
 800c376:	000d      	movs	r5, r1
 800c378:	187c      	adds	r4, r7, r1
 800c37a:	1cfb      	adds	r3, r7, #3
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	0019      	movs	r1, r3
 800c380:	0010      	movs	r0, r2
 800c382:	f7f7 fc08 	bl	8003b96 <HAL_PCD_EP_Close>
 800c386:	0003      	movs	r3, r0
 800c388:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c38a:	19bc      	adds	r4, r7, r6
 800c38c:	197b      	adds	r3, r7, r5
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	0018      	movs	r0, r3
 800c392:	f000 f95a 	bl	800c64a <USBD_Get_USB_Status>
 800c396:	0003      	movs	r3, r0
 800c398:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c39a:	19bb      	adds	r3, r7, r6
 800c39c:	781b      	ldrb	r3, [r3, #0]
}
 800c39e:	0018      	movs	r0, r3
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	b005      	add	sp, #20
 800c3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c3a6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3a8:	b085      	sub	sp, #20
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	000a      	movs	r2, r1
 800c3b0:	1cfb      	adds	r3, r7, #3
 800c3b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b4:	210f      	movs	r1, #15
 800c3b6:	187b      	adds	r3, r7, r1
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3bc:	260e      	movs	r6, #14
 800c3be:	19bb      	adds	r3, r7, r6
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	23b0      	movs	r3, #176	; 0xb0
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	58d2      	ldr	r2, [r2, r3]
 800c3cc:	000d      	movs	r5, r1
 800c3ce:	187c      	adds	r4, r7, r1
 800c3d0:	1cfb      	adds	r3, r7, #3
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	0019      	movs	r1, r3
 800c3d6:	0010      	movs	r0, r2
 800c3d8:	f7f7 fcd4 	bl	8003d84 <HAL_PCD_EP_SetStall>
 800c3dc:	0003      	movs	r3, r0
 800c3de:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3e0:	19bc      	adds	r4, r7, r6
 800c3e2:	197b      	adds	r3, r7, r5
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	0018      	movs	r0, r3
 800c3e8:	f000 f92f 	bl	800c64a <USBD_Get_USB_Status>
 800c3ec:	0003      	movs	r3, r0
 800c3ee:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c3f0:	19bb      	adds	r3, r7, r6
 800c3f2:	781b      	ldrb	r3, [r3, #0]
}
 800c3f4:	0018      	movs	r0, r3
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	b005      	add	sp, #20
 800c3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c3fc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	000a      	movs	r2, r1
 800c406:	1cfb      	adds	r3, r7, #3
 800c408:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c40a:	210f      	movs	r1, #15
 800c40c:	187b      	adds	r3, r7, r1
 800c40e:	2200      	movs	r2, #0
 800c410:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c412:	260e      	movs	r6, #14
 800c414:	19bb      	adds	r3, r7, r6
 800c416:	2200      	movs	r2, #0
 800c418:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	23b0      	movs	r3, #176	; 0xb0
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	58d2      	ldr	r2, [r2, r3]
 800c422:	000d      	movs	r5, r1
 800c424:	187c      	adds	r4, r7, r1
 800c426:	1cfb      	adds	r3, r7, #3
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	0019      	movs	r1, r3
 800c42c:	0010      	movs	r0, r2
 800c42e:	f7f7 fd05 	bl	8003e3c <HAL_PCD_EP_ClrStall>
 800c432:	0003      	movs	r3, r0
 800c434:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c436:	19bc      	adds	r4, r7, r6
 800c438:	197b      	adds	r3, r7, r5
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	0018      	movs	r0, r3
 800c43e:	f000 f904 	bl	800c64a <USBD_Get_USB_Status>
 800c442:	0003      	movs	r3, r0
 800c444:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c446:	19bb      	adds	r3, r7, r6
 800c448:	781b      	ldrb	r3, [r3, #0]
}
 800c44a:	0018      	movs	r0, r3
 800c44c:	46bd      	mov	sp, r7
 800c44e:	b005      	add	sp, #20
 800c450:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c452 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	000a      	movs	r2, r1
 800c45c:	1cfb      	adds	r3, r7, #3
 800c45e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	23b0      	movs	r3, #176	; 0xb0
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	58d3      	ldr	r3, [r2, r3]
 800c468:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c46a:	1cfb      	adds	r3, r7, #3
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	b25b      	sxtb	r3, r3
 800c470:	2b00      	cmp	r3, #0
 800c472:	da0d      	bge.n	800c490 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c474:	1cfb      	adds	r3, r7, #3
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	227f      	movs	r2, #127	; 0x7f
 800c47a:	4013      	ands	r3, r2
 800c47c:	68f9      	ldr	r1, [r7, #12]
 800c47e:	1c5a      	adds	r2, r3, #1
 800c480:	0013      	movs	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	189b      	adds	r3, r3, r2
 800c486:	00db      	lsls	r3, r3, #3
 800c488:	18cb      	adds	r3, r1, r3
 800c48a:	3302      	adds	r3, #2
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	e00d      	b.n	800c4ac <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c490:	1cfb      	adds	r3, r7, #3
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	227f      	movs	r2, #127	; 0x7f
 800c496:	401a      	ands	r2, r3
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	23b5      	movs	r3, #181	; 0xb5
 800c49c:	0059      	lsls	r1, r3, #1
 800c49e:	0013      	movs	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	189b      	adds	r3, r3, r2
 800c4a4:	00db      	lsls	r3, r3, #3
 800c4a6:	18c3      	adds	r3, r0, r3
 800c4a8:	185b      	adds	r3, r3, r1
 800c4aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4ac:	0018      	movs	r0, r3
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	b004      	add	sp, #16
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	000a      	movs	r2, r1
 800c4be:	1cfb      	adds	r3, r7, #3
 800c4c0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4c2:	210f      	movs	r1, #15
 800c4c4:	187b      	adds	r3, r7, r1
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ca:	260e      	movs	r6, #14
 800c4cc:	19bb      	adds	r3, r7, r6
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	23b0      	movs	r3, #176	; 0xb0
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	58d2      	ldr	r2, [r2, r3]
 800c4da:	000d      	movs	r5, r1
 800c4dc:	187c      	adds	r4, r7, r1
 800c4de:	1cfb      	adds	r3, r7, #3
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	0019      	movs	r1, r3
 800c4e4:	0010      	movs	r0, r2
 800c4e6:	f7f7 fab3 	bl	8003a50 <HAL_PCD_SetAddress>
 800c4ea:	0003      	movs	r3, r0
 800c4ec:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4ee:	19bc      	adds	r4, r7, r6
 800c4f0:	197b      	adds	r3, r7, r5
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	0018      	movs	r0, r3
 800c4f6:	f000 f8a8 	bl	800c64a <USBD_Get_USB_Status>
 800c4fa:	0003      	movs	r3, r0
 800c4fc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c4fe:	19bb      	adds	r3, r7, r6
 800c500:	781b      	ldrb	r3, [r3, #0]
}
 800c502:	0018      	movs	r0, r3
 800c504:	46bd      	mov	sp, r7
 800c506:	b005      	add	sp, #20
 800c508:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c50a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c50a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c50c:	b087      	sub	sp, #28
 800c50e:	af00      	add	r7, sp, #0
 800c510:	60f8      	str	r0, [r7, #12]
 800c512:	0008      	movs	r0, r1
 800c514:	607a      	str	r2, [r7, #4]
 800c516:	0019      	movs	r1, r3
 800c518:	230b      	movs	r3, #11
 800c51a:	18fb      	adds	r3, r7, r3
 800c51c:	1c02      	adds	r2, r0, #0
 800c51e:	701a      	strb	r2, [r3, #0]
 800c520:	2408      	movs	r4, #8
 800c522:	193b      	adds	r3, r7, r4
 800c524:	1c0a      	adds	r2, r1, #0
 800c526:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c528:	2117      	movs	r1, #23
 800c52a:	187b      	adds	r3, r7, r1
 800c52c:	2200      	movs	r2, #0
 800c52e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c530:	2516      	movs	r5, #22
 800c532:	197b      	adds	r3, r7, r5
 800c534:	2200      	movs	r2, #0
 800c536:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	23b0      	movs	r3, #176	; 0xb0
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	58d0      	ldr	r0, [r2, r3]
 800c540:	193b      	adds	r3, r7, r4
 800c542:	881d      	ldrh	r5, [r3, #0]
 800c544:	000e      	movs	r6, r1
 800c546:	187c      	adds	r4, r7, r1
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	230b      	movs	r3, #11
 800c54c:	18fb      	adds	r3, r7, r3
 800c54e:	7819      	ldrb	r1, [r3, #0]
 800c550:	002b      	movs	r3, r5
 800c552:	f7f7 fbce 	bl	8003cf2 <HAL_PCD_EP_Transmit>
 800c556:	0003      	movs	r3, r0
 800c558:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c55a:	2516      	movs	r5, #22
 800c55c:	197c      	adds	r4, r7, r5
 800c55e:	19bb      	adds	r3, r7, r6
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	0018      	movs	r0, r3
 800c564:	f000 f871 	bl	800c64a <USBD_Get_USB_Status>
 800c568:	0003      	movs	r3, r0
 800c56a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c56c:	197b      	adds	r3, r7, r5
 800c56e:	781b      	ldrb	r3, [r3, #0]
}
 800c570:	0018      	movs	r0, r3
 800c572:	46bd      	mov	sp, r7
 800c574:	b007      	add	sp, #28
 800c576:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c578 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	0008      	movs	r0, r1
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	0019      	movs	r1, r3
 800c586:	230b      	movs	r3, #11
 800c588:	18fb      	adds	r3, r7, r3
 800c58a:	1c02      	adds	r2, r0, #0
 800c58c:	701a      	strb	r2, [r3, #0]
 800c58e:	2408      	movs	r4, #8
 800c590:	193b      	adds	r3, r7, r4
 800c592:	1c0a      	adds	r2, r1, #0
 800c594:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c596:	2117      	movs	r1, #23
 800c598:	187b      	adds	r3, r7, r1
 800c59a:	2200      	movs	r2, #0
 800c59c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c59e:	2516      	movs	r5, #22
 800c5a0:	197b      	adds	r3, r7, r5
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	23b0      	movs	r3, #176	; 0xb0
 800c5aa:	009b      	lsls	r3, r3, #2
 800c5ac:	58d0      	ldr	r0, [r2, r3]
 800c5ae:	193b      	adds	r3, r7, r4
 800c5b0:	881d      	ldrh	r5, [r3, #0]
 800c5b2:	000e      	movs	r6, r1
 800c5b4:	187c      	adds	r4, r7, r1
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	230b      	movs	r3, #11
 800c5ba:	18fb      	adds	r3, r7, r3
 800c5bc:	7819      	ldrb	r1, [r3, #0]
 800c5be:	002b      	movs	r3, r5
 800c5c0:	f7f7 fb3a 	bl	8003c38 <HAL_PCD_EP_Receive>
 800c5c4:	0003      	movs	r3, r0
 800c5c6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5c8:	2516      	movs	r5, #22
 800c5ca:	197c      	adds	r4, r7, r5
 800c5cc:	19bb      	adds	r3, r7, r6
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	f000 f83a 	bl	800c64a <USBD_Get_USB_Status>
 800c5d6:	0003      	movs	r3, r0
 800c5d8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c5da:	197b      	adds	r3, r7, r5
 800c5dc:	781b      	ldrb	r3, [r3, #0]
}
 800c5de:	0018      	movs	r0, r3
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	b007      	add	sp, #28
 800c5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5e6:	b580      	push	{r7, lr}
 800c5e8:	b082      	sub	sp, #8
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	000a      	movs	r2, r1
 800c5f0:	1cfb      	adds	r3, r7, #3
 800c5f2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	23b0      	movs	r3, #176	; 0xb0
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	58d2      	ldr	r2, [r2, r3]
 800c5fc:	1cfb      	adds	r3, r7, #3
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	0019      	movs	r1, r3
 800c602:	0010      	movs	r0, r2
 800c604:	f7f7 fb5c 	bl	8003cc0 <HAL_PCD_EP_GetRxCount>
 800c608:	0003      	movs	r3, r0
}
 800c60a:	0018      	movs	r0, r3
 800c60c:	46bd      	mov	sp, r7
 800c60e:	b002      	add	sp, #8
 800c610:	bd80      	pop	{r7, pc}
	...

0800c614 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c61c:	4b02      	ldr	r3, [pc, #8]	; (800c628 <USBD_static_malloc+0x14>)
}
 800c61e:	0018      	movs	r0, r3
 800c620:	46bd      	mov	sp, r7
 800c622:	b002      	add	sp, #8
 800c624:	bd80      	pop	{r7, pc}
 800c626:	46c0      	nop			; (mov r8, r8)
 800c628:	20000268 	.word	0x20000268

0800c62c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]

}
 800c634:	46c0      	nop			; (mov r8, r8)
 800c636:	46bd      	mov	sp, r7
 800c638:	b002      	add	sp, #8
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c640:	f7f4 f9ae 	bl	80009a0 <SystemClock_Config>
}
 800c644:	46c0      	nop			; (mov r8, r8)
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b084      	sub	sp, #16
 800c64e:	af00      	add	r7, sp, #0
 800c650:	0002      	movs	r2, r0
 800c652:	1dfb      	adds	r3, r7, #7
 800c654:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c656:	230f      	movs	r3, #15
 800c658:	18fb      	adds	r3, r7, r3
 800c65a:	2200      	movs	r2, #0
 800c65c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800c65e:	1dfb      	adds	r3, r7, #7
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	2b03      	cmp	r3, #3
 800c664:	d017      	beq.n	800c696 <USBD_Get_USB_Status+0x4c>
 800c666:	dc1b      	bgt.n	800c6a0 <USBD_Get_USB_Status+0x56>
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d00f      	beq.n	800c68c <USBD_Get_USB_Status+0x42>
 800c66c:	dc18      	bgt.n	800c6a0 <USBD_Get_USB_Status+0x56>
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d002      	beq.n	800c678 <USBD_Get_USB_Status+0x2e>
 800c672:	2b01      	cmp	r3, #1
 800c674:	d005      	beq.n	800c682 <USBD_Get_USB_Status+0x38>
 800c676:	e013      	b.n	800c6a0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c678:	230f      	movs	r3, #15
 800c67a:	18fb      	adds	r3, r7, r3
 800c67c:	2200      	movs	r2, #0
 800c67e:	701a      	strb	r2, [r3, #0]
    break;
 800c680:	e013      	b.n	800c6aa <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c682:	230f      	movs	r3, #15
 800c684:	18fb      	adds	r3, r7, r3
 800c686:	2202      	movs	r2, #2
 800c688:	701a      	strb	r2, [r3, #0]
    break;
 800c68a:	e00e      	b.n	800c6aa <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c68c:	230f      	movs	r3, #15
 800c68e:	18fb      	adds	r3, r7, r3
 800c690:	2201      	movs	r2, #1
 800c692:	701a      	strb	r2, [r3, #0]
    break;
 800c694:	e009      	b.n	800c6aa <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c696:	230f      	movs	r3, #15
 800c698:	18fb      	adds	r3, r7, r3
 800c69a:	2202      	movs	r2, #2
 800c69c:	701a      	strb	r2, [r3, #0]
    break;
 800c69e:	e004      	b.n	800c6aa <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800c6a0:	230f      	movs	r3, #15
 800c6a2:	18fb      	adds	r3, r7, r3
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	701a      	strb	r2, [r3, #0]
    break;
 800c6a8:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800c6aa:	230f      	movs	r3, #15
 800c6ac:	18fb      	adds	r3, r7, r3
 800c6ae:	781b      	ldrb	r3, [r3, #0]
}
 800c6b0:	0018      	movs	r0, r3
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	b004      	add	sp, #16
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <__errno>:
 800c6b8:	4b01      	ldr	r3, [pc, #4]	; (800c6c0 <__errno+0x8>)
 800c6ba:	6818      	ldr	r0, [r3, #0]
 800c6bc:	4770      	bx	lr
 800c6be:	46c0      	nop			; (mov r8, r8)
 800c6c0:	2000017c 	.word	0x2000017c

0800c6c4 <__libc_init_array>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	2600      	movs	r6, #0
 800c6c8:	4d0c      	ldr	r5, [pc, #48]	; (800c6fc <__libc_init_array+0x38>)
 800c6ca:	4c0d      	ldr	r4, [pc, #52]	; (800c700 <__libc_init_array+0x3c>)
 800c6cc:	1b64      	subs	r4, r4, r5
 800c6ce:	10a4      	asrs	r4, r4, #2
 800c6d0:	42a6      	cmp	r6, r4
 800c6d2:	d109      	bne.n	800c6e8 <__libc_init_array+0x24>
 800c6d4:	2600      	movs	r6, #0
 800c6d6:	f000 fc5b 	bl	800cf90 <_init>
 800c6da:	4d0a      	ldr	r5, [pc, #40]	; (800c704 <__libc_init_array+0x40>)
 800c6dc:	4c0a      	ldr	r4, [pc, #40]	; (800c708 <__libc_init_array+0x44>)
 800c6de:	1b64      	subs	r4, r4, r5
 800c6e0:	10a4      	asrs	r4, r4, #2
 800c6e2:	42a6      	cmp	r6, r4
 800c6e4:	d105      	bne.n	800c6f2 <__libc_init_array+0x2e>
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
 800c6e8:	00b3      	lsls	r3, r6, #2
 800c6ea:	58eb      	ldr	r3, [r5, r3]
 800c6ec:	4798      	blx	r3
 800c6ee:	3601      	adds	r6, #1
 800c6f0:	e7ee      	b.n	800c6d0 <__libc_init_array+0xc>
 800c6f2:	00b3      	lsls	r3, r6, #2
 800c6f4:	58eb      	ldr	r3, [r5, r3]
 800c6f6:	4798      	blx	r3
 800c6f8:	3601      	adds	r6, #1
 800c6fa:	e7f2      	b.n	800c6e2 <__libc_init_array+0x1e>
 800c6fc:	0800d238 	.word	0x0800d238
 800c700:	0800d238 	.word	0x0800d238
 800c704:	0800d238 	.word	0x0800d238
 800c708:	0800d23c 	.word	0x0800d23c

0800c70c <malloc>:
 800c70c:	b510      	push	{r4, lr}
 800c70e:	4b03      	ldr	r3, [pc, #12]	; (800c71c <malloc+0x10>)
 800c710:	0001      	movs	r1, r0
 800c712:	6818      	ldr	r0, [r3, #0]
 800c714:	f000 f860 	bl	800c7d8 <_malloc_r>
 800c718:	bd10      	pop	{r4, pc}
 800c71a:	46c0      	nop			; (mov r8, r8)
 800c71c:	2000017c 	.word	0x2000017c

0800c720 <free>:
 800c720:	b510      	push	{r4, lr}
 800c722:	4b03      	ldr	r3, [pc, #12]	; (800c730 <free+0x10>)
 800c724:	0001      	movs	r1, r0
 800c726:	6818      	ldr	r0, [r3, #0]
 800c728:	f000 f80c 	bl	800c744 <_free_r>
 800c72c:	bd10      	pop	{r4, pc}
 800c72e:	46c0      	nop			; (mov r8, r8)
 800c730:	2000017c 	.word	0x2000017c

0800c734 <memset>:
 800c734:	0003      	movs	r3, r0
 800c736:	1882      	adds	r2, r0, r2
 800c738:	4293      	cmp	r3, r2
 800c73a:	d100      	bne.n	800c73e <memset+0xa>
 800c73c:	4770      	bx	lr
 800c73e:	7019      	strb	r1, [r3, #0]
 800c740:	3301      	adds	r3, #1
 800c742:	e7f9      	b.n	800c738 <memset+0x4>

0800c744 <_free_r>:
 800c744:	b570      	push	{r4, r5, r6, lr}
 800c746:	0005      	movs	r5, r0
 800c748:	2900      	cmp	r1, #0
 800c74a:	d010      	beq.n	800c76e <_free_r+0x2a>
 800c74c:	1f0c      	subs	r4, r1, #4
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	da00      	bge.n	800c756 <_free_r+0x12>
 800c754:	18e4      	adds	r4, r4, r3
 800c756:	0028      	movs	r0, r5
 800c758:	f000 f8ce 	bl	800c8f8 <__malloc_lock>
 800c75c:	4a1d      	ldr	r2, [pc, #116]	; (800c7d4 <_free_r+0x90>)
 800c75e:	6813      	ldr	r3, [r2, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d105      	bne.n	800c770 <_free_r+0x2c>
 800c764:	6063      	str	r3, [r4, #4]
 800c766:	6014      	str	r4, [r2, #0]
 800c768:	0028      	movs	r0, r5
 800c76a:	f000 f8cd 	bl	800c908 <__malloc_unlock>
 800c76e:	bd70      	pop	{r4, r5, r6, pc}
 800c770:	42a3      	cmp	r3, r4
 800c772:	d908      	bls.n	800c786 <_free_r+0x42>
 800c774:	6821      	ldr	r1, [r4, #0]
 800c776:	1860      	adds	r0, r4, r1
 800c778:	4283      	cmp	r3, r0
 800c77a:	d1f3      	bne.n	800c764 <_free_r+0x20>
 800c77c:	6818      	ldr	r0, [r3, #0]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	1841      	adds	r1, r0, r1
 800c782:	6021      	str	r1, [r4, #0]
 800c784:	e7ee      	b.n	800c764 <_free_r+0x20>
 800c786:	001a      	movs	r2, r3
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <_free_r+0x4e>
 800c78e:	42a3      	cmp	r3, r4
 800c790:	d9f9      	bls.n	800c786 <_free_r+0x42>
 800c792:	6811      	ldr	r1, [r2, #0]
 800c794:	1850      	adds	r0, r2, r1
 800c796:	42a0      	cmp	r0, r4
 800c798:	d10b      	bne.n	800c7b2 <_free_r+0x6e>
 800c79a:	6820      	ldr	r0, [r4, #0]
 800c79c:	1809      	adds	r1, r1, r0
 800c79e:	1850      	adds	r0, r2, r1
 800c7a0:	6011      	str	r1, [r2, #0]
 800c7a2:	4283      	cmp	r3, r0
 800c7a4:	d1e0      	bne.n	800c768 <_free_r+0x24>
 800c7a6:	6818      	ldr	r0, [r3, #0]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	1841      	adds	r1, r0, r1
 800c7ac:	6011      	str	r1, [r2, #0]
 800c7ae:	6053      	str	r3, [r2, #4]
 800c7b0:	e7da      	b.n	800c768 <_free_r+0x24>
 800c7b2:	42a0      	cmp	r0, r4
 800c7b4:	d902      	bls.n	800c7bc <_free_r+0x78>
 800c7b6:	230c      	movs	r3, #12
 800c7b8:	602b      	str	r3, [r5, #0]
 800c7ba:	e7d5      	b.n	800c768 <_free_r+0x24>
 800c7bc:	6821      	ldr	r1, [r4, #0]
 800c7be:	1860      	adds	r0, r4, r1
 800c7c0:	4283      	cmp	r3, r0
 800c7c2:	d103      	bne.n	800c7cc <_free_r+0x88>
 800c7c4:	6818      	ldr	r0, [r3, #0]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	1841      	adds	r1, r0, r1
 800c7ca:	6021      	str	r1, [r4, #0]
 800c7cc:	6063      	str	r3, [r4, #4]
 800c7ce:	6054      	str	r4, [r2, #4]
 800c7d0:	e7ca      	b.n	800c768 <_free_r+0x24>
 800c7d2:	46c0      	nop			; (mov r8, r8)
 800c7d4:	20000488 	.word	0x20000488

0800c7d8 <_malloc_r>:
 800c7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7da:	2303      	movs	r3, #3
 800c7dc:	1ccd      	adds	r5, r1, #3
 800c7de:	439d      	bics	r5, r3
 800c7e0:	3508      	adds	r5, #8
 800c7e2:	0006      	movs	r6, r0
 800c7e4:	2d0c      	cmp	r5, #12
 800c7e6:	d21f      	bcs.n	800c828 <_malloc_r+0x50>
 800c7e8:	250c      	movs	r5, #12
 800c7ea:	42a9      	cmp	r1, r5
 800c7ec:	d81e      	bhi.n	800c82c <_malloc_r+0x54>
 800c7ee:	0030      	movs	r0, r6
 800c7f0:	f000 f882 	bl	800c8f8 <__malloc_lock>
 800c7f4:	4925      	ldr	r1, [pc, #148]	; (800c88c <_malloc_r+0xb4>)
 800c7f6:	680a      	ldr	r2, [r1, #0]
 800c7f8:	0014      	movs	r4, r2
 800c7fa:	2c00      	cmp	r4, #0
 800c7fc:	d11a      	bne.n	800c834 <_malloc_r+0x5c>
 800c7fe:	4f24      	ldr	r7, [pc, #144]	; (800c890 <_malloc_r+0xb8>)
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d104      	bne.n	800c810 <_malloc_r+0x38>
 800c806:	0021      	movs	r1, r4
 800c808:	0030      	movs	r0, r6
 800c80a:	f000 f843 	bl	800c894 <_sbrk_r>
 800c80e:	6038      	str	r0, [r7, #0]
 800c810:	0029      	movs	r1, r5
 800c812:	0030      	movs	r0, r6
 800c814:	f000 f83e 	bl	800c894 <_sbrk_r>
 800c818:	1c43      	adds	r3, r0, #1
 800c81a:	d12b      	bne.n	800c874 <_malloc_r+0x9c>
 800c81c:	230c      	movs	r3, #12
 800c81e:	0030      	movs	r0, r6
 800c820:	6033      	str	r3, [r6, #0]
 800c822:	f000 f871 	bl	800c908 <__malloc_unlock>
 800c826:	e003      	b.n	800c830 <_malloc_r+0x58>
 800c828:	2d00      	cmp	r5, #0
 800c82a:	dade      	bge.n	800c7ea <_malloc_r+0x12>
 800c82c:	230c      	movs	r3, #12
 800c82e:	6033      	str	r3, [r6, #0]
 800c830:	2000      	movs	r0, #0
 800c832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	1b5b      	subs	r3, r3, r5
 800c838:	d419      	bmi.n	800c86e <_malloc_r+0x96>
 800c83a:	2b0b      	cmp	r3, #11
 800c83c:	d903      	bls.n	800c846 <_malloc_r+0x6e>
 800c83e:	6023      	str	r3, [r4, #0]
 800c840:	18e4      	adds	r4, r4, r3
 800c842:	6025      	str	r5, [r4, #0]
 800c844:	e003      	b.n	800c84e <_malloc_r+0x76>
 800c846:	6863      	ldr	r3, [r4, #4]
 800c848:	42a2      	cmp	r2, r4
 800c84a:	d10e      	bne.n	800c86a <_malloc_r+0x92>
 800c84c:	600b      	str	r3, [r1, #0]
 800c84e:	0030      	movs	r0, r6
 800c850:	f000 f85a 	bl	800c908 <__malloc_unlock>
 800c854:	0020      	movs	r0, r4
 800c856:	2207      	movs	r2, #7
 800c858:	300b      	adds	r0, #11
 800c85a:	1d23      	adds	r3, r4, #4
 800c85c:	4390      	bics	r0, r2
 800c85e:	1ac2      	subs	r2, r0, r3
 800c860:	4298      	cmp	r0, r3
 800c862:	d0e6      	beq.n	800c832 <_malloc_r+0x5a>
 800c864:	1a1b      	subs	r3, r3, r0
 800c866:	50a3      	str	r3, [r4, r2]
 800c868:	e7e3      	b.n	800c832 <_malloc_r+0x5a>
 800c86a:	6053      	str	r3, [r2, #4]
 800c86c:	e7ef      	b.n	800c84e <_malloc_r+0x76>
 800c86e:	0022      	movs	r2, r4
 800c870:	6864      	ldr	r4, [r4, #4]
 800c872:	e7c2      	b.n	800c7fa <_malloc_r+0x22>
 800c874:	2303      	movs	r3, #3
 800c876:	1cc4      	adds	r4, r0, #3
 800c878:	439c      	bics	r4, r3
 800c87a:	42a0      	cmp	r0, r4
 800c87c:	d0e1      	beq.n	800c842 <_malloc_r+0x6a>
 800c87e:	1a21      	subs	r1, r4, r0
 800c880:	0030      	movs	r0, r6
 800c882:	f000 f807 	bl	800c894 <_sbrk_r>
 800c886:	1c43      	adds	r3, r0, #1
 800c888:	d1db      	bne.n	800c842 <_malloc_r+0x6a>
 800c88a:	e7c7      	b.n	800c81c <_malloc_r+0x44>
 800c88c:	20000488 	.word	0x20000488
 800c890:	2000048c 	.word	0x2000048c

0800c894 <_sbrk_r>:
 800c894:	2300      	movs	r3, #0
 800c896:	b570      	push	{r4, r5, r6, lr}
 800c898:	4d06      	ldr	r5, [pc, #24]	; (800c8b4 <_sbrk_r+0x20>)
 800c89a:	0004      	movs	r4, r0
 800c89c:	0008      	movs	r0, r1
 800c89e:	602b      	str	r3, [r5, #0]
 800c8a0:	f7f5 fa60 	bl	8001d64 <_sbrk>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	d103      	bne.n	800c8b0 <_sbrk_r+0x1c>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d000      	beq.n	800c8b0 <_sbrk_r+0x1c>
 800c8ae:	6023      	str	r3, [r4, #0]
 800c8b0:	bd70      	pop	{r4, r5, r6, pc}
 800c8b2:	46c0      	nop			; (mov r8, r8)
 800c8b4:	20001620 	.word	0x20001620

0800c8b8 <siprintf>:
 800c8b8:	b40e      	push	{r1, r2, r3}
 800c8ba:	b500      	push	{lr}
 800c8bc:	490b      	ldr	r1, [pc, #44]	; (800c8ec <siprintf+0x34>)
 800c8be:	b09c      	sub	sp, #112	; 0x70
 800c8c0:	ab1d      	add	r3, sp, #116	; 0x74
 800c8c2:	9002      	str	r0, [sp, #8]
 800c8c4:	9006      	str	r0, [sp, #24]
 800c8c6:	9107      	str	r1, [sp, #28]
 800c8c8:	9104      	str	r1, [sp, #16]
 800c8ca:	4809      	ldr	r0, [pc, #36]	; (800c8f0 <siprintf+0x38>)
 800c8cc:	4909      	ldr	r1, [pc, #36]	; (800c8f4 <siprintf+0x3c>)
 800c8ce:	cb04      	ldmia	r3!, {r2}
 800c8d0:	9105      	str	r1, [sp, #20]
 800c8d2:	6800      	ldr	r0, [r0, #0]
 800c8d4:	a902      	add	r1, sp, #8
 800c8d6:	9301      	str	r3, [sp, #4]
 800c8d8:	f000 f880 	bl	800c9dc <_svfiprintf_r>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	9a02      	ldr	r2, [sp, #8]
 800c8e0:	7013      	strb	r3, [r2, #0]
 800c8e2:	b01c      	add	sp, #112	; 0x70
 800c8e4:	bc08      	pop	{r3}
 800c8e6:	b003      	add	sp, #12
 800c8e8:	4718      	bx	r3
 800c8ea:	46c0      	nop			; (mov r8, r8)
 800c8ec:	7fffffff 	.word	0x7fffffff
 800c8f0:	2000017c 	.word	0x2000017c
 800c8f4:	ffff0208 	.word	0xffff0208

0800c8f8 <__malloc_lock>:
 800c8f8:	b510      	push	{r4, lr}
 800c8fa:	4802      	ldr	r0, [pc, #8]	; (800c904 <__malloc_lock+0xc>)
 800c8fc:	f000 faf0 	bl	800cee0 <__retarget_lock_acquire_recursive>
 800c900:	bd10      	pop	{r4, pc}
 800c902:	46c0      	nop			; (mov r8, r8)
 800c904:	20001628 	.word	0x20001628

0800c908 <__malloc_unlock>:
 800c908:	b510      	push	{r4, lr}
 800c90a:	4802      	ldr	r0, [pc, #8]	; (800c914 <__malloc_unlock+0xc>)
 800c90c:	f000 fae9 	bl	800cee2 <__retarget_lock_release_recursive>
 800c910:	bd10      	pop	{r4, pc}
 800c912:	46c0      	nop			; (mov r8, r8)
 800c914:	20001628 	.word	0x20001628

0800c918 <__ssputs_r>:
 800c918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c91a:	688e      	ldr	r6, [r1, #8]
 800c91c:	b085      	sub	sp, #20
 800c91e:	0007      	movs	r7, r0
 800c920:	000c      	movs	r4, r1
 800c922:	9203      	str	r2, [sp, #12]
 800c924:	9301      	str	r3, [sp, #4]
 800c926:	429e      	cmp	r6, r3
 800c928:	d83c      	bhi.n	800c9a4 <__ssputs_r+0x8c>
 800c92a:	2390      	movs	r3, #144	; 0x90
 800c92c:	898a      	ldrh	r2, [r1, #12]
 800c92e:	00db      	lsls	r3, r3, #3
 800c930:	421a      	tst	r2, r3
 800c932:	d034      	beq.n	800c99e <__ssputs_r+0x86>
 800c934:	2503      	movs	r5, #3
 800c936:	6909      	ldr	r1, [r1, #16]
 800c938:	6823      	ldr	r3, [r4, #0]
 800c93a:	1a5b      	subs	r3, r3, r1
 800c93c:	9302      	str	r3, [sp, #8]
 800c93e:	6963      	ldr	r3, [r4, #20]
 800c940:	9802      	ldr	r0, [sp, #8]
 800c942:	435d      	muls	r5, r3
 800c944:	0feb      	lsrs	r3, r5, #31
 800c946:	195d      	adds	r5, r3, r5
 800c948:	9b01      	ldr	r3, [sp, #4]
 800c94a:	106d      	asrs	r5, r5, #1
 800c94c:	3301      	adds	r3, #1
 800c94e:	181b      	adds	r3, r3, r0
 800c950:	42ab      	cmp	r3, r5
 800c952:	d900      	bls.n	800c956 <__ssputs_r+0x3e>
 800c954:	001d      	movs	r5, r3
 800c956:	0553      	lsls	r3, r2, #21
 800c958:	d532      	bpl.n	800c9c0 <__ssputs_r+0xa8>
 800c95a:	0029      	movs	r1, r5
 800c95c:	0038      	movs	r0, r7
 800c95e:	f7ff ff3b 	bl	800c7d8 <_malloc_r>
 800c962:	1e06      	subs	r6, r0, #0
 800c964:	d109      	bne.n	800c97a <__ssputs_r+0x62>
 800c966:	230c      	movs	r3, #12
 800c968:	603b      	str	r3, [r7, #0]
 800c96a:	2340      	movs	r3, #64	; 0x40
 800c96c:	2001      	movs	r0, #1
 800c96e:	89a2      	ldrh	r2, [r4, #12]
 800c970:	4240      	negs	r0, r0
 800c972:	4313      	orrs	r3, r2
 800c974:	81a3      	strh	r3, [r4, #12]
 800c976:	b005      	add	sp, #20
 800c978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c97a:	9a02      	ldr	r2, [sp, #8]
 800c97c:	6921      	ldr	r1, [r4, #16]
 800c97e:	f000 fabc 	bl	800cefa <memcpy>
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	4a14      	ldr	r2, [pc, #80]	; (800c9d8 <__ssputs_r+0xc0>)
 800c986:	401a      	ands	r2, r3
 800c988:	2380      	movs	r3, #128	; 0x80
 800c98a:	4313      	orrs	r3, r2
 800c98c:	81a3      	strh	r3, [r4, #12]
 800c98e:	9b02      	ldr	r3, [sp, #8]
 800c990:	6126      	str	r6, [r4, #16]
 800c992:	18f6      	adds	r6, r6, r3
 800c994:	6026      	str	r6, [r4, #0]
 800c996:	6165      	str	r5, [r4, #20]
 800c998:	9e01      	ldr	r6, [sp, #4]
 800c99a:	1aed      	subs	r5, r5, r3
 800c99c:	60a5      	str	r5, [r4, #8]
 800c99e:	9b01      	ldr	r3, [sp, #4]
 800c9a0:	429e      	cmp	r6, r3
 800c9a2:	d900      	bls.n	800c9a6 <__ssputs_r+0x8e>
 800c9a4:	9e01      	ldr	r6, [sp, #4]
 800c9a6:	0032      	movs	r2, r6
 800c9a8:	9903      	ldr	r1, [sp, #12]
 800c9aa:	6820      	ldr	r0, [r4, #0]
 800c9ac:	f000 faae 	bl	800cf0c <memmove>
 800c9b0:	68a3      	ldr	r3, [r4, #8]
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	1b9b      	subs	r3, r3, r6
 800c9b6:	60a3      	str	r3, [r4, #8]
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	199e      	adds	r6, r3, r6
 800c9bc:	6026      	str	r6, [r4, #0]
 800c9be:	e7da      	b.n	800c976 <__ssputs_r+0x5e>
 800c9c0:	002a      	movs	r2, r5
 800c9c2:	0038      	movs	r0, r7
 800c9c4:	f000 fab5 	bl	800cf32 <_realloc_r>
 800c9c8:	1e06      	subs	r6, r0, #0
 800c9ca:	d1e0      	bne.n	800c98e <__ssputs_r+0x76>
 800c9cc:	0038      	movs	r0, r7
 800c9ce:	6921      	ldr	r1, [r4, #16]
 800c9d0:	f7ff feb8 	bl	800c744 <_free_r>
 800c9d4:	e7c7      	b.n	800c966 <__ssputs_r+0x4e>
 800c9d6:	46c0      	nop			; (mov r8, r8)
 800c9d8:	fffffb7f 	.word	0xfffffb7f

0800c9dc <_svfiprintf_r>:
 800c9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9de:	b0a1      	sub	sp, #132	; 0x84
 800c9e0:	9003      	str	r0, [sp, #12]
 800c9e2:	001d      	movs	r5, r3
 800c9e4:	898b      	ldrh	r3, [r1, #12]
 800c9e6:	000f      	movs	r7, r1
 800c9e8:	0016      	movs	r6, r2
 800c9ea:	061b      	lsls	r3, r3, #24
 800c9ec:	d511      	bpl.n	800ca12 <_svfiprintf_r+0x36>
 800c9ee:	690b      	ldr	r3, [r1, #16]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10e      	bne.n	800ca12 <_svfiprintf_r+0x36>
 800c9f4:	2140      	movs	r1, #64	; 0x40
 800c9f6:	f7ff feef 	bl	800c7d8 <_malloc_r>
 800c9fa:	6038      	str	r0, [r7, #0]
 800c9fc:	6138      	str	r0, [r7, #16]
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d105      	bne.n	800ca0e <_svfiprintf_r+0x32>
 800ca02:	230c      	movs	r3, #12
 800ca04:	9a03      	ldr	r2, [sp, #12]
 800ca06:	3801      	subs	r0, #1
 800ca08:	6013      	str	r3, [r2, #0]
 800ca0a:	b021      	add	sp, #132	; 0x84
 800ca0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca0e:	2340      	movs	r3, #64	; 0x40
 800ca10:	617b      	str	r3, [r7, #20]
 800ca12:	2300      	movs	r3, #0
 800ca14:	ac08      	add	r4, sp, #32
 800ca16:	6163      	str	r3, [r4, #20]
 800ca18:	3320      	adds	r3, #32
 800ca1a:	7663      	strb	r3, [r4, #25]
 800ca1c:	3310      	adds	r3, #16
 800ca1e:	76a3      	strb	r3, [r4, #26]
 800ca20:	9507      	str	r5, [sp, #28]
 800ca22:	0035      	movs	r5, r6
 800ca24:	782b      	ldrb	r3, [r5, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d001      	beq.n	800ca2e <_svfiprintf_r+0x52>
 800ca2a:	2b25      	cmp	r3, #37	; 0x25
 800ca2c:	d147      	bne.n	800cabe <_svfiprintf_r+0xe2>
 800ca2e:	1bab      	subs	r3, r5, r6
 800ca30:	9305      	str	r3, [sp, #20]
 800ca32:	42b5      	cmp	r5, r6
 800ca34:	d00c      	beq.n	800ca50 <_svfiprintf_r+0x74>
 800ca36:	0032      	movs	r2, r6
 800ca38:	0039      	movs	r1, r7
 800ca3a:	9803      	ldr	r0, [sp, #12]
 800ca3c:	f7ff ff6c 	bl	800c918 <__ssputs_r>
 800ca40:	1c43      	adds	r3, r0, #1
 800ca42:	d100      	bne.n	800ca46 <_svfiprintf_r+0x6a>
 800ca44:	e0ae      	b.n	800cba4 <_svfiprintf_r+0x1c8>
 800ca46:	6962      	ldr	r2, [r4, #20]
 800ca48:	9b05      	ldr	r3, [sp, #20]
 800ca4a:	4694      	mov	ip, r2
 800ca4c:	4463      	add	r3, ip
 800ca4e:	6163      	str	r3, [r4, #20]
 800ca50:	782b      	ldrb	r3, [r5, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d100      	bne.n	800ca58 <_svfiprintf_r+0x7c>
 800ca56:	e0a5      	b.n	800cba4 <_svfiprintf_r+0x1c8>
 800ca58:	2201      	movs	r2, #1
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	4252      	negs	r2, r2
 800ca5e:	6062      	str	r2, [r4, #4]
 800ca60:	a904      	add	r1, sp, #16
 800ca62:	3254      	adds	r2, #84	; 0x54
 800ca64:	1852      	adds	r2, r2, r1
 800ca66:	1c6e      	adds	r6, r5, #1
 800ca68:	6023      	str	r3, [r4, #0]
 800ca6a:	60e3      	str	r3, [r4, #12]
 800ca6c:	60a3      	str	r3, [r4, #8]
 800ca6e:	7013      	strb	r3, [r2, #0]
 800ca70:	65a3      	str	r3, [r4, #88]	; 0x58
 800ca72:	2205      	movs	r2, #5
 800ca74:	7831      	ldrb	r1, [r6, #0]
 800ca76:	4854      	ldr	r0, [pc, #336]	; (800cbc8 <_svfiprintf_r+0x1ec>)
 800ca78:	f000 fa34 	bl	800cee4 <memchr>
 800ca7c:	1c75      	adds	r5, r6, #1
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d11f      	bne.n	800cac2 <_svfiprintf_r+0xe6>
 800ca82:	6822      	ldr	r2, [r4, #0]
 800ca84:	06d3      	lsls	r3, r2, #27
 800ca86:	d504      	bpl.n	800ca92 <_svfiprintf_r+0xb6>
 800ca88:	2353      	movs	r3, #83	; 0x53
 800ca8a:	a904      	add	r1, sp, #16
 800ca8c:	185b      	adds	r3, r3, r1
 800ca8e:	2120      	movs	r1, #32
 800ca90:	7019      	strb	r1, [r3, #0]
 800ca92:	0713      	lsls	r3, r2, #28
 800ca94:	d504      	bpl.n	800caa0 <_svfiprintf_r+0xc4>
 800ca96:	2353      	movs	r3, #83	; 0x53
 800ca98:	a904      	add	r1, sp, #16
 800ca9a:	185b      	adds	r3, r3, r1
 800ca9c:	212b      	movs	r1, #43	; 0x2b
 800ca9e:	7019      	strb	r1, [r3, #0]
 800caa0:	7833      	ldrb	r3, [r6, #0]
 800caa2:	2b2a      	cmp	r3, #42	; 0x2a
 800caa4:	d016      	beq.n	800cad4 <_svfiprintf_r+0xf8>
 800caa6:	0035      	movs	r5, r6
 800caa8:	2100      	movs	r1, #0
 800caaa:	200a      	movs	r0, #10
 800caac:	68e3      	ldr	r3, [r4, #12]
 800caae:	782a      	ldrb	r2, [r5, #0]
 800cab0:	1c6e      	adds	r6, r5, #1
 800cab2:	3a30      	subs	r2, #48	; 0x30
 800cab4:	2a09      	cmp	r2, #9
 800cab6:	d94e      	bls.n	800cb56 <_svfiprintf_r+0x17a>
 800cab8:	2900      	cmp	r1, #0
 800caba:	d111      	bne.n	800cae0 <_svfiprintf_r+0x104>
 800cabc:	e017      	b.n	800caee <_svfiprintf_r+0x112>
 800cabe:	3501      	adds	r5, #1
 800cac0:	e7b0      	b.n	800ca24 <_svfiprintf_r+0x48>
 800cac2:	4b41      	ldr	r3, [pc, #260]	; (800cbc8 <_svfiprintf_r+0x1ec>)
 800cac4:	6822      	ldr	r2, [r4, #0]
 800cac6:	1ac0      	subs	r0, r0, r3
 800cac8:	2301      	movs	r3, #1
 800caca:	4083      	lsls	r3, r0
 800cacc:	4313      	orrs	r3, r2
 800cace:	002e      	movs	r6, r5
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	e7ce      	b.n	800ca72 <_svfiprintf_r+0x96>
 800cad4:	9b07      	ldr	r3, [sp, #28]
 800cad6:	1d19      	adds	r1, r3, #4
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	9107      	str	r1, [sp, #28]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	db01      	blt.n	800cae4 <_svfiprintf_r+0x108>
 800cae0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cae2:	e004      	b.n	800caee <_svfiprintf_r+0x112>
 800cae4:	425b      	negs	r3, r3
 800cae6:	60e3      	str	r3, [r4, #12]
 800cae8:	2302      	movs	r3, #2
 800caea:	4313      	orrs	r3, r2
 800caec:	6023      	str	r3, [r4, #0]
 800caee:	782b      	ldrb	r3, [r5, #0]
 800caf0:	2b2e      	cmp	r3, #46	; 0x2e
 800caf2:	d10a      	bne.n	800cb0a <_svfiprintf_r+0x12e>
 800caf4:	786b      	ldrb	r3, [r5, #1]
 800caf6:	2b2a      	cmp	r3, #42	; 0x2a
 800caf8:	d135      	bne.n	800cb66 <_svfiprintf_r+0x18a>
 800cafa:	9b07      	ldr	r3, [sp, #28]
 800cafc:	3502      	adds	r5, #2
 800cafe:	1d1a      	adds	r2, r3, #4
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	9207      	str	r2, [sp, #28]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	db2b      	blt.n	800cb60 <_svfiprintf_r+0x184>
 800cb08:	9309      	str	r3, [sp, #36]	; 0x24
 800cb0a:	4e30      	ldr	r6, [pc, #192]	; (800cbcc <_svfiprintf_r+0x1f0>)
 800cb0c:	2203      	movs	r2, #3
 800cb0e:	0030      	movs	r0, r6
 800cb10:	7829      	ldrb	r1, [r5, #0]
 800cb12:	f000 f9e7 	bl	800cee4 <memchr>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d006      	beq.n	800cb28 <_svfiprintf_r+0x14c>
 800cb1a:	2340      	movs	r3, #64	; 0x40
 800cb1c:	1b80      	subs	r0, r0, r6
 800cb1e:	4083      	lsls	r3, r0
 800cb20:	6822      	ldr	r2, [r4, #0]
 800cb22:	3501      	adds	r5, #1
 800cb24:	4313      	orrs	r3, r2
 800cb26:	6023      	str	r3, [r4, #0]
 800cb28:	7829      	ldrb	r1, [r5, #0]
 800cb2a:	2206      	movs	r2, #6
 800cb2c:	4828      	ldr	r0, [pc, #160]	; (800cbd0 <_svfiprintf_r+0x1f4>)
 800cb2e:	1c6e      	adds	r6, r5, #1
 800cb30:	7621      	strb	r1, [r4, #24]
 800cb32:	f000 f9d7 	bl	800cee4 <memchr>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d03c      	beq.n	800cbb4 <_svfiprintf_r+0x1d8>
 800cb3a:	4b26      	ldr	r3, [pc, #152]	; (800cbd4 <_svfiprintf_r+0x1f8>)
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d125      	bne.n	800cb8c <_svfiprintf_r+0x1b0>
 800cb40:	2207      	movs	r2, #7
 800cb42:	9b07      	ldr	r3, [sp, #28]
 800cb44:	3307      	adds	r3, #7
 800cb46:	4393      	bics	r3, r2
 800cb48:	3308      	adds	r3, #8
 800cb4a:	9307      	str	r3, [sp, #28]
 800cb4c:	6963      	ldr	r3, [r4, #20]
 800cb4e:	9a04      	ldr	r2, [sp, #16]
 800cb50:	189b      	adds	r3, r3, r2
 800cb52:	6163      	str	r3, [r4, #20]
 800cb54:	e765      	b.n	800ca22 <_svfiprintf_r+0x46>
 800cb56:	4343      	muls	r3, r0
 800cb58:	0035      	movs	r5, r6
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	189b      	adds	r3, r3, r2
 800cb5e:	e7a6      	b.n	800caae <_svfiprintf_r+0xd2>
 800cb60:	2301      	movs	r3, #1
 800cb62:	425b      	negs	r3, r3
 800cb64:	e7d0      	b.n	800cb08 <_svfiprintf_r+0x12c>
 800cb66:	2300      	movs	r3, #0
 800cb68:	200a      	movs	r0, #10
 800cb6a:	001a      	movs	r2, r3
 800cb6c:	3501      	adds	r5, #1
 800cb6e:	6063      	str	r3, [r4, #4]
 800cb70:	7829      	ldrb	r1, [r5, #0]
 800cb72:	1c6e      	adds	r6, r5, #1
 800cb74:	3930      	subs	r1, #48	; 0x30
 800cb76:	2909      	cmp	r1, #9
 800cb78:	d903      	bls.n	800cb82 <_svfiprintf_r+0x1a6>
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d0c5      	beq.n	800cb0a <_svfiprintf_r+0x12e>
 800cb7e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb80:	e7c3      	b.n	800cb0a <_svfiprintf_r+0x12e>
 800cb82:	4342      	muls	r2, r0
 800cb84:	0035      	movs	r5, r6
 800cb86:	2301      	movs	r3, #1
 800cb88:	1852      	adds	r2, r2, r1
 800cb8a:	e7f1      	b.n	800cb70 <_svfiprintf_r+0x194>
 800cb8c:	ab07      	add	r3, sp, #28
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	003a      	movs	r2, r7
 800cb92:	0021      	movs	r1, r4
 800cb94:	4b10      	ldr	r3, [pc, #64]	; (800cbd8 <_svfiprintf_r+0x1fc>)
 800cb96:	9803      	ldr	r0, [sp, #12]
 800cb98:	e000      	b.n	800cb9c <_svfiprintf_r+0x1c0>
 800cb9a:	bf00      	nop
 800cb9c:	9004      	str	r0, [sp, #16]
 800cb9e:	9b04      	ldr	r3, [sp, #16]
 800cba0:	3301      	adds	r3, #1
 800cba2:	d1d3      	bne.n	800cb4c <_svfiprintf_r+0x170>
 800cba4:	89bb      	ldrh	r3, [r7, #12]
 800cba6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cba8:	065b      	lsls	r3, r3, #25
 800cbaa:	d400      	bmi.n	800cbae <_svfiprintf_r+0x1d2>
 800cbac:	e72d      	b.n	800ca0a <_svfiprintf_r+0x2e>
 800cbae:	2001      	movs	r0, #1
 800cbb0:	4240      	negs	r0, r0
 800cbb2:	e72a      	b.n	800ca0a <_svfiprintf_r+0x2e>
 800cbb4:	ab07      	add	r3, sp, #28
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	003a      	movs	r2, r7
 800cbba:	0021      	movs	r1, r4
 800cbbc:	4b06      	ldr	r3, [pc, #24]	; (800cbd8 <_svfiprintf_r+0x1fc>)
 800cbbe:	9803      	ldr	r0, [sp, #12]
 800cbc0:	f000 f87c 	bl	800ccbc <_printf_i>
 800cbc4:	e7ea      	b.n	800cb9c <_svfiprintf_r+0x1c0>
 800cbc6:	46c0      	nop			; (mov r8, r8)
 800cbc8:	0800d204 	.word	0x0800d204
 800cbcc:	0800d20a 	.word	0x0800d20a
 800cbd0:	0800d20e 	.word	0x0800d20e
 800cbd4:	00000000 	.word	0x00000000
 800cbd8:	0800c919 	.word	0x0800c919

0800cbdc <_printf_common>:
 800cbdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbde:	0015      	movs	r5, r2
 800cbe0:	9301      	str	r3, [sp, #4]
 800cbe2:	688a      	ldr	r2, [r1, #8]
 800cbe4:	690b      	ldr	r3, [r1, #16]
 800cbe6:	000c      	movs	r4, r1
 800cbe8:	9000      	str	r0, [sp, #0]
 800cbea:	4293      	cmp	r3, r2
 800cbec:	da00      	bge.n	800cbf0 <_printf_common+0x14>
 800cbee:	0013      	movs	r3, r2
 800cbf0:	0022      	movs	r2, r4
 800cbf2:	602b      	str	r3, [r5, #0]
 800cbf4:	3243      	adds	r2, #67	; 0x43
 800cbf6:	7812      	ldrb	r2, [r2, #0]
 800cbf8:	2a00      	cmp	r2, #0
 800cbfa:	d001      	beq.n	800cc00 <_printf_common+0x24>
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	602b      	str	r3, [r5, #0]
 800cc00:	6823      	ldr	r3, [r4, #0]
 800cc02:	069b      	lsls	r3, r3, #26
 800cc04:	d502      	bpl.n	800cc0c <_printf_common+0x30>
 800cc06:	682b      	ldr	r3, [r5, #0]
 800cc08:	3302      	adds	r3, #2
 800cc0a:	602b      	str	r3, [r5, #0]
 800cc0c:	6822      	ldr	r2, [r4, #0]
 800cc0e:	2306      	movs	r3, #6
 800cc10:	0017      	movs	r7, r2
 800cc12:	401f      	ands	r7, r3
 800cc14:	421a      	tst	r2, r3
 800cc16:	d027      	beq.n	800cc68 <_printf_common+0x8c>
 800cc18:	0023      	movs	r3, r4
 800cc1a:	3343      	adds	r3, #67	; 0x43
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	1e5a      	subs	r2, r3, #1
 800cc20:	4193      	sbcs	r3, r2
 800cc22:	6822      	ldr	r2, [r4, #0]
 800cc24:	0692      	lsls	r2, r2, #26
 800cc26:	d430      	bmi.n	800cc8a <_printf_common+0xae>
 800cc28:	0022      	movs	r2, r4
 800cc2a:	9901      	ldr	r1, [sp, #4]
 800cc2c:	9800      	ldr	r0, [sp, #0]
 800cc2e:	9e08      	ldr	r6, [sp, #32]
 800cc30:	3243      	adds	r2, #67	; 0x43
 800cc32:	47b0      	blx	r6
 800cc34:	1c43      	adds	r3, r0, #1
 800cc36:	d025      	beq.n	800cc84 <_printf_common+0xa8>
 800cc38:	2306      	movs	r3, #6
 800cc3a:	6820      	ldr	r0, [r4, #0]
 800cc3c:	682a      	ldr	r2, [r5, #0]
 800cc3e:	68e1      	ldr	r1, [r4, #12]
 800cc40:	2500      	movs	r5, #0
 800cc42:	4003      	ands	r3, r0
 800cc44:	2b04      	cmp	r3, #4
 800cc46:	d103      	bne.n	800cc50 <_printf_common+0x74>
 800cc48:	1a8d      	subs	r5, r1, r2
 800cc4a:	43eb      	mvns	r3, r5
 800cc4c:	17db      	asrs	r3, r3, #31
 800cc4e:	401d      	ands	r5, r3
 800cc50:	68a3      	ldr	r3, [r4, #8]
 800cc52:	6922      	ldr	r2, [r4, #16]
 800cc54:	4293      	cmp	r3, r2
 800cc56:	dd01      	ble.n	800cc5c <_printf_common+0x80>
 800cc58:	1a9b      	subs	r3, r3, r2
 800cc5a:	18ed      	adds	r5, r5, r3
 800cc5c:	2700      	movs	r7, #0
 800cc5e:	42bd      	cmp	r5, r7
 800cc60:	d120      	bne.n	800cca4 <_printf_common+0xc8>
 800cc62:	2000      	movs	r0, #0
 800cc64:	e010      	b.n	800cc88 <_printf_common+0xac>
 800cc66:	3701      	adds	r7, #1
 800cc68:	68e3      	ldr	r3, [r4, #12]
 800cc6a:	682a      	ldr	r2, [r5, #0]
 800cc6c:	1a9b      	subs	r3, r3, r2
 800cc6e:	42bb      	cmp	r3, r7
 800cc70:	ddd2      	ble.n	800cc18 <_printf_common+0x3c>
 800cc72:	0022      	movs	r2, r4
 800cc74:	2301      	movs	r3, #1
 800cc76:	9901      	ldr	r1, [sp, #4]
 800cc78:	9800      	ldr	r0, [sp, #0]
 800cc7a:	9e08      	ldr	r6, [sp, #32]
 800cc7c:	3219      	adds	r2, #25
 800cc7e:	47b0      	blx	r6
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	d1f0      	bne.n	800cc66 <_printf_common+0x8a>
 800cc84:	2001      	movs	r0, #1
 800cc86:	4240      	negs	r0, r0
 800cc88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc8a:	2030      	movs	r0, #48	; 0x30
 800cc8c:	18e1      	adds	r1, r4, r3
 800cc8e:	3143      	adds	r1, #67	; 0x43
 800cc90:	7008      	strb	r0, [r1, #0]
 800cc92:	0021      	movs	r1, r4
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	3145      	adds	r1, #69	; 0x45
 800cc98:	7809      	ldrb	r1, [r1, #0]
 800cc9a:	18a2      	adds	r2, r4, r2
 800cc9c:	3243      	adds	r2, #67	; 0x43
 800cc9e:	3302      	adds	r3, #2
 800cca0:	7011      	strb	r1, [r2, #0]
 800cca2:	e7c1      	b.n	800cc28 <_printf_common+0x4c>
 800cca4:	0022      	movs	r2, r4
 800cca6:	2301      	movs	r3, #1
 800cca8:	9901      	ldr	r1, [sp, #4]
 800ccaa:	9800      	ldr	r0, [sp, #0]
 800ccac:	9e08      	ldr	r6, [sp, #32]
 800ccae:	321a      	adds	r2, #26
 800ccb0:	47b0      	blx	r6
 800ccb2:	1c43      	adds	r3, r0, #1
 800ccb4:	d0e6      	beq.n	800cc84 <_printf_common+0xa8>
 800ccb6:	3701      	adds	r7, #1
 800ccb8:	e7d1      	b.n	800cc5e <_printf_common+0x82>
	...

0800ccbc <_printf_i>:
 800ccbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccbe:	b08b      	sub	sp, #44	; 0x2c
 800ccc0:	9206      	str	r2, [sp, #24]
 800ccc2:	000a      	movs	r2, r1
 800ccc4:	3243      	adds	r2, #67	; 0x43
 800ccc6:	9307      	str	r3, [sp, #28]
 800ccc8:	9005      	str	r0, [sp, #20]
 800ccca:	9204      	str	r2, [sp, #16]
 800cccc:	7e0a      	ldrb	r2, [r1, #24]
 800ccce:	000c      	movs	r4, r1
 800ccd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccd2:	2a78      	cmp	r2, #120	; 0x78
 800ccd4:	d806      	bhi.n	800cce4 <_printf_i+0x28>
 800ccd6:	2a62      	cmp	r2, #98	; 0x62
 800ccd8:	d808      	bhi.n	800ccec <_printf_i+0x30>
 800ccda:	2a00      	cmp	r2, #0
 800ccdc:	d100      	bne.n	800cce0 <_printf_i+0x24>
 800ccde:	e0c0      	b.n	800ce62 <_printf_i+0x1a6>
 800cce0:	2a58      	cmp	r2, #88	; 0x58
 800cce2:	d052      	beq.n	800cd8a <_printf_i+0xce>
 800cce4:	0026      	movs	r6, r4
 800cce6:	3642      	adds	r6, #66	; 0x42
 800cce8:	7032      	strb	r2, [r6, #0]
 800ccea:	e022      	b.n	800cd32 <_printf_i+0x76>
 800ccec:	0010      	movs	r0, r2
 800ccee:	3863      	subs	r0, #99	; 0x63
 800ccf0:	2815      	cmp	r0, #21
 800ccf2:	d8f7      	bhi.n	800cce4 <_printf_i+0x28>
 800ccf4:	f7f3 fa10 	bl	8000118 <__gnu_thumb1_case_shi>
 800ccf8:	001f0016 	.word	0x001f0016
 800ccfc:	fff6fff6 	.word	0xfff6fff6
 800cd00:	fff6fff6 	.word	0xfff6fff6
 800cd04:	fff6001f 	.word	0xfff6001f
 800cd08:	fff6fff6 	.word	0xfff6fff6
 800cd0c:	00a8fff6 	.word	0x00a8fff6
 800cd10:	009a0036 	.word	0x009a0036
 800cd14:	fff6fff6 	.word	0xfff6fff6
 800cd18:	fff600b9 	.word	0xfff600b9
 800cd1c:	fff60036 	.word	0xfff60036
 800cd20:	009efff6 	.word	0x009efff6
 800cd24:	0026      	movs	r6, r4
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	3642      	adds	r6, #66	; 0x42
 800cd2a:	1d11      	adds	r1, r2, #4
 800cd2c:	6019      	str	r1, [r3, #0]
 800cd2e:	6813      	ldr	r3, [r2, #0]
 800cd30:	7033      	strb	r3, [r6, #0]
 800cd32:	2301      	movs	r3, #1
 800cd34:	e0a7      	b.n	800ce86 <_printf_i+0x1ca>
 800cd36:	6808      	ldr	r0, [r1, #0]
 800cd38:	6819      	ldr	r1, [r3, #0]
 800cd3a:	1d0a      	adds	r2, r1, #4
 800cd3c:	0605      	lsls	r5, r0, #24
 800cd3e:	d50b      	bpl.n	800cd58 <_printf_i+0x9c>
 800cd40:	680d      	ldr	r5, [r1, #0]
 800cd42:	601a      	str	r2, [r3, #0]
 800cd44:	2d00      	cmp	r5, #0
 800cd46:	da03      	bge.n	800cd50 <_printf_i+0x94>
 800cd48:	232d      	movs	r3, #45	; 0x2d
 800cd4a:	9a04      	ldr	r2, [sp, #16]
 800cd4c:	426d      	negs	r5, r5
 800cd4e:	7013      	strb	r3, [r2, #0]
 800cd50:	4b61      	ldr	r3, [pc, #388]	; (800ced8 <_printf_i+0x21c>)
 800cd52:	270a      	movs	r7, #10
 800cd54:	9303      	str	r3, [sp, #12]
 800cd56:	e032      	b.n	800cdbe <_printf_i+0x102>
 800cd58:	680d      	ldr	r5, [r1, #0]
 800cd5a:	601a      	str	r2, [r3, #0]
 800cd5c:	0641      	lsls	r1, r0, #25
 800cd5e:	d5f1      	bpl.n	800cd44 <_printf_i+0x88>
 800cd60:	b22d      	sxth	r5, r5
 800cd62:	e7ef      	b.n	800cd44 <_printf_i+0x88>
 800cd64:	680d      	ldr	r5, [r1, #0]
 800cd66:	6819      	ldr	r1, [r3, #0]
 800cd68:	1d08      	adds	r0, r1, #4
 800cd6a:	6018      	str	r0, [r3, #0]
 800cd6c:	062e      	lsls	r6, r5, #24
 800cd6e:	d501      	bpl.n	800cd74 <_printf_i+0xb8>
 800cd70:	680d      	ldr	r5, [r1, #0]
 800cd72:	e003      	b.n	800cd7c <_printf_i+0xc0>
 800cd74:	066d      	lsls	r5, r5, #25
 800cd76:	d5fb      	bpl.n	800cd70 <_printf_i+0xb4>
 800cd78:	680d      	ldr	r5, [r1, #0]
 800cd7a:	b2ad      	uxth	r5, r5
 800cd7c:	4b56      	ldr	r3, [pc, #344]	; (800ced8 <_printf_i+0x21c>)
 800cd7e:	270a      	movs	r7, #10
 800cd80:	9303      	str	r3, [sp, #12]
 800cd82:	2a6f      	cmp	r2, #111	; 0x6f
 800cd84:	d117      	bne.n	800cdb6 <_printf_i+0xfa>
 800cd86:	2708      	movs	r7, #8
 800cd88:	e015      	b.n	800cdb6 <_printf_i+0xfa>
 800cd8a:	3145      	adds	r1, #69	; 0x45
 800cd8c:	700a      	strb	r2, [r1, #0]
 800cd8e:	4a52      	ldr	r2, [pc, #328]	; (800ced8 <_printf_i+0x21c>)
 800cd90:	9203      	str	r2, [sp, #12]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	6821      	ldr	r1, [r4, #0]
 800cd96:	ca20      	ldmia	r2!, {r5}
 800cd98:	601a      	str	r2, [r3, #0]
 800cd9a:	0608      	lsls	r0, r1, #24
 800cd9c:	d550      	bpl.n	800ce40 <_printf_i+0x184>
 800cd9e:	07cb      	lsls	r3, r1, #31
 800cda0:	d502      	bpl.n	800cda8 <_printf_i+0xec>
 800cda2:	2320      	movs	r3, #32
 800cda4:	4319      	orrs	r1, r3
 800cda6:	6021      	str	r1, [r4, #0]
 800cda8:	2710      	movs	r7, #16
 800cdaa:	2d00      	cmp	r5, #0
 800cdac:	d103      	bne.n	800cdb6 <_printf_i+0xfa>
 800cdae:	2320      	movs	r3, #32
 800cdb0:	6822      	ldr	r2, [r4, #0]
 800cdb2:	439a      	bics	r2, r3
 800cdb4:	6022      	str	r2, [r4, #0]
 800cdb6:	0023      	movs	r3, r4
 800cdb8:	2200      	movs	r2, #0
 800cdba:	3343      	adds	r3, #67	; 0x43
 800cdbc:	701a      	strb	r2, [r3, #0]
 800cdbe:	6863      	ldr	r3, [r4, #4]
 800cdc0:	60a3      	str	r3, [r4, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	db03      	blt.n	800cdce <_printf_i+0x112>
 800cdc6:	2204      	movs	r2, #4
 800cdc8:	6821      	ldr	r1, [r4, #0]
 800cdca:	4391      	bics	r1, r2
 800cdcc:	6021      	str	r1, [r4, #0]
 800cdce:	2d00      	cmp	r5, #0
 800cdd0:	d102      	bne.n	800cdd8 <_printf_i+0x11c>
 800cdd2:	9e04      	ldr	r6, [sp, #16]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d00c      	beq.n	800cdf2 <_printf_i+0x136>
 800cdd8:	9e04      	ldr	r6, [sp, #16]
 800cdda:	0028      	movs	r0, r5
 800cddc:	0039      	movs	r1, r7
 800cdde:	f7f3 fa2b 	bl	8000238 <__aeabi_uidivmod>
 800cde2:	9b03      	ldr	r3, [sp, #12]
 800cde4:	3e01      	subs	r6, #1
 800cde6:	5c5b      	ldrb	r3, [r3, r1]
 800cde8:	7033      	strb	r3, [r6, #0]
 800cdea:	002b      	movs	r3, r5
 800cdec:	0005      	movs	r5, r0
 800cdee:	429f      	cmp	r7, r3
 800cdf0:	d9f3      	bls.n	800cdda <_printf_i+0x11e>
 800cdf2:	2f08      	cmp	r7, #8
 800cdf4:	d109      	bne.n	800ce0a <_printf_i+0x14e>
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	07db      	lsls	r3, r3, #31
 800cdfa:	d506      	bpl.n	800ce0a <_printf_i+0x14e>
 800cdfc:	6863      	ldr	r3, [r4, #4]
 800cdfe:	6922      	ldr	r2, [r4, #16]
 800ce00:	4293      	cmp	r3, r2
 800ce02:	dc02      	bgt.n	800ce0a <_printf_i+0x14e>
 800ce04:	2330      	movs	r3, #48	; 0x30
 800ce06:	3e01      	subs	r6, #1
 800ce08:	7033      	strb	r3, [r6, #0]
 800ce0a:	9b04      	ldr	r3, [sp, #16]
 800ce0c:	1b9b      	subs	r3, r3, r6
 800ce0e:	6123      	str	r3, [r4, #16]
 800ce10:	9b07      	ldr	r3, [sp, #28]
 800ce12:	0021      	movs	r1, r4
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	9805      	ldr	r0, [sp, #20]
 800ce18:	9b06      	ldr	r3, [sp, #24]
 800ce1a:	aa09      	add	r2, sp, #36	; 0x24
 800ce1c:	f7ff fede 	bl	800cbdc <_printf_common>
 800ce20:	1c43      	adds	r3, r0, #1
 800ce22:	d135      	bne.n	800ce90 <_printf_i+0x1d4>
 800ce24:	2001      	movs	r0, #1
 800ce26:	4240      	negs	r0, r0
 800ce28:	b00b      	add	sp, #44	; 0x2c
 800ce2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce2c:	2220      	movs	r2, #32
 800ce2e:	6809      	ldr	r1, [r1, #0]
 800ce30:	430a      	orrs	r2, r1
 800ce32:	6022      	str	r2, [r4, #0]
 800ce34:	0022      	movs	r2, r4
 800ce36:	2178      	movs	r1, #120	; 0x78
 800ce38:	3245      	adds	r2, #69	; 0x45
 800ce3a:	7011      	strb	r1, [r2, #0]
 800ce3c:	4a27      	ldr	r2, [pc, #156]	; (800cedc <_printf_i+0x220>)
 800ce3e:	e7a7      	b.n	800cd90 <_printf_i+0xd4>
 800ce40:	0648      	lsls	r0, r1, #25
 800ce42:	d5ac      	bpl.n	800cd9e <_printf_i+0xe2>
 800ce44:	b2ad      	uxth	r5, r5
 800ce46:	e7aa      	b.n	800cd9e <_printf_i+0xe2>
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	680d      	ldr	r5, [r1, #0]
 800ce4c:	1d10      	adds	r0, r2, #4
 800ce4e:	6949      	ldr	r1, [r1, #20]
 800ce50:	6018      	str	r0, [r3, #0]
 800ce52:	6813      	ldr	r3, [r2, #0]
 800ce54:	062e      	lsls	r6, r5, #24
 800ce56:	d501      	bpl.n	800ce5c <_printf_i+0x1a0>
 800ce58:	6019      	str	r1, [r3, #0]
 800ce5a:	e002      	b.n	800ce62 <_printf_i+0x1a6>
 800ce5c:	066d      	lsls	r5, r5, #25
 800ce5e:	d5fb      	bpl.n	800ce58 <_printf_i+0x19c>
 800ce60:	8019      	strh	r1, [r3, #0]
 800ce62:	2300      	movs	r3, #0
 800ce64:	9e04      	ldr	r6, [sp, #16]
 800ce66:	6123      	str	r3, [r4, #16]
 800ce68:	e7d2      	b.n	800ce10 <_printf_i+0x154>
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	1d11      	adds	r1, r2, #4
 800ce6e:	6019      	str	r1, [r3, #0]
 800ce70:	6816      	ldr	r6, [r2, #0]
 800ce72:	2100      	movs	r1, #0
 800ce74:	0030      	movs	r0, r6
 800ce76:	6862      	ldr	r2, [r4, #4]
 800ce78:	f000 f834 	bl	800cee4 <memchr>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d001      	beq.n	800ce84 <_printf_i+0x1c8>
 800ce80:	1b80      	subs	r0, r0, r6
 800ce82:	6060      	str	r0, [r4, #4]
 800ce84:	6863      	ldr	r3, [r4, #4]
 800ce86:	6123      	str	r3, [r4, #16]
 800ce88:	2300      	movs	r3, #0
 800ce8a:	9a04      	ldr	r2, [sp, #16]
 800ce8c:	7013      	strb	r3, [r2, #0]
 800ce8e:	e7bf      	b.n	800ce10 <_printf_i+0x154>
 800ce90:	6923      	ldr	r3, [r4, #16]
 800ce92:	0032      	movs	r2, r6
 800ce94:	9906      	ldr	r1, [sp, #24]
 800ce96:	9805      	ldr	r0, [sp, #20]
 800ce98:	9d07      	ldr	r5, [sp, #28]
 800ce9a:	47a8      	blx	r5
 800ce9c:	1c43      	adds	r3, r0, #1
 800ce9e:	d0c1      	beq.n	800ce24 <_printf_i+0x168>
 800cea0:	6823      	ldr	r3, [r4, #0]
 800cea2:	079b      	lsls	r3, r3, #30
 800cea4:	d415      	bmi.n	800ced2 <_printf_i+0x216>
 800cea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea8:	68e0      	ldr	r0, [r4, #12]
 800ceaa:	4298      	cmp	r0, r3
 800ceac:	dabc      	bge.n	800ce28 <_printf_i+0x16c>
 800ceae:	0018      	movs	r0, r3
 800ceb0:	e7ba      	b.n	800ce28 <_printf_i+0x16c>
 800ceb2:	0022      	movs	r2, r4
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	9906      	ldr	r1, [sp, #24]
 800ceb8:	9805      	ldr	r0, [sp, #20]
 800ceba:	9e07      	ldr	r6, [sp, #28]
 800cebc:	3219      	adds	r2, #25
 800cebe:	47b0      	blx	r6
 800cec0:	1c43      	adds	r3, r0, #1
 800cec2:	d0af      	beq.n	800ce24 <_printf_i+0x168>
 800cec4:	3501      	adds	r5, #1
 800cec6:	68e3      	ldr	r3, [r4, #12]
 800cec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceca:	1a9b      	subs	r3, r3, r2
 800cecc:	42ab      	cmp	r3, r5
 800cece:	dcf0      	bgt.n	800ceb2 <_printf_i+0x1f6>
 800ced0:	e7e9      	b.n	800cea6 <_printf_i+0x1ea>
 800ced2:	2500      	movs	r5, #0
 800ced4:	e7f7      	b.n	800cec6 <_printf_i+0x20a>
 800ced6:	46c0      	nop			; (mov r8, r8)
 800ced8:	0800d215 	.word	0x0800d215
 800cedc:	0800d226 	.word	0x0800d226

0800cee0 <__retarget_lock_acquire_recursive>:
 800cee0:	4770      	bx	lr

0800cee2 <__retarget_lock_release_recursive>:
 800cee2:	4770      	bx	lr

0800cee4 <memchr>:
 800cee4:	b2c9      	uxtb	r1, r1
 800cee6:	1882      	adds	r2, r0, r2
 800cee8:	4290      	cmp	r0, r2
 800ceea:	d101      	bne.n	800cef0 <memchr+0xc>
 800ceec:	2000      	movs	r0, #0
 800ceee:	4770      	bx	lr
 800cef0:	7803      	ldrb	r3, [r0, #0]
 800cef2:	428b      	cmp	r3, r1
 800cef4:	d0fb      	beq.n	800ceee <memchr+0xa>
 800cef6:	3001      	adds	r0, #1
 800cef8:	e7f6      	b.n	800cee8 <memchr+0x4>

0800cefa <memcpy>:
 800cefa:	2300      	movs	r3, #0
 800cefc:	b510      	push	{r4, lr}
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d100      	bne.n	800cf04 <memcpy+0xa>
 800cf02:	bd10      	pop	{r4, pc}
 800cf04:	5ccc      	ldrb	r4, [r1, r3]
 800cf06:	54c4      	strb	r4, [r0, r3]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	e7f8      	b.n	800cefe <memcpy+0x4>

0800cf0c <memmove>:
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	4288      	cmp	r0, r1
 800cf10:	d902      	bls.n	800cf18 <memmove+0xc>
 800cf12:	188b      	adds	r3, r1, r2
 800cf14:	4298      	cmp	r0, r3
 800cf16:	d303      	bcc.n	800cf20 <memmove+0x14>
 800cf18:	2300      	movs	r3, #0
 800cf1a:	e007      	b.n	800cf2c <memmove+0x20>
 800cf1c:	5c8b      	ldrb	r3, [r1, r2]
 800cf1e:	5483      	strb	r3, [r0, r2]
 800cf20:	3a01      	subs	r2, #1
 800cf22:	d2fb      	bcs.n	800cf1c <memmove+0x10>
 800cf24:	bd10      	pop	{r4, pc}
 800cf26:	5ccc      	ldrb	r4, [r1, r3]
 800cf28:	54c4      	strb	r4, [r0, r3]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d1fa      	bne.n	800cf26 <memmove+0x1a>
 800cf30:	e7f8      	b.n	800cf24 <memmove+0x18>

0800cf32 <_realloc_r>:
 800cf32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf34:	0007      	movs	r7, r0
 800cf36:	000d      	movs	r5, r1
 800cf38:	0016      	movs	r6, r2
 800cf3a:	2900      	cmp	r1, #0
 800cf3c:	d105      	bne.n	800cf4a <_realloc_r+0x18>
 800cf3e:	0011      	movs	r1, r2
 800cf40:	f7ff fc4a 	bl	800c7d8 <_malloc_r>
 800cf44:	0004      	movs	r4, r0
 800cf46:	0020      	movs	r0, r4
 800cf48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf4a:	2a00      	cmp	r2, #0
 800cf4c:	d103      	bne.n	800cf56 <_realloc_r+0x24>
 800cf4e:	f7ff fbf9 	bl	800c744 <_free_r>
 800cf52:	0034      	movs	r4, r6
 800cf54:	e7f7      	b.n	800cf46 <_realloc_r+0x14>
 800cf56:	f000 f812 	bl	800cf7e <_malloc_usable_size_r>
 800cf5a:	002c      	movs	r4, r5
 800cf5c:	42b0      	cmp	r0, r6
 800cf5e:	d2f2      	bcs.n	800cf46 <_realloc_r+0x14>
 800cf60:	0031      	movs	r1, r6
 800cf62:	0038      	movs	r0, r7
 800cf64:	f7ff fc38 	bl	800c7d8 <_malloc_r>
 800cf68:	1e04      	subs	r4, r0, #0
 800cf6a:	d0ec      	beq.n	800cf46 <_realloc_r+0x14>
 800cf6c:	0029      	movs	r1, r5
 800cf6e:	0032      	movs	r2, r6
 800cf70:	f7ff ffc3 	bl	800cefa <memcpy>
 800cf74:	0029      	movs	r1, r5
 800cf76:	0038      	movs	r0, r7
 800cf78:	f7ff fbe4 	bl	800c744 <_free_r>
 800cf7c:	e7e3      	b.n	800cf46 <_realloc_r+0x14>

0800cf7e <_malloc_usable_size_r>:
 800cf7e:	1f0b      	subs	r3, r1, #4
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	1f18      	subs	r0, r3, #4
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	da01      	bge.n	800cf8c <_malloc_usable_size_r+0xe>
 800cf88:	580b      	ldr	r3, [r1, r0]
 800cf8a:	18c0      	adds	r0, r0, r3
 800cf8c:	4770      	bx	lr
	...

0800cf90 <_init>:
 800cf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf92:	46c0      	nop			; (mov r8, r8)
 800cf94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf96:	bc08      	pop	{r3}
 800cf98:	469e      	mov	lr, r3
 800cf9a:	4770      	bx	lr

0800cf9c <_fini>:
 800cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9e:	46c0      	nop			; (mov r8, r8)
 800cfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfa2:	bc08      	pop	{r3}
 800cfa4:	469e      	mov	lr, r3
 800cfa6:	4770      	bx	lr
